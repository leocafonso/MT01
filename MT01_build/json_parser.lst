* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Mon Mar 20 17:54:07 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  20-Mar-2017 17:54:07
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=json_parser.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=json_parser.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;json_parser.c
                                 
                                 		.glb	__Ctype
                                 		.glb	__Tolotab
                                 		.glb	__Stderr
                                 		.glb	_status_code
                                 		.glb	_nvl
                                 		.glb	_cs
                                 		.glb	_cm
                                 		.glb	_js
                                 		.glb	_json_parser
                                 		.glb	_nv_print_list
                                 		.glb	_sr_request_status_report
                                 		.glb	_nv_reset_nv_list
                                 		.glb	_nv_get_index
                                 		.glb	_nv_index_is_group
                                 		.glb	_nv_group_is_prefixed
                                 		.glb	_nv_get
                                 		.glb	_nv_set
                                 		.glb	_nv_persist
                                 		.glb	_nv_reset_nv
                                 		.glb	_strchr
                                 		.glb	_strtod
                                 		.glb	_strtoul
                                 		.glb	_nv_copy_string
                                 		.glb	_strpbrk
                                 		.glb	_json_serialize
                                 		.glb	_sprintf
                                 		.glb	__FDclass
                                 		.glb	_preprocess_float
                                 		.glb	_fntoa
                                 		.glb	_json_print_object
                                 		.glb	_fprintf
                                 		.glb	_json_print_list
                                 		.glb	_json_print_response
                                 		.glb	_nv_add_string
                                 		.glb	_escape_string
                                 		.glb	_nv_get_type
                                 		.glb	_compute_checksum
                                 		.glb	_json_set_jv
                                 		.glb	_js_print_ej
                                 		.glb	_text_print_ui8
                                 		.glb	_js_print_jv
                                 		.glb	_js_print_js
                                 		.glb	_js_print_fs
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _json_parser:
                                 		.STACK	_json_parser=12
                                 ;       1 /*
                                 ;       2  * json_parser.c - JSON parser for TinyG
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2011 - 2015 Alden S. Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * As a special exception, you may use this file as part of a software library without
                                 ;      13  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      14  * inline functions from this file, or you compile this file and link it with  other
                                 ;      15  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      16  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      17  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      18  * GNU General Public License.
                                 ;      19  *
                                 ;      20  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      21  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      22  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      23  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      24  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      25  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      26  */
                                 ;      27 
                                 ;      28 #include "tinyg.h"
                                 ;      29 #include "config.h"					// JSON sits on top of the config system
                                 ;      30 #include "controller.h"
                                 ;      31 #include "json_parser.h"
                                 ;      32 #include "text_parser.h"
                                 ;      33 #include "canonical_machine.h"
                                 ;      34 #include "report.h"
                                 ;      35 #include "util.h"
                                 ;      36 #include "xio.h"					// for char definitions
                                 ;      37 
                                 ;      38 #ifdef __cplusplus
                                 ;      39 extern "C"{
                                 ;      40 #endif
                                 ;      41 
                                 ;      42 /**** Allocation ****/
                                 ;      43 
                                 ;      44 jsSingleton_t js;
                                 ;      45 
                                 ;      46 /**** local scope stuff ****/
                                 ;      47 
                                 ;      48 static stat_t _json_parser_kernal(char_t *str);
                                 ;      49 static stat_t _get_nv_pair(nvObj_t *nv, char_t **pstr, int8_t *depth);
                                 ;      50 static stat_t _normalize_json_string(char_t *str, uint16_t size);
                                 ;      51 
                                 ;      52 /****************************************************************************
                                 ;      53  * json_parser() - exposed part of JSON parser
                                 ;      54  * _json_parser_kernal()
                                 ;      55  * _normalize_json_string()
                                 ;      56  * _get_nv_pair_strict()
                                 ;      57  *
                                 ;      58  *	This is a dumbed down JSON parser to fit in limited memory with no malloc
                                 ;      59  *	or practical way to do recursion ("depth" tracks parent/child levels).
                                 ;      60  *
                                 ;      61  *	This function will parse the following forms up to the JSON_MAX limits:
                                 ;      62  *	  {"name":"value"}
                                 ;      63  *	  {"name":12345}
                                 ;      64  *	  {"name1":"value1", "n2":"v2", ... "nN":"vN"}
                                 ;      65  *	  {"parent_name":""}
                                 ;      66  *	  {"parent_name":{"name":"value"}}
                                 ;      67  *	  {"parent_name":{"name1":"value1", "n2":"v2", ... "nN":"vN"}}
                                 ;      68  *
                                 ;      69  *	  "value" can be a string, number, true, false, or null (2 types)
                                 ;      70  *
                                 ;      71  *	Numbers
                                 ;      72  *	  - number values are not quoted and can start with a digit or -.
                                 ;      73  *	  - numbers cannot start with + or . (period)
                                 ;      74  *	  - exponentiated numbers are handled OK.
                                 ;      75  *	  - hexadecimal or other non-decimal number bases are not supported
                                 ;      76  *
                                 ;      77  *	The parser:
                                 ;      78  *	  - extracts an array of one or more JSON object structs from the input string
                                 ;      79  *	  - once the array is built it executes the object(s) in order in the array
                                 ;      80  *	  - passes the executed array to the response handler to generate the response string
                                 ;      81  *	  - returns the status and the JSON response string
                                 ;      82  *
                                 ;      83  *	Separation of concerns
                                 ;      84  *	  json_parser() is the only exposed part. It does parsing, display, and status reports.
                                 ;      85  *	  _get_nv_pair() only does parsing and syntax; no semantic validation or group handling
                                 ;      86  *	  _json_parser_kernal() does index validation and group handling and executes sets and gets
                                 ;      87  *		in an application agnostic way. It should work for other apps than TinyG
                                 ;      88  */
                                 ;      89 
                                 ;      90 void json_parser(char_t *str)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",90
00000000 6080                    		SUB #08H, R0
00000002 A009                    		MOV.L R1, 04H[R0]
                                 ;      91 {
                                 ;      92 	stat_t status = _json_parser_kernal(str);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",92
00000004 39rrrr               W  		BSR __$_json_parser_kernal
00000007 8089                    		MOV.B R1, 03H[R0]
00000009                         L31:	; entry.split
                                 ;      93 	nv_print_list(status, TEXT_NO_PRINT, JSON_RESPONSE_FORMAT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",93
00000009 B089                    		MOVU.B 03H[R0], R1
0000000B 6623                    		MOV.L #00000002H, R3
0000000D 6602                    		MOV.L #00000000H, R2
0000000F 05rrrrrr             A  		BSR _nv_print_list
00000013                         L32:	; entry.split1
00000013 6611                    		MOV.L #00000001H, R1
                                 ;      94 	sr_request_status_report(SR_IMMEDIATE_REQUEST); // generate incremental status report to show any changes
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",94
00000015 05rrrrrr             A  		BSR _sr_request_status_report
00000019 6702                    		RTSD #08H
0000001B                         __$_json_parser_kernal:
                                 		.STACK	__$_json_parser_kernal=32
                                 ;      95 }
                                 ;      96 
                                 ;      97 static stat_t _json_parser_kernal(char_t *str)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",97
0000001B 7EA6                    		PUSH.L R6
0000001D 7100E8                  		ADD #0FFFFFFE8H, R0
00000020 A109                    		MOV.L R1, 14H[R0]
                                 ;      98 {
                                 ;      99 	stat_t status;
                                 ;     100 	int8_t depth;
                                 ;     101 	nvObj_t *nv = nv_reset_nv_list();				// get a fresh nvObj list
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",101
00000022 05rrrrrr             A  		BSR _nv_reset_nv_list
00000026 A081                    		MOV.L R1, 08H[R0]
00000028                         L34:	; entry.split
                                 ;     102 	char_t group[GROUP_LEN+1] = {""};				// group identifier - starts as NUL
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",102
00000028 FBE2rrrrrrrr            		MOV.L #_L10, R14
0000002E C4E00E                  		MOV.B [R14], 0EH[R0]
00000031 C5E0010F                		MOV.B 01H[R14], 0FH[R0]
00000035 C5E00210                		MOV.B 02H[R14], 10H[R0]
00000039 C5E00311                		MOV.B 03H[R14], 11H[R0]
0000003D                         L35:	; entry.split1
                                 ;     103 	int8_t i = NV_BODY_LEN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",103
0000003D 3C821E                  		MOV.B #1EH, 12H[R0]
00000040                         L36:	; entry.split2
                                 ;     104 
                                 ;     105 	ritorno(_normalize_json_string(str, JSON_OUTPUT_STRING_MAX));	// return if error
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",105
00000040 A909                    		MOV.L 14H[R0], R1
00000042 FB2A0002                		MOV.L #00000200H, R2
00000046 39rrrr               W  		BSR __$_normalize_json_string
00000049 FBE2rrrrrrrr            		MOV.L #_status_code, R14
0000004F C3E1                    		MOV.B R1, [R14]
00000051 6101                    		CMP #00H, R1
00000053 20rr                    		BEQ L38
00000055                         L37:	; bb16
00000055 FBE2rrrrrrrr            		MOV.L #_status_code, R14
0000005B C4E005                  		MOV.B [R14], 05H[R0]
0000005E 38rrrr               W  		BRA L65
00000061                         L38:	; bb27
                                 ;     106 
                                 ;     107 	// parse the JSON command into the nv body
                                 ;     108 	do {
                                 ;     109 		if (--i == 0)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",109
00000061 B481                    		MOVU.B 12H[R0], R1
00000063 6011                    		SUB #01H, R1
00000065 8481                    		MOV.B R1, 12H[R0]
00000067 8C81                    		MOV.B 12H[R0], R1
00000069 6101                    		CMP #00H, R1
0000006B 18                   S  		BNE L40
0000006C                         L39:	; bb28
                                 ;     110             return (STAT_JSON_TOO_MANY_PAIRS);      // length error
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",110
0000006C 3C0570                  		MOV.B #70H, 05H[R0]
0000006F 38rrrr               W  		BRA L65
00000072                         L40:	; bb38
                                 ;     111 
                                 ;     112         // Use relaxed parser. Will read eitehr strict or relaxed mode. To use strict-only parser refer
                                 ;     113         // to build earlier than 407.03. Substitute _get_nv_pair_strict() for _get_nv_pair()
                                 ;     114 		if ((status = _get_nv_pair(nv, &str, &depth)) > STAT_EAGAIN) { // erred out
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",114
00000072 A881                    		MOV.L 08H[R0], R1
00000074 710307                  		ADD #07H, R0, R3
00000077 710214                  		ADD #14H, R0, R2
0000007A 39rrrr               W  		BSR __$_get_nv_pair
0000007D 8181                    		MOV.B R1, 06H[R0]
0000007F B181                    		MOVU.B 06H[R0], R1
00000081 6131                    		CMP #03H, R1
00000083 29rr                    		BLT L42
00000085                         L41:	; bb39
                                 ;     115 			return (status);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",115
00000085 C5000605                		MOV.B 06H[R0], 05H[R0]
00000089 38rrrr               W  		BRA L65
0000008C                         L42:	; bb50
                                 ;     116 		}
                                 ;     117 		// propagate the group from previous NV pair (if relevant)
                                 ;     118 		if (group[0] != NUL) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",118
0000008C B381                    		MOVU.B 0EH[R0], R1
0000008E 6101                    		CMP #00H, R1
00000090 20rr                    		BEQ L44
00000092                         L43:	; bb51
                                 ;     119 			strncpy(nv->group, group, GROUP_LEN);	// copy the parent's group to this child
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",119
00000092 A884                    		MOV.L 08H[R0], R4
00000094 714114                  		ADD #14H, R4, R1
00000097 6633                    		MOV.L #00000003H, R3
00000099 71020E                  		ADD #0EH, R0, R2
0000009C 7F87                    		SMOVU
0000009E 714417                  		ADD #17H, R4
000000A1 EF41                    		MOV.L R4, R1
000000A3 4331                    		SUB R3, R1
000000A5 6602                    		MOV.L #00000000H, R2
000000A7 7F88                    		SSTR.B
000000A9                         L44:	; bb64
                                 ;     120 		}
                                 ;     121 		// validate the token and get the index
                                 ;     122 		if ((nv->index = nv_get_index(nv->group, nv->token)) == NO_MATCH) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",122
000000A9 A886                    		MOV.L 08H[R0], R6
000000AB 716218                  		ADD #18H, R6, R2
000000AE 716114                  		ADD #14H, R6, R1
000000B1 05rrrrrr             A  		BSR _nv_get_index
000000B5 9161                    		MOV.W R1, 08H[R6]
000000B7 7701FFFF00              		CMP #0FFFFH, R1
000000BC 18                   S  		BNE L46
000000BD                         L45:	; bb65
                                 ;     123 			return (STAT_UNRECOGNIZED_NAME);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",123
000000BD 3C0564                  		MOV.B #64H, 05H[R0]
000000C0 38rrrr               W  		BRA L65
000000C3                         L46:	; bb82
                                 ;     124 		}
                                 ;     125 		if ((nv_index_is_group(nv->index)) && (nv_group_is_prefixed(nv->token))) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",125
000000C3 A881                    		MOV.L 08H[R0], R1
000000C5 B911                    		MOVU.W 08H[R1], R1
000000C7 05rrrrrr             A  		BSR _nv_index_is_group
000000CB 6101                    		CMP #00H, R1
000000CD 21rr                    		BNE L48
000000CF 2Err                 B  		BRA L50
000000D1                         L47:	; bb83
                                 ;     126 			strncpy(group, nv->token, GROUP_LEN);	// record the group ID
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",126
000000D1 A882                    		MOV.L 08H[R0], R2
000000D3 712218                  		ADD #18H, R2
000000D6 6633                    		MOV.L #00000003H, R3
000000D8 71010E                  		ADD #0EH, R0, R1
000000DB 7F87                    		SMOVU
000000DD 710111                  		ADD #11H, R0, R1
000000E0 4331                    		SUB R3, R1
000000E2 6602                    		MOV.L #00000000H, R2
000000E4 7F88                    		SSTR.B
000000E6 2Err                 B  		BRA L52
000000E8                         L48:	; bb95
000000E8 A881                    		MOV.L 08H[R0], R1
000000EA 711118                  		ADD #18H, R1
000000ED 05rrrrrr             A  		BSR _nv_group_is_prefixed
000000F1 6101                    		CMP #00H, R1
000000F3 10                   S  		BEQ L50
000000F4                         L49:	; bb103
000000F4 F80601                  		MOV.L #00000001H, [R0]
000000F7 08                   S  		BRA L51
000000F8                         L50:	; bb104
000000F8 F80600                  		MOV.L #00000000H, [R0]
000000FB                         L51:	; bb105
000000FB EC01                    		MOV.L [R0], R1
000000FD 6101                    		CMP #00H, R1
000000FF 21rr                    		BNE L47
00000101                         L52:	; bb111
                                 ;     127 		}
                                 ;     128 		if ((nv = nv->nx) == NULL)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",128
00000101 A881                    		MOV.L 08H[R0], R1
00000103 A819                    		MOV.L 04H[R1], R1
00000105 A081                    		MOV.L R1, 08H[R0]
00000107 6101                    		CMP #00H, R1
00000109 18                   S  		BNE L54
0000010A                         L53:	; bb112
                                 ;     129             return (STAT_JSON_TOO_MANY_PAIRS);      // Not supposed to encounter a NULL
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",129
0000010A 3C0570                  		MOV.B #70H, 05H[R0]
0000010D 2Err                 B  		BRA L65
0000010F                         L54:	; bb121
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",108
0000010F B181                    		MOVU.B 06H[R0], R1
00000111 6101                    		CMP #00H, R1
00000113 3Brrrr               W  		BNE L38
00000116                         L55:	; bb127
                                 ;     130 	} while (status != STAT_OK);					// breaks when parsing is complete
                                 ;     131 
                                 ;     132 	// execute the command
                                 ;     133 	nv = nv_body;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",133
00000116 FB12rrrrrrrr            		MOV.L #_nvl, R1
0000011C 711128                  		ADD #28H, R1
0000011F A081                    		MOV.L R1, 08H[R0]
00000121                         L56:	; bb127.split
                                 ;     134 	if (nv->valuetype == TYPE_NULL){				// means GET the value
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",134
00000121 A881                    		MOV.L 08H[R0], R1
00000123 8A99                    		MOV.B 0BH[R1], R1
00000125 6101                    		CMP #00H, R1
00000127 21rr                    		BNE L59
00000129                         L57:	; bb130
                                 ;     135 		ritorno(nv_get(nv));						// ritorno returns w/status on any errors
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",135
00000129 A881                    		MOV.L 08H[R0], R1
0000012B 05rrrrrr             A  		BSR _nv_get
0000012F FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000135 C3E1                    		MOV.B R1, [R14]
00000137 6101                    		CMP #00H, R1
00000139 20rr                    		BEQ L64
0000013B                         L58:	; bb131
0000013B FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000141 C4E005                  		MOV.B [R14], 05H[R0]
00000144 2Err                 B  		BRA L65
00000146                         L59:	; bb143
                                 ;     136 	} else {
                                 ;     137 		if (cm.machine_state == MACHINE_ALARM)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",137
00000146 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000014C 5AEE1D02                		MOVU.B 021DH[R14], R14
00000150 612E                    		CMP #02H, R14
00000152 18                   S  		BNE L61
00000153                         L60:	; bb144
                                 ;     138             return (STAT_MACHINE_ALARMED);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",138
00000153 3C05CB                  		MOV.B #0CBH, 05H[R0]
00000156 2Err                 B  		BRA L65
00000158                         L61:	; bb152
                                 ;     139 		ritorno(nv_set(nv));						// set value or call a function (e.g. gcode)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",139
00000158 A881                    		MOV.L 08H[R0], R1
0000015A 05rrrrrr             A  		BSR _nv_set
0000015E FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000164 C3E1                    		MOV.B R1, [R14]
00000166 6101                    		CMP #00H, R1
00000168 20rr                    		BEQ L63
0000016A                         L62:	; bb153
0000016A FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000170 C4E005                  		MOV.B [R14], 05H[R0]
00000173 08                   S  		BRA L65
00000174                         L63:	; bb163
                                 ;     140 		nv_persist(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",140
00000174 A881                    		MOV.L 08H[R0], R1
00000176 05rrrrrr             A  		BSR _nv_persist
0000017A                         L64:	; bb173
                                 ;     141 	}
                                 ;     142 	return (STAT_OK);								// only successful commands exit through this point
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",142
0000017A 3C0500                  		MOV.B #00H, 05H[R0]
0000017D                         L65:	; bb175
0000017D C5000513                		MOV.B 05H[R0], 13H[R0]
                                 ;     143 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",143
00000181 B489                    		MOVU.B 13H[R0], R1
00000183 3F6607                  		RTSD #1CH, R6-R6
00000186                         __$_normalize_json_string:
                                 		.STACK	__$_normalize_json_string=24
                                 ;     144 
                                 ;     145 /*
                                 ;     146  * _normalize_json_string - normalize a JSON string in place
                                 ;     147  *
                                 ;     148  *	Validate string size limits, remove all whitespace and convert
                                 ;     149  *	to lower case, with the exception of gcode comments
                                 ;     150  */
                                 ;     151 
                                 ;     152 static stat_t _normalize_json_string(char_t *str, uint16_t size)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",152
00000186 7100EC                  		ADD #0FFFFFFECH, R0
00000189 A101                    		MOV.L R1, 10H[R0]
0000018B 918A                    		MOV.W R2, 0EH[R0]
                                 ;     153 {
                                 ;     154 	char_t *wr;								// write pointer
                                 ;     155 	uint8_t in_comment = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",155
0000018D 3C0C00                  		MOV.B #00H, 0CH[R0]
00000190                         L67:	; entry.split
00000190 FB36FF                  		MOV.L #0FFFFFFFFH, R3
00000193 6602                    		MOV.L #00000000H, R2
                                 ;     156 
                                 ;     157 	if (strlen(str) > size)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",157
00000195 A901                    		MOV.L 10H[R0], R1
00000197 7F80                    		SUNTIL.B
00000199 FBE6FE                  		MOV.L #0FFFFFFFEH, R14
0000019C 433E                    		SUB R3, R14
0000019E 06C50E07                		CMP 0EH[R0].UW, R14
000001A2 25rr                    		BLEU L69
000001A4                         L68:	; bb5
                                 ;     158         return (STAT_INPUT_EXCEEDS_MAX_LENGTH);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",158
000001A4 3C076B                  		MOV.B #6BH, 07H[R0]
000001A7 38rrrr               W  		BRA L89
000001AA                         L69:	; bb13
                                 ;     159 
                                 ;     160 	for (wr = str; *str != NUL; str++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",160
000001AA E5000402                		MOV.L 10H[R0], 08H[R0]
000001AE 38rrrr               W  		BRA L86
000001B1                         L70:	; bb16
                                 ;     161 		if (!in_comment) {					// normal processing
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",161
000001B1 B301                    		MOVU.B 0CH[R0], R1
000001B3 6101                    		CMP #00H, R1
000001B5 21rr                    		BNE L82
000001B7 2Err                 B  		BRA L83
000001B9                         L71:	; bb18
                                 ;     162 			if (*str == '(') in_comment = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",162
000001B9 755E28                  		CMP #28H, R14
000001BC 18                   S  		BNE L73
000001BD                         L72:	; bb19
000001BD 3C0C01                  		MOV.B #01H, 0CH[R0]
000001C0                         L73:	; bb27
                                 ;     163 			if ((*str <= ' ') || (*str == DEL)) continue; // toss ctrls, WS & DEL
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",163
000001C0 ED0E04                  		MOV.L 10H[R0], R14
000001C3 58EE                    		MOVU.B [R14], R14
000001C5 755E21                  		CMP #21H, R14
000001C8 29rr                    		BLT L75
000001CA                         L74:	; bb35
000001CA ED0E04                  		MOV.L 10H[R0], R14
000001CD 58EE                    		MOVU.B [R14], R14
000001CF 755E7F                  		CMP #7FH, R14
000001D2 18                   S  		BNE L76
000001D3                         L75:	; bb41
000001D3 F80601                  		MOV.L #00000001H, [R0]
000001D6 08                   S  		BRA L77
000001D7                         L76:	; bb42
000001D7 F80600                  		MOV.L #00000000H, [R0]
000001DA                         L77:	; bb43
000001DA EC0E                    		MOV.L [R0], R14
000001DC 610E                    		CMP #00H, R14
000001DE 21rr                    		BNE L85
000001E0                         L78:	; bb48
                                 ;     164 			*wr++ = tolower(*str);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",164
000001E0 FBE2rrrrrrrr            		MOV.L #__Tolotab, R14
000001E6 ECEE                    		MOV.L [R14], R14
000001E8 A901                    		MOV.L 10H[R0], R1
000001EA 581F                    		MOVU.B [R1], R15
000001EC 6C1F                    		SHLL #01H, R15
000001EE FECEFE                  		MOVU.B [R14,R15], R14
000001F1 A881                    		MOV.L 08H[R0], R1
000001F3 C31E                    		MOV.B R14, [R1]
000001F5 ED0E02                  		MOV.L 08H[R0], R14
000001F8 621E                    		ADD #01H, R14
000001FA E70E02                  		MOV.L R14, 08H[R0]
000001FD 2Err                 B  		BRA L85
000001FF                         L79:	; bb60
                                 ;     165 		} else {							// Gcode comment processing
                                 ;     166 			if (*str == ')') in_comment = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",166
000001FF 755E29                  		CMP #29H, R14
00000202 18                   S  		BNE L81
00000203                         L80:	; bb61
00000203 3C0C00                  		MOV.B #00H, 0CH[R0]
00000206                         L81:	; bb68
                                 ;     167 			*wr++ = *str;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",167
00000206 ED0E04                  		MOV.L 10H[R0], R14
00000209 A881                    		MOV.L 08H[R0], R1
0000020B C0E1                    		MOV.B [R14], [R1]
0000020D ED0E02                  		MOV.L 08H[R0], R14
00000210 621E                    		ADD #01H, R14
00000212 E70E02                  		MOV.L R14, 08H[R0]
00000215 2Err                 B  		BRA L85
00000217                         L82:	; bb78
00000217 F80600                  		MOV.L #00000000H, [R0]
0000021A 08                   S  		BRA L84
0000021B                         L83:	; bb79
0000021B F80601                  		MOV.L #00000001H, [R0]
0000021E                         L84:	; bb80
0000021E EC0E                    		MOV.L [R0], R14
00000220 610E                    		CMP #00H, R14
00000222 ED0E04                  		MOV.L 10H[R0], R14
00000225 58EE                    		MOVU.B [R14], R14
00000227 21rr                    		BNE L71
00000229 2Err                 B  		BRA L79
0000022B                         L85:	; bb85
0000022B A901                    		MOV.L 10H[R0], R1
0000022D 6211                    		ADD #01H, R1
0000022F A101                    		MOV.L R1, 10H[R0]
00000231                         L86:	; bb88
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",160
00000231 A901                    		MOV.L 10H[R0], R1
00000233 581E                    		MOVU.B [R1], R14
00000235 610E                    		CMP #00H, R14
00000237 3Brrrr               W  		BNE L70
0000023A                         L87:	; bb95
                                 ;     168 		}
                                 ;     169 	}
                                 ;     170 	*wr = NUL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",170
0000023A A881                    		MOV.L 08H[R0], R1
0000023C F81400                  		MOV.B #00H, [R1]
0000023F                         L88:	; bb95.split
                                 ;     171 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",171
0000023F 3C0700                  		MOV.B #00H, 07H[R0]
00000242                         L89:	; bb98
00000242 C500070D                		MOV.B 07H[R0], 0DH[R0]
                                 ;     172 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",172
00000246 B309                    		MOVU.B 0DH[R0], R1
00000248 6705                    		RTSD #14H
0000024A                         __$_get_nv_pair:
                                 		.STACK	__$_get_nv_pair=64
                                 ;     173 
                                 ;     174 /*
                                 ;     175  * _get_nv_pair() - get the next name-value pair w/relaxed JSON rules. Also parses strict JSON.
                                 ;     176  *
                                 ;     177  *	Parse the next statement and populate the command object (nvObj).
                                 ;     178  *
                                 ;     179  *	Leaves string pointer (str) on the first character following the object.
                                 ;     180  *	Which is the character just past the ',' separator if it's a multi-valued
                                 ;     181  *	object or the terminating NUL if single object or the last in a multi.
                                 ;     182  *
                                 ;     183  *	Keeps track of tree depth and closing braces as much as it has to.
                                 ;     184  *	If this were to be extended to track multiple parents or more than two
                                 ;     185  *	levels deep it would have to track closing curlies - which it does not.
                                 ;     186  *
                                 ;     187  *	ASSUMES INPUT STRING HAS FIRST BEEN NORMALIZED BY _normalize_json_string()
                                 ;     188  *
                                 ;     189  *	If a group prefix is passed in it will be pre-pended to any name parsed
                                 ;     190  *	to form a token string. For example, if "x" is provided as a group and
                                 ;     191  *	"fr" is found in the name string the parser will search for "xfr" in the
                                 ;     192  *	cfgArray.
                                 ;     193  */
                                 ;     194 /*	RELAXED RULES
                                 ;     195  *
                                 ;     196  *	Quotes are accepted but not needed on names
                                 ;     197  *	Quotes are required for string values
                                 ;     198  *
                                 ;     199  *	See build 406.xx or earlier for strict JSON parser - deleted in 407.03
                                 ;     200  */
                                 ;     201 
                                 ;     202 #define MAX_PAD_CHARS 8
                                 ;     203 #define MAX_NAME_CHARS 32
                                 ;     204 
                                 ;     205 static stat_t _get_nv_pair(nvObj_t *nv, char_t **pstr, int8_t *depth)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",205
0000024A 7EA6                    		PUSH.L R6
0000024C 7100C8                  		ADD #0FFFFFFC8H, R0
0000024F A309                    		MOV.L R1, 34H[R0]
00000251 A302                    		MOV.L R2, 30H[R0]
00000253 A28B                    		MOV.L R3, 2CH[R0]
                                 ;     206 {
                                 ;     207 	uint8_t i;
                                 ;     208 	char_t *tmp;
                                 ;     209 	char_t leaders[] = {"{,\""};				// open curly, quote and leading comma
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",209
00000255 FBE2rrrrrrrr            		MOV.L #_L11, R14
0000025B C4E00F                  		MOV.B [R14], 0FH[R0]
0000025E C5E00110                		MOV.B 01H[R14], 10H[R0]
00000262 C5E00211                		MOV.B 02H[R14], 11H[R0]
00000266 C5E00312                		MOV.B 03H[R14], 12H[R0]
0000026A                         L91:	; entry.split
                                 ;     210 	char_t separators[] = {":\""};				// colon and quote
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",210
0000026A FBE2rrrrrrrr            		MOV.L #_L12, R14
00000270 C4E013                  		MOV.B [R14], 13H[R0]
00000273 C5E00114                		MOV.B 01H[R14], 14H[R0]
00000277 C5E00215                		MOV.B 02H[R14], 15H[R0]
0000027B                         L92:	; entry.split1
                                 ;     211 	char_t terminators[] = {"},\""};			// close curly, comma and quote
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",211
0000027B FBE2rrrrrrrr            		MOV.L #_L13, R14
00000281 C4E016                  		MOV.B [R14], 16H[R0]
00000284 C5E00117                		MOV.B 01H[R14], 17H[R0]
00000288 C5E00218                		MOV.B 02H[R14], 18H[R0]
0000028C C5E00319                		MOV.B 03H[R14], 19H[R0]
00000290                         L93:	; entry.split2
                                 ;     212 	char_t value[] = {"{\".-+"};				// open curly, quote, period, minus and plus
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",212
00000290 FBE2rrrrrrrr            		MOV.L #_L14, R14
00000296 C4E01A                  		MOV.B [R14], 1AH[R0]
00000299 C5E0011B                		MOV.B 01H[R14], 1BH[R0]
0000029D C5E0021C                		MOV.B 02H[R14], 1CH[R0]
000002A1 C5E0031D                		MOV.B 03H[R14], 1DH[R0]
000002A5 C5E0041E                		MOV.B 04H[R14], 1EH[R0]
000002A9 C5E0051F                		MOV.B 05H[R14], 1FH[R0]
000002AD                         L94:	; entry.split3
                                 ;     213 
                                 ;     214 	nv_reset_nv(nv);							// wipes the object and sets the depth
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",214
000002AD AB09                    		MOV.L 34H[R0], R1
000002AF 05rrrrrr             A  		BSR _nv_reset_nv
000002B3                         L95:	; entry.split4
                                 ;     215 
                                 ;     216 	// --- Process name part ---
                                 ;     217 	// Find, terminate and set pointers for the name. Allow for leading and trailing name quotes.
                                 ;     218 	char_t * name = *pstr;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",218
000002B3 AB01                    		MOV.L 30H[R0], R1
000002B5 E41008                  		MOV.L [R1], 20H[R0]
000002B8                         L96:	; entry.split5
                                 ;     219 	for (i=0; true; i++, (*pstr)++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",219
000002B8 3C0700                  		MOV.B #00H, 07H[R0]
000002BB 2Err                 B  		BRA L102
000002BD                         L97:	; bb52
                                 ;     220 		if (strchr(leaders, (int)**pstr) == NULL) { 		// find leading character of name
                                 ;     221 			name = (*pstr)++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",221
000002BD AB01                    		MOV.L 30H[R0], R1
000002BF EC12                    		MOV.L [R1], R2
000002C1 A202                    		MOV.L R2, 20H[R0]
000002C3 6212                    		ADD #01H, R2
000002C5 E312                    		MOV.L R2, [R1]
000002C7                         L98:	; bb52.split6
                                 ;     222 			break;
                                 ;     223 		}
                                 ;     224 		if (i == MAX_PAD_CHARS)
                                 ;     225             return (STAT_JSON_SYNTAX_ERROR);
                                 ;     226 	}
                                 ;     227 
                                 ;     228 	// Find the end of name, NUL terminate and copy token
                                 ;     229 	for (i=0; true; i++, (*pstr)++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",229
000002C7 3C0700                  		MOV.B #00H, 07H[R0]
000002CA 2Err                 B  		BRA L109
000002CC                         L99:	; bb66
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",224
000002CC B189                    		MOVU.B 07H[R0], R1
000002CE 6181                    		CMP #08H, R1
000002D0 18                   S  		BNE L101
000002D1                         L100:	; bb67
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",225
000002D1 3C066F                  		MOV.B #6FH, 06H[R0]
000002D4 38rrrr               W  		BRA L181
000002D7                         L101:	; bb74
000002D7 B189                    		MOVU.B 07H[R0], R1
000002D9 6211                    		ADD #01H, R1
000002DB 8189                    		MOV.B R1, 07H[R0]
000002DD AB01                    		MOV.L 30H[R0], R1
000002DF EC1E                    		MOV.L [R1], R14
000002E1 621E                    		ADD #01H, R14
000002E3 E31E                    		MOV.L R14, [R1]
000002E5                         L102:	; bb81.split
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",220
000002E5 AB01                    		MOV.L 30H[R0], R1
000002E7 EC1E                    		MOV.L [R1], R14
000002E9 58E2                    		MOVU.B [R14], R2
000002EB 71010F                  		ADD #0FH, R0, R1
000002EE 05rrrrrr             A  		BSR _strchr
000002F2 6101                    		CMP #00H, R1
000002F4 20rr                    		BEQ L97
000002F6 2Err                 B  		BRA L99
000002F8                         L103:	; bb86
                                 ;     230 		if (strchr(separators, (int)**pstr) != NULL) {
                                 ;     231 			*(*pstr)++ = NUL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",231
000002F8 AB01                    		MOV.L 30H[R0], R1
000002FA EC1E                    		MOV.L [R1], R14
000002FC 660F                    		MOV.L #00000000H, R15
000002FE FD20EF                  		MOV.B R15, [R14+]
00000301 E31E                    		MOV.L R14, [R1]
00000303                         L104:	; bb86.split
                                 ;     232 			strncpy(nv->token, name, TOKEN_LEN+1);			// copy the string to the token
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",232
00000303 AB0C                    		MOV.L 34H[R0], R4
00000305 714118                  		ADD #18H, R4, R1
00000308 6663                    		MOV.L #00000006H, R3
0000030A AA02                    		MOV.L 20H[R0], R2
0000030C 7F87                    		SMOVU
0000030E 71441E                  		ADD #1EH, R4
00000311 EF41                    		MOV.L R4, R1
00000313 4331                    		SUB R3, R1
00000315 6602                    		MOV.L #00000000H, R2
00000317 7F88                    		SSTR.B
00000319                         L105:	; bb86.split8
                                 ;     233 			break;
                                 ;     234 		}
                                 ;     235 		if (i == MAX_NAME_CHARS)
                                 ;     236             return (STAT_JSON_SYNTAX_ERROR);
                                 ;     237 	}
                                 ;     238 
                                 ;     239 	// --- Process value part ---  (organized from most to least frequently encountered)
                                 ;     240 
                                 ;     241 	// Find the start of the value part
                                 ;     242 	for (i=0; true; i++, (*pstr)++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",242
00000319 3C0700                  		MOV.B #00H, 07H[R0]
0000031C 2Err                 B  		BRA L114
0000031E                         L106:	; bb105
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",235
0000031E B189                    		MOVU.B 07H[R0], R1
00000320 755120                  		CMP #20H, R1
00000323 18                   S  		BNE L108
00000324                         L107:	; bb106
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",236
00000324 3C066F                  		MOV.B #6FH, 06H[R0]
00000327 38rrrr               W  		BRA L181
0000032A                         L108:	; bb113
0000032A B189                    		MOVU.B 07H[R0], R1
0000032C 6211                    		ADD #01H, R1
0000032E 8189                    		MOV.B R1, 07H[R0]
00000330 AB01                    		MOV.L 30H[R0], R1
00000332 EC1E                    		MOV.L [R1], R14
00000334 621E                    		ADD #01H, R14
00000336 E31E                    		MOV.L R14, [R1]
00000338                         L109:	; bb120.split
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",230
00000338 AB01                    		MOV.L 30H[R0], R1
0000033A EC1E                    		MOV.L [R1], R14
0000033C 58E2                    		MOVU.B [R14], R2
0000033E 710113                  		ADD #13H, R0, R1
00000341 05rrrrrr             A  		BSR _strchr
00000345 6101                    		CMP #00H, R1
00000347 21rr                    		BNE L103
00000349 2Err                 B  		BRA L106
0000034B                         L110:	; bb140
                                 ;     243 		if (isalnum((int)**pstr)) break;
                                 ;     244 		if (strchr(value, (int)**pstr) != NULL) break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",244
0000034B AB01                    		MOV.L 30H[R0], R1
0000034D EC1E                    		MOV.L [R1], R14
0000034F 58E2                    		MOVU.B [R14], R2
00000351 71011A                  		ADD #1AH, R0, R1
00000354 05rrrrrr             A  		BSR _strchr
00000358 6101                    		CMP #00H, R1
0000035A 21rr                    		BNE L115
0000035C                         L111:	; bb153
                                 ;     245 		if (i == MAX_PAD_CHARS)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",245
0000035C B189                    		MOVU.B 07H[R0], R1
0000035E 6181                    		CMP #08H, R1
00000360 18                   S  		BNE L113
00000361                         L112:	; bb154
                                 ;     246             return (STAT_JSON_SYNTAX_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",246
00000361 3C066F                  		MOV.B #6FH, 06H[R0]
00000364 38rrrr               W  		BRA L181
00000367                         L113:	; bb161
00000367 B189                    		MOVU.B 07H[R0], R1
00000369 6211                    		ADD #01H, R1
0000036B 8189                    		MOV.B R1, 07H[R0]
0000036D AB01                    		MOV.L 30H[R0], R1
0000036F EC1E                    		MOV.L [R1], R14
00000371 621E                    		ADD #01H, R14
00000373 E31E                    		MOV.L R14, [R1]
00000375                         L114:	; bb168.split
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",243
00000375 FBE2rrrrrrrr            		MOV.L #__Ctype, R14
0000037B ECEE                    		MOV.L [R14], R14
0000037D AB01                    		MOV.L 30H[R0], R1
0000037F EC1F                    		MOV.L [R1], R15
00000381 58FF                    		MOVU.B [R15], R15
00000383 FEDFEE                  		MOVU.W [R15,R14], R14
00000386 FBFA3202                		MOV.L #00000232H, R15
0000038A FC33EF                  		TST R14, R15
0000038D 20rr                    		BEQ L110
0000038F                         L115:	; bb171
                                 ;     247 	}
                                 ;     248 
                                 ;     249 	// nulls (gets)
                                 ;     250 	if ((**pstr == 'n') || ((**pstr == '\"') && (*(*pstr+1) == '\"'))) { // process null value
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",250
0000038F AB01                    		MOV.L 30H[R0], R1
00000391 EC1E                    		MOV.L [R1], R14
00000393 58EE                    		MOVU.B [R14], R14
00000395 755E6E                  		CMP #6EH, R14
00000398 3Arrrr               W  		BEQ L169
0000039B 38rrrr               W  		BRA L164
0000039E                         L116:	; bb172
                                 ;     251 		nv->valuetype = TYPE_NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",251
0000039E AB09                    		MOV.L 34H[R0], R1
000003A0 3C1B00                  		MOV.B #00H, 0BH[R1]
000003A3                         L117:	; bb172.split
                                 ;     252 		nv->value = TYPE_NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",252
000003A3 AB09                    		MOV.L 34H[R0], R1
000003A5 3E1400                  		MOV.L #00000000H, 10H[R1]
000003A8 38rrrr               W  		BRA L172
000003AB                         L118:	; bb178
                                 ;     253 
                                 ;     254 	// numbers
                                 ;     255 	} else if (isdigit(**pstr) || (**pstr == '-')) {// value is a number
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",255
000003AB FBE2rrrrrrrr            		MOV.L #__Ctype, R14
000003B1 ECEE                    		MOV.L [R14], R14
000003B3 AB01                    		MOV.L 30H[R0], R1
000003B5 EC1F                    		MOV.L [R1], R15
000003B7 58FF                    		MOVU.B [R15], R15
000003B9 FEDFEE                  		MOVU.W [R15,R14], R14
000003BC 7C5E                    		BTST #05H, R14
000003BE 3Brrrr               W  		BNE L161
000003C1 38rrrr               W  		BRA L160
000003C4                         L119:	; bb179
                                 ;     256 		nv->value = (float)strtod(*pstr, &tmp);	// tmp is the end pointer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",256
000003C4 AB01                    		MOV.L 30H[R0], R1
000003C6 EC11                    		MOV.L [R1], R1
000003C8 AB0E                    		MOV.L 34H[R0], R6
000003CA 710208                  		ADD #08H, R0, R2
000003CD 05rrrrrr             A  		BSR _strtod
000003D1 A161                    		MOV.L R1, 10H[R6]
000003D3                         L120:	; bb179.split
                                 ;     257 		if(tmp == *pstr)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",257
000003D3 AB01                    		MOV.L 30H[R0], R1
000003D5 A882                    		MOV.L 08H[R0], R2
000003D7 068412                  		CMP [R1].L, R2
000003DA 18                   S  		BNE L122
000003DB                         L121:	; bb186
                                 ;     258             return (STAT_BAD_NUMBER_FORMAT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",258
000003DB 3C0666                  		MOV.B #66H, 06H[R0]
000003DE 38rrrr               W  		BRA L181
000003E1                         L122:	; bb194
                                 ;     259 		nv->valuetype = TYPE_FLOAT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",259
000003E1 AB09                    		MOV.L 34H[R0], R1
000003E3 3C1B04                  		MOV.B #04H, 0BH[R1]
000003E6 38rrrr               W  		BRA L172
000003E9                         L123:	; bb198
                                 ;     260 
                                 ;     261 	// object parent
                                 ;     262 	} else if (**pstr == '{') {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",262
000003E9 AB01                    		MOV.L 30H[R0], R1
000003EB EC1E                    		MOV.L [R1], R14
000003ED 58EE                    		MOVU.B [R14], R14
000003EF 755E7B                  		CMP #7BH, R14
000003F2 21rr                    		BNE L127
000003F4                         L124:	; bb199
                                 ;     263 		nv->valuetype = TYPE_PARENT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",263
000003F4 AB09                    		MOV.L 34H[R0], R1
000003F6 3C1B07                  		MOV.B #07H, 0BH[R1]
000003F9                         L125:	; bb199.split
                                 ;     264 //		*depth += 1;							// nv_reset_nv() sets the next object's level so this is redundant
                                 ;     265 		(*pstr)++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",265
000003F9 AB01                    		MOV.L 30H[R0], R1
000003FB EC1E                    		MOV.L [R1], R14
000003FD 621E                    		ADD #01H, R14
000003FF E31E                    		MOV.L R14, [R1]
00000401                         L126:	; bb199.split9
                                 ;     266 		return(STAT_EAGAIN);					// signal that there is more to parse
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",266
00000401 3C0602                  		MOV.B #02H, 06H[R0]
00000404 38rrrr               W  		BRA L181
00000407                         L127:	; bb207
                                 ;     267 
                                 ;     268 	// strings
                                 ;     269 	} else if (**pstr == '\"') { 				// value is a string
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",269
00000407 AB01                    		MOV.L 30H[R0], R1
00000409 EC1E                    		MOV.L [R1], R14
0000040B 58EF                    		MOVU.B [R14], R15
0000040D 755F22                  		CMP #22H, R15
00000410 3Brrrr               W  		BNE L148
00000413                         L128:	; bb208
                                 ;     270 		(*pstr)++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",270
00000413 621E                    		ADD #01H, R14
00000415 E31E                    		MOV.L R14, [R1]
00000417                         L129:	; bb208.split
                                 ;     271 		nv->valuetype = TYPE_STRING;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",271
00000417 ED0E0D                  		MOV.L 34H[R0], R14
0000041A F9E40B05                		MOV.B #05H, 0BH[R14]
0000041E                         L130:	; bb208.split10
                                 ;     272 		if ((tmp = strchr(*pstr, '\"')) == NULL)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",272
0000041E ED0E0C                  		MOV.L 30H[R0], R14
00000421 ECE1                    		MOV.L [R14], R1
00000423 754222                  		MOV.L #00000022H, R2
00000426 05rrrrrr             A  		BSR _strchr
0000042A A081                    		MOV.L R1, 08H[R0]
0000042C 6101                    		CMP #00H, R1
0000042E 18                   S  		BNE L132
0000042F                         L131:	; bb215
                                 ;     273             return (STAT_JSON_SYNTAX_ERROR);    // find the end of the string
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",273
0000042F 3C066F                  		MOV.B #6FH, 06H[R0]
00000432 38rrrr               W  		BRA L181
00000435                         L132:	; bb224
                                 ;     274 		*tmp = NUL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",274
00000435 ED0E02                  		MOV.L 08H[R0], R14
00000438 F8E400                  		MOV.B #00H, [R14]
0000043B                         L133:	; bb224.split
                                 ;     275 
                                 ;     276 		// if string begins with 0x it might be data, needs to be at least 3 chars long
                                 ;     277 		if( strlen(*pstr)>=3 && (*pstr)[0]=='0' && (*pstr)[1]=='x')
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",277
0000043B ED0E0C                  		MOV.L 30H[R0], R14
0000043E ECE1                    		MOV.L [R14], R1
00000440 FB36FF                  		MOV.L #0FFFFFFFFH, R3
00000443 6602                    		MOV.L #00000000H, R2
00000445 7F80                    		SUNTIL.B
00000447 FBE6FE                  		MOV.L #0FFFFFFFEH, R14
0000044A 433E                    		SUB R3, R14
0000044C 612E                    		CMP #02H, R14
0000044E 24rr                    		BGTU L139
00000450 2Err                 B  		BRA L141
00000452                         L134:	; bb227
                                 ;     278 		{
                                 ;     279 			uint32_t *v = (uint32_t*)&nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",279
00000452 711110                  		ADD #10H, R1
00000455 A209                    		MOV.L R1, 24H[R0]
00000457                         L135:	; bb227.split
                                 ;     280 			*v = strtoul((const char *)*pstr, 0L, 0);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",280
00000457 ED0E0C                  		MOV.L 30H[R0], R14
0000045A ECE1                    		MOV.L [R14], R1
0000045C AA0E                    		MOV.L 24H[R0], R6
0000045E 6602                    		MOV.L #00000000H, R2
00000460 EF23                    		MOV.L R2, R3
00000462 05rrrrrr             A  		BSR _strtoul
00000466 E361                    		MOV.L R1, [R6]
00000468                         L136:	; bb227.split11
                                 ;     281 			nv->valuetype = TYPE_DATA;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",281
00000468 ED0E0D                  		MOV.L 34H[R0], R14
0000046B F9E40B03                		MOV.B #03H, 0BH[R14]
0000046F 2Err                 B  		BRA L147
00000471                         L137:	; bb238
                                 ;     282 		} else {
                                 ;     283 			ritorno(nv_copy_string(nv, *pstr));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",283
00000471 ED0E0C                  		MOV.L 30H[R0], R14
00000474 ECE2                    		MOV.L [R14], R2
00000476 05rrrrrr             A  		BSR _nv_copy_string
0000047A FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000480 C3E1                    		MOV.B R1, [R14]
00000482 6101                    		CMP #00H, R1
00000484 20rr                    		BEQ L147
00000486                         L138:	; bb239
00000486 FBE2rrrrrrrr            		MOV.L #_status_code, R14
0000048C C4E006                  		MOV.B [R14], 06H[R0]
0000048F 38rrrr               W  		BRA L181
00000492                         L139:	; bb257
00000492 ED0E0C                  		MOV.L 30H[R0], R14
00000495 ECEE                    		MOV.L [R14], R14
00000497 58EE                    		MOVU.B [R14], R14
00000499 755E30                  		CMP #30H, R14
0000049C 18                   S  		BNE L141
0000049D                         L140:	; bb265
0000049D F80601                  		MOV.L #00000001H, [R0]
000004A0 08                   S  		BRA L142
000004A1                         L141:	; bb266
000004A1 F80600                  		MOV.L #00000000H, [R0]
000004A4                         L142:	; bb267
000004A4 EC0E                    		MOV.L [R0], R14
000004A6 610E                    		CMP #00H, R14
000004A8 20rr                    		BEQ L145
000004AA                         L143:	; bb271
000004AA ED0E0C                  		MOV.L 30H[R0], R14
000004AD ECEE                    		MOV.L [R14], R14
000004AF 59EE01                  		MOVU.B 01H[R14], R14
000004B2 755E78                  		CMP #78H, R14
000004B5 18                   S  		BNE L145
000004B6                         L144:	; bb279
000004B6 F80601                  		MOV.L #00000001H, [R0]
000004B9 08                   S  		BRA L146
000004BA                         L145:	; bb280
000004BA F80600                  		MOV.L #00000000H, [R0]
000004BD                         L146:	; bb281
000004BD EC0E                    		MOV.L [R0], R14
000004BF 610E                    		CMP #00H, R14
000004C1 AB09                    		MOV.L 34H[R0], R1
000004C3 21rr                    		BNE L134
000004C5 2Err                 B  		BRA L137
000004C7                         L147:	; bb286
                                 ;     284 		}
                                 ;     285 
                                 ;     286 		*pstr = ++tmp;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",286
000004C7 ED0E02                  		MOV.L 08H[R0], R14
000004CA 621E                    		ADD #01H, R14
000004CC AB01                    		MOV.L 30H[R0], R1
000004CE E70E02                  		MOV.L R14, 08H[R0]
000004D1 E31E                    		MOV.L R14, [R1]
000004D3 38rrrr               W  		BRA L172
000004D6                         L148:	; bb292
                                 ;     287 
                                 ;     288 	// boolean true/false
                                 ;     289 	} else if (**pstr == 't') {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",289
000004D6 58EE                    		MOVU.B [R14], R14
000004D8 755E74                  		CMP #74H, R14
000004DB 21rr                    		BNE L151
000004DD                         L149:	; bb293
                                 ;     290 		nv->valuetype = TYPE_BOOL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",290
000004DD AB09                    		MOV.L 34H[R0], R1
000004DF 3C1B01                  		MOV.B #01H, 0BH[R1]
000004E2                         L150:	; bb293.split
                                 ;     291 		nv->value = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",291
000004E2 AB09                    		MOV.L 34H[R0], R1
000004E4 F912040000803F          		MOV.L #3F800000H, 10H[R1]
000004EB 38rrrr               W  		BRA L172
000004EE                         L151:	; bb299
                                 ;     292 	} else if (**pstr == 'f') {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",292
000004EE AB01                    		MOV.L 30H[R0], R1
000004F0 EC1E                    		MOV.L [R1], R14
000004F2 58EE                    		MOVU.B [R14], R14
000004F4 755E66                  		CMP #66H, R14
000004F7 21rr                    		BNE L154
000004F9                         L152:	; bb300
                                 ;     293 		nv->valuetype = TYPE_BOOL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",293
000004F9 AB09                    		MOV.L 34H[R0], R1
000004FB 3C1B01                  		MOV.B #01H, 0BH[R1]
000004FE                         L153:	; bb300.split
                                 ;     294 		nv->value = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",294
000004FE AB09                    		MOV.L 34H[R0], R1
00000500 3E1400                  		MOV.L #00000000H, 10H[R1]
00000503 38rrrr               W  		BRA L172
00000506                         L154:	; bb306
                                 ;     295 
                                 ;     296 	// arrays
                                 ;     297 	} else if (**pstr == '[') {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",297
00000506 AB01                    		MOV.L 30H[R0], R1
00000508 EC1E                    		MOV.L [R1], R14
0000050A 58EE                    		MOVU.B [R14], R14
0000050C 755E5B                  		CMP #5BH, R14
0000050F 21rr                    		BNE L159
00000511                         L155:	; bb307
                                 ;     298 		nv->valuetype = TYPE_ARRAY;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",298
00000511 AB09                    		MOV.L 34H[R0], R1
00000513 3C1B06                  		MOV.B #06H, 0BH[R1]
00000516                         L156:	; bb307.split
                                 ;     299 		ritorno(nv_copy_string(nv, *pstr));		// copy array into string for error displays
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",299
00000516 AB01                    		MOV.L 30H[R0], R1
00000518 EC12                    		MOV.L [R1], R2
0000051A AB09                    		MOV.L 34H[R0], R1
0000051C 05rrrrrr             A  		BSR _nv_copy_string
00000520 FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000526 C3E1                    		MOV.B R1, [R14]
00000528 6101                    		CMP #00H, R1
0000052A 20rr                    		BEQ L158
0000052C                         L157:	; bb311
0000052C FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000532 C4E006                  		MOV.B [R14], 06H[R0]
00000535 38rrrr               W  		BRA L181
00000538                         L158:	; bb323
                                 ;     300 		return (STAT_UNSUPPORTED_TYPE);	        // return error as the parser doesn't do input arrays yet
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",300
00000538 3C0667                  		MOV.B #67H, 06H[R0]
0000053B 38rrrr               W  		BRA L181
0000053E                         L159:	; bb325
                                 ;     301 
                                 ;     302 	// general error condition
                                 ;     303 	} else {
                                 ;     304         return (STAT_JSON_SYNTAX_ERROR);	    // ill-formed JSON
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",304
0000053E 3C066F                  		MOV.B #6FH, 06H[R0]
00000541 38rrrr               W  		BRA L181
00000544                         L160:	; bb378
00000544 AB01                    		MOV.L 30H[R0], R1
00000546 EC1E                    		MOV.L [R1], R14
00000548 58EE                    		MOVU.B [R14], R14
0000054A 755E2D                  		CMP #2DH, R14
0000054D 18                   S  		BNE L162
0000054E                         L161:	; bb385
0000054E F80601                  		MOV.L #00000001H, [R0]
00000551 08                   S  		BRA L163
00000552                         L162:	; bb386
00000552 F80600                  		MOV.L #00000000H, [R0]
00000555                         L163:	; bb387
00000555 EC01                    		MOV.L [R0], R1
00000557 6101                    		CMP #00H, R1
00000559 3Brrrr               W  		BNE L119
0000055C 38rrrr               W  		BRA L123
0000055F                         L164:	; bb399
0000055F AB01                    		MOV.L 30H[R0], R1
00000561 EC1E                    		MOV.L [R1], R14
00000563 58EE                    		MOVU.B [R14], R14
00000565 755E22                  		CMP #22H, R14
00000568 21rr                    		BNE L167
0000056A                         L165:	; bb406
0000056A AB01                    		MOV.L 30H[R0], R1
0000056C EC11                    		MOV.L [R1], R1
0000056E B019                    		MOVU.B 01H[R1], R1
00000570 755122                  		CMP #22H, R1
00000573 18                   S  		BNE L167
00000574                         L166:	; bb414
00000574 F80601                  		MOV.L #00000001H, [R0]
00000577 08                   S  		BRA L168
00000578                         L167:	; bb415
00000578 F80600                  		MOV.L #00000000H, [R0]
0000057B                         L168:	; bb416
0000057B EC01                    		MOV.L [R0], R1
0000057D 6101                    		CMP #00H, R1
0000057F 10                   S  		BEQ L170
00000580                         L169:	; bb420
00000580 F80601                  		MOV.L #00000001H, [R0]
00000583 08                   S  		BRA L171
00000584                         L170:	; bb421
00000584 F80600                  		MOV.L #00000000H, [R0]
00000587                         L171:	; bb422
00000587 EC01                    		MOV.L [R0], R1
00000589 6101                    		CMP #00H, R1
0000058B 3Brrrr               W  		BNE L116
0000058E 38rrrr               W  		BRA L118
00000591                         L172:	; bb428
                                 ;     305     }
                                 ;     306 
                                 ;     307 	// process comma separators and end curlies
                                 ;     308 	if ((*pstr = strpbrk(*pstr, terminators)) == NULL) { // advance to terminator or err out
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",308
00000591 AB06                    		MOV.L 30H[R0], R6
00000593 EC61                    		MOV.L [R6], R1
00000595 710216                  		ADD #16H, R0, R2
00000598 05rrrrrr             A  		BSR _strpbrk
0000059C E361                    		MOV.L R1, [R6]
0000059E 6101                    		CMP #00H, R1
000005A0 18                   S  		BNE L174
000005A1                         L173:	; bb429
                                 ;     309 		return (STAT_JSON_SYNTAX_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",309
000005A1 3C066F                  		MOV.B #6FH, 06H[R0]
000005A4 2Err                 B  		BRA L181
000005A6                         L174:	; bb441
                                 ;     310 	}
                                 ;     311 	if (**pstr == '}') {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",311
000005A6 AB01                    		MOV.L 30H[R0], R1
000005A8 EC1E                    		MOV.L [R1], R14
000005AA 58EE                    		MOVU.B [R14], R14
000005AC 755E7D                  		CMP #7DH, R14
000005AF 21rr                    		BNE L177
000005B1                         L175:	; bb442
                                 ;     312 		*depth -= 1;							// pop up a nesting level
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",312
000005B1 AA89                    		MOV.L 2CH[R0], R1
000005B3 CC1E                    		MOV.B [R1], R14
000005B5 601E                    		SUB #01H, R14
000005B7 C31E                    		MOV.B R14, [R1]
000005B9                         L176:	; bb442.split
                                 ;     313 		(*pstr)++;								// advance to comma or whatever follows
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",313
000005B9 AB01                    		MOV.L 30H[R0], R1
000005BB EC1E                    		MOV.L [R1], R14
000005BD 621E                    		ADD #01H, R14
000005BF E31E                    		MOV.L R14, [R1]
000005C1                         L177:	; bb459
                                 ;     314 	}
                                 ;     315 	if (**pstr == ',')
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",315
000005C1 AB01                    		MOV.L 30H[R0], R1
000005C3 EC1E                    		MOV.L [R1], R14
000005C5 58EE                    		MOVU.B [R14], R14
000005C7 755E2C                  		CMP #2CH, R14
000005CA 18                   S  		BNE L179
000005CB                         L178:	; bb460
                                 ;     316         return (STAT_EAGAIN);                   // signal that there is more to parse
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",316
000005CB 3C0602                  		MOV.B #02H, 06H[R0]
000005CE 2Err                 B  		BRA L181
000005D0                         L179:	; bb469
                                 ;     317 
                                 ;     318 	(*pstr)++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",318
000005D0 AB01                    		MOV.L 30H[R0], R1
000005D2 EC1E                    		MOV.L [R1], R14
000005D4 621E                    		ADD #01H, R14
000005D6 E31E                    		MOV.L R14, [R1]
000005D8                         L180:	; bb469.split
                                 ;     319 	return (STAT_OK);							// signal that parsing is complete
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",319
000005D8 3C0600                  		MOV.B #00H, 06H[R0]
000005DB                         L181:	; bb474
000005DB C500062B                		MOV.B 06H[R0], 2BH[R0]
                                 ;     320 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",320
000005DF 59012B                  		MOVU.B 2BH[R0], R1
000005E2 3F660F                  		RTSD #3CH, R6-R6
000005E5                         _json_serialize:
                                 		.STACK	_json_serialize=48
                                 ;     321 
                                 ;     322 /****************************************************************************
                                 ;     323  * json_serialize() - make a JSON object string from JSON object array
                                 ;     324  *
                                 ;     325  *	*nv is a pointer to the first element in the nv list to serialize
                                 ;     326  *	*out_buf is a pointer to the output string - usually what was the input string
                                 ;     327  *	Returns the character count of the resulting string
                                 ;     328  *
                                 ;     329  * 	Operation:
                                 ;     330  *	  - The nvObj list is processed start to finish with no recursion
                                 ;     331  *
                                 ;     332  *	  - Assume the first object is depth 0 or greater (the opening curly)
                                 ;     333  *
                                 ;     334  *	  - Assume remaining depths have been set correctly; but might not achieve closure;
                                 ;     335  *		e.g. list starts on 0, and ends on 3, in which case provide correct closing curlies
                                 ;     336  *
                                 ;     337  *	  - Assume there can be multiple, independent, non-contiguous JSON objects at a
                                 ;     338  *		given depth value. These are processed correctly - e.g. 0,1,1,0,1,1,0,1,1
                                 ;     339  *
                                 ;     340  *	  - The list must have a terminating nvObj where nv->nx == NULL.
                                 ;     341  *		The terminating object may or may not have data (empty or not empty).
                                 ;     342  *
                                 ;     343  *	Returns:
                                 ;     344  *		Returns length of string
                                 ;     345  *
                                 ;     346  *	Desired behaviors:
                                 ;     347  *	  - Allow self-referential elements that would otherwise cause a recursive loop
                                 ;     348  *	  - Skip over empty objects (TYPE_EMPTY)
                                 ;     349  *	  - If a JSON object is empty represent it as {}
                                 ;     350  *	    --- OR ---
                                 ;     351  *	  - If a JSON object is empty omit the object altogether (no curlies)
                                 ;     352  */
                                 ;     353 
                                 ;     354 #define BUFFER_MARGIN 8			// safety margin to avoid buffer overruns during footer checksum generation
                                 ;     355 
                                 ;     356 uint16_t json_serialize(nvObj_t *nv, char_t *out_buf, uint16_t size)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",356
000005E5 7100DC                  		ADD #0FFFFFFDCH, R0
000005E8 A201                    		MOV.L R1, 20H[R0]
000005EA A18A                    		MOV.L R2, 1CH[R0]
000005EC 930B                    		MOV.W R3, 1AH[R0]
                                 ;     357 {
                                 ;     358 #ifdef __SILENCE_JSON_RESPONSES
                                 ;     359 	return (0);
                                 ;     360 #else
                                 ;     361 	char_t *str = out_buf;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",361
000005EE E5000702                		MOV.L 1CH[R0], 08H[R0]
000005F2                         L183:	; entry.split
                                 ;     362 	char_t *str_max = out_buf + size - BUFFER_MARGIN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",362
000005F2 A989                    		MOV.L 1CH[R0], R1
000005F4 06C9010D                		ADD 1AH[R0].UW, R1
000005F8 6081                    		SUB #08H, R1
000005FA A089                    		MOV.L R1, 0CH[R0]
000005FC                         L184:	; entry.split1
                                 ;     363 	int8_t initial_depth = nv->depth;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",363
000005FC AA01                    		MOV.L 20H[R0], R1
000005FE C5100A11                		MOV.B 0AH[R1], 11H[R0]
00000602                         L185:	; entry.split2
                                 ;     364 	int8_t prev_depth = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",364
00000602 3C8200                  		MOV.B #00H, 12H[R0]
00000605                         L186:	; entry.split3
                                 ;     365 	uint8_t need_a_comma = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",365
00000605 3C8300                  		MOV.B #00H, 13H[R0]
00000608                         L187:	; entry.split4
                                 ;     366 
                                 ;     367 	*str++ = '{'; 								// write opening curly
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",367
00000608 A881                    		MOV.L 08H[R0], R1
0000060A F8147B                  		MOV.B #7BH, [R1]
0000060D A881                    		MOV.L 08H[R0], R1
0000060F 6211                    		ADD #01H, R1
00000611 A081                    		MOV.L R1, 08H[R0]
00000613 38rrrr               W  		BRA L228
00000616                         L188:	; bb24
                                 ;     368 
                                 ;     369 	while (true) {
                                 ;     370 		if (nv->valuetype != TYPE_EMPTY) {
                                 ;     371 			if (need_a_comma) { *str++ = ',';}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",371
00000616 B489                    		MOVU.B 13H[R0], R1
00000618 6101                    		CMP #00H, R1
0000061A 20rr                    		BEQ L190
0000061C                         L189:	; bb25
0000061C A881                    		MOV.L 08H[R0], R1
0000061E F8142C                  		MOV.B #2CH, [R1]
00000621 A881                    		MOV.L 08H[R0], R1
00000623 6211                    		ADD #01H, R1
00000625 A081                    		MOV.L R1, 08H[R0]
00000627                         L190:	; bb33
                                 ;     372 			need_a_comma = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",372
00000627 3C8301                  		MOV.B #01H, 13H[R0]
0000062A                         L191:	; bb33.split
                                 ;     373 			if (js.json_syntax == JSON_SYNTAX_RELAXED) {		// write name
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",373
0000062A AA02                    		MOV.L 20H[R0], R2
0000062C 712218                  		ADD #18H, R2
0000062F FB12rrrrrrrr            		MOV.L #_js, R1
00000635 B091                    		MOVU.B 02H[R1], R1
00000637 6101                    		CMP #00H, R1
00000639 A881                    		MOV.L 08H[R0], R1
0000063B 21rr                    		BNE L193
0000063D                         L192:	; bb35
0000063D 6080                    		SUB #08H, R0
                                 ;     374 				str += sprintf((char *)str, "%s:", nv->token);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",374
0000063F FBE2rrrrrrrr            		MOV.L #_L15, R14
00000645 E30E                    		MOV.L R14, [R0]
00000647 A00A                    		MOV.L R2, 04H[R0]
00000649 05rrrrrr             A  		BSR _sprintf
0000064D 6280                    		ADD #08H, R0
0000064F 06890102                		ADD 08H[R0].L, R1
00000653 A081                    		MOV.L R1, 08H[R0]
00000655 2Err                 B  		BRA L194
00000657                         L193:	; bb43
00000657 6080                    		SUB #08H, R0
                                 ;     375 			} else {
                                 ;     376 				str += sprintf((char *)str, "\"%s\":", nv->token);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",376
00000659 FBE2rrrrrrrr            		MOV.L #_L16, R14
0000065F E30E                    		MOV.L R14, [R0]
00000661 A00A                    		MOV.L R2, 04H[R0]
00000663 05rrrrrr             A  		BSR _sprintf
00000667 6280                    		ADD #08H, R0
00000669 06890102                		ADD 08H[R0].L, R1
0000066D A081                    		MOV.L R1, 08H[R0]
0000066F                         L194:	; bb57
                                 ;     377 			}
                                 ;     378 
                                 ;     379 			// check for illegal float values
                                 ;     380 			if (nv->valuetype == TYPE_FLOAT) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",380
0000066F AA01                    		MOV.L 20H[R0], R1
00000671 8A99                    		MOV.B 0BH[R1], R1
00000673 6141                    		CMP #04H, R1
00000675 10                   S  		BEQ L196
00000676 2Err                 B  		BRA L201
00000678                         L195:	; bb60
00000678 AA01                    		MOV.L 20H[R0], R1
0000067A 3E1400                  		MOV.L #00000000H, 10H[R1]
0000067D 2Err                 B  		BRA L201
0000067F                         L196:	; bb63
                                 ;     381 				if (isnan((double)nv->value) || isinf((double)nv->value)) { nv->value = 0;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",381
0000067F AA01                    		MOV.L 20H[R0], R1
00000681 A911                    		MOV.L 10H[R1], R1
00000683 05rrrrrr             A  		BSR __FDclass
00000687 E301                    		MOV.L R1, [R0]
00000689 6121                    		CMP #02H, R1
0000068B 20rr                    		BEQ L198
0000068D                         L197:	; bb86
0000068D AA01                    		MOV.L 20H[R0], R1
0000068F A911                    		MOV.L 10H[R1], R1
00000691 05rrrrrr             A  		BSR __FDclass
00000695 E301                    		MOV.L R1, [R0]
00000697 6111                    		CMP #01H, R1
00000699 18                   S  		BNE L199
0000069A                         L198:	; bb108
0000069A F80601                  		MOV.L #00000001H, [R0]
0000069D 08                   S  		BRA L200
0000069E                         L199:	; bb109
0000069E F80600                  		MOV.L #00000000H, [R0]
000006A1                         L200:	; bb110
000006A1 EC01                    		MOV.L [R0], R1
000006A3 6101                    		CMP #00H, R1
000006A5 21rr                    		BNE L195
000006A7                         L201:	; bb124
                                 ;     382 			}
                                 ;     383 
                                 ;     384 			// serialize output value
                                 ;     385 			if		(nv->valuetype == TYPE_NULL)		{ str += (char_t)sprintf((char *)str, "null");} // Note that that "" is NOT null
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",385
000006A7 AA01                    		MOV.L 20H[R0], R1
000006A9 8A99                    		MOV.B 0BH[R1], R1
000006AB 6101                    		CMP #00H, R1
000006AD 21rr                    		BNE L203
000006AF                         L202:	; bb125
000006AF A881                    		MOV.L 08H[R0], R1
000006B1 6040                    		SUB #04H, R0
000006B3 FBE2rrrrrrrr            		MOV.L #_L17, R14
000006B9 E30E                    		MOV.L R14, [R0]
000006BB 05rrrrrr             A  		BSR _sprintf
000006BF 6240                    		ADD #04H, R0
000006C1 5B11                    		MOVU.B R1, R1
000006C3 06890102                		ADD 08H[R0].L, R1
000006C7 A081                    		MOV.L R1, 08H[R0]
000006C9 38rrrr               W  		BRA L218
000006CC                         L203:	; bb133
                                 ;     386 			else if (nv->valuetype == TYPE_INTEGER)	{
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",386
000006CC AA01                    		MOV.L 20H[R0], R1
000006CE 8A99                    		MOV.B 0BH[R1], R1
000006D0 6121                    		CMP #02H, R1
000006D2 21rr                    		BNE L205
000006D4                         L204:	; bb134
                                 ;     387 				str += (char_t)sprintf((char *)str, "%1.0f", (double)nv->value);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",387
000006D4 AA02                    		MOV.L 20H[R0], R2
000006D6 A881                    		MOV.L 08H[R0], R1
000006D8 6080                    		SUB #08H, R0
000006DA E5200401                		MOV.L 10H[R2], 04H[R0]
000006DE FBE2rrrrrrrr            		MOV.L #_L18, R14
000006E4 E30E                    		MOV.L R14, [R0]
000006E6 05rrrrrr             A  		BSR _sprintf
000006EA 6280                    		ADD #08H, R0
000006EC 5B11                    		MOVU.B R1, R1
000006EE 06890102                		ADD 08H[R0].L, R1
000006F2 A081                    		MOV.L R1, 08H[R0]
000006F4 38rrrr               W  		BRA L218
000006F7                         L205:	; bb145
                                 ;     388 			}
                                 ;     389 			else if (nv->valuetype == TYPE_DATA)	{
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",389
000006F7 AA01                    		MOV.L 20H[R0], R1
000006F9 8A9A                    		MOV.B 0BH[R1], R2
000006FB 6132                    		CMP #03H, R2
000006FD 21rr                    		BNE L208
000006FF                         L206:	; bb146
                                 ;     390 				uint32_t *v = (uint32_t*)&nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",390
000006FF 711110                  		ADD #10H, R1
00000702 A109                    		MOV.L R1, 14H[R0]
00000704                         L207:	; bb146.split
                                 ;     391 				str += (char_t)sprintf((char *)str, "\"0x%lx\"", *v);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",391
00000704 A90A                    		MOV.L 14H[R0], R2
00000706 A881                    		MOV.L 08H[R0], R1
00000708 6080                    		SUB #08H, R0
0000070A E42001                  		MOV.L [R2], 04H[R0]
0000070D FBE2rrrrrrrr            		MOV.L #_L19, R14
00000713 E30E                    		MOV.L R14, [R0]
00000715 05rrrrrr             A  		BSR _sprintf
00000719 6280                    		ADD #08H, R0
0000071B 5B11                    		MOVU.B R1, R1
0000071D 06890102                		ADD 08H[R0].L, R1
00000721 A081                    		MOV.L R1, 08H[R0]
00000723 38rrrr               W  		BRA L218
00000726                         L208:	; bb159
                                 ;     392 			}
                                 ;     393 			else if (nv->valuetype == TYPE_STRING)	{ str += (char_t)sprintf((char *)str, "\"%s\"",(char *)*nv->stringp);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",393
00000726 8A99                    		MOV.B 0BH[R1], R1
00000728 6151                    		CMP #05H, R1
0000072A 21rr                    		BNE L210
0000072C                         L209:	; bb160
0000072C AA02                    		MOV.L 20H[R0], R2
0000072E A881                    		MOV.L 08H[R0], R1
00000730 6080                    		SUB #08H, R0
00000732 E5200801                		MOV.L 20H[R2], 04H[R0]
00000736 FBE2rrrrrrrr            		MOV.L #_L20, R14
0000073C E30E                    		MOV.L R14, [R0]
0000073E 05rrrrrr             A  		BSR _sprintf
00000742 6280                    		ADD #08H, R0
00000744 5B11                    		MOVU.B R1, R1
00000746 06890102                		ADD 08H[R0].L, R1
0000074A A081                    		MOV.L R1, 08H[R0]
0000074C 38rrrr               W  		BRA L218
0000074F                         L210:	; bb172
                                 ;     394 			else if (nv->valuetype == TYPE_ARRAY)	{ str += (char_t)sprintf((char *)str, "[%s]",  (char *)*nv->stringp);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",394
0000074F AA01                    		MOV.L 20H[R0], R1
00000751 8A99                    		MOV.B 0BH[R1], R1
00000753 6161                    		CMP #06H, R1
00000755 21rr                    		BNE L212
00000757                         L211:	; bb173
00000757 AA02                    		MOV.L 20H[R0], R2
00000759 A881                    		MOV.L 08H[R0], R1
0000075B 6080                    		SUB #08H, R0
0000075D E5200801                		MOV.L 20H[R2], 04H[R0]
00000761 FBE2rrrrrrrr            		MOV.L #_L21, R14
00000767 E30E                    		MOV.L R14, [R0]
00000769 05rrrrrr             A  		BSR _sprintf
0000076D 6280                    		ADD #08H, R0
0000076F 5B11                    		MOVU.B R1, R1
00000771 06890102                		ADD 08H[R0].L, R1
00000775 A081                    		MOV.L R1, 08H[R0]
00000777 2Err                 B  		BRA L218
00000779                         L212:	; bb185
                                 ;     395 			else if (nv->valuetype == TYPE_FLOAT)	{ preprocess_float(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",395
00000779 AA01                    		MOV.L 20H[R0], R1
0000077B 8A9A                    		MOV.B 0BH[R1], R2
0000077D 6142                    		CMP #04H, R2
0000077F 21rr                    		BNE L214
00000781                         L213:	; bb186
00000781 05rrrrrr             A  		BSR _preprocess_float
                                 ;     396 //													  str += fntoa((char *)str, nv->value, nv->precision);
                                 ;     397 													  str += fntoa(str, nv->value, nv->precision);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",397
00000785 AA01                    		MOV.L 20H[R0], R1
00000787 B313                    		MOVU.B 0CH[R1], R3
00000789 A912                    		MOV.L 10H[R1], R2
0000078B A881                    		MOV.L 08H[R0], R1
0000078D 05rrrrrr             A  		BSR _fntoa
00000791 06890102                		ADD 08H[R0].L, R1
00000795 A081                    		MOV.L R1, 08H[R0]
00000797 2Err                 B  		BRA L218
00000799                         L214:	; bb200
                                 ;     398 			}
                                 ;     399 			else if (nv->valuetype == TYPE_BOOL) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",399
00000799 8A99                    		MOV.B 0BH[R1], R1
0000079B 6111                    		CMP #01H, R1
0000079D 21rr                    		BNE L218
0000079F                         L215:	; bb202
                                 ;     400 				if (fp_FALSE(nv->value)) { str += sprintf((char *)str, "false");}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",400
0000079F AA01                    		MOV.L 20H[R0], R1
000007A1 A911                    		MOV.L 10H[R1], R1
000007A3 FD7211BD378635          		FCMP #358637BDH, R1
000007AA A881                    		MOV.L 08H[R0], R1
000007AC 26rr                    		BPZ L217
000007AE                         L216:	; bb203
000007AE 6040                    		SUB #04H, R0
000007B0 FBE2rrrrrrrr            		MOV.L #_L22, R14
000007B6 E30E                    		MOV.L R14, [R0]
000007B8 05rrrrrr             A  		BSR _sprintf
000007BC 6240                    		ADD #04H, R0
000007BE 06890102                		ADD 08H[R0].L, R1
000007C2 A081                    		MOV.L R1, 08H[R0]
000007C4 2Err                 B  		BRA L218
000007C6                         L217:	; bb208
000007C6 6040                    		SUB #04H, R0
                                 ;     401 				else { str += (char_t)sprintf((char *)str, "true"); }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",401
000007C8 FBE2rrrrrrrr            		MOV.L #_L23, R14
000007CE E30E                    		MOV.L R14, [R0]
000007D0 05rrrrrr             A  		BSR _sprintf
000007D4 6240                    		ADD #04H, R0
000007D6 5B11                    		MOVU.B R1, R1
000007D8 06890102                		ADD 08H[R0].L, R1
000007DC A081                    		MOV.L R1, 08H[R0]
000007DE                         L218:	; bb278
                                 ;     402 			}
                                 ;     403 			if (nv->valuetype == TYPE_PARENT) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",403
000007DE AA01                    		MOV.L 20H[R0], R1
000007E0 8A99                    		MOV.B 0BH[R1], R1
000007E2 6171                    		CMP #07H, R1
000007E4 21rr                    		BNE L221
000007E6                         L219:	; bb279
                                 ;     404 				*str++ = '{';
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",404
000007E6 A881                    		MOV.L 08H[R0], R1
000007E8 F8147B                  		MOV.B #7BH, [R1]
000007EB A881                    		MOV.L 08H[R0], R1
000007ED 6211                    		ADD #01H, R1
000007EF A081                    		MOV.L R1, 08H[R0]
000007F1                         L220:	; bb279.split
                                 ;     405 				need_a_comma = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",405
000007F1 3C8300                  		MOV.B #00H, 13H[R0]
000007F4                         L221:	; bb299
                                 ;     406 			}
                                 ;     407 		}
                                 ;     408 		if (str >= str_max) { return (uint16_t)(-1);}		// signal buffer overrun
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",408
000007F4 A881                    		MOV.L 08H[R0], R1
000007F6 06850103                		CMP 0CH[R0].L, R1
000007FA 23rr                    		BLTU L223
000007FC                         L222:	; bb300
000007FC F90903FFFF              		MOV.W #0FFFFH, 06H[R0]
00000801 38rrrr               W  		BRA L235
00000804                         L223:	; bb308
                                 ;     409 		if ((nv = nv->nx) == NULL) { break;}	// end of the list
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",409
00000804 AA01                    		MOV.L 20H[R0], R1
00000806 A819                    		MOV.L 04H[R1], R1
00000808 A201                    		MOV.L R1, 20H[R0]
0000080A 6101                    		CMP #00H, R1
0000080C 20rr                    		BEQ L230
0000080E 2Err                 B  		BRA L226
00000810                         L224:	; bb319
                                 ;     410 
                                 ;     411 		while (nv->depth < prev_depth--) {		// iterate the closing curlies
                                 ;     412 			need_a_comma = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",412
00000810 3C8301                  		MOV.B #01H, 13H[R0]
00000813                         L225:	; bb319.split
                                 ;     413 			*str++ = '}';
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",413
00000813 A881                    		MOV.L 08H[R0], R1
00000815 F8147D                  		MOV.B #7DH, [R1]
00000818 A881                    		MOV.L 08H[R0], R1
0000081A 6211                    		ADD #01H, R1
0000081C A081                    		MOV.L R1, 08H[R0]
0000081E                         L226:	; bb323
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",411
0000081E 8C81                    		MOV.B 12H[R0], R1
00000820 7112FF                  		ADD #0FFFFFFFFH, R1, R2
00000823 AA03                    		MOV.L 20H[R0], R3
00000825 8AB3                    		MOV.B 0AH[R3], R3
00000827 8482                    		MOV.B R2, 12H[R0]
00000829 4713                    		CMP R1, R3
0000082B 29rr                    		BLT L224
0000082D                         L227:	; bb335
                                 ;     414 		}
                                 ;     415 		prev_depth = nv->depth;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",415
0000082D AA01                    		MOV.L 20H[R0], R1
0000082F C5100A12                		MOV.B 0AH[R1], 12H[R0]
00000833                         L228:	; bb339.split
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",370
00000833 AA01                    		MOV.L 20H[R0], R1
00000835 8A99                    		MOV.B 0BH[R1], R1
00000837 7501FF                  		CMP #0FFFFFFFFH, R1
0000083A 3Brrrr               W  		BNE L188
0000083D 2Err                 B  		BRA L221
0000083F                         L229:	; bb342
0000083F F8147D                  		MOV.B #7DH, [R1]
00000842 A881                    		MOV.L 08H[R0], R1
00000844 6211                    		ADD #01H, R1
00000846 A081                    		MOV.L R1, 08H[R0]
00000848                         L230:	; bb346
                                 ;     416 	}
                                 ;     417 
                                 ;     418 	// closing curlies and NEWLINE
                                 ;     419 	while (prev_depth-- > initial_depth) { *str++ = '}';}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",419
00000848 8C81                    		MOV.B 12H[R0], R1
0000084A 7112FF                  		ADD #0FFFFFFFFH, R1, R2
0000084D 8C0B                    		MOV.B 11H[R0], R3
0000084F 8482                    		MOV.B R2, 12H[R0]
00000851 4731                    		CMP R3, R1
00000853 A881                    		MOV.L 08H[R0], R1
00000855 2Arr                    		BGT L229
00000857                         L231:	; bb356
00000857 6040                    		SUB #04H, R0
                                 ;     420 	str += sprintf((char *)str, "}\n");	// using sprintf for this last one ensures a NUL termination
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",420
00000859 FBE2rrrrrrrr            		MOV.L #_L24, R14
0000085F E30E                    		MOV.L R14, [R0]
00000861 05rrrrrr             A  		BSR _sprintf
00000865 6240                    		ADD #04H, R0
00000867 06890102                		ADD 08H[R0].L, R1
0000086B A081                    		MOV.L R1, 08H[R0]
0000086D                         L232:	; bb356.split
                                 ;     421 	if (str > out_buf + size) { return (uint16_t)(-1);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",421
0000086D A989                    		MOV.L 1CH[R0], R1
0000086F 06C9010D                		ADD 1AH[R0].UW, R1
00000873 06850102                		CMP 08H[R0].L, R1
00000877 22rr                    		BGEU L234
00000879                         L233:	; bb362
00000879 F90903FFFF              		MOV.W #0FFFFH, 06H[R0]
0000087E 08                   S  		BRA L235
0000087F                         L234:	; bb372
                                 ;     422 	return (str - out_buf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",422
0000087F A881                    		MOV.L 08H[R0], R1
00000881 06810107                		SUB 1CH[R0].L, R1
00000885 9089                    		MOV.W R1, 06H[R0]
00000887                         L235:	; bb380
00000887 D500030C                		MOV.W 06H[R0], 18H[R0]
                                 ;     423 #endif
                                 ;     424 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",424
0000088B BB01                    		MOVU.W 18H[R0], R1
0000088D 6709                    		RTSD #24H
0000088F                         _json_print_object:
                                 		.STACK	_json_print_object=16
                                 ;     425 
                                 ;     426 /*
                                 ;     427  * json_print_object() - serialize and print the nvObj array directly (w/o header & footer)
                                 ;     428  *
                                 ;     429  *	Ignores JSON verbosity settings and everything else - just serializes the list & prints
                                 ;     430  *	Useful for reports and other simple output.
                                 ;     431  *	Object list should be terminated by nv->nx == NULL
                                 ;     432  */
                                 ;     433 void json_print_object(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",433
0000088F 6040                    		SUB #04H, R0
00000891 E301                    		MOV.L R1, [R0]
                                 ;     434 {
                                 ;     435 #ifdef __SILENCE_JSON_RESPONSES
                                 ;     436 	return;
                                 ;     437 #endif
                                 ;     438 
                                 ;     439 	json_serialize(nv, cs.out_buf, sizeof(cs.out_buf));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",439
00000893 FB22rrrrrrrr            		MOV.L #_cs, R2
00000899 72224301                		ADD #0143H, R2
0000089D FB3A0002                		MOV.L #00000200H, R3
000008A1 39rrrr               W  		BSR _json_serialize
000008A4                         L237:	; entry.split
000008A4 6080                    		SUB #08H, R0
                                 ;     440 	fprintf(stderr, "%s", (char *)cs.out_buf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",440
000008A6 FB12rrrrrrrr            		MOV.L #_cs, R1
000008AC 72114301                		ADD #0143H, R1
000008B0 A009                    		MOV.L R1, 04H[R0]
000008B2 FBE2rrrrrrrr            		MOV.L #_L25, R14
000008B8 E30E                    		MOV.L R14, [R0]
000008BA FB12rrrrrrrr            		MOV.L #__Stderr, R1
000008C0 05rrrrrr             A  		BSR _fprintf
000008C4 6280                    		ADD #08H, R0
000008C6 6701                    		RTSD #04H
000008C8                         _json_print_list:
                                 		.STACK	_json_print_list=8
                                 ;     441 }
                                 ;     442 
                                 ;     443 /*
                                 ;     444  * json_print_list() - command to select and produce a JSON formatted output
                                 ;     445  */
                                 ;     446 
                                 ;     447 void json_print_list(stat_t status, uint8_t flags)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",447
000008C8 6040                    		SUB #04H, R0
000008CA 8089                    		MOV.B R1, 03H[R0]
000008CC 8082                    		MOV.B R2, 02H[R0]
                                 ;     448 {
                                 ;     449 	switch (flags) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",449
000008CE B081                    		MOVU.B 02H[R0], R1
000008D0 6121                    		CMP #02H, R1
000008D2 20rr                    		BEQ L241
000008D4                         L239:	; entry
000008D4 6111                    		CMP #01H, R1
000008D6 21rr                    		BNE L242
000008D8                         L240:	; bb5
                                 ;     450 		case JSON_NO_PRINT: { break; }
                                 ;     451 		case JSON_OBJECT_FORMAT: { json_print_object(nv_body); break; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",451
000008D8 FB12rrrrrrrr            		MOV.L #_nvl, R1
000008DE 711128                  		ADD #28H, R1
000008E1 39rrrr               W  		BSR _json_print_object
000008E4 6701                    		RTSD #04H
000008E6                         L241:	; bb7
                                 ;     452 		case JSON_RESPONSE_FORMAT: { json_print_response(status); break; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",452
000008E6 B089                    		MOVU.B 03H[R0], R1
000008E8 39rrrr               W  		BSR _json_print_response
000008EB 6701                    		RTSD #04H
000008ED                         L242:	; return
                                 ;     453 	}
                                 ;     454 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",454
000008ED 6701                    		RTSD #04H
000008EF                         _json_print_response:
                                 		.STACK	_json_print_response=68
                                 ;     455 
                                 ;     456 /*
                                 ;     457  * json_print_response() - JSON responses with headers, footers and observing JSON verbosity
                                 ;     458  *
                                 ;     459  *	A footer is returned for every setting except $jv=0
                                 ;     460  *
                                 ;     461  *	JV_SILENT = 0,	// no response is provided for any command
                                 ;     462  *	JV_FOOTER,		// responses contain  footer only; no command echo, gcode blocks or messages
                                 ;     463  *	JV_CONFIGS,		// echo configs; gcode blocks are not echoed; messages are not echoed
                                 ;     464  *	JV_MESSAGES,	// echo configs; gcode messages only (if present); no block echo or line numbers
                                 ;     465  *	JV_LINENUM,		// echo configs; gcode blocks return messages and line numbers as present
                                 ;     466  *	JV_VERBOSE		// echos all configs and gcode blocks, line numbers and messages
                                 ;     467  *
                                 ;     468  *	This gets a bit complicated. The first nvObj is the header, which must be set by reset_nv_list().
                                 ;     469  *	The first object in the body will always have the gcode block or config command in it,
                                 ;     470  *	which you may or may not want to display. This is followed by zero or more displayable objects.
                                 ;     471  *	Then if you want a gcode line number you add that here to the end. Finally, a footer goes
                                 ;     472  *	on all the (non-silent) responses.
                                 ;     473  */
                                 ;     474 #define MAX_TAIL_LEN 8
                                 ;     475 
                                 ;     476 void json_print_response(uint8_t status)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",476
000008EF 6E67                    		PUSHM R6-R7
000008F1 7100D8                  		ADD #0FFFFFFD8H, R0
000008F4 C70127                  		MOV.B R1, 27H[R0]
                                 ;     477 {
                                 ;     478 #ifdef __SILENCE_JSON_RESPONSES
                                 ;     479 	return;
                                 ;     480 #endif
                                 ;     481 
                                 ;     482 	if (js.json_verbosity == JV_SILENT) return;			// silent responses
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",482
000008F7 FBE2rrrrrrrr            		MOV.L #_js, R14
000008FD 58EE                    		MOVU.B [R14], R14
000008FF 610E                    		CMP #00H, R14
00000901 3Arrrr               W  		BEQ L286
00000904                         L244:	; bb13
                                 ;     483 
                                 ;     484 	// Body processing
                                 ;     485 	nvObj_t *nv = nv_body;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",485
00000904 FB12rrrrrrrr            		MOV.L #_nvl, R1
0000090A 711128                  		ADD #28H, R1
0000090D A009                    		MOV.L R1, 04H[R0]
0000090F                         L245:	; bb13.split
                                 ;     486 	if (status == STAT_JSON_SYNTAX_ERROR) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",486
0000090F 590127                  		MOVU.B 27H[R0], R1
00000912 75516F                  		CMP #6FH, R1
00000915 21rr                    		BNE L248
00000917                         L246:	; bb15
                                 ;     487 		nv_reset_nv_list();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",487
00000917 05rrrrrr             A  		BSR _nv_reset_nv_list
0000091B                         L247:	; bb15.split
                                 ;     488 		nv_add_string((const char_t *)"err", escape_string(cs.in_buf, cs.saved_buf));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",488
0000091B FB12rrrrrrrr            		MOV.L #_cs, R1
00000921 72124303                		ADD #0343H, R1, R2
00000925 711144                  		ADD #44H, R1
00000928 05rrrrrr             A  		BSR _escape_string
0000092C EF12                    		MOV.L R1, R2
0000092E FB12rrrrrrrr            		MOV.L #_L26, R1
00000934 05rrrrrr             A  		BSR _nv_add_string
00000938 38rrrr               W  		BRA L267
0000093B                         L248:	; bb20
                                 ;     489 
                                 ;     490 	} else if (cm.machine_state != MACHINE_INITIALIZING) {	// always do full echo during startup
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",490
0000093B FBE2rrrrrrrr            		MOV.L #_cm, R14
00000941 5AEE1D02                		MOVU.B 021DH[R14], R14
00000945 610E                    		CMP #00H, R14
00000947 3Arrrr               W  		BEQ L267
0000094A                         L249:	; bb23
                                 ;     491 		uint8_t nv_type;
                                 ;     492 		do {
                                 ;     493 			if ((nv_type = nv_get_type(nv)) == NV_TYPE_NULL) break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",493
0000094A A809                    		MOV.L 04H[R0], R1
0000094C 05rrrrrr             A  		BSR _nv_get_type
00000950 C70126                  		MOV.B R1, 26H[R0]
00000953 6101                    		CMP #00H, R1
00000955 3Arrrr               W  		BEQ L267
00000958                         L250:	; bb34
                                 ;     494 
                                 ;     495 			if (nv_type == NV_TYPE_GCODE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",495
00000958 590126                  		MOVU.B 26H[R0], R1
0000095B 6121                    		CMP #02H, R1
0000095D 21rr                    		BNE L253
0000095F                         L251:	; bb36
                                 ;     496 				if (js.echo_json_gcode_block == false) {	// kill command echo if not enabled
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",496
0000095F FB12rrrrrrrr            		MOV.L #_js, R1
00000965 B199                    		MOVU.B 07H[R1], R1
00000967 6101                    		CMP #00H, R1
00000969 21rr                    		BNE L263
0000096B                         L252:	; bb37
                                 ;     497 					nv->valuetype = TYPE_EMPTY;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",497
0000096B A809                    		MOV.L 04H[R0], R1
0000096D 3C1BFF                  		MOV.B #0FFH, 0BH[R1]
00000970 2Err                 B  		BRA L263
00000972                         L253:	; bb47
                                 ;     498 				}
                                 ;     499 
                                 ;     500 //++++		} else if (nv_type == NV_TYPE_CONFIG) {			// kill config echo if not enabled
                                 ;     501 //fix me		if (js.echo_json_configs == false) {
                                 ;     502 //					nv->valuetype = TYPE_EMPTY;
                                 ;     503 //				}
                                 ;     504 
                                 ;     505 			} else if (nv_type == NV_TYPE_MESSAGE) {		// kill message echo if not enabled
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",505
00000972 590126                  		MOVU.B 26H[R0], R1
00000975 6141                    		CMP #04H, R1
00000977 21rr                    		BNE L256
00000979                         L254:	; bb49
                                 ;     506 				if (js.echo_json_messages == false) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",506
00000979 FB12rrrrrrrr            		MOV.L #_js, R1
0000097F B111                    		MOVU.B 04H[R1], R1
00000981 6101                    		CMP #00H, R1
00000983 21rr                    		BNE L263
00000985                         L255:	; bb50
                                 ;     507 					nv->valuetype = TYPE_EMPTY;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",507
00000985 A809                    		MOV.L 04H[R0], R1
00000987 3C1BFF                  		MOV.B #0FFH, 0BH[R1]
0000098A 2Err                 B  		BRA L263
0000098C                         L256:	; bb60
                                 ;     508 				}
                                 ;     509 
                                 ;     510 			} else if (nv_type == NV_TYPE_LINENUM) {		// kill line number echo if not enabled
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",510
0000098C 590126                  		MOVU.B 26H[R0], R1
0000098F 6151                    		CMP #05H, R1
00000991 21rr                    		BNE L263
00000993                         L257:	; bb62
                                 ;     511 				if ((js.echo_json_linenum == false) || (fp_ZERO(nv->value))) { // do not report line# 0
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",511
00000993 FB12rrrrrrrr            		MOV.L #_js, R1
00000999 B191                    		MOVU.B 06H[R1], R1
0000099B 6101                    		CMP #00H, R1
0000099D 20rr                    		BEQ L260
0000099F 08                   S  		BRA L259
000009A0                         L258:	; bb63
                                 ;     512 					nv->valuetype = TYPE_EMPTY;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",512
000009A0 A809                    		MOV.L 04H[R0], R1
000009A2 3C1BFF                  		MOV.B #0FFH, 0BH[R1]
000009A5 2Err                 B  		BRA L263
000009A7                         L259:	; bb70
000009A7 A809                    		MOV.L 04H[R0], R1
000009A9 A911                    		MOV.L 10H[R1], R1
000009AB 7BF1                    		BCLR #1FH, R1
000009AD FD7211BD378635          		FCMP #358637BDH, R1
000009B4 26rr                    		BPZ L261
000009B6                         L260:	; bb77
000009B6 F80601                  		MOV.L #00000001H, [R0]
000009B9 08                   S  		BRA L262
000009BA                         L261:	; bb78
000009BA F80600                  		MOV.L #00000000H, [R0]
000009BD                         L262:	; bb79
000009BD EC01                    		MOV.L [R0], R1
000009BF 6101                    		CMP #00H, R1
000009C1 21rr                    		BNE L258
000009C3                         L263:	; bb102
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",492
000009C3 A809                    		MOV.L 04H[R0], R1
000009C5 A819                    		MOV.L 04H[R1], R1
000009C7 A009                    		MOV.L R1, 04H[R0]
000009C9 6101                    		CMP #00H, R1
000009CB 3Brrrr               W  		BNE L249
000009CE 2Err                 B  		BRA L267
000009D0                         L264:	; bb125
                                 ;     513 				}
                                 ;     514 			}
                                 ;     515 		} while ((nv = nv->nx) != NULL);
                                 ;     516 	}
                                 ;     517 
                                 ;     518 	// Footer processing
                                 ;     519 	while(nv->valuetype != TYPE_EMPTY) {					// find a free nvObj at end of the list...
                                 ;     520 		if ((nv = nv->nx) == NULL) {						//...or hit the NULL and return w/o a footer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",520
000009D0 A809                    		MOV.L 04H[R0], R1
000009D2 A819                    		MOV.L 04H[R1], R1
000009D4 A009                    		MOV.L R1, 04H[R0]
000009D6 6101                    		CMP #00H, R1
000009D8 21rr                    		BNE L267
000009DA                         L265:	; bb126
                                 ;     521 			json_serialize(nv_header, cs.out_buf, sizeof(cs.out_buf));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",521
000009DA FB22rrrrrrrr            		MOV.L #_cs, R2
000009E0 72224301                		ADD #0143H, R2
000009E4 FB12rrrrrrrr            		MOV.L #_nvl, R1
000009EA 6241                    		ADD #04H, R1
000009EC FB3A0002                		MOV.L #00000200H, R3
000009F0 39rrrr               W  		BSR _json_serialize
000009F3                         L266:	; bb126.split
                                 ;     522 			return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",522
000009F3 3F670C                  		RTSD #30H, R6-R7
000009F6                         L267:	; bb137
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",519
000009F6 A809                    		MOV.L 04H[R0], R1
000009F8 8A99                    		MOV.B 0BH[R1], R1
000009FA 7501FF                  		CMP #0FFFFFFFFH, R1
000009FD 21rr                    		BNE L264
000009FF                         L268:	; bb145
                                 ;     523 		}
                                 ;     524 	}
                                 ;     525 	char_t footer_string[NV_FOOTER_LEN];
                                 ;     526 	sprintf((char *)footer_string, "%d,%d,%d,0", FOOTER_REVISION, status, cs.linelen);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",526
000009FF FB12rrrrrrrr            		MOV.L #_cs, R1
00000A05 BB91                    		MOVU.W 1CH[R1], R1
00000A07 590227                  		MOVU.B 27H[R0], R2
00000A0A 7100F0                  		ADD #0FFFFFFF0H, R0
00000A0D A089                    		MOV.L R1, 0CH[R0]
00000A0F A082                    		MOV.L R2, 08H[R0]
00000A11 FBE2rrrrrrrr            		MOV.L #_L27, R14
00000A17 E30E                    		MOV.L R14, [R0]
00000A19 3E0101                  		MOV.L #00000001H, 04H[R0]
00000A1C 710118                  		ADD #18H, R0, R1
00000A1F 05rrrrrr             A  		BSR _sprintf
00000A23 710010                  		ADD #10H, R0
00000A26                         L269:	; bb145.split
                                 ;     527 	cs.linelen = 0;											// reset linelen so it's only reported once
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",527
00000A26 FB12rrrrrrrr            		MOV.L #_cs, R1
00000A2C 3D1E00                  		MOV.W #0000H, 1CH[R1]
00000A2F                         L270:	; bb145.split1
                                 ;     528 
                                 ;     529 	nv_copy_string(nv, footer_string);						// link string to nv object
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",529
00000A2F A809                    		MOV.L 04H[R0], R1
00000A31 710208                  		ADD #08H, R0, R2
00000A34 05rrrrrr             A  		BSR _nv_copy_string
00000A38                         L271:	; bb145.split2
                                 ;     530 //	nv->depth = 0;											// footer 'f' is a peer to response 'r' (hard wired to 0
                                 ;     531 	nv->depth = js.json_footer_depth;						// 0=footer is peer to response 'r', 1=child of response 'r'
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",531
00000A38 FBE2rrrrrrrr            		MOV.L #_js, R14
00000A3E A809                    		MOV.L 04H[R0], R1
00000A40 C5E1010A                		MOV.B 01H[R14], 0AH[R1]
00000A44                         L272:	; bb145.split3
                                 ;     532 	nv->valuetype = TYPE_ARRAY;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",532
00000A44 A809                    		MOV.L 04H[R0], R1
00000A46 3C1B06                  		MOV.B #06H, 0BH[R1]
00000A49                         L273:	; bb145.split4
                                 ;     533 	strcpy(nv->token, "f");									// terminate the list
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",533
00000A49 A809                    		MOV.L 04H[R0], R1
00000A4B FBE2rrrrrrrr            		MOV.L #_L28, R14
00000A51 D4E10C                  		MOV.W [R14], 18H[R1]
00000A54                         L274:	; bb145.split5
                                 ;     534 	nv->nx = NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",534
00000A54 A809                    		MOV.L 04H[R0], R1
00000A56 3E1100                  		MOV.L #00000000H, 04H[R1]
00000A59                         L275:	; bb145.split6
                                 ;     535 
                                 ;     536 	// do all this to avoid having to serialize it twice
                                 ;     537 	int16_t strcount = json_serialize(nv_header, cs.out_buf, sizeof(cs.out_buf));// make JSON string w/o checksum
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",537
00000A59 FB22rrrrrrrr            		MOV.L #_cs, R2
00000A5F 72224301                		ADD #0143H, R2
00000A63 FB12rrrrrrrr            		MOV.L #_nvl, R1
00000A69 6241                    		ADD #04H, R1
00000A6B FB3A0002                		MOV.L #00000200H, R3
00000A6F 39rrrr               W  		BSR _json_serialize
00000A72 9309                    		MOV.W R1, 1AH[R0]
00000A74                         L276:	; bb145.split7
                                 ;     538 	if (strcount < 0) { return;}							// encountered an overrun during serialization
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",538
00000A74 9B09                    		MOV.W 1AH[R0], R1
00000A76 6101                    		CMP #00H, R1
00000A78 28rr                  * 		BLT L286
         38rrrr                  
00000A7D                         L277:	; bb175
                                 ;     539 	if (strcount > OUTPUT_BUFFER_LEN - MAX_TAIL_LEN) { return;}	// would overrun during checksum generation
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",539
00000A7D 9B09                    		MOV.W 1AH[R0], R1
00000A7F 7601F801                		CMP #01F8H, R1
00000A83 2Brr                  * 		BGT L286
         38rrrr                  
00000A88                         L278:	; bb183
                                 ;     540 	int16_t strcount2 = strcount;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",540
00000A88 D5000D0E                		MOV.W 1AH[R0], 1CH[R0]
00000A8C 08                   S  		BRA L280
00000A8D                         L279:	; bb185
00000A8D 9B09                    		MOV.W 1AH[R0], R1
00000A8F 6011                    		SUB #01H, R1
00000A91 9309                    		MOV.W R1, 1AH[R0]
00000A93                         L280:	; bb188
                                 ;     541 	char tail[MAX_TAIL_LEN];
                                 ;     542 
                                 ;     543 	while (cs.out_buf[strcount] != '0') { strcount--; }		// find end of checksum
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",543
00000A93 FBE2rrrrrrrr            		MOV.L #_cs, R14
00000A99 06490E0D                		ADD 1AH[R0].W, R14
00000A9D 5AEE4301                		MOVU.B 0143H[R14], R14
00000AA1 755E30                  		CMP #30H, R14
00000AA4 21rr                    		BNE L279
00000AA6                         L281:	; bb197
                                 ;     544 	strcpy(tail, cs.out_buf + strcount + 1);				// save the json termination
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",544
00000AA6 FB22rrrrrrrr            		MOV.L #_cs, R2
00000AAC 0649020D                		ADD 1AH[R0].W, R2
00000AB0 72224401                		ADD #0144H, R2
00000AB4 FB36FF                  		MOV.L #0FFFFFFFFH, R3
00000AB7 71011E                  		ADD #1EH, R0, R1
00000ABA 7F87                    		SMOVU
00000ABC 08                   S  		BRA L283
00000ABD                         L282:	; bb203
00000ABD 9B81                    		MOV.W 1CH[R0], R1
00000ABF 6011                    		SUB #01H, R1
00000AC1 9381                    		MOV.W R1, 1CH[R0]
00000AC3                         L283:	; bb206
                                 ;     545 
                                 ;     546 	while (cs.out_buf[strcount2] != ',') { strcount2--; }// find start of checksum
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",546
00000AC3 FBE2rrrrrrrr            		MOV.L #_cs, R14
00000AC9 06490E0E                		ADD 1CH[R0].W, R14
00000ACD 5AEE4301                		MOVU.B 0143H[R14], R14
00000AD1 755E2C                  		CMP #2CH, R14
00000AD4 21rr                    		BNE L282
00000AD6                         L284:	; bb215
                                 ;     547 	sprintf((char *)cs.out_buf + strcount2 + 1, "%d%s", compute_checksum(cs.out_buf, strcount2), tail);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",547
00000AD6 BB86                    		MOVU.W 1CH[R0], R6
00000AD8 FB72rrrrrrrr            		MOV.L #_cs, R7
00000ADE 72774301                		ADD #0143H, R7
00000AE2 EF71                    		MOV.L R7, R1
00000AE4 EF62                    		MOV.L R6, R2
00000AE6 05rrrrrr             A  		BSR _compute_checksum
00000AEA 60C0                    		SUB #0CH, R0
00000AEC 71022A                  		ADD #2AH, R0, R2
00000AEF A082                    		MOV.L R2, 08H[R0]
00000AF1 FBE2rrrrrrrr            		MOV.L #_L29, R14
00000AF7 E30E                    		MOV.L R14, [R0]
00000AF9 A009                    		MOV.L R1, 04H[R0]
00000AFB DF6E                    		MOV.W R6, R14
00000AFD 4BE7                    		ADD R14, R7
00000AFF EF71                    		MOV.L R7, R1
00000B01 6211                    		ADD #01H, R1
00000B03 05rrrrrr             A  		BSR _sprintf
00000B07 62C0                    		ADD #0CH, R0
00000B09                         L285:	; bb215.split
00000B09 6080                    		SUB #08H, R0
                                 ;     548 	fprintf(stderr, "%s", cs.out_buf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",548
00000B0B FB12rrrrrrrr            		MOV.L #_cs, R1
00000B11 72114301                		ADD #0143H, R1
00000B15 A009                    		MOV.L R1, 04H[R0]
00000B17 FBE2rrrrrrrr            		MOV.L #_L25, R14
00000B1D E30E                    		MOV.L R14, [R0]
00000B1F FB12rrrrrrrr            		MOV.L #__Stderr, R1
00000B25 05rrrrrr             A  		BSR _fprintf
00000B29 6280                    		ADD #08H, R0
00000B2B 3F670C                  		RTSD #30H, R6-R7
00000B2E                         L286:	; return
                                 ;     549 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",549
00000B2E 3F670C                  		RTSD #30H, R6-R7
00000B31                         _json_set_jv:
                                 		.STACK	_json_set_jv=12
                                 ;     550 
                                 ;     551 /***********************************************************************************
                                 ;     552  * CONFIGURATION AND INTERFACE FUNCTIONS
                                 ;     553  * Functions to get and set variables from the cfgArray table
                                 ;     554  ***********************************************************************************/
                                 ;     555 
                                 ;     556 /*
                                 ;     557  * json_set_jv()
                                 ;     558  */
                                 ;     559 
                                 ;     560 stat_t json_set_jv(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",560
00000B31 6080                    		SUB #08H, R0
00000B33 A009                    		MOV.L R1, 04H[R0]
00000B35 FBE20000A040            		MOV.L #40A00000H, R14
                                 ;     561 {
                                 ;     562 	if (nv->value > JV_VERBOSE)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",562
00000B3B FC851E04                		FCMP 10H[R1].L, R14
00000B3F 26rr                    		BPZ L289
00000B41                         L288:	; bb2
                                 ;     563         return (STAT_INPUT_VALUE_RANGE_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",563
00000B41 3C026E                  		MOV.B #6EH, 02H[R0]
00000B44 38rrrr               W  		BRA L308
00000B47                         L289:	; bb9
                                 ;     564 	js.json_verbosity = nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",564
00000B47 A809                    		MOV.L 04H[R0], R1
00000B49 A911                    		MOV.L 10H[R1], R1
00000B4B FD72110000004F          		FCMP #4F000000H, R1
00000B52 29rr                    		BLT L291
00000B54                         L290:	; bb9
00000B54 FD7221000080CF          		FADD #0CF800000H, R1
00000B5B                         L291:	; bb9
00000B5B FC971E                  		FTOI R1, R14
00000B5E FBF2rrrrrrrr            		MOV.L #_js, R15
00000B64 C3FE                    		MOV.B R14, [R15]
00000B66                         L292:	; bb9.split
                                 ;     565 
                                 ;     566 	js.echo_json_footer = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",566
00000B66 FB12rrrrrrrr            		MOV.L #_js, R1
00000B6C 3C1300                  		MOV.B #00H, 03H[R1]
00000B6F                         L293:	; bb9.split1
                                 ;     567 	js.echo_json_messages = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",567
00000B6F FB12rrrrrrrr            		MOV.L #_js, R1
00000B75 3C1400                  		MOV.B #00H, 04H[R1]
00000B78                         L294:	; bb9.split2
                                 ;     568 	js.echo_json_configs = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",568
00000B78 FB12rrrrrrrr            		MOV.L #_js, R1
00000B7E 3C1500                  		MOV.B #00H, 05H[R1]
00000B81                         L295:	; bb9.split3
                                 ;     569 	js.echo_json_linenum = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",569
00000B81 FB12rrrrrrrr            		MOV.L #_js, R1
00000B87 3C1600                  		MOV.B #00H, 06H[R1]
00000B8A                         L296:	; bb9.split4
                                 ;     570 	js.echo_json_gcode_block = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",570
00000B8A FB12rrrrrrrr            		MOV.L #_js, R1
00000B90 3C1700                  		MOV.B #00H, 07H[R1]
00000B93                         L297:	; bb9.split5
                                 ;     571 
                                 ;     572 	if (nv->value >= JV_FOOTER) 	{ js.echo_json_footer = true;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",572
00000B93 A809                    		MOV.L 04H[R0], R1
00000B95 A911                    		MOV.L 10H[R1], R1
00000B97 FD72110000803F          		FCMP #3F800000H, R1
00000B9E 29rr                    		BLT L299
00000BA0                         L298:	; bb15
00000BA0 FB12rrrrrrrr            		MOV.L #_js, R1
00000BA6 3C1301                  		MOV.B #01H, 03H[R1]
00000BA9                         L299:	; bb23
                                 ;     573 	if (nv->value >= JV_MESSAGES)	{ js.echo_json_messages = true;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",573
00000BA9 A809                    		MOV.L 04H[R0], R1
00000BAB A911                    		MOV.L 10H[R1], R1
00000BAD FD721100000040          		FCMP #40000000H, R1
00000BB4 29rr                    		BLT L301
00000BB6                         L300:	; bb24
00000BB6 FB12rrrrrrrr            		MOV.L #_js, R1
00000BBC 3C1401                  		MOV.B #01H, 04H[R1]
00000BBF                         L301:	; bb32
                                 ;     574 	if (nv->value >= JV_CONFIGS)	{ js.echo_json_configs = true;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",574
00000BBF A809                    		MOV.L 04H[R0], R1
00000BC1 A911                    		MOV.L 10H[R1], R1
00000BC3 FD721100004040          		FCMP #40400000H, R1
00000BCA 29rr                    		BLT L303
00000BCC                         L302:	; bb33
00000BCC FB12rrrrrrrr            		MOV.L #_js, R1
00000BD2 3C1501                  		MOV.B #01H, 05H[R1]
00000BD5                         L303:	; bb41
                                 ;     575 	if (nv->value >= JV_LINENUM)	{ js.echo_json_linenum = true;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",575
00000BD5 A809                    		MOV.L 04H[R0], R1
00000BD7 A911                    		MOV.L 10H[R1], R1
00000BD9 FD721100008040          		FCMP #40800000H, R1
00000BE0 29rr                    		BLT L305
00000BE2                         L304:	; bb42
00000BE2 FB12rrrrrrrr            		MOV.L #_js, R1
00000BE8 3C1601                  		MOV.B #01H, 06H[R1]
00000BEB                         L305:	; bb50
                                 ;     576 	if (nv->value >= JV_VERBOSE)	{ js.echo_json_gcode_block = true;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",576
00000BEB A809                    		MOV.L 04H[R0], R1
00000BED A911                    		MOV.L 10H[R1], R1
00000BEF FD72110000A040          		FCMP #40A00000H, R1
00000BF6 29rr                    		BLT L307
00000BF8                         L306:	; bb51
00000BF8 FB12rrrrrrrr            		MOV.L #_js, R1
00000BFE 3C1701                  		MOV.B #01H, 07H[R1]
00000C01                         L307:	; bb58
                                 ;     577 
                                 ;     578 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",578
00000C01 3C0200                  		MOV.B #00H, 02H[R0]
00000C04                         L308:	; bb60
00000C04 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     579 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",579
00000C08 B089                    		MOVU.B 03H[R0], R1
00000C0A 6702                    		RTSD #08H
00000C0C                         _js_print_ej:
                                 		.STACK	_js_print_ej=8
                                 ;     580 
                                 ;     581 
                                 ;     582 /***********************************************************************************
                                 ;     583  * TEXT MODE SUPPORT
                                 ;     584  * Functions to print variables from the cfgArray table
                                 ;     585  ***********************************************************************************/
                                 ;     586 
                                 ;     587 #ifdef __TEXT_MODE
                                 ;     588 
                                 ;     589 /*
                                 ;     590  * js_print_ej()
                                 ;     591  * js_print_jv()
                                 ;     592  * js_print_j2()
                                 ;     593  * js_print_fs()
                                 ;     594  */
                                 ;     595 
                                 ;     596 static const char fmt_ej[] PROGMEM = "[ej]  enable json mode%13d [0=text,1=JSON]\n";
                                 ;     597 static const char fmt_jv[] PROGMEM = "[jv]  json verbosity%15d [0=silent,1=footer,2=messages,3=configs,4=linenum,5=verbose]\n";
                                 ;     598 static const char fmt_js[] PROGMEM = "[js]  json serialize style%9d [0=relaxed,1=strict]\n";
                                 ;     599 static const char fmt_fs[] PROGMEM = "[fs]  footer style%17d [0=new,1=old]\n";
                                 ;     600 
                                 ;     601 void js_print_ej(nvObj_t *nv) { text_print_ui8(nv, fmt_ej);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",601
00000C0C 6040                    		SUB #04H, R0
00000C0E E301                    		MOV.L R1, [R0]
00000C10 FB22rrrrrrrr            		MOV.L #__$fmt_ej, R2
00000C16 05rrrrrr             A  		BSR _text_print_ui8
00000C1A 6701                    		RTSD #04H
00000C1C                         _js_print_jv:
                                 		.STACK	_js_print_jv=8
                                 ;     602 void js_print_jv(nvObj_t *nv) { text_print_ui8(nv, fmt_jv);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",602
00000C1C 6040                    		SUB #04H, R0
00000C1E E301                    		MOV.L R1, [R0]
00000C20 FB22rrrrrrrr            		MOV.L #__$fmt_jv, R2
00000C26 05rrrrrr             A  		BSR _text_print_ui8
00000C2A 6701                    		RTSD #04H
00000C2C                         _js_print_js:
                                 		.STACK	_js_print_js=8
                                 ;     603 void js_print_js(nvObj_t *nv) { text_print_ui8(nv, fmt_js);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",603
00000C2C 6040                    		SUB #04H, R0
00000C2E E301                    		MOV.L R1, [R0]
00000C30 FB22rrrrrrrr            		MOV.L #__$fmt_js, R2
00000C36 05rrrrrr             A  		BSR _text_print_ui8
00000C3A 6701                    		RTSD #04H
00000C3C                         _js_print_fs:
                                 		.STACK	_js_print_fs=8
                                 ;     604 void js_print_fs(nvObj_t *nv) { text_print_ui8(nv, fmt_fs);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\json_parser.c",604
00000C3C 6040                    		SUB #04H, R0
00000C3E E301                    		MOV.L R1, [R0]
00000C40 FB22rrrrrrrr            		MOV.L #__$fmt_fs, R2
00000C46 05rrrrrr             A  		BSR _text_print_ui8
00000C4A 6701                    		RTSD #04H
                                 ;     605 
                                 ;     606 #endif // __TEXT_MODE
                                 ;     607 
                                 ;     608 #ifdef __cplusplus
                                 ;     609 }
                                 ;     610 #endif // __cplusplus
                                 		.SECTION	C_1,ROMDATA
00000000                         __$fmt_ej:
00000000 5B656A5D                		.byte	"[ej]  enable json mode%13d [0=text,1=JSON]"
         2020656E                
         61626C65                
         206A736F                
         6E206D6F                
         64652531                
         3364205B                
         303D7465                
         78742C31                
         3D4A534F                
         4E5D                    
0000002A 0A00                    		.byte	0AH,00H
0000002C                         __$fmt_jv:
0000002C 5B6A765D                		.byte	"[jv]  json verbosity%15d [0=silent,1=footer,2=messages,3=configs,4=linenum,5=verbose]"
         20206A73                
         6F6E2076                
         6572626F                
         73697479                
         25313564                
         205B303D                
         73696C65                
         6E742C31                
         3D666F6F                
         7465722C                
         323D6D65                
         73736167                
         65732C33                
         3D636F6E                
         66696773                
         2C343D6C                
         696E656E                
         756D2C35                
         3D766572                
         626F7365                
         5D                      
00000081 0A00                    		.byte	0AH,00H
00000083                         __$fmt_js:
00000083 5B6A735D                		.byte	"[js]  json serialize style%9d [0=relaxed,1=strict]"
         20206A73                
         6F6E2073                
         65726961                
         6C697A65                
         20737479                
         6C652539                
         64205B30                
         3D72656C                
         61786564                
         2C313D73                
         74726963                
         745D                    
000000B5 0A00                    		.byte	0AH,00H
000000B7                         __$fmt_fs:
000000B7 5B66735D                		.byte	"[fs]  footer style%17d [0=new,1=old]"
         2020666F                
         6F746572                
         20737479                
         6C652531                
         3764205B                
         303D6E65                
         772C313D                
         6F6C645D                
000000DB 0A00                    		.byte	0AH,00H
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 00                      		.byte	0
00000001 00                      		.byte	0
00000002 00                      		.byte	0
00000003 00                      		.byte	0
00000004                         _L11:
00000004 7B2C                    		.byte	"{,"
00000006 2200                    		.byte	22H,00H
00000008                         _L12:
00000008 3A                      		.byte	":"
00000009 2200                    		.byte	22H,00H
0000000B                         _L13:
0000000B 7D2C                    		.byte	"},"
0000000D 2200                    		.byte	22H,00H
0000000F                         _L14:
0000000F 7B                      		.byte	"{"
00000010 22                      		.byte	22H
00000011 2E2D2B                  		.byte	".-+"
00000014 00                      		.byte	00H
00000015                         _L15:
00000015 25733A                  		.byte	"%s:"
00000018 00                      		.byte	00H
00000019                         _L16:
00000019 22                      		.byte	22H
0000001A 2573                    		.byte	"%s"
0000001C 22                      		.byte	22H
0000001D 3A                      		.byte	":"
0000001E 00                      		.byte	00H
0000001F                         _L17:
0000001F 6E756C6C                		.byte	"null"
00000023 00                      		.byte	00H
00000024                         _L18:
00000024 25312E30                		.byte	"%1.0f"
         66                      
00000029 00                      		.byte	00H
0000002A                         _L19:
0000002A 22                      		.byte	22H
0000002B 3078256C                		.byte	"0x%lx"
         78                      
00000030 2200                    		.byte	22H,00H
00000032                         _L20:
00000032 22                      		.byte	22H
00000033 2573                    		.byte	"%s"
00000035 2200                    		.byte	22H,00H
00000037                         _L21:
00000037 5B25735D                		.byte	"[%s]"
0000003B 00                      		.byte	00H
0000003C                         _L22:
0000003C 66616C73                		.byte	"false"
         65                      
00000041 00                      		.byte	00H
00000042                         _L23:
00000042 74727565                		.byte	"true"
00000046 00                      		.byte	00H
00000047                         _L24:
00000047 7D                      		.byte	"}"
00000048 0A00                    		.byte	0AH,00H
0000004A                         _L25:
0000004A 2573                    		.byte	"%s"
0000004C 00                      		.byte	00H
0000004D                         _L26:
0000004D 657272                  		.byte	"err"
00000050 00                      		.byte	00H
00000051                         _L27:
00000051 25642C25                		.byte	"%d,%d,%d,0"
         642C2564                
         2C30                    
0000005B 00                      		.byte	00H
0000005C                         _L28:
0000005C 66                      		.byte	"f"
0000005D 00                      		.byte	00H
0000005E                         _L29:
0000005E 25642573                		.byte	"%d%s"
00000062 00                      		.byte	00H
                                 		.SECTION	B_1,DATA
00000000                         _js:
00000000(00000008H)              		.blkb	8
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     02443   LINES

Section List

Attr         Size               Name
CODE     0000003148(00000C4CH)  P
ROMDATA  0000000221(000000DDH)  C_1
ROMDATA  0000000099(00000063H)  L
DATA     0000000008(00000008H)  B_1

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx305E\$ccrx\json_parser.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\json_parser.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\src\cnc\json_parser.obj
