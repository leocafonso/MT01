* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Mar 14 17:28:26 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  14-Mar-2017 17:28:26
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=cycle_homing.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=cycle_homing.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;cycle_homing.c
                                 
                                 		.glb	_status_code
                                 		.glb	_cm
                                 		.glb	_mr
                                 		.glb	_sw
                                 		.glb	_cm_homing_cycle_start
                                 		.glb	_cm_get_units_mode
                                 		.glb	_cm_get_coord_system
                                 		.glb	_cm_get_distance_mode
                                 		.glb	_cm_get_feed_rate_mode
                                 		.glb	_cm_get_feed_rate
                                 		.glb	_cm_set_units_mode
                                 		.glb	_cm_set_distance_mode
                                 		.glb	_cm_set_coord_system
                                 		.glb	_cm_set_feed_rate_mode
                                 		.glb	_cm_homing_cycle_start_no_set
                                 		.glb	_cm_homing_callback
                                 		.glb	_cm_get_runtime_busy
                                 		.glb	_get_switch_mode
                                 		.glb	_cm_get_axis_jerk
                                 		.glb	_cm_set_axis_jerk
                                 		.glb	_cm_set_position
                                 		.glb	_cm_get_work_position
                                 		.glb	_mp_flush_planner
                                 		.glb	_cm_request_cycle_start
                                 		.glb	_cm_straight_feed
                                 		.glb	_sr_request_status_report
                                 		.glb	_nv_reset_nv_list
                                 		.glb	_nv_add_conditional_message
                                 		.glb	_sprintf
                                 		.glb	_cm_get_axis_char
                                 		.glb	_nv_print_list
                                 		.glb	_cm_set_motion_mode
                                 		.glb	_cm_cycle_end
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _cm_homing_cycle_start:
                                 		.STACK	_cm_homing_cycle_start=8
                                 ;       1 /*
                                 ;       2  * cycle_homing.c - homing cycle extension to canonical_machine
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * As a special exception, you may use this file as part of a software library without
                                 ;      13  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      14  * inline functions from this file, or you compile this file and link it with  other
                                 ;      15  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      16  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      17  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      18  * GNU General Public License.
                                 ;      19  *
                                 ;      20  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      21  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      22  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      23  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      24  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      25  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      26  */
                                 ;      27 
                                 ;      28 #include "tinyg.h"
                                 ;      29 #include "util.h"
                                 ;      30 #include "config.h"
                                 ;      31 #include "json_parser.h"
                                 ;      32 #include "text_parser.h"
                                 ;      33 #include "canonical_machine.h"
                                 ;      34 #include "planner.h"
                                 ;      35 #include "switch.h"
                                 ;      36 #include "report.h"
                                 ;      37 
                                 ;      38 #ifdef __cplusplus
                                 ;      39 extern "C"{
                                 ;      40 #endif
                                 ;      41 
                                 ;      42 /**** Homing singleton structure ****/
                                 ;      43 
                                 ;      44 struct hmHomingSingleton {			// persistent homing runtime variables
                                 ;      45 	// controls for homing cycle
                                 ;      46 	int8_t axis;					// axis currently being homed
                                 ;      47 	uint8_t min_mode;				// mode for min switch for this axis
                                 ;      48 	uint8_t max_mode;				// mode for max switch for this axis
                                 ;      49 
                                 ;      50 #ifndef __NEW_SWITCHES
                                 ;      51 	int8_t homing_switch;			// homing switch for current axis (index into switch flag table)
                                 ;      52 	int8_t limit_switch;			// limit switch for current axis, or -1 if none
                                 ;      53 #else
                                 ;      54 	int8_t homing_switch_axis;		// axis of current homing switch, or -1 if none
                                 ;      55 	uint8_t homing_switch_position;	// min/max position of current homing switch
                                 ;      56 	int8_t limit_switch_axis;		// axis of current limit switch, or -1 if none
                                 ;      57 	uint8_t limit_switch_position;	// min/max position of current limit switch
                                 ;      58 #endif
                                 ;      59 	void (*switch_saved_on_trailing)(struct swSwitch *s);
                                 ;      60 
                                 ;      61 	uint8_t homing_closed;			// 0=open, 1=closed
                                 ;      62 	uint8_t limit_closed;			// 0=open, 1=closed
                                 ;      63 	uint8_t set_coordinates;		// G28.4 flag. true = set coords to zero at the end of homing cycle
                                 ;      64 	stat_t (*func)(int8_t axis);	// binding for callback function state machine
                                 ;      65 
                                 ;      66 	// per-axis parameters
                                 ;      67 	float direction;				// set to 1 for positive (max), -1 for negative (to min);
                                 ;      68 	float search_travel;			// signed distance to travel in search
                                 ;      69 	float search_velocity;			// search speed as positive number
                                 ;      70 	float latch_velocity;			// latch speed as positive number
                                 ;      71 	float latch_backoff;			// max distance to back off switch during latch phase
                                 ;      72 	float zero_backoff;				// distance to back off switch before setting zero
                                 ;      73 	float max_clear_backoff;		// maximum distance of switch clearing backoffs before erring out
                                 ;      74 
                                 ;      75 	// state saved from gcode model
                                 ;      76 	uint8_t saved_units_mode;		// G20,G21 global setting
                                 ;      77 	uint8_t saved_coord_system;		// G54 - G59 setting
                                 ;      78 	uint8_t saved_distance_mode;	// G90,G91 global setting
                                 ;      79 	uint8_t saved_feed_rate_mode;   // G93,G94 global setting
                                 ;      80 	float saved_feed_rate;			// F setting
                                 ;      81 	float saved_jerk;				// saved and restored for each axis homed
                                 ;      82 };
                                 ;      83 static struct hmHomingSingleton hm;
                                 ;      84 
                                 ;      85 /**** NOTE: global prototypes and other .h info is located in canonical_machine.h ****/
                                 ;      86 
                                 ;      87 static stat_t _set_homing_func(stat_t (*func)(int8_t axis));
                                 ;      88 static stat_t _homing_axis_start(int8_t axis);
                                 ;      89 static stat_t _homing_axis_clear(int8_t axis);
                                 ;      90 static stat_t _homing_axis_search(int8_t axis);
                                 ;      91 static stat_t _homing_axis_latch(int8_t axis);
                                 ;      92 static stat_t _homing_axis_zero_backoff(int8_t axis);
                                 ;      93 static stat_t _homing_axis_set_zero(int8_t axis);
                                 ;      94 static stat_t _homing_axis_move(int8_t axis, float target, float velocity);
                                 ;      95 static stat_t _homing_abort(int8_t axis);
                                 ;      96 static stat_t _homing_error_exit(int8_t axis, stat_t status);
                                 ;      97 static stat_t _homing_finalize_exit(int8_t axis);
                                 ;      98 static int8_t _get_next_axis(int8_t axis);
                                 ;      99 
                                 ;     100 /***********************************************************************************
                                 ;     101  **** G28.2 Homing Cycle ***********************************************************
                                 ;     102  ***********************************************************************************/
                                 ;     103 
                                 ;     104 /*****************************************************************************
                                 ;     105  * cm_homing_cycle_start()	- G28.2 homing cycle using limit switches
                                 ;     106  *
                                 ;     107  * Homing works from a G28.2 according to the following writeup:
                                 ;     108  *	https://github.com/synthetos/TinyG/wiki/TinyG-Homing-(version-0.95-and-above)
                                 ;     109  *
                                 ;     110  *	--- How does this work? ---
                                 ;     111  *
                                 ;     112  *	Homing is invoked using a G28.2 command with 1 or more axes specified in the
                                 ;     113  *	command: e.g. g28.2 x0 y0 z0     (FYI: the number after each axis is irrelevant)
                                 ;     114  *
                                 ;     115  *	Homing is always run in the following order - for each enabled axis:
                                 ;     116  *	  Z,X,Y,A			Note: B and C cannot be homed
                                 ;     117  *
                                 ;     118  *	At the start of a homing cycle those switches configured for homing
                                 ;     119  *	(or for homing and limits) are treated as homing switches (they are modal).
                                 ;     120  *
                                 ;     121  *	After initialization the following sequence is run for each axis to be homed:
                                 ;     122  *
                                 ;     123  *	  0. If a homing or limit switch is closed on invocation, clear off the switch
                                 ;     124  *	  1. Drive towards the homing switch at search velocity until switch is hit
                                 ;     125  *	  2. Drive away from the homing switch at latch velocity until switch opens
                                 ;     126  *	  3. Back off switch by the zero backoff distance and set zero for that axis
                                 ;     127  *
                                 ;     128  *	Homing works as a state machine that is driven by registering a callback
                                 ;     129  *	function at hm.func() for the next state to be run. Once the axis is
                                 ;     130  *	initialized each callback basically does two things (1) start the move
                                 ;     131  *	for the current function, and (2) register the next state with hm.func().
                                 ;     132  *	When a move is started it will either be interrupted if the homing switch
                                 ;     133  *	changes state, This will cause the move to stop with a feedhold. The other
                                 ;     134  *	thing that can happen is the move will run to its full length if no switch
                                 ;     135  *	change is detected (hit or open),
                                 ;     136  *
                                 ;     137  *	Once all moves for an axis are complete the next axis in the sequence is homed
                                 ;     138  *
                                 ;     139  *	When a homing cycle is initiated the homing state is set to HOMING_NOT_HOMED
                                 ;     140  *	When homing completes successfully this is set to HOMING_HOMED, otherwise it
                                 ;     141  *	remains HOMING_NOT_HOMED.
                                 ;     142  */
                                 ;     143 /*	--- Some further details ---
                                 ;     144  *
                                 ;     145  *	Note: When coding a cycle (like this one) you get to perform one queued
                                 ;     146  *	move per entry into the continuation, then you must exit.
                                 ;     147  *
                                 ;     148  *	Another Note: When coding a cycle (like this one) you must wait until
                                 ;     149  *	the last move has actually been queued (or has finished) before declaring
                                 ;     150  *	the cycle to be done. Otherwise there is a nasty race condition in the
                                 ;     151  *	tg_controller() that will accept the next command before the position of
                                 ;     152  *	the final move has been recorded in the Gcode model. That's what the call
                                 ;     153  *	to cm_isbusy() is about.
                                 ;     154  */
                                 ;     155 
                                 ;     156 stat_t cm_homing_cycle_start(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",156
00000000 6040                    		SUB #04H, R0
                                 ;     157 {
                                 ;     158 	// save relevant non-axis parameters from Gcode model
                                 ;     159 	hm.saved_units_mode = cm_get_units_mode(ACTIVE_MODEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",159
00000002 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000008 EDE194                  		MOV.L 0250H[R14], R1
0000000B 05rrrrrr             A  		BSR _cm_get_units_mode
0000000F FBE2rrrrrrrr            		MOV.L #__$hm, R14
00000015 C7E130                  		MOV.B R1, 30H[R14]
00000018                         L15:	; entry.split
                                 ;     160 	hm.saved_coord_system = cm_get_coord_system(ACTIVE_MODEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",160
00000018 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000001E EDE194                  		MOV.L 0250H[R14], R1
00000021 05rrrrrr             A  		BSR _cm_get_coord_system
00000025 FBE2rrrrrrrr            		MOV.L #__$hm, R14
0000002B C7E131                  		MOV.B R1, 31H[R14]
0000002E                         L16:	; entry.split1
                                 ;     161 	hm.saved_distance_mode = cm_get_distance_mode(ACTIVE_MODEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",161
0000002E FBE2rrrrrrrr            		MOV.L #_cm, R14
00000034 EDE194                  		MOV.L 0250H[R14], R1
00000037 05rrrrrr             A  		BSR _cm_get_distance_mode
0000003B FBE2rrrrrrrr            		MOV.L #__$hm, R14
00000041 C7E132                  		MOV.B R1, 32H[R14]
00000044                         L17:	; entry.split2
                                 ;     162 	hm.saved_feed_rate_mode = cm_get_feed_rate_mode(ACTIVE_MODEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",162
00000044 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000004A EDE194                  		MOV.L 0250H[R14], R1
0000004D 05rrrrrr             A  		BSR _cm_get_feed_rate_mode
00000051 FBE2rrrrrrrr            		MOV.L #__$hm, R14
00000057 C7E133                  		MOV.B R1, 33H[R14]
0000005A                         L18:	; entry.split3
                                 ;     163 	hm.saved_feed_rate = cm_get_feed_rate(ACTIVE_MODEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",163
0000005A FBE2rrrrrrrr            		MOV.L #_cm, R14
00000060 EDE194                  		MOV.L 0250H[R14], R1
00000063 05rrrrrr             A  		BSR _cm_get_feed_rate
00000067 FB22rrrrrrrr            		MOV.L #__$hm, R2
0000006D A329                    		MOV.L R1, 34H[R2]
0000006F                         L19:	; entry.split4
0000006F 6611                    		MOV.L #00000001H, R1
                                 ;     164 
                                 ;     165 	// set working values
                                 ;     166 	cm_set_units_mode(MILLIMETERS);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",166
00000071 05rrrrrr             A  		BSR _cm_set_units_mode
00000075                         L20:	; entry.split5
00000075 6611                    		MOV.L #00000001H, R1
                                 ;     167 	cm_set_distance_mode(INCREMENTAL_MODE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",167
00000077 05rrrrrr             A  		BSR _cm_set_distance_mode
0000007B                         L21:	; entry.split6
0000007B 6601                    		MOV.L #00000000H, R1
                                 ;     168 	cm_set_coord_system(ABSOLUTE_COORDS);	// homing is done in machine coordinates
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",168
0000007D 05rrrrrr             A  		BSR _cm_set_coord_system
00000081                         L22:	; entry.split7
00000081 6611                    		MOV.L #00000001H, R1
                                 ;     169 	cm_set_feed_rate_mode(UNITS_PER_MINUTE_MODE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",169
00000083 05rrrrrr             A  		BSR _cm_set_feed_rate_mode
00000087                         L23:	; entry.split8
                                 ;     170 	hm.set_coordinates = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",170
00000087 FB12rrrrrrrr            		MOV.L #__$hm, R1
0000008D 3C1E01                  		MOV.B #01H, 0EH[R1]
00000090                         L24:	; entry.split9
                                 ;     171 
                                 ;     172 	hm.axis = -1;							// set to retrieve initial axis
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",172
00000090 FBE2rrrrrrrr            		MOV.L #__$hm, R14
00000096 F8E4FF                  		MOV.B #0FFH, [R14]
00000099                         L25:	; entry.split10
                                 ;     173 	hm.func = _homing_axis_start; 			// bind initial processing function
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",173
00000099 FB12rrrrrrrr            		MOV.L #__$hm, R1
0000009F FB22rrrrrrrr            		MOV.L #__$_homing_axis_start, R2
000000A5 A112                    		MOV.L R2, 10H[R1]
000000A7                         L26:	; entry.split11
                                 ;     174 	cm.cycle_state = CYCLE_HOMING;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",174
000000A7 FBE2rrrrrrrr            		MOV.L #_cm, R14
000000AD FAE41E0203              		MOV.B #03H, 021EH[R14]
000000B2                         L27:	; entry.split12
                                 ;     175 	cm.homing_state = HOMING_NOT_HOMED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",175
000000B2 FBE2rrrrrrrr            		MOV.L #_cm, R14
000000B8 FAE4210200              		MOV.B #00H, 0221H[R14]
000000BD                         L28:	; entry.split13
                                 ;     176 
                                 ;     177 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",177
000000BD 3C0300                  		MOV.B #00H, 03H[R0]
000000C0 B089                    		MOVU.B 03H[R0], R1
000000C2                         L29:	; entry.split14
                                 ;     178 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",178
000000C2 5B11                    		MOVU.B R1, R1
000000C4 6701                    		RTSD #04H
000000C6                         _cm_homing_cycle_start_no_set:
                                 		.STACK	_cm_homing_cycle_start_no_set=8
                                 ;     179 
                                 ;     180 stat_t cm_homing_cycle_start_no_set(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",180
000000C6 6040                    		SUB #04H, R0
                                 ;     181 {
                                 ;     182 	cm_homing_cycle_start();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",182
000000C8 39rrrr               W  		BSR _cm_homing_cycle_start
000000CB                         L31:	; entry.split
                                 ;     183 	hm.set_coordinates = false;				// set flag to not update position variables at the end of the cycle
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",183
000000CB FB12rrrrrrrr            		MOV.L #__$hm, R1
000000D1 3C1E00                  		MOV.B #00H, 0EH[R1]
000000D4                         L32:	; entry.split1
                                 ;     184 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",184
000000D4 3C0300                  		MOV.B #00H, 03H[R0]
000000D7 B089                    		MOVU.B 03H[R0], R1
000000D9                         L33:	; entry.split2
                                 ;     185 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",185
000000D9 5B11                    		MOVU.B R1, R1
000000DB 6701                    		RTSD #04H
000000DD                         _cm_homing_callback:
                                 		.STACK	_cm_homing_callback=8
                                 ;     186 
                                 ;     187 /* Homing axis moves - these execute in sequence for each axis
                                 ;     188  * cm_homing_callback() 		- main loop callback for running the homing cycle
                                 ;     189  *	_set_homing_func()			- a convenience for setting the next dispatch vector and exiting
                                 ;     190  *	_trigger_feedhold()			- callback from switch closure to trigger a feedhold (convenience for casting)
                                 ;     191  *  _bind_switch_settings()		- setup switch for homing operation
                                 ;     192  *	_restore_switch_settings()	- return switch to normal operation
                                 ;     193  *	_homing_axis_start()		- get next axis, initialize variables, call the clear
                                 ;     194  *	_homing_axis_clear()		- initiate a clear to move off a switch that is thrown at the start
                                 ;     195  *	_homing_axis_search()		- fast search for switch, closes switch
                                 ;     196  *	_homing_axis_latch()		- slow reverse until switch opens again
                                 ;     197  *	_homing_axis_final()		- backoff from latch location to zero position
                                 ;     198  *	_homing_axis_move()			- helper that actually executes the above moves
                                 ;     199  */
                                 ;     200 
                                 ;     201 stat_t cm_homing_callback(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",201
000000DD 6040                    		SUB #04H, R0
                                 ;     202 {
                                 ;     203 	if (cm.cycle_state != CYCLE_HOMING) { return (STAT_NOOP);} 	// exit if not in a homing cycle
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",203
000000DF FBE2rrrrrrrr            		MOV.L #_cm, R14
000000E5 5AEE1E02                		MOVU.B 021EH[R14], R14
000000E9 613E                    		CMP #03H, R14
000000EB 10                   S  		BEQ L36
000000EC                         L35:	; bb1
000000EC 3C0203                  		MOV.B #03H, 02H[R0]
000000EF 2Err                 B  		BRA L39
000000F1                         L36:	; bb8
                                 ;     204 	if (cm_get_runtime_busy() == true) { return (STAT_EAGAIN);}	// sync to planner move ends
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",204
000000F1 05rrrrrr             A  		BSR _cm_get_runtime_busy
000000F5 6111                    		CMP #01H, R1
000000F7 18                   S  		BNE L38
000000F8                         L37:	; bb9
000000F8 3C0202                  		MOV.B #02H, 02H[R0]
000000FB 2Err                 B  		BRA L39
000000FD                         L38:	; bb16
                                 ;     205 	return (hm.func(hm.axis));									// execute the current homing move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",205
000000FD FB22rrrrrrrr            		MOV.L #__$hm, R2
00000103 CC21                    		MOV.B [R2], R1
00000105 A922                    		MOV.L 10H[R2], R2
00000107 7F12                    		JSR R2
00000109 8081                    		MOV.B R1, 02H[R0]
0000010B                         L39:	; bb21
0000010B C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     206 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",206
0000010F B089                    		MOVU.B 03H[R0], R1
00000111 6701                    		RTSD #04H
00000113                         __$_set_homing_func:
                                 		.STACK	__$_set_homing_func=12
                                 ;     207 
                                 ;     208 static stat_t _set_homing_func(stat_t (*func)(int8_t axis))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",208
00000113 6080                    		SUB #08H, R0
00000115 A009                    		MOV.L R1, 04H[R0]
                                 ;     209 {
                                 ;     210 	hm.func = func;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",210
00000117 FB22rrrrrrrr            		MOV.L #__$hm, R2
0000011D A121                    		MOV.L R1, 10H[R2]
0000011F                         L41:	; entry.split
                                 ;     211 	return (STAT_EAGAIN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",211
0000011F 3C0302                  		MOV.B #02H, 03H[R0]
00000122 B089                    		MOVU.B 03H[R0], R1
00000124                         L42:	; entry.split1
                                 ;     212 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",212
00000124 5B11                    		MOVU.B R1, R1
00000126 6702                    		RTSD #08H
00000128                         __$_homing_axis_start:
                                 		.STACK	__$_homing_axis_start=20
                                 ;     213 
                                 ;     214 /* UNUSED
                                 ;     215 
                                 ;     216 static void _trigger_feedhold(switch_t *s)
                                 ;     217 {
                                 ;     218 	cm_request_feedhold();
                                 ;     219 }
                                 ;     220 
                                 ;     221 static void _bind_switch_settings(switch_t *s)
                                 ;     222 {
                                 ;     223 	hm.switch_saved_on_trailing = s->on_trailing;
                                 ;     224 	s->on_trailing = _trigger_feedhold;							// bind feedhold to trailing edge
                                 ;     225 }
                                 ;     226 
                                 ;     227 static void _restore_switch_settings(switch_t *s)
                                 ;     228 {
                                 ;     229 	s->on_trailing = hm.switch_saved_on_trailing;
                                 ;     230 }
                                 ;     231 */
                                 ;     232 static stat_t _homing_axis_start(int8_t axis)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",232
00000128 7100F0                  		ADD #0FFFFFFF0H, R0
0000012B 8389                    		MOV.B R1, 0FH[R0]
                                 ;     233 {
                                 ;     234 	// get the first or next axis
                                 ;     235 	if ((axis = _get_next_axis(axis)) < 0) { 				// axes are done or error
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",235
0000012D 8B89                    		MOV.B 0FH[R0], R1
0000012F 39rrrr               W  		BSR __$_get_next_axis
00000132 8389                    		MOV.B R1, 0FH[R0]
00000134 8B89                    		MOV.B 0FH[R0], R1
00000136 69F1                    		SHLR #1FH, R1
00000138 6101                    		CMP #00H, R1
0000013A 20rr                    		BEQ L49
0000013C                         L44:	; bb5
                                 ;     236 		if (axis == -1) {									// -1 is done
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",236
0000013C 8B89                    		MOV.B 0FH[R0], R1
0000013E 7501FF                  		CMP #0FFFFFFFFH, R1
00000141 21rr                    		BNE L47
00000143                         L45:	; bb6
                                 ;     237 			cm.homing_state = HOMING_HOMED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",237
00000143 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000149 FAE4210201              		MOV.B #01H, 0221H[R14]
0000014E                         L46:	; bb6.split
                                 ;     238 			return (_set_homing_func(_homing_finalize_exit));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",238
0000014E FB12rrrrrrrr            		MOV.L #__$_homing_finalize_exit, R1
00000154 39rrrr               W  		BSR __$_set_homing_func
00000157 8189                    		MOV.B R1, 07H[R0]
00000159 38rrrr               W  		BRA L88
0000015C                         L47:	; bb10
                                 ;     239 		} else if (axis == -2) { 							// -2 is error
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",239
0000015C 8B89                    		MOV.B 0FH[R0], R1
0000015E 7501FE                  		CMP #0FFFFFFFEH, R1
00000161 21rr                    		BNE L49
00000163                         L48:	; bb11
00000163 7542F1                  		MOV.L #000000F1H, R2
00000166 FB16FE                  		MOV.L #0FFFFFFFEH, R1
                                 ;     240 			return (_homing_error_exit(-2, STAT_HOMING_ERROR_BAD_OR_NO_AXIS));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",240
00000169 39rrrr               W  		BSR __$_homing_error_exit
0000016C 8189                    		MOV.B R1, 07H[R0]
0000016E 38rrrr               W  		BRA L88
00000171                         L49:	; bb32
                                 ;     241 		}
                                 ;     242 	}
                                 ;     243 	// clear the homed flag for axis so we'll be able to move w/o triggering soft limits
                                 ;     244 	cm.homed[axis] = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",244
00000171 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000177 06090E0F                		ADD 0FH[R0].B, R14
0000017B FAE4220200              		MOV.B #00H, 0222H[R14]
00000180                         L50:	; bb32.split
                                 ;     245 
                                 ;     246 	// trap axis mis-configurations
                                 ;     247 	if (fp_ZERO(cm.a[axis].search_velocity)) return (_homing_error_exit(axis, STAT_HOMING_ERROR_ZERO_SEARCH_VELOCITY));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",247
00000180 8B89                    		MOV.B 0FH[R0], R1
00000182 751138                  		MUL #38H, R1
00000185 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000018B 4B1E                    		ADD R1, R14
0000018D EDEE3D                  		MOV.L 0F4H[R14], R14
00000190 7BFE                    		BCLR #1FH, R14
00000192 FD721EBD378635          		FCMP #358637BDH, R14
00000199 26rr                    		BPZ L52
0000019B                         L51:	; bb37
0000019B 8B89                    		MOV.B 0FH[R0], R1
0000019D 7542F2                  		MOV.L #000000F2H, R2
000001A0 39rrrr               W  		BSR __$_homing_error_exit
000001A3 8189                    		MOV.B R1, 07H[R0]
000001A5 38rrrr               W  		BRA L88
000001A8                         L52:	; bb51
                                 ;     248 	if (fp_ZERO(cm.a[axis].latch_velocity)) return (_homing_error_exit(axis, STAT_HOMING_ERROR_ZERO_LATCH_VELOCITY));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",248
000001A8 8B89                    		MOV.B 0FH[R0], R1
000001AA 751138                  		MUL #38H, R1
000001AD FBE2rrrrrrrr            		MOV.L #_cm, R14
000001B3 4B1E                    		ADD R1, R14
000001B5 EDEE3E                  		MOV.L 0F8H[R14], R14
000001B8 7BFE                    		BCLR #1FH, R14
000001BA FD721EBD378635          		FCMP #358637BDH, R14
000001C1 26rr                    		BPZ L54
000001C3                         L53:	; bb52
000001C3 8B89                    		MOV.B 0FH[R0], R1
000001C5 7542F3                  		MOV.L #000000F3H, R2
000001C8 39rrrr               W  		BSR __$_homing_error_exit
000001CB 8189                    		MOV.B R1, 07H[R0]
000001CD 38rrrr               W  		BRA L88
000001D0                         L54:	; bb66
                                 ;     249 	if (cm.a[axis].latch_backoff < 0) return (_homing_error_exit(axis, STAT_HOMING_ERROR_NEGATIVE_LATCH_BACKOFF));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",249
000001D0 8B89                    		MOV.B 0FH[R0], R1
000001D2 751138                  		MUL #38H, R1
000001D5 FBE2rrrrrrrr            		MOV.L #_cm, R14
000001DB 4B1E                    		ADD R1, R14
000001DD EDEE3F                  		MOV.L 0FCH[R14], R14
000001E0 FD721E00000000          		FCMP #00000000H, R14
000001E7 26rr                    		BPZ L56
000001E9                         L55:	; bb67
000001E9 8B89                    		MOV.B 0FH[R0], R1
000001EB 7542F5                  		MOV.L #000000F5H, R2
000001EE 39rrrr               W  		BSR __$_homing_error_exit
000001F1 8189                    		MOV.B R1, 07H[R0]
000001F3 38rrrr               W  		BRA L88
000001F6                         L56:	; bb79
                                 ;     250 
                                 ;     251 	// calculate and test travel distance
                                 ;     252 	float travel_distance = fabs(cm.a[axis].travel_max - cm.a[axis].travel_min) + cm.a[axis].latch_backoff;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",252
000001F6 8B89                    		MOV.B 0FH[R0], R1
000001F8 751138                  		MUL #38H, R1
000001FB FBE2rrrrrrrr            		MOV.L #_cm, R14
00000201 4B1E                    		ADD R1, R14
00000203 EDE136                  		MOV.L 0D8H[R14], R1
00000206 FC81E137                		FSUB 0DCH[R14].L, R1
0000020A 7BF1                    		BCLR #1FH, R1
0000020C FC89E13F                		FADD 0FCH[R14].L, R1
00000210 A081                    		MOV.L R1, 08H[R0]
00000212                         L57:	; bb79.split
                                 ;     253 	if (fp_ZERO(travel_distance)) return (_homing_error_exit(axis, STAT_HOMING_ERROR_TRAVEL_MIN_MAX_IDENTICAL));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",253
00000212 A881                    		MOV.L 08H[R0], R1
00000214 7BF1                    		BCLR #1FH, R1
00000216 FD7211BD378635          		FCMP #358637BDH, R1
0000021D B389                    		MOVU.B 0FH[R0], R1
0000021F 26rr                    		BPZ L59
00000221                         L58:	; bb99
00000221 CF11                    		MOV.B R1, R1
00000223 7542F4                  		MOV.L #000000F4H, R2
00000226 39rrrr               W  		BSR __$_homing_error_exit
00000229 8189                    		MOV.B R1, 07H[R0]
0000022B 38rrrr               W  		BRA L88
0000022E                         L59:	; bb108
                                 ;     254 
                                 ;     255 	// determine the switch setup and that config is OK
                                 ;     256 #ifndef __NEW_SWITCHES
                                 ;     257 	hm.min_mode = get_switch_mode(MIN_SWITCH(axis));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",257
0000022E 6C11                    		SHLL #01H, R1
00000230 5B11                    		MOVU.B R1, R1
00000232 05rrrrrr             A  		BSR _get_switch_mode
00000236 FB22rrrrrrrr            		MOV.L #__$hm, R2
0000023C 8029                    		MOV.B R1, 01H[R2]
0000023E                         L60:	; bb108.split
                                 ;     258 	hm.max_mode = get_switch_mode(MAX_SWITCH(axis));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",258
0000023E B389                    		MOVU.B 0FH[R0], R1
00000240 6C11                    		SHLL #01H, R1
00000242 7801                    		BSET #00H, R1
00000244 5B11                    		MOVU.B R1, R1
00000246 05rrrrrr             A  		BSR _get_switch_mode
0000024A FB22rrrrrrrr            		MOV.L #__$hm, R2
00000250 80A1                    		MOV.B R1, 02H[R2]
00000252                         L61:	; bb108.split1
                                 ;     259 #else
                                 ;     260 	hm.min_mode = get_switch_mode(axis, SW_MIN);
                                 ;     261 	hm.max_mode = get_switch_mode(axis, SW_MAX);
                                 ;     262 #endif
                                 ;     263 
                                 ;     264 	if ( ((hm.min_mode & SW_HOMING_BIT) ^ (hm.max_mode & SW_HOMING_BIT)) == 0) {	  // one or the other must be homing
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",264
00000252 FB12rrrrrrrr            		MOV.L #__$hm, R1
00000258 B01A                    		MOVU.B 01H[R1], R2
0000025A FC351202                		XOR 02H[R1].UB, R2
0000025E 7C02                    		BTST #00H, R2
00000260 B389                    		MOVU.B 0FH[R0], R1
00000262 21rr                    		BNE L63
00000264                         L62:	; bb121
                                 ;     265 		return (_homing_error_exit(axis, STAT_HOMING_ERROR_SWITCH_MISCONFIGURATION)); // axis cannot be homed
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",265
00000264 CF11                    		MOV.B R1, R1
00000266 7542F6                  		MOV.L #000000F6H, R2
00000269 39rrrr               W  		BSR __$_homing_error_exit
0000026C 8189                    		MOV.B R1, 07H[R0]
0000026E 38rrrr               W  		BRA L88
00000271                         L63:	; bb135
                                 ;     266 	}
                                 ;     267 	hm.axis = axis;											// persist the axis
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",267
00000271 FBE2rrrrrrrr            		MOV.L #__$hm, R14
00000277 C3E1                    		MOV.B R1, [R14]
00000279                         L64:	; bb135.split
                                 ;     268 	hm.search_velocity = fabs(cm.a[axis].search_velocity);	// search velocity is always positive
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",268
00000279 8B89                    		MOV.B 0FH[R0], R1
0000027B 751138                  		MUL #38H, R1
0000027E FBE2rrrrrrrr            		MOV.L #_cm, R14
00000284 4B1E                    		ADD R1, R14
00000286 EDE13D                  		MOV.L 0F4H[R14], R1
00000289 7BF1                    		BCLR #1FH, R1
0000028B FB22rrrrrrrr            		MOV.L #__$hm, R2
00000291 A1A9                    		MOV.L R1, 1CH[R2]
00000293                         L65:	; bb135.split2
                                 ;     269 	hm.latch_velocity = fabs(cm.a[axis].latch_velocity);	// latch velocity is always positive
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",269
00000293 8B89                    		MOV.B 0FH[R0], R1
00000295 751138                  		MUL #38H, R1
00000298 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000029E 4B1E                    		ADD R1, R14
000002A0 EDE13E                  		MOV.L 0F8H[R14], R1
000002A3 7BF1                    		BCLR #1FH, R1
000002A5 FB22rrrrrrrr            		MOV.L #__$hm, R2
000002AB A221                    		MOV.L R1, 20H[R2]
000002AD                         L66:	; bb135.split3
                                 ;     270 
                                 ;     271 	// setup parameters homing to the minimum switch
                                 ;     272 	if (hm.min_mode & SW_HOMING_BIT) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",272
000002AD 8B89                    		MOV.B 0FH[R0], R1
000002AF 6C11                    		SHLL #01H, R1
000002B1 FBE2rrrrrrrr            		MOV.L #__$hm, R14
000002B7 F5E001                  		BTST #00H, 01H[R14].B
000002BA 20rr                    		BEQ L72
000002BC                         L67:	; bb150
                                 ;     273 #ifndef __NEW_SWITCHES
                                 ;     274 		hm.homing_switch = MIN_SWITCH(axis);				// the min is the homing switch
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",274
000002BC FB22rrrrrrrr            		MOV.L #__$hm, R2
000002C2 80A9                    		MOV.B R1, 03H[R2]
000002C4                         L68:	; bb150.split
                                 ;     275 		hm.limit_switch = MAX_SWITCH(axis);					// the max would be the limit switch
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",275
000002C4 B389                    		MOVU.B 0FH[R0], R1
000002C6 6C11                    		SHLL #01H, R1
000002C8 7801                    		BSET #00H, R1
000002CA FB22rrrrrrrr            		MOV.L #__$hm, R2
000002D0 8121                    		MOV.B R1, 04H[R2]
000002D2                         L69:	; bb150.split4
                                 ;     276 #else
                                 ;     277 		hm.homing_switch_axis = axis;
                                 ;     278 		hm.homing_switch_position = SW_MIN;					// the min is the homing switch
                                 ;     279 		hm.limit_switch_axis = axis;
                                 ;     280 		hm.limit_switch_position = SW_MAX;					// the max would be the limit switch
                                 ;     281 #endif
                                 ;     282 		hm.search_travel = -travel_distance;				// search travels in negative direction
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",282
000002D2 A881                    		MOV.L 08H[R0], R1
000002D4 FDFFF1                  		BNOT #1FH, R1
000002D7 FB22rrrrrrrr            		MOV.L #__$hm, R2
000002DD A1A1                    		MOV.L R1, 18H[R2]
000002DF                         L70:	; bb150.split5
                                 ;     283 		hm.latch_backoff = cm.a[axis].latch_backoff;		// latch travels in positive direction
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",283
000002DF 8B89                    		MOV.B 0FH[R0], R1
000002E1 751138                  		MUL #38H, R1
000002E4 FBE2rrrrrrrr            		MOV.L #_cm, R14
000002EA 4B1E                    		ADD R1, R14
000002EC FBF2rrrrrrrr            		MOV.L #__$hm, R15
000002F2 E5EF3F09                		MOV.L 0FCH[R14], 24H[R15]
000002F6                         L71:	; bb150.split6
                                 ;     284 		hm.zero_backoff = cm.a[axis].zero_backoff;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",284
000002F6 8B89                    		MOV.B 0FH[R0], R1
000002F8 751138                  		MUL #38H, R1
000002FB FBE2rrrrrrrr            		MOV.L #_cm, R14
00000301 4B1E                    		ADD R1, R14
00000303 FBF2rrrrrrrr            		MOV.L #__$hm, R15
00000309 E5EF400A                		MOV.L 0100H[R14], 28H[R15]
0000030D 2Err                 B  		BRA L77
0000030F                         L72:	; bb172
                                 ;     285 
                                 ;     286 	// setup parameters for positive travel (homing to the maximum switch)
                                 ;     287 	} else {
                                 ;     288 #ifndef __NEW_SWITCHES
                                 ;     289 		hm.homing_switch = MAX_SWITCH(axis);				// the max is the homing switch
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",289
0000030F 6211                    		ADD #01H, R1
00000311 FB22rrrrrrrr            		MOV.L #__$hm, R2
00000317 80A9                    		MOV.B R1, 03H[R2]
00000319                         L73:	; bb172.split
                                 ;     290 		hm.limit_switch = MIN_SWITCH(axis);					// the min would be the limit switch
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",290
00000319 B389                    		MOVU.B 0FH[R0], R1
0000031B 6C11                    		SHLL #01H, R1
0000031D FB22rrrrrrrr            		MOV.L #__$hm, R2
00000323 8121                    		MOV.B R1, 04H[R2]
00000325                         L74:	; bb172.split7
                                 ;     291 #else
                                 ;     292 		hm.homing_switch_axis = axis;
                                 ;     293 		hm.homing_switch_position = SW_MAX;					// the max is the homing switch
                                 ;     294 		hm.limit_switch_axis = axis;
                                 ;     295 		hm.limit_switch_position = SW_MIN;					// the min would be the limit switch
                                 ;     296 #endif
                                 ;     297 		hm.search_travel = travel_distance;					// search travels in positive direction
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",297
00000325 FBE2rrrrrrrr            		MOV.L #__$hm, R14
0000032B E50E0206                		MOV.L 08H[R0], 18H[R14]
0000032F                         L75:	; bb172.split8
                                 ;     298 		hm.latch_backoff = -cm.a[axis].latch_backoff;		// latch travels in negative direction
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",298
0000032F 8B89                    		MOV.B 0FH[R0], R1
00000331 751138                  		MUL #38H, R1
00000334 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000033A 4B1E                    		ADD R1, R14
0000033C EDE13F                  		MOV.L 0FCH[R14], R1
0000033F FDFFF1                  		BNOT #1FH, R1
00000342 FB22rrrrrrrr            		MOV.L #__$hm, R2
00000348 A229                    		MOV.L R1, 24H[R2]
0000034A                         L76:	; bb172.split9
                                 ;     299 		hm.zero_backoff = -cm.a[axis].zero_backoff;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",299
0000034A 8B89                    		MOV.B 0FH[R0], R1
0000034C 751138                  		MUL #38H, R1
0000034F FBE2rrrrrrrr            		MOV.L #_cm, R14
00000355 4B1E                    		ADD R1, R14
00000357 EDE140                  		MOV.L 0100H[R14], R1
0000035A FDFFF1                  		BNOT #1FH, R1
0000035D FB22rrrrrrrr            		MOV.L #__$hm, R2
00000363 A2A1                    		MOV.L R1, 28H[R2]
00000365                         L77:	; bb201
                                 ;     300 	}
                                 ;     301 
                                 ;     302 	// if homing is disabled for the axis then skip to the next axis
                                 ;     303 #ifndef __NEW_SWITCHES
                                 ;     304 	uint8_t sw_mode = get_switch_mode(hm.homing_switch);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",304
00000365 FB12rrrrrrrr            		MOV.L #__$hm, R1
0000036B B099                    		MOVU.B 03H[R1], R1
0000036D 05rrrrrr             A  		BSR _get_switch_mode
00000371 8309                    		MOV.B R1, 0DH[R0]
00000373                         L78:	; bb201.split
                                 ;     305 	if ((sw_mode != SW_MODE_HOMING) && (sw_mode != SW_MODE_HOMING_LIMIT)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",305
00000373 B309                    		MOVU.B 0DH[R0], R1
00000375 6111                    		CMP #01H, R1
00000377 21rr                    		BNE L80
00000379 2Err                 B  		BRA L82
0000037B                         L79:	; bb205
                                 ;     306 		return (_set_homing_func(_homing_axis_start));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",306
0000037B FB12rrrrrrrr            		MOV.L #__$_homing_axis_start, R1
00000381 39rrrr               W  		BSR __$_set_homing_func
00000384 8189                    		MOV.B R1, 07H[R0]
00000386 2Err                 B  		BRA L88
00000388                         L80:	; bb212
00000388 B309                    		MOVU.B 0DH[R0], R1
0000038A 6131                    		CMP #03H, R1
0000038C 10                   S  		BEQ L82
0000038D                         L81:	; bb217
0000038D F80601                  		MOV.L #00000001H, [R0]
00000390 08                   S  		BRA L83
00000391                         L82:	; bb218
00000391 F80600                  		MOV.L #00000000H, [R0]
00000394                         L83:	; bb219
00000394 EC01                    		MOV.L [R0], R1
00000396 6101                    		CMP #00H, R1
00000398 21rr                    		BNE L79
0000039A                         L84:	; bb225
                                 ;     307 	}
                                 ;     308 	// disable the limit switch parameter if there is no limit switch
                                 ;     309 	if (get_switch_mode(hm.limit_switch) == SW_MODE_DISABLED) hm.limit_switch = -1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",309
0000039A FB12rrrrrrrr            		MOV.L #__$hm, R1
000003A0 B111                    		MOVU.B 04H[R1], R1
000003A2 05rrrrrr             A  		BSR _get_switch_mode
000003A6 6101                    		CMP #00H, R1
000003A8 18                   S  		BNE L86
000003A9                         L85:	; bb226
000003A9 FB12rrrrrrrr            		MOV.L #__$hm, R1
000003AF 3C14FF                  		MOV.B #0FFH, 04H[R1]
000003B2                         L86:	; bb233
                                 ;     310 #else
                                 ;     311 //	switch_t *s = &sw.s[hm.homing_switch_axis][hm.homing_switch_position];
                                 ;     312 //	_bind_switch_settings(s);
                                 ;     313 	_bind_switch_settings(&sw.s[hm.homing_switch_axis][hm.homing_switch_position]);
                                 ;     314 
                                 ;     315 	uint8_t sw_mode = get_switch_mode(hm.homing_switch_axis, hm.homing_switch_position);
                                 ;     316 	if ((sw_mode != SW_MODE_HOMING) && (sw_mode != SW_MODE_HOMING_LIMIT)) {
                                 ;     317 		return (_set_homing_func(_homing_axis_start));
                                 ;     318 	}
                                 ;     319 	// disable the limit switch parameter if there is no limit switch
                                 ;     320 	if (get_switch_mode(hm.limit_switch_axis, hm.limit_switch_position) == SW_MODE_DISABLED) {
                                 ;     321 		hm.limit_switch_axis = -1;
                                 ;     322 	}
                                 ;     323 #endif
                                 ;     324 
                                 ;     325 //	hm.saved_jerk = cm.a[axis].jerk_max;					// save the max jerk value
                                 ;     326 	hm.saved_jerk = cm_get_axis_jerk(axis);					// save the max jerk value
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",326
000003B2 B389                    		MOVU.B 0FH[R0], R1
000003B4 05rrrrrr             A  		BSR _cm_get_axis_jerk
000003B8 FB22rrrrrrrr            		MOV.L #__$hm, R2
000003BE A3A1                    		MOV.L R1, 38H[R2]
000003C0                         L87:	; bb233.split
                                 ;     327 	return (_set_homing_func(_homing_axis_clear));			// start the clear
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",327
000003C0 FB12rrrrrrrr            		MOV.L #__$_homing_axis_clear, R1
000003C6 39rrrr               W  		BSR __$_set_homing_func
000003C9 8189                    		MOV.B R1, 07H[R0]
000003CB                         L88:	; bb238
000003CB C500070E                		MOV.B 07H[R0], 0EH[R0]
                                 ;     328 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",328
000003CF B381                    		MOVU.B 0EH[R0], R1
000003D1 6704                    		RTSD #10H
000003D3                         __$_homing_axis_clear:
                                 		.STACK	__$_homing_axis_clear=8
                                 ;     329 
                                 ;     330 // Handle an initial switch closure by backing off the closed switch
                                 ;     331 // NOTE: Relies on independent switches per axis (not shared)
                                 ;     332 static stat_t _homing_axis_clear(int8_t axis)				// first clear move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",332
000003D3 6040                    		SUB #04H, R0
000003D5 8089                    		MOV.B R1, 03H[R0]
                                 ;     333 {
                                 ;     334 #ifndef __NEW_SWITCHES
                                 ;     335 	if (sw.state[hm.homing_switch] == SW_CLOSED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",335
000003D7 FB12rrrrrrrr            		MOV.L #_sw, R1
000003DD FBE2rrrrrrrr            		MOV.L #__$hm, R14
000003E3 0609E103                		ADD 03H[R14].B, R1
000003E7 B099                    		MOVU.B 03H[R1], R1
000003E9 6111                    		CMP #01H, R1
000003EB 21rr                    		BNE L91
000003ED                         L90:	; bb2
                                 ;     336 		_homing_axis_move(axis, hm.latch_backoff, hm.search_velocity);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",336
000003ED FB12rrrrrrrr            		MOV.L #__$hm, R1
000003F3 A99B                    		MOV.L 1CH[R1], R3
000003F5 AA1A                    		MOV.L 24H[R1], R2
000003F7 8889                    		MOV.B 03H[R0], R1
000003F9 39rrrr               W  		BSR __$_homing_axis_move
000003FC 2Err                 B  		BRA L93
000003FE                         L91:	; bb8
                                 ;     337 	} else if (sw.state[hm.limit_switch] == SW_CLOSED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",337
000003FE FB12rrrrrrrr            		MOV.L #_sw, R1
00000404 FBE2rrrrrrrr            		MOV.L #__$hm, R14
0000040A 0609E104                		ADD 04H[R14].B, R1
0000040E B099                    		MOVU.B 03H[R1], R1
00000410 6111                    		CMP #01H, R1
00000412 21rr                    		BNE L93
00000414                         L92:	; bb9
                                 ;     338 		_homing_axis_move(axis, -hm.latch_backoff, hm.search_velocity);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",338
00000414 FB12rrrrrrrr            		MOV.L #__$hm, R1
0000041A A99B                    		MOV.L 1CH[R1], R3
0000041C AA1A                    		MOV.L 24H[R1], R2
0000041E 8889                    		MOV.B 03H[R0], R1
00000420 FDFFF2                  		BNOT #1FH, R2
00000423 39rrrr               W  		BSR __$_homing_axis_move
00000426                         L93:	; bb31
                                 ;     339 	}
                                 ;     340 #else
                                 ;     341 	if (read_switch(hm.homing_switch_axis, hm.homing_switch_position) == SW_CLOSED) {
                                 ;     342 		_homing_axis_move(axis, hm.latch_backoff, hm.search_velocity);
                                 ;     343 	} else if (read_switch(hm.limit_switch_axis, hm.limit_switch_position) == SW_CLOSED) {
                                 ;     344 		_homing_axis_move(axis, -hm.latch_backoff, hm.search_velocity);
                                 ;     345 	} else { // no move needed, so target position is same as current position
                                 ;     346 		hm.target_position = cm_get_absolute_position(MODEL, axis);
                                 ;     347 	}
                                 ;     348 #endif
                                 ;     349 	return (_set_homing_func(_homing_axis_search));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",349
00000426 FB12rrrrrrrr            		MOV.L #__$_homing_axis_search, R1
0000042C 39rrrr               W  		BSR __$_set_homing_func
0000042F 8081                    		MOV.B R1, 02H[R0]
00000431 B081                    		MOVU.B 02H[R0], R1
00000433                         L94:	; bb31.split
                                 ;     350 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",350
00000433 5B11                    		MOVU.B R1, R1
00000435 6701                    		RTSD #04H
00000437                         __$_homing_axis_search:
                                 		.STACK	__$_homing_axis_search=8
                                 ;     351 
                                 ;     352 static stat_t _homing_axis_search(int8_t axis)				// start the search
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",352
00000437 6040                    		SUB #04H, R0
00000439 8089                    		MOV.B R1, 03H[R0]
                                 ;     353 {
                                 ;     354 	cm_set_axis_jerk(axis, cm.a[axis].jerk_homing);			// use the homing jerk for search onward
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",354
0000043B EF1E                    		MOV.L R1, R14
0000043D 751E38                  		MUL #38H, R14
00000440 FBF2rrrrrrrr            		MOV.L #_cm, R15
00000446 4BEF                    		ADD R14, R15
00000448 EDF239                  		MOV.L 0E4H[R15], R2
0000044B 5B11                    		MOVU.B R1, R1
0000044D 05rrrrrr             A  		BSR _cm_set_axis_jerk
00000451                         L96:	; entry.split
                                 ;     355 	_homing_axis_move(axis, hm.search_travel, hm.search_velocity);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",355
00000451 FB12rrrrrrrr            		MOV.L #__$hm, R1
00000457 A99B                    		MOV.L 1CH[R1], R3
00000459 A992                    		MOV.L 18H[R1], R2
0000045B 8889                    		MOV.B 03H[R0], R1
0000045D 39rrrr               W  		BSR __$_homing_axis_move
00000460                         L97:	; entry.split1
                                 ;     356     return (_set_homing_func(_homing_axis_latch));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",356
00000460 FB12rrrrrrrr            		MOV.L #__$_homing_axis_latch, R1
00000466 39rrrr               W  		BSR __$_set_homing_func
00000469 8081                    		MOV.B R1, 02H[R0]
0000046B B081                    		MOVU.B 02H[R0], R1
0000046D                         L98:	; entry.split2
                                 ;     357 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",357
0000046D 5B11                    		MOVU.B R1, R1
0000046F 6701                    		RTSD #04H
00000471                         __$_homing_axis_latch:
                                 		.STACK	__$_homing_axis_latch=8
                                 ;     358 
                                 ;     359 static stat_t _homing_axis_latch(int8_t axis)				// latch to switch open
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",359
00000471 6040                    		SUB #04H, R0
00000473 8089                    		MOV.B R1, 03H[R0]
                                 ;     360 {
                                 ;     361 	// verify assumption that we arrived here because of homing switch closure
                                 ;     362 	// rather than user-initiated feedhold or other disruption
                                 ;     363 #ifndef __NEW_SWITCHES
                                 ;     364 	if (sw.state[hm.homing_switch] != SW_CLOSED)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",364
00000475 FB12rrrrrrrr            		MOV.L #_sw, R1
0000047B FBE2rrrrrrrr            		MOV.L #__$hm, R14
00000481 0609E103                		ADD 03H[R14].B, R1
00000485 B099                    		MOVU.B 03H[R1], R1
00000487 6111                    		CMP #01H, R1
00000489 20rr                    		BEQ L101
0000048B                         L100:	; bb2
                                 ;     365 		return (_set_homing_func(_homing_abort));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",365
0000048B FB12rrrrrrrr            		MOV.L #__$_homing_abort, R1
00000491 39rrrr               W  		BSR __$_set_homing_func
00000494 8009                    		MOV.B R1, 01H[R0]
00000496 2Err                 B  		BRA L103
00000498                         L101:	; bb12
                                 ;     366 #else
                                 ;     367 	if (read_switch(hm.homing_switch_axis, hm.homing_switch_position) != SW_CLOSED)
                                 ;     368 		return (_set_homing_func(_homing_abort));
                                 ;     369 #endif
                                 ;     370 	_homing_axis_move(axis, hm.latch_backoff, hm.latch_velocity);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",370
00000498 FB12rrrrrrrr            		MOV.L #__$hm, R1
0000049E AA13                    		MOV.L 20H[R1], R3
000004A0 AA1A                    		MOV.L 24H[R1], R2
000004A2 8889                    		MOV.B 03H[R0], R1
000004A4 39rrrr               W  		BSR __$_homing_axis_move
000004A7                         L102:	; bb12.split
                                 ;     371 	return (_set_homing_func(_homing_axis_zero_backoff));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",371
000004A7 FB12rrrrrrrr            		MOV.L #__$_homing_axis_zero_backoff, R1
000004AD 39rrrr               W  		BSR __$_set_homing_func
000004B0 8009                    		MOV.B R1, 01H[R0]
000004B2                         L103:	; bb19
000004B2 C5000102                		MOV.B 01H[R0], 02H[R0]
                                 ;     372 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",372
000004B6 B081                    		MOVU.B 02H[R0], R1
000004B8 6701                    		RTSD #04H
000004BA                         __$_homing_axis_zero_backoff:
                                 		.STACK	__$_homing_axis_zero_backoff=8
                                 ;     373 
                                 ;     374 static stat_t _homing_axis_zero_backoff(int8_t axis)		// backoff to zero position
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",374
000004BA 6040                    		SUB #04H, R0
000004BC 8089                    		MOV.B R1, 03H[R0]
                                 ;     375 {
                                 ;     376 	_homing_axis_move(axis, hm.zero_backoff, hm.search_velocity);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",376
000004BE FB12rrrrrrrr            		MOV.L #__$hm, R1
000004C4 A99B                    		MOV.L 1CH[R1], R3
000004C6 AA92                    		MOV.L 28H[R1], R2
000004C8 8889                    		MOV.B 03H[R0], R1
000004CA 39rrrr               W  		BSR __$_homing_axis_move
000004CD                         L105:	; entry.split
                                 ;     377 	return (_set_homing_func(_homing_axis_set_zero));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",377
000004CD FB12rrrrrrrr            		MOV.L #__$_homing_axis_set_zero, R1
000004D3 39rrrr               W  		BSR __$_set_homing_func
000004D6 8081                    		MOV.B R1, 02H[R0]
000004D8 B081                    		MOVU.B 02H[R0], R1
000004DA                         L106:	; entry.split1
                                 ;     378 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",378
000004DA 5B11                    		MOVU.B R1, R1
000004DC 6701                    		RTSD #04H
000004DE                         __$_homing_axis_set_zero:
                                 		.STACK	__$_homing_axis_set_zero=12
                                 ;     379 
                                 ;     380 static stat_t _homing_axis_set_zero(int8_t axis)			// set zero and finish up
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",380
000004DE 7EA6                    		PUSH.L R6
000004E0 6040                    		SUB #04H, R0
000004E2 8089                    		MOV.B R1, 03H[R0]
                                 ;     381 {
                                 ;     382 	if (hm.set_coordinates != false) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",382
000004E4 FB12rrrrrrrr            		MOV.L #__$hm, R1
000004EA B391                    		MOVU.B 0EH[R1], R1
000004EC 6101                    		CMP #00H, R1
000004EE B08E                    		MOVU.B 03H[R0], R6
000004F0 20rr                    		BEQ L110
000004F2                         L108:	; bb2
                                 ;     383 		cm_set_position(axis, 0);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",383
000004F2 5B61                    		MOVU.B R6, R1
000004F4 6602                    		MOV.L #00000000H, R2
000004F6 05rrrrrr             A  		BSR _cm_set_position
000004FA                         L109:	; bb2.split
                                 ;     384 		cm.homed[axis] = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",384
000004FA FBE2rrrrrrrr            		MOV.L #_cm, R14
00000500 06090E03                		ADD 03H[R0].B, R14
00000504 FAE4220201              		MOV.B #01H, 0222H[R14]
00000509 2Err                 B  		BRA L111
0000050B                         L110:	; bb7
                                 ;     385 	} else {
                                 ;     386         // do not set axis if in G28.4 cycle
                                 ;     387 		cm_set_position(axis, cm_get_work_position(RUNTIME, axis));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",387
0000050B B08A                    		MOVU.B 03H[R0], R2
0000050D FB12rrrrrrrr            		MOV.L #_mr, R1
00000513 72114001                		ADD #0140H, R1
00000517 05rrrrrr             A  		BSR _cm_get_work_position
0000051B EF12                    		MOV.L R1, R2
0000051D 5B61                    		MOVU.B R6, R1
0000051F 05rrrrrr             A  		BSR _cm_set_position
00000523                         L111:	; bb15
                                 ;     388 	}
                                 ;     389 	cm_set_axis_jerk(axis, hm.saved_jerk);					// restore the max jerk value
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",389
00000523 FB12rrrrrrrr            		MOV.L #__$hm, R1
00000529 AB92                    		MOV.L 38H[R1], R2
0000052B B089                    		MOVU.B 03H[R0], R1
0000052D 05rrrrrr             A  		BSR _cm_set_axis_jerk
00000531                         L112:	; bb15.split
                                 ;     390 
                                 ;     391 #ifdef __NEW_SWITCHES
                                 ;     392 	switch_t *s = &sw.s[hm.homing_switch_axis][hm.homing_switch_position];
                                 ;     393 	s->on_trailing = hm.switch_saved_on_trailing;
                                 ;     394 	_restore_switch_settings(&sw.s[hm.homing_switch_axis][hm.homing_switch_position]);
                                 ;     395 #endif
                                 ;     396 	return (_set_homing_func(_homing_axis_start));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",396
00000531 FB12rrrrrrrr            		MOV.L #__$_homing_axis_start, R1
00000537 39rrrr               W  		BSR __$_set_homing_func
0000053A 8081                    		MOV.B R1, 02H[R0]
0000053C B081                    		MOVU.B 02H[R0], R1
0000053E                         L113:	; bb15.split1
                                 ;     397 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",397
0000053E 5B11                    		MOVU.B R1, R1
00000540 3F6602                  		RTSD #08H, R6-R6
00000543                         __$_homing_axis_move:
                                 		.STACK	__$_homing_axis_move=72
                                 ;     398 
                                 ;     399 static stat_t _homing_axis_move(int8_t axis, float target, float velocity)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",399
00000543 7100BC                  		ADD #0FFFFFFBCH, R0
00000546 C70143                  		MOV.B R1, 43H[R0]
00000549 A38A                    		MOV.L R2, 3CH[R0]
0000054B A383                    		MOV.L R3, 38H[R0]
                                 ;     400 {
                                 ;     401 	float vect[] = {0,0,0,0,0,0};
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",401
0000054D FBE2rrrrrrrr            		MOV.L #_L10, R14
00000553 E4E001                  		MOV.L [R14], 04H[R0]
00000556 E5E00102                		MOV.L 04H[R14], 08H[R0]
0000055A E5E00203                		MOV.L 08H[R14], 0CH[R0]
0000055E E5E00304                		MOV.L 0CH[R14], 10H[R0]
00000562 E5E00405                		MOV.L 10H[R14], 14H[R0]
00000566 E5E00506                		MOV.L 14H[R14], 18H[R0]
0000056A                         L115:	; entry.split
                                 ;     402 	float flags[] = {false, false, false, false, false, false};
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",402
0000056A FBE2rrrrrrrr            		MOV.L #_L11, R14
00000570 E4E007                  		MOV.L [R14], 1CH[R0]
00000573 E5E00108                		MOV.L 04H[R14], 20H[R0]
00000577 E5E00209                		MOV.L 08H[R14], 24H[R0]
0000057B E5E0030A                		MOV.L 0CH[R14], 28H[R0]
0000057F E5E0040B                		MOV.L 10H[R14], 2CH[R0]
00000583 E5E0050C                		MOV.L 14H[R14], 30H[R0]
00000587                         L116:	; entry.split1
00000587 710E04                  		ADD #04H, R0, R14
                                 ;     403 
                                 ;     404 	vect[axis] = target;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",404
0000058A AB89                    		MOV.L 3CH[R0], R1
0000058C CD0243                  		MOV.B 43H[R0], R2
0000058F FE22E1                  		MOV.L R1, [R2,R14]
00000592                         L117:	; entry.split2
                                 ;     405 	flags[axis] = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",405
00000592 CD0143                  		MOV.B 43H[R0], R1
00000595 710E1C                  		ADD #1CH, R0, R14
00000598 FBF20000803F            		MOV.L #3F800000H, R15
0000059E FE21EF                  		MOV.L R15, [R1,R14]
000005A1                         L118:	; entry.split3
                                 ;     406 	cm.gm.feed_rate = velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",406
000005A1 FBE2rrrrrrrr            		MOV.L #_cm, R14
000005A7 E50E0EA5                		MOV.L 38H[R0], 0294H[R14]
000005AB                         L119:	; entry.split4
                                 ;     407 	mp_flush_planner();										// don't use cm_request_queue_flush() here
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",407
000005AB 05rrrrrr             A  		BSR _mp_flush_planner
000005AF                         L120:	; entry.split5
                                 ;     408 	cm_request_cycle_start();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",408
000005AF 05rrrrrr             A  		BSR _cm_request_cycle_start
000005B3                         L121:	; entry.split6
000005B3 71021C                  		ADD #1CH, R0, R2
000005B6 710104                  		ADD #04H, R0, R1
                                 ;     409 	ritorno(cm_straight_feed(vect, flags));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",409
000005B9 05rrrrrr             A  		BSR _cm_straight_feed
000005BD FBE2rrrrrrrr            		MOV.L #_status_code, R14
000005C3 C3E1                    		MOV.B R1, [R14]
000005C5 6101                    		CMP #00H, R1
000005C7 20rr                    		BEQ L123
000005C9                         L122:	; bb40
000005C9 FBE2rrrrrrrr            		MOV.L #_status_code, R14
000005CF C4E003                  		MOV.B [R14], 03H[R0]
000005D2 08                   S  		BRA L124
000005D3                         L123:	; bb50
                                 ;     410 	return (STAT_EAGAIN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",410
000005D3 3C0302                  		MOV.B #02H, 03H[R0]
000005D6                         L124:	; bb52
000005D6 C5000337                		MOV.B 03H[R0], 37H[R0]
                                 ;     411 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",411
000005DA 590137                  		MOVU.B 37H[R0], R1
000005DD 6711                    		RTSD #44H
000005DF                         __$_homing_abort:
                                 		.STACK	__$_homing_abort=8
                                 ;     412 
                                 ;     413 /*
                                 ;     414  * _homing_abort() - end homing cycle in progress
                                 ;     415  */
                                 ;     416 
                                 ;     417 static stat_t _homing_abort(int8_t axis)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",417
000005DF 6040                    		SUB #04H, R0
000005E1 8089                    		MOV.B R1, 03H[R0]
                                 ;     418 {
                                 ;     419 	cm_set_axis_jerk(axis, hm.saved_jerk);					// restore the max jerk value
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",419
000005E3 FB12rrrrrrrr            		MOV.L #__$hm, R1
000005E9 AB92                    		MOV.L 38H[R1], R2
000005EB B089                    		MOVU.B 03H[R0], R1
000005ED 05rrrrrr             A  		BSR _cm_set_axis_jerk
000005F1                         L126:	; entry.split
                                 ;     420 #ifdef __NEW_SWITCHES
                                 ;     421 	_restore_switch_settings(&sw.s[hm.homing_switch_axis][hm.homing_switch_position]);
                                 ;     422 #endif
                                 ;     423 	_homing_finalize_exit(axis);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",423
000005F1 8889                    		MOV.B 03H[R0], R1
000005F3 39rrrr               W  		BSR __$_homing_finalize_exit
000005F6                         L127:	; entry.split1
000005F6 6601                    		MOV.L #00000000H, R1
                                 ;     424 	sr_request_status_report(SR_TIMED_REQUEST);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",424
000005F8 05rrrrrr             A  		BSR _sr_request_status_report
000005FC                         L128:	; entry.split2
                                 ;     425 	return (STAT_HOMING_CYCLE_FAILED);						// homing state remains HOMING_NOT_HOMED
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",425
000005FC 3C02F0                  		MOV.B #0F0H, 02H[R0]
000005FF B081                    		MOVU.B 02H[R0], R1
00000601                         L129:	; entry.split3
                                 ;     426 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",426
00000601 5B11                    		MOVU.B R1, R1
00000603 6701                    		RTSD #04H
00000605                         __$_homing_error_exit:
                                 		.STACK	__$_homing_error_exit=144
                                 ;     427 
                                 ;     428 /*
                                 ;     429  * _homing_error_exit()
                                 ;     430  */
                                 ;     431 
                                 ;     432 static stat_t _homing_error_exit(int8_t axis, stat_t status)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",432
00000605 72007CFF                		ADD #0FFFFFF7CH, R0
00000609 C70183                  		MOV.B R1, 83H[R0]
0000060C C70282                  		MOV.B R2, 82H[R0]
                                 ;     433 {
                                 ;     434 	// Generate the warning message. Since the error exit returns via the homing callback
                                 ;     435 	// - and not the main controller - it requires its own display processing
                                 ;     436 	nv_reset_nv_list();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",436
0000060F 05rrrrrr             A  		BSR _nv_reset_nv_list
00000613                         L131:	; entry.split
                                 ;     437 
                                 ;     438 	if (axis == -2) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",438
00000613 CD0183                  		MOV.B 83H[R0], R1
00000616 7501FE                  		CMP #0FFFFFFFEH, R1
00000619 21rr                    		BNE L133
0000061B                         L132:	; bb5
                                 ;     439 		nv_add_conditional_message((const char_t *)"Homing error - Bad or no axis(es) specified");;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",439
0000061B FB12rrrrrrrr            		MOV.L #_L12, R1
00000621 05rrrrrr             A  		BSR _nv_add_conditional_message
00000625 2Err                 B  		BRA L135
00000627                         L133:	; bb7
                                 ;     440 	} else {
                                 ;     441 		char message[NV_MESSAGE_LEN];
                                 ;     442 		sprintf_P(message, PSTR("Homing error - %c axis settings misconfigured"), cm_get_axis_char(axis));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",442
00000627 CD0183                  		MOV.B 83H[R0], R1
0000062A 05rrrrrr             A  		BSR _cm_get_axis_char
0000062E 6080                    		SUB #08H, R0
00000630 FBE2rrrrrrrr            		MOV.L #_L13, R14
00000636 E30E                    		MOV.L R14, [R0]
00000638 A009                    		MOV.L R1, 04H[R0]
0000063A 710109                  		ADD #09H, R0, R1
0000063D 05rrrrrr             A  		BSR _sprintf
00000641 6280                    		ADD #08H, R0
00000643                         L134:	; bb7.split
00000643 710101                  		ADD #01H, R0, R1
                                 ;     443 		nv_add_conditional_message((char_t *)message);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",443
00000646 05rrrrrr             A  		BSR _nv_add_conditional_message
0000064A                         L135:	; bb19
0000064A 6622                    		MOV.L #00000002H, R2
0000064C 7541F0                  		MOV.L #000000F0H, R1
                                 ;     444 	}
                                 ;     445 	nv_print_list(STAT_HOMING_CYCLE_FAILED, TEXT_INLINE_VALUES, JSON_RESPONSE_FORMAT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",445
0000064F EF23                    		MOV.L R2, R3
00000651 05rrrrrr             A  		BSR _nv_print_list
00000655                         L136:	; bb19.split
                                 ;     446 
                                 ;     447 	_homing_finalize_exit(axis);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",447
00000655 CD0183                  		MOV.B 83H[R0], R1
00000658 39rrrr               W  		BSR __$_homing_finalize_exit
0000065B                         L137:	; bb19.split1
                                 ;     448 	return (STAT_HOMING_CYCLE_FAILED);						// homing state remains HOMING_NOT_HOMED
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",448
0000065B F90481F0                		MOV.B #0F0H, 81H[R0]
0000065F 590181                  		MOVU.B 81H[R0], R1
00000662                         L138:	; bb19.split2
                                 ;     449 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",449
00000662 5B11                    		MOVU.B R1, R1
00000664 6721                    		RTSD #84H
00000666                         __$_homing_finalize_exit:
                                 		.STACK	__$_homing_finalize_exit=8
                                 ;     450 
                                 ;     451 /*
                                 ;     452  * _homing_finalize_exit() - helper to finalize homing
                                 ;     453  */
                                 ;     454 
                                 ;     455 static stat_t _homing_finalize_exit(int8_t axis)			// third part of return to home
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",455
00000666 6040                    		SUB #04H, R0
00000668 8089                    		MOV.B R1, 03H[R0]
                                 ;     456 {
                                 ;     457 	mp_flush_planner(); 									// should be stopped, but in case of switch closure.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",457
0000066A 05rrrrrr             A  		BSR _mp_flush_planner
0000066E                         L140:	; entry.split
                                 ;     458 															// don't use cm_request_queue_flush() he
                                 ;     459 
                                 ;     460 	cm_set_coord_system(hm.saved_coord_system);				// restore to work coordinate system
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",460
0000066E FBE2rrrrrrrr            		MOV.L #__$hm, R14
00000674 59E131                  		MOVU.B 31H[R14], R1
00000677 05rrrrrr             A  		BSR _cm_set_coord_system
0000067B                         L141:	; entry.split1
                                 ;     461 	cm_set_units_mode(hm.saved_units_mode);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",461
0000067B FBE2rrrrrrrr            		MOV.L #__$hm, R14
00000681 59E130                  		MOVU.B 30H[R14], R1
00000684 05rrrrrr             A  		BSR _cm_set_units_mode
00000688                         L142:	; entry.split2
                                 ;     462 	cm_set_distance_mode(hm.saved_distance_mode);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",462
00000688 FBE2rrrrrrrr            		MOV.L #__$hm, R14
0000068E 59E132                  		MOVU.B 32H[R14], R1
00000691 05rrrrrr             A  		BSR _cm_set_distance_mode
00000695                         L143:	; entry.split3
                                 ;     463 	cm_set_feed_rate_mode(hm.saved_feed_rate_mode);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",463
00000695 FBE2rrrrrrrr            		MOV.L #__$hm, R14
0000069B 59E133                  		MOVU.B 33H[R14], R1
0000069E 05rrrrrr             A  		BSR _cm_set_feed_rate_mode
000006A2                         L144:	; entry.split4
                                 ;     464 	cm.gm.feed_rate = hm.saved_feed_rate;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",464
000006A2 FBE2rrrrrrrr            		MOV.L #_cm, R14
000006A8 FBF2rrrrrrrr            		MOV.L #__$hm, R15
000006AE E5FE0DA5                		MOV.L 34H[R15], 0294H[R14]
000006B2                         L145:	; entry.split5
                                 ;     465 	cm_set_motion_mode(MODEL, MOTION_MODE_CANCEL_MOTION_MODE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",465
000006B2 FB12rrrrrrrr            		MOV.L #_cm, R1
000006B8 72115402                		ADD #0254H, R1
000006BC 6642                    		MOV.L #00000004H, R2
000006BE 05rrrrrr             A  		BSR _cm_set_motion_mode
000006C2                         L146:	; entry.split6
                                 ;     466 	cm_cycle_end();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",466
000006C2 05rrrrrr             A  		BSR _cm_cycle_end
000006C6                         L147:	; entry.split7
                                 ;     467 	cm.cycle_state = CYCLE_OFF;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",467
000006C6 FBE2rrrrrrrr            		MOV.L #_cm, R14
000006CC FAE41E0200              		MOV.B #00H, 021EH[R14]
000006D1                         L148:	; entry.split8
                                 ;     468 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",468
000006D1 3C0200                  		MOV.B #00H, 02H[R0]
000006D4 B081                    		MOVU.B 02H[R0], R1
000006D6                         L149:	; entry.split9
                                 ;     469 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",469
000006D6 5B11                    		MOVU.B R1, R1
000006D8 6701                    		RTSD #04H
000006DA                         __$_get_next_axis:
                                 		.STACK	__$_get_next_axis=8
                                 ;     470 
                                 ;     471 /*
                                 ;     472  * _get_next_axis() - return next axis in sequence based on axis in arg
                                 ;     473  *
                                 ;     474  *	Accepts "axis" arg as the current axis; or -1 to retrieve the first axis
                                 ;     475  *	Returns next axis based on "axis" argument and if that axis is flagged for homing in the gf struct
                                 ;     476  *	Returns -1 when all axes have been processed
                                 ;     477  *	Returns -2 if no axes are specified (Gcode calling error)
                                 ;     478  *	Homes Z first, then the rest in sequence
                                 ;     479  *
                                 ;     480  *	Isolating this function facilitates implementing more complex and
                                 ;     481  *	user-specified axis homing orders
                                 ;     482  */
                                 ;     483 
                                 ;     484 static int8_t _get_next_axis(int8_t axis)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",484
000006DA 6040                    		SUB #04H, R0
000006DC 8089                    		MOV.B R1, 03H[R0]
                                 ;     485 {
                                 ;     486 #if (HOMING_AXES <= 4)
                                 ;     487 //    uint8_t axis;
                                 ;     488 //    for(axis = AXIS_X; axis < HOMING_AXES; axis++)
                                 ;     489 //        if(fp_TRUE(cm.gf.target[axis])) break;
                                 ;     490 //    if(axis >= HOMING_AXES) return -2;
                                 ;     491 //    switch(axis) {
                                 ;     492 //        case -1:        if (fp_TRUE(cm.gf.target[AXIS_Z])) return (AXIS_Z);
                                 ;     493 //        case AXIS_Z:    if (fp_TRUE(cm.gf.target[AXIS_X])) return (AXIS_X);
                                 ;     494 //        case AXIS_X:    if (fp_TRUE(cm.gf.target[AXIS_Y])) return (AXIS_Y);
                                 ;     495 //        case AXIS_Y:    if (fp_TRUE(cm.gf.target[AXIS_A])) return (AXIS_A);
                                 ;     496 //#if (HOMING_AXES > 4)
                                 ;     497 //        case AXIS_A:    if (fp_TRUE(cm.gf.target[AXIS_B])) return (AXIS_B);
                                 ;     498 //        case AXIS_B:    if (fp_True(cm.gf.target[AXIS_C])) return (AXIS_C);
                                 ;     499 //#endif
                                 ;     500 //        default:        return -1;
                                 ;     501 //    }
                                 ;     502 	if (axis == -1) {	// inelegant brute force solution
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",502
000006DE 8889                    		MOV.B 03H[R0], R1
000006E0 7501FF                  		CMP #0FFFFFFFFH, R1
000006E3 21rr                    		BNE L160
000006E5                         L151:	; bb3
                                 ;     503 		if (fp_TRUE(cm.gf.target[AXIS_Z])) return (AXIS_Z);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",503
000006E5 FBE2rrrrrrrr            		MOV.L #_cm, R14
000006EB FBF2BD378635            		MOV.L #358637BDH, R15
000006F1 FC85EFE7                		FCMP 039CH[R14].L, R15
000006F5 26rr                    		BPZ L153
000006F7                         L152:	; bb4
000006F7 3C0102                  		MOV.B #02H, 01H[R0]
000006FA 38rrrr               W  		BRA L176
000006FD                         L153:	; bb10
                                 ;     504 		if (fp_TRUE(cm.gf.target[AXIS_X])) return (AXIS_X);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",504
000006FD FBE2rrrrrrrr            		MOV.L #_cm, R14
00000703 FBF2BD378635            		MOV.L #358637BDH, R15
00000709 FC85EFE5                		FCMP 0394H[R14].L, R15
0000070D 26rr                    		BPZ L155
0000070F                         L154:	; bb11
0000070F 3C0100                  		MOV.B #00H, 01H[R0]
00000712 38rrrr               W  		BRA L176
00000715                         L155:	; bb18
                                 ;     505 		if (fp_TRUE(cm.gf.target[AXIS_Y])) return (AXIS_Y);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",505
00000715 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000071B FBF2BD378635            		MOV.L #358637BDH, R15
00000721 FC85EFE6                		FCMP 0398H[R14].L, R15
00000725 26rr                    		BPZ L157
00000727                         L156:	; bb19
00000727 3C0101                  		MOV.B #01H, 01H[R0]
0000072A 38rrrr               W  		BRA L176
0000072D                         L157:	; bb26
                                 ;     506 		if (fp_TRUE(cm.gf.target[AXIS_A])) return (AXIS_A);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",506
0000072D FBE2rrrrrrrr            		MOV.L #_cm, R14
00000733 FBF2BD378635            		MOV.L #358637BDH, R15
00000739 FC85EFE8                		FCMP 03A0H[R14].L, R15
0000073D 26rr                    		BPZ L159
0000073F                         L158:	; bb27
0000073F 3C0103                  		MOV.B #03H, 01H[R0]
00000742 38rrrr               W  		BRA L176
00000745                         L159:	; bb33
                                 ;     507 		return (-2);	// error
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",507
00000745 3C01FE                  		MOV.B #0FEH, 01H[R0]
00000748 38rrrr               W  		BRA L176
0000074B                         L160:	; bb36
                                 ;     508 	} else if (axis == AXIS_Z) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",508
0000074B 8889                    		MOV.B 03H[R0], R1
0000074D 6121                    		CMP #02H, R1
0000074F 21rr                    		BNE L167
00000751                         L161:	; bb38
                                 ;     509 		if (fp_TRUE(cm.gf.target[AXIS_X])) return (AXIS_X);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",509
00000751 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000757 FBF2BD378635            		MOV.L #358637BDH, R15
0000075D FC85EFE5                		FCMP 0394H[R14].L, R15
00000761 26rr                    		BPZ L163
00000763                         L162:	; bb39
00000763 3C0100                  		MOV.B #00H, 01H[R0]
00000766 38rrrr               W  		BRA L176
00000769                         L163:	; bb46
                                 ;     510 		if (fp_TRUE(cm.gf.target[AXIS_Y])) return (AXIS_Y);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",510
00000769 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000076F FBF2BD378635            		MOV.L #358637BDH, R15
00000775 FC85EFE6                		FCMP 0398H[R14].L, R15
00000779 26rr                    		BPZ L165
0000077B                         L164:	; bb47
0000077B 3C0101                  		MOV.B #01H, 01H[R0]
0000077E 2Err                 B  		BRA L176
00000780                         L165:	; bb54
                                 ;     511 		if (fp_TRUE(cm.gf.target[AXIS_A])) return (AXIS_A);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",511
00000780 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000786 FBF2BD378635            		MOV.L #358637BDH, R15
0000078C FC85EFE8                		FCMP 03A0H[R14].L, R15
00000790 26rr                    		BPZ L175
00000792                         L166:	; bb55
00000792 3C0103                  		MOV.B #03H, 01H[R0]
00000795 2Err                 B  		BRA L176
00000797                         L167:	; bb63
                                 ;     512 	} else if (axis == AXIS_X) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",512
00000797 8889                    		MOV.B 03H[R0], R1
00000799 6101                    		CMP #00H, R1
0000079B 21rr                    		BNE L172
0000079D                         L168:	; bb65
                                 ;     513 		if (fp_TRUE(cm.gf.target[AXIS_Y])) return (AXIS_Y);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",513
0000079D FBE2rrrrrrrr            		MOV.L #_cm, R14
000007A3 FBF2BD378635            		MOV.L #358637BDH, R15
000007A9 FC85EFE6                		FCMP 0398H[R14].L, R15
000007AD 26rr                    		BPZ L170
000007AF                         L169:	; bb66
000007AF 3C0101                  		MOV.B #01H, 01H[R0]
000007B2 2Err                 B  		BRA L176
000007B4                         L170:	; bb73
                                 ;     514 		if (fp_TRUE(cm.gf.target[AXIS_A])) return (AXIS_A);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",514
000007B4 FBE2rrrrrrrr            		MOV.L #_cm, R14
000007BA FBF2BD378635            		MOV.L #358637BDH, R15
000007C0 FC85EFE8                		FCMP 03A0H[R14].L, R15
000007C4 26rr                    		BPZ L175
000007C6                         L171:	; bb74
000007C6 3C0103                  		MOV.B #03H, 01H[R0]
000007C9 2Err                 B  		BRA L176
000007CB                         L172:	; bb82
                                 ;     515 	} else if (axis == AXIS_Y) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",515
000007CB 8889                    		MOV.B 03H[R0], R1
000007CD 6111                    		CMP #01H, R1
000007CF 21rr                    		BNE L175
000007D1                         L173:	; bb84
                                 ;     516 		if (fp_TRUE(cm.gf.target[AXIS_A])) return (AXIS_A);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",516
000007D1 FBE2rrrrrrrr            		MOV.L #_cm, R14
000007D7 FBF2BD378635            		MOV.L #358637BDH, R15
000007DD FC85EFE8                		FCMP 03A0H[R14].L, R15
000007E1 26rr                    		BPZ L175
000007E3                         L174:	; bb85
000007E3 3C0103                  		MOV.B #03H, 01H[R0]
000007E6 08                   S  		BRA L176
000007E7                         L175:	; bb115
                                 ;     517 	}
                                 ;     518 	return (-1);	// done
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",518
000007E7 3C01FF                  		MOV.B #0FFH, 01H[R0]
000007EA                         L176:	; bb117
000007EA C5000102                		MOV.B 01H[R0], 02H[R0]
                                 ;     519 
                                 ;     520 #else
                                 ;     521 
                                 ;     522 	if (axis == -1) {
                                 ;     523 		if (fp_TRUE(cm.gf.target[AXIS_Z])) return (AXIS_Z);
                                 ;     524 		if (fp_TRUE(cm.gf.target[AXIS_X])) return (AXIS_X);
                                 ;     525 		if (fp_TRUE(cm.gf.target[AXIS_Y])) return (AXIS_Y);
                                 ;     526 		if (fp_TRUE(cm.gf.target[AXIS_A])) return (AXIS_A);
                                 ;     527 		if (fp_TRUE(cm.gf.target[AXIS_B])) return (AXIS_B);
                                 ;     528 		if (fp_TRUE(cm.gf.target[AXIS_C])) return (AXIS_C);
                                 ;     529 		return (-2);	// error
                                 ;     530 	} else if (axis == AXIS_Z) {
                                 ;     531 		if (fp_TRUE(cm.gf.target[AXIS_X])) return (AXIS_X);
                                 ;     532 		if (fp_TRUE(cm.gf.target[AXIS_Y])) return (AXIS_Y);
                                 ;     533 		if (fp_TRUE(cm.gf.target[AXIS_A])) return (AXIS_A);
                                 ;     534 		if (fp_TRUE(cm.gf.target[AXIS_B])) return (AXIS_B);
                                 ;     535 		if (fp_TRUE(cm.gf.target[AXIS_C])) return (AXIS_C);
                                 ;     536 	} else if (axis == AXIS_X) {
                                 ;     537 		if (fp_TRUE(cm.gf.target[AXIS_Y])) return (AXIS_Y);
                                 ;     538 		if (fp_TRUE(cm.gf.target[AXIS_A])) return (AXIS_A);
                                 ;     539 		if (fp_TRUE(cm.gf.target[AXIS_B])) return (AXIS_B);
                                 ;     540 		if (fp_TRUE(cm.gf.target[AXIS_C])) return (AXIS_C);
                                 ;     541 	} else if (axis == AXIS_Y) {
                                 ;     542 		if (fp_TRUE(cm.gf.target[AXIS_A])) return (AXIS_A);
                                 ;     543 		if (fp_TRUE(cm.gf.target[AXIS_B])) return (AXIS_B);
                                 ;     544 		if (fp_TRUE(cm.gf.target[AXIS_C])) return (AXIS_C);
                                 ;     545 	} else if (axis == AXIS_A) {
                                 ;     546 		if (fp_TRUE(cm.gf.target[AXIS_B])) return (AXIS_B);
                                 ;     547 		if (fp_TRUE(cm.gf.target[AXIS_C])) return (AXIS_C);
                                 ;     548 	} else if (axis == AXIS_B) {
                                 ;     549 		if (fp_TRUE(cm.gf.target[AXIS_C])) return (AXIS_C);
                                 ;     550 	}
                                 ;     551 	return (-1);	// done
                                 ;     552 
                                 ;     553 #endif
                                 ;     554 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_homing.c",554
000007EE 8881                    		MOV.B 02H[R0], R1
000007F0 6701                    		RTSD #04H
                                 ;     555 
                                 ;     556 /*
                                 ;     557  * _get_next_axes() - return next axis in sequence based on axis in arg
                                 ;     558  *
                                 ;     559  *	Accepts "axis" arg as the current axis; or -1 to retrieve the first axis
                                 ;     560  *	Returns next axis based on "axis" argument
                                 ;     561  *	Returns -1 when all axes have been processed
                                 ;     562  *	Returns -2 if no axes are specified (Gcode calling error)
                                 ;     563  *
                                 ;     564  *	hm.axis2 is set to the secondary axis if axis is a dual axis
                                 ;     565  *	hm.axis2 is set to -1 otherwise
                                 ;     566  *
                                 ;     567  *	Isolating this function facilitates implementing more complex and
                                 ;     568  *	user-specified axis homing orders
                                 ;     569  *
                                 ;     570  *	Note: the logic to test for disabled or inhibited axes will allow the
                                 ;     571  *	following condition to occur: A single axis is specified but it is
                                 ;     572  *	disabled or inhibited - homing will say that it was successfully homed.
                                 ;     573  */
                                 ;     574 
                                 ;     575 // _run_homing_dual_axis() - kernal routine for running homing on a dual axis
                                 ;     576 //static stat_t _run_homing_dual_axis(int8_t axis) { return (STAT_OK);}
                                 ;     577 
                                 ;     578 /*
                                 ;     579 int8_t _get_next_axes(int8_t axis)
                                 ;     580 {
                                 ;     581 	int8_t next_axis;
                                 ;     582 	hm.axis2 = -1;
                                 ;     583 
                                 ;     584 	// Scan target vector for case where no valid axes are specified
                                 ;     585 	for (next_axis = 0; next_axis < AXES; next_axis++) {
                                 ;     586 		if ((fp_TRUE(cm.gf.target[next_axis])) &&
                                 ;     587 			(cm.a[next_axis].axis_mode != AXIS_INHIBITED) &&
                                 ;     588 			(cm.a[next_axis].axis_mode != AXIS_DISABLED)) {
                                 ;     589 			break;
                                 ;     590 		}
                                 ;     591 	}
                                 ;     592 	if (next_axis == AXES) {
                                 ;     593 //		fprintf_P(stderr, PSTR("***** Homing failed: none or disabled/inhibited axes specified\n"));
                                 ;     594 		return (-2);	// didn't find any axes to process
                                 ;     595 	}
                                 ;     596 
                                 ;     597 	// Scan target vector from the current axis to find next axis or the end
                                 ;     598 	for (next_axis = ++axis; next_axis < AXES; next_axis++) {
                                 ;     599 		if (fp_TRUE(cm.gf.target[next_axis])) {
                                 ;     600 			if ((cm.a[next_axis].axis_mode == AXIS_INHIBITED) ||
                                 ;     601 				(cm.a[next_axis].axis_mode == AXIS_DISABLED)) {	// Skip if axis disabled or inhibited
                                 ;     602 				continue;
                                 ;     603 			}
                                 ;     604 			break;		// got a good one
                                 ;     605 		}
                                 ;     606 		return (-1);	// you are done
                                 ;     607 	}
                                 ;     608 
                                 ;     609 	// Got a valid axis. Find out if it's a dual
                                 ;     610 	return (STAT_OK);
                                 ;     611 }
                                 ;     612 */
                                 ;     613 
                                 ;     614 #ifdef __cplusplus
                                 ;     615 }
                                 ;     616 #endif
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 00                      		.byte	0
00000001 00                      		.byte	0
00000002 00                      		.byte	0
00000003 00                      		.byte	0
00000004 00                      		.byte	0
00000005 00                      		.byte	0
00000006 00                      		.byte	0
00000007 00                      		.byte	0
00000008 00                      		.byte	0
00000009 00                      		.byte	0
0000000A 00                      		.byte	0
0000000B 00                      		.byte	0
0000000C 00                      		.byte	0
0000000D 00                      		.byte	0
0000000E 00                      		.byte	0
0000000F 00                      		.byte	0
00000010 00                      		.byte	0
00000011 00                      		.byte	0
00000012 00                      		.byte	0
00000013 00                      		.byte	0
00000014 00                      		.byte	0
00000015 00                      		.byte	0
00000016 00                      		.byte	0
00000017 00                      		.byte	0
00000018                         _L11:
00000018 00                      		.byte	0
00000019 00                      		.byte	0
0000001A 00                      		.byte	0
0000001B 00                      		.byte	0
0000001C 00                      		.byte	0
0000001D 00                      		.byte	0
0000001E 00                      		.byte	0
0000001F 00                      		.byte	0
00000020 00                      		.byte	0
00000021 00                      		.byte	0
00000022 00                      		.byte	0
00000023 00                      		.byte	0
00000024 00                      		.byte	0
00000025 00                      		.byte	0
00000026 00                      		.byte	0
00000027 00                      		.byte	0
00000028 00                      		.byte	0
00000029 00                      		.byte	0
0000002A 00                      		.byte	0
0000002B 00                      		.byte	0
0000002C 00                      		.byte	0
0000002D 00                      		.byte	0
0000002E 00                      		.byte	0
0000002F 00                      		.byte	0
00000030                         _L12:
00000030 486F6D69                		.byte	"Homing error - Bad or no axis(es) specified"
         6E672065                
         72726F72                
         202D2042                
         6164206F                
         72206E6F                
         20617869                
         73286573                
         29207370                
         65636966                
         696564                  
0000005B 00                      		.byte	00H
0000005C                         _L13:
0000005C 486F6D69                		.byte	"Homing error - %c axis settings misconfigured"
         6E672065                
         72726F72                
         202D2025                
         63206178                
         69732073                
         65747469                
         6E677320                
         6D697363                
         6F6E6669                
         67757265                
         64                      
00000089 00                      		.byte	00H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         __$hm:
00000000(0000003CH)              		.blkl	15
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     01692   LINES

Section List

Attr         Size               Name
CODE     0000002034(000007F2H)  P
ROMDATA  0000000138(0000008AH)  L
DATA     0000000060(0000003CH)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\cycle_homing.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\cycle_homing.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\src\cnc\cycle_homing.obj
