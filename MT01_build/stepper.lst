* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Mar 14 14:02:40 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  14-Mar-2017 14:02:40
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=stepper.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=stepper.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;stepper.c
                                 
                                 		.glb	__Stderr
                                 		.glb	_en
                                 		.glb	_cm
                                 		.glb	_mr
                                 		.glb	_timerDwell
                                 		.glb	_zinhibitor
                                 		.glb	_configVarOx
                                 		.glb	_configVarMaq
                                 		.glb	_configFlags
                                 		.glb	_g_maq
                                 		.glb	_tempoDwell
                                 		.glb	_st_cfg
                                 		.glb	_st_pre
                                 		.glb	_isDwell
                                 		.glb	_zmoved
                                 		.glb	_zmove
                                 		.glb	_restart_stepper
                                 		.glb	_R_TMR_CreateOneShot
                                 		.glb	_R_TMR_CreatePeriodic
                                 		.glb	_R_CMT_Control
                                 		.glb	_stepper_init
                                 		.glb	_stepper_init_assertions
                                 		.glb	_R_CMT_CreatePeriodic
                                 		.glb	_stepper_test_assertions
                                 		.glb	_st_runtime_isbusy
                                 		.glb	_st_reset
                                 		.glb	_mp_set_steps_to_runtime_position
                                 		.glb	_st_clc
                                 		.glb	_st_energize_motors
                                 		.glb	_st_deenergize_motors
                                 		.glb	_st_motor_power_callback
                                 		.glb	_timer_dda_callback
                                 		.glb	_timer_dwell_callback
                                 		.glb	_SysTickTimer_getValue
                                 		.glb	_cm_get_combined_state
                                 		.glb	_sr_request_status_report
                                 		.glb	_R_TMR_Control
                                 		.glb	_mp_set_runtime_position
                                 		.glb	_delay_thcStartStop
                                 		.glb	_st_request_exec_move
                                 		.glb	_exec_timer_num
                                 		.glb	_load_timer_num
                                 		.glb	_mp_exec_move
                                 		.glb	_mp_runtime_command
                                 		.glb	_st_prep_line
                                 		.glb	_cm_hard_alarm
                                 		.glb	__FDclass
                                 		.glb	_min3
                                 		.glb	_max3
                                 		.glb	_round
                                 		.glb	_st_prep_null
                                 		.glb	_st_prep_command
                                 		.glb	_st_prep_dwell
                                 		.glb	_st_set_sa
                                 		.glb	_set_flt
                                 		.glb	_st_set_tr
                                 		.glb	_set_flu
                                 		.glb	_st_set_mi
                                 		.glb	_nv_add_conditional_message
                                 		.glb	_set_int
                                 		.glb	_st_set_pm
                                 		.glb	_set_ui8
                                 		.glb	_st_set_pl
                                 		.glb	_st_get_pwr
                                 		.glb	_st_set_mt
                                 		.glb	_fminf
                                 		.glb	_fmaxf
                                 		.glb	_st_set_md
                                 		.glb	_st_set_me
                                 		.glb	_st_command_dwell
                                 		.glb	_st_get_dwell_elapsed_time
                                 		.glb	_st_set_dwell_elapsed_time
                                 		.glb	_st_print_mt
                                 		.glb	_text_print_flt
                                 		.glb	_st_print_me
                                 		.glb	_text_print_nul
                                 		.glb	_st_print_md
                                 		.glb	_fprintf
                                 		.glb	_st_print_ma
                                 		.glb	_st_print_sa
                                 		.glb	_st_print_tr
                                 		.glb	_cm_get_units_mode
                                 		.glb	_st_print_mi
                                 		.glb	_st_print_po
                                 		.glb	_st_print_pm
                                 		.glb	_st_print_pl
                                 		.glb	_st_print_pwr
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _restart_stepper:
                                 		.STACK	_restart_stepper=4
                                 ;       1 /*
                                 ;       2  * stepper.c - stepper motor controls
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart, Jr.
                                 ;       6  * Copyright (c) 2013 - 2015 Robert Giseburt
                                 ;       7  *
                                 ;       8  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       9  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;      10  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      11  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      12  *
                                 ;      13  * As a special exception, you may use this file as part of a software library without
                                 ;      14  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      15  * inline functions from this file, or you compile this file and link it with  other
                                 ;      16  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      17  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      18  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      19  * GNU General Public License.
                                 ;      20  *
                                 ;      21  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      22  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      23  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      24  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      25  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      26  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      27  */
                                 ;      28 /* 	This module provides the low-level stepper drivers and some related functions.
                                 ;      29  *	See stepper.h for a detailed explanation of this module.
                                 ;      30  */
                                 ;      31 
                                 ;      32 #include "tinyg.h"
                                 ;      33 #include "config.h"
                                 ;      34 #include "stepper.h"
                                 ;      35 #include "encoder.h"
                                 ;      36 #include "planner.h"
                                 ;      37 #include "report.h"
                                 ;      38 #include "hardware.h"
                                 ;      39 #include "text_parser.h"
                                 ;      40 #include "util.h"
                                 ;      41 #include "lcd.h"
                                 ;      42 #include "plasma.h"
                                 ;      43 #include "switch.h"
                                 ;      44 #include "settings.h"
                                 ;      45 
                                 ;      46 #include "macros.h"
                                 ;      47 #include "eeprom.h"
                                 ;      48 
                                 ;      49 /**** Allocate structures ****/
                                 ;      50 
                                 ;      51 stConfig_t st_cfg;
                                 ;      52 stPrepSingleton_t st_pre;
                                 ;      53 static stRunSingleton_t st_run;
                                 ;      54 bool isDwell = false;
                                 ;      55 extern bool zmoved;
                                 ;      56 extern float zmove;
                                 ;      57 /**** Setup local functions ****/
                                 ;      58 
                                 ;      59 static void _load_move(void);
                                 ;      60 static void _request_load_move(void);
                                 ;      61 #ifdef __ARM
                                 ;      62 static void _set_motor_power_level(const uint8_t motor, const float power_level);
                                 ;      63 #endif
                                 ;      64 #ifdef __RX
                                 ;      65 void timer_dda_callback(void *pdata);
                                 ;      66 void timer_dwell_callback(void *pdata);
                                 ;      67 void exec_timer_num(void *pdata);
                                 ;      68 void load_timer_num(void *pdata);
                                 ;      69 
                                 ;      70 #endif
                                 ;      71 // handy macro
                                 ;      72 #define _f_to_period(f) (uint16_t)((float)F_CPU / (float)f)
                                 ;      73 
                                 ;      74 /**** Setup motate ****/
                                 ;      75 
                                 ;      76 #ifdef __ARM
                                 ;      77 using namespace Motate;
                                 ;      78 
                                 ;      79 OutputPin<kGRBL_CommonEnablePinNumber> common_enable;	 // shorter form of the above
                                 ;      80 OutputPin<kDebug1_PinNumber> dda_debug_pin1;
                                 ;      81 OutputPin<kDebug2_PinNumber> dda_debug_pin2;
                                 ;      82 OutputPin<kDebug3_PinNumber> dda_debug_pin3;
                                 ;      83 
                                 ;      84 // Example with prefixed name::
                                 ;      85 //Motate::Timer<dda_timer_num> dda_timer(kTimerUpToMatch, FREQUENCY_DDA);// stepper pulse generation
                                 ;      86 Timer<dda_timer_num> dda_timer(kTimerUpToMatch, FREQUENCY_DDA);			// stepper pulse generation
                                 ;      87 Timer<dwell_timer_num> dwell_timer(kTimerUpToMatch, FREQUENCY_DWELL);	// dwell timer
                                 ;      88 Timer<load_timer_num> load_timer;		// triggers load of next stepper segment
                                 ;      89 Timer<exec_timer_num> exec_timer;		// triggers calculation of next+1 stepper segment
                                 ;      90 
                                 ;      91 // Motor structures
                                 ;      92 template<pin_number step_num,			// Setup a stepper template to hold our pins
                                 ;      93 		 pin_number dir_num,
                                 ;      94 		 pin_number enable_num,
                                 ;      95 		 pin_number ms0_num,
                                 ;      96 		 pin_number ms1_num,
                                 ;      97 		 pin_number ms2_num,
                                 ;      98 		 pin_number vref_num>
                                 ;      99 
                                 ;     100 struct Stepper {
                                 ;     101 	/* stepper pin assignments */
                                 ;     102 
                                 ;     103 	OutputPin<step_num> step;
                                 ;     104 	OutputPin<dir_num> dir;
                                 ;     105 	OutputPin<enable_num> enable;
                                 ;     106 	OutputPin<ms0_num> ms0;
                                 ;     107 	OutputPin<ms1_num> ms1;
                                 ;     108 	OutputPin<ms2_num> ms2;
                                 ;     109 	PWMOutputPin<vref_num> vref;
                                 ;     110 
                                 ;     111 	/* stepper default values */
                                 ;     112 
                                 ;     113 	// sets default pwm freq for all motor vrefs (comment line also sets HiZ)
                                 ;     114 	Stepper(const uint32_t frequency = 500000) : vref(frequency) {};
                                 ;     115 //	Stepper(const uint32_t frequency = 100000) : vref(kDriveLowOnly, frequency) {};
                                 ;     116 
                                 ;     117 	/* functions bound to stepper structures */
                                 ;     118 
                                 ;     119 	void setMicrosteps(const uint8_t microsteps)
                                 ;     120 	{
                                 ;     121 		switch (microsteps) {
                                 ;     122 			case ( 1): { ms2=0; ms1=0; ms0=0; break; }
                                 ;     123 			case ( 2): { ms2=0; ms1=0; ms0=1; break; }
                                 ;     124 			case ( 4): { ms2=0; ms1=1; ms0=0; break; }
                                 ;     125 			case ( 8): { ms2=0; ms1=1; ms0=1; break; }
                                 ;     126 			case (16): { ms2=1; ms1=0; ms0=0; break; }
                                 ;     127 			case (32): { ms2=1; ms1=0; ms0=1; break; }
                                 ;     128 		}
                                 ;     129 	};
                                 ;     130 
                                 ;     131 	void energize(const uint8_t motor)
                                 ;     132 	{
                                 ;     133 		if (st_cfg.mot[motor].power_mode != MOTOR_DISABLED) {
                                 ;     134 			enable.clear();
                                 ;     135 			st_run.mot[motor].power_state = MOTOR_POWER_TIMEOUT_START;
                                 ;     136 		}
                                 ;     137 	};
                                 ;     138 };
                                 ;     139 
                                 ;     140 Stepper<kSocket1_StepPinNumber,
                                 ;     141 		kSocket1_DirPinNumber,
                                 ;     142 		kSocket1_EnablePinNumber,
                                 ;     143 		kSocket1_Microstep_0PinNumber,
                                 ;     144 		kSocket1_Microstep_1PinNumber,
                                 ;     145 		kSocket1_Microstep_2PinNumber,
                                 ;     146 		kSocket1_VrefPinNumber> motor_1;
                                 ;     147 
                                 ;     148 Stepper<kSocket2_StepPinNumber,
                                 ;     149 		kSocket2_DirPinNumber,
                                 ;     150 		kSocket2_EnablePinNumber,
                                 ;     151 		kSocket2_Microstep_0PinNumber,
                                 ;     152 		kSocket2_Microstep_1PinNumber,
                                 ;     153 		kSocket2_Microstep_2PinNumber,
                                 ;     154 		kSocket2_VrefPinNumber> motor_2;
                                 ;     155 
                                 ;     156 Stepper<kSocket3_StepPinNumber,
                                 ;     157 		kSocket3_DirPinNumber,
                                 ;     158 		kSocket3_EnablePinNumber,
                                 ;     159 		kSocket3_Microstep_0PinNumber,
                                 ;     160 		kSocket3_Microstep_1PinNumber,
                                 ;     161 		kSocket3_Microstep_2PinNumber,
                                 ;     162 		kSocket3_VrefPinNumber> motor_3;
                                 ;     163 
                                 ;     164 Stepper<kSocket4_StepPinNumber,
                                 ;     165 		kSocket4_DirPinNumber,
                                 ;     166 		kSocket4_EnablePinNumber,
                                 ;     167 		kSocket4_Microstep_0PinNumber,
                                 ;     168 		kSocket4_Microstep_1PinNumber,
                                 ;     169 		kSocket4_Microstep_2PinNumber,
                                 ;     170 		kSocket4_VrefPinNumber> motor_4;
                                 ;     171 
                                 ;     172 Stepper<kSocket5_StepPinNumber,
                                 ;     173 		kSocket5_DirPinNumber,
                                 ;     174 		kSocket5_EnablePinNumber,
                                 ;     175 		kSocket5_Microstep_0PinNumber,
                                 ;     176 		kSocket5_Microstep_1PinNumber,
                                 ;     177 		kSocket5_Microstep_2PinNumber,
                                 ;     178 		kSocket5_VrefPinNumber> motor_5;
                                 ;     179 
                                 ;     180 Stepper<kSocket6_StepPinNumber,
                                 ;     181 		kSocket6_DirPinNumber,
                                 ;     182 		kSocket6_EnablePinNumber,
                                 ;     183 		kSocket6_Microstep_0PinNumber,
                                 ;     184 		kSocket6_Microstep_1PinNumber,
                                 ;     185 		kSocket6_Microstep_2PinNumber,
                                 ;     186 		kSocket6_VrefPinNumber> motor_6;
                                 ;     187 
                                 ;     188 #endif // __ARM
                                 ;     189 
                                 ;     190 /************************************************************************************
                                 ;     191  **** CODE **************************************************************************
                                 ;     192  ************************************************************************************/
                                 ;     193 void restart_stepper()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",193
00000000 754360                  		MOV.L #00000060H, R3
00000003 6602                    		MOV.L #00000000H, R2
                                 ;     194 {
                                 ;     195 	memset(&st_run, 0, sizeof(st_run));			// clear all values, pointers and status
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",195
00000005 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000000B 7F88                    		SSTR.B
0000000D                         L12:	; entry.split
                                 ;     196 	stepper_init_assertions();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",196
0000000D 39rrrr               W  		BSR _stepper_init_assertions
00000010                         L13:	; entry.split1
00000010 6623                    		MOV.L #00000002H, R3
                                 ;     197     R_TMR_CreateOneShot((uint8_t)(1000000/FREQUENCY_SGI),exec_timer_num,TIMER_EXEC);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",197
00000012 FB22rrrrrrrr            		MOV.L #_exec_timer_num, R2
00000018 6651                    		MOV.L #00000005H, R1
0000001A 05rrrrrr             A  		BSR _R_TMR_CreateOneShot
0000001E                         L14:	; entry.split2
0000001E 6603                    		MOV.L #00000000H, R3
                                 ;     198     R_TMR_CreatePeriodic(2*FREQUENCY_DDA,timer_dda_callback,TIMER_DDA);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",198
00000020 FB22rrrrrrrr            		MOV.L #_timer_dda_callback, R2
00000026 FB1E400D03              		MOV.L #00030D40H, R1
0000002B 05rrrrrr             A  		BSR _R_TMR_CreatePeriodic
0000002F                         L15:	; entry.split3
0000002F 6613                    		MOV.L #00000001H, R3
                                 ;     199     R_TMR_CreateOneShot((uint8_t)(1000000/FREQUENCY_SGI),load_timer_num,TIMER_LOAD);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",199
00000031 FB22rrrrrrrr            		MOV.L #_load_timer_num, R2
00000037 6651                    		MOV.L #00000005H, R1
00000039 05rrrrrr             A  		BSR _R_TMR_CreateOneShot
0000003D                         L16:	; entry.split4
                                 ;     200  //   R_CMT_CreatePeriodic(FREQUENCY_DWELL,timer_dwell_callback,&timerDwell);
                                 ;     201     R_CMT_Control(timerDwell,CMT_RX_CMD_PAUSE,0);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",201
0000003D FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
00000043 ECE1                    		MOV.L [R14], R1
00000045 6603                    		MOV.L #00000000H, R3
00000047 6612                    		MOV.L #00000001H, R2
00000049 05rrrrrr             A  		BSR _R_CMT_Control
0000004D                         L17:	; entry.split5
                                 ;     202 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",202
0000004D FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000053 3C1201                  		MOV.B #01H, 02H[R1]
00000056 02                      		RTS
00000057                         _stepper_init:
                                 		.STACK	_stepper_init=4
                                 ;     203 }
                                 ;     204 /*
                                 ;     205  * stepper_init() - initialize stepper motor subsystem
                                 ;     206  *
                                 ;     207  *	Notes:
                                 ;     208  *	  - This init requires sys_init() to be run beforehand
                                 ;     209  * 	  - microsteps are setup during config_init()
                                 ;     210  *	  - motor polarity is setup during config_init()
                                 ;     211  *	  - high level interrupts must be enabled in main() once all inits are complete
                                 ;     212  */
                                 ;     213 /*	NOTE: This is the bare code that the Motate timer calls replace.
                                 ;     214  *	NB: requires: #include <component_tc.h>
                                 ;     215  *
                                 ;     216  *	REG_TC1_WPMR = 0x54494D00;			// enable write to registers
                                 ;     217  *	TC_Configure(TC_BLOCK_DDA, TC_CHANNEL_DDA, TC_CMR_DDA);
                                 ;     218  *	REG_RC_DDA = TC_RC_DDA;				// set frequency
                                 ;     219  *	REG_IER_DDA = TC_IER_DDA;			// enable interrupts
                                 ;     220  *	NVIC_EnableIRQ(TC_IRQn_DDA);
                                 ;     221  *	pmc_enable_periph_clk(TC_ID_DDA);
                                 ;     222  *	TC_Start(TC_BLOCK_DDA, TC_CHANNEL_DDA);
                                 ;     223  */
                                 ;     224 
                                 ;     225 void stepper_init()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",225
00000057 754360                  		MOV.L #00000060H, R3
0000005A 6602                    		MOV.L #00000000H, R2
                                 ;     226 {
                                 ;     227 	memset(&st_run, 0, sizeof(st_run));			// clear all values, pointers and status
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",227
0000005C FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000062 7F88                    		SSTR.B
00000064                         L19:	; entry.split
                                 ;     228 	stepper_init_assertions();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",228
00000064 39rrrr               W  		BSR _stepper_init_assertions
00000067                         L20:	; entry.split1
00000067 6623                    		MOV.L #00000002H, R3
                                 ;     229 
                                 ;     230 #ifdef __AVR
                                 ;     231 	// Configure virtual ports
                                 ;     232 	PORTCFG.VPCTRLA = PORTCFG_VP0MAP_PORT_MOTOR_1_gc | PORTCFG_VP1MAP_PORT_MOTOR_2_gc;
                                 ;     233 	PORTCFG.VPCTRLB = PORTCFG_VP2MAP_PORT_MOTOR_3_gc | PORTCFG_VP3MAP_PORT_MOTOR_4_gc;
                                 ;     234 
                                 ;     235 	// setup ports and data structures
                                 ;     236 	for (uint8_t i=0; i<MOTORS; i++) {
                                 ;     237 		hw.st_port[i]->DIR = MOTOR_PORT_DIR_gm;  // sets outputs for motors & GPIO1, and GPIO2 inputs
                                 ;     238 		hw.st_port[i]->OUT = MOTOR_ENABLE_BIT_bm;// zero port bits AND disable motor
                                 ;     239 	}
                                 ;     240 	// setup DDA timer
                                 ;     241 	TIMER_DDA.CTRLA = STEP_TIMER_DISABLE;		// turn timer off
                                 ;     242 	TIMER_DDA.CTRLB = STEP_TIMER_WGMODE;		// waveform mode
                                 ;     243 	TIMER_DDA.INTCTRLA = TIMER_DDA_INTLVL;		// interrupt mode
                                 ;     244 
                                 ;     245 	// setup DWELL timer
                                 ;     246 	TIMER_DWELL.CTRLA = STEP_TIMER_DISABLE;		// turn timer off
                                 ;     247 	TIMER_DWELL.CTRLB = STEP_TIMER_WGMODE;		// waveform mode
                                 ;     248 	TIMER_DWELL.INTCTRLA = TIMER_DWELL_INTLVL;	// interrupt mode
                                 ;     249 
                                 ;     250 	// setup software interrupt load timer
                                 ;     251 	TIMER_LOAD.CTRLA = LOAD_TIMER_DISABLE;		// turn timer off
                                 ;     252 	TIMER_LOAD.CTRLB = LOAD_TIMER_WGMODE;		// waveform mode
                                 ;     253 	TIMER_LOAD.INTCTRLA = TIMER_LOAD_INTLVL;	// interrupt mode
                                 ;     254 	TIMER_LOAD.PER = LOAD_TIMER_PERIOD;			// set period
                                 ;     255 
                                 ;     256 	// setup software interrupt exec timer
                                 ;     257 	TIMER_EXEC.CTRLA = EXEC_TIMER_DISABLE;		// turn timer off
                                 ;     258 	TIMER_EXEC.CTRLB = EXEC_TIMER_WGMODE;		// waveform mode
                                 ;     259 	TIMER_EXEC.INTCTRLA = TIMER_EXEC_INTLVL;	// interrupt mode
                                 ;     260 	TIMER_EXEC.PER = EXEC_TIMER_PERIOD;			// set period
                                 ;     261 
                                 ;     262 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;
                                 ;     263 	st_reset();									// reset steppers to known state
                                 ;     264 #endif // __AVR
                                 ;     265 
                                 ;     266 #ifdef __ARM
                                 ;     267 	// setup DDA timer (see FOOTNOTE)
                                 ;     268 	dda_timer.setInterrupts(kInterruptOnOverflow | kInterruptOnMatchA | kInterruptPriorityHighest);
                                 ;     269 	dda_timer.setDutyCycleA(0.25);
                                 ;     270 
                                 ;     271 	// setup DWELL timer
                                 ;     272 	dwell_timer.setInterrupts(kInterruptOnOverflow | kInterruptPriorityHighest);
                                 ;     273 
                                 ;     274 	// setup software interrupt load timer
                                 ;     275 	load_timer.setInterrupts(kInterruptOnSoftwareTrigger | kInterruptPriorityLow);
                                 ;     276 
                                 ;     277 	// setup software interrupt exec timer & initial condition
                                 ;     278 	exec_timer.setInterrupts(kInterruptOnSoftwareTrigger | kInterruptPriorityLowest);
                                 ;     279 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;
                                 ;     280 
                                 ;     281 	// setup motor power levels and apply power level to stepper drivers
                                 ;     282 	for (uint8_t motor=0; motor<MOTORS; motor++) {
                                 ;     283 		_set_motor_power_level(motor, st_cfg.mot[motor].power_level_scaled);
                                 ;     284 		st_run.mot[motor].power_level_dynamic = st_cfg.mot[motor].power_level_scaled;
                                 ;     285 	}
                                 ;     286 //	motor_1.vref = 0.25; // example of how to set vref duty cycle directly. Freq already set to 500000 Hz.
                                 ;     287 #endif // __ARM
                                 ;     288 
                                 ;     289 #ifdef __RX
                                 ;     290     R_TMR_CreateOneShot((uint8_t)(1000000/FREQUENCY_SGI),exec_timer_num,TIMER_EXEC);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",290
00000069 FB22rrrrrrrr            		MOV.L #_exec_timer_num, R2
0000006F 6651                    		MOV.L #00000005H, R1
00000071 05rrrrrr             A  		BSR _R_TMR_CreateOneShot
00000075                         L21:	; entry.split2
00000075 6603                    		MOV.L #00000000H, R3
                                 ;     291     R_TMR_CreatePeriodic(2*FREQUENCY_DDA,timer_dda_callback,TIMER_DDA);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",291
00000077 FB22rrrrrrrr            		MOV.L #_timer_dda_callback, R2
0000007D FB1E400D03              		MOV.L #00030D40H, R1
00000082 05rrrrrr             A  		BSR _R_TMR_CreatePeriodic
00000086                         L22:	; entry.split3
00000086 6613                    		MOV.L #00000001H, R3
                                 ;     292     R_TMR_CreateOneShot((uint8_t)(1000000/FREQUENCY_SGI),load_timer_num,TIMER_LOAD);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",292
00000088 FB22rrrrrrrr            		MOV.L #_load_timer_num, R2
0000008E 6651                    		MOV.L #00000005H, R1
00000090 05rrrrrr             A  		BSR _R_TMR_CreateOneShot
00000094                         L23:	; entry.split4
                                 ;     293     R_CMT_CreatePeriodic(FREQUENCY_DWELL,timer_dwell_callback,&timerDwell);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",293
00000094 FB32rrrrrrrr            		MOV.L #_timerDwell, R3
0000009A FB22rrrrrrrr            		MOV.L #_timer_dwell_callback, R2
000000A0 FB1A1027                		MOV.L #00002710H, R1
000000A4 05rrrrrr             A  		BSR _R_CMT_CreatePeriodic
000000A8                         L24:	; entry.split5
                                 ;     294     R_CMT_Control(timerDwell,CMT_RX_CMD_PAUSE,0);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",294
000000A8 FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
000000AE ECE1                    		MOV.L [R14], R1
000000B0 6603                    		MOV.L #00000000H, R3
000000B2 6612                    		MOV.L #00000001H, R2
000000B4 05rrrrrr             A  		BSR _R_CMT_Control
000000B8                         L25:	; entry.split6
                                 ;     295 
                                 ;     296 	// setup software interrupt load timer
                                 ;     297 
                                 ;     298 	// setup software interrupt exec timer & initial condition
                                 ;     299 
                                 ;     300 
                                 ;     301 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",301
000000B8 FB12rrrrrrrr            		MOV.L #_st_pre, R1
000000BE 3C1201                  		MOV.B #01H, 02H[R1]
000000C1                         L26:	; entry.split7
                                 ;     302 	st_reset();									// reset steppers to known state
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",302
000000C1 39rrrr               W  		BSR _st_reset
000000C4 02                      		RTS
000000C5                         _stepper_init_assertions:
                                 		.STACK	_stepper_init_assertions=4
                                 ;     303 
                                 ;     304 #endif // __RX
                                 ;     305 }
                                 ;     306 
                                 ;     307 /*
                                 ;     308  * stepper_init_assertions() - test assertions, return error code if violation exists
                                 ;     309  * stepper_test_assertions() - test assertions, return error code if violation exists
                                 ;     310  */
                                 ;     311 
                                 ;     312 void stepper_init_assertions()
                                 ;     313 {
                                 ;     314 	st_run.magic_end = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",314
000000C5 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
000000CB F9E92EEF12              		MOV.W #12EFH, 5CH[R14]
000000D0                         L28:	; entry.split
                                 ;     315 	st_run.magic_start = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",315
000000D0 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
000000D6 F8E9EF12                		MOV.W #12EFH, [R14]
000000DA                         L29:	; entry.split1
                                 ;     316 	st_pre.magic_end = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",316
000000DA FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000000E0 F9E942EF12              		MOV.W #12EFH, 84H[R14]
000000E5                         L30:	; entry.split2
                                 ;     317 	st_pre.magic_start = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",317
000000E5 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000000EB F8E9EF12                		MOV.W #12EFH, [R14]
000000EF 02                      		RTS
000000F0                         _stepper_test_assertions:
                                 		.STACK	_stepper_test_assertions=8
                                 ;     318 }
                                 ;     319 
                                 ;     320 stat_t stepper_test_assertions()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",320
000000F0 6040                    		SUB #04H, R0
                                 ;     321 {
                                 ;     322 	if (st_run.magic_end	!= MAGICNUM) return (STAT_STEPPER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",322
000000F2 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
000000F8 5DEE2E                  		MOVU.W 5CH[R14], R14
000000FB 760EEF12                		CMP #12EFH, R14
000000FF 10                   S  		BEQ L33
00000100                         L32:	; bb1
00000100 3C025D                  		MOV.B #5DH, 02H[R0]
00000103 2Err                 B  		BRA L40
00000105                         L33:	; bb8
                                 ;     323 	if (st_run.magic_start	!= MAGICNUM) return (STAT_STEPPER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",323
00000105 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
0000010B 5CEE                    		MOVU.W [R14], R14
0000010D 760EEF12                		CMP #12EFH, R14
00000111 10                   S  		BEQ L35
00000112                         L34:	; bb9
00000112 3C025D                  		MOV.B #5DH, 02H[R0]
00000115 2Err                 B  		BRA L40
00000117                         L35:	; bb17
                                 ;     324 	if (st_pre.magic_end	!= MAGICNUM) return (STAT_STEPPER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",324
00000117 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
0000011D 5DEE42                  		MOVU.W 84H[R14], R14
00000120 760EEF12                		CMP #12EFH, R14
00000124 10                   S  		BEQ L37
00000125                         L36:	; bb18
00000125 3C025D                  		MOV.B #5DH, 02H[R0]
00000128 2Err                 B  		BRA L40
0000012A                         L37:	; bb26
                                 ;     325 	if (st_pre.magic_start	!= MAGICNUM) return (STAT_STEPPER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",325
0000012A FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000130 5CEE                    		MOVU.W [R14], R14
00000132 760EEF12                		CMP #12EFH, R14
00000136 10                   S  		BEQ L39
00000137                         L38:	; bb27
00000137 3C025D                  		MOV.B #5DH, 02H[R0]
0000013A 08                   S  		BRA L40
0000013B                         L39:	; bb34
                                 ;     326 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",326
0000013B 3C0200                  		MOV.B #00H, 02H[R0]
0000013E                         L40:	; bb36
0000013E C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     327 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",327
00000142 B089                    		MOVU.B 03H[R0], R1
00000144 6701                    		RTSD #04H
00000146                         _st_runtime_isbusy:
                                 		.STACK	_st_runtime_isbusy=8
                                 ;     328 
                                 ;     329 /*
                                 ;     330  * st_runtime_isbusy() - return TRUE if runtime is busy:
                                 ;     331  *
                                 ;     332  *	Busy conditions:
                                 ;     333  *	- motors are running
                                 ;     334  *	- dwell is running
                                 ;     335  */
                                 ;     336 
                                 ;     337 uint8_t st_runtime_isbusy()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",337
00000146 6040                    		SUB #04H, R0
                                 ;     338 {
                                 ;     339 	if (st_run.dda_ticks_downcount == 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",339
00000148 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000014E A819                    		MOV.L 04H[R1], R1
00000150 6101                    		CMP #00H, R1
00000152 18                   S  		BNE L43
00000153                         L42:	; bb1
                                 ;     340 		return (false);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",340
00000153 3C0200                  		MOV.B #00H, 02H[R0]
00000156 08                   S  		BRA L44
00000157                         L43:	; bb6
                                 ;     341 	}
                                 ;     342 	return (true);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",342
00000157 3C0201                  		MOV.B #01H, 02H[R0]
0000015A                         L44:	; bb8
0000015A C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     343 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",343
0000015E B089                    		MOVU.B 03H[R0], R1
00000160 6701                    		RTSD #04H
00000162                         _st_reset:
                                 		.STACK	_st_reset=8
                                 ;     344 
                                 ;     345 /*
                                 ;     346  * st_reset() - reset stepper internals
                                 ;     347  */
                                 ;     348 
                                 ;     349 void st_reset()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",349
00000162 6040                    		SUB #04H, R0
                                 ;     350 {
                                 ;     351 	for (uint8_t motor=0; motor<MOTORS; motor++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",351
00000164 3C0300                  		MOV.B #00H, 03H[R0]
00000167 2Err                 B  		BRA L49
00000169                         L46:	; bb
                                 ;     352 		st_pre.mot[motor].prev_direction = STEP_INITIAL_DIRECTION;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",352
00000169 B089                    		MOVU.B 03H[R0], R1
0000016B 75111C                  		MUL #1CH, R1
0000016E FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000174 4B12                    		ADD R1, R2
00000176 3CA900                  		MOV.B #00H, 19H[R2]
00000179                         L47:	; bb.split
                                 ;     353 		st_run.mot[motor].substep_accumulator = 0;	// will become max negative during per-motor setup;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",353
00000179 B089                    		MOVU.B 03H[R0], R1
0000017B 751114                  		MUL #14H, R1
0000017E FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000184 4B12                    		ADD R1, R2
00000186 3E2400                  		MOV.L #00000000H, 10H[R2]
00000189                         L48:	; bb.split1
                                 ;     354 		st_pre.mot[motor].corrected_steps = 0;		// diagnostic only - no action effect
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",354
00000189 B089                    		MOVU.B 03H[R0], R1
0000018B 75111C                  		MUL #1CH, R1
0000018E FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000194 4B12                    		ADD R1, R2
00000196 3E2800                  		MOV.L #00000000H, 20H[R2]
00000199 B089                    		MOVU.B 03H[R0], R1
0000019B 6211                    		ADD #01H, R1
0000019D 8089                    		MOV.B R1, 03H[R0]
0000019F                         L49:	; bb15
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",351
0000019F B089                    		MOVU.B 03H[R0], R1
000001A1 6141                    		CMP #04H, R1
000001A3 29rr                    		BLT L46
000001A5                         L50:	; bb20
                                 ;     355 	}
                                 ;     356 	mp_set_steps_to_runtime_position();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",356
000001A5 05rrrrrr             A  		BSR _mp_set_steps_to_runtime_position
000001A9 6701                    		RTSD #04H
000001AB                         _st_clc:
                                 		.STACK	_st_clc=12
                                 ;     357 }
                                 ;     358 
                                 ;     359 /*
                                 ;     360  * st_clc() - clear counters
                                 ;     361  */
                                 ;     362 
                                 ;     363 stat_t st_clc(nvObj_t *nv)	// clear diagnostic counters, reset stepper prep
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",363
000001AB 6080                    		SUB #08H, R0
000001AD A009                    		MOV.L R1, 04H[R0]
                                 ;     364 {
                                 ;     365 	st_reset();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",365
000001AF 39rrrr               W  		BSR _st_reset
000001B2                         L52:	; entry.split
                                 ;     366 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",366
000001B2 3C0300                  		MOV.B #00H, 03H[R0]
000001B5 B089                    		MOVU.B 03H[R0], R1
000001B7                         L53:	; entry.split1
                                 ;     367 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",367
000001B7 5B11                    		MOVU.B R1, R1
000001B9 6702                    		RTSD #08H
000001BB                         __$_motor_is_enabled:
                                 		.STACK	__$_motor_is_enabled=8
                                 ;     368 
                                 ;     369 /*
                                 ;     370  * Motor power management functions
                                 ;     371  *
                                 ;     372  * _deenergize_motor()		 - remove power from a motor
                                 ;     373  * _energize_motor()		 - apply power to a motor
                                 ;     374  * _set_motor_power_level()	 - set the actual Vref to a specified power level
                                 ;     375  *
                                 ;     376  * st_energize_motors()		 - apply power to all motors
                                 ;     377  * st_deenergize_motors()	 - remove power from all motors
                                 ;     378  * st_motor_power_callback() - callback to manage motor power sequencing
                                 ;     379  */
                                 ;     380 
                                 ;     381 static uint8_t _motor_is_enabled(uint8_t motor)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",381
000001BB 6040                    		SUB #04H, R0
000001BD 8089                    		MOV.B R1, 03H[R0]
                                 ;     382 {
                                 ;     383 //RXMOD	uint8_t port;
                                 ;     384 //	switch(motor) {
                                 ;     385 //		case (MOTOR_1): { port = PORT_MOTOR_1_VPORT.OUT; break; }
                                 ;     386 //		case (MOTOR_2): { port = PORT_MOTOR_2_VPORT.OUT; break; }
                                 ;     387 //		case (MOTOR_3): { port = PORT_MOTOR_3_VPORT.OUT; break; }
                                 ;     388 //		case (MOTOR_4): { port = PORT_MOTOR_4_VPORT.OUT; break; }
                                 ;     389 //		default: port = 0xff;	// defaults to disabled for bad motor input value
                                 ;     390 //	}
                                 ;     391 //	return ((port & MOTOR_ENABLE_BIT_bm) ? 0 : 1);	// returns 1 if motor is enabled (motor is actually active low)
                                 ;     392 	return 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",392
000001BF 3C0200                  		MOV.B #00H, 02H[R0]
000001C2 B081                    		MOVU.B 02H[R0], R1
000001C4                         L55:	; entry.split
                                 ;     393 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",393
000001C4 5B11                    		MOVU.B R1, R1
000001C6 6701                    		RTSD #04H
000001C8                         __$_deenergize_motor:
                                 		.STACK	__$_deenergize_motor=8
                                 ;     394 
                                 ;     395 static void _deenergize_motor(const uint8_t motor)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",395
000001C8 6040                    		SUB #04H, R0
000001CA 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",416
000001CC 6701                    		RTSD #04H
000001CE                         __$_energize_motor:
                                 		.STACK	__$_energize_motor=8
                                 ;     396 {
                                 ;     397 #ifdef __AVR
                                 ;     398 	switch (motor) {
                                 ;     399 		case (MOTOR_1): { PORT_MOTOR_1_VPORT.OUT |= MOTOR_ENABLE_BIT_bm; break; }
                                 ;     400 		case (MOTOR_2): { PORT_MOTOR_2_VPORT.OUT |= MOTOR_ENABLE_BIT_bm; break; }
                                 ;     401 		case (MOTOR_3): { PORT_MOTOR_3_VPORT.OUT |= MOTOR_ENABLE_BIT_bm; break; }
                                 ;     402 		case (MOTOR_4): { PORT_MOTOR_4_VPORT.OUT |= MOTOR_ENABLE_BIT_bm; break; }
                                 ;     403 	}
                                 ;     404 	st_run.mot[motor].power_state = MOTOR_OFF;
                                 ;     405 #endif
                                 ;     406 #ifdef __ARM
                                 ;     407 	// Motors that are not defined are not compiled. Saves some ugly #ifdef code
                                 ;     408 	if (!motor_1.enable.isNull()) if (motor == MOTOR_1) motor_1.enable.set();	// set disables the motor
                                 ;     409 	if (!motor_2.enable.isNull()) if (motor == MOTOR_2) motor_2.enable.set();
                                 ;     410 	if (!motor_3.enable.isNull()) if (motor == MOTOR_3) motor_3.enable.set();
                                 ;     411 	if (!motor_4.enable.isNull()) if (motor == MOTOR_4) motor_4.enable.set();
                                 ;     412 	if (!motor_5.enable.isNull()) if (motor == MOTOR_5) motor_5.enable.set();
                                 ;     413 	if (!motor_6.enable.isNull()) if (motor == MOTOR_6) motor_6.enable.set();
                                 ;     414 	st_run.mot[motor].power_state = MOTOR_OFF;
                                 ;     415 #endif
                                 ;     416 }
                                 ;     417 
                                 ;     418 static void _energize_motor(const uint8_t motor)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",418
000001CE 6040                    		SUB #04H, R0
000001D0 8089                    		MOV.B R1, 03H[R0]
                                 ;     419 {
                                 ;     420 	if (st_cfg.mot[motor].power_mode == MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",420
000001D2 B089                    		MOVU.B 03H[R0], R1
000001D4 751124                  		MUL #24H, R1
000001D7 FB22rrrrrrrr            		MOV.L #_st_cfg, R2
000001DD 4B12                    		ADD R1, R2
000001DF B329                    		MOVU.B 0DH[R2], R1
000001E1 6101                    		CMP #00H, R1
000001E3 18                   S  		BNE L60
000001E4                         L58:	; bb2
                                 ;     421 		_deenergize_motor(motor);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",421
000001E4 B089                    		MOVU.B 03H[R0], R1
000001E6 39rrrr               W  		BSR __$_deenergize_motor
000001E9                         L59:	; bb2.split
                                 ;     422 		return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",422
000001E9 6701                    		RTSD #04H
000001EB                         L60:	; bb12
                                 ;     423 	}
                                 ;     424 #ifdef __AVR
                                 ;     425 	switch(motor) {
                                 ;     426 		case (MOTOR_1): { PORT_MOTOR_1_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm; break; }
                                 ;     427 		case (MOTOR_2): { PORT_MOTOR_2_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm; break; }
                                 ;     428 		case (MOTOR_3): { PORT_MOTOR_3_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm; break; }
                                 ;     429 		case (MOTOR_4): { PORT_MOTOR_4_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm; break; }
                                 ;     430 	}
                                 ;     431 #endif
                                 ;     432 #ifdef __ARM
                                 ;     433 	// Motors that are not defined are not compiled. Saves some ugly #ifdef code
                                 ;     434 	//	case (MOTOR_1): { motor_1.energize(MOTOR_1); break; }
                                 ;     435 	if (!motor_1.enable.isNull()) if (motor == MOTOR_1) motor_1.energize(MOTOR_1);
                                 ;     436 	if (!motor_2.enable.isNull()) if (motor == MOTOR_2) motor_2.energize(MOTOR_2);
                                 ;     437 	if (!motor_3.enable.isNull()) if (motor == MOTOR_3) motor_3.energize(MOTOR_3);
                                 ;     438 	if (!motor_4.enable.isNull()) if (motor == MOTOR_4) motor_4.energize(MOTOR_4);
                                 ;     439 	if (!motor_5.enable.isNull()) if (motor == MOTOR_5) motor_5.energize(MOTOR_5);
                                 ;     440 	if (!motor_6.enable.isNull()) if (motor == MOTOR_6) motor_6.energize(MOTOR_6);
                                 ;     441 #endif
                                 ;     442 	st_run.mot[motor].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",442
000001EB B089                    		MOVU.B 03H[R0], R1
000001ED 751114                  		MUL #14H, R1
000001F0 FB22rrrrrrrr            		MOV.L #__$st_run, R2
000001F6 4B12                    		ADD R1, R2
000001F8 3CA403                  		MOV.B #03H, 14H[R2]
000001FB 6701                    		RTSD #04H
000001FD                         _st_energize_motors:
                                 		.STACK	_st_energize_motors=8
                                 ;     443 }
                                 ;     444 
                                 ;     445 /*
                                 ;     446  * _set_motor_power_level()	- applies the power level to the requested motor.
                                 ;     447  *
                                 ;     448  *	The power_level must be a compensated PWM value - presumably one of:
                                 ;     449  *		st_cfg.mot[motor].power_level_scaled
                                 ;     450  *		st_run.mot[motor].power_level_dynamic
                                 ;     451  */
                                 ;     452 #ifdef __ARM
                                 ;     453 static void _set_motor_power_level(const uint8_t motor, const float power_level)
                                 ;     454 {
                                 ;     455 	// power_level must be scaled properly for the driver's Vref voltage requirements
                                 ;     456 	if (!motor_1.enable.isNull()) if (motor == MOTOR_1) motor_1.vref = power_level;
                                 ;     457 	if (!motor_2.enable.isNull()) if (motor == MOTOR_2) motor_2.vref = power_level;
                                 ;     458 	if (!motor_3.enable.isNull()) if (motor == MOTOR_3) motor_3.vref = power_level;
                                 ;     459 	if (!motor_4.enable.isNull()) if (motor == MOTOR_4) motor_4.vref = power_level;
                                 ;     460 	if (!motor_5.enable.isNull()) if (motor == MOTOR_5) motor_5.vref = power_level;
                                 ;     461 	if (!motor_6.enable.isNull()) if (motor == MOTOR_6) motor_6.vref = power_level;
                                 ;     462 }
                                 ;     463 #endif
                                 ;     464 
                                 ;     465 void st_energize_motors()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",465
000001FD 6040                    		SUB #04H, R0
                                 ;     466 {
                                 ;     467 	for (uint8_t motor = MOTOR_1; motor < MOTORS; motor++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",467
000001FF 3C0300                  		MOV.B #00H, 03H[R0]
00000202 2Err                 B  		BRA L64
00000204                         L62:	; bb
                                 ;     468 		_energize_motor(motor);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",468
00000204 B089                    		MOVU.B 03H[R0], R1
00000206 39rrrr               W  		BSR __$_energize_motor
00000209                         L63:	; bb.split
                                 ;     469 		st_run.mot[motor].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",469
00000209 B089                    		MOVU.B 03H[R0], R1
0000020B 751114                  		MUL #14H, R1
0000020E FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000214 4B12                    		ADD R1, R2
00000216 3CA403                  		MOV.B #03H, 14H[R2]
00000219 B089                    		MOVU.B 03H[R0], R1
0000021B 6211                    		ADD #01H, R1
0000021D 8089                    		MOV.B R1, 03H[R0]
0000021F                         L64:	; bb8
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",467
0000021F B089                    		MOVU.B 03H[R0], R1
00000221 6141                    		CMP #04H, R1
00000223 29rr                    		BLT L62
00000225                         L65:	; return
                                 ;     470 	}
                                 ;     471 #ifdef __ARM
                                 ;     472 	common_enable.clear();			// enable gShield common enable
                                 ;     473 #endif
                                 ;     474 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",474
00000225 6701                    		RTSD #04H
00000227                         _st_deenergize_motors:
                                 		.STACK	_st_deenergize_motors=8
                                 ;     475 
                                 ;     476 void st_deenergize_motors()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",476
00000227 6040                    		SUB #04H, R0
                                 ;     477 {
                                 ;     478 	for (uint8_t motor = MOTOR_1; motor < MOTORS; motor++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",478
00000229 3C0300                  		MOV.B #00H, 03H[R0]
0000022C 2Err                 B  		BRA L68
0000022E                         L67:	; bb
                                 ;     479 		_deenergize_motor(motor);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",479
0000022E B089                    		MOVU.B 03H[R0], R1
00000230 39rrrr               W  		BSR __$_deenergize_motor
00000233 B089                    		MOVU.B 03H[R0], R1
00000235 6211                    		ADD #01H, R1
00000237 8089                    		MOV.B R1, 03H[R0]
00000239                         L68:	; bb4
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",478
00000239 B089                    		MOVU.B 03H[R0], R1
0000023B 6141                    		CMP #04H, R1
0000023D 29rr                    		BLT L67
0000023F                         L69:	; return
                                 ;     480 	}
                                 ;     481 #ifdef __ARM
                                 ;     482 	common_enable.set();			// disable gShield common enable
                                 ;     483 #endif
                                 ;     484 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",484
0000023F 6701                    		RTSD #04H
00000241                         _st_motor_power_callback:
                                 		.STACK	_st_motor_power_callback=16
                                 ;     485 
                                 ;     486 /*
                                 ;     487  * st_motor_power_callback() - callback to manage motor power sequencing
                                 ;     488  *
                                 ;     489  *	Handles motor power-down timing, low-power idle, and adaptive motor power
                                 ;     490  */
                                 ;     491 stat_t st_motor_power_callback() 	// called by controller
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",491
00000241 7EA6                    		PUSH.L R6
00000243 6080                    		SUB #08H, R0
                                 ;     492 {
                                 ;     493 	// manage power for each motor individually
                                 ;     494 	for (uint8_t m = MOTOR_1; m < MOTORS; m++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",494
00000245 3C0600                  		MOV.B #00H, 06H[R0]
00000248 38rrrr               W  		BRA L95
0000024B                         L71:	; bb2
                                 ;     495 
                                 ;     496 		// de-energize motor if it's set to MOTOR_DISABLED
                                 ;     497 		if (st_cfg.mot[m].power_mode == MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",497
0000024B B181                    		MOVU.B 06H[R0], R1
0000024D 751124                  		MUL #24H, R1
00000250 FB22rrrrrrrr            		MOV.L #_st_cfg, R2
00000256 4B12                    		ADD R1, R2
00000258 B329                    		MOVU.B 0DH[R2], R1
0000025A 6101                    		CMP #00H, R1
0000025C 18                   S  		BNE L73
0000025D                         L72:	; bb3
                                 ;     498 			_deenergize_motor(m);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",498
0000025D B181                    		MOVU.B 06H[R0], R1
0000025F 39rrrr               W  		BSR __$_deenergize_motor
00000262 38rrrr               W  		BRA L94
00000265                         L73:	; bb15
                                 ;     499 			continue;
                                 ;     500 		}
                                 ;     501 
                                 ;     502 		// energize motor if it's set to MOTOR_ALWAYS_POWERED
                                 ;     503 		if (st_cfg.mot[m].power_mode == MOTOR_ALWAYS_POWERED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",503
00000265 B181                    		MOVU.B 06H[R0], R1
00000267 751124                  		MUL #24H, R1
0000026A FB22rrrrrrrr            		MOV.L #_st_cfg, R2
00000270 4B12                    		ADD R1, R2
00000272 B329                    		MOVU.B 0DH[R2], R1
00000274 6111                    		CMP #01H, R1
00000276 21rr                    		BNE L79
00000278                         L74:	; bb17
                                 ;     504 			if (! _motor_is_enabled(m)) _energize_motor(m);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",504
00000278 B181                    		MOVU.B 06H[R0], R1
0000027A 39rrrr               W  		BSR __$_motor_is_enabled
0000027D 6101                    		CMP #00H, R1
0000027F 21rr                    		BNE L76
00000281 2Err                 B  		BRA L77
00000283                         L75:	; bb18
00000283 B181                    		MOVU.B 06H[R0], R1
00000285 39rrrr               W  		BSR __$_energize_motor
00000288 38rrrr               W  		BRA L94
0000028B                         L76:	; bb25
0000028B F80600                  		MOV.L #00000000H, [R0]
0000028E 08                   S  		BRA L78
0000028F                         L77:	; bb26
0000028F F80601                  		MOV.L #00000001H, [R0]
00000292                         L78:	; bb27
00000292 EC01                    		MOV.L [R0], R1
00000294 6101                    		CMP #00H, R1
00000296 21rr                    		BNE L75
00000298 38rrrr               W  		BRA L94
0000029B                         L79:	; bb43
                                 ;     505 			continue;
                                 ;     506 		}
                                 ;     507 
                                 ;     508 		// start a countdown if MOTOR_POWERED_IN_CYCLE or MOTOR_POWERED_ONLY_WHEN_MOVING
                                 ;     509 		if (st_run.mot[m].power_state == MOTOR_POWER_TIMEOUT_START) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",509
0000029B B181                    		MOVU.B 06H[R0], R1
0000029D 751114                  		MUL #14H, R1
000002A0 FB22rrrrrrrr            		MOV.L #__$st_run, R2
000002A6 4B12                    		ADD R1, R2
000002A8 B521                    		MOVU.B 14H[R2], R1
000002AA 6131                    		CMP #03H, R1
000002AC 21rr                    		BNE L87
000002AE                         L80:	; bb44
                                 ;     510 			st_run.mot[m].power_state = MOTOR_POWER_TIMEOUT_COUNTDOWN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",510
000002AE B181                    		MOVU.B 06H[R0], R1
000002B0 751114                  		MUL #14H, R1
000002B3 FB22rrrrrrrr            		MOV.L #__$st_run, R2
000002B9 4B12                    		ADD R1, R2
000002BB 3CA404                  		MOV.B #04H, 14H[R2]
000002BE                         L81:	; bb44.split
                                 ;     511 			st_run.mot[m].power_systick = SysTickTimer_getValue() +
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",511
000002BE B186                    		MOVU.B 06H[R0], R6
000002C0 05rrrrrr             A  		BSR _SysTickTimer_getValue
000002C4 751614                  		MUL #14H, R6
000002C7 FB22rrrrrrrr            		MOV.L #__$st_run, R2
000002CD 4B62                    		ADD R6, R2
000002CF FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
000002D5 ECEE                    		MOV.L [R14], R14
000002D7 FD723E00007A44          		FMUL #447A0000H, R14
000002DE 7DF1                    		BTST #1FH, R1
000002E0 20rr                    		BEQ L83
000002E2                         L82:	; bb44.split
000002E2 FD811F                  		SHLR #01H, R1, R15
000002E5 6411                    		AND #01H, R1
000002E7 57F1                    		OR R15, R1
000002E9 FC471F                  		ITOF R1, R15
000002EC FC8BFF                  		FADD R15, R15
000002EF 08                   S  		BRA L84
000002F0                         L83:	; bb44.split
000002F0 FC471F                  		ITOF R1, R15
000002F3                         L84:	; bb44.split
000002F3 FC8BEF                  		FADD R14, R15
000002F6 FD721F0000004F          		FCMP #4F000000H, R15
000002FD 29rr                    		BLT L86
000002FF                         L85:	; bb44.split
000002FF FD722F000080CF          		FADD #0CF800000H, R15
00000306                         L86:	; bb44.split
00000306 FC97F1                  		FTOI R15, R1
00000309 A1A1                    		MOV.L R1, 18H[R2]
0000030B                         L87:	; bb69
                                 ;     512 											(st_cfg.motor_power_timeout * 1000);
                                 ;     513 		}
                                 ;     514 
                                 ;     515 		// do not process countdown if in a feedhold
                                 ;     516 		if (cm_get_combined_state() == COMBINED_HOLD) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",516
0000030B 05rrrrrr             A  		BSR _cm_get_combined_state
0000030F 6161                    		CMP #06H, R1
00000311 20rr                    		BEQ L94
00000313                         L88:	; bb78
                                 ;     517 			continue;
                                 ;     518 		}
                                 ;     519 
                                 ;     520 		// do not process countdown if in a feedhold
                                 ;     521 		if (cm_get_combined_state() == COMBINED_HOLD) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",521
00000313 05rrrrrr             A  		BSR _cm_get_combined_state
00000317 6161                    		CMP #06H, R1
00000319 20rr                    		BEQ L94
0000031B                         L89:	; bb87
                                 ;     522 			continue;
                                 ;     523 		}
                                 ;     524 
                                 ;     525 		// run the countdown if you are in a countdown
                                 ;     526 		if (st_run.mot[m].power_state == MOTOR_POWER_TIMEOUT_COUNTDOWN) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",526
0000031B B181                    		MOVU.B 06H[R0], R1
0000031D 751114                  		MUL #14H, R1
00000320 FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000326 4B12                    		ADD R1, R2
00000328 B521                    		MOVU.B 14H[R2], R1
0000032A 6141                    		CMP #04H, R1
0000032C 21rr                    		BNE L94
0000032E                         L90:	; bb89
                                 ;     527 			if (SysTickTimer_getValue() > st_run.mot[m].power_systick ) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",527
0000032E 05rrrrrr             A  		BSR _SysTickTimer_getValue
00000332 B182                    		MOVU.B 06H[R0], R2
00000334 751214                  		MUL #14H, R2
00000337 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
0000033D 4B2E                    		ADD R2, R14
0000033F 0685E106                		CMP 18H[R14].L, R1
00000343 25rr                    		BLEU L94
00000345                         L91:	; bb90
                                 ;     528 				st_run.mot[m].power_state = MOTOR_IDLE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",528
00000345 B181                    		MOVU.B 06H[R0], R1
00000347 751114                  		MUL #14H, R1
0000034A FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000350 4B12                    		ADD R1, R2
00000352 3CA401                  		MOV.B #01H, 14H[R2]
00000355                         L92:	; bb90.split
                                 ;     529 				_deenergize_motor(m);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",529
00000355 B181                    		MOVU.B 06H[R0], R1
00000357 39rrrr               W  		BSR __$_deenergize_motor
0000035A                         L93:	; bb90.split1
0000035A 6601                    		MOV.L #00000000H, R1
                                 ;     530                 sr_request_status_report(SR_TIMED_REQUEST);		// request a status report when motors shut down
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",530
0000035C 05rrrrrr             A  		BSR _sr_request_status_report
00000360                         L94:	; bb117
00000360 B181                    		MOVU.B 06H[R0], R1
00000362 6211                    		ADD #01H, R1
00000364 8181                    		MOV.B R1, 06H[R0]
00000366                         L95:	; bb120
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",494
00000366 B181                    		MOVU.B 06H[R0], R1
00000368 6141                    		CMP #04H, R1
0000036A 28rr                  * 		BLT L71
         38rrrr                  
0000036F                         L96:	; bb126
                                 ;     531 			}
                                 ;     532 		}
                                 ;     533 	}
                                 ;     534 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",534
0000036F 3C0700                  		MOV.B #00H, 07H[R0]
00000372 B189                    		MOVU.B 07H[R0], R1
00000374                         L97:	; bb126.split
                                 ;     535 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",535
00000374 5B11                    		MOVU.B R1, R1
00000376 3F6603                  		RTSD #0CH, R6-R6
00000379                         _timer_dda_callback:
                                 		.STACK	_timer_dda_callback=12
                                 ;     536 
                                 ;     537 
                                 ;     538 /******************************
                                 ;     539  * Interrupt Service Routines *
                                 ;     540  ******************************/
                                 ;     541 
                                 ;     542 /***** Stepper Interrupt Service Routine ************************************************
                                 ;     543  * ISR - DDA timer interrupt routine - service ticks from DDA timer
                                 ;     544  */
                                 ;     545 
                                 ;     546 #ifdef __AVR
                                 ;     547 /*
                                 ;     548  *	Uses direct struct addresses and literal values for hardware devices - it's faster than
                                 ;     549  *	using indexed timer and port accesses. I checked. Even when -0s or -03 is used.
                                 ;     550  */
                                 ;     551 ISR(TIMER_DDA_ISR_vect)
                                 ;     552 {
                                 ;     553 	if ((st_run.mot[MOTOR_1].substep_accumulator += st_run.mot[MOTOR_1].substep_increment) > 0) {
                                 ;     554 		PORT_MOTOR_1_VPORT.OUT |= STEP_BIT_bm;		// turn step bit on
                                 ;     555 		st_run.mot[MOTOR_1].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     556 		INCREMENT_ENCODER(MOTOR_1);
                                 ;     557 	}
                                 ;     558 	if ((st_run.mot[MOTOR_2].substep_accumulator += st_run.mot[MOTOR_2].substep_increment) > 0) {
                                 ;     559 		PORT_MOTOR_2_VPORT.OUT |= STEP_BIT_bm;
                                 ;     560 		st_run.mot[MOTOR_2].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     561 		INCREMENT_ENCODER(MOTOR_2);
                                 ;     562 	}
                                 ;     563 	if ((st_run.mot[MOTOR_3].substep_accumulator += st_run.mot[MOTOR_3].substep_increment) > 0) {
                                 ;     564 		PORT_MOTOR_3_VPORT.OUT |= STEP_BIT_bm;
                                 ;     565 		st_run.mot[MOTOR_3].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     566 		INCREMENT_ENCODER(MOTOR_3);
                                 ;     567 	}
                                 ;     568 	if ((st_run.mot[MOTOR_4].substep_accumulator += st_run.mot[MOTOR_4].substep_increment) > 0) {
                                 ;     569 		PORT_MOTOR_4_VPORT.OUT |= STEP_BIT_bm;
                                 ;     570 		st_run.mot[MOTOR_4].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     571 		INCREMENT_ENCODER(MOTOR_4);
                                 ;     572 	}
                                 ;     573 
                                 ;     574 	// pulse stretching for using external drivers.- turn step bits off
                                 ;     575 	PORT_MOTOR_1_VPORT.OUT &= ~STEP_BIT_bm;				// ~ 5 uSec pulse width
                                 ;     576 	PORT_MOTOR_2_VPORT.OUT &= ~STEP_BIT_bm;				// ~ 4 uSec
                                 ;     577 	PORT_MOTOR_3_VPORT.OUT &= ~STEP_BIT_bm;				// ~ 3 uSec
                                 ;     578 	PORT_MOTOR_4_VPORT.OUT &= ~STEP_BIT_bm;				// ~ 2 uSec
                                 ;     579 
                                 ;     580 	if (--st_run.dda_ticks_downcount != 0) return;
                                 ;     581 
                                 ;     582 	TIMER_DDA.CTRLA = STEP_TIMER_DISABLE;				// disable DDA timer
                                 ;     583 	_load_move();										// load the next move
                                 ;     584 }
                                 ;     585 #endif // __AVR
                                 ;     586 
                                 ;     587 #ifdef __ARM
                                 ;     588 /*
                                 ;     589  *	This interrupt is really 2 interrupts. It fires on timer overflow and also on match.
                                 ;     590  *	Overflow interrupts are used to set step pins, match interrupts clear step pins.
                                 ;     591  *	This way the duty cycle of the stepper pulse can be controlled by setting the match value.
                                 ;     592  *
                                 ;     593  *	Note that the motor_N.step.isNull() tests are compile-time tests, not run-time tests.
                                 ;     594  *	If motor_N is not defined that if{} clause (i.e. that motor) drops out of the complied code.
                                 ;     595  */
                                 ;     596 namespace Motate {			// Must define timer interrupts inside the Motate namespace
                                 ;     597 MOTATE_TIMER_INTERRUPT(dda_timer_num)
                                 ;     598 {
                                 ;     599 //    dda_debug_pin1 = 1;
                                 ;     600 	uint32_t interrupt_cause = dda_timer.getInterruptCause();	// also clears interrupt condition
                                 ;     601 
                                 ;     602 	if (interrupt_cause == kInterruptOnOverflow) {
                                 ;     603 
                                 ;     604 		if (!motor_1.step.isNull() && (st_run.mot[MOTOR_1].substep_accumulator += st_run.mot[MOTOR_1].substep_increment) > 0) {
                                 ;     605 			motor_1.step.set();		// turn step bit on
                                 ;     606 			st_run.mot[MOTOR_1].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     607 			INCREMENT_ENCODER(MOTOR_1);
                                 ;     608 		}
                                 ;     609 		if (!motor_2.step.isNull() && (st_run.mot[MOTOR_2].substep_accumulator += st_run.mot[MOTOR_2].substep_increment) > 0) {
                                 ;     610 			motor_2.step.set();
                                 ;     611 			st_run.mot[MOTOR_2].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     612 			INCREMENT_ENCODER(MOTOR_2);
                                 ;     613 		}
                                 ;     614 		if (!motor_3.step.isNull() && (st_run.mot[MOTOR_3].substep_accumulator += st_run.mot[MOTOR_3].substep_increment) > 0) {
                                 ;     615 			motor_3.step.set();
                                 ;     616 			st_run.mot[MOTOR_3].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     617 			INCREMENT_ENCODER(MOTOR_3);
                                 ;     618 		}
                                 ;     619 		if (!motor_4.step.isNull() && (st_run.mot[MOTOR_4].substep_accumulator += st_run.mot[MOTOR_4].substep_increment) > 0) {
                                 ;     620 			motor_4.step.set();
                                 ;     621 			st_run.mot[MOTOR_4].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     622 			INCREMENT_ENCODER(MOTOR_4);
                                 ;     623 		}
                                 ;     624 		if (!motor_5.step.isNull() && (st_run.mot[MOTOR_5].substep_accumulator += st_run.mot[MOTOR_5].substep_increment) > 0) {
                                 ;     625 			motor_5.step.set();
                                 ;     626 			st_run.mot[MOTOR_5].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     627 			INCREMENT_ENCODER(MOTOR_5);
                                 ;     628 		}
                                 ;     629 		if (!motor_6.step.isNull() && (st_run.mot[MOTOR_6].substep_accumulator += st_run.mot[MOTOR_6].substep_increment) > 0) {
                                 ;     630 			motor_6.step.set();
                                 ;     631 			st_run.mot[MOTOR_6].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     632 			INCREMENT_ENCODER(MOTOR_6);
                                 ;     633 		}
                                 ;     634 
                                 ;     635 	} else if (interrupt_cause == kInterruptOnMatchA) {
                                 ;     636 //		dda_debug_pin2 = 1;
                                 ;     637 		motor_1.step.clear();							// turn step bits off
                                 ;     638 		motor_2.step.clear();
                                 ;     639 		motor_3.step.clear();
                                 ;     640 		motor_4.step.clear();
                                 ;     641 		motor_5.step.clear();
                                 ;     642 		motor_6.step.clear();
                                 ;     643 
                                 ;     644 		if (--st_run.dda_ticks_downcount != 0) return;
                                 ;     645 
                                 ;     646 		// process end of segment
                                 ;     647 		dda_timer.stop();								// turn it off or it will keep stepping out the last segment
                                 ;     648 		_load_move();									// load the next move at the current interrupt level
                                 ;     649 //		dda_debug_pin2 = 0;
                                 ;     650 	}
                                 ;     651 //    dda_debug_pin1 = 0;
                                 ;     652 } // MOTATE_TIMER_INTERRUPT
                                 ;     653 } // namespace Motate
                                 ;     654 
                                 ;     655 #endif // __ARM
                                 ;     656 
                                 ;     657 #ifdef __RX
                                 ;     658 void timer_dda_callback(void *pdata)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",658
00000379 6080                    		SUB #08H, R0
0000037B A009                    		MOV.L R1, 04H[R0]
                                 ;     659 {
                                 ;     660 	static bool flag_dda = 1;
                                 ;     661 
                                 ;     662 	flag_dda ^= 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",662
0000037D FBE2rrrrrrrr            		MOV.L #__$flag_dda$1, R14
00000383 661F                    		MOV.L #00000001H, R15
00000385 FC34EF                  		XOR [R14].UB, R15
00000388 610F                    		CMP #00H, R15
0000038A FCD0E1                  		SCNE.B [R14]
0000038D                         L99:	; entry.split
                                 ;     663 	if (!flag_dda)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",663
0000038D FBE2rrrrrrrr            		MOV.L #__$flag_dda$1, R14
00000393 58EE                    		MOVU.B [R14], R14
00000395 610E                    		CMP #00H, R14
00000397 3Brrrr               W  		BNE L127
0000039A 38rrrr               W  		BRA L128
0000039D                         L100:	; bb8
                                 ;     664 	{
                                 ;     665 		if ((st_run.mot[MOTOR_1].substep_accumulator += st_run.mot[MOTOR_1].substep_increment) > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",665
0000039D FB12rrrrrrrr            		MOV.L #__$st_run, R1
000003A3 A912                    		MOV.L 10H[R1], R2
000003A5 06891203                		ADD 0CH[R1].L, R2
000003A9 A112                    		MOV.L R2, 10H[R1]
000003AB 6102                    		CMP #00H, R2
000003AD 2Brr                    		BLE L108
000003AF                         L101:	; bb10
                                 ;     666 			if(!zinhibitor){
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",666
000003AF FBE2rrrrrrrr            		MOV.L #_zinhibitor, R14
000003B5 58EE                    		MOVU.B [R14], R14
000003B7 610E                    		CMP #00H, R14
000003B9 21rr                    		BNE L103
000003BB 2Err                 B  		BRA L104
000003BD                         L102:	; bb11
000003BD FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     667 				MOTOR1_STEP = TRUE;		// turn step bit on
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",667
000003C2 F0EC                    		BCLR #04H, [R14].B
000003C4 2Err                 B  		BRA L106
000003C6                         L103:	; bb19
000003C6 F80600                  		MOV.L #00000000H, [R0]
000003C9 08                   S  		BRA L105
000003CA                         L104:	; bb20
000003CA F80601                  		MOV.L #00000001H, [R0]
000003CD                         L105:	; bb21
000003CD EC01                    		MOV.L [R0], R1
000003CF 6101                    		CMP #00H, R1
000003D1 21rr                    		BNE L102
000003D3                         L106:	; bb24
                                 ;     668 			}
                                 ;     669 			st_run.mot[MOTOR_1].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",669
000003D3 FB12rrrrrrrr            		MOV.L #__$st_run, R1
000003D9 A912                    		MOV.L 10H[R1], R2
000003DB 06811202                		SUB 08H[R1].L, R2
000003DF A112                    		MOV.L R2, 10H[R1]
000003E1                         L107:	; bb24.split
                                 ;     670 			INCREMENT_ENCODER(MOTOR_1);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",670
000003E1 FB12rrrrrrrr            		MOV.L #_en, R1
000003E7 989A                    		MOV.W 06H[R1], R2
000003E9 06091204                		ADD 04H[R1].B, R2
000003ED 909A                    		MOV.W R2, 06H[R1]
000003EF                         L108:	; bb42
                                 ;     671 		}
                                 ;     672 		if ((st_run.mot[MOTOR_2].substep_accumulator += st_run.mot[MOTOR_2].substep_increment) > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",672
000003EF FB12rrrrrrrr            		MOV.L #__$st_run, R1
000003F5 AA1A                    		MOV.L 24H[R1], R2
000003F7 06891208                		ADD 20H[R1].L, R2
000003FB A21A                    		MOV.L R2, 24H[R1]
000003FD 6102                    		CMP #00H, R2
000003FF 2Brr                    		BLE L112
00000401                         L109:	; bb43
00000401 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     673 			MOTOR2_STEP = TRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",673
00000406 F0EE                    		BCLR #06H, [R14].B
00000408                         L110:	; bb43.split
                                 ;     674 			st_run.mot[MOTOR_2].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",674
00000408 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000040E AA1A                    		MOV.L 24H[R1], R2
00000410 06811202                		SUB 08H[R1].L, R2
00000414 A21A                    		MOV.L R2, 24H[R1]
00000416                         L111:	; bb43.split1
                                 ;     675 			INCREMENT_ENCODER(MOTOR_2);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",675
00000416 FB12rrrrrrrr            		MOV.L #_en, R1
0000041C 999A                    		MOV.W 0EH[R1], R2
0000041E 0609120C                		ADD 0CH[R1].B, R2
00000422 919A                    		MOV.W R2, 0EH[R1]
00000424                         L112:	; bb65
                                 ;     676 		}
                                 ;     677 		if ((st_run.mot[MOTOR_3].substep_accumulator += st_run.mot[MOTOR_3].substep_increment) > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",677
00000424 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000042A AB92                    		MOV.L 38H[R1], R2
0000042C 0689120D                		ADD 34H[R1].L, R2
00000430 A392                    		MOV.L R2, 38H[R1]
00000432 6102                    		CMP #00H, R2
00000434 2Brr                    		BLE L116
00000436                         L113:	; bb66
00000436 FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;     678 			MOTOR3_STEP = TRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",678
0000043B F0EA                    		BCLR #02H, [R14].B
0000043D                         L114:	; bb66.split
                                 ;     679 			st_run.mot[MOTOR_3].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",679
0000043D FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000443 AB92                    		MOV.L 38H[R1], R2
00000445 06811202                		SUB 08H[R1].L, R2
00000449 A392                    		MOV.L R2, 38H[R1]
0000044B                         L115:	; bb66.split2
                                 ;     680 			INCREMENT_ENCODER(MOTOR_3);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",680
0000044B FB12rrrrrrrr            		MOV.L #_en, R1
00000451 9A9A                    		MOV.W 16H[R1], R2
00000453 06091214                		ADD 14H[R1].B, R2
00000457 929A                    		MOV.W R2, 16H[R1]
00000459                         L116:	; bb87
                                 ;     681 		}
                                 ;     682 		if ((st_run.mot[MOTOR_4].substep_accumulator += st_run.mot[MOTOR_4].substep_increment) > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",682
00000459 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000045F AC9A                    		MOV.L 4CH[R1], R2
00000461 06891212                		ADD 48H[R1].L, R2
00000465 A49A                    		MOV.L R2, 4CH[R1]
00000467 6102                    		CMP #00H, R2
00000469 2Brr                    		BLE L130
0000046B                         L117:	; bb88
0000046B FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;     683 			MOTOR4_STEP = TRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",683
00000470 F0E8                    		BCLR #00H, [R14].B
00000472                         L118:	; bb88.split
                                 ;     684 			st_run.mot[MOTOR_4].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",684
00000472 FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000478 AC9A                    		MOV.L 4CH[R1], R2
0000047A 06811202                		SUB 08H[R1].L, R2
0000047E A49A                    		MOV.L R2, 4CH[R1]
00000480                         L119:	; bb88.split3
                                 ;     685 			INCREMENT_ENCODER(MOTOR_4);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",685
00000480 FB12rrrrrrrr            		MOV.L #_en, R1
00000486 9B9A                    		MOV.W 1EH[R1], R2
00000488 0609121C                		ADD 1CH[R1].B, R2
0000048C 939A                    		MOV.W R2, 1EH[R1]
0000048E 6702                    		RTSD #08H
00000490                         L120:	; bb109
00000490 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     686 		}
                                 ;     687 	}
                                 ;     688 	else
                                 ;     689 	{
                                 ;     690 		// pulse stretching for using external drivers.- turn step bits off
                                 ;     691 		MOTOR1_STEP = FALSE;				// ~ 5 uSec pulse width
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",691
00000495 F0E4                    		BSET #04H, [R14].B
00000497                         L121:	; bb109.split
00000497 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     692 		MOTOR2_STEP = FALSE;				// ~ 4 uSec
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",692
0000049C F0E6                    		BSET #06H, [R14].B
0000049E                         L122:	; bb109.split4
0000049E FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;     693 		MOTOR3_STEP = FALSE;				// ~ 3 uSec
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",693
000004A3 F0E2                    		BSET #02H, [R14].B
000004A5                         L123:	; bb109.split5
000004A5 FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;     694 		MOTOR4_STEP = FALSE;				// ~ 2 uSec
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",694
000004AA F0E0                    		BSET #00H, [R14].B
000004AC                         L124:	; bb109.split6
                                 ;     695 
                                 ;     696 		if (--st_run.dda_ticks_downcount != 0) return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",696
000004AC FB12rrrrrrrr            		MOV.L #__$st_run, R1
000004B2 A81A                    		MOV.L 04H[R1], R2
000004B4 6012                    		SUB #01H, R2
000004B6 A01A                    		MOV.L R2, 04H[R1]
000004B8 6102                    		CMP #00H, R2
000004BA 21rr                    		BNE L130
000004BC                         L125:	; bb131
000004BC 6612                    		MOV.L #00000001H, R2
000004BE 6601                    		MOV.L #00000000H, R1
                                 ;     697 
                                 ;     698 		R_TMR_Control(TIMER_DDA, TMR_CLEAR, 0);				// disable DDA timer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",698
000004C0 EF13                    		MOV.L R1, R3
000004C2 05rrrrrr             A  		BSR _R_TMR_Control
000004C6                         L126:	; bb131.split
                                 ;     699 		_load_move();										// load the next move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",699
000004C6 39rrrr               W  		BSR __$_load_move
000004C9 6702                    		RTSD #08H
000004CB                         L127:	; bb137
000004CB F80600                  		MOV.L #00000000H, [R0]
000004CE 08                   S  		BRA L129
000004CF                         L128:	; bb138
000004CF F80601                  		MOV.L #00000001H, [R0]
000004D2                         L129:	; bb139
000004D2 EC01                    		MOV.L [R0], R1
000004D4 6101                    		CMP #00H, R1
000004D6 3Brrrr               W  		BNE L100
000004D9 2Err                 B  		BRA L120
000004DB                         L130:	; return
                                 ;     700 	}
                                 ;     701 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",701
000004DB 6702                    		RTSD #08H
000004DD                         _timer_dwell_callback:
                                 		.STACK	_timer_dwell_callback=12
                                 ;     702 
                                 ;     703 #endif // __ARM
                                 ;     704 /***** Dwell Interrupt Service Routine **************************************************
                                 ;     705  * ISR - DDA timer interrupt routine - service ticks from DDA timer
                                 ;     706  */
                                 ;     707 
                                 ;     708 #ifdef __AVR
                                 ;     709 ISR(TIMER_DWELL_ISR_vect) {								// DWELL timer interrupt
                                 ;     710 	if (--st_run.dda_ticks_downcount == 0) {
                                 ;     711 		TIMER_DWELL.CTRLA = STEP_TIMER_DISABLE;			// disable DWELL timer
                                 ;     712 		_load_move();
                                 ;     713 	}
                                 ;     714 }
                                 ;     715 #endif
                                 ;     716 
                                 ;     717 #ifdef __ARM
                                 ;     718 namespace Motate {			// Must define timer interrupts inside the Motate namespace
                                 ;     719 MOTATE_TIMER_INTERRUPT(dwell_timer_num)
                                 ;     720 {
                                 ;     721 	dwell_timer.getInterruptCause(); // read SR to clear interrupt condition
                                 ;     722 	if (--st_run.dda_ticks_downcount == 0) {
                                 ;     723 		dwell_timer.stop();
                                 ;     724 		_load_move();
                                 ;     725 	}
                                 ;     726 }
                                 ;     727 } // namespace Motate
                                 ;     728 #endif
                                 ;     729 
                                 ;     730 #ifdef __RX
                                 ;     731 void timer_dwell_callback(void *pdata)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",731
000004DD 6080                    		SUB #08H, R0
000004DF A009                    		MOV.L R1, 04H[R0]
                                 ;     732 {
                                 ;     733 	static uint32_t refresh = 0;
                                 ;     734 	static float step = 0;
                                 ;     735 	if(zmove<0)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",735
000004E1 FBE2rrrrrrrr            		MOV.L #_zmove, R14
000004E7 ECEE                    		MOV.L [R14], R14
000004E9 FD721E00000000          		FCMP #00000000H, R14
000004F0 26rr                    		BPZ L133
000004F2                         L132:	; bb2
000004F2 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     736 	{
                                 ;     737 		MOTOR1_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",737
000004F7 F0E5                    		BSET #05H, [R14].B
000004F9 08                   S  		BRA L134
000004FA                         L133:	; bb5
000004FA FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     738 	}
                                 ;     739 	else
                                 ;     740 	{
                                 ;     741 		MOTOR1_DIR = MOTOR_REVERSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",741
000004FF F0ED                    		BCLR #05H, [R14].B
00000501                         L134:	; bb13
                                 ;     742 	}
                                 ;     743 	if(zmove != 0){
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",743
00000501 FBE2rrrrrrrr            		MOV.L #_zmove, R14
00000507 ECEE                    		MOV.L [R14], R14
00000509 FD721E00000000          		FCMP #00000000H, R14
00000510 20rr                    		BEQ L145
00000512                         L135:	; bb14
                                 ;     744 		switch (g_maq.model)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",744
00000512 FBE2rrrrrrrr            		MOV.L #_g_maq, R14
00000518 ECEE                    		MOV.L [R14], R14
0000051A 611E                    		CMP #01H, R14
0000051C 20rr                    		BEQ L139
0000051E                         L136:	; bb14
0000051E 612E                    		CMP #02H, R14
00000520 20rr                    		BEQ L140
00000522                         L137:	; bb14
00000522 613E                    		CMP #03H, R14
00000524 21rr                    		BNE L141
00000526                         L138:	; bb16
                                 ;     745 		{
                                 ;     746 			case EASYMAK_MAQ:
                                 ;     747 				step += Z_STEP_PULSE_EM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",747
00000526 FBE2rrrrrrrr            		MOV.L #__$step$3, R14
0000052C ECEF                    		MOV.L [R14], R15
0000052E FD722F8EC27539          		FADD #3975C28EH, R15
00000535 E3EF                    		MOV.L R15, [R14]
00000537 2Err                 B  		BRA L141
00000539                         L139:	; bb19
                                 ;     748 			break;
                                 ;     749 			case COMPACTA_MAQ:
                                 ;     750 				step += Z_STEP_PULSE_CP;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",750
00000539 FBE2rrrrrrrr            		MOV.L #__$step$3, R14
0000053F ECEF                    		MOV.L [R14], R15
00000541 FD722F8EC27539          		FADD #3975C28EH, R15
00000548 E3EF                    		MOV.L R15, [R14]
0000054A 2Err                 B  		BRA L141
0000054C                         L140:	; bb22
                                 ;     751 			break;
                                 ;     752 			case MOBILE_MAQ:
                                 ;     753 				step += Z_STEP_PULSE_MB;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",753
0000054C FBE2rrrrrrrr            		MOV.L #__$step$3, R14
00000552 ECEF                    		MOV.L [R14], R15
00000554 FD722FFA04C13B          		FADD #3BC104FAH, R15
0000055B E3EF                    		MOV.L R15, [R14]
0000055D                         L141:	; bb25
0000055D FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     754 			break;
                                 ;     755 		}
                                 ;     756 		MOTOR1_STEP = !MOTOR1_STEP;		// turn step bit on
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",756
00000562 58EE                    		MOVU.B [R14], R14
00000564 684E                    		SHLR #04H, R14
00000566 7C0E                    		BTST #00H, R14
00000568 10                   S  		BEQ L143
00000569                         L142:	; bb32
00000569 F80600                  		MOV.L #00000000H, [R0]
0000056C 08                   S  		BRA L144
0000056D                         L143:	; bb33
0000056D F80601                  		MOV.L #00000001H, [R0]
00000570                         L144:	; bb34
00000570 FBEE2EC008              		MOV.L #0008C02EH, R14
00000575 5801                    		MOVU.B [R0], R1
00000577 754FEF                  		MOV.L #000000EFH, R15
0000057A 50EF                    		AND [R14].UB, R15
0000057C 6C41                    		SHLL #04H, R1
0000057E 752110                  		AND #10H, R1
00000581 571F                    		OR R1, R15
00000583 C3EF                    		MOV.B R15, [R14]
00000585                         L145:	; bb47
                                 ;     757 	}
                                 ;     758 
                                 ;     759 	refresh += 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",759
00000585 FBE2rrrrrrrr            		MOV.L #__$refresh$2, R14
0000058B ECEF                    		MOV.L [R14], R15
0000058D 621F                    		ADD #01H, R15
0000058F E3EF                    		MOV.L R15, [R14]
00000591                         L146:	; bb47.split
                                 ;     760 	if(refresh == 1000){
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",760
00000591 FBE2rrrrrrrr            		MOV.L #__$refresh$2, R14
00000597 ECEE                    		MOV.L [R14], R14
00000599 760EE803                		CMP #03E8H, R14
0000059D 3Brrrr               W  		BNE L163
000005A0                         L147:	; bb52
000005A0 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     761 		if (MOTOR1_DIR == MOTOR_FOWARD)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",761
000005A5 58EE                    		MOVU.B [R14], R14
000005A7 685E                    		SHLR #05H, R14
000005A9 641E                    		AND #01H, R14
000005AB 611E                    		CMP #01H, R14
000005AD FBE2rrrrrrrr            		MOV.L #_mr, R14
000005B3 EDEE54                  		MOV.L 0150H[R14], R14
000005B6 FBF2rrrrrrrr            		MOV.L #__$step$3, R15
000005BC ECFF                    		MOV.L [R15], R15
000005BE 21rr                    		BNE L153
000005C0                         L148:	; bb53
                                 ;     762 		{
                                 ;     763 			mr.gm.target[AXIS_Z] -= step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",763
000005C0 FC83FE                  		FSUB R15, R14
000005C3 FBF2rrrrrrrr            		MOV.L #_mr, R15
000005C9 E7FE54                  		MOV.L R14, 0150H[R15]
000005CC                         L149:	; bb53.split
                                 ;     764 			if(configFlags[MODOMAQUINA] == MODO_OXICORTE)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",764
000005CC FBE2rrrrrrrr            		MOV.L #_configFlags, R14
000005D2 ECEE                    		MOV.L [R14], R14
000005D4 611E                    		CMP #01H, R14
000005D6 3Brrrr               W  		BNE L158
000005D9                         L150:	; bb58
                                 ;     765 			{
                                 ;     766 				/* Atualizando a altura de corte*/
                                 ;     767 				configVarOx[OX_CONFIG_ALTURA_CORTE] -= step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",767
000005D9 FBF2rrrrrrrr            		MOV.L #_configVarOx, R15
000005DF EDFE01                  		MOV.L 04H[R15], R14
000005E2 FB52rrrrrrrr            		MOV.L #__$step$3, R5
000005E8 FC805E                  		FSUB [R5].L, R14
000005EB E7FE01                  		MOV.L R14, 04H[R15]
000005EE                         L151:	; bb58.split
                                 ;     768 				configVarOx[OX_CONFIG_ALTURA_PERFURACAO] -= step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",768
000005EE FBE2rrrrrrrr            		MOV.L #_configVarOx, R14
000005F4 ECEF                    		MOV.L [R14], R15
000005F6 FB52rrrrrrrr            		MOV.L #__$step$3, R5
000005FC FC805F                  		FSUB [R5].L, R15
000005FF E3EF                    		MOV.L R15, [R14]
00000601                         L152:	; bb58.split1
                                 ;     769 				configVarMaq[CFG_MAQUINA_ALT_DESLOCAMENTO] -= step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",769
00000601 FBE2rrrrrrrr            		MOV.L #_configVarMaq, R14
00000607 ECEF                    		MOV.L [R14], R15
00000609 FB52rrrrrrrr            		MOV.L #__$step$3, R5
0000060F FC805F                  		FSUB [R5].L, R15
00000612 E3EF                    		MOV.L R15, [R14]
00000614 2Err                 B  		BRA L158
00000616                         L153:	; bb73
                                 ;     770 			}
                                 ;     771 		}
                                 ;     772 		else
                                 ;     773 		{
                                 ;     774 			mr.gm.target[AXIS_Z] += step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",774
00000616 FC8BFE                  		FADD R15, R14
00000619 FBF2rrrrrrrr            		MOV.L #_mr, R15
0000061F E7FE54                  		MOV.L R14, 0150H[R15]
00000622                         L154:	; bb73.split
                                 ;     775 			if(configFlags[MODOMAQUINA] == MODO_OXICORTE)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",775
00000622 FBE2rrrrrrrr            		MOV.L #_configFlags, R14
00000628 ECEE                    		MOV.L [R14], R14
0000062A 611E                    		CMP #01H, R14
0000062C 21rr                    		BNE L158
0000062E                         L155:	; bb78
                                 ;     776 			{
                                 ;     777 				/* Atualizando a altura de corte*/
                                 ;     778 				configVarOx[OX_CONFIG_ALTURA_CORTE] += step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",778
0000062E FBE2rrrrrrrr            		MOV.L #__$step$3, R14
00000634 ECE1                    		MOV.L [R14], R1
00000636 FB22rrrrrrrr            		MOV.L #_configVarOx, R2
0000063C FC892101                		FADD 04H[R2].L, R1
00000640 A029                    		MOV.L R1, 04H[R2]
00000642                         L156:	; bb78.split
                                 ;     779 				configVarOx[OX_CONFIG_ALTURA_PERFURACAO] += step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",779
00000642 FBE2rrrrrrrr            		MOV.L #_configVarOx, R14
00000648 ECEF                    		MOV.L [R14], R15
0000064A FB52rrrrrrrr            		MOV.L #__$step$3, R5
00000650 FC885F                  		FADD [R5].L, R15
00000653 E3EF                    		MOV.L R15, [R14]
00000655                         L157:	; bb78.split2
                                 ;     780 				configVarMaq[CFG_MAQUINA_ALT_DESLOCAMENTO] += step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",780
00000655 FBE2rrrrrrrr            		MOV.L #_configVarMaq, R14
0000065B ECEF                    		MOV.L [R14], R15
0000065D FB52rrrrrrrr            		MOV.L #__$step$3, R5
00000663 FC885F                  		FADD [R5].L, R15
00000666 E3EF                    		MOV.L R15, [R14]
00000668                         L158:	; bb100
                                 ;     781 			}
                                 ;     782 		}
                                 ;     783 
                                 ;     784 		mp_set_runtime_position(AXIS_Z,mr.gm.target[AXIS_Z]);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",784
00000668 FBE2rrrrrrrr            		MOV.L #_mr, R14
0000066E EDE254                  		MOV.L 0150H[R14], R2
00000671 6621                    		MOV.L #00000002H, R1
00000673 05rrrrrr             A  		BSR _mp_set_runtime_position
00000677                         L159:	; bb100.split
                                 ;     785 		if(step != 0)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",785
00000677 FBE2rrrrrrrr            		MOV.L #__$step$3, R14
0000067D ECEE                    		MOV.L [R14], R14
0000067F FD721E00000000          		FCMP #00000000H, R14
00000686 10                   S  		BEQ L161
00000687                         L160:	; bb103
                                 ;     786 			zmoved = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",786
00000687 FBE2rrrrrrrr            		MOV.L #_zmoved, R14
0000068D F8E401                  		MOV.B #01H, [R14]
00000690                         L161:	; bb108
                                 ;     787 		refresh = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",787
00000690 FBE2rrrrrrrr            		MOV.L #__$refresh$2, R14
00000696 F8E600                  		MOV.L #00000000H, [R14]
00000699                         L162:	; bb108.split
                                 ;     788 		step = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",788
00000699 FBE2rrrrrrrr            		MOV.L #__$step$3, R14
0000069F F8E600                  		MOV.L #00000000H, [R14]
000006A2                         L163:	; bb114
                                 ;     789 	}
                                 ;     790 	if (--st_run.dda_ticks_downcount == 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",790
000006A2 FB12rrrrrrrr            		MOV.L #__$st_run, R1
000006A8 A81A                    		MOV.L 04H[R1], R2
000006AA 6012                    		SUB #01H, R2
000006AC A01A                    		MOV.L R2, 04H[R1]
000006AE 6102                    		CMP #00H, R2
000006B0 21rr                    		BNE L173
000006B2                         L164:	; bb115
                                 ;     791 		isDwell = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",791
000006B2 FBE2rrrrrrrr            		MOV.L #_isDwell, R14
000006B8 F8E400                  		MOV.B #00H, [R14]
000006BB                         L165:	; bb115.split
                                 ;     792 		refresh = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",792
000006BB FBE2rrrrrrrr            		MOV.L #__$refresh$2, R14
000006C1 F8E600                  		MOV.L #00000000H, [R14]
000006C4                         L166:	; bb115.split3
                                 ;     793 
                                 ;     794 		step = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",794
000006C4 FBE2rrrrrrrr            		MOV.L #__$step$3, R14
000006CA F8E600                  		MOV.L #00000000H, [R14]
000006CD                         L167:	; bb115.split4
                                 ;     795 		if (st_pre.mot[MOTOR_1].direction == DIRECTION_CW)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",795
000006CD FB12rrrrrrrr            		MOV.L #_st_pre, R1
000006D3 8E11                    		MOV.B 18H[R1], R1
000006D5 6101                    		CMP #00H, R1
000006D7 18                   S  		BNE L169
000006D8                         L168:	; bb117
000006D8 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     796 			MOTOR1_DIR = MOTOR_REVERSE; else
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",796
000006DD F0ED                    		BCLR #05H, [R14].B
000006DF 08                   S  		BRA L170
000006E0                         L169:	; bb121
000006E0 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     797 		MOTOR1_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",797
000006E5 F0E5                    		BSET #05H, [R14].B
000006E7                         L170:	; bb130
                                 ;     798 		//TIMER_DWELL.CTRLA = STEP_TIMER_DISABLE;			// disable DWELL timer
                                 ;     799 		R_CMT_Control(timerDwell,CMT_RX_CMD_PAUSE,0);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",799
000006E7 FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
000006ED ECE1                    		MOV.L [R14], R1
000006EF 6603                    		MOV.L #00000000H, R3
000006F1 6612                    		MOV.L #00000001H, R2
000006F3 05rrrrrr             A  		BSR _R_CMT_Control
000006F7                         L171:	; bb130.split
000006F7 6611                    		MOV.L #00000001H, R1
                                 ;     800 		delay_thcStartStop(true);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",800
000006F9 05rrrrrr             A  		BSR _delay_thcStartStop
000006FD                         L172:	; bb130.split5
                                 ;     801 		_load_move();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",801
000006FD 39rrrr               W  		BSR __$_load_move
00000700 6702                    		RTSD #08H
00000702                         L173:	; return
                                 ;     802 	}
                                 ;     803 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",803
00000702 6702                    		RTSD #08H
00000704                         _st_request_exec_move:
                                 		.STACK	_st_request_exec_move=4
                                 ;     804 #endif
                                 ;     805 
                                 ;     806 /****************************************************************************************
                                 ;     807  * Exec sequencing code		- computes and prepares next load segment
                                 ;     808  * st_request_exec_move()	- SW interrupt to request to execute a move
                                 ;     809  * exec_timer interrupt		- interrupt handler for calling exec function
                                 ;     810  */
                                 ;     811 
                                 ;     812 #ifdef __AVR
                                 ;     813 void st_request_exec_move()
                                 ;     814 {
                                 ;     815 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {// bother interrupting
                                 ;     816 		TIMER_EXEC.PER = EXEC_TIMER_PERIOD;
                                 ;     817 		TIMER_EXEC.CTRLA = EXEC_TIMER_ENABLE;				// trigger a LO interrupt
                                 ;     818 	}
                                 ;     819 }
                                 ;     820 
                                 ;     821 ISR(TIMER_EXEC_ISR_vect) {								// exec move SW interrupt
                                 ;     822 	TIMER_EXEC.CTRLA = EXEC_TIMER_DISABLE;				// disable SW interrupt timer
                                 ;     823 
                                 ;     824 	// exec_move
                                 ;     825 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {
                                 ;     826 		if (mp_exec_move() != STAT_NOOP) {
                                 ;     827 			st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER; // flip it back
                                 ;     828 			_request_load_move();
                                 ;     829 		}
                                 ;     830 	}
                                 ;     831 }
                                 ;     832 #endif // __AVR
                                 ;     833 
                                 ;     834 #ifdef __ARM
                                 ;     835 void st_request_exec_move()
                                 ;     836 {
                                 ;     837 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {// bother interrupting
                                 ;     838 		exec_timer.setInterruptPending();
                                 ;     839 	}
                                 ;     840 }
                                 ;     841 
                                 ;     842 namespace Motate {	// Define timer inside Motate namespace
                                 ;     843 	MOTATE_TIMER_INTERRUPT(exec_timer_num)				// exec move SW interrupt
                                 ;     844 	{
                                 ;     845 		exec_timer.getInterruptCause();					// clears the interrupt condition
                                 ;     846 		if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {
                                 ;     847 			if (mp_exec_move() != STAT_NOOP) {
                                 ;     848 				st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER; // flip it back
                                 ;     849 				_request_load_move();
                                 ;     850 			}
                                 ;     851 		}
                                 ;     852 	}
                                 ;     853 } // namespace Motate
                                 ;     854 
                                 ;     855 #endif // __ARM
                                 ;     856 
                                 ;     857 #ifdef __RX
                                 ;     858 void st_request_exec_move()
                                 ;     859 {
                                 ;     860 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {// bother interrupting
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",860
00000704 FB12rrrrrrrr            		MOV.L #_st_pre, R1
0000070A B091                    		MOVU.B 02H[R1], R1
0000070C 6111                    		CMP #01H, R1
0000070E 21rr                    		BNE L176
00000710                         L175:	; bb1
00000710 6602                    		MOV.L #00000000H, R2
00000712 6621                    		MOV.L #00000002H, R1
                                 ;     861 		R_TMR_Control(TIMER_EXEC, TMR_START, 0); // trigger a LO interrupt
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",861
00000714 EF23                    		MOV.L R2, R3
00000716 05rrrrrr             A  		BSR _R_TMR_Control
0000071A 02                      		RTS
0000071B                         L176:	; return
                                 ;     862 	}
                                 ;     863 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",863
0000071B 02                      		RTS
0000071C                         _exec_timer_num:
                                 		.STACK	_exec_timer_num=8
                                 ;     864 
                                 ;     865 void exec_timer_num(void *pdata)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",865
0000071C 6040                    		SUB #04H, R0
0000071E E301                    		MOV.L R1, [R0]
                                 ;     866 {
                                 ;     867 	// exec_move
                                 ;     868 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",868
00000720 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000726 B091                    		MOVU.B 02H[R1], R1
00000728 6111                    		CMP #01H, R1
0000072A 21rr                    		BNE L181
0000072C                         L178:	; bb3
                                 ;     869 		if (mp_exec_move() != STAT_NOOP) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",869
0000072C 05rrrrrr             A  		BSR _mp_exec_move
00000730 6131                    		CMP #03H, R1
00000732 20rr                    		BEQ L181
00000734                         L179:	; bb4
                                 ;     870 			st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER; // flip it back
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",870
00000734 FB12rrrrrrrr            		MOV.L #_st_pre, R1
0000073A 3C1200                  		MOV.B #00H, 02H[R1]
0000073D                         L180:	; bb4.split
                                 ;     871 			_request_load_move();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",871
0000073D 39rrrr               W  		BSR __$_request_load_move
00000740 6701                    		RTSD #04H
00000742                         L181:	; return
                                 ;     872 		}
                                 ;     873 	}
                                 ;     874 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",874
00000742 6701                    		RTSD #04H
00000744                         __$_request_load_move:
                                 		.STACK	__$_request_load_move=4
                                 ;     875 #endif
                                 ;     876 
                                 ;     877 /****************************************************************************************
                                 ;     878  * Loader sequencing code
                                 ;     879  * st_request_load_move() - fires a software interrupt (timer) to request to load a move
                                 ;     880  * load_move interrupt	  - interrupt handler for running the loader
                                 ;     881  *
                                 ;     882  *	_load_move() can only be called be called from an ISR at the same or higher level as
                                 ;     883  *	the DDA or dwell ISR. A software interrupt has been provided to allow a non-ISR to
                                 ;     884  *	request a load (see st_request_load_move())
                                 ;     885  */
                                 ;     886 
                                 ;     887 #ifdef __AVR
                                 ;     888 static void _request_load_move()
                                 ;     889 {
                                 ;     890 	if (st_runtime_isbusy()) {
                                 ;     891 		return;													// don't request a load if the runtime i
                                 ;     892 	}
                                 ;     893 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_LOADER) {	// bother interrupting
                                 ;     894 		TIMER_LOAD.PER = LOAD_TIMER_PERIOD;
                                 ;     895 		TIMER_LOAD.CTRLA = LOAD_TIMER_ENABLE;					// trigger a HI interrupt
                                 ;     896 	}
                                 ;     897 }
                                 ;     898 
                                 ;     899 ISR(TIMER_LOAD_ISR_vect) {										// load steppers SW interrupt
                                 ;     900 	TIMER_LOAD.CTRLA = LOAD_TIMER_DISABLE;						// disable SW interrupt timer
                                 ;     901 	_load_move();
                                 ;     902 }
                                 ;     903 #endif // __AVR
                                 ;     904 
                                 ;     905 #ifdef __ARM
                                 ;     906 static void _request_load_move()
                                 ;     907 {
                                 ;     908 	if (st_runtime_isbusy()) {
                                 ;     909 		return;													// don't request a load if the runtime i
                                 ;     910 	}
                                 ;     911 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_LOADER) {	// bother interrupting
                                 ;     912 		load_timer.setInterruptPending();
                                 ;     913 	}
                                 ;     914 }
                                 ;     915 
                                 ;     916 namespace Motate {	// Define timer inside Motate namespace
                                 ;     917 	MOTATE_TIMER_INTERRUPT(load_timer_num)						// load steppers SW interrupt
                                 ;     918 	{
                                 ;     919 		load_timer.getInterruptCause();							// read SR to clear interrupt condition
                                 ;     920 		_load_move();
                                 ;     921 	}
                                 ;     922 } // namespace Motate
                                 ;     923 #endif // __ARM
                                 ;     924 
                                 ;     925 #ifdef __RX
                                 ;     926 static void _request_load_move()
                                 ;     927 {
                                 ;     928 	if (st_runtime_isbusy()) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",928
00000744 39rrrr               W  		BSR _st_runtime_isbusy
00000747 6101                    		CMP #00H, R1
00000749 21rr                    		BNE L185
0000074B                         L183:	; bb7
                                 ;     929 		return;													// don't request a load if the runtime i
                                 ;     930 	}
                                 ;     931 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_LOADER) {	// bother interrupting
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",931
0000074B FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000751 B091                    		MOVU.B 02H[R1], R1
00000753 6101                    		CMP #00H, R1
00000755 21rr                    		BNE L185
00000757                         L184:	; bb8
00000757 6602                    		MOV.L #00000000H, R2
00000759 6611                    		MOV.L #00000001H, R1
                                 ;     932 		R_TMR_Control(TIMER_LOAD, TMR_START, 0);					// trigger a HI interrupt
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",932
0000075B EF23                    		MOV.L R2, R3
0000075D 05rrrrrr             A  		BSR _R_TMR_Control
00000761 02                      		RTS
00000762                         L185:	; return
                                 ;     933 	}
                                 ;     934 
                                 ;     935 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",935
00000762 02                      		RTS
00000763                         _load_timer_num:
                                 		.STACK	_load_timer_num=8
                                 ;     936 
                                 ;     937 void load_timer_num(void *pdata)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",937
00000763 6040                    		SUB #04H, R0
00000765 E301                    		MOV.L R1, [R0]
                                 ;     938 {								// load timer interrupt
                                 ;     939 	_load_move();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",939
00000767 39rrrr               W  		BSR __$_load_move
0000076A 6701                    		RTSD #04H
0000076C                         __$_load_move:
                                 		.STACK	__$_load_move=8
                                 ;     940 }
                                 ;     941 #endif
                                 ;     942 
                                 ;     943 /****************************************************************************************
                                 ;     944  * _load_move() - Dequeue move and load into stepper struct
                                 ;     945  *
                                 ;     946  *	This routine can only be called be called from an ISR at the same or
                                 ;     947  *	higher level as the DDA or dwell ISR. A software interrupt has been
                                 ;     948  *	provided to allow a non-ISR to request a load (see st_request_load_move())
                                 ;     949  *
                                 ;     950  *	In aline() code:
                                 ;     951  *	 - All axes must set steps and compensate for out-of-range pulse phasing.
                                 ;     952  *	 - If axis has 0 steps the direction setting can be omitted
                                 ;     953  *	 - If axis has 0 steps the motor must not be enabled to support power mode = 1
                                 ;     954  */
                                 ;     955 /****** WARNING - THIS CODE IS SPECIFIC TO AVR. SEE G2 FOR ARM CODE ******/
                                 ;     956 
                                 ;     957 static void _load_move()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",957
0000076C 6040                    		SUB #04H, R0
                                 ;     958 {
                                 ;     959 	// Be aware that dda_ticks_downcount must equal zero for the loader to run.
                                 ;     960 	// So the initial load must also have this set to zero as part of initialization
                                 ;     961 	if (st_runtime_isbusy()) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",961
0000076E 39rrrr               W  		BSR _st_runtime_isbusy
00000771 6101                    		CMP #00H, R1
00000773 3Brrrr               W  		BNE L273
00000776                         L188:	; bb8
                                 ;     962 		return;													// exit if the runtime is busy
                                 ;     963 	}
                                 ;     964 	if (st_pre.buffer_state != PREP_BUFFER_OWNED_BY_LOADER) {	// if there are no moves to load...
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",964
00000776 FB12rrrrrrrr            		MOV.L #_st_pre, R1
0000077C B091                    		MOVU.B 02H[R1], R1
0000077E 6101                    		CMP #00H, R1
00000780 20rr                    		BEQ L192
00000782                         L189:	; bb9
                                 ;     965 		for (uint8_t motor = MOTOR_1; motor < MOTORS; motor++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",965
00000782 3C0300                  		MOV.B #00H, 03H[R0]
00000785 2Err                 B  		BRA L191
00000787                         L190:	; bb10
                                 ;     966 			st_run.mot[motor].power_state = MOTOR_POWER_TIMEOUT_START;	// ...start motor power timeouts
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",966
00000787 B089                    		MOVU.B 03H[R0], R1
00000789 751114                  		MUL #14H, R1
0000078C FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000792 4B12                    		ADD R1, R2
00000794 3CA403                  		MOV.B #03H, 14H[R2]
00000797 B089                    		MOVU.B 03H[R0], R1
00000799 6211                    		ADD #01H, R1
0000079B 8089                    		MOV.B R1, 03H[R0]
0000079D                         L191:	; bb17
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",965
0000079D B089                    		MOVU.B 03H[R0], R1
0000079F 6141                    		CMP #04H, R1
000007A1 29rr                    		BLT L190
000007A3 38rrrr               W  		BRA L273
000007A6                         L192:	; bb31
                                 ;     967 		}
                                 ;     968 		return;
                                 ;     969 	}
                                 ;     970 	// handle aline loads first (most common case)
                                 ;     971 	if (st_pre.move_type == MOVE_TYPE_ALINE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",971
000007A6 FB12rrrrrrrr            		MOV.L #_st_pre, R1
000007AC B211                    		MOVU.B 08H[R1], R1
000007AE 6111                    		CMP #01H, R1
000007B0 3Brrrr               W  		BNE L264
000007B3                         L193:	; bb32
                                 ;     972 
                                 ;     973 		//**** setup the new segment ****
                                 ;     974 
                                 ;     975 		st_run.dda_ticks_downcount = st_pre.dda_ticks;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",975
000007B3 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
000007B9 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
000007BF E5FE0301                		MOV.L 0CH[R15], 04H[R14]
000007C3                         L194:	; bb32.split
                                 ;     976 		st_run.dda_ticks_X_substeps = st_pre.dda_ticks_X_substeps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",976
000007C3 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
000007C9 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
000007CF E5FE0402                		MOV.L 10H[R15], 08H[R14]
000007D3                         L195:	; bb32.split1
                                 ;     977 
                                 ;     978 		//**** MOTOR_1 LOAD ****
                                 ;     979 
                                 ;     980 		// These sections are somewhat optimized for execution speed. The whole load operation
                                 ;     981 		// is supposed to take < 10 uSec (Xmega). Be careful if you mess with this.
                                 ;     982 
                                 ;     983 		// the following if() statement sets the runtime substep increment value or zeroes it
                                 ;     984 		if ((st_run.mot[MOTOR_1].substep_increment = st_pre.mot[MOTOR_1].substep_increment) != 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",984
000007D3 FB12rrrrrrrr            		MOV.L #_st_pre, R1
000007D9 A919                    		MOV.L 14H[R1], R1
000007DB FB22rrrrrrrr            		MOV.L #__$st_run, R2
000007E1 A0A9                    		MOV.L R1, 0CH[R2]
000007E3 6101                    		CMP #00H, R1
000007E5 3Arrrr               W  		BEQ L208
000007E8                         L196:	; bb37
                                 ;     985 
                                 ;     986 			// NB: If motor has 0 steps the following is all skipped. This ensures that state comparisons
                                 ;     987 			//	   always operate on the last segment actually run by this motor, regardless of how many
                                 ;     988 			//	   segments it may have been inactive in between.
                                 ;     989 
                                 ;     990 			// Apply accumulator correction if the time base has changed since previous segment
                                 ;     991 			if (st_pre.mot[MOTOR_1].accumulator_correction_flag == true) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",991
000007E8 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000007EE 59EE2C                  		MOVU.B 2CH[R14], R14
000007F1 611E                    		CMP #01H, R14
000007F3 21rr                    		BNE L199
000007F5                         L197:	; bb38
                                 ;     992 				st_pre.mot[MOTOR_1].accumulator_correction_flag = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",992
000007F5 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000007FB F9E42C00                		MOV.B #00H, 2CH[R14]
000007FF                         L198:	; bb38.split
                                 ;     993 				st_run.mot[MOTOR_1].substep_accumulator *= st_pre.mot[MOTOR_1].accumulator_correction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",993
000007FF FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000805 06A1111E04              		ITOF 10H[R1].L, R14
0000080A FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000810 FC8DFE0A                		FMUL 28H[R15].L, R14
00000814 FC97E2                  		FTOI R14, R2
00000817 A112                    		MOV.L R2, 10H[R1]
00000819                         L199:	; bb50
                                 ;     994 			}
                                 ;     995 
                                 ;     996 			// Detect direction change and if so:
                                 ;     997 			//	- Set the direction bit in hardware.
                                 ;     998 			//	- Compensate for direction change by flipping substep accumulator value about its midpoint.
                                 ;     999 
                                 ;    1000 			if (st_pre.mot[MOTOR_1].direction != st_pre.mot[MOTOR_1].prev_direction) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1000
00000819 FB12rrrrrrrr            		MOV.L #_st_pre, R1
0000081F 8E12                    		MOV.B 18H[R1], R2
00000821 451219                  		CMP 19H[R1].UB, R2
00000824 20rr                    		BEQ L205
00000826                         L200:	; bb51
                                 ;    1001 				st_pre.mot[MOTOR_1].prev_direction = st_pre.mot[MOTOR_1].direction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1001
00000826 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
0000082C C5EE1819                		MOV.B 18H[R14], 19H[R14]
00000830                         L201:	; bb51.split
                                 ;    1002 				st_run.mot[MOTOR_1].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_1].substep_accumulator);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1002
00000830 FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000836 A892                    		MOV.L 08H[R1], R2
00000838 06891204                		ADD 10H[R1].L, R2
0000083C 7E12                    		NEG R2
0000083E A112                    		MOV.L R2, 10H[R1]
00000840                         L202:	; bb51.split2
                                 ;    1003 				if (st_pre.mot[MOTOR_1].direction == DIRECTION_CW)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1003
00000840 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000846 8E11                    		MOV.B 18H[R1], R1
00000848 6101                    		CMP #00H, R1
0000084A 18                   S  		BNE L204
0000084B                         L203:	; bb58
0000084B FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;    1004 					MOTOR1_DIR = MOTOR_REVERSE; else
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1004
00000850 F0ED                    		BCLR #05H, [R14].B
00000852 08                   S  		BRA L205
00000853                         L204:	; bb62
00000853 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;    1005 				MOTOR1_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1005
00000858 F0E5                    		BSET #05H, [R14].B
0000085A                         L205:	; bb79
                                 ;    1006 //RXMOD				PORT_MOTOR_1_VPORT.OUT &= ~DIRECTION_BIT_bm; else
                                 ;    1007 //				PORT_MOTOR_1_VPORT.OUT |= DIRECTION_BIT_bm;
                                 ;    1008 			}
                                 ;    1009 			SET_ENCODER_STEP_SIGN(MOTOR_1, st_pre.mot[MOTOR_1].step_sign);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1009
0000085A FBE2rrrrrrrr            		MOV.L #_en, R14
00000860 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000866 C5FE1A04                		MOV.B 1AH[R15], 04H[R14]
0000086A                         L206:	; bb79.split
                                 ;    1010 
                                 ;    1011 			// Enable the stepper and start motor power management
                                 ;    1012 			if (st_cfg.mot[MOTOR_1].power_mode != MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1012
0000086A FB12rrrrrrrr            		MOV.L #_st_cfg, R1
00000870 B319                    		MOVU.B 0DH[R1], R1
00000872 6101                    		CMP #00H, R1
00000874 20rr                    		BEQ L210
00000876                         L207:	; bb82
                                 ;    1013 //RXMOD					PORT_MOTOR_1_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;             // energize motor
                                 ;    1014 				st_run.mot[MOTOR_1].power_state = MOTOR_POWER_TIMEOUT_START;// set power management state
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1014
00000876 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000087C 3C9403                  		MOV.B #03H, 14H[R1]
0000087F 2Err                 B  		BRA L210
00000881                         L208:	; bb90
                                 ;    1015 			}
                                 ;    1016 
                                 ;    1017 		} else {  // Motor has 0 steps; might need to energize motor for power mode processing
                                 ;    1018 			if (st_cfg.mot[MOTOR_1].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1018
00000881 FB12rrrrrrrr            		MOV.L #_st_cfg, R1
00000887 B319                    		MOVU.B 0DH[R1], R1
00000889 6121                    		CMP #02H, R1
0000088B 18                   S  		BNE L210
0000088C                         L209:	; bb91
                                 ;    1019 ////RXMOD					PORT_MOTOR_1_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;             // energize motor
                                 ;    1020 				st_run.mot[MOTOR_1].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1020
0000088C FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000892 3C9403                  		MOV.B #03H, 14H[R1]
00000895                         L210:	; bb103
                                 ;    1021 			}
                                 ;    1022 		}
                                 ;    1023 		// accumulate counted steps to the step position and zero out counted steps for the segment currently being loaded
                                 ;    1024 		ACCUMULATE_ENCODER(MOTOR_1);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1024
00000895 FB12rrrrrrrr            		MOV.L #_en, R1
0000089B A892                    		MOV.L 08H[R1], R2
0000089D 06491203                		ADD 06H[R1].W, R2
000008A1 A092                    		MOV.L R2, 08H[R1]
000008A3                         L211:	; bb103.split
000008A3 FB12rrrrrrrr            		MOV.L #_en, R1
000008A9 3D1300                  		MOV.W #0000H, 06H[R1]
000008AC                         L212:	; bb103.split3
                                 ;    1025 
                                 ;    1026 #if (MOTORS >= 2)	//**** MOTOR_2 LOAD ****
                                 ;    1027 		if ((st_run.mot[MOTOR_2].substep_increment = st_pre.mot[MOTOR_2].substep_increment) != 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1027
000008AC FB12rrrrrrrr            		MOV.L #_st_pre, R1
000008B2 AB11                    		MOV.L 30H[R1], R1
000008B4 FB22rrrrrrrr            		MOV.L #__$st_run, R2
000008BA A221                    		MOV.L R1, 20H[R2]
000008BC 6101                    		CMP #00H, R1
000008BE 3Arrrr               W  		BEQ L225
000008C1                         L213:	; bb110
                                 ;    1028 			if (st_pre.mot[MOTOR_2].accumulator_correction_flag == true) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1028
000008C1 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000008C7 59EE48                  		MOVU.B 48H[R14], R14
000008CA 611E                    		CMP #01H, R14
000008CC 21rr                    		BNE L216
000008CE                         L214:	; bb111
                                 ;    1029 				st_pre.mot[MOTOR_2].accumulator_correction_flag = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1029
000008CE FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000008D4 F9E44800                		MOV.B #00H, 48H[R14]
000008D8                         L215:	; bb111.split
                                 ;    1030 				st_run.mot[MOTOR_2].substep_accumulator *= st_pre.mot[MOTOR_2].accumulator_correction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1030
000008D8 FB12rrrrrrrr            		MOV.L #__$st_run, R1
000008DE 06A1111E09              		ITOF 24H[R1].L, R14
000008E3 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
000008E9 FC8DFE11                		FMUL 44H[R15].L, R14
000008ED FC97E2                  		FTOI R14, R2
000008F0 A21A                    		MOV.L R2, 24H[R1]
000008F2                         L216:	; bb123
                                 ;    1031 			}
                                 ;    1032 			if (st_pre.mot[MOTOR_2].direction != st_pre.mot[MOTOR_2].prev_direction) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1032
000008F2 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000008F8 CDEF34                  		MOV.B 34H[R14], R15
000008FB 45EF35                  		CMP 35H[R14].UB, R15
000008FE 20rr                    		BEQ L222
00000900                         L217:	; bb124
                                 ;    1033 				st_pre.mot[MOTOR_2].prev_direction = st_pre.mot[MOTOR_2].direction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1033
00000900 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000906 C5EE3435                		MOV.B 34H[R14], 35H[R14]
0000090A                         L218:	; bb124.split
                                 ;    1034 				st_run.mot[MOTOR_2].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_2].substep_accumulator);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1034
0000090A FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000910 A892                    		MOV.L 08H[R1], R2
00000912 06891209                		ADD 24H[R1].L, R2
00000916 7E12                    		NEG R2
00000918 A21A                    		MOV.L R2, 24H[R1]
0000091A                         L219:	; bb124.split4
                                 ;    1035 				if (st_pre.mot[MOTOR_2].direction == DIRECTION_CW)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1035
0000091A FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000920 CDEE34                  		MOV.B 34H[R14], R14
00000923 610E                    		CMP #00H, R14
00000925 18                   S  		BNE L221
00000926                         L220:	; bb131
00000926 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;    1036 					MOTOR2_DIR = MOTOR_REVERSE; else
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1036
0000092B F0EF                    		BCLR #07H, [R14].B
0000092D 08                   S  		BRA L222
0000092E                         L221:	; bb135
0000092E FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;    1037 				MOTOR2_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1037
00000933 F0E7                    		BSET #07H, [R14].B
00000935                         L222:	; bb152
                                 ;    1038 			}
                                 ;    1039 			SET_ENCODER_STEP_SIGN(MOTOR_2, st_pre.mot[MOTOR_2].step_sign);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1039
00000935 FBE2rrrrrrrr            		MOV.L #_en, R14
0000093B FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000941 C5FE360C                		MOV.B 36H[R15], 0CH[R14]
00000945                         L223:	; bb152.split
                                 ;    1040 			if (st_cfg.mot[MOTOR_2].power_mode != MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1040
00000945 FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
0000094B 59EE31                  		MOVU.B 31H[R14], R14
0000094E 610E                    		CMP #00H, R14
00000950 20rr                    		BEQ L227
00000952                         L224:	; bb155
                                 ;    1041 //RXMOD					PORT_MOTOR_2_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1042 				st_run.mot[MOTOR_2].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1042
00000952 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000958 F9E42803                		MOV.B #03H, 28H[R14]
0000095C 2Err                 B  		BRA L227
0000095E                         L225:	; bb163
                                 ;    1043 			}
                                 ;    1044 		} else {
                                 ;    1045 			if (st_cfg.mot[MOTOR_2].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1045
0000095E FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
00000964 59EE31                  		MOVU.B 31H[R14], R14
00000967 612E                    		CMP #02H, R14
00000969 21rr                    		BNE L227
0000096B                         L226:	; bb164
                                 ;    1046 //RXMOD					PORT_MOTOR_2_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1047 				st_run.mot[MOTOR_2].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1047
0000096B FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000971 F9E42803                		MOV.B #03H, 28H[R14]
00000975                         L227:	; bb176
                                 ;    1048 			}
                                 ;    1049 		}
                                 ;    1050 		ACCUMULATE_ENCODER(MOTOR_2);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1050
00000975 FB12rrrrrrrr            		MOV.L #_en, R1
0000097B A912                    		MOV.L 10H[R1], R2
0000097D 06491207                		ADD 0EH[R1].W, R2
00000981 A112                    		MOV.L R2, 10H[R1]
00000983                         L228:	; bb176.split
00000983 FB12rrrrrrrr            		MOV.L #_en, R1
00000989 3D1700                  		MOV.W #0000H, 0EH[R1]
0000098C                         L229:	; bb176.split5
                                 ;    1051 #endif
                                 ;    1052 #if (MOTORS >= 3)	//**** MOTOR_3 LOAD ****
                                 ;    1053 		if ((st_run.mot[MOTOR_3].substep_increment = st_pre.mot[MOTOR_3].substep_increment) != 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1053
0000098C FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000992 AC99                    		MOV.L 4CH[R1], R1
00000994 FB22rrrrrrrr            		MOV.L #__$st_run, R2
0000099A A329                    		MOV.L R1, 34H[R2]
0000099C 6101                    		CMP #00H, R1
0000099E 3Arrrr               W  		BEQ L242
000009A1                         L230:	; bb183
                                 ;    1054 			if (st_pre.mot[MOTOR_3].accumulator_correction_flag == true) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1054
000009A1 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000009A7 59EE64                  		MOVU.B 64H[R14], R14
000009AA 611E                    		CMP #01H, R14
000009AC 21rr                    		BNE L233
000009AE                         L231:	; bb184
                                 ;    1055 				st_pre.mot[MOTOR_3].accumulator_correction_flag = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1055
000009AE FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000009B4 F9E46400                		MOV.B #00H, 64H[R14]
000009B8                         L232:	; bb184.split
                                 ;    1056 				st_run.mot[MOTOR_3].substep_accumulator *= st_pre.mot[MOTOR_3].accumulator_correction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1056
000009B8 FB12rrrrrrrr            		MOV.L #__$st_run, R1
000009BE 06A1111E0E              		ITOF 38H[R1].L, R14
000009C3 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
000009C9 FC8DFE18                		FMUL 60H[R15].L, R14
000009CD FC97E2                  		FTOI R14, R2
000009D0 A392                    		MOV.L R2, 38H[R1]
000009D2                         L233:	; bb196
                                 ;    1057 			}
                                 ;    1058 			if (st_pre.mot[MOTOR_3].direction != st_pre.mot[MOTOR_3].prev_direction) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1058
000009D2 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000009D8 CDEF50                  		MOV.B 50H[R14], R15
000009DB 45EF51                  		CMP 51H[R14].UB, R15
000009DE 20rr                    		BEQ L239
000009E0                         L234:	; bb197
                                 ;    1059 				st_pre.mot[MOTOR_3].prev_direction = st_pre.mot[MOTOR_3].direction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1059
000009E0 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000009E6 C5EE5051                		MOV.B 50H[R14], 51H[R14]
000009EA                         L235:	; bb197.split
                                 ;    1060 				st_run.mot[MOTOR_3].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_3].substep_accumulator);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1060
000009EA FB12rrrrrrrr            		MOV.L #__$st_run, R1
000009F0 A892                    		MOV.L 08H[R1], R2
000009F2 0689120E                		ADD 38H[R1].L, R2
000009F6 7E12                    		NEG R2
000009F8 A392                    		MOV.L R2, 38H[R1]
000009FA                         L236:	; bb197.split6
                                 ;    1061 				if (st_pre.mot[MOTOR_3].direction == DIRECTION_CW)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1061
000009FA FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000A00 CDEE50                  		MOV.B 50H[R14], R14
00000A03 610E                    		CMP #00H, R14
00000A05 18                   S  		BNE L238
00000A06                         L237:	; bb204
00000A06 FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;    1062 					MOTOR3_DIR = MOTOR_REVERSE; else
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1062
00000A0B F0EB                    		BCLR #03H, [R14].B
00000A0D 08                   S  		BRA L239
00000A0E                         L238:	; bb208
00000A0E FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;    1063 				MOTOR3_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1063
00000A13 F0E3                    		BSET #03H, [R14].B
00000A15                         L239:	; bb225
                                 ;    1064 			}
                                 ;    1065 			SET_ENCODER_STEP_SIGN(MOTOR_3, st_pre.mot[MOTOR_3].step_sign);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1065
00000A15 FBE2rrrrrrrr            		MOV.L #_en, R14
00000A1B FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000A21 C5FE5214                		MOV.B 52H[R15], 14H[R14]
00000A25                         L240:	; bb225.split
                                 ;    1066 			if (st_cfg.mot[MOTOR_3].power_mode != MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1066
00000A25 FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
00000A2B 59EE55                  		MOVU.B 55H[R14], R14
00000A2E 610E                    		CMP #00H, R14
00000A30 20rr                    		BEQ L244
00000A32                         L241:	; bb228
                                 ;    1067 //RXMOD					PORT_MOTOR_3_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1068 				st_run.mot[MOTOR_3].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1068
00000A32 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000A38 F9E43C03                		MOV.B #03H, 3CH[R14]
00000A3C 2Err                 B  		BRA L244
00000A3E                         L242:	; bb236
                                 ;    1069 			}
                                 ;    1070 		} else {
                                 ;    1071 			if (st_cfg.mot[MOTOR_3].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1071
00000A3E FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
00000A44 59EE55                  		MOVU.B 55H[R14], R14
00000A47 612E                    		CMP #02H, R14
00000A49 21rr                    		BNE L244
00000A4B                         L243:	; bb237
                                 ;    1072 //RXMOD					PORT_MOTOR_3_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1073 				st_run.mot[MOTOR_3].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1073
00000A4B FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000A51 F9E43C03                		MOV.B #03H, 3CH[R14]
00000A55                         L244:	; bb249
                                 ;    1074 			}
                                 ;    1075 		}
                                 ;    1076 		ACCUMULATE_ENCODER(MOTOR_3);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1076
00000A55 FB12rrrrrrrr            		MOV.L #_en, R1
00000A5B A992                    		MOV.L 18H[R1], R2
00000A5D 0649120B                		ADD 16H[R1].W, R2
00000A61 A192                    		MOV.L R2, 18H[R1]
00000A63                         L245:	; bb249.split
00000A63 FB12rrrrrrrr            		MOV.L #_en, R1
00000A69 3D1B00                  		MOV.W #0000H, 16H[R1]
00000A6C                         L246:	; bb249.split7
                                 ;    1077 #endif
                                 ;    1078 #if (MOTORS >= 4)  //**** MOTOR_4 LOAD ****
                                 ;    1079 		if ((st_run.mot[MOTOR_4].substep_increment = st_pre.mot[MOTOR_4].substep_increment) != 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1079
00000A6C FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000A72 AE91                    		MOV.L 68H[R1], R1
00000A74 FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000A7A A4A1                    		MOV.L R1, 48H[R2]
00000A7C 6101                    		CMP #00H, R1
00000A7E 3Arrrr               W  		BEQ L259
00000A81                         L247:	; bb256
                                 ;    1080 			if (st_pre.mot[MOTOR_4].accumulator_correction_flag == true) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1080
00000A81 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000A87 59EE80                  		MOVU.B 80H[R14], R14
00000A8A 611E                    		CMP #01H, R14
00000A8C 21rr                    		BNE L250
00000A8E                         L248:	; bb257
                                 ;    1081 				st_pre.mot[MOTOR_4].accumulator_correction_flag = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1081
00000A8E FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000A94 F9E48000                		MOV.B #00H, 80H[R14]
00000A98                         L249:	; bb257.split
                                 ;    1082 				st_run.mot[MOTOR_4].substep_accumulator *= st_pre.mot[MOTOR_4].accumulator_correction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1082
00000A98 FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000A9E 06A1111E13              		ITOF 4CH[R1].L, R14
00000AA3 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000AA9 FC8DFE1F                		FMUL 7CH[R15].L, R14
00000AAD FC97E2                  		FTOI R14, R2
00000AB0 A49A                    		MOV.L R2, 4CH[R1]
00000AB2                         L250:	; bb269
                                 ;    1083 			}
                                 ;    1084 			if (st_pre.mot[MOTOR_4].direction != st_pre.mot[MOTOR_4].prev_direction) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1084
00000AB2 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000AB8 CDEF6C                  		MOV.B 6CH[R14], R15
00000ABB 45EF6D                  		CMP 6DH[R14].UB, R15
00000ABE 20rr                    		BEQ L256
00000AC0                         L251:	; bb270
                                 ;    1085 				st_pre.mot[MOTOR_4].prev_direction = st_pre.mot[MOTOR_4].direction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1085
00000AC0 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000AC6 C5EE6C6D                		MOV.B 6CH[R14], 6DH[R14]
00000ACA                         L252:	; bb270.split
                                 ;    1086 				st_run.mot[MOTOR_4].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_4].substep_accumulator);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1086
00000ACA FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000AD0 A892                    		MOV.L 08H[R1], R2
00000AD2 06891213                		ADD 4CH[R1].L, R2
00000AD6 7E12                    		NEG R2
00000AD8 A49A                    		MOV.L R2, 4CH[R1]
00000ADA                         L253:	; bb270.split8
                                 ;    1087 				if (st_pre.mot[MOTOR_4].direction == DIRECTION_CW)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1087
00000ADA FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000AE0 CDEE6C                  		MOV.B 6CH[R14], R14
00000AE3 610E                    		CMP #00H, R14
00000AE5 18                   S  		BNE L255
00000AE6                         L254:	; bb277
00000AE6 FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;    1088 					MOTOR4_DIR = MOTOR_REVERSE; else
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1088
00000AEB F0E9                    		BCLR #01H, [R14].B
00000AED 08                   S  		BRA L256
00000AEE                         L255:	; bb281
00000AEE FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;    1089 				MOTOR4_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1089
00000AF3 F0E1                    		BSET #01H, [R14].B
00000AF5                         L256:	; bb298
                                 ;    1090 			}
                                 ;    1091 			SET_ENCODER_STEP_SIGN(MOTOR_4, st_pre.mot[MOTOR_4].step_sign);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1091
00000AF5 FBE2rrrrrrrr            		MOV.L #_en, R14
00000AFB FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000B01 C5FE6E1C                		MOV.B 6EH[R15], 1CH[R14]
00000B05                         L257:	; bb298.split
                                 ;    1092 			if (st_cfg.mot[MOTOR_4].power_mode != MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1092
00000B05 FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
00000B0B 59EE79                  		MOVU.B 79H[R14], R14
00000B0E 610E                    		CMP #00H, R14
00000B10 20rr                    		BEQ L261
00000B12                         L258:	; bb301
                                 ;    1093 //RXMOD					PORT_MOTOR_4_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1094 				st_run.mot[MOTOR_4].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1094
00000B12 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000B18 F9E45003                		MOV.B #03H, 50H[R14]
00000B1C 2Err                 B  		BRA L261
00000B1E                         L259:	; bb309
                                 ;    1095 			}
                                 ;    1096 		} else {
                                 ;    1097 			if (st_cfg.mot[MOTOR_4].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1097
00000B1E FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
00000B24 59EE79                  		MOVU.B 79H[R14], R14
00000B27 612E                    		CMP #02H, R14
00000B29 21rr                    		BNE L261
00000B2B                         L260:	; bb310
                                 ;    1098 //RXMOD					PORT_MOTOR_4_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1099 				st_run.mot[MOTOR_4].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1099
00000B2B FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000B31 F9E45003                		MOV.B #03H, 50H[R14]
00000B35                         L261:	; bb322
                                 ;    1100 			}
                                 ;    1101 		}
                                 ;    1102 		ACCUMULATE_ENCODER(MOTOR_4);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1102
00000B35 FB12rrrrrrrr            		MOV.L #_en, R1
00000B3B AA12                    		MOV.L 20H[R1], R2
00000B3D 0649120F                		ADD 1EH[R1].W, R2
00000B41 A212                    		MOV.L R2, 20H[R1]
00000B43                         L262:	; bb322.split
00000B43 FB12rrrrrrrr            		MOV.L #_en, R1
00000B49 3D1F00                  		MOV.W #0000H, 1EH[R1]
00000B4C                         L263:	; bb322.split9
00000B4C 6601                    		MOV.L #00000000H, R1
                                 ;    1103 #endif
                                 ;    1104 #if (MOTORS >= 5)	//**** MOTOR_5 LOAD ****
                                 ;    1105 		if ((st_run.mot[MOTOR_5].substep_increment = st_pre.mot[MOTOR_5].substep_increment) != 0) {
                                 ;    1106 			if (st_pre.mot[MOTOR_5].accumulator_correction_flag == true) {
                                 ;    1107 				st_pre.mot[MOTOR_5].accumulator_correction_flag = false;
                                 ;    1108 				st_run.mot[MOTOR_5].substep_accumulator *= st_pre.mot[MOTOR_5].accumulator_correction;
                                 ;    1109 			}
                                 ;    1110 			if (st_pre.mot[MOTOR_5].direction != st_pre.mot[MOTOR_5].prev_direction) {
                                 ;    1111 				st_pre.mot[MOTOR_5].prev_direction = st_pre.mot[MOTOR_5].direction;
                                 ;    1112 				st_run.mot[MOTOR_5].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_5].substep_accumulator);
                                 ;    1113 				if (st_pre.mot[MOTOR_5].direction == DIRECTION_CW)
                                 ;    1114 				PORT_MOTOR_5_VPORT.OUT &= ~DIRECTION_BIT_bm; else
                                 ;    1115 				PORT_MOTOR_5_VPORT.OUT |= DIRECTION_BIT_bm;
                                 ;    1116 			}
                                 ;    1117 			PORT_MOTOR_5_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1118 			st_run.mot[MOTOR_5].power_state = MOTOR_POWER_TIMEOUT_START;
                                 ;    1119 			SET_ENCODER_STEP_SIGN(MOTOR_5, st_pre.mot[MOTOR_5].step_sign);
                                 ;    1120 		} else {
                                 ;    1121 			if (st_cfg.mot[MOTOR_5].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 ;    1122 				PORT_MOTOR_5_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1123 				st_run.mot[MOTOR_5].power_state = MOTOR_POWER_TIMEOUT_START;
                                 ;    1124 			}
                                 ;    1125 		}
                                 ;    1126 		ACCUMULATE_ENCODER(MOTOR_5);
                                 ;    1127 #endif
                                 ;    1128 #if (MOTORS >= 6)	//**** MOTOR_6 LOAD ****
                                 ;    1129 		if ((st_run.mot[MOTOR_6].substep_increment = st_pre.mot[MOTOR_6].substep_increment) != 0) {
                                 ;    1130 			if (st_pre.mot[MOTOR_6].accumulator_correction_flag == true) {
                                 ;    1131 				st_pre.mot[MOTOR_6].accumulator_correction_flag = false;
                                 ;    1132 				st_run.mot[MOTOR_6].substep_accumulator *= st_pre.mot[MOTOR_6].accumulator_correction;
                                 ;    1133 			}
                                 ;    1134 			if (st_pre.mot[MOTOR_6].direction != st_pre.mot[MOTOR_6].prev_direction) {
                                 ;    1135 				st_pre.mot[MOTOR_6].prev_direction = st_pre.mot[MOTOR_6].direction;
                                 ;    1136 				st_run.mot[MOTOR_6].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_6].substep_accumulator);
                                 ;    1137 				if (st_pre.mot[MOTOR_6].direction == DIRECTION_CW)
                                 ;    1138 				PORT_MOTOR_6_VPORT.OUT &= ~DIRECTION_BIT_bm; else
                                 ;    1139 				PORT_MOTOR_6_VPORT.OUT |= DIRECTION_BIT_bm;
                                 ;    1140 			}
                                 ;    1141 			PORT_MOTOR_6_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1142 			st_run.mot[MOTOR_6].power_state = MOTOR_POWER_TIMEOUT_START;
                                 ;    1143 			SET_ENCODER_STEP_SIGN(MOTOR_6, st_pre.mot[MOTOR_6].step_sign);
                                 ;    1144 		} else {
                                 ;    1145 			if (st_cfg.mot[MOTOR_6].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 ;    1146 				PORT_MOTOR_6_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1147 				st_run.mot[MOTOR_6].power_state = MOTOR_POWER_TIMEOUT_START;
                                 ;    1148 			}
                                 ;    1149 		}
                                 ;    1150 		ACCUMULATE_ENCODER(MOTOR_6);
                                 ;    1151 #endif
                                 ;    1152 		//**** do this last ****
                                 ;    1153 
                                 ;    1154 		R_TMR_Control(TIMER_DDA, TMR_START, 0);			// enable the DDA timer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1154
00000B4E EF12                    		MOV.L R1, R2
00000B50 EF13                    		MOV.L R1, R3
00000B52 05rrrrrr             A  		BSR _R_TMR_Control
00000B56 2Err                 B  		BRA L270
00000B58                         L264:	; bb329
                                 ;    1155 
                                 ;    1156 	// handle dwells
                                 ;    1157 	} else if (st_pre.move_type == MOVE_TYPE_DWELL) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1157
00000B58 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000B5E B211                    		MOVU.B 08H[R1], R1
00000B60 6121                    		CMP #02H, R1
00000B62 21rr                    		BNE L268
00000B64                         L265:	; bb330
                                 ;    1158 		isDwell = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1158
00000B64 FBE2rrrrrrrr            		MOV.L #_isDwell, R14
00000B6A F8E401                  		MOV.B #01H, [R14]
00000B6D                         L266:	; bb330.split
                                 ;    1159 		st_run.dda_ticks_downcount = st_pre.dda_ticks;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1159
00000B6D FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000B73 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000B79 E5FE0301                		MOV.L 0CH[R15], 04H[R14]
00000B7D                         L267:	; bb330.split10
00000B7D 6601                    		MOV.L #00000000H, R1
                                 ;    1160 //RXMOD			TIMER_DWELL.PER = st_pre.dda_period;			// load dwell timer period
                                 ;    1161 //		TIMER_DWELL.CTRLA = STEP_TIMER_ENABLE;			// enable the dwell timer
                                 ;    1162 //		R_CMT_Control(timerDwell,CMT_RX_CMD_RESTART,0);
                                 ;    1163 		st_command_dwell(DWELL_START);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1163
00000B7F 39rrrr               W  		BSR _st_command_dwell
00000B82 2Err                 B  		BRA L270
00000B84                         L268:	; bb333
                                 ;    1164 
                                 ;    1165 	// handle synchronous commands
                                 ;    1166 	} else if (st_pre.move_type == MOVE_TYPE_COMMAND) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1166
00000B84 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000B8A B211                    		MOVU.B 08H[R1], R1
00000B8C 6131                    		CMP #03H, R1
00000B8E 21rr                    		BNE L270
00000B90                         L269:	; bb334
                                 ;    1167 		mp_runtime_command(st_pre.bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1167
00000B90 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000B96 A819                    		MOV.L 04H[R1], R1
00000B98 05rrrrrr             A  		BSR _mp_runtime_command
00000B9C                         L270:	; bb354
                                 ;    1168 	}
                                 ;    1169 
                                 ;    1170 	// all other cases drop to here (e.g. Null moves after Mcodes skip to here)
                                 ;    1171 	st_pre.move_type = MOVE_TYPE_NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1171
00000B9C FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000BA2 3C1800                  		MOV.B #00H, 08H[R1]
00000BA5                         L271:	; bb354.split
                                 ;    1172 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;	// we are done with the prep buffer - flip the flag back
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1172
00000BA5 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000BAB 3C1201                  		MOV.B #01H, 02H[R1]
00000BAE                         L272:	; bb354.split11
                                 ;    1173 	st_request_exec_move();								// exec and prep next move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1173
00000BAE 39rrrr               W  		BSR _st_request_exec_move
00000BB1 6701                    		RTSD #04H
00000BB3                         L273:	; return
                                 ;    1174 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1174
00000BB3 6701                    		RTSD #04H
00000BB5                         _st_prep_line:
                                 		.STACK	_st_prep_line=36
                                 ;    1175 
                                 ;    1176 /***********************************************************************************
                                 ;    1177  * st_prep_line() - Prepare the next move for the loader
                                 ;    1178  *
                                 ;    1179  *	This function does the math on the next pulse segment and gets it ready for
                                 ;    1180  *	the loader. It deals with all the DDA optimizations and timer setups so that
                                 ;    1181  *	loading can be performed as rapidly as possible. It works in joint space
                                 ;    1182  *	(motors) and it works in steps, not length units. All args are provided as
                                 ;    1183  *	floats and converted to their appropriate integer types for the loader.
                                 ;    1184  *
                                 ;    1185  * Args:
                                 ;    1186  *	  - travel_steps[] are signed relative motion in steps for each motor. Steps are
                                 ;    1187  *		floats that typically have fractional values (fractional steps). The sign
                                 ;    1188  *		indicates direction. Motors that are not in the move should be 0 steps on input.
                                 ;    1189  *
                                 ;    1190  *	  - following_error[] is a vector of measured errors to the step count. Used for correction.
                                 ;    1191  *
                                 ;    1192  *	  - segment_time - how many minutes the segment should run. If timing is not
                                 ;    1193  *		100% accurate this will affect the move velocity, but not the distance traveled.
                                 ;    1194  *
                                 ;    1195  * NOTE:  Many of the expressions are sensitive to casting and execution order to avoid long-term
                                 ;    1196  *		  accuracy errors due to floating point round off. One earlier failed attempt was:
                                 ;    1197  *		    dda_ticks_X_substeps = (int32_t)((microseconds/1000000) * f_dda * dda_substeps);
                                 ;    1198  */
                                 ;    1199 
                                 ;    1200 stat_t st_prep_line(float travel_steps[], float following_error[], float segment_time)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1200
00000BB5 7EA6                    		PUSH.L R6
00000BB7 7100E4                  		ADD #0FFFFFFE4H, R0
00000BBA A181                    		MOV.L R1, 18H[R0]
00000BBC A10A                    		MOV.L R2, 14H[R0]
00000BBE A103                    		MOV.L R3, 10H[R0]
                                 ;    1201 {
                                 ;    1202 	// trap conditions that would prevent queueing the line
                                 ;    1203 	if (st_pre.buffer_state != PREP_BUFFER_OWNED_BY_EXEC) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1203
00000BC0 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000BC6 B091                    		MOVU.B 02H[R1], R1
00000BC8 6111                    		CMP #01H, R1
00000BCA 20rr                    		BEQ L281
00000BCC                         L275:	; bb6
00000BCC 754114                  		MOV.L #00000014H, R1
                                 ;    1204 		return (cm_hard_alarm(STAT_INTERNAL_ERROR));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1204
00000BCF 05rrrrrr             A  		BSR _cm_hard_alarm
00000BD3 8189                    		MOV.B R1, 07H[R0]
00000BD5 38rrrr               W  		BRA L323
00000BD8                         L276:	; bb11
00000BD8 75411E                  		MOV.L #0000001EH, R1
00000BDB 05rrrrrr             A  		BSR _cm_hard_alarm
00000BDF 8189                    		MOV.B R1, 07H[R0]
00000BE1 38rrrr               W  		BRA L323
00000BE4                         L277:	; bb16
00000BE4 75411F                  		MOV.L #0000001FH, R1
00000BE7 05rrrrrr             A  		BSR _cm_hard_alarm
00000BEB 8189                    		MOV.B R1, 07H[R0]
00000BED 38rrrr               W  		BRA L323
00000BF0                         L278:	; bb20
                                 ;    1205 	} else if (isinf(segment_time)) { return (cm_hard_alarm(STAT_PREP_LINE_MOVE_TIME_IS_INFINITE));	// never supposed to happen
                                 ;    1206 	} else if (isnan(segment_time)) { return (cm_hard_alarm(STAT_PREP_LINE_MOVE_TIME_IS_NAN));		// never supposed to happen
                                 ;    1207 	} else if (segment_time < EPSILON) { return (STAT_MINIMUM_TIME_MOVE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1207
00000BF0 A901                    		MOV.L 10H[R0], R1
00000BF2 FD7211BD378635          		FCMP #358637BDH, R1
00000BF9 26rr                    		BPZ L282
00000BFB                         L279:	; bb21
00000BFB 3C07CA                  		MOV.B #0CAH, 07H[R0]
00000BFE 38rrrr               W  		BRA L323
00000C01                         L280:	; bb27
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1206
00000C01 A901                    		MOV.L 10H[R0], R1
00000C03 05rrrrrr             A  		BSR __FDclass
00000C07 E301                    		MOV.L R1, [R0]
00000C09 6121                    		CMP #02H, R1
00000C0B 20rr                    		BEQ L277
00000C0D 2Err                 B  		BRA L278
00000C0F                         L281:	; bb45
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1205
00000C0F A901                    		MOV.L 10H[R0], R1
00000C11 05rrrrrr             A  		BSR __FDclass
00000C15 E301                    		MOV.L R1, [R0]
00000C17 6111                    		CMP #01H, R1
00000C19 20rr                    		BEQ L276
00000C1B 2Err                 B  		BRA L280
00000C1D                         L282:	; bb68
                                 ;    1208 	}
                                 ;    1209 	// setup segment parameters
                                 ;    1210 	// - dda_ticks is the integer number of DDA clock ticks needed to play out the segment
                                 ;    1211 	// - ticks_X_substeps is the maximum depth of the DDA accumulator (as a negative number)
                                 ;    1212 
                                 ;    1213 	st_pre.dda_period = _f_to_period(FREQUENCY_DDA);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1213
00000C1D FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000C23 F9E905C003              		MOV.W #03C0H, 0AH[R14]
00000C28                         L283:	; bb68.split
                                 ;    1214 	st_pre.dda_ticks = (int32_t)(segment_time * 60 * FREQUENCY_DDA);// NB: converts minutes to seconds
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1214
00000C28 A901                    		MOV.L 10H[R0], R1
00000C2A FD723100007042          		FMUL #42700000H, R1
00000C31 FD72310050C347          		FMUL #47C35000H, R1
00000C38 FC9711                  		FTOI R1, R1
00000C3B FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000C41 A0A9                    		MOV.L R1, 0CH[R2]
00000C43                         L284:	; bb68.split1
                                 ;    1215 	st_pre.dda_ticks_X_substeps = st_pre.dda_ticks * DDA_SUBSTEPS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1215
00000C43 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000C49 A89A                    		MOV.L 0CH[R1], R2
00000C4B 7DF2                    		BTST #1FH, R2
00000C4D 20rr                    		BEQ L286
00000C4F                         L285:	; bb68.split1
00000C4F FD812E                  		SHLR #01H, R2, R14
00000C52 6412                    		AND #01H, R2
00000C54 57E2                    		OR R14, R2
00000C56 FC472E                  		ITOF R2, R14
00000C59 FC8BEE                  		FADD R14, R14
00000C5C 08                   S  		BRA L287
00000C5D                         L286:	; bb68.split1
00000C5D FC472E                  		ITOF R2, R14
00000C60                         L287:	; bb68.split1
00000C60 FD723EA69B444B          		FMUL #4B449BA6H, R14
00000C67 FD721E0000004F          		FCMP #4F000000H, R14
00000C6E 29rr                    		BLT L289
00000C70                         L288:	; bb68.split1
00000C70 FD722E000080CF          		FADD #0CF800000H, R14
00000C77                         L289:	; bb68.split1
00000C77 FC97E2                  		FTOI R14, R2
00000C7A A112                    		MOV.L R2, 10H[R1]
00000C7C                         L290:	; bb68.split2
                                 ;    1216 
                                 ;    1217 	// setup motor parameters
                                 ;    1218 
                                 ;    1219 	float correction_steps;
                                 ;    1220 	for (uint8_t motor=0; motor<MOTORS; motor++) {	// I want to remind myself that this is motors, not axes
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1220
00000C7C 3C0E00                  		MOV.B #00H, 0EH[R0]
00000C7F 38rrrr               W  		BRA L319
00000C82                         L291:	; bb78
                                 ;    1221 
                                 ;    1222 		// Skip this motor if there are no new steps. Leave all other values intact.
                                 ;    1223 		if (fp_ZERO(travel_steps[motor])) { st_pre.mot[motor].substep_increment = 0; continue;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1223
00000C82 A981                    		MOV.L 18H[R0], R1
00000C84 B382                    		MOVU.B 0EH[R0], R2
00000C86 FE621E                  		MOV.L [R2,R1], R14
00000C89 7BFE                    		BCLR #1FH, R14
00000C8B FD721EBD378635          		FCMP #358637BDH, R14
00000C92 26rr                    		BPZ L293
00000C94                         L292:	; bb79
00000C94 B381                    		MOVU.B 0EH[R0], R1
00000C96 75111C                  		MUL #1CH, R1
00000C99 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000C9F 4B12                    		ADD R1, R2
00000CA1 3E2500                  		MOV.L #00000000H, 14H[R2]
00000CA4 38rrrr               W  		BRA L318
00000CA7                         L293:	; bb95
                                 ;    1224 
                                 ;    1225 		// Setup the direction, compensating for polarity.
                                 ;    1226 		// Set the step_sign which is used by the stepper ISR to accumulate step position
                                 ;    1227 
                                 ;    1228 		if (travel_steps[motor] >= 0) {					// positive direction
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1228
00000CA7 B381                    		MOVU.B 0EH[R0], R1
00000CA9 EF1E                    		MOV.L R1, R14
00000CAB 751E1C                  		MUL #1CH, R14
00000CAE FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000CB4 4BE2                    		ADD R14, R2
00000CB6 712214                  		ADD #14H, R2
00000CB9 EF1E                    		MOV.L R1, R14
00000CBB 751E24                  		MUL #24H, R14
00000CBE FB32rrrrrrrr            		MOV.L #_st_cfg, R3
00000CC4 4BE3                    		ADD R14, R3
00000CC6 A984                    		MOV.L 18H[R0], R4
00000CC8 FE614E                  		MOV.L [R1,R4], R14
00000CCB FD721E00000000          		FCMP #00000000H, R14
00000CD2 B331                    		MOVU.B 0CH[R3], R1
00000CD4 29rr                    		BLT L296
00000CD6                         L294:	; bb96
                                 ;    1229 			st_pre.mot[motor].direction = DIRECTION_CW ^ st_cfg.mot[motor].polarity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1229
00000CD6 8121                    		MOV.B R1, 04H[R2]
00000CD8                         L295:	; bb96.split
                                 ;    1230 			st_pre.mot[motor].step_sign = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1230
00000CD8 B381                    		MOVU.B 0EH[R0], R1
00000CDA 75111C                  		MUL #1CH, R1
00000CDD FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000CE3 4B12                    		ADD R1, R2
00000CE5 3CAA01                  		MOV.B #01H, 1AH[R2]
00000CE8 2Err                 B  		BRA L298
00000CEA                         L296:	; bb113
                                 ;    1231 		} else {
                                 ;    1232 			st_pre.mot[motor].direction = DIRECTION_CCW ^ st_cfg.mot[motor].polarity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1232
00000CEA FDE0F1                  		BNOT #00H, R1
00000CED 8121                    		MOV.B R1, 04H[R2]
00000CEF                         L297:	; bb113.split
                                 ;    1233 			st_pre.mot[motor].step_sign = -1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1233
00000CEF B381                    		MOVU.B 0EH[R0], R1
00000CF1 75111C                  		MUL #1CH, R1
00000CF4 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000CFA 4B12                    		ADD R1, R2
00000CFC 3CAAFF                  		MOV.B #0FFH, 1AH[R2]
00000CFF                         L298:	; bb139
                                 ;    1234 		}
                                 ;    1235 
                                 ;    1236 		// Detect segment time changes and setup the accumulator correction factor and flag.
                                 ;    1237 		// Putting this here computes the correct factor even if the motor was dormant for some
                                 ;    1238 		// number of previous moves. Correction is computed based on the last segment time actually used.
                                 ;    1239 
                                 ;    1240 		if (fabs(segment_time - st_pre.mot[motor].prev_segment_time) > 0.0000001) { // highly tuned FP != compare
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1240
00000CFF B381                    		MOVU.B 0EH[R0], R1
00000D01 75111C                  		MUL #1CH, R1
00000D04 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000D0A 4B1E                    		ADD R1, R14
00000D0C A901                    		MOV.L 10H[R0], R1
00000D0E FC81E109                		FSUB 24H[R14].L, R1
00000D12 7BF1                    		BCLR #1FH, R1
00000D14 FBE295BFD633            		MOV.L #33D6BF95H, R14
00000D1A FC871E                  		FCMP R1, R14
00000D1D 26rr                    		BPZ L303
00000D1F                         L299:	; bb141
                                 ;    1241 			if (fp_NOT_ZERO(st_pre.mot[motor].prev_segment_time)) {					// special case to skip first move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1241
00000D1F B381                    		MOVU.B 0EH[R0], R1
00000D21 75111C                  		MUL #1CH, R1
00000D24 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000D2A 4B12                    		ADD R1, R2
00000D2C AA29                    		MOV.L 24H[R2], R1
00000D2E 7BF1                    		BCLR #1FH, R1
00000D30 FBE2BD378635            		MOV.L #358637BDH, R14
00000D36 FC871E                  		FCMP R1, R14
00000D39 26rr                    		BPZ L302
00000D3B                         L300:	; bb142
                                 ;    1242 				st_pre.mot[motor].accumulator_correction_flag = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1242
00000D3B B381                    		MOVU.B 0EH[R0], R1
00000D3D 75111C                  		MUL #1CH, R1
00000D40 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000D46 4B1E                    		ADD R1, R14
00000D48 F9E42C01                		MOV.B #01H, 2CH[R14]
00000D4C                         L301:	; bb142.split
                                 ;    1243 				st_pre.mot[motor].accumulator_correction = segment_time / st_pre.mot[motor].prev_segment_time;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1243
00000D4C B381                    		MOVU.B 0EH[R0], R1
00000D4E 75111C                  		MUL #1CH, R1
00000D51 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000D57 4B12                    		ADD R1, R2
00000D59 A901                    		MOV.L 10H[R0], R1
00000D5B FC912109                		FDIV 24H[R2].L, R1
00000D5F A2A1                    		MOV.L R1, 28H[R2]
00000D61                         L302:	; bb167
                                 ;    1244 			}
                                 ;    1245 			st_pre.mot[motor].prev_segment_time = segment_time;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1245
00000D61 B381                    		MOVU.B 0EH[R0], R1
00000D63 75111C                  		MUL #1CH, R1
00000D66 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000D6C 4B12                    		ADD R1, R2
00000D6E E5020409                		MOV.L 10H[R0], 24H[R2]
00000D72                         L303:	; bb185
                                 ;    1246 		}
                                 ;    1247 
                                 ;    1248 #ifdef __STEP_CORRECTION
                                 ;    1249 		// 'Nudge' correction strategy. Inject a single, scaled correction value then hold off
                                 ;    1250 
                                 ;    1251 		if ((--st_pre.mot[motor].correction_holdoff < 0) &&
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1251
00000D72 B381                    		MOVU.B 0EH[R0], R1
00000D74 75111C                  		MUL #1CH, R1
00000D77 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000D7D 4B12                    		ADD R1, R2
00000D7F A9A9                    		MOV.L 1CH[R2], R1
00000D81 6011                    		SUB #01H, R1
00000D83 A1A9                    		MOV.L R1, 1CH[R2]
00000D85 6101                    		CMP #00H, R1
00000D87 29rr                    		BLT L311
00000D89 38rrrr               W  		BRA L313
00000D8C                         L304:	; bb186
                                 ;    1252 			(fabs(following_error[motor]) > STEP_CORRECTION_THRESHOLD)) {
                                 ;    1253 
                                 ;    1254 			st_pre.mot[motor].correction_holdoff = STEP_CORRECTION_HOLDOFF;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1254
00000D8C B381                    		MOVU.B 0EH[R0], R1
00000D8E 75111C                  		MUL #1CH, R1
00000D91 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000D97 4B12                    		ADD R1, R2
00000D99 3E2705                  		MOV.L #00000005H, 1CH[R2]
00000D9C                         L305:	; bb186.split
                                 ;    1255 			correction_steps = following_error[motor] * STEP_CORRECTION_FACTOR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1255
00000D9C A909                    		MOV.L 14H[R0], R1
00000D9E B382                    		MOVU.B 0EH[R0], R2
00000DA0 FE6211                  		MOV.L [R2,R1], R1
00000DA3 FD72310000803E          		FMUL #3E800000H, R1
00000DAA A081                    		MOV.L R1, 08H[R0]
00000DAC                         L306:	; bb186.split3
                                 ;    1256 
                                 ;    1257 			if (correction_steps > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1257
00000DAC A881                    		MOV.L 08H[R0], R1
00000DAE 660E                    		MOV.L #00000000H, R14
00000DB0 FC871E                  		FCMP R1, R14
00000DB3 A982                    		MOV.L 18H[R0], R2
00000DB5 B383                    		MOVU.B 0EH[R0], R3
00000DB7 FE6322                  		MOV.L [R3,R2], R2
00000DBA 26rr                    		BPZ L308
00000DBC                         L307:	; bb198
                                 ;    1258 				correction_steps = min3(correction_steps, fabs(travel_steps[motor]), STEP_CORRECTION_MAX);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1258
00000DBC 7BF2                    		BCLR #1FH, R2
00000DBE FB329A99193F            		MOV.L #3F19999AH, R3
00000DC4 05rrrrrr             A  		BSR _min3
00000DC8 A081                    		MOV.L R1, 08H[R0]
00000DCA 2Err                 B  		BRA L309
00000DCC                         L308:	; bb207
                                 ;    1259 			} else {
                                 ;    1260 				correction_steps = max3(correction_steps, -fabs(travel_steps[motor]), -STEP_CORRECTION_MAX);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1260
00000DCC 7BF2                    		BCLR #1FH, R2
00000DCE FDFFF2                  		BNOT #1FH, R2
00000DD1 FB329A9919BF            		MOV.L #0BF19999AH, R3
00000DD7 05rrrrrr             A  		BSR _max3
00000DDB A081                    		MOV.L R1, 08H[R0]
00000DDD                         L309:	; bb221
                                 ;    1261 			}
                                 ;    1262 			st_pre.mot[motor].corrected_steps += correction_steps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1262
00000DDD B381                    		MOVU.B 0EH[R0], R1
00000DDF 75111C                  		MUL #1CH, R1
00000DE2 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000DE8 4B12                    		ADD R1, R2
00000DEA AA21                    		MOV.L 20H[R2], R1
00000DEC FC890102                		FADD 08H[R0].L, R1
00000DF0 A221                    		MOV.L R1, 20H[R2]
00000DF2                         L310:	; bb221.split
                                 ;    1263 			travel_steps[motor] -= correction_steps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1263
00000DF2 A981                    		MOV.L 18H[R0], R1
00000DF4 B382                    		MOVU.B 0EH[R0], R2
00000DF6 FE621E                  		MOV.L [R2,R1], R14
00000DF9 FC810E02                		FSUB 08H[R0].L, R14
00000DFD FE221E                  		MOV.L R14, [R2,R1]
00000E00 2Err                 B  		BRA L315
00000E02                         L311:	; bb245
00000E02 A909                    		MOV.L 14H[R0], R1
00000E04 B382                    		MOVU.B 0EH[R0], R2
00000E06 FE621E                  		MOV.L [R2,R1], R14
00000E09 7BFE                    		BCLR #1FH, R14
00000E0B FBF200000040            		MOV.L #40000000H, R15
00000E11 FC87EF                  		FCMP R14, R15
00000E14 26rr                    		BPZ L313
00000E16                         L312:	; bb254
00000E16 F80601                  		MOV.L #00000001H, [R0]
00000E19 08                   S  		BRA L314
00000E1A                         L313:	; bb255
00000E1A F80600                  		MOV.L #00000000H, [R0]
00000E1D                         L314:	; bb256
00000E1D EC01                    		MOV.L [R0], R1
00000E1F 6101                    		CMP #00H, R1
00000E21 3Brrrr               W  		BNE L304
00000E24                         L315:	; bb261
                                 ;    1264 		}
                                 ;    1265 #endif
                                 ;    1266 		// Compute substeb increment. The accumulator must be *exactly* the incoming
                                 ;    1267 		// fractional steps times the substep multiplier or positional drift will occur.
                                 ;    1268 		// Rounding is performed to eliminate a negative bias in the uint32 conversion
                                 ;    1269 		// that results in long-term negative drift. (fabs/round order doesn't matter)
                                 ;    1270 
                                 ;    1271 		st_pre.mot[motor].substep_increment = round(fabs(travel_steps[motor] * DDA_SUBSTEPS));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1271
00000E24 B386                    		MOVU.B 0EH[R0], R6
00000E26 A981                    		MOV.L 18H[R0], R1
00000E28 FE6611                  		MOV.L [R6,R1], R1
00000E2B FD7231A69B444B          		FMUL #4B449BA6H, R1
00000E32 7BF1                    		BCLR #1FH, R1
00000E34 05rrrrrr             A  		BSR _round
00000E38 75161C                  		MUL #1CH, R6
00000E3B FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000E41 4B62                    		ADD R6, R2
00000E43 FD72110000004F          		FCMP #4F000000H, R1
00000E4A 29rr                    		BLT L317
00000E4C                         L316:	; bb261
00000E4C FD7221000080CF          		FADD #0CF800000H, R1
00000E53                         L317:	; bb261
00000E53 FC9711                  		FTOI R1, R1
00000E56 A129                    		MOV.L R1, 14H[R2]
00000E58                         L318:	; bb275
00000E58 B381                    		MOVU.B 0EH[R0], R1
00000E5A 6211                    		ADD #01H, R1
00000E5C 8381                    		MOV.B R1, 0EH[R0]
00000E5E                         L319:	; bb278
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1220
00000E5E B381                    		MOVU.B 0EH[R0], R1
00000E60 6141                    		CMP #04H, R1
00000E62 28rr                  * 		BLT L291
         38rrrr                  
00000E67                         L320:	; bb284
                                 ;    1272 	}
                                 ;    1273 	st_pre.move_type = MOVE_TYPE_ALINE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1273
00000E67 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E6D 3C1801                  		MOV.B #01H, 08H[R1]
00000E70                         L321:	; bb284.split
                                 ;    1274 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER;	// signal that prep buffer is ready
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1274
00000E70 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E76 3C1200                  		MOV.B #00H, 02H[R1]
00000E79                         L322:	; bb284.split4
                                 ;    1275 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1275
00000E79 3C0700                  		MOV.B #00H, 07H[R0]
00000E7C                         L323:	; bb286
00000E7C C500070F                		MOV.B 07H[R0], 0FH[R0]
                                 ;    1276 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1276
00000E80 B389                    		MOVU.B 0FH[R0], R1
00000E82 3F6608                  		RTSD #20H, R6-R6
00000E85                         _st_prep_null:
                                 		.STACK	_st_prep_null=4
                                 ;    1277 
                                 ;    1278 /*
                                 ;    1279  * st_prep_null() - Keeps the loader happy. Otherwise performs no action
                                 ;    1280  */
                                 ;    1281 
                                 ;    1282 void st_prep_null()
                                 ;    1283 {
                                 ;    1284 	st_pre.move_type = MOVE_TYPE_NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1284
00000E85 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E8B 3C1800                  		MOV.B #00H, 08H[R1]
00000E8E                         L325:	; entry.split
                                 ;    1285 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;	// signal that prep buffer is empty
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1285
00000E8E FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E94 3C1201                  		MOV.B #01H, 02H[R1]
00000E97 02                      		RTS
00000E98                         _st_prep_command:
                                 		.STACK	_st_prep_command=8
                                 ;    1286 }
                                 ;    1287 
                                 ;    1288 /*
                                 ;    1289  * st_prep_command() - Stage command to execution
                                 ;    1290  */
                                 ;    1291 
                                 ;    1292 void st_prep_command(void *bf)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1292
00000E98 6040                    		SUB #04H, R0
00000E9A E301                    		MOV.L R1, [R0]
                                 ;    1293 {
                                 ;    1294 	st_pre.move_type = MOVE_TYPE_COMMAND;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1294
00000E9C FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000EA2 3C1803                  		MOV.B #03H, 08H[R1]
00000EA5                         L327:	; entry.split
                                 ;    1295 	st_pre.bf = (mpBuf_t *)bf;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1295
00000EA5 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000EAB E40E01                  		MOV.L [R0], 04H[R14]
00000EAE                         L328:	; entry.split1
                                 ;    1296 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER;	// signal that prep buffer is ready
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1296
00000EAE FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000EB4 3C1200                  		MOV.B #00H, 02H[R1]
00000EB7 6701                    		RTSD #04H
00000EB9                         _st_prep_dwell:
                                 		.STACK	_st_prep_dwell=12
                                 ;    1297 }
                                 ;    1298 
                                 ;    1299 /*
                                 ;    1300  * st_prep_dwell() 	 - Add a dwell to the move buffer
                                 ;    1301  */
                                 ;    1302 
                                 ;    1303 void st_prep_dwell(float microseconds)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1303
00000EB9 6080                    		SUB #08H, R0
00000EBB A009                    		MOV.L R1, 04H[R0]
                                 ;    1304 {
                                 ;    1305 	float seconds;
                                 ;    1306 	seconds = (microseconds/1000);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1306
00000EBD FD724100007A44          		FDIV #447A0000H, R1
00000EC4 E301                    		MOV.L R1, [R0]
00000EC6                         L330:	; entry.split
                                 ;    1307 	st_pre.move_type = MOVE_TYPE_DWELL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1307
00000EC6 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000ECC 3C1802                  		MOV.B #02H, 08H[R1]
00000ECF                         L331:	; entry.split1
                                 ;    1308 	st_pre.dda_period = _f_to_period(FREQUENCY_DWELL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1308
00000ECF FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000ED5 F9E9058025              		MOV.W #2580H, 0AH[R14]
00000EDA                         L332:	; entry.split2
                                 ;    1309 	st_pre.dda_ticks = (uint32_t)((microseconds/1000) * FREQUENCY_DWELL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1309
00000EDA A809                    		MOV.L 04H[R0], R1
00000EDC FD724100007A44          		FDIV #447A0000H, R1
00000EE3 FD723100401C46          		FMUL #461C4000H, R1
00000EEA FD72110000004F          		FCMP #4F000000H, R1
00000EF1 29rr                    		BLT L334
00000EF3                         L333:	; entry.split2
00000EF3 FD7221000080CF          		FADD #0CF800000H, R1
00000EFA                         L334:	; entry.split2
00000EFA FC9711                  		FTOI R1, R1
00000EFD FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000F03 A0A9                    		MOV.L R1, 0CH[R2]
00000F05                         L335:	; entry.split3
                                 ;    1310 	if (configFlags[MODOMAQUINA] == MODO_OXICORTE){
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1310
00000F05 FBE2rrrrrrrr            		MOV.L #_configFlags, R14
00000F0B ECEE                    		MOV.L [R14], R14
00000F0D 611E                    		CMP #01H, R14
00000F0F 21rr                    		BNE L340
00000F11                         L336:	; bb9
                                 ;    1311 		if (seconds == configVarOx[OX_CONFIG_TEMPO_AQUECIMENTO])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1311
00000F11 FBE2rrrrrrrr            		MOV.L #_configVarOx, R14
00000F17 EC01                    		MOV.L [R0], R1
00000F19 FC85E103                		FCMP 0CH[R14].L, R1
00000F1D 21rr                    		BNE L338
00000F1F                         L337:	; bb10
                                 ;    1312 			tempoDwell = OX_CONFIG_TEMPO_AQUECIMENTO;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1312
00000F1F FBE2rrrrrrrr            		MOV.L #_tempoDwell, R14
00000F25 F8E603                  		MOV.L #00000003H, [R14]
00000F28 2Err                 B  		BRA L340
00000F2A                         L338:	; bb12
                                 ;    1313 		else if(seconds == configVarOx[OX_CONFIG_TEMPO_PERFURACAO])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1313
00000F2A FBE2rrrrrrrr            		MOV.L #_configVarOx, R14
00000F30 EC01                    		MOV.L [R0], R1
00000F32 FC85E104                		FCMP 10H[R14].L, R1
00000F36 18                   S  		BNE L340
00000F37                         L339:	; bb13
                                 ;    1314 			tempoDwell = OX_CONFIG_TEMPO_PERFURACAO;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1314
00000F37 FBE2rrrrrrrr            		MOV.L #_tempoDwell, R14
00000F3D F8E604                  		MOV.L #00000004H, [R14]
00000F40                         L340:	; bb29
                                 ;    1315 	}
                                 ;    1316 	// Seconds st_pre.dda_ticks = (uint32_t)((microseconds/1000000) * FREQUENCY_DWELL);
                                 ;    1317 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER;	// signal that prep buffer is ready
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1317
00000F40 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000F46 3C1200                  		MOV.B #00H, 02H[R1]
00000F49 6702                    		RTSD #08H
00000F4B                         __$_set_hw_microsteps:
                                 		.STACK	__$_set_hw_microsteps=8
                                 ;    1318 }
                                 ;    1319 
                                 ;    1320 /*
                                 ;    1321  * _set_hw_microsteps() - set microsteps in hardware
                                 ;    1322  *
                                 ;    1323  *	For now the microsteps is the same as the microsteps (1,2,4,8)
                                 ;    1324  *	This may change if microstep morphing is implemented.
                                 ;    1325  */
                                 ;    1326 
                                 ;    1327 static void _set_hw_microsteps(const uint8_t motor, const uint8_t microsteps)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1327
00000F4B 6040                    		SUB #04H, R0
00000F4D 8089                    		MOV.B R1, 03H[R0]
00000F4F 8082                    		MOV.B R2, 02H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1354
00000F51 6701                    		RTSD #04H
00000F53                         __$_get_motor:
                                 		.STACK	__$_get_motor=16
                                 ;    1328 {
                                 ;    1329 #ifdef __ARM
                                 ;    1330 	switch (motor) {
                                 ;    1331 		if (!motor_1.enable.isNull()) case (MOTOR_1): { motor_1.setMicrosteps(microsteps); break; }
                                 ;    1332 		if (!motor_2.enable.isNull()) case (MOTOR_2): { motor_2.setMicrosteps(microsteps); break; }
                                 ;    1333 		if (!motor_3.enable.isNull()) case (MOTOR_3): { motor_3.setMicrosteps(microsteps); break; }
                                 ;    1334 		if (!motor_4.enable.isNull()) case (MOTOR_4): { motor_4.setMicrosteps(microsteps); break; }
                                 ;    1335 		if (!motor_5.enable.isNull()) case (MOTOR_5): { motor_5.setMicrosteps(microsteps); break; }
                                 ;    1336 		if (!motor_6.enable.isNull()) case (MOTOR_6): { motor_6.setMicrosteps(microsteps); break; }
                                 ;    1337 	}
                                 ;    1338 #endif //__ARM
                                 ;    1339 #ifdef __AVR
                                 ;    1340 	if (microsteps == 8) {
                                 ;    1341 		hw.st_port[motor]->OUTSET = MICROSTEP_BIT_0_bm;
                                 ;    1342 		hw.st_port[motor]->OUTSET = MICROSTEP_BIT_1_bm;
                                 ;    1343 	} else if (microsteps == 4) {
                                 ;    1344 		hw.st_port[motor]->OUTCLR = MICROSTEP_BIT_0_bm;
                                 ;    1345 		hw.st_port[motor]->OUTSET = MICROSTEP_BIT_1_bm;
                                 ;    1346 	} else if (microsteps == 2) {
                                 ;    1347 		hw.st_port[motor]->OUTSET = MICROSTEP_BIT_0_bm;
                                 ;    1348 		hw.st_port[motor]->OUTCLR = MICROSTEP_BIT_1_bm;
                                 ;    1349 	} else if (microsteps == 1) {
                                 ;    1350 		hw.st_port[motor]->OUTCLR = MICROSTEP_BIT_0_bm;
                                 ;    1351 		hw.st_port[motor]->OUTCLR = MICROSTEP_BIT_1_bm;
                                 ;    1352 	}
                                 ;    1353 #endif // __AVR
                                 ;    1354 }
                                 ;    1355 
                                 ;    1356 
                                 ;    1357 /***********************************************************************************
                                 ;    1358  * CONFIGURATION AND INTERFACE FUNCTIONS
                                 ;    1359  * Functions to get and set variables from the cfgArray table
                                 ;    1360  ***********************************************************************************/
                                 ;    1361 
                                 ;    1362 /* HELPERS
                                 ;    1363  * _get_motor() - helper to return motor number as an index
                                 ;    1364  */
                                 ;    1365 
                                 ;    1366 static int8_t _get_motor(const nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1366
00000F53 60C0                    		SUB #0CH, R0
00000F55 A081                    		MOV.L R1, 08H[R0]
                                 ;    1367 {
                                 ;    1368     return ((nv->group[0] ? nv->group[0] : nv->token[0]) - 0x31);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1368
00000F57 B512                    		MOVU.B 14H[R1], R2
00000F59 6102                    		CMP #00H, R2
00000F5B 10                   S  		BEQ L344
00000F5C                         L343:	; bb
00000F5C B511                    		MOVU.B 14H[R1], R1
00000F5E E301                    		MOV.L R1, [R0]
00000F60 08                   S  		BRA L345
00000F61                         L344:	; bb16
00000F61 B611                    		MOVU.B 18H[R1], R1
00000F63 E301                    		MOV.L R1, [R0]
00000F65                         L345:	; bb23
00000F65 EC01                    		MOV.L [R0], R1
00000F67 7111CF                  		ADD #0FFFFFFCFH, R1
00000F6A 8189                    		MOV.B R1, 07H[R0]
                                 ;    1369 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1369
00000F6C 8989                    		MOV.B 07H[R0], R1
00000F6E 6703                    		RTSD #0CH
00000F70                         __$_set_motor_steps_per_unit:
                                 		.STACK	__$_set_motor_steps_per_unit=12
                                 ;    1370 
                                 ;    1371 /*
                                 ;    1372  * _set_motor_steps_per_unit() - what it says
                                 ;    1373  * This function will need to be rethought if microstep morphing is implemented
                                 ;    1374  */
                                 ;    1375 
                                 ;    1376 static void _set_motor_steps_per_unit(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1376
00000F70 6080                    		SUB #08H, R0
00000F72 A009                    		MOV.L R1, 04H[R0]
                                 ;    1377 {
                                 ;    1378 	uint8_t m = _get_motor(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1378
00000F74 39rrrr               W  		BSR __$_get_motor
00000F77 8089                    		MOV.B R1, 03H[R0]
00000F79                         L347:	; entry.split
                                 ;    1379 
                                 ;    1380 //	st_cfg.mot[m].units_per_step = (st_cfg.mot[m].travel_rev * st_cfg.mot[m].step_angle) / (360 * st_cfg.mot[m].microsteps); // unused
                                 ;    1381     st_cfg.mot[m].steps_per_unit = (360 * st_cfg.mot[m].microsteps) / (st_cfg.mot[m].travel_rev * st_cfg.mot[m].step_angle);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1381
00000F79 B089                    		MOVU.B 03H[R0], R1
00000F7B 751124                  		MUL #24H, R1
00000F7E FB22rrrrrrrr            		MOV.L #_st_cfg, R2
00000F84 4B12                    		ADD R1, R2
00000F86 A9A1                    		MOV.L 18H[R2], R1
00000F88 FC8D2105                		FMUL 14H[R2].L, R1
00000F8C A8A3                    		MOV.L 08H[R2], R3
00000F8E 76136801                		MUL #0168H, R3
00000F92 7DF3                    		BTST #1FH, R3
00000F94 20rr                    		BEQ L349
00000F96                         L348:	; entry.split
00000F96 FD813E                  		SHLR #01H, R3, R14
00000F99 6413                    		AND #01H, R3
00000F9B 57E3                    		OR R14, R3
00000F9D FC4733                  		ITOF R3, R3
00000FA0 FC8B33                  		FADD R3, R3
00000FA3 08                   S  		BRA L350
00000FA4                         L349:	; entry.split
00000FA4 FC4733                  		ITOF R3, R3
00000FA7                         L350:	; entry.split
00000FA7 FC9313                  		FDIV R1, R3
00000FAA A1AB                    		MOV.L R3, 1CH[R2]
00000FAC                         L351:	; entry.split1
                                 ;    1382 	st_reset();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1382
00000FAC 39rrrr               W  		BSR _st_reset
00000FAF 6702                    		RTSD #08H
00000FB1                         _st_set_sa:
                                 		.STACK	_st_set_sa=12
                                 ;    1383 }
                                 ;    1384 
                                 ;    1385 /* PER-MOTOR FUNCTIONS
                                 ;    1386  * st_set_sa() - set motor step angle
                                 ;    1387  * st_set_tr() - set travel per motor revolution
                                 ;    1388  * st_set_mi() - set motor microsteps
                                 ;    1389  * st_set_pm() - set motor power mode
                                 ;    1390  * st_set_pl() - set motor power level
                                 ;    1391  */
                                 ;    1392 
                                 ;    1393 stat_t st_set_sa(nvObj_t *nv)			// motor step angle
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1393
00000FB1 6080                    		SUB #08H, R0
00000FB3 A009                    		MOV.L R1, 04H[R0]
                                 ;    1394 {
                                 ;    1395 	set_flt(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1395
00000FB5 05rrrrrr             A  		BSR _set_flt
00000FB9                         L353:	; entry.split
                                 ;    1396 	_set_motor_steps_per_unit(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1396
00000FB9 A809                    		MOV.L 04H[R0], R1
00000FBB 39rrrr               W  		BSR __$_set_motor_steps_per_unit
00000FBE                         L354:	; entry.split1
                                 ;    1397 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1397
00000FBE 3C0300                  		MOV.B #00H, 03H[R0]
00000FC1 B089                    		MOVU.B 03H[R0], R1
00000FC3                         L355:	; entry.split2
                                 ;    1398 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1398
00000FC3 5B11                    		MOVU.B R1, R1
00000FC5 6702                    		RTSD #08H
00000FC7                         _st_set_tr:
                                 		.STACK	_st_set_tr=12
                                 ;    1399 
                                 ;    1400 stat_t st_set_tr(nvObj_t *nv)			// motor travel per revolution
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1400
00000FC7 6080                    		SUB #08H, R0
00000FC9 A009                    		MOV.L R1, 04H[R0]
                                 ;    1401 {
                                 ;    1402 	set_flu(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1402
00000FCB 05rrrrrr             A  		BSR _set_flu
00000FCF                         L357:	; entry.split
                                 ;    1403 	_set_motor_steps_per_unit(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1403
00000FCF A809                    		MOV.L 04H[R0], R1
00000FD1 39rrrr               W  		BSR __$_set_motor_steps_per_unit
00000FD4                         L358:	; entry.split1
                                 ;    1404 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1404
00000FD4 3C0300                  		MOV.B #00H, 03H[R0]
00000FD7 B089                    		MOVU.B 03H[R0], R1
00000FD9                         L359:	; entry.split2
                                 ;    1405 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1405
00000FD9 5B11                    		MOVU.B R1, R1
00000FDB 6702                    		RTSD #08H
00000FDD                         _st_set_mi:
                                 		.STACK	_st_set_mi=20
                                 ;    1406 
                                 ;    1407 stat_t st_set_mi(nvObj_t *nv)			// motor microsteps
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1407
00000FDD 7100F0                  		ADD #0FFFFFFF0H, R0
00000FE0 A089                    		MOV.L R1, 0CH[R0]
                                 ;    1408 {
                                 ;    1409     uint32_t mi = (uint32_t)nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1409
00000FE2 A911                    		MOV.L 10H[R1], R1
00000FE4 FD72110000004F          		FCMP #4F000000H, R1
00000FEB 29rr                    		BLT L362
00000FED                         L361:	; entry
00000FED FD7221000080CF          		FADD #0CF800000H, R1
00000FF4                         L362:	; entry
00000FF4 FC9711                  		FTOI R1, R1
00000FF7 A009                    		MOV.L R1, 04H[R0]
00000FF9                         L363:	; entry.split
                                 ;    1410 	if ((mi != 1) && (mi != 2) && (mi != 4) && (mi != 8)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1410
00000FF9 A809                    		MOV.L 04H[R0], R1
00000FFB 6111                    		CMP #01H, R1
00000FFD 21rr                    		BNE L365
00000FFF 2Err                 B  		BRA L367
00001001                         L364:	; bb7
                                 ;    1411 		nv_add_conditional_message((const char_t *)"*** WARNING *** Setting non-standard microstep value");
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1411
00001001 FB12rrrrrrrr            		MOV.L #_L10, R1
00001007 05rrrrrr             A  		BSR _nv_add_conditional_message
0000100B 2Err                 B  		BRA L377
0000100D                         L365:	; bb12
0000100D A809                    		MOV.L 04H[R0], R1
0000100F 6121                    		CMP #02H, R1
00001011 10                   S  		BEQ L367
00001012                         L366:	; bb16
00001012 F80601                  		MOV.L #00000001H, [R0]
00001015 08                   S  		BRA L368
00001016                         L367:	; bb17
00001016 F80600                  		MOV.L #00000000H, [R0]
00001019                         L368:	; bb18
00001019 EC01                    		MOV.L [R0], R1
0000101B 6101                    		CMP #00H, R1
0000101D 10                   S  		BEQ L371
0000101E                         L369:	; bb21
0000101E A809                    		MOV.L 04H[R0], R1
00001020 6141                    		CMP #04H, R1
00001022 10                   S  		BEQ L371
00001023                         L370:	; bb25
00001023 F80601                  		MOV.L #00000001H, [R0]
00001026 08                   S  		BRA L372
00001027                         L371:	; bb26
00001027 F80600                  		MOV.L #00000000H, [R0]
0000102A                         L372:	; bb27
0000102A EC01                    		MOV.L [R0], R1
0000102C 6101                    		CMP #00H, R1
0000102E 10                   S  		BEQ L375
0000102F                         L373:	; bb31
0000102F A809                    		MOV.L 04H[R0], R1
00001031 6181                    		CMP #08H, R1
00001033 10                   S  		BEQ L375
00001034                         L374:	; bb35
00001034 F80601                  		MOV.L #00000001H, [R0]
00001037 08                   S  		BRA L376
00001038                         L375:	; bb36
00001038 F80600                  		MOV.L #00000000H, [R0]
0000103B                         L376:	; bb37
0000103B EC01                    		MOV.L [R0], R1
0000103D 6101                    		CMP #00H, R1
0000103F 21rr                    		BNE L364
00001041                         L377:	; bb42
                                 ;    1412 	}
                                 ;    1413 	set_int(nv);						// set it anyway, even if it's unsupported. It could also be > 255
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1413
00001041 A889                    		MOV.L 0CH[R0], R1
00001043 05rrrrrr             A  		BSR _set_int
00001047                         L378:	; bb42.split
                                 ;    1414 	_set_motor_steps_per_unit(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1414
00001047 A889                    		MOV.L 0CH[R0], R1
00001049 39rrrr               W  		BSR __$_set_motor_steps_per_unit
0000104C                         L379:	; bb42.split1
                                 ;    1415 	_set_hw_microsteps(_get_motor(nv), (uint8_t)nv->value);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1415
0000104C A889                    		MOV.L 0CH[R0], R1
0000104E 39rrrr               W  		BSR __$_get_motor
00001051 A88A                    		MOV.L 0CH[R0], R2
00001053 A922                    		MOV.L 10H[R2], R2
00001055 FD72120000004F          		FCMP #4F000000H, R2
0000105C 29rr                    		BLT L381
0000105E                         L380:	; bb42.split1
0000105E FD7222000080CF          		FADD #0CF800000H, R2
00001065                         L381:	; bb42.split1
00001065 FC972E                  		FTOI R2, R14
00001068 5BE2                    		MOVU.B R14, R2
0000106A 5B11                    		MOVU.B R1, R1
0000106C 39rrrr               W  		BSR __$_set_hw_microsteps
0000106F                         L382:	; bb42.split2
                                 ;    1416 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1416
0000106F 3C0B00                  		MOV.B #00H, 0BH[R0]
00001072 B289                    		MOVU.B 0BH[R0], R1
00001074                         L383:	; bb42.split3
                                 ;    1417 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1417
00001074 5B11                    		MOVU.B R1, R1
00001076 6704                    		RTSD #10H
00001078                         _st_set_pm:
                                 		.STACK	_st_set_pm=12
                                 ;    1418 
                                 ;    1419 stat_t st_set_pm(nvObj_t *nv)			// motor power mode
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1419
00001078 6080                    		SUB #08H, R0
0000107A A009                    		MOV.L R1, 04H[R0]
                                 ;    1420 {
                                 ;    1421 	if ((uint8_t)nv->value >= MOTOR_POWER_MODE_MAX_VALUE)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1421
0000107C A911                    		MOV.L 10H[R1], R1
0000107E FD72110000004F          		FCMP #4F000000H, R1
00001085 29rr                    		BLT L386
00001087                         L385:	; entry
00001087 FD7221000080CF          		FADD #0CF800000H, R1
0000108E                         L386:	; entry
0000108E FC971E                  		FTOI R1, R14
00001091 5BEE                    		MOVU.B R14, R14
00001093 614E                    		CMP #04H, R14
00001095 29rr                    		BLT L388
00001097                         L387:	; bb2
                                 ;    1422         return (STAT_INPUT_VALUE_RANGE_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1422
00001097 3C026E                  		MOV.B #6EH, 02H[R0]
0000109A 08                   S  		BRA L390
0000109B                         L388:	; bb11
                                 ;    1423 	set_ui8(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1423
0000109B A809                    		MOV.L 04H[R0], R1
0000109D 05rrrrrr             A  		BSR _set_ui8
000010A1                         L389:	; bb11.split
                                 ;    1424 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1424
000010A1 3C0200                  		MOV.B #00H, 02H[R0]
000010A4                         L390:	; bb15
000010A4 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;    1425 	// NOTE: The motor power callback makes these settings take effect immediately
                                 ;    1426 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1426
000010A8 B089                    		MOVU.B 03H[R0], R1
000010AA 6702                    		RTSD #08H
000010AC                         _st_set_pl:
                                 		.STACK	_st_set_pl=12
                                 ;    1427 
                                 ;    1428 /*
                                 ;    1429  * st_set_pl() - set motor power level
                                 ;    1430  *
                                 ;    1431  *	Input value may vary from 0.000 to 1.000 The setting is scaled to allowable PWM range.
                                 ;    1432  *	This function sets both the scaled and dynamic power levels, and applies the
                                 ;    1433  *	scaled value to the vref.
                                 ;    1434  */
                                 ;    1435 stat_t st_set_pl(nvObj_t *nv)	// motor power level
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1435
000010AC 6080                    		SUB #08H, R0
000010AE A009                    		MOV.L R1, 04H[R0]
                                 ;    1436 {
                                 ;    1437 #ifdef __ARM
                                 ;    1438 	if (nv->value < (float)0.0) nv->value = 0.0;
                                 ;    1439 	if (nv->value > (float)1.0) {
                                 ;    1440 		if (nv->value > (float)100) nv->value = 1;
                                 ;    1441  		nv->value /= 100;		// accommodate old 0-100 inputs
                                 ;    1442 	}
                                 ;    1443 	set_flt(nv);	// set power_setting value in the motor config struct (st)
                                 ;    1444 
                                 ;    1445 	uint8_t m = _get_motor(nv);
                                 ;    1446 	st_cfg.mot[m].power_level_scaled = (nv->value * POWER_LEVEL_SCALE_FACTOR);
                                 ;    1447 	st_run.mot[m].power_level_dynamic = (st_cfg.mot[m].power_level_scaled);
                                 ;    1448 	_set_motor_power_level(m, st_cfg.mot[m].power_level_scaled);
                                 ;    1449 #endif
                                 ;    1450 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1450
000010B0 3C0300                  		MOV.B #00H, 03H[R0]
000010B3 B089                    		MOVU.B 03H[R0], R1
000010B5                         L392:	; entry.split
                                 ;    1451 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1451
000010B5 5B11                    		MOVU.B R1, R1
000010B7 6702                    		RTSD #08H
000010B9                         _st_get_pwr:
                                 		.STACK	_st_get_pwr=16
                                 ;    1452 
                                 ;    1453 /*
                                 ;    1454  * st_get_pwr()	- get motor enable power state
                                 ;    1455  */
                                 ;    1456 stat_t st_get_pwr(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1456
000010B9 7EA6                    		PUSH.L R6
000010BB 6080                    		SUB #08H, R0
000010BD EF16                    		MOV.L R1, R6
000010BF A00E                    		MOV.L R6, 04H[R0]
                                 ;    1457 {
                                 ;    1458 	nv->value = _motor_is_enabled(_get_motor(nv));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1458
000010C1 39rrrr               W  		BSR __$_get_motor
000010C4 5B11                    		MOVU.B R1, R1
000010C6 39rrrr               W  		BSR __$_motor_is_enabled
000010C9 FC4711                  		ITOF R1, R1
000010CC A161                    		MOV.L R1, 10H[R6]
000010CE                         L394:	; entry.split
                                 ;    1459 	nv->valuetype = TYPE_INTEGER;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1459
000010CE A809                    		MOV.L 04H[R0], R1
000010D0 3C1B02                  		MOV.B #02H, 0BH[R1]
000010D3                         L395:	; entry.split1
                                 ;    1460 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1460
000010D3 3C0300                  		MOV.B #00H, 03H[R0]
000010D6 B089                    		MOVU.B 03H[R0], R1
000010D8                         L396:	; entry.split2
                                 ;    1461 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1461
000010D8 5B11                    		MOVU.B R1, R1
000010DA 3F6603                  		RTSD #0CH, R6-R6
000010DD                         _st_set_mt:
                                 		.STACK	_st_set_mt=12
                                 ;    1462 
                                 ;    1463 /* GLOBAL FUNCTIONS (SYSTEM LEVEL)
                                 ;    1464  *
                                 ;    1465  * st_set_mt() - set motor timeout in seconds
                                 ;    1466  * st_set_md() - disable motor power
                                 ;    1467  * st_set_me() - enable motor power
                                 ;    1468  *
                                 ;    1469  * Calling me or md with NULL will enable or disable all motors
                                 ;    1470  * Setting a value of 0 will enable or disable all motors
                                 ;    1471  * Setting a value from 1 to MOTORS will enable or disable that motor only
                                 ;    1472  */
                                 ;    1473 
                                 ;    1474 stat_t st_set_mt(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1474
000010DD 6080                    		SUB #08H, R0
000010DF A009                    		MOV.L R1, 04H[R0]
                                 ;    1475 {
                                 ;    1476 	st_cfg.motor_power_timeout = fminf(MOTOR_TIMEOUT_SECONDS_MAX, fmaxf(nv->value, MOTOR_TIMEOUT_SECONDS_MIN));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1476
000010E1 A911                    		MOV.L 10H[R1], R1
000010E3 FB22CDCCCC3D            		MOV.L #3DCCCCCDH, R2
000010E9 05rrrrrr             A  		BSR _fmaxf
000010ED EF12                    		MOV.L R1, R2
000010EF FB126E12834A            		MOV.L #4A83126EH, R1
000010F5 05rrrrrr             A  		BSR _fminf
000010F9 FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
000010FF E3E1                    		MOV.L R1, [R14]
00001101                         L398:	; entry.split
                                 ;    1477 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1477
00001101 3C0300                  		MOV.B #00H, 03H[R0]
00001104 B089                    		MOVU.B 03H[R0], R1
00001106                         L399:	; entry.split1
                                 ;    1478 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1478
00001106 5B11                    		MOVU.B R1, R1
00001108 6702                    		RTSD #08H
0000110A                         _st_set_md:
                                 		.STACK	_st_set_md=16
                                 ;    1479 
                                 ;    1480 stat_t st_set_md(nvObj_t *nv)	// Make sure this function is not part of initialization --> f00
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1480
0000110A 60C0                    		SUB #0CH, R0
0000110C A081                    		MOV.L R1, 08H[R0]
                                 ;    1481 {
                                 ;    1482 	if (((uint8_t)nv->value == 0) || (nv->valuetype == TYPE_NULL)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1482
0000110E A911                    		MOV.L 10H[R1], R1
00001110 FD72110000004F          		FCMP #4F000000H, R1
00001117 29rr                    		BLT L402
00001119                         L401:	; entry
00001119 FD7221000080CF          		FADD #0CF800000H, R1
00001120                         L402:	; entry
00001120 FC971E                  		FTOI R1, R14
00001123 5BEE                    		MOVU.B R14, R14
00001125 610E                    		CMP #00H, R14
00001127 20rr                    		BEQ L411
00001129 2Err                 B  		BRA L410
0000112B                         L403:	; bb3
                                 ;    1483 		st_deenergize_motors();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1483
0000112B 39rrrr               W  		BSR _st_deenergize_motors
0000112E 2Err                 B  		BRA L414
00001130                         L404:	; bb4
                                 ;    1484 	} else {
                                 ;    1485         uint8_t motor = (uint8_t)nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1485
00001130 A881                    		MOV.L 08H[R0], R1
00001132 A911                    		MOV.L 10H[R1], R1
00001134 FD72110000004F          		FCMP #4F000000H, R1
0000113B 29rr                    		BLT L406
0000113D                         L405:	; bb4
0000113D FD7221000080CF          		FADD #0CF800000H, R1
00001144                         L406:	; bb4
00001144 FC9711                  		FTOI R1, R1
00001147 8181                    		MOV.B R1, 06H[R0]
00001149                         L407:	; bb4.split
                                 ;    1486         if (motor > MOTORS) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1486
00001149 B181                    		MOVU.B 06H[R0], R1
0000114B 6151                    		CMP #05H, R1
0000114D 29rr                    		BLT L409
0000114F                         L408:	; bb10
                                 ;    1487             return (STAT_INPUT_VALUE_RANGE_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1487
0000114F 3C056E                  		MOV.B #6EH, 05H[R0]
00001152 2Err                 B  		BRA L415
00001154                         L409:	; bb16
                                 ;    1488         }
                                 ;    1489         _deenergize_motor(motor-1);     // adjust so that motor 1 is actually 0 (etc)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1489
00001154 B181                    		MOVU.B 06H[R0], R1
00001156 6011                    		SUB #01H, R1
00001158 5B11                    		MOVU.B R1, R1
0000115A 39rrrr               W  		BSR __$_deenergize_motor
0000115D 2Err                 B  		BRA L414
0000115F                         L410:	; bb28
0000115F A881                    		MOV.L 08H[R0], R1
00001161 8A99                    		MOV.B 0BH[R1], R1
00001163 6101                    		CMP #00H, R1
00001165 18                   S  		BNE L412
00001166                         L411:	; bb35
00001166 F80601                  		MOV.L #00000001H, [R0]
00001169 08                   S  		BRA L413
0000116A                         L412:	; bb36
0000116A F80600                  		MOV.L #00000000H, [R0]
0000116D                         L413:	; bb37
0000116D EC01                    		MOV.L [R0], R1
0000116F 6101                    		CMP #00H, R1
00001171 21rr                    		BNE L403
00001173 2Err                 B  		BRA L404
00001175                         L414:	; bb42
                                 ;    1490 	}
                                 ;    1491 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1491
00001175 3C0500                  		MOV.B #00H, 05H[R0]
00001178                         L415:	; bb44
00001178 C5000507                		MOV.B 05H[R0], 07H[R0]
                                 ;    1492 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1492
0000117C B189                    		MOVU.B 07H[R0], R1
0000117E 6703                    		RTSD #0CH
00001180                         _st_set_me:
                                 		.STACK	_st_set_me=16
                                 ;    1493 
                                 ;    1494 stat_t st_set_me(nvObj_t *nv)	// Make sure this function is not part of initialization --> f00
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1494
00001180 60C0                    		SUB #0CH, R0
00001182 A081                    		MOV.L R1, 08H[R0]
                                 ;    1495 {
                                 ;    1496 	if (((uint8_t)nv->value == 0) || (nv->valuetype == TYPE_NULL)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1496
00001184 A911                    		MOV.L 10H[R1], R1
00001186 FD72110000004F          		FCMP #4F000000H, R1
0000118D 29rr                    		BLT L418
0000118F                         L417:	; entry
0000118F FD7221000080CF          		FADD #0CF800000H, R1
00001196                         L418:	; entry
00001196 FC971E                  		FTOI R1, R14
00001199 5BEE                    		MOVU.B R14, R14
0000119B 610E                    		CMP #00H, R14
0000119D 20rr                    		BEQ L427
0000119F 2Err                 B  		BRA L426
000011A1                         L419:	; bb3
                                 ;    1497 		st_energize_motors();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1497
000011A1 39rrrr               W  		BSR _st_energize_motors
000011A4 2Err                 B  		BRA L430
000011A6                         L420:	; bb4
                                 ;    1498 	} else {
                                 ;    1499         uint8_t motor = (uint8_t)nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1499
000011A6 A881                    		MOV.L 08H[R0], R1
000011A8 A911                    		MOV.L 10H[R1], R1
000011AA FD72110000004F          		FCMP #4F000000H, R1
000011B1 29rr                    		BLT L422
000011B3                         L421:	; bb4
000011B3 FD7221000080CF          		FADD #0CF800000H, R1
000011BA                         L422:	; bb4
000011BA FC9711                  		FTOI R1, R1
000011BD 8181                    		MOV.B R1, 06H[R0]
000011BF                         L423:	; bb4.split
                                 ;    1500         if (motor > MOTORS) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1500
000011BF B181                    		MOVU.B 06H[R0], R1
000011C1 6151                    		CMP #05H, R1
000011C3 29rr                    		BLT L425
000011C5                         L424:	; bb10
                                 ;    1501             return (STAT_INPUT_VALUE_RANGE_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1501
000011C5 3C056E                  		MOV.B #6EH, 05H[R0]
000011C8 2Err                 B  		BRA L431
000011CA                         L425:	; bb16
                                 ;    1502         }
                                 ;    1503 		_energize_motor(motor-1);     // adjust so that motor 1 is actually 0 (etc)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1503
000011CA B181                    		MOVU.B 06H[R0], R1
000011CC 6011                    		SUB #01H, R1
000011CE 5B11                    		MOVU.B R1, R1
000011D0 39rrrr               W  		BSR __$_energize_motor
000011D3 2Err                 B  		BRA L430
000011D5                         L426:	; bb28
000011D5 A881                    		MOV.L 08H[R0], R1
000011D7 8A99                    		MOV.B 0BH[R1], R1
000011D9 6101                    		CMP #00H, R1
000011DB 18                   S  		BNE L428
000011DC                         L427:	; bb35
000011DC F80601                  		MOV.L #00000001H, [R0]
000011DF 08                   S  		BRA L429
000011E0                         L428:	; bb36
000011E0 F80600                  		MOV.L #00000000H, [R0]
000011E3                         L429:	; bb37
000011E3 EC01                    		MOV.L [R0], R1
000011E5 6101                    		CMP #00H, R1
000011E7 21rr                    		BNE L419
000011E9 2Err                 B  		BRA L420
000011EB                         L430:	; bb42
                                 ;    1504 	}
                                 ;    1505 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1505
000011EB 3C0500                  		MOV.B #00H, 05H[R0]
000011EE                         L431:	; bb44
000011EE C5000507                		MOV.B 05H[R0], 07H[R0]
                                 ;    1506 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1506
000011F2 B189                    		MOVU.B 07H[R0], R1
000011F4 6703                    		RTSD #0CH
000011F6                         _st_command_dwell:
                                 		.STACK	_st_command_dwell=8
                                 ;    1507 
                                 ;    1508 void st_command_dwell(st_dwell_command com)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1508
000011F6 6040                    		SUB #04H, R0
000011F8 E301                    		MOV.L R1, [R0]
                                 ;    1509 {
                                 ;    1510 	switch(com)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1510
000011FA 6141                    		CMP #04H, R1
000011FC 20rr                    		BEQ L441
000011FE                         L433:	; entry
000011FE 6111                    		CMP #01H, R1
00001200 20rr                    		BEQ L438
00001202                         L434:	; entry
00001202 6121                    		CMP #02H, R1
00001204 20rr                    		BEQ L439
00001206                         L435:	; entry
00001206 6131                    		CMP #03H, R1
00001208 20rr                    		BEQ L440
0000120A                         L436:	; entry
0000120A 6101                    		CMP #00H, R1
0000120C 21rr                    		BNE L442
0000120E                         L437:	; bb
                                 ;    1511 	{
                                 ;    1512 		case DWELL_START: 	R_CMT_Control(timerDwell,CMT_RX_CMD_RESTART,0);	break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1512
0000120E FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
00001214 ECE1                    		MOV.L [R14], R1
00001216 6603                    		MOV.L #00000000H, R3
00001218 6622                    		MOV.L #00000002H, R2
0000121A 05rrrrrr             A  		BSR _R_CMT_Control
0000121E 6701                    		RTSD #04H
00001220                         L438:	; bb4
                                 ;    1513 		case DWELL_PAUSE: 	R_CMT_Control(timerDwell,CMT_RX_CMD_PAUSE,0);	break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1513
00001220 FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
00001226 ECE1                    		MOV.L [R14], R1
00001228 6603                    		MOV.L #00000000H, R3
0000122A 6612                    		MOV.L #00000001H, R2
0000122C 05rrrrrr             A  		BSR _R_CMT_Control
00001230 6701                    		RTSD #04H
00001232                         L439:	; bb7
                                 ;    1514 		case DWELL_RESTART: R_CMT_Control(timerDwell,CMT_RX_CMD_RESUME,0);  break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1514
00001232 FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
00001238 ECE1                    		MOV.L [R14], R1
0000123A 6603                    		MOV.L #00000000H, R3
0000123C 6632                    		MOV.L #00000003H, R2
0000123E 05rrrrrr             A  		BSR _R_CMT_Control
00001242 6701                    		RTSD #04H
00001244                         L440:	; bb10
                                 ;    1515 		case DWELL_EXIT: 	st_run.dda_ticks_downcount = 1; 				break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1515
00001244 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000124A 3E1101                  		MOV.L #00000001H, 04H[R1]
0000124D 6701                    		RTSD #04H
0000124F                         L441:	; bb11
                                 ;    1516 		case DWELL_ZERO: 	st_run.dda_ticks_downcount = 0; 				break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1516
0000124F FB12rrrrrrrr            		MOV.L #__$st_run, R1
00001255 3E1100                  		MOV.L #00000000H, 04H[R1]
00001258 6701                    		RTSD #04H
0000125A                         L442:	; return
                                 ;    1517 		default: break;
                                 ;    1518 	}
                                 ;    1519 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1519
0000125A 6701                    		RTSD #04H
0000125C                         _st_get_dwell_elapsed_time:
                                 		.STACK	_st_get_dwell_elapsed_time=8
                                 ;    1520 
                                 ;    1521 float st_get_dwell_elapsed_time(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1521
0000125C 6040                    		SUB #04H, R0
                                 ;    1522 {
                                 ;    1523 	return st_run.dda_ticks_downcount/FREQUENCY_DWELL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1523
0000125E FB12rrrrrrrr            		MOV.L #__$st_run, R1
00001264 A819                    		MOV.L 04H[R1], R1
00001266 7DF1                    		BTST #1FH, R1
00001268 20rr                    		BEQ L445
0000126A                         L444:	; entry
0000126A FD811E                  		SHLR #01H, R1, R14
0000126D 6411                    		AND #01H, R1
0000126F 57E1                    		OR R14, R1
00001271 FC4711                  		ITOF R1, R1
00001274 FC8B11                  		FADD R1, R1
00001277 08                   S  		BRA L446
00001278                         L445:	; entry
00001278 FC4711                  		ITOF R1, R1
0000127B                         L446:	; entry
0000127B FD724100401C46          		FDIV #461C4000H, R1
00001282 E301                    		MOV.L R1, [R0]
00001284                         L447:	; entry.split
                                 ;    1524 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1524
00001284 6701                    		RTSD #04H
00001286                         _st_set_dwell_elapsed_time:
                                 		.STACK	_st_set_dwell_elapsed_time=12
                                 ;    1525 
                                 ;    1526 void st_set_dwell_elapsed_time(float time)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1526
00001286 6080                    		SUB #08H, R0
00001288 A009                    		MOV.L R1, 04H[R0]
                                 ;    1527 {
                                 ;    1528 	float timeElapsed;
                                 ;    1529 	timeElapsed = (int32_t)st_run.dda_ticks_downcount + (int32_t)time*FREQUENCY_DWELL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1529
0000128A FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00001290 06A111E201              		ITOF 04H[R14].L, R2
00001295 FC971E                  		FTOI R1, R14
00001298 FC47EE                  		ITOF R14, R14
0000129B FD723E00401C46          		FMUL #461C4000H, R14
000012A2 FC8BE2                  		FADD R14, R2
000012A5 E302                    		MOV.L R2, [R0]
000012A7                         L449:	; entry.split
000012A7 660E                    		MOV.L #00000000H, R14
                                 ;    1530 	if(timeElapsed <= 0){
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1530
000012A9 FC840E                  		FCMP [R0].L, R14
000012AC 29rr                    		BLT L451
000012AE                         L450:	; bb9
                                 ;    1531 		st_run.dda_ticks_downcount = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1531
000012AE FB12rrrrrrrr            		MOV.L #__$st_run, R1
000012B4 3E1101                  		MOV.L #00000001H, 04H[R1]
000012B7 6702                    		RTSD #08H
000012B9                         L451:	; bb10
                                 ;    1532 	}
                                 ;    1533 	else
                                 ;    1534 	{
                                 ;    1535 		st_run.dda_ticks_downcount = timeElapsed;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1535
000012B9 EC01                    		MOV.L [R0], R1
000012BB FD72110000004F          		FCMP #4F000000H, R1
000012C2 29rr                    		BLT L453
000012C4                         L452:	; bb10
000012C4 FD7221000080CF          		FADD #0CF800000H, R1
000012CB                         L453:	; bb10
000012CB FC9711                  		FTOI R1, R1
000012CE FB22rrrrrrrr            		MOV.L #__$st_run, R2
000012D4 A029                    		MOV.L R1, 04H[R2]
000012D6 6702                    		RTSD #08H
000012D8                         _st_print_mt:
                                 		.STACK	_st_print_mt=8
                                 ;    1536 	}
                                 ;    1537 }
                                 ;    1538 
                                 ;    1539 
                                 ;    1540 
                                 ;    1541 /***********************************************************************************
                                 ;    1542  * TEXT MODE SUPPORT
                                 ;    1543  * Functions to print variables from the cfgArray table
                                 ;    1544  ***********************************************************************************/
                                 ;    1545 
                                 ;    1546 #ifdef __TEXT_MODE
                                 ;    1547 
                                 ;    1548 static const char msg_units0[] PROGMEM = " in";	// used by generic print functions
                                 ;    1549 static const char msg_units1[] PROGMEM = " mm";
                                 ;    1550 static const char msg_units2[] PROGMEM = " deg";
                                 ;    1551 static const char *const msg_units[] PROGMEM = { msg_units0, msg_units1, msg_units2 };
                                 ;    1552 #define DEGREE_INDEX 2
                                 ;    1553 
                                 ;    1554 static const char fmt_me[] PROGMEM = "motors energized\n";
                                 ;    1555 static const char fmt_md[] PROGMEM = "motors de-energized\n";
                                 ;    1556 static const char fmt_mt[] PROGMEM = "[mt]  motor idle timeout%14.2f Sec\n";
                                 ;    1557 static const char fmt_0ma[] PROGMEM = "[%s%s] m%s map to axis%15d [0=X,1=Y,2=Z...]\n";
                                 ;    1558 static const char fmt_0sa[] PROGMEM = "[%s%s] m%s step angle%20.3f%s\n";
                                 ;    1559 static const char fmt_0tr[] PROGMEM = "[%s%s] m%s travel per revolution%10.4f%s\n";
                                 ;    1560 static const char fmt_0mi[] PROGMEM = "[%s%s] m%s microsteps%16d [1,2,4,8]\n";
                                 ;    1561 static const char fmt_0po[] PROGMEM = "[%s%s] m%s polarity%18d [0=normal,1=reverse]\n";
                                 ;    1562 static const char fmt_0pm[] PROGMEM = "[%s%s] m%s power management%10d [0=disabled,1=always on,2=in cycle,3=when moving]\n";
                                 ;    1563 static const char fmt_0pl[] PROGMEM = "[%s%s] m%s motor power level%13.3f [0.000=minimum, 1.000=maximum]\n";
                                 ;    1564 static const char fmt_pwr[] PROGMEM = "Motor %c power enabled state:%2.0f\n";
                                 ;    1565 
                                 ;    1566 void st_print_mt(nvObj_t *nv) { text_print_flt(nv, fmt_mt);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1566
000012D8 6040                    		SUB #04H, R0
000012DA E301                    		MOV.L R1, [R0]
000012DC FB22rrrrrrrr            		MOV.L #__$fmt_mt, R2
000012E2 05rrrrrr             A  		BSR _text_print_flt
000012E6 6701                    		RTSD #04H
000012E8                         _st_print_me:
                                 		.STACK	_st_print_me=8
                                 ;    1567 void st_print_me(nvObj_t *nv) { text_print_nul(nv, fmt_me);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1567
000012E8 6040                    		SUB #04H, R0
000012EA E301                    		MOV.L R1, [R0]
000012EC FB22rrrrrrrr            		MOV.L #__$fmt_me, R2
000012F2 05rrrrrr             A  		BSR _text_print_nul
000012F6 6701                    		RTSD #04H
000012F8                         _st_print_md:
                                 		.STACK	_st_print_md=8
                                 ;    1568 void st_print_md(nvObj_t *nv) { text_print_nul(nv, fmt_md);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1568
000012F8 6040                    		SUB #04H, R0
000012FA E301                    		MOV.L R1, [R0]
000012FC FB22rrrrrrrr            		MOV.L #__$fmt_md, R2
00001302 05rrrrrr             A  		BSR _text_print_nul
00001306 6701                    		RTSD #04H
00001308                         __$_print_motor_ui8:
                                 		.STACK	__$_print_motor_ui8=32
                                 ;    1569 
                                 ;    1570 static void _print_motor_ui8(nvObj_t *nv, const char *format)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1570
00001308 6080                    		SUB #08H, R0
0000130A A009                    		MOV.L R1, 04H[R0]
0000130C E302                    		MOV.L R2, [R0]
                                 ;    1571 {
                                 ;    1572 	fprintf_P(stderr, format, nv->group, nv->token, nv->group, (uint8_t)nv->value);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1572
0000130E A809                    		MOV.L 04H[R0], R1
00001310 A913                    		MOV.L 10H[R1], R3
00001312 7100EC                  		ADD #0FFFFFFECH, R0
00001315 FD72130000004F          		FCMP #4F000000H, R3
0000131C 29rr                    		BLT L459
0000131E                         L458:	; entry
0000131E FD7223000080CF          		FADD #0CF800000H, R3
00001325                         L459:	; entry
00001325 FC973E                  		FTOI R3, R14
00001328 5BE3                    		MOVU.B R14, R3
0000132A A103                    		MOV.L R3, 10H[R0]
0000132C 711314                  		ADD #14H, R1, R3
0000132F A08B                    		MOV.L R3, 0CH[R0]
00001331 711118                  		ADD #18H, R1
00001334 A081                    		MOV.L R1, 08H[R0]
00001336 A00B                    		MOV.L R3, 04H[R0]
00001338 E302                    		MOV.L R2, [R0]
0000133A FB12rrrrrrrr            		MOV.L #__Stderr, R1
00001340 05rrrrrr             A  		BSR _fprintf
00001344 710014                  		ADD #14H, R0
00001347 6702                    		RTSD #08H
00001349                         __$_print_motor_flt_units:
                                 		.STACK	__$_print_motor_flt_units=40
                                 ;    1573 }
                                 ;    1574 
                                 ;    1575 static void _print_motor_flt_units(nvObj_t *nv, const char *format, uint8_t units)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1575
00001349 60C0                    		SUB #0CH, R0
0000134B A081                    		MOV.L R1, 08H[R0]
0000134D A00A                    		MOV.L R2, 04H[R0]
0000134F 808B                    		MOV.B R3, 03H[R0]
                                 ;    1576 {
                                 ;    1577 	fprintf_P(stderr, format, nv->group, nv->token, nv->group, nv->value, GET_TEXT_ITEM(msg_units, units));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1577
00001351 FBE2rrrrrrrr            		MOV.L #__$msg_units, R14
00001357 B089                    		MOVU.B 03H[R0], R1
00001359 FE61E1                  		MOV.L [R1,R14], R1
0000135C A882                    		MOV.L 08H[R0], R2
0000135E A923                    		MOV.L 10H[R2], R3
00001360 A80C                    		MOV.L 04H[R0], R4
00001362 7100E8                  		ADD #0FFFFFFE8H, R0
00001365 A109                    		MOV.L R1, 14H[R0]
00001367 A103                    		MOV.L R3, 10H[R0]
00001369 712114                  		ADD #14H, R2, R1
0000136C A089                    		MOV.L R1, 0CH[R0]
0000136E 712218                  		ADD #18H, R2
00001371 A082                    		MOV.L R2, 08H[R0]
00001373 A009                    		MOV.L R1, 04H[R0]
00001375 E304                    		MOV.L R4, [R0]
00001377 FB12rrrrrrrr            		MOV.L #__Stderr, R1
0000137D 05rrrrrr             A  		BSR _fprintf
00001381 710018                  		ADD #18H, R0
00001384 6703                    		RTSD #0CH
00001386                         __$_print_motor_flt:
                                 		.STACK	__$_print_motor_flt=32
                                 ;    1578 }
                                 ;    1579 
                                 ;    1580 static void _print_motor_flt(nvObj_t *nv, const char *format)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1580
00001386 6080                    		SUB #08H, R0
00001388 A009                    		MOV.L R1, 04H[R0]
0000138A E302                    		MOV.L R2, [R0]
                                 ;    1581 {
                                 ;    1582 	fprintf_P(stderr, format, nv->group, nv->token, nv->group, nv->value);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1582
0000138C A809                    		MOV.L 04H[R0], R1
0000138E 7100EC                  		ADD #0FFFFFFECH, R0
00001391 E5100404                		MOV.L 10H[R1], 10H[R0]
00001395 711314                  		ADD #14H, R1, R3
00001398 A08B                    		MOV.L R3, 0CH[R0]
0000139A 711118                  		ADD #18H, R1
0000139D A081                    		MOV.L R1, 08H[R0]
0000139F A00B                    		MOV.L R3, 04H[R0]
000013A1 E302                    		MOV.L R2, [R0]
000013A3 FB12rrrrrrrr            		MOV.L #__Stderr, R1
000013A9 05rrrrrr             A  		BSR _fprintf
000013AD 710014                  		ADD #14H, R0
000013B0 6702                    		RTSD #08H
000013B2                         __$_print_motor_pwr:
                                 		.STACK	__$_print_motor_pwr=24
                                 ;    1583 }
                                 ;    1584 
                                 ;    1585 static void _print_motor_pwr(nvObj_t *nv, const char *format)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1585
000013B2 6080                    		SUB #08H, R0
000013B4 A009                    		MOV.L R1, 04H[R0]
000013B6 E302                    		MOV.L R2, [R0]
                                 ;    1586 {
                                 ;    1587 	fprintf_P(stderr, format, nv->token[0], nv->value);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1587
000013B8 A809                    		MOV.L 04H[R0], R1
000013BA B613                    		MOVU.B 18H[R1], R3
000013BC 60C0                    		SUB #0CH, R0
000013BE E5100402                		MOV.L 10H[R1], 08H[R0]
000013C2 A00B                    		MOV.L R3, 04H[R0]
000013C4 E302                    		MOV.L R2, [R0]
000013C6 FB12rrrrrrrr            		MOV.L #__Stderr, R1
000013CC 05rrrrrr             A  		BSR _fprintf
000013D0 62C0                    		ADD #0CH, R0
000013D2 6702                    		RTSD #08H
000013D4                         _st_print_ma:
                                 		.STACK	_st_print_ma=8
                                 ;    1588 }
                                 ;    1589 
                                 ;    1590 void st_print_ma(nvObj_t *nv) { _print_motor_ui8(nv, fmt_0ma);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1590
000013D4 6040                    		SUB #04H, R0
000013D6 E301                    		MOV.L R1, [R0]
000013D8 FB22rrrrrrrr            		MOV.L #__$fmt_0ma, R2
000013DE 39rrrr               W  		BSR __$_print_motor_ui8
000013E1 6701                    		RTSD #04H
000013E3                         _st_print_sa:
                                 		.STACK	_st_print_sa=8
                                 ;    1591 void st_print_sa(nvObj_t *nv) { _print_motor_flt_units(nv, fmt_0sa, DEGREE_INDEX);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1591
000013E3 6040                    		SUB #04H, R0
000013E5 E301                    		MOV.L R1, [R0]
000013E7 6623                    		MOV.L #00000002H, R3
000013E9 FB22rrrrrrrr            		MOV.L #__$fmt_0sa, R2
000013EF 39rrrr               W  		BSR __$_print_motor_flt_units
000013F2 6701                    		RTSD #04H
000013F4                         _st_print_tr:
                                 		.STACK	_st_print_tr=12
                                 ;    1592 void st_print_tr(nvObj_t *nv) { _print_motor_flt_units(nv, fmt_0tr, cm_get_units_mode(MODEL));}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1592
000013F4 7EA6                    		PUSH.L R6
000013F6 6040                    		SUB #04H, R0
000013F8 EF16                    		MOV.L R1, R6
000013FA E306                    		MOV.L R6, [R0]
000013FC FB12rrrrrrrr            		MOV.L #_cm, R1
00001402 72115402                		ADD #0254H, R1
00001406 05rrrrrr             A  		BSR _cm_get_units_mode
0000140A EF13                    		MOV.L R1, R3
0000140C FB22rrrrrrrr            		MOV.L #__$fmt_0tr, R2
00001412 EF61                    		MOV.L R6, R1
00001414 39rrrr               W  		BSR __$_print_motor_flt_units
00001417 3F6602                  		RTSD #08H, R6-R6
0000141A                         _st_print_mi:
                                 		.STACK	_st_print_mi=8
                                 ;    1593 void st_print_mi(nvObj_t *nv) { _print_motor_ui8(nv, fmt_0mi);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1593
0000141A 6040                    		SUB #04H, R0
0000141C E301                    		MOV.L R1, [R0]
0000141E FB22rrrrrrrr            		MOV.L #__$fmt_0mi, R2
00001424 39rrrr               W  		BSR __$_print_motor_ui8
00001427 6701                    		RTSD #04H
00001429                         _st_print_po:
                                 		.STACK	_st_print_po=8
                                 ;    1594 void st_print_po(nvObj_t *nv) { _print_motor_ui8(nv, fmt_0po);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1594
00001429 6040                    		SUB #04H, R0
0000142B E301                    		MOV.L R1, [R0]
0000142D FB22rrrrrrrr            		MOV.L #__$fmt_0po, R2
00001433 39rrrr               W  		BSR __$_print_motor_ui8
00001436 6701                    		RTSD #04H
00001438                         _st_print_pm:
                                 		.STACK	_st_print_pm=8
                                 ;    1595 void st_print_pm(nvObj_t *nv) { _print_motor_ui8(nv, fmt_0pm);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1595
00001438 6040                    		SUB #04H, R0
0000143A E301                    		MOV.L R1, [R0]
0000143C FB22rrrrrrrr            		MOV.L #__$fmt_0pm, R2
00001442 39rrrr               W  		BSR __$_print_motor_ui8
00001445 6701                    		RTSD #04H
00001447                         _st_print_pl:
                                 		.STACK	_st_print_pl=8
                                 ;    1596 void st_print_pl(nvObj_t *nv) { _print_motor_flt(nv, fmt_0pl);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1596
00001447 6040                    		SUB #04H, R0
00001449 E301                    		MOV.L R1, [R0]
0000144B FB22rrrrrrrr            		MOV.L #__$fmt_0pl, R2
00001451 39rrrr               W  		BSR __$_print_motor_flt
00001454 6701                    		RTSD #04H
00001456                         _st_print_pwr:
                                 		.STACK	_st_print_pwr=8
                                 ;    1597 void st_print_pwr(nvObj_t *nv){ _print_motor_pwr(nv, fmt_pwr);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\stepper.c",1597
00001456 6040                    		SUB #04H, R0
00001458 E301                    		MOV.L R1, [R0]
0000145A FB22rrrrrrrr            		MOV.L #__$fmt_pwr, R2
00001460 39rrrr               W  		BSR __$_print_motor_pwr
00001463 6701                    		RTSD #04H
                                 ;    1598 
                                 ;    1599 #endif // __TEXT_MODE
                                 		.SECTION	C,ROMDATA,ALIGN=4
00000000                         __$msg_units:
00000000 rrrrrrrr                		.lword	__$msg_units0
00000004 rrrrrrrr                		.lword	__$msg_units1
00000008 rrrrrrrr                		.lword	__$msg_units2
                                 		.SECTION	C_1,ROMDATA
00000000                         __$msg_units0:
00000000 20696E                  		.byte	" in"
00000003 00                      		.byte	00H
00000004                         __$msg_units1:
00000004 206D6D                  		.byte	" mm"
00000007 00                      		.byte	00H
00000008                         __$msg_units2:
00000008 20646567                		.byte	" deg"
0000000C 00                      		.byte	00H
0000000D                         __$fmt_me:
0000000D 6D6F746F                		.byte	"motors energized"
         72732065                
         6E657267                
         697A6564                
0000001D 0A00                    		.byte	0AH,00H
0000001F                         __$fmt_md:
0000001F 6D6F746F                		.byte	"motors de-energized"
         72732064                
         652D656E                
         65726769                
         7A6564                  
00000032 0A00                    		.byte	0AH,00H
00000034                         __$fmt_mt:
00000034 5B6D745D                		.byte	"[mt]  motor idle timeout%14.2f Sec"
         20206D6F                
         746F7220                
         69646C65                
         2074696D                
         656F7574                
         2531342E                
         32662053                
         6563                    
00000056 0A00                    		.byte	0AH,00H
00000058                         __$fmt_0ma:
00000058 5B257325                		.byte	"[%s%s] m%s map to axis%15d [0=X,1=Y,2=Z...]"
         735D206D                
         2573206D                
         61702074                
         6F206178                
         69732531                
         3564205B                
         303D582C                
         313D592C                
         323D5A2E                
         2E2E5D                  
00000083 0A00                    		.byte	0AH,00H
00000085                         __$fmt_0sa:
00000085 5B257325                		.byte	"[%s%s] m%s step angle%20.3f%s"
         735D206D                
         25732073                
         74657020                
         616E676C                
         65253230                
         2E336625                
         73                      
000000A2 0A00                    		.byte	0AH,00H
000000A4                         __$fmt_0tr:
000000A4 5B257325                		.byte	"[%s%s] m%s travel per revolution%10.4f%s"
         735D206D                
         25732074                
         72617665                
         6C207065                
         72207265                
         766F6C75                
         74696F6E                
         2531302E                
         34662573                
000000CC 0A00                    		.byte	0AH,00H
000000CE                         __$fmt_0mi:
000000CE 5B257325                		.byte	"[%s%s] m%s microsteps%16d [1,2,4,8]"
         735D206D                
         2573206D                
         6963726F                
         73746570                
         73253136                
         64205B31                
         2C322C34                
         2C385D                  
000000F1 0A00                    		.byte	0AH,00H
000000F3                         __$fmt_0po:
000000F3 5B257325                		.byte	"[%s%s] m%s polarity%18d [0=normal,1=reverse]"
         735D206D                
         25732070                
         6F6C6172                
         69747925                
         31386420                
         5B303D6E                
         6F726D61                
         6C2C313D                
         72657665                
         7273655D                
0000011F 0A00                    		.byte	0AH,00H
00000121                         __$fmt_0pm:
00000121 5B257325                		.byte	"[%s%s] m%s power management%10d [0=disabled,1=always on,2=in cycle,3=when moving]"
         735D206D                
         25732070                
         6F776572                
         206D616E                
         6167656D                
         656E7425                
         31306420                
         5B303D64                
         69736162                
         6C65642C                
         313D616C                
         77617973                
         206F6E2C                
         323D696E                
         20637963                
         6C652C33                
         3D776865                
         6E206D6F                
         76696E67                
         5D                      
00000172 0A00                    		.byte	0AH,00H
00000174                         __$fmt_0pl:
00000174 5B257325                		.byte	"[%s%s] m%s motor power level%13.3f [0.000=minimum, 1.000=maximum]"
         735D206D                
         2573206D                
         6F746F72                
         20706F77                
         6572206C                
         6576656C                
         2531332E                
         3366205B                
         302E3030                
         303D6D69                
         6E696D75                
         6D2C2031                
         2E303030                
         3D6D6178                
         696D756D                
         5D                      
000001B5 0A00                    		.byte	0AH,00H
000001B7                         __$fmt_pwr:
000001B7 4D6F746F                		.byte	"Motor %c power enabled state:%2.0f"
         72202563                
         20706F77                
         65722065                
         6E61626C                
         65642073                
         74617465                
         3A25322E                
         3066                    
000001D9 0A00                    		.byte	0AH,00H
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 2A2A2A20                		.byte	"*** WARNING *** Setting non-standard microstep value"
         5741524E                
         494E4720                
         2A2A2A20                
         53657474                
         696E6720                
         6E6F6E2D                
         7374616E                
         64617264                
         206D6963                
         726F7374                
         65702076                
         616C7565                
00000034 00                      		.byte	00H
                                 		.SECTION	D,ROMDATA,ALIGN=4
00000000                         __$refresh$2:
00000000 00000000                		.lword	00000000H
00000004                         __$step$3:
00000004 00000000                		.lword	00000000H
                                 		.SECTION	D_1,ROMDATA
00000000                         _isDwell:
00000000 00                      		.byte	00H
00000001                         __$flag_dda$1:
00000001 01                      		.byte	01H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _st_cfg:
00000000(00000094H)              		.blkl	37
00000094                         _st_pre:
00000094(00000088H)              		.blkl	34
0000011C                         __$st_run:
0000011C(00000060H)              		.blkl	24
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     04385   LINES

Section List

Attr         Size               Name
CODE     0000005221(00001465H)  P
ROMDATA  0000000012(0000000CH)  C
ROMDATA  0000000475(000001DBH)  C_1
ROMDATA  0000000053(00000035H)  L
ROMDATA  0000000008(00000008H)  D
ROMDATA  0000000002(00000002H)  D_1
DATA     0000000380(0000017CH)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx305E\$ccrx\stepper.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\stepper.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\src\cnc\stepper.obj
