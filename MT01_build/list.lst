* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Mar 14 14:03:20 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  14-Mar-2017 14:03:20
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=list.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=list.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;list.c
                                 
                                 		.glb	_vListInitialise
                                 		.glb	_vListInitialiseItem
                                 		.glb	_vListInsertEnd
                                 		.glb	_vListInsert
                                 		.glb	_uxListRemove
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _vListInitialise:
                                 		.STACK	_vListInitialise=8
                                 ;       1 /*
                                 ;       2     FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
                                 ;       3     All rights reserved
                                 ;       4 
                                 ;       5     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
                                 ;       6 
                                 ;       7     This file is part of the FreeRTOS distribution.
                                 ;       8 
                                 ;       9     FreeRTOS is free software; you can redistribute it and/or modify it under
                                 ;      10     the terms of the GNU General Public License (version 2) as published by the
                                 ;      11     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
                                 ;      12 
                                 ;      13     ***************************************************************************
                                 ;      14     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
                                 ;      15     >>!   distribute a combined work that includes FreeRTOS without being   !<<
                                 ;      16     >>!   obliged to provide the source code for proprietary components     !<<
                                 ;      17     >>!   outside of the FreeRTOS kernel.                                   !<<
                                 ;      18     ***************************************************************************
                                 ;      19 
                                 ;      20     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
                                 ;      21     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                                 ;      22     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
                                 ;      23     link: http://www.freertos.org/a00114.html
                                 ;      24 
                                 ;      25     ***************************************************************************
                                 ;      26      *                                                                       *
                                 ;      27      *    FreeRTOS provides completely free yet professionally developed,    *
                                 ;      28      *    robust, strictly quality controlled, supported, and cross          *
                                 ;      29      *    platform software that is more than just the market leader, it     *
                                 ;      30      *    is the industry's de facto standard.                               *
                                 ;      31      *                                                                       *
                                 ;      32      *    Help yourself get started quickly while simultaneously helping     *
                                 ;      33      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
                                 ;      34      *    tutorial book, reference manual, or both:                          *
                                 ;      35      *    http://www.FreeRTOS.org/Documentation                              *
                                 ;      36      *                                                                       *
                                 ;      37     ***************************************************************************
                                 ;      38 
                                 ;      39     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
                                 ;      40     the FAQ page "My application does not run, what could be wrong?".  Have you
                                 ;      41     defined configASSERT()?
                                 ;      42 
                                 ;      43     http://www.FreeRTOS.org/support - In return for receiving this top quality
                                 ;      44     embedded software for free we request you assist our global community by
                                 ;      45     participating in the support forum.
                                 ;      46 
                                 ;      47     http://www.FreeRTOS.org/training - Investing in training allows your team to
                                 ;      48     be as productive as possible as early as possible.  Now you can receive
                                 ;      49     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
                                 ;      50     Ltd, and the world's leading authority on the world's leading RTOS.
                                 ;      51 
                                 ;      52     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
                                 ;      53     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
                                 ;      54     compatible FAT file system, and our tiny thread aware UDP/IP stack.
                                 ;      55 
                                 ;      56     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
                                 ;      57     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
                                 ;      58 
                                 ;      59     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
                                 ;      60     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
                                 ;      61     licenses offer ticketed support, indemnification and commercial middleware.
                                 ;      62 
                                 ;      63     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
                                 ;      64     engineered and independently SIL3 certified version for use in safety and
                                 ;      65     mission critical applications that require provable dependability.
                                 ;      66 
                                 ;      67     1 tab == 4 spaces!
                                 ;      68 */
                                 ;      69 
                                 ;      70 
                                 ;      71 #include <stdlib.h>
                                 ;      72 #include "FreeRTOS.h"
                                 ;      73 #include "list.h"
                                 ;      74 
                                 ;      75 /*-----------------------------------------------------------
                                 ;      76  * PUBLIC LIST API documented in list.h
                                 ;      77  *----------------------------------------------------------*/
                                 ;      78 
                                 ;      79 void vListInitialise( List_t * const pxList )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",79
00000000 6040                    		SUB #04H, R0
00000002 E301                    		MOV.L R1, [R0]
                                 ;      80 {
                                 ;      81 	/* The list structure contains a list item which is used to mark the
                                 ;      82 	end of the list.  To initialise the list the list end is inserted
                                 ;      83 	as the only list entry. */
                                 ;      84 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to sa
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",84
00000004 711208                  		ADD #08H, R1, R2
00000007 A01A                    		MOV.L R2, 04H[R1]
00000009                         L11:	; entry.split
                                 ;      85 
                                 ;      86 	/* The list end value is the highest possible value in the list to
                                 ;      87 	ensure it remains at the end of the list. */
                                 ;      88 	pxList->xListEnd.xItemValue = portMAX_DELAY;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",88
00000009 EC01                    		MOV.L [R0], R1
0000000B F91602FF                		MOV.L #0FFFFFFFFH, 08H[R1]
0000000F                         L12:	; entry.split1
                                 ;      89 
                                 ;      90 	/* The list end next and previous pointers point to itself so we know
                                 ;      91 	when the list is empty. */
                                 ;      92 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM. 
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",92
0000000F EC01                    		MOV.L [R0], R1
00000011 711208                  		ADD #08H, R1, R2
00000014 A09A                    		MOV.L R2, 0CH[R1]
00000016                         L13:	; entry.split2
                                 ;      93 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  Th
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",93
00000016 EC01                    		MOV.L [R0], R1
00000018 711208                  		ADD #08H, R1, R2
0000001B A112                    		MOV.L R2, 10H[R1]
0000001D                         L14:	; entry.split3
                                 ;      94 
                                 ;      95 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",95
0000001D EC01                    		MOV.L [R0], R1
0000001F F81600                  		MOV.L #00000000H, [R1]
00000022 6701                    		RTSD #04H
00000024                         _vListInitialiseItem:
                                 		.STACK	_vListInitialiseItem=8
                                 ;      96 
                                 ;      97 	/* Write known values into the list if
                                 ;      98 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
                                 ;      99 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
                                 ;     100 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
                                 ;     101 }
                                 ;     102 /*-----------------------------------------------------------*/
                                 ;     103 
                                 ;     104 void vListInitialiseItem( ListItem_t * const pxItem )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",104
00000024 6040                    		SUB #04H, R0
00000026 E301                    		MOV.L R1, [R0]
                                 ;     105 {
                                 ;     106 	/* Make sure the list item is not recorded as being on a list. */
                                 ;     107 	pxItem->pvContainer = NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",107
00000028 3E1400                  		MOV.L #00000000H, 10H[R1]
0000002B 6701                    		RTSD #04H
0000002D                         _vListInsertEnd:
                                 		.STACK	_vListInsertEnd=16
                                 ;     108 
                                 ;     109 	/* Write known values into the list item if
                                 ;     110 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
                                 ;     111 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
                                 ;     112 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
                                 ;     113 }
                                 ;     114 /*-----------------------------------------------------------*/
                                 ;     115 
                                 ;     116 void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",116
0000002D 60C0                    		SUB #0CH, R0
0000002F A081                    		MOV.L R1, 08H[R0]
00000031 A00A                    		MOV.L R2, 04H[R0]
                                 ;     117 {
                                 ;     118 ListItem_t * const pxIndex = pxList->pxIndex;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",118
00000033 A881                    		MOV.L 08H[R0], R1
00000035 E11001                  		MOV.L 04H[R1], [R0]
00000038                         L17:	; entry.split
                                 ;     119 
                                 ;     120 	/* Only effective when configASSERT() is also defined, these tests may catch
                                 ;     121 	the list data structures being overwritten in memory.  They will not catch
                                 ;     122 	data errors caused by incorrect configuration or use of FreeRTOS. */
                                 ;     123 	listTEST_LIST_INTEGRITY( pxList );
                                 ;     124 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
                                 ;     125 
                                 ;     126 	/* Insert a new list item into pxList, but rather than sort the list,
                                 ;     127 	makes the new list item the last item to be removed by a call to
                                 ;     128 	listGET_OWNER_OF_NEXT_ENTRY(). */
                                 ;     129 	pxNewListItem->pxNext = pxIndex;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",129
00000038 EC01                    		MOV.L [R0], R1
0000003A A80A                    		MOV.L 04H[R0], R2
0000003C A029                    		MOV.L R1, 04H[R2]
0000003E                         L18:	; entry.split1
                                 ;     130 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",130
0000003E EC01                    		MOV.L [R0], R1
00000040 A80A                    		MOV.L 04H[R0], R2
00000042 E5120202                		MOV.L 08H[R1], 08H[R2]
00000046                         L19:	; entry.split2
                                 ;     131 
                                 ;     132 	/* Only used during decision coverage testing. */
                                 ;     133 	mtCOVERAGE_TEST_DELAY();
                                 ;     134 
                                 ;     135 	pxIndex->pxPrevious->pxNext = pxNewListItem;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",135
00000046 EC01                    		MOV.L [R0], R1
00000048 A891                    		MOV.L 08H[R1], R1
0000004A E5010101                		MOV.L 04H[R0], 04H[R1]
0000004E                         L20:	; entry.split3
                                 ;     136 	pxIndex->pxPrevious = pxNewListItem;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",136
0000004E A809                    		MOV.L 04H[R0], R1
00000050 EC02                    		MOV.L [R0], R2
00000052 A0A1                    		MOV.L R1, 08H[R2]
00000054                         L21:	; entry.split4
                                 ;     137 
                                 ;     138 	/* Remember which list the item is in. */
                                 ;     139 	pxNewListItem->pvContainer = ( void * ) pxList;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",139
00000054 A881                    		MOV.L 08H[R0], R1
00000056 A80A                    		MOV.L 04H[R0], R2
00000058 A121                    		MOV.L R1, 10H[R2]
0000005A                         L22:	; entry.split5
                                 ;     140 
                                 ;     141 	( pxList->uxNumberOfItems )++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",141
0000005A A881                    		MOV.L 08H[R0], R1
0000005C EC1E                    		MOV.L [R1], R14
0000005E 621E                    		ADD #01H, R14
00000060 E31E                    		MOV.L R14, [R1]
00000062 6703                    		RTSD #0CH
00000064                         _vListInsert:
                                 		.STACK	_vListInsert=20
                                 ;     142 }
                                 ;     143 /*-----------------------------------------------------------*/
                                 ;     144 
                                 ;     145 void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",145
00000064 7100F0                  		ADD #0FFFFFFF0H, R0
00000067 A089                    		MOV.L R1, 0CH[R0]
00000069 A082                    		MOV.L R2, 08H[R0]
                                 ;     146 {
                                 ;     147 ListItem_t *pxIterator;
                                 ;     148 const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",148
0000006B E42001                  		MOV.L [R2], 04H[R0]
0000006E                         L24:	; entry.split
                                 ;     149 
                                 ;     150 	/* Only effective when configASSERT() is also defined, these tests may catch
                                 ;     151 	the list data structures being overwritten in memory.  They will not catch
                                 ;     152 	data errors caused by incorrect configuration or use of FreeRTOS. */
                                 ;     153 	listTEST_LIST_INTEGRITY( pxList );
                                 ;     154 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
                                 ;     155 
                                 ;     156 	/* Insert the new list item into the list, sorted in xItemValue order.
                                 ;     157 
                                 ;     158 	If the list already contains a list item with the same item value then the
                                 ;     159 	new list item should be placed after it.  This ensures that TCB's which are
                                 ;     160 	stored in ready lists (all of which have the same xItemValue value) get a
                                 ;     161 	share of the CPU.  However, if the xItemValue is the same as the back marker
                                 ;     162 	the iteration loop below will not end.  Therefore the value is checked
                                 ;     163 	first, and the algorithm slightly modified if necessary. */
                                 ;     164 	if( xValueOfInsertion == portMAX_DELAY )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",164
0000006E A889                    		MOV.L 0CH[R0], R1
00000070 711208                  		ADD #08H, R1, R2
00000073 A80B                    		MOV.L 04H[R0], R3
00000075 7503FF                  		CMP #0FFFFFFFFH, R3
00000078 18                   S  		BNE L26
00000079                         L25:	; bb7
                                 ;     165 	{
                                 ;     166 		pxIterator = pxList->xListEnd.pxPrevious;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",166
00000079 E11004                  		MOV.L 10H[R1], [R0]
0000007C 2Err                 B  		BRA L29
0000007E                         L26:	; bb12
                                 ;     167 	}
                                 ;     168 	else
                                 ;     169 	{
                                 ;     170 		/* *** NOTE ***********************************************************
                                 ;     171 		If you find your application is crashing here then likely causes are
                                 ;     172 		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
                                 ;     173 		more tips, and ensure configASSERT() is defined!
                                 ;     174 		http://www.freertos.org/a00110.html#configASSERT
                                 ;     175 
                                 ;     176 			1) Stack overflow -
                                 ;     177 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
                                 ;     178 			2) Incorrect interrupt priority assignment, especially on Cortex-M
                                 ;     179 			   parts where numerically high priority values denote low actual
                                 ;     180 			   interrupt priorities, which can seem counter intuitive.  See
                                 ;     181 			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
                                 ;     182 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
                                 ;     183 			   http://www.freertos.org/a00110.html
                                 ;     184 			3) Calling an API function from within a critical section or when
                                 ;     185 			   the scheduler is suspended, or calling an API function that does
                                 ;     186 			   not end in "FromISR" from an interrupt.
                                 ;     187 			4) Using a queue or semaphore before it has been initialised or
                                 ;     188 			   before the scheduler has been started (are interrupts firing
                                 ;     189 			   before vTaskStartScheduler() has been called?).
                                 ;     190 		**********************************************************************/
                                 ;     191 
                                 ;     192 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",192
0000007E E302                    		MOV.L R2, [R0]
00000080 08                   S  		BRA L28
00000081                         L27:	; bb16
00000081 EC01                    		MOV.L [R0], R1
00000083 E11001                  		MOV.L 04H[R1], [R0]
00000086                         L28:	; bb20
00000086 EC01                    		MOV.L [R0], R1
00000088 A819                    		MOV.L 04H[R1], R1
0000008A EC1E                    		MOV.L [R1], R14
0000008C 06850E01                		CMP 04H[R0].L, R14
00000090 25rr                    		BLEU L27
00000092                         L29:	; bb34
                                 ;     193 		{
                                 ;     194 			/* There is nothing to do here, just iterating to the wanted
                                 ;     195 			insertion position. */
                                 ;     196 		}
                                 ;     197 	}
                                 ;     198 
                                 ;     199 	pxNewListItem->pxNext = pxIterator->pxNext;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",199
00000092 EC01                    		MOV.L [R0], R1
00000094 A882                    		MOV.L 08H[R0], R2
00000096 E5120101                		MOV.L 04H[R1], 04H[R2]
0000009A                         L30:	; bb34.split
                                 ;     200 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",200
0000009A A881                    		MOV.L 08H[R0], R1
0000009C A81A                    		MOV.L 04H[R1], R2
0000009E A0A1                    		MOV.L R1, 08H[R2]
000000A0                         L31:	; bb34.split1
                                 ;     201 	pxNewListItem->pxPrevious = pxIterator;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",201
000000A0 EC01                    		MOV.L [R0], R1
000000A2 A882                    		MOV.L 08H[R0], R2
000000A4 A0A1                    		MOV.L R1, 08H[R2]
000000A6                         L32:	; bb34.split2
                                 ;     202 	pxIterator->pxNext = pxNewListItem;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",202
000000A6 A881                    		MOV.L 08H[R0], R1
000000A8 EC02                    		MOV.L [R0], R2
000000AA A029                    		MOV.L R1, 04H[R2]
000000AC                         L33:	; bb34.split3
                                 ;     203 
                                 ;     204 	/* Remember which list the item is in.  This allows fast removal of the
                                 ;     205 	item later. */
                                 ;     206 	pxNewListItem->pvContainer = ( void * ) pxList;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",206
000000AC A889                    		MOV.L 0CH[R0], R1
000000AE A882                    		MOV.L 08H[R0], R2
000000B0 A121                    		MOV.L R1, 10H[R2]
000000B2                         L34:	; bb34.split4
                                 ;     207 
                                 ;     208 	( pxList->uxNumberOfItems )++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",208
000000B2 A889                    		MOV.L 0CH[R0], R1
000000B4 EC1E                    		MOV.L [R1], R14
000000B6 621E                    		ADD #01H, R14
000000B8 E31E                    		MOV.L R14, [R1]
000000BA 6704                    		RTSD #10H
000000BC                         _uxListRemove:
                                 		.STACK	_uxListRemove=16
                                 ;     209 }
                                 ;     210 /*-----------------------------------------------------------*/
                                 ;     211 
                                 ;     212 UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",212
000000BC 60C0                    		SUB #0CH, R0
000000BE A081                    		MOV.L R1, 08H[R0]
                                 ;     213 {
                                 ;     214 /* The list item knows which list it is in.  Obtain the list from the list
                                 ;     215 item. */
                                 ;     216 List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",216
000000C0 E11004                  		MOV.L 10H[R1], [R0]
000000C3                         L36:	; entry.split
                                 ;     217 
                                 ;     218 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",218
000000C3 A881                    		MOV.L 08H[R0], R1
000000C5 A81A                    		MOV.L 04H[R1], R2
000000C7 E5120202                		MOV.L 08H[R1], 08H[R2]
000000CB                         L37:	; entry.split1
                                 ;     219 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",219
000000CB A881                    		MOV.L 08H[R0], R1
000000CD A892                    		MOV.L 08H[R1], R2
000000CF E5120101                		MOV.L 04H[R1], 04H[R2]
000000D3                         L38:	; entry.split2
                                 ;     220 
                                 ;     221 	/* Only used during decision coverage testing. */
                                 ;     222 	mtCOVERAGE_TEST_DELAY();
                                 ;     223 
                                 ;     224 	/* Make sure the index is left pointing to a valid item. */
                                 ;     225 	if( pxList->pxIndex == pxItemToRemove )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",225
000000D3 EC01                    		MOV.L [R0], R1
000000D5 A819                    		MOV.L 04H[R1], R1
000000D7 06850102                		CMP 08H[R0].L, R1
000000DB 18                   S  		BNE L40
000000DC                         L39:	; bb21
                                 ;     226 	{
                                 ;     227 		pxList->pxIndex = pxItemToRemove->pxPrevious;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",227
000000DC A881                    		MOV.L 08H[R0], R1
000000DE EC02                    		MOV.L [R0], R2
000000E0 E5120201                		MOV.L 08H[R1], 04H[R2]
000000E4                         L40:	; bb34
                                 ;     228 	}
                                 ;     229 	else
                                 ;     230 	{
                                 ;     231 		mtCOVERAGE_TEST_MARKER();
                                 ;     232 	}
                                 ;     233 
                                 ;     234 	pxItemToRemove->pvContainer = NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",234
000000E4 A881                    		MOV.L 08H[R0], R1
000000E6 3E1400                  		MOV.L #00000000H, 10H[R1]
000000E9                         L41:	; bb34.split
                                 ;     235 	( pxList->uxNumberOfItems )--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",235
000000E9 EC01                    		MOV.L [R0], R1
000000EB EC1E                    		MOV.L [R1], R14
000000ED 601E                    		SUB #01H, R14
000000EF E31E                    		MOV.L R14, [R1]
000000F1                         L42:	; bb34.split3
                                 ;     236 
                                 ;     237 	return pxList->uxNumberOfItems;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",237
000000F1 EC01                    		MOV.L [R0], R1
000000F3 EC11                    		MOV.L [R1], R1
000000F5 A009                    		MOV.L R1, 04H[R0]
000000F7                         L43:	; bb34.split4
                                 ;     238 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\list.c",238
000000F7 6703                    		RTSD #0CH
                                 ;     239 /*-----------------------------------------------------------*/
                                 ;     240 
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00458   LINES

Section List

Attr         Size               Name
CODE     0000000249(000000F9H)  P

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx4D06\$ccrx\list.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\list.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\FreeRTOS\Source\list.obj
