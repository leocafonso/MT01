* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Mon Mar 20 17:11:44 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  20-Mar-2017 17:11:43
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=plan_zoid.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=plan_zoid.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;plan_zoid.c
                                 
                                 		.glb	_mp_calculate_trapezoid
                                 		.glb	_mp_get_target_length
                                 		.glb	_mp_get_target_velocity
                                 		.glb	_fmaxf
                                 		.glb	_fminf
                                 		.glb	_sqrt
                                 		.glb	_pow
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _mp_calculate_trapezoid:
                                 		.STACK	_mp_calculate_trapezoid=28
                                 ;       1 /*
                                 ;       2  * plan_zoid.c - acceleration managed line planning and motion execution - trapezoid planner
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart, Jr.
                                 ;       6  * Copyright (c) 2012 - 2015 Rob Giseburt
                                 ;       7  *
                                 ;       8  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       9  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;      10  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      11  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      12  *
                                 ;      13  * As a special exception, you may use this file as part of a software library without
                                 ;      14  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      15  * inline functions from this file, or you compile this file and link it with  other
                                 ;      16  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      17  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      18  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      19  * GNU General Public License.
                                 ;      20  *
                                 ;      21  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      22  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      23  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      24  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      25  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      26  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      27  */
                                 ;      28 
                                 ;      29 #include "tinyg.h"
                                 ;      30 #include "config.h"
                                 ;      31 #include "planner.h"
                                 ;      32 #include "report.h"
                                 ;      33 #include "util.h"
                                 ;      34 
                                 ;      35 /*
                                 ;      36  * mp_calculate_trapezoid() - calculate trapezoid parameters
                                 ;      37  *
                                 ;      38  *	This rather brute-force and long-ish function sets section lengths and velocities
                                 ;      39  *	based on the line length and velocities requested. It modifies the incoming
                                 ;      40  *	bf buffer and returns accurate head, body and tail lengths, and accurate or
                                 ;      41  *	reasonably approximate velocities. We care about accuracy on lengths, less
                                 ;      42  *	so for velocity (as long as velocity err's on the side of too slow).
                                 ;      43  *
                                 ;      44  *	Note: We need the velocities to be set even for zero-length sections
                                 ;      45  *	(Note: sections, not moves) so we can compute entry and exits for adjacent sections.
                                 ;      46  *
                                 ;      47  *	Inputs used are:
                                 ;      48  *	  bf->length			- actual block length	(length is never changed)
                                 ;      49  *	  bf->entry_velocity	- requested Ve			(entry velocity is never changed)
                                 ;      50  *	  bf->cruise_velocity	- requested Vt			(is often changed)
                                 ;      51  *	  bf->exit_velocity		- requested Vx			(may be changed for degenerate cases)
                                 ;      52  *	  bf->cruise_vmax		- used in some comparisons
                                 ;      53  *	  bf->delta_vmax		- used to degrade velocity of pathologically short blocks
                                 ;      54  *
                                 ;      55  *	Variables that may be set/updated are:
                                 ;      56  *    bf->entry_velocity	- requested Ve
                                 ;      57  *	  bf->cruise_velocity	- requested Vt
                                 ;      58  *	  bf->exit_velocity		- requested Vx
                                 ;      59  *	  bf->head_length		- bf->length allocated to head
                                 ;      60  *	  bf->body_length		- bf->length allocated to body
                                 ;      61  *	  bf->tail_length		- bf->length allocated to tail
                                 ;      62  *
                                 ;      63  *	Note: The following conditions must be met on entry:
                                 ;      64  *		bf->length must be non-zero (filter these out upstream)
                                 ;      65  *		bf->entry_velocity <= bf->cruise_velocity >= bf->exit_velocity
                                 ;      66  */
                                 ;      67 /*	Classes of moves:
                                 ;      68  *
                                 ;      69  *	  Requested-Fit - The move has sufficient length to achieve the target velocity
                                 ;      70  *		(cruise velocity). I.e: it will accommodate the acceleration / deceleration
                                 ;      71  *		profile in the given length.
                                 ;      72  *
                                 ;      73  *	  Rate-Limited-Fit - The move does not have sufficient length to achieve target
                                 ;      74  *		velocity. In this case the cruise velocity will be set lower than the requested
                                 ;      75  *		velocity (incoming bf->cruise_velocity). The entry and exit velocities are satisfied.
                                 ;      76  *
                                 ;      77  *	  Degraded-Fit - The move does not have sufficient length to transition from
                                 ;      78  *		the entry velocity to the exit velocity in the available length. These
                                 ;      79  *		velocities are not negotiable, so a degraded solution is found.
                                 ;      80  *
                                 ;      81  *	  	In worst cases the move cannot be executed as the required execution time is
                                 ;      82  *		less than the minimum segment time. The first degradation is to reduce the
                                 ;      83  *		move to a body-only segment with an average velocity. If that still doesn't
                                 ;      84  *		fit then the move velocity is reduced so it fits into a minimum segment.
                                 ;      85  *		This will reduce the velocities in that region of the planner buffer as the
                                 ;      86  *		moves are replanned to that worst-case move.
                                 ;      87  *
                                 ;      88  *	Various cases handled (H=head, B=body, T=tail)
                                 ;      89  *
                                 ;      90  *	  Requested-Fit cases
                                 ;      91  *	  	HBT	Ve<Vt>Vx	sufficient length exists for all parts (corner case: HBT')
                                 ;      92  *	  	HB	Ve<Vt=Vx	head accelerates to cruise - exits at full speed (corner case: H')
                                 ;      93  *	  	BT	Ve=Vt>Vx	enter at full speed and decelerate (corner case: T')
                                 ;      94  *	  	HT	Ve & Vx		perfect fit HT (very rare). May be symmetric or asymmetric
                                 ;      95  *	  	H	Ve<Vx		perfect fit H (common, results from planning)
                                 ;      96  *	  	T	Ve>Vx		perfect fit T (common, results from planning)
                                 ;      97  *	  	B	Ve=Vt=Vx	Velocities are close to each other and within matching tolerance
                                 ;      98  *
                                 ;      99  *	  Rate-Limited cases - Ve and Vx can be satisfied but Vt cannot
                                 ;     100  *	  	HT	(Ve=Vx)<Vt	symmetric case. Split the length and compute Vt.
                                 ;     101  *	  	HT'	(Ve!=Vx)<Vt	asymmetric case. Find H and T by successive approximation.
                                 ;     102  *		HBT'			body length < min body length - treated as an HT case
                                 ;     103  *		H'				body length < min body length - subsume body into head length
                                 ;     104  *		T'				body length < min body length - subsume body into tail length
                                 ;     105  *
                                 ;     106  *	  Degraded fit cases - line is too short to satisfy both Ve and Vx
                                 ;     107  *	    H"	Ve<Vx		Ve is degraded (velocity step). Vx is met
                                 ;     108  *	  	T"	Ve>Vx		Ve is degraded (velocity step). Vx is met
                                 ;     109  *	  	B"	<short>		line is very short but drawable; is treated as a body only
                                 ;     110  *		F	<too short>	force fit: This block is slowed down until it can be executed
                                 ;     111  */
                                 ;     112 /*	NOTE: The order of the cases/tests in the code is pretty important. Start with the
                                 ;     113  *	  shortest cases first and work up. Not only does this simplify the order of the tests,
                                 ;     114  *	  but it reduces execution time when you need it most - when tons of pathologically
                                 ;     115  *	  short Gcode blocks are being thrown at you.
                                 ;     116  */
                                 ;     117 
                                 ;     118 // The minimum lengths are dynamic and depend on the velocity
                                 ;     119 // These expressions evaluate to the minimum lengths for the current velocity settings
                                 ;     120 // Note: The head and tail lengths are 2 minimum segments, the body is 1 min segment
                                 ;     121 #define MIN_HEAD_LENGTH (MIN_SEGMENT_TIME_PLUS_MARGIN * (bf->cruise_velocity + bf->entry_velocity))
                                 ;     122 #define MIN_TAIL_LENGTH (MIN_SEGMENT_TIME_PLUS_MARGIN * (bf->cruise_velocity + bf->exit_velocity))
                                 ;     123 #define MIN_BODY_LENGTH (MIN_SEGMENT_TIME_PLUS_MARGIN * bf->cruise_velocity)
                                 ;     124 
                                 ;     125 void mp_calculate_trapezoid(mpBuf_t *bf)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",125
00000000 6E67                    		PUSHM R6-R7
00000002 7100F0                  		ADD #0FFFFFFF0H, R0
00000005 A089                    		MOV.L R1, 0CH[R0]
                                 ;     126 {
                                 ;     127 	//********************************************
                                 ;     128 	//********************************************
                                 ;     129 	//**   RULE #1 of mp_calculate_trapezoid()  **
                                 ;     130 	//**        DON'T CHANGE bf->length         **
                                 ;     131 	//********************************************
                                 ;     132 	//********************************************
                                 ;     133 
                                 ;     134 	// F case: Block is too short - run time < minimum segment time
                                 ;     135 	// Force block into a single segment body with limited velocities
                                 ;     136 	// Accept the entry velocity, limit the cruise, and go for the best exit velocity
                                 ;     137 	// you can get given the delta_vmax (maximum velocity slew) supportable.
                                 ;     138 
                                 ;     139 	bf->naiive_move_time = 2 * bf->length / (bf->entry_velocity + bf->exit_velocity); // average
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",139
00000007 AC1A                    		MOV.L 44H[R1], R2
00000009 FC891213                		FADD 4CH[R1].L, R2
0000000D AB1B                    		MOV.L 34H[R1], R3
0000000F FC8B33                  		FADD R3, R3
00000012 FC9323                  		FDIV R2, R3
00000015 A113                    		MOV.L R3, 10H[R1]
00000017                         L11:	; entry.split
                                 ;     140 
                                 ;     141 	if (bf->naiive_move_time < MIN_SEGMENT_TIME_PLUS_MARGIN) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",141
00000017 A889                    		MOV.L 0CH[R0], R1
00000019 A912                    		MOV.L 10H[R1], R2
0000001B FD7212ADFE5137          		FCMP #3751FEADH, R2
00000022 26rr                    		BPZ L18
00000024                         L12:	; bb17
                                 ;     142 		bf->cruise_velocity = bf->length / MIN_SEGMENT_TIME_PLUS_MARGIN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",142
00000024 A88A                    		MOV.L 0CH[R0], R2
00000026 AB2A                    		MOV.L 34H[R2], R2
00000028 FD7242ADFE5137          		FDIV #3751FEADH, R2
0000002F A492                    		MOV.L R2, 48H[R1]
00000031                         L13:	; bb17.split
                                 ;     143 		bf->exit_velocity = fmaxf(0.0, fminf(bf->cruise_velocity, (bf->entry_velocity - bf->delta_vmax)));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",143
00000031 A88E                    		MOV.L 0CH[R0], R6
00000033 AC6A                    		MOV.L 44H[R6], R2
00000035 FC816217                		FSUB 5CH[R6].L, R2
00000039 ACE1                    		MOV.L 48H[R6], R1
0000003B 05rrrrrr             A  		BSR _fminf
0000003F EF12                    		MOV.L R1, R2
00000041 6601                    		MOV.L #00000000H, R1
00000043 05rrrrrr             A  		BSR _fmaxf
00000047 A4E9                    		MOV.L R1, 4CH[R6]
00000049                         L14:	; bb17.split1
                                 ;     144 		bf->body_length = bf->length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",144
00000049 A889                    		MOV.L 0CH[R0], R1
0000004B E5110D0F                		MOV.L 34H[R1], 3CH[R1]
0000004F                         L15:	; bb17.split2
                                 ;     145 		bf->head_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",145
0000004F A889                    		MOV.L 0CH[R0], R1
00000051 3E1E00                  		MOV.L #00000000H, 38H[R1]
00000054                         L16:	; bb17.split3
                                 ;     146 		bf->tail_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",146
00000054 A889                    		MOV.L 0CH[R0], R1
00000056 3E9000                  		MOV.L #00000000H, 40H[R1]
00000059                         L17:	; bb17.split4
                                 ;     147 		// We are violating the jerk value but since it's a single segment move we don't use it.
                                 ;     148 		return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",148
00000059 3F6706                  		RTSD #18H, R6-R7
0000005C                         L18:	; bb54
0000005C FBE217B7D137            		MOV.L #37D1B717H, R14
                                 ;     149 	}
                                 ;     150 
                                 ;     151 	// B" case: Block is short, but fits into a single body segment
                                 ;     152 
                                 ;     153 	if (bf->naiive_move_time <= NOM_SEGMENT_TIME) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",153
00000062 FC851E04                		FCMP 10H[R1].L, R14
00000066 A889                    		MOV.L 0CH[R0], R1
00000068 29rr                    		BLT L29
0000006A                         L19:	; bb55
                                 ;     154 		bf->entry_velocity = bf->pv->exit_velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",154
0000006A A88A                    		MOV.L 0CH[R0], R2
0000006C EC2E                    		MOV.L [R2], R14
0000006E E5E11311                		MOV.L 4CH[R14], 44H[R1]
00000072                         L20:	; bb55.split
                                 ;     155 		if (fp_NOT_ZERO(bf->entry_velocity)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",155
00000072 A889                    		MOV.L 0CH[R0], R1
00000074 AC1A                    		MOV.L 44H[R1], R2
00000076 7BF2                    		BCLR #1FH, R2
00000078 FBE2BD378635            		MOV.L #358637BDH, R14
0000007E FC872E                  		FCMP R2, R14
00000081 26rr                    		BPZ L23
00000083                         L21:	; bb64
                                 ;     156 			bf->cruise_velocity = bf->entry_velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",156
00000083 E5111112                		MOV.L 44H[R1], 48H[R1]
00000087                         L22:	; bb64.split
                                 ;     157 			bf->exit_velocity = bf->entry_velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",157
00000087 A889                    		MOV.L 0CH[R0], R1
00000089 E5111113                		MOV.L 44H[R1], 4CH[R1]
0000008D 2Err                 B  		BRA L25
0000008F                         L23:	; bb75
                                 ;     158 		} else {
                                 ;     159 			bf->cruise_velocity = bf->delta_vmax / 2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",159
0000008F AD9A                    		MOV.L 5CH[R1], R2
00000091 FD724200000040          		FDIV #40000000H, R2
00000098 A492                    		MOV.L R2, 48H[R1]
0000009A                         L24:	; bb75.split
                                 ;     160 			bf->exit_velocity = bf->delta_vmax;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",160
0000009A A889                    		MOV.L 0CH[R0], R1
0000009C E5111713                		MOV.L 5CH[R1], 4CH[R1]
000000A0                         L25:	; bb94
                                 ;     161 		}
                                 ;     162 		bf->body_length = bf->length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",162
000000A0 A889                    		MOV.L 0CH[R0], R1
000000A2 E5110D0F                		MOV.L 34H[R1], 3CH[R1]
000000A6                         L26:	; bb94.split
                                 ;     163 		bf->head_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",163
000000A6 A889                    		MOV.L 0CH[R0], R1
000000A8 3E1E00                  		MOV.L #00000000H, 38H[R1]
000000AB                         L27:	; bb94.split5
                                 ;     164 		bf->tail_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",164
000000AB A889                    		MOV.L 0CH[R0], R1
000000AD 3E9000                  		MOV.L #00000000H, 40H[R1]
000000B0                         L28:	; bb94.split6
                                 ;     165 		// We are violating the jerk value but since it's a single segment move we don't use it.
                                 ;     166 		return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",166
000000B0 3F6706                  		RTSD #18H, R6-R7
000000B3                         L29:	; bb112
                                 ;     167 	}
                                 ;     168 
                                 ;     169 	// B case:  Velocities all match (or close enough)
                                 ;     170 	//			This occurs frequently in normal gcode files with lots of short lines
                                 ;     171 	//			This case is not really necessary, but saves lots of processing time
                                 ;     172 
                                 ;     173 	if (((bf->cruise_velocity - bf->entry_velocity) < TRAPEZOID_VELOCITY_TOLERANCE) &&
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",173
000000B3 A88A                    		MOV.L 0CH[R0], R2
000000B5 AC2A                    		MOV.L 44H[R2], R2
000000B7 AC96                    		MOV.L 48H[R1], R6
000000B9 FC8326                  		FSUB R2, R6
000000BC FD72420000C842          		FDIV #42C80000H, R2
000000C3 FB1200000040            		MOV.L #40000000H, R1
000000C9 05rrrrrr             A  		BSR _fmaxf
000000CD FC8716                  		FCMP R1, R6
000000D0 27rr                    		BN L34
000000D2 2Err                 B  		BRA L36
000000D4                         L30:	; bb113
                                 ;     174 	((bf->cruise_velocity - bf->exit_velocity) < TRAPEZOID_VELOCITY_TOLERANCE)) {
                                 ;     175 		bf->body_length = bf->length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",175
000000D4 A88A                    		MOV.L 0CH[R0], R2
000000D6 E5210D0F                		MOV.L 34H[R2], 3CH[R1]
000000DA                         L31:	; bb113.split
                                 ;     176 		bf->head_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",176
000000DA A889                    		MOV.L 0CH[R0], R1
000000DC 3E1E00                  		MOV.L #00000000H, 38H[R1]
000000DF                         L32:	; bb113.split7
                                 ;     177 		bf->tail_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",177
000000DF A889                    		MOV.L 0CH[R0], R1
000000E1 3E9000                  		MOV.L #00000000H, 40H[R1]
000000E4                         L33:	; bb113.split8
                                 ;     178 		return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",178
000000E4 3F6706                  		RTSD #18H, R6-R7
000000E7                         L34:	; bb138
000000E7 A889                    		MOV.L 0CH[R0], R1
000000E9 AC96                    		MOV.L 48H[R1], R6
000000EB FC811613                		FSUB 4CH[R1].L, R6
000000EF AC1A                    		MOV.L 44H[R1], R2
000000F1 FD72420000C842          		FDIV #42C80000H, R2
000000F8 FB1200000040            		MOV.L #40000000H, R1
000000FE 05rrrrrr             A  		BSR _fmaxf
00000102 FC8716                  		FCMP R1, R6
00000105 26rr                    		BPZ L36
00000107                         L35:	; bb153
00000107 F80601                  		MOV.L #00000001H, [R0]
0000010A 08                   S  		BRA L37
0000010B                         L36:	; bb154
0000010B F80600                  		MOV.L #00000000H, [R0]
0000010E                         L37:	; bb155
0000010E EC01                    		MOV.L [R0], R1
00000110 6101                    		CMP #00H, R1
00000112 A889                    		MOV.L 0CH[R0], R1
00000114 21rr                    		BNE L30
00000116                         L38:	; bb160
                                 ;     179 	}
                                 ;     180 
                                 ;     181 	// Head-only and tail-only short-line cases
                                 ;     182 	//	 H" and T" degraded-fit cases
                                 ;     183 	//	 H' and T' requested-fit cases where the body residual is less than MIN_BODY_LENGTH
                                 ;     184 
                                 ;     185 	bf->body_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",185
00000116 3E1F00                  		MOV.L #00000000H, 3CH[R1]
00000119                         L39:	; bb160.split
                                 ;     186 	float minimum_length = mp_get_target_length(bf->entry_velocity, bf->exit_velocity, bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",186
00000119 A88B                    		MOV.L 0CH[R0], R3
0000011B ACBA                    		MOV.L 4CH[R3], R2
0000011D AC39                    		MOV.L 44H[R3], R1
0000011F 39rrrr               W  		BSR _mp_get_target_length
00000122 A009                    		MOV.L R1, 04H[R0]
00000124                         L40:	; bb160.split9
                                 ;     187 	if (bf->length <= (minimum_length + MIN_BODY_LENGTH)) {	// head-only & tail-only cases
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",187
00000124 A889                    		MOV.L 0CH[R0], R1
00000126 AC92                    		MOV.L 48H[R1], R2
00000128 FD7232ADFE5137          		FMUL #3751FEADH, R2
0000012F FC890201                		FADD 04H[R0].L, R2
00000133 FC85120D                		FCMP 34H[R1].L, R2
00000137 29rr                    		BLT L55
00000139                         L41:	; bb173
                                 ;     188 
                                 ;     189 		if (bf->entry_velocity > bf->exit_velocity)	{		// tail-only cases (short decelerations)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",189
00000139 A889                    		MOV.L 0CH[R0], R1
0000013B AC9A                    		MOV.L 4CH[R1], R2
0000013D FC851211                		FCMP 44H[R1].L, R2
00000141 26rr                    		BPZ L48
00000143                         L42:	; bb175
                                 ;     190 			if (bf->length < minimum_length) { 				// T" (degraded case)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",190
00000143 AB19                    		MOV.L 34H[R1], R1
00000145 FC850101                		FCMP 04H[R0].L, R1
00000149 26rr                    		BPZ L44
0000014B                         L43:	; bb176
                                 ;     191 				bf->entry_velocity = mp_get_target_velocity(bf->exit_velocity, bf->length, bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",191
0000014B A88E                    		MOV.L 0CH[R0], R6
0000014D AB6A                    		MOV.L 34H[R6], R2
0000014F ACE9                    		MOV.L 4CH[R6], R1
00000151 EF63                    		MOV.L R6, R3
00000153 39rrrr               W  		BSR _mp_get_target_velocity
00000156 A469                    		MOV.L R1, 44H[R6]
00000158                         L44:	; bb194
                                 ;     192 			}
                                 ;     193 			bf->cruise_velocity = bf->entry_velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",193
00000158 A889                    		MOV.L 0CH[R0], R1
0000015A E5111112                		MOV.L 44H[R1], 48H[R1]
0000015E                         L45:	; bb194.split
                                 ;     194 			bf->tail_length = bf->length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",194
0000015E A889                    		MOV.L 0CH[R0], R1
00000160 E5110D10                		MOV.L 34H[R1], 40H[R1]
00000164                         L46:	; bb194.split10
                                 ;     195 			bf->head_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",195
00000164 A889                    		MOV.L 0CH[R0], R1
00000166 3E1E00                  		MOV.L #00000000H, 38H[R1]
00000169                         L47:	; bb194.split11
                                 ;     196 			return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",196
00000169 3F6706                  		RTSD #18H, R6-R7
0000016C                         L48:	; bb218
                                 ;     197 		}
                                 ;     198 
                                 ;     199 		if (bf->entry_velocity < bf->exit_velocity)	{		// head-only cases (short accelerations)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",199
0000016C A88A                    		MOV.L 0CH[R0], R2
0000016E AC19                    		MOV.L 44H[R1], R1
00000170 FC852113                		FCMP 4CH[R2].L, R1
00000174 26rr                    		BPZ L55
00000176                         L49:	; bb220
                                 ;     200 			if (bf->length < minimum_length) { 				// H" (degraded case)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",200
00000176 A889                    		MOV.L 0CH[R0], R1
00000178 AB19                    		MOV.L 34H[R1], R1
0000017A FC850101                		FCMP 04H[R0].L, R1
0000017E 26rr                    		BPZ L51
00000180                         L50:	; bb221
                                 ;     201 				bf->exit_velocity = mp_get_target_velocity(bf->entry_velocity, bf->length, bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",201
00000180 A88E                    		MOV.L 0CH[R0], R6
00000182 AB6A                    		MOV.L 34H[R6], R2
00000184 AC69                    		MOV.L 44H[R6], R1
00000186 EF63                    		MOV.L R6, R3
00000188 39rrrr               W  		BSR _mp_get_target_velocity
0000018B A4E9                    		MOV.L R1, 4CH[R6]
0000018D                         L51:	; bb239
                                 ;     202 			}
                                 ;     203 			bf->cruise_velocity = bf->exit_velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",203
0000018D A889                    		MOV.L 0CH[R0], R1
0000018F E5111312                		MOV.L 4CH[R1], 48H[R1]
00000193                         L52:	; bb239.split
                                 ;     204 			bf->head_length = bf->length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",204
00000193 A889                    		MOV.L 0CH[R0], R1
00000195 E5110D0E                		MOV.L 34H[R1], 38H[R1]
00000199                         L53:	; bb239.split12
                                 ;     205 			bf->tail_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",205
00000199 A889                    		MOV.L 0CH[R0], R1
0000019B 3E9000                  		MOV.L #00000000H, 40H[R1]
0000019E                         L54:	; bb239.split13
                                 ;     206 			return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",206
0000019E 3F6706                  		RTSD #18H, R6-R7
000001A1                         L55:	; bb275
                                 ;     207 		}
                                 ;     208 	}
                                 ;     209 
                                 ;     210 	// Set head and tail lengths for evaluating the next cases
                                 ;     211 	bf->head_length = mp_get_target_length(bf->entry_velocity, bf->cruise_velocity, bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",211
000001A1 A88E                    		MOV.L 0CH[R0], R6
000001A3 ACE2                    		MOV.L 48H[R6], R2
000001A5 AC69                    		MOV.L 44H[R6], R1
000001A7 EF63                    		MOV.L R6, R3
000001A9 39rrrr               W  		BSR _mp_get_target_length
000001AC A3E1                    		MOV.L R1, 38H[R6]
000001AE                         L56:	; bb275.split
                                 ;     212 	bf->tail_length = mp_get_target_length(bf->exit_velocity, bf->cruise_velocity, bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",212
000001AE A88E                    		MOV.L 0CH[R0], R6
000001B0 ACE2                    		MOV.L 48H[R6], R2
000001B2 ACE9                    		MOV.L 4CH[R6], R1
000001B4 EF63                    		MOV.L R6, R3
000001B6 39rrrr               W  		BSR _mp_get_target_length
000001B9 A461                    		MOV.L R1, 40H[R6]
000001BB                         L57:	; bb275.split14
                                 ;     213 	if (bf->head_length < MIN_HEAD_LENGTH) { bf->head_length = 0;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",213
000001BB A889                    		MOV.L 0CH[R0], R1
000001BD AC92                    		MOV.L 48H[R1], R2
000001BF FC891211                		FADD 44H[R1].L, R2
000001C3 FD7232ADFE5137          		FMUL #3751FEADH, R2
000001CA AB91                    		MOV.L 38H[R1], R1
000001CC FC8721                  		FCMP R2, R1
000001CF 26rr                    		BPZ L59
000001D1                         L58:	; bb297
000001D1 A889                    		MOV.L 0CH[R0], R1
000001D3 3E1E00                  		MOV.L #00000000H, 38H[R1]
000001D6                         L59:	; bb315
                                 ;     214 	if (bf->tail_length < MIN_TAIL_LENGTH) { bf->tail_length = 0;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",214
000001D6 A889                    		MOV.L 0CH[R0], R1
000001D8 AC92                    		MOV.L 48H[R1], R2
000001DA FC891213                		FADD 4CH[R1].L, R2
000001DE FD7232ADFE5137          		FMUL #3751FEADH, R2
000001E5 AC11                    		MOV.L 40H[R1], R1
000001E7 FC8721                  		FCMP R2, R1
000001EA 26rr                    		BPZ L61
000001EC                         L60:	; bb316
000001EC A889                    		MOV.L 0CH[R0], R1
000001EE 3E9000                  		MOV.L #00000000H, 40H[R1]
000001F1                         L61:	; bb334
                                 ;     215 
                                 ;     216 	// Rate-limited HT and HT' cases
                                 ;     217 	if (bf->length < (bf->head_length + bf->tail_length)) { // it's rate limited
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",217
000001F1 A889                    		MOV.L 0CH[R0], R1
000001F3 AB92                    		MOV.L 38H[R1], R2
000001F5 FC891210                		FADD 40H[R1].L, R2
000001F9 AB1B                    		MOV.L 34H[R1], R3
000001FB FC8723                  		FCMP R2, R3
000001FE 27rr                  * 		BPZ L92
         38rrrr                  
00000203                         L62:	; bb336
                                 ;     218 
                                 ;     219 		// Symmetric rate-limited case (HT)
                                 ;     220 		if (fabs(bf->entry_velocity - bf->exit_velocity) < TRAPEZOID_VELOCITY_TOLERANCE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",220
00000203 AC1E                    		MOV.L 44H[R1], R6
00000205 A889                    		MOV.L 0CH[R0], R1
00000207 FC811613                		FSUB 4CH[R1].L, R6
0000020B AC1A                    		MOV.L 44H[R1], R2
0000020D FD72420000C842          		FDIV #42C80000H, R2
00000214 FB1200000040            		MOV.L #40000000H, R1
0000021A 05rrrrrr             A  		BSR _fmaxf
0000021E 7BF6                    		BCLR #1FH, R6
00000220 FC8716                  		FCMP R1, R6
00000223 A889                    		MOV.L 0CH[R0], R1
00000225 26rr                    		BPZ L73
00000227                         L63:	; bb337
                                 ;     221 			bf->head_length = bf->length/2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",221
00000227 A88A                    		MOV.L 0CH[R0], R2
00000229 AB2A                    		MOV.L 34H[R2], R2
0000022B FD724200000040          		FDIV #40000000H, R2
00000232 A392                    		MOV.L R2, 38H[R1]
00000234                         L64:	; bb337.split
                                 ;     222 			bf->tail_length = bf->head_length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",222
00000234 A889                    		MOV.L 0CH[R0], R1
00000236 E5110E10                		MOV.L 38H[R1], 40H[R1]
0000023A                         L65:	; bb337.split15
                                 ;     223 			bf->cruise_velocity = fminf(bf->cruise_vmax, mp_get_target_velocity(bf->entry_velocity, bf->head_length, bf));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",223
0000023A A88E                    		MOV.L 0CH[R0], R6
0000023C ABE2                    		MOV.L 38H[R6], R2
0000023E AC69                    		MOV.L 44H[R6], R1
00000240 AD6F                    		MOV.L 54H[R6], R7
00000242 EF63                    		MOV.L R6, R3
00000244 39rrrr               W  		BSR _mp_get_target_velocity
00000247 EF12                    		MOV.L R1, R2
00000249 EF71                    		MOV.L R7, R1
0000024B 05rrrrrr             A  		BSR _fminf
0000024F A4E1                    		MOV.L R1, 48H[R6]
00000251                         L66:	; bb337.split16
                                 ;     224 
                                 ;     225 			if (bf->head_length < MIN_HEAD_LENGTH) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",225
00000251 A889                    		MOV.L 0CH[R0], R1
00000253 AC92                    		MOV.L 48H[R1], R2
00000255 FC891211                		FADD 44H[R1].L, R2
00000259 FD7232ADFE5137          		FMUL #3751FEADH, R2
00000260 AB91                    		MOV.L 38H[R1], R1
00000262 FC8721                  		FCMP R2, R1
00000265 27rr                  * 		BPZ L111
         38rrrr                  
0000026A                         L67:	; bb364
                                 ;     226 				// Convert this to a body-only move
                                 ;     227 				bf->body_length = bf->length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",227
0000026A A889                    		MOV.L 0CH[R0], R1
0000026C E5110D0F                		MOV.L 34H[R1], 3CH[R1]
00000270                         L68:	; bb364.split
                                 ;     228 				bf->head_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",228
00000270 A889                    		MOV.L 0CH[R0], R1
00000272 3E1E00                  		MOV.L #00000000H, 38H[R1]
00000275                         L69:	; bb364.split17
                                 ;     229 				bf->tail_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",229
00000275 A889                    		MOV.L 0CH[R0], R1
00000277 3E9000                  		MOV.L #00000000H, 40H[R1]
0000027A                         L70:	; bb364.split18
                                 ;     230 
                                 ;     231 				// Average the entry speed and computed best cruise-speed
                                 ;     232 				bf->cruise_velocity = (bf->entry_velocity + bf->cruise_velocity)/2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",232
0000027A A889                    		MOV.L 0CH[R0], R1
0000027C AC1A                    		MOV.L 44H[R1], R2
0000027E FC891212                		FADD 48H[R1].L, R2
00000282 FD724200000040          		FDIV #40000000H, R2
00000289 A492                    		MOV.L R2, 48H[R1]
0000028B                         L71:	; bb364.split19
                                 ;     233 				bf->entry_velocity = bf->cruise_velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",233
0000028B A889                    		MOV.L 0CH[R0], R1
0000028D E5111211                		MOV.L 48H[R1], 44H[R1]
00000291                         L72:	; bb364.split20
                                 ;     234 				bf->exit_velocity = bf->cruise_velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",234
00000291 A889                    		MOV.L 0CH[R0], R1
00000293 E5111213                		MOV.L 48H[R1], 4CH[R1]
00000297 3F6706                  		RTSD #18H, R6-R7
0000029A                         L73:	; bb426
                                 ;     235 			}
                                 ;     236 			return;
                                 ;     237 		}
                                 ;     238 
                                 ;     239 		// Asymmetric HT' rate-limited case. This is relatively expensive but it's not called very often
                                 ;     240 		// iteration trap: uint8_t i=0;
                                 ;     241 		// iteration trap: if (++i > TRAPEZOID_ITERATION_MAX) { fprintf_P(stderr,PSTR("_calculate_trapezoid() failed to converge"));}
                                 ;     242 
                                 ;     243 		float computed_velocity = bf->cruise_vmax;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",243
0000029A E5101502                		MOV.L 54H[R1], 08H[R0]
0000029E                         L74:	; bb430
                                 ;     244 		do {
                                 ;     245 			bf->cruise_velocity = computed_velocity;	// initialize from previous iteration
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",245
0000029E A881                    		MOV.L 08H[R0], R1
000002A0 A88A                    		MOV.L 0CH[R0], R2
000002A2 A4A1                    		MOV.L R1, 48H[R2]
000002A4                         L75:	; bb430.split
                                 ;     246 			bf->head_length = mp_get_target_length(bf->entry_velocity, bf->cruise_velocity, bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",246
000002A4 A88E                    		MOV.L 0CH[R0], R6
000002A6 ACE2                    		MOV.L 48H[R6], R2
000002A8 AC69                    		MOV.L 44H[R6], R1
000002AA EF63                    		MOV.L R6, R3
000002AC 39rrrr               W  		BSR _mp_get_target_length
000002AF A3E1                    		MOV.L R1, 38H[R6]
000002B1                         L76:	; bb430.split21
                                 ;     247 			bf->tail_length = mp_get_target_length(bf->exit_velocity, bf->cruise_velocity, bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",247
000002B1 A88E                    		MOV.L 0CH[R0], R6
000002B3 ACE2                    		MOV.L 48H[R6], R2
000002B5 ACE9                    		MOV.L 4CH[R6], R1
000002B7 EF63                    		MOV.L R6, R3
000002B9 39rrrr               W  		BSR _mp_get_target_length
000002BC A461                    		MOV.L R1, 40H[R6]
000002BE                         L77:	; bb430.split22
                                 ;     248 			if (bf->head_length > bf->tail_length) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",248
000002BE A889                    		MOV.L 0CH[R0], R1
000002C0 AC12                    		MOV.L 40H[R1], R2
000002C2 FC85120E                		FCMP 38H[R1].L, R2
000002C6 26rr                    		BPZ L80
000002C8                         L78:	; bb455
                                 ;     249 				bf->head_length = (bf->head_length / (bf->head_length + bf->tail_length)) * bf->length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",249
000002C8 A88A                    		MOV.L 0CH[R0], R2
000002CA ABA3                    		MOV.L 38H[R2], R3
000002CC EF3E                    		MOV.L R3, R14
000002CE FC892E10                		FADD 40H[R2].L, R14
000002D2 FC93E3                  		FDIV R14, R3
000002D5 FC8D230D                		FMUL 34H[R2].L, R3
000002D9 A393                    		MOV.L R3, 38H[R1]
000002DB                         L79:	; bb455.split
                                 ;     250 				computed_velocity = mp_get_target_velocity(bf->entry_velocity, bf->head_length, bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",250
000002DB A88B                    		MOV.L 0CH[R0], R3
000002DD ABB2                    		MOV.L 38H[R3], R2
000002DF AC39                    		MOV.L 44H[R3], R1
000002E1 39rrrr               W  		BSR _mp_get_target_velocity
000002E4 A081                    		MOV.L R1, 08H[R0]
000002E6 2Err                 B  		BRA L82
000002E8                         L80:	; bb481
                                 ;     251 			} else {
                                 ;     252 				bf->tail_length = (bf->tail_length / (bf->head_length + bf->tail_length)) * bf->length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",252
000002E8 A88A                    		MOV.L 0CH[R0], R2
000002EA AC23                    		MOV.L 40H[R2], R3
000002EC EF3E                    		MOV.L R3, R14
000002EE FC892E0E                		FADD 38H[R2].L, R14
000002F2 FC93E3                  		FDIV R14, R3
000002F5 FC8D230D                		FMUL 34H[R2].L, R3
000002F9 A413                    		MOV.L R3, 40H[R1]
000002FB                         L81:	; bb481.split
                                 ;     253 				computed_velocity = mp_get_target_velocity(bf->exit_velocity, bf->tail_length, bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",253
000002FB A88B                    		MOV.L 0CH[R0], R3
000002FD AC32                    		MOV.L 40H[R3], R2
000002FF ACB9                    		MOV.L 4CH[R3], R1
00000301 39rrrr               W  		BSR _mp_get_target_velocity
00000304 A081                    		MOV.L R1, 08H[R0]
00000306                         L82:	; bb516
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",244
00000306 A889                    		MOV.L 0CH[R0], R1
00000308 AC91                    		MOV.L 48H[R1], R1
0000030A A882                    		MOV.L 08H[R0], R2
0000030C FC8321                  		FSUB R2, R1
0000030F 7BF1                    		BCLR #1FH, R1
00000311 FC9321                  		FDIV R2, R1
00000314 FBE2CDCCCC3D            		MOV.L #3DCCCCCDH, R14
0000031A FC871E                  		FCMP R1, R14
0000031D 27rr                    		BN L74
0000031F                         L83:	; bb528
                                 ;     254 			}
                                 ;     255 			// insert iteration trap here if needed
                                 ;     256 		} while ((fabs(bf->cruise_velocity - computed_velocity) / computed_velocity) > TRAPEZOID_ITERATION_ERROR_PERCENT);
                                 ;     257 
                                 ;     258 		// set velocity and clean up any parts that are too short
                                 ;     259 		bf->cruise_velocity = computed_velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",259
0000031F A881                    		MOV.L 08H[R0], R1
00000321 A88A                    		MOV.L 0CH[R0], R2
00000323 A4A1                    		MOV.L R1, 48H[R2]
00000325                         L84:	; bb528.split
                                 ;     260 		bf->head_length = mp_get_target_length(bf->entry_velocity, bf->cruise_velocity, bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",260
00000325 A88E                    		MOV.L 0CH[R0], R6
00000327 ACE2                    		MOV.L 48H[R6], R2
00000329 AC69                    		MOV.L 44H[R6], R1
0000032B EF63                    		MOV.L R6, R3
0000032D 39rrrr               W  		BSR _mp_get_target_length
00000330 A3E1                    		MOV.L R1, 38H[R6]
00000332                         L85:	; bb528.split23
                                 ;     261 		bf->tail_length = bf->length - bf->head_length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",261
00000332 A889                    		MOV.L 0CH[R0], R1
00000334 AB1A                    		MOV.L 34H[R1], R2
00000336 FC81120E                		FSUB 38H[R1].L, R2
0000033A A412                    		MOV.L R2, 40H[R1]
0000033C                         L86:	; bb528.split24
                                 ;     262 		if (bf->head_length < MIN_HEAD_LENGTH) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",262
0000033C A889                    		MOV.L 0CH[R0], R1
0000033E AC92                    		MOV.L 48H[R1], R2
00000340 FC891211                		FADD 44H[R1].L, R2
00000344 FD7232ADFE5137          		FMUL #3751FEADH, R2
0000034B AB91                    		MOV.L 38H[R1], R1
0000034D FC8721                  		FCMP R2, R1
00000350 26rr                    		BPZ L89
00000352                         L87:	; bb552
                                 ;     263 			bf->tail_length = bf->length;			// adjust the move to be all tail...
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",263
00000352 A889                    		MOV.L 0CH[R0], R1
00000354 E5110D10                		MOV.L 34H[R1], 40H[R1]
00000358                         L88:	; bb552.split
                                 ;     264 			bf->head_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",264
00000358 A889                    		MOV.L 0CH[R0], R1
0000035A 3E1E00                  		MOV.L #00000000H, 38H[R1]
0000035D                         L89:	; bb575
                                 ;     265 		}
                                 ;     266 		if (bf->tail_length < MIN_TAIL_LENGTH) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",266
0000035D A889                    		MOV.L 0CH[R0], R1
0000035F AC92                    		MOV.L 48H[R1], R2
00000361 FC891213                		FADD 4CH[R1].L, R2
00000365 FD7232ADFE5137          		FMUL #3751FEADH, R2
0000036C AC11                    		MOV.L 40H[R1], R1
0000036E FC8721                  		FCMP R2, R1
00000371 27rr                  * 		BPZ L111
         38rrrr                  
00000376                         L90:	; bb576
                                 ;     267 			bf->head_length = bf->length;			//...or all head
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",267
00000376 A889                    		MOV.L 0CH[R0], R1
00000378 E5110D0E                		MOV.L 34H[R1], 38H[R1]
0000037C                         L91:	; bb576.split
                                 ;     268 			bf->tail_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",268
0000037C A889                    		MOV.L 0CH[R0], R1
0000037E 3E9000                  		MOV.L #00000000H, 40H[R1]
00000381 3F6706                  		RTSD #18H, R6-R7
00000384                         L92:	; bb613
                                 ;     269 		}
                                 ;     270 		return;
                                 ;     271 	}
                                 ;     272 
                                 ;     273 	// Requested-fit cases: remaining of: HBT, HB, BT, BT, H, T, B, cases
                                 ;     274 	bf->body_length = bf->length - bf->head_length - bf->tail_length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",274
00000384 A88A                    		MOV.L 0CH[R0], R2
00000386 AB2B                    		MOV.L 34H[R2], R3
00000388 FC81230E                		FSUB 38H[R2].L, R3
0000038C FC812310                		FSUB 40H[R2].L, R3
00000390 A39B                    		MOV.L R3, 3CH[R1]
00000392                         L93:	; bb613.split
                                 ;     275 
                                 ;     276 	// If a non-zero body is < minimum length distribute it to the head and/or tail
                                 ;     277 	// This will generate small (acceptable) velocity errors in runtime execution
                                 ;     278 	// but preserve correct distance, which is more important.
                                 ;     279 	if ((bf->body_length < MIN_BODY_LENGTH) && (fp_NOT_ZERO(bf->body_length))) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",279
00000392 A889                    		MOV.L 0CH[R0], R1
00000394 AB9A                    		MOV.L 3CH[R1], R2
00000396 AC91                    		MOV.L 48H[R1], R1
00000398 FD7231ADFE5137          		FMUL #3751FEADH, R1
0000039F FC8712                  		FCMP R1, R2
000003A2 26rr                  * 		BN L107
         38rrrr                  
000003A7 38rrrr               W  		BRA L109
000003AA                         L94:	; bb629
                                 ;     280 		if (fp_NOT_ZERO(bf->head_length)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",280
000003AA 7BF1                    		BCLR #1FH, R1
000003AC FBE2BD378635            		MOV.L #358637BDH, R14
000003B2 FC871E                  		FCMP R1, R14
000003B5 A889                    		MOV.L 0CH[R0], R1
000003B7 26rr                    		BPZ L99
000003B9                         L95:	; bb631
                                 ;     281 			if (fp_NOT_ZERO(bf->tail_length)) {			// HBT reduces to HT
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",281
000003B9 AC11                    		MOV.L 40H[R1], R1
000003BB 7BF1                    		BCLR #1FH, R1
000003BD FBE2BD378635            		MOV.L #358637BDH, R14
000003C3 FC871E                  		FCMP R1, R14
000003C6 A889                    		MOV.L 0CH[R0], R1
000003C8 AB9A                    		MOV.L 3CH[R1], R2
000003CA 26rr                    		BPZ L98
000003CC                         L96:	; bb632
                                 ;     282 				bf->head_length += bf->body_length/2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",282
000003CC FD724200000040          		FDIV #40000000H, R2
000003D3 FC89120E                		FADD 38H[R1].L, R2
000003D7 A392                    		MOV.L R2, 38H[R1]
000003D9                         L97:	; bb632.split
                                 ;     283 				bf->tail_length += bf->body_length/2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",283
000003D9 A889                    		MOV.L 0CH[R0], R1
000003DB AB9A                    		MOV.L 3CH[R1], R2
000003DD FD724200000040          		FDIV #40000000H, R2
000003E4 FC891210                		FADD 40H[R1].L, R2
000003E8 A412                    		MOV.L R2, 40H[R1]
000003EA 2Err                 B  		BRA L100
000003EC                         L98:	; bb649
                                 ;     284 			} else {									// HB reduces to H
                                 ;     285 				bf->head_length += bf->body_length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",285
000003EC FC89120E                		FADD 38H[R1].L, R2
000003F0 A392                    		MOV.L R2, 38H[R1]
000003F2 2Err                 B  		BRA L100
000003F4                         L99:	; bb665
                                 ;     286 			}
                                 ;     287 		} else {										// BT reduces to T
                                 ;     288 			bf->tail_length += bf->body_length;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",288
000003F4 AC12                    		MOV.L 40H[R1], R2
000003F6 A88B                    		MOV.L 0CH[R0], R3
000003F8 FC89320F                		FADD 3CH[R3].L, R2
000003FC A412                    		MOV.L R2, 40H[R1]
000003FE                         L100:	; bb680
                                 ;     289 		}
                                 ;     290 		bf->body_length = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",290
000003FE A889                    		MOV.L 0CH[R0], R1
00000400 3E1F00                  		MOV.L #00000000H, 3CH[R1]
00000403 3F6706                  		RTSD #18H, R6-R7
00000406                         L101:	; bb684
                                 ;     291 
                                 ;     292 	// If the body is a standalone make the cruise velocity match the entry velocity
                                 ;     293 	// This removes a potential velocity discontinuity at the expense of top speed
                                 ;     294 	} else if ((fp_ZERO(bf->head_length)) && (fp_ZERO(bf->tail_length))) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",294
00000406 7BF1                    		BCLR #1FH, R1
00000408 FD7211BD378635          		FCMP #358637BDH, R1
0000040F 27rr                    		BN L103
00000411 2Err                 B  		BRA L105
00000413                         L102:	; bb685
                                 ;     295 		bf->cruise_velocity = bf->entry_velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",295
00000413 A889                    		MOV.L 0CH[R0], R1
00000415 E5111112                		MOV.L 44H[R1], 48H[R1]
00000419 3F6706                  		RTSD #18H, R6-R7
0000041C                         L103:	; bb697
0000041C A889                    		MOV.L 0CH[R0], R1
0000041E AC11                    		MOV.L 40H[R1], R1
00000420 7BF1                    		BCLR #1FH, R1
00000422 FD7211BD378635          		FCMP #358637BDH, R1
00000429 26rr                    		BPZ L105
0000042B                         L104:	; bb704
0000042B F80601                  		MOV.L #00000001H, [R0]
0000042E 08                   S  		BRA L106
0000042F                         L105:	; bb705
0000042F F80600                  		MOV.L #00000000H, [R0]
00000432                         L106:	; bb706
00000432 EC01                    		MOV.L [R0], R1
00000434 6101                    		CMP #00H, R1
00000436 21rr                    		BNE L102
00000438 2Err                 B  		BRA L111
0000043A                         L107:	; bb721
0000043A A889                    		MOV.L 0CH[R0], R1
0000043C AB99                    		MOV.L 3CH[R1], R1
0000043E 7BF1                    		BCLR #1FH, R1
00000440 FBE2BD378635            		MOV.L #358637BDH, R14
00000446 FC871E                  		FCMP R1, R14
00000449 26rr                    		BPZ L109
0000044B                         L108:	; bb728
0000044B F80601                  		MOV.L #00000001H, [R0]
0000044E 08                   S  		BRA L110
0000044F                         L109:	; bb729
0000044F F80600                  		MOV.L #00000000H, [R0]
00000452                         L110:	; bb730
00000452 EC01                    		MOV.L [R0], R1
00000454 6101                    		CMP #00H, R1
00000456 A889                    		MOV.L 0CH[R0], R1
00000458 AB91                    		MOV.L 38H[R1], R1
0000045A 3Brrrr               W  		BNE L94
0000045D 2Err                 B  		BRA L101
0000045F                         L111:	; return
                                 ;     296 	}
                                 ;     297 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",297
0000045F 3F6706                  		RTSD #18H, R6-R7
00000462                         _mp_get_target_length:
                                 		.STACK	_mp_get_target_length=24
                                 ;     298 
                                 ;     299 /*
                                 ;     300  * mp_get_target_length()	  - derive accel/decel length from delta V and jerk
                                 ;     301  * mp_get_target_velocity() - derive velocity achievable from delta V and length
                                 ;     302  *
                                 ;     303  *	This set of functions returns the fourth thing knowing the other three.
                                 ;     304  *
                                 ;     305  * 	  Jm = the given maximum jerk
                                 ;     306  *	  T  = time of the entire move
                                 ;     307  *    Vi = initial velocity
                                 ;     308  *    Vf = final velocity
                                 ;     309  *	  T  = 2*sqrt((Vt-Vi)/Jm)
                                 ;     310  *	  As = The acceleration at inflection point between convex and concave portions of the S-curve.
                                 ;     311  *	  As = (Jm*T)/2
                                 ;     312  *    Ar = ramp acceleration
                                 ;     313  *	  Ar = As/2 = (Jm*T)/4
                                 ;     314  *
                                 ;     315  *	mp_get_target_length() is a convenient function for determining the optimal_length (L)
                                 ;     316  *	of a line given the initial velocity (Vi), final velocity (Vf) and maximum jerk (Jm).
                                 ;     317  *
                                 ;     318  *	The length (distance) equation is derived from:
                                 ;     319  *
                                 ;     320  *	 a)	L = (Vf-Vi) * T - (Ar*T^2)/2	... which becomes b) with substitutions for Ar and T
                                 ;     321  *	 b) L = (Vf-Vi) * 2*sqrt((Vf-Vi)/Jm) - (2*sqrt((Vf-Vi)/Jm) * (Vf-Vi))/2
                                 ;     322  *	 c)	L = (Vf-Vi)^(3/2) / sqrt(Jm)	...is an alternate form of b) (see Wolfram Alpha)
                                 ;     323  *	 c')L = (Vf-Vi) * sqrt((Vf-Vi)/Jm) ... second alternate form; requires Vf >= Vi
                                 ;     324  *
                                 ;     325  *	 Notes: Ar = (Jm*T)/4					Ar is ramp acceleration
                                 ;     326  *			T  = 2*sqrt((Vf-Vi)/Jm)			T is time
                                 ;     327  *			Assumes Vi, Vf and L are positive or zero
                                 ;     328  *			Cannot assume Vf>=Vi due to rounding errors and use of PLANNER_VELOCITY_TOLERANCE
                                 ;     329  *			  necessitating the introduction of fabs()
                                 ;     330  *
                                 ;     331  * 	mp_get_target_velocity() is a convenient function for determining Vf target velocity for
                                 ;     332  *	a given the initial velocity (Vi), length (L), and maximum jerk (Jm).
                                 ;     333  *	Equation d) is b) solved for Vf. Equation e) is c) solved for Vf. Use e) (obviously)
                                 ;     334  *
                                 ;     335  *	 d)	Vf = (sqrt(L)*(L/sqrt(1/Jm))^(1/6)+(1/Jm)^(1/4)*Vi)/(1/Jm)^(1/4)
                                 ;     336  *	 e)	Vf = L^(2/3) * Jm^(1/3) + Vi
                                 ;     337  *
                                 ;     338  *  FYI: Here's an expression that returns the jerk for a given deltaV and L:
                                 ;     339  * 	return(cube(deltaV / (pow(L, 0.66666666))));
                                 ;     340  */
                                 ;     341 
                                 ;     342 float mp_get_target_length(const float Vi, const float Vf, const mpBuf_t *bf)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",342
00000462 7EA6                    		PUSH.L R6
00000464 7100F0                  		ADD #0FFFFFFF0H, R0
00000467 A089                    		MOV.L R1, 0CH[R0]
00000469 A082                    		MOV.L R2, 08H[R0]
0000046B A00B                    		MOV.L R3, 04H[R0]
                                 ;     343 {
                                 ;     344 //	return (Vi + Vf) * sqrt(fabs(Vf - Vi) * bf->recip_jerk);		// new formula
                                 ;     345 	return (fabs(Vi-Vf) * sqrt(fabs(Vi-Vf) * bf->recip_jerk));		// old formula
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",345
0000046D A88E                    		MOV.L 0CH[R0], R6
0000046F FC810602                		FSUB 08H[R0].L, R6
00000473 7BF6                    		BCLR #1FH, R6
00000475 EF61                    		MOV.L R6, R1
00000477 FC8D311B                		FMUL 6CH[R3].L, R1
0000047B 05rrrrrr             A  		BSR _sqrt
0000047F FC8F61                  		FMUL R6, R1
00000482 E301                    		MOV.L R1, [R0]
00000484                         L113:	; entry.split
                                 ;     346 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",346
00000484 3F6605                  		RTSD #14H, R6-R6
00000487                         _mp_get_target_velocity:
                                 		.STACK	_mp_get_target_velocity=24
                                 ;     347 
                                 ;     348 /* Regarding mp_get_target_velocity:
                                 ;     349  *
                                 ;     350  * We do some Newton-Raphson iterations to narrow it down.
                                 ;     351  * We need a formula that includes known variables except the one we want to find,
                                 ;     352  * and has a root [Z(x) = 0] at the value (x) we are looking for.
                                 ;     353  *
                                 ;     354  *      Z(x) = zero at x -- we calculate the value from the knowns and the estimate
                                 ;     355  *             (see below) and then subtract the known value to get zero (root) if
                                 ;     356  *             x is the correct value.
                                 ;     357  *      Vi   = initial velocity (known)
                                 ;     358  *      Vf   = estimated final velocity
                                 ;     359  *      J    = jerk (known)
                                 ;     360  *      L    = length (know)
                                 ;     361  *
                                 ;     362  * There are (at least) two such functions we can use:
                                 ;     363  *      L from J, Vi, and Vf
                                 ;     364  *      L = sqrt((Vf - Vi) / J) (Vi + Vf)
                                 ;     365  *   Replacing Vf with x, and subtracting the known L:
                                 ;     366  *      0 = sqrt((x - Vi) / J) (Vi + x) - L
                                 ;     367  *      Z(x) = sqrt((x - Vi) / J) (Vi + x) - L
                                 ;     368  *
                                 ;     369  *  OR
                                 ;     370  *
                                 ;     371  *      J from L, Vi, and Vf
                                 ;     372  *      J = ((Vf - Vi) (Vi + Vf)�) / L� 
                                 ;     373  *  Replacing Vf with x, and subtracting the known J:
                                 ;     374  *      0 = ((x - Vi) (Vi + x)�) / L� - J
                                 ;     375  *      Z(x) = ((x - Vi) (Vi + x)�) / L� - J
                                 ;     376  *
                                 ;     377  *  L doesn't resolve to the value very quickly (it graphs near-vertical).
                                 ;     378  *  So, we'll use J, which resolves in < 10 iterations, often in only two or three
                                 ;     379  *  with a good estimate.
                                 ;     380  *
                                 ;     381  *  In order to do a Newton-Raphson iteration, we need the derivative. Here they are
                                 ;     382  *  for both the (unused) L and the (used) J formulas above:
                                 ;     383  *
                                 ;     384  *  J > 0, Vi > 0, Vf > 0
                                 ;     385  *  SqrtDeltaJ = sqrt((x-Vi) * J)
                                 ;     386  *  SqrtDeltaOverJ = sqrt((x-Vi) / J)
                                 ;     387  *  L'(x) = SqrtDeltaOverJ + (Vi + x) / (2*J) + (Vi + x) / (2*SqrtDeltaJ)
                                 ;     388  *
                                 ;     389  *  J'(x) = (2*Vi*x - Vi� + 3*x�) / L� 
                                 ;     390  */
                                 ;     391 
                                 ;     392 #define GET_VELOCITY_ITERATIONS 0		// must be 0, 1, or 2
                                 ;     393 float mp_get_target_velocity(const float Vi, const float L, const mpBuf_t *bf)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",393
00000487 7100EC                  		ADD #0FFFFFFECH, R0
0000048A A101                    		MOV.L R1, 10H[R0]
0000048C A08A                    		MOV.L R2, 0CH[R0]
0000048E A083                    		MOV.L R3, 08H[R0]
                                 ;     394 {
                                 ;     395     // 0 iterations (a reasonable estimate)
                                 ;     396     float estimate = pow(L, 0.66666666) * bf->cbrt_jerk + Vi;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",396
00000490 A889                    		MOV.L 0CH[R0], R1
00000492 FB22ABAA2A3F            		MOV.L #3F2AAAABH, R2
00000498 05rrrrrr             A  		BSR _pow
0000049C A882                    		MOV.L 08H[R0], R2
0000049E FC8D211C                		FMUL 70H[R2].L, R1
000004A2 FC890104                		FADD 10H[R0].L, R1
000004A6 E301                    		MOV.L R1, [R0]
000004A8                         L115:	; entry.split
                                 ;     397 
                                 ;     398 #if (GET_VELOCITY_ITERATIONS >= 1)
                                 ;     399     // 1st iteration
                                 ;     400     float L_squared = L*L;
                                 ;     401     float Vi_squared = Vi*Vi;
                                 ;     402     float J_z = ((estimate - Vi) * (Vi + estimate) * (Vi + estimate)) / L_squared - bf->jerk;
                                 ;     403     float J_d = (2*Vi*estimate - Vi_squared + 3*(estimate*estimate)) / L_squared;
                                 ;     404     estimate = estimate - J_z/J_d;
                                 ;     405 #endif
                                 ;     406 #if (GET_VELOCITY_ITERATIONS >= 2)
                                 ;     407     // 2nd iteration
                                 ;     408     J_z = ((estimate - Vi) * (Vi + estimate) * (Vi + estimate)) / L_squared - bf->jerk;
                                 ;     409     J_d = (2*Vi*estimate - Vi_squared + 3*(estimate*estimate)) / L_squared;
                                 ;     410     estimate = estimate - J_z/J_d;
                                 ;     411 #endif
                                 ;     412     return estimate;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",412
000004A8 EC01                    		MOV.L [R0], R1
000004AA A009                    		MOV.L R1, 04H[R0]
000004AC                         L116:	; entry.split1
                                 ;     413 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_zoid.c",413
000004AC 6705                    		RTSD #14H
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     01083   LINES

Section List

Attr         Size               Name
CODE     0000001198(000004AEH)  P

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx305E\$ccrx\plan_zoid.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\plan_zoid.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\src\cnc\plan_zoid.obj
