* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Mon Mar 20 17:12:22 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  20-Mar-2017 17:12:21
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=tasks.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=tasks.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;tasks.c
                                 
                                 		.glb	_pxCurrentTCB
                                 		.glb	_xTaskGenericCreate
                                 		.glb	_vAssertCalled
                                 		.glb	_pxPortInitialiseStack
                                 		.glb	_vListInsertEnd
                                 		.glb	_vTaskDelete
                                 		.glb	_uxListRemove
                                 		.glb	_vTaskDelayUntil
                                 		.glb	_vTaskDelay
                                 		.glb	_eTaskGetState
                                 		.glb	_uxTaskPriorityGet
                                 		.glb	_uxTaskPriorityGetFromISR
                                 		.glb	_vTaskPrioritySet
                                 		.glb	_vTaskSuspend
                                 		.glb	_vTaskResume
                                 		.glb	_xTaskResumeFromISR
                                 		.glb	_vTaskStartScheduler
                                 		.glb	_xTimerCreateTimerTask
                                 		.glb	_xPortStartScheduler
                                 		.glb	_vTaskEndScheduler
                                 		.glb	_vTaskSuspendAll
                                 		.glb	_xTaskResumeAll
                                 		.glb	_vPortEndScheduler
                                 		.glb	_xTaskGetTickCount
                                 		.glb	_xTaskGetTickCountFromISR
                                 		.glb	_uxTaskGetNumberOfTasks
                                 		.glb	_uxTaskGetSystemState
                                 		.glb	_xTaskIncrementTick
                                 		.glb	_vTaskSwitchContext
                                 		.glb	_vApplicationTickHook
                                 		.glb	_vApplicationStackOverflowHook
                                 		.glb	_vTaskPlaceOnEventList
                                 		.glb	_vListInsert
                                 		.glb	_vTaskPlaceOnUnorderedEventList
                                 		.glb	_vTaskPlaceOnEventListRestricted
                                 		.glb	_xTaskRemoveFromEventList
                                 		.glb	_xTaskRemoveFromUnorderedEventList
                                 		.glb	_vTaskSetTimeOutState
                                 		.glb	_xTaskCheckForTimeOut
                                 		.glb	_vTaskMissedYield
                                 		.glb	_uxTaskGetTaskNumber
                                 		.glb	_vTaskSetTaskNumber
                                 		.glb	_vApplicationIdleHook
                                 		.glb	_vListInitialiseItem
                                 		.glb	_vListInitialise
                                 		.glb	_pvPortMalloc
                                 		.glb	_vPortFree
                                 		.glb	_uxTaskGetStackHighWaterMark
                                 		.glb	_xTaskGetCurrentTaskHandle
                                 		.glb	_xTaskGetSchedulerState
                                 		.glb	_vTaskPriorityInherit
                                 		.glb	_xTaskPriorityDisinherit
                                 		.glb	_vTaskEnterCritical
                                 		.glb	_vTaskExitCritical
                                 		.glb	_uxTaskResetEventItemValue
                                 		.glb	_pvTaskIncrementMutexHeldCount
                                 		.glb	_ulTaskNotifyTake
                                 		.glb	_xTaskNotifyWait
                                 		.glb	_xTaskGenericNotify
                                 		.glb	_xTaskNotifyFromISR
                                 		.glb	_vTaskNotifyGiveFromISR
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _xTaskGenericCreate:
                                 		.STACK	_xTaskGenericCreate=60
                                 ;       1 /*
                                 ;       2     FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
                                 ;       3     All rights reserved
                                 ;       4 
                                 ;       5     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
                                 ;       6 
                                 ;       7     This file is part of the FreeRTOS distribution.
                                 ;       8 
                                 ;       9     FreeRTOS is free software; you can redistribute it and/or modify it under
                                 ;      10     the terms of the GNU General Public License (version 2) as published by the
                                 ;      11     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
                                 ;      12 
                                 ;      13     ***************************************************************************
                                 ;      14     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
                                 ;      15     >>!   distribute a combined work that includes FreeRTOS without being   !<<
                                 ;      16     >>!   obliged to provide the source code for proprietary components     !<<
                                 ;      17     >>!   outside of the FreeRTOS kernel.                                   !<<
                                 ;      18     ***************************************************************************
                                 ;      19 
                                 ;      20     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
                                 ;      21     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                                 ;      22     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
                                 ;      23     link: http://www.freertos.org/a00114.html
                                 ;      24 
                                 ;      25     ***************************************************************************
                                 ;      26      *                                                                       *
                                 ;      27      *    FreeRTOS provides completely free yet professionally developed,    *
                                 ;      28      *    robust, strictly quality controlled, supported, and cross          *
                                 ;      29      *    platform software that is more than just the market leader, it     *
                                 ;      30      *    is the industry's de facto standard.                               *
                                 ;      31      *                                                                       *
                                 ;      32      *    Help yourself get started quickly while simultaneously helping     *
                                 ;      33      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
                                 ;      34      *    tutorial book, reference manual, or both:                          *
                                 ;      35      *    http://www.FreeRTOS.org/Documentation                              *
                                 ;      36      *                                                                       *
                                 ;      37     ***************************************************************************
                                 ;      38 
                                 ;      39     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
                                 ;      40     the FAQ page "My application does not run, what could be wrong?".  Have you
                                 ;      41     defined configASSERT()?
                                 ;      42 
                                 ;      43     http://www.FreeRTOS.org/support - In return for receiving this top quality
                                 ;      44     embedded software for free we request you assist our global community by
                                 ;      45     participating in the support forum.
                                 ;      46 
                                 ;      47     http://www.FreeRTOS.org/training - Investing in training allows your team to
                                 ;      48     be as productive as possible as early as possible.  Now you can receive
                                 ;      49     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
                                 ;      50     Ltd, and the world's leading authority on the world's leading RTOS.
                                 ;      51 
                                 ;      52     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
                                 ;      53     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
                                 ;      54     compatible FAT file system, and our tiny thread aware UDP/IP stack.
                                 ;      55 
                                 ;      56     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
                                 ;      57     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
                                 ;      58 
                                 ;      59     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
                                 ;      60     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
                                 ;      61     licenses offer ticketed support, indemnification and commercial middleware.
                                 ;      62 
                                 ;      63     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
                                 ;      64     engineered and independently SIL3 certified version for use in safety and
                                 ;      65     mission critical applications that require provable dependability.
                                 ;      66 
                                 ;      67     1 tab == 4 spaces!
                                 ;      68 */
                                 ;      69 
                                 ;      70 /* Standard includes. */
                                 ;      71 #include <stdlib.h>
                                 ;      72 #include <string.h>
                                 ;      73 
                                 ;      74 /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
                                 ;      75 all the API functions to use the MPU wrappers.  That should only be done when
                                 ;      76 task.h is included from an application file. */
                                 ;      77 #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
                                 ;      78 
                                 ;      79 /* FreeRTOS includes. */
                                 ;      80 #include "FreeRTOS.h"
                                 ;      81 #include "task.h"
                                 ;      82 #include "timers.h"
                                 ;      83 #include "StackMacros.h"
                                 ;      84 
                                 ;      85 /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
                                 ;      86 MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
                                 ;      87 header files above, but not in this file, in order to generate the correct
                                 ;      88 privileged Vs unprivileged linkage and placement. */
                                 ;      89 #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
                                 ;      90 
                                 ;      91 /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
                                 ;      92 functions but without including stdio.h here. */
                                 ;      93 #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
                                 ;      94 	/* At the bottom of this file are two optional functions that can be used
                                 ;      95 	to generate human readable text from the raw data generated by the
                                 ;      96 	uxTaskGetSystemState() function.  Note the formatting functions are provided
                                 ;      97 	for convenience only, and are NOT considered part of the kernel. */
                                 ;      98 	#include <stdio.h>
                                 ;      99 #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
                                 ;     100 
                                 ;     101 /* Sanity check the configuration. */
                                 ;     102 #if configUSE_TICKLESS_IDLE != 0
                                 ;     103 	#if INCLUDE_vTaskSuspend != 1
                                 ;     104 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
                                 ;     105 	#endif /* INCLUDE_vTaskSuspend */
                                 ;     106 #endif /* configUSE_TICKLESS_IDLE */
                                 ;     107 
                                 ;     108 /*
                                 ;     109  * Defines the size, in words, of the stack allocated to the idle task.
                                 ;     110  */
                                 ;     111 #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
                                 ;     112 
                                 ;     113 #if( configUSE_PREEMPTION == 0 )
                                 ;     114 	/* If the cooperative scheduler is being used then a yield should not be
                                 ;     115 	performed just because a higher priority task has been woken. */
                                 ;     116 	#define taskYIELD_IF_USING_PREEMPTION()
                                 ;     117 #else
                                 ;     118 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
                                 ;     119 #endif
                                 ;     120 
                                 ;     121 /* Value that can be assigned to the eNotifyState member of the TCB. */
                                 ;     122 typedef enum
                                 ;     123 {
                                 ;     124 	eNotWaitingNotification = 0,
                                 ;     125 	eWaitingNotification,
                                 ;     126 	eNotified
                                 ;     127 } eNotifyValue;
                                 ;     128 
                                 ;     129 /*
                                 ;     130  * Task control block.  A task control block (TCB) is allocated for each task,
                                 ;     131  * and stores task state information, including a pointer to the task's context
                                 ;     132  * (the task's run time environment, including register values)
                                 ;     133  */
                                 ;     134 typedef struct tskTaskControlBlock
                                 ;     135 {
                                 ;     136 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the tasks stack.  THIS MUST BE THE FIRST MEMBER OF THE TCB
                                 ;     137 
                                 ;     138 	#if ( portUSING_MPU_WRAPPERS == 1 )
                                 ;     139 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MUST BE THE SECOND MEMBER OF THE TCB S
                                 ;     140 		BaseType_t		xUsingStaticallyAllocatedStack; /* Set to pdTRUE if the stack is a statically allocated array, and pdFALSE if the stack 
                                 ;     141 	#endif
                                 ;     142 
                                 ;     143 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from denotes the state of that task
                                 ;     144 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
                                 ;     145 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
                                 ;     146 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
                                 ;     147 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.  Facilitates debugging only. 
                                 ;     148 
                                 ;     149 	#if ( portSTACK_GROWTH > 0 )
                                 ;     150 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack grows up from low memory. */
                                 ;     151 	#endif
                                 ;     152 
                                 ;     153 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
                                 ;     154 		UBaseType_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do not maintain their own count in the port 
                                 ;     155 	#endif
                                 ;     156 
                                 ;     157 	#if ( configUSE_TRACE_FACILITY == 1 )
                                 ;     158 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It allows debuggers to determin
                                 ;     159 		UBaseType_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. */
                                 ;     160 	#endif
                                 ;     161 
                                 ;     162 	#if ( configUSE_MUTEXES == 1 )
                                 ;     163 		UBaseType_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority inheritance mechanism. */
                                 ;     164 		UBaseType_t 	uxMutexesHeld;
                                 ;     165 	#endif
                                 ;     166 
                                 ;     167 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
                                 ;     168 		TaskHookFunction_t pxTaskTag;
                                 ;     169 	#endif
                                 ;     170 
                                 ;     171 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
                                 ;     172 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
                                 ;     173 	#endif
                                 ;     174 
                                 ;     175 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
                                 ;     176 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state. */
                                 ;     177 	#endif
                                 ;     178 
                                 ;     179 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
                                 ;     180 		/* Allocate a Newlib reent structure that is specific to this task.
                                 ;     181 		Note Newlib support has been included by popular demand, but is not
                                 ;     182 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
                                 ;     183 		responsible for resulting newlib operation.  User must be familiar with
                                 ;     184 		newlib and must provide system-wide implementations of the necessary
                                 ;     185 		stubs. Be warned that (at the time of writing) the current newlib design
                                 ;     186 		implements a system-wide malloc() that must be provided with locks. */
                                 ;     187 		struct 	_reent xNewLib_reent;
                                 ;     188 	#endif
                                 ;     189 
                                 ;     190 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
                                 ;     191 		volatile uint32_t ulNotifiedValue;
                                 ;     192 		volatile eNotifyValue eNotifyState;
                                 ;     193 	#endif
                                 ;     194 
                                 ;     195 } tskTCB;
                                 ;     196 
                                 ;     197 /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
                                 ;     198 below to enable the use of older kernel aware debuggers. */
                                 ;     199 typedef tskTCB TCB_t;
                                 ;     200 
                                 ;     201 /*
                                 ;     202  * Some kernel aware debuggers require the data the debugger needs access to to
                                 ;     203  * be global, rather than file scope.
                                 ;     204  */
                                 ;     205 #ifdef portREMOVE_STATIC_QUALIFIER
                                 ;     206 	#define static
                                 ;     207 #endif
                                 ;     208 
                                 ;     209 /*lint -e956 A manual analysis and inspection has been used to determine which
                                 ;     210 static variables must be declared volatile. */
                                 ;     211 
                                 ;     212 PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
                                 ;     213 
                                 ;     214 /* Lists for ready and blocked tasks. --------------------*/
                                 ;     215 PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks. */
                                 ;     216 PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
                                 ;     217 PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one for delays that have
                                 ;     218 PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list currently being used. */
                                 ;     219 PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task list currently being used to hold tasks that have
                                 ;     220 PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the scheduler was suspend
                                 ;     221 
                                 ;     222 #if ( INCLUDE_vTaskDelete == 1 )
                                 ;     223 
                                 ;     224 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but their memory not yet freed. */
                                 ;     225 	PRIVILEGED_DATA static volatile UBaseType_t uxTasksDeleted = ( UBaseType_t ) 0U;
                                 ;     226 
                                 ;     227 #endif
                                 ;     228 
                                 ;     229 #if ( INCLUDE_vTaskSuspend == 1 )
                                 ;     230 
                                 ;     231 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
                                 ;     232 
                                 ;     233 #endif
                                 ;     234 
                                 ;     235 #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
                                 ;     236 
                                 ;     237 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle task.  The idle task is created automat
                                 ;     238 
                                 ;     239 #endif
                                 ;     240 
                                 ;     241 /* Other file private variables. --------------------------------*/
                                 ;     242 PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
                                 ;     243 PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
                                 ;     244 PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
                                 ;     245 PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
                                 ;     246 PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
                                 ;     247 PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
                                 ;     248 PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
                                 ;     249 PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
                                 ;     250 PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= portMAX_DELAY;
                                 ;     251 
                                 ;     252 /* Context switches are held pending while the scheduler is suspended.  Also,
                                 ;     253 interrupts must not manipulate the xGenericListItem of a TCB, or any of the
                                 ;     254 lists the xGenericListItem can be referenced from, if the scheduler is suspended.
                                 ;     255 If an interrupt needs to unblock a task while the scheduler is suspended then it
                                 ;     256 moves the task's event list item into the xPendingReadyList, ready for the
                                 ;     257 kernel to move the task from the pending ready list into the real ready list
                                 ;     258 when the scheduler is unsuspended.  The pending ready list itself can only be
                                 ;     259 accessed from a critical section. */
                                 ;     260 PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
                                 ;     261 
                                 ;     262 #if ( configGENERATE_RUN_TIME_STATS == 1 )
                                 ;     263 
                                 ;     264 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter the last time a task was switched in. */
                                 ;     265 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution time as defined by the run time counter clock. *
                                 ;     266 
                                 ;     267 #endif
                                 ;     268 
                                 ;     269 /*lint +e956 */
                                 ;     270 
                                 ;     271 /* Debugging and trace facilities private variables and macros. ------------*/
                                 ;     272 
                                 ;     273 /*
                                 ;     274  * The value used to fill the stack of a task when the task is created.  This
                                 ;     275  * is used purely for checking the high water mark for tasks.
                                 ;     276  */
                                 ;     277 #define tskSTACK_FILL_BYTE	( 0xa5U )
                                 ;     278 
                                 ;     279 /*
                                 ;     280  * Macros used by vListTask to indicate which state a task is in.
                                 ;     281  */
                                 ;     282 #define tskBLOCKED_CHAR		( 'B' )
                                 ;     283 #define tskREADY_CHAR		( 'R' )
                                 ;     284 #define tskDELETED_CHAR		( 'D' )
                                 ;     285 #define tskSUSPENDED_CHAR	( 'S' )
                                 ;     286 
                                 ;     287 /*-----------------------------------------------------------*/
                                 ;     288 
                                 ;     289 #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
                                 ;     290 
                                 ;     291 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
                                 ;     292 	performed in a generic way that is not optimised to any particular
                                 ;     293 	microcontroller architecture. */
                                 ;     294 
                                 ;     295 	/* uxTopReadyPriority holds the priority of the highest priority ready
                                 ;     296 	state task. */
                                 ;     297 	#define taskRECORD_READY_PRIORITY( uxPriority )														
                                 ;     298 	{																			
                                 ;     299 		if( ( uxPriority ) > uxTopReadyPriority )													
                                 ;     300 		{																		
                                 ;     301 			uxTopReadyPriority = ( uxPriority );													
                                 ;     302 		}																		
                                 ;     303 	} /* taskRECORD_READY_PRIORITY */
                                 ;     304 
                                 ;     305 	/*-----------------------------------------------------------*/
                                 ;     306 
                                 ;     307 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														
                                 ;     308 	{																			
                                 ;     309 		/* Find the highest priority queue that contains ready tasks. */								\
                                 ;     310 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
                                 ;     311 		{																		
                                 ;     312 			configASSERT( uxTopReadyPriority );													
                                 ;     313 			--uxTopReadyPriority;															
                                 ;     314 		}																		
                                 ;     315 																				
                                 ;     316 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
                                 ;     317 		the	same priority get an equal share of the processor time. */									\
                                 ;     318 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
                                 ;     319 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
                                 ;     320 
                                 ;     321 	/*-----------------------------------------------------------*/
                                 ;     322 
                                 ;     323 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
                                 ;     324 	they are only required when a port optimised method of task selection is
                                 ;     325 	being used. */
                                 ;     326 	#define taskRESET_READY_PRIORITY( uxPriority )
                                 ;     327 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
                                 ;     328 
                                 ;     329 #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
                                 ;     330 
                                 ;     331 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
                                 ;     332 	performed in a way that is tailored to the particular microcontroller
                                 ;     333 	architecture being used. */
                                 ;     334 
                                 ;     335 	/* A port optimised version is provided.  Call the port defined macros. */
                                 ;     336 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyPriority )
                                 ;     337 
                                 ;     338 	/*-----------------------------------------------------------*/
                                 ;     339 
                                 ;     340 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														
                                 ;     341 	{																			
                                 ;     342 	UBaseType_t uxTopPriority;																
                                 ;     343 																				
                                 ;     344 		/* Find the highest priority queue that contains ready tasks. */							\
                                 ;     345 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
                                 ;     346 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
                                 ;     347 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
                                 ;     348 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
                                 ;     349 
                                 ;     350 	/*-----------------------------------------------------------*/
                                 ;     351 
                                 ;     352 	/* A port optimised version is provided, call it only if the TCB being reset
                                 ;     353 	is being referenced from a ready list.  If it is referenced from a delayed
                                 ;     354 	or suspended list then it won't be in a ready list. */
                                 ;     355 	#define taskRESET_READY_PRIORITY( uxPriority )														
                                 ;     356 	{																			
                                 ;     357 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
                                 ;     358 		{																		
                                 ;     359 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
                                 ;     360 		}																		
                                 ;     361 	}
                                 ;     362 
                                 ;     363 #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
                                 ;     364 
                                 ;     365 /*-----------------------------------------------------------*/
                                 ;     366 
                                 ;     367 /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
                                 ;     368 count overflows. */
                                 ;     369 #define taskSWITCH_DELAYED_LISTS()																
                                 ;     370 {																				
                                 ;     371 	List_t *pxTemp;																		
                                 ;     372 																				
                                 ;     373 	/* The delayed tasks list should be empty when the lists are switched. */						\
                                 ;     374 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
                                 ;     375 																				
                                 ;     376 	pxTemp = pxDelayedTaskList;																
                                 ;     377 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
                                 ;     378 	pxOverflowDelayedTaskList = pxTemp;															
                                 ;     379 	xNumOfOverflows++;																	
                                 ;     380 	prvResetNextTaskUnblockTime();																
                                 ;     381 }
                                 ;     382 
                                 ;     383 /*-----------------------------------------------------------*/
                                 ;     384 
                                 ;     385 /*
                                 ;     386  * Place the task represented by pxTCB into the appropriate ready list for
                                 ;     387  * the task.  It is inserted at the end of the list.
                                 ;     388  */
                                 ;     389 #define prvAddTaskToReadyList( pxTCB )															
                                 ;     390 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														
                                 ;     391 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
                                 ;     392 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) )
                                 ;     393 /*-----------------------------------------------------------*/
                                 ;     394 
                                 ;     395 /*
                                 ;     396  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
                                 ;     397  * where NULL is used to indicate that the handle of the currently executing
                                 ;     398  * task should be used in place of the parameter.  This macro simply checks to
                                 ;     399  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
                                 ;     400  */
                                 ;     401 #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( pxHandle ) )
                                 ;     402 
                                 ;     403 /* The item value of the event list item is normally used to hold the priority
                                 ;     404 of the task to which it belongs (coded to allow it to be held in reverse
                                 ;     405 priority order).  However, it is occasionally borrowed for other purposes.  It
                                 ;     406 is important its value is not updated due to a task priority change while it is
                                 ;     407 being used for another purpose.  The following bit definition is used to inform
                                 ;     408 the scheduler that the value should not be changed - in which case it is the
                                 ;     409 responsibility of whichever module is using the value to ensure it gets set back
                                 ;     410 to its original value when it is released. */
                                 ;     411 #if configUSE_16_BIT_TICKS == 1
                                 ;     412 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
                                 ;     413 #else
                                 ;     414 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
                                 ;     415 #endif
                                 ;     416 
                                 ;     417 /* Callback function prototypes. --------------------------*/
                                 ;     418 #if configCHECK_FOR_STACK_OVERFLOW > 0
                                 ;     419 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
                                 ;     420 #endif
                                 ;     421 
                                 ;     422 #if configUSE_TICK_HOOK > 0
                                 ;     423 	extern void vApplicationTickHook( void );
                                 ;     424 #endif
                                 ;     425 
                                 ;     426 /* File private functions. --------------------------------*/
                                 ;     427 
                                 ;     428 /*
                                 ;     429  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
                                 ;     430  * into the TCB structure.
                                 ;     431  */
                                 ;     432 static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const u
                                 ;     433 
                                 ;     434 /**
                                 ;     435  * Utility task that simply returns pdTRUE if the task referenced by xTask is
                                 ;     436  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
                                 ;     437  * is in any other state.
                                 ;     438  */
                                 ;     439 #if ( INCLUDE_vTaskSuspend == 1 )
                                 ;     440 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
                                 ;     441 #endif /* INCLUDE_vTaskSuspend */
                                 ;     442 
                                 ;     443 /*
                                 ;     444  * Utility to ready all the lists used by the scheduler.  This is called
                                 ;     445  * automatically upon the creation of the first task.
                                 ;     446  */
                                 ;     447 static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
                                 ;     448 
                                 ;     449 /*
                                 ;     450  * The idle task, which as all tasks is implemented as a never ending loop.
                                 ;     451  * The idle task is automatically created and added to the ready lists upon
                                 ;     452  * creation of the first user task.
                                 ;     453  *
                                 ;     454  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
                                 ;     455  * language extensions.  The equivalent prototype for this function is:
                                 ;     456  *
                                 ;     457  * void prvIdleTask( void *pvParameters );
                                 ;     458  *
                                 ;     459  */
                                 ;     460 static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
                                 ;     461 
                                 ;     462 /*
                                 ;     463  * Utility to free all memory allocated by the scheduler to hold a TCB,
                                 ;     464  * including the stack pointed to by the TCB.
                                 ;     465  *
                                 ;     466  * This does not free memory allocated by the task itself (i.e. memory
                                 ;     467  * allocated by calls to pvPortMalloc from within the tasks application code).
                                 ;     468  */
                                 ;     469 #if ( INCLUDE_vTaskDelete == 1 )
                                 ;     470 
                                 ;     471 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
                                 ;     472 
                                 ;     473 #endif
                                 ;     474 
                                 ;     475 /*
                                 ;     476  * Used only by the idle task.  This checks to see if anything has been placed
                                 ;     477  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
                                 ;     478  * and its TCB deleted.
                                 ;     479  */
                                 ;     480 static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
                                 ;     481 
                                 ;     482 /*
                                 ;     483  * The currently executing task is entering the Blocked state.  Add the task to
                                 ;     484  * either the current or the overflow delayed task list.
                                 ;     485  */
                                 ;     486 static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake ) PRIVILEGED_FUNCTION;
                                 ;     487 
                                 ;     488 /*
                                 ;     489  * Allocates memory from the heap for a TCB and associated stack.  Checks the
                                 ;     490  * allocation was successful.
                                 ;     491  */
                                 ;     492 static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer ) PRIVILEGED_FUNCTION;
                                 ;     493 
                                 ;     494 /*
                                 ;     495  * Fills an TaskStatus_t structure with information on each task that is
                                 ;     496  * referenced from the pxList list (which may be a ready list, a delayed list,
                                 ;     497  * a suspended list, etc.).
                                 ;     498  *
                                 ;     499  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
                                 ;     500  * NORMAL APPLICATION CODE.
                                 ;     501  */
                                 ;     502 #if ( configUSE_TRACE_FACILITY == 1 )
                                 ;     503 
                                 ;     504 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState ) PRIVILEGED_FUNCTION;
                                 ;     505 
                                 ;     506 #endif
                                 ;     507 
                                 ;     508 /*
                                 ;     509  * When a task is created, the stack of the task is filled with a known value.
                                 ;     510  * This function determines the 'high water mark' of the task stack by
                                 ;     511  * determining how much of the stack remains at the original preset value.
                                 ;     512  */
                                 ;     513 #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
                                 ;     514 
                                 ;     515 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
                                 ;     516 
                                 ;     517 #endif
                                 ;     518 
                                 ;     519 /*
                                 ;     520  * Return the amount of time, in ticks, that will pass before the kernel will
                                 ;     521  * next move a task from the Blocked state to the Running state.
                                 ;     522  *
                                 ;     523  * This conditional compilation should use inequality to 0, not equality to 1.
                                 ;     524  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
                                 ;     525  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
                                 ;     526  * set to a value other than 1.
                                 ;     527  */
                                 ;     528 #if ( configUSE_TICKLESS_IDLE != 0 )
                                 ;     529 
                                 ;     530 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
                                 ;     531 
                                 ;     532 #endif
                                 ;     533 
                                 ;     534 /*
                                 ;     535  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
                                 ;     536  * will exit the Blocked state.
                                 ;     537  */
                                 ;     538 static void prvResetNextTaskUnblockTime( void );
                                 ;     539 
                                 ;     540 #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
                                 ;     541 
                                 ;     542 	/*
                                 ;     543 	 * Helper function used to pad task names with spaces when printing out
                                 ;     544 	 * human readable tables of task information.
                                 ;     545 	 */
                                 ;     546 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
                                 ;     547 
                                 ;     548 #endif
                                 ;     549 /*-----------------------------------------------------------*/
                                 ;     550 
                                 ;     551 BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPr
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",551
00000000 7EA6                    		PUSH.L R6
00000002 7100D0                  		ADD #0FFFFFFD0H, R0
00000005 A289                    		MOV.L R1, 2CH[R0]
00000007 A282                    		MOV.L R2, 28H[R0]
00000009 948B                    		MOV.W R3, 26H[R0]
0000000B A204                    		MOV.L R4, 20H[R0]
0000000D E5000E07                		MOV.L 38H[R0], 1CH[R0]
00000011 E5000F06                		MOV.L 3CH[R0], 18H[R0]
00000015 E5001005                		MOV.L 40H[R0], 14H[R0]
00000019 E5001104                		MOV.L 44H[R0], 10H[R0]
                                 ;     552 {
                                 ;     553 BaseType_t xReturn;
                                 ;     554 TCB_t * pxNewTCB;
                                 ;     555 StackType_t *pxTopOfStack;
                                 ;     556 
                                 ;     557 	configASSERT( pxTaskCode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",557
0000001D AA89                    		MOV.L 2CH[R0], R1
0000001F 6101                    		CMP #00H, R1
00000021 18                   S  		BNE L13
00000022                         L12:	; bb12
00000022 05rrrrrr             A  		BSR _vAssertCalled
00000026                         L13:	; bb17
                                 ;     558 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",558
00000026 A989                    		MOV.L 1CH[R0], R1
00000028 6181                    		CMP #08H, R1
0000002A 23rr                    		BLTU L15
0000002C                         L14:	; bb18
0000002C 05rrrrrr             A  		BSR _vAssertCalled
00000030                         L15:	; bb26
                                 ;     559 
                                 ;     560 	/* Allocate the memory required by the TCB and stack for the new task,
                                 ;     561 	checking that the allocation was successful. */
                                 ;     562 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",562
00000030 A90A                    		MOV.L 14H[R0], R2
00000032 BC89                    		MOVU.W 26H[R0], R1
00000034 39rrrr               W  		BSR __$prvAllocateTCBAndStack
00000037 A009                    		MOV.L R1, 04H[R0]
00000039                         L16:	; bb26.split
                                 ;     563 
                                 ;     564 	if( pxNewTCB != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",564
00000039 A809                    		MOV.L 04H[R0], R1
0000003B 6101                    		CMP #00H, R1
0000003D 3Arrrr               W  		BEQ L41
00000040                         L17:	; bb31
                                 ;     565 	{
                                 ;     566 		#if( portUSING_MPU_WRAPPERS == 1 )
                                 ;     567 			/* Should the task be created in privileged mode? */
                                 ;     568 			BaseType_t xRunPrivileged;
                                 ;     569 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
                                 ;     570 			{
                                 ;     571 				xRunPrivileged = pdTRUE;
                                 ;     572 			}
                                 ;     573 			else
                                 ;     574 			{
                                 ;     575 				xRunPrivileged = pdFALSE;
                                 ;     576 			}
                                 ;     577 			uxPriority &= ~portPRIVILEGE_BIT;
                                 ;     578 
                                 ;     579 			if( puxStackBuffer != NULL )
                                 ;     580 			{
                                 ;     581 				/* The application provided its own stack.  Note this so no
                                 ;     582 				attempt is made to delete the stack should that task be
                                 ;     583 				deleted. */
                                 ;     584 				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
                                 ;     585 			}
                                 ;     586 			else
                                 ;     587 			{
                                 ;     588 				/* The stack was allocated dynamically.  Note this so it can be
                                 ;     589 				deleted again if the task is deleted. */
                                 ;     590 				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
                                 ;     591 			}
                                 ;     592 		#endif /* portUSING_MPU_WRAPPERS == 1 */
                                 ;     593 
                                 ;     594 		/* Calculate the top of stack address.  This depends on whether the
                                 ;     595 		stack grows from high memory to low (as per the 80x86) or vice versa.
                                 ;     596 		portSTACK_GROWTH is used to make the result positive or negative as
                                 ;     597 		required by the port. */
                                 ;     598 		#if( portSTACK_GROWTH < 0 )
                                 ;     599 		{
                                 ;     600 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",600
00000040 BC89                    		MOVU.W 26H[R0], R1
00000042 6C21                    		SHLL #02H, R1
00000044 A80A                    		MOV.L 04H[R0], R2
00000046 0689210C                		ADD 30H[R2].L, R1
0000004A 6041                    		SUB #04H, R1
0000004C A081                    		MOV.L R1, 08H[R0]
0000004E                         L18:	; bb31.split
                                 ;     601 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",601
0000004E A881                    		MOV.L 08H[R0], R1
00000050 7521F8                  		AND #0FFFFFFF8H, R1
00000053 A081                    		MOV.L R1, 08H[R0]
00000055                         L19:	; bb31.split1
00000055 667E                    		MOV.L #00000007H, R14
                                 ;     602 
                                 ;     603 			/* Check the alignment of the calculated top of stack is correct. */
                                 ;     604 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",604
00000057 06A10C0E02              		TST 08H[R0].L, R14
0000005C 10                   S  		BEQ L21
0000005D                         L20:	; bb44
0000005D 05rrrrrr             A  		BSR _vAssertCalled
00000061                         L21:	; bb53
                                 ;     605 		}
                                 ;     606 		#else /* portSTACK_GROWTH */
                                 ;     607 		{
                                 ;     608 			pxTopOfStack = pxNewTCB->pxStack;
                                 ;     609 
                                 ;     610 			/* Check the alignment of the stack buffer is correct. */
                                 ;     611 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
                                 ;     612 
                                 ;     613 			/* If we want to use stack checking on architectures that use
                                 ;     614 			a positive stack growth direction then we also need to store the
                                 ;     615 			other extreme of the stack space. */
                                 ;     616 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
                                 ;     617 		}
                                 ;     618 		#endif /* portSTACK_GROWTH */
                                 ;     619 
                                 ;     620 		/* Setup the newly allocated TCB with the initial state of the task. */
                                 ;     621 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",621
00000061 9C8D                    		MOV.W 26H[R0], R5
00000063 A904                    		MOV.L 10H[R0], R4
00000065 A98B                    		MOV.L 1CH[R0], R3
00000067 AA82                    		MOV.L 28H[R0], R2
00000069 A809                    		MOV.L 04H[R0], R1
0000006B 6040                    		SUB #04H, R0
0000006D D305                    		MOV.W R5, [R0]
0000006F 39rrrr               W  		BSR __$prvInitialiseTCBVariables
00000072 6240                    		ADD #04H, R0
00000074                         L22:	; bb53.split
                                 ;     622 
                                 ;     623 		/* Initialize the TCB stack to look as if the task was already running,
                                 ;     624 		but had been interrupted by the scheduler.  The return address is set
                                 ;     625 		to the start of the task function. Once the stack has been initialised
                                 ;     626 		the	top of stack variable is updated. */
                                 ;     627 		#if( portUSING_MPU_WRAPPERS == 1 )
                                 ;     628 		{
                                 ;     629 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
                                 ;     630 		}
                                 ;     631 		#else /* portUSING_MPU_WRAPPERS */
                                 ;     632 		{
                                 ;     633 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",633
00000074 AA03                    		MOV.L 20H[R0], R3
00000076 AA8A                    		MOV.L 2CH[R0], R2
00000078 A881                    		MOV.L 08H[R0], R1
0000007A A80E                    		MOV.L 04H[R0], R6
0000007C 05rrrrrr             A  		BSR _pxPortInitialiseStack
00000080 E361                    		MOV.L R1, [R6]
00000082                         L23:	; bb53.split2
                                 ;     634 		}
                                 ;     635 		#endif /* portUSING_MPU_WRAPPERS */
                                 ;     636 
                                 ;     637 		if( ( void * ) pxCreatedTask != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",637
00000082 A981                    		MOV.L 18H[R0], R1
00000084 6101                    		CMP #00H, R1
00000086 10                   S  		BEQ L25
00000087                         L24:	; bb66
                                 ;     638 		{
                                 ;     639 			/* Pass the TCB out - in an anonymous way.  The calling function/
                                 ;     640 			task can use this as a handle to delete the task later if
                                 ;     641 			required.*/
                                 ;     642 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",642
00000087 A809                    		MOV.L 04H[R0], R1
00000089 A982                    		MOV.L 18H[R0], R2
0000008B E321                    		MOV.L R1, [R2]
0000008D                         L25:	; bb76
                                 ;     643 		}
                                 ;     644 		else
                                 ;     645 		{
                                 ;     646 			mtCOVERAGE_TEST_MARKER();
                                 ;     647 		}
                                 ;     648 
                                 ;     649 		/* Ensure interrupts don't access the task lists while they are being
                                 ;     650 		updated. */
                                 ;     651 		taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",651
0000008D 39rrrr               W  		BSR _vTaskEnterCritical
00000090                         L26:	; bb76.split
                                 ;     652 		{
                                 ;     653 			uxCurrentNumberOfTasks++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",653
00000090 FBE2rrrrrrrr            		MOV.L #__$uxCurrentNumberOfTasks, R14
00000096 ECEF                    		MOV.L [R14], R15
00000098 621F                    		ADD #01H, R15
0000009A E3EF                    		MOV.L R15, [R14]
0000009C                         L27:	; bb76.split3
                                 ;     654 			if( pxCurrentTCB == NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",654
0000009C FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000000A2 ECEE                    		MOV.L [R14], R14
000000A4 610E                    		CMP #00H, R14
000000A6 21rr                    		BNE L31
000000A8                         L28:	; bb80
                                 ;     655 			{
                                 ;     656 				/* There are no other tasks, or all the other tasks are in
                                 ;     657 				the suspended state - make this the current task. */
                                 ;     658 				pxCurrentTCB =  pxNewTCB;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",658
000000A8 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000000AE E10E01                  		MOV.L 04H[R0], [R14]
000000B1                         L29:	; bb80.split
                                 ;     659 
                                 ;     660 				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",660
000000B1 FBE2rrrrrrrr            		MOV.L #__$uxCurrentNumberOfTasks, R14
000000B7 ECEE                    		MOV.L [R14], R14
000000B9 611E                    		CMP #01H, R14
000000BB 21rr                    		BNE L34
000000BD                         L30:	; bb83
                                 ;     661 				{
                                 ;     662 					/* This is the first task to be created so do the preliminary
                                 ;     663 					initialisation required.  We will not recover if this call
                                 ;     664 					fails, but we will report the failure. */
                                 ;     665 					prvInitialiseTaskLists();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",665
000000BD 39rrrr               W  		BSR __$prvInitialiseTaskLists
000000C0 2Err                 B  		BRA L34
000000C2                         L31:	; bb91
                                 ;     666 				}
                                 ;     667 				else
                                 ;     668 				{
                                 ;     669 					mtCOVERAGE_TEST_MARKER();
                                 ;     670 				}
                                 ;     671 			}
                                 ;     672 			else
                                 ;     673 			{
                                 ;     674 				/* If the scheduler is not already running, make this task the
                                 ;     675 				current task if it is the highest priority task to be created
                                 ;     676 				so far. */
                                 ;     677 				if( xSchedulerRunning == pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",677
000000C2 FBE2rrrrrrrr            		MOV.L #__$xSchedulerRunning, R14
000000C8 ECEE                    		MOV.L [R14], R14
000000CA 610E                    		CMP #00H, R14
000000CC 21rr                    		BNE L34
000000CE                         L32:	; bb93
                                 ;     678 				{
                                 ;     679 					if( pxCurrentTCB->uxPriority <= uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",679
000000CE FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000000D4 ECE1                    		MOV.L [R14], R1
000000D6 AA99                    		MOV.L 2CH[R1], R1
000000D8 06850107                		CMP 1CH[R0].L, R1
000000DC 24rr                    		BGTU L34
000000DE                         L33:	; bb94
                                 ;     680 					{
                                 ;     681 						pxCurrentTCB = pxNewTCB;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",681
000000DE FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000000E4 E10E01                  		MOV.L 04H[R0], [R14]
000000E7                         L34:	; bb115
                                 ;     682 					}
                                 ;     683 					else
                                 ;     684 					{
                                 ;     685 						mtCOVERAGE_TEST_MARKER();
                                 ;     686 					}
                                 ;     687 				}
                                 ;     688 				else
                                 ;     689 				{
                                 ;     690 					mtCOVERAGE_TEST_MARKER();
                                 ;     691 				}
                                 ;     692 			}
                                 ;     693 
                                 ;     694 			uxTaskNumber++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",694
000000E7 FBE2rrrrrrrr            		MOV.L #__$uxTaskNumber, R14
000000ED ECEF                    		MOV.L [R14], R15
000000EF 621F                    		ADD #01H, R15
000000F1 E3EF                    		MOV.L R15, [R14]
000000F3                         L35:	; bb115.split
                                 ;     695 
                                 ;     696 			#if ( configUSE_TRACE_FACILITY == 1 )
                                 ;     697 			{
                                 ;     698 				/* Add a counter into the TCB for tracing only. */
                                 ;     699 				pxNewTCB->uxTCBNumber = uxTaskNumber;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",699
000000F3 FBE2rrrrrrrr            		MOV.L #__$uxTaskNumber, R14
000000F9 A809                    		MOV.L 04H[R0], R1
000000FB E4E111                  		MOV.L [R14], 44H[R1]
000000FE                         L36:	; bb115.split4
                                 ;     700 			}
                                 ;     701 			#endif /* configUSE_TRACE_FACILITY */
                                 ;     702 			traceTASK_CREATE( pxNewTCB );
                                 ;     703 
                                 ;     704 			prvAddTaskToReadyList( pxNewTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",704
000000FE A809                    		MOV.L 04H[R0], R1
00000100 AA99                    		MOV.L 2CH[R1], R1
00000102 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000108 0684E1                  		CMP [R14].L, R1
0000010B 25rr                    		BLEU L38
0000010D                         L37:	; bb122
0000010D A809                    		MOV.L 04H[R0], R1
0000010F FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000115 E11E0B                  		MOV.L 2CH[R1], [R14]
00000118                         L38:	; bb133
00000118 A80A                    		MOV.L 04H[R0], R2
0000011A AAAB                    		MOV.L 2CH[R2], R3
0000011C 751314                  		MUL #14H, R3
0000011F FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
00000125 4B31                    		ADD R3, R1
00000127 6242                    		ADD #04H, R2
00000129 05rrrrrr             A  		BSR _vListInsertEnd
0000012D                         L39:	; bb133.split
                                 ;     705 
                                 ;     706 			xReturn = pdPASS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",706
0000012D F80601                  		MOV.L #00000001H, [R0]
00000130                         L40:	; bb133.split6
                                 ;     707 			portSETUP_TCB( pxNewTCB );
                                 ;     708 		}
                                 ;     709 		taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",709
00000130 39rrrr               W  		BSR _vTaskExitCritical
00000133 08                   S  		BRA L42
00000134                         L41:	; bb141
                                 ;     710 	}
                                 ;     711 	else
                                 ;     712 	{
                                 ;     713 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",713
00000134 F806FF                  		MOV.L #0FFFFFFFFH, [R0]
00000137                         L42:	; bb147
                                 ;     714 		traceTASK_CREATE_FAILED();
                                 ;     715 	}
                                 ;     716 
                                 ;     717 	if( xReturn == pdPASS )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",717
00000137 EC01                    		MOV.L [R0], R1
00000139 6111                    		CMP #01H, R1
0000013B 21rr                    		BNE L46
0000013D                         L43:	; bb149
                                 ;     718 	{
                                 ;     719 		if( xSchedulerRunning != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",719
0000013D FBE2rrrrrrrr            		MOV.L #__$xSchedulerRunning, R14
00000143 ECEE                    		MOV.L [R14], R14
00000145 610E                    		CMP #00H, R14
00000147 20rr                    		BEQ L46
00000149                         L44:	; bb151
                                 ;     720 		{
                                 ;     721 			/* If the created task is of a higher priority than the current task
                                 ;     722 			then it should run now. */
                                 ;     723 			if( pxCurrentTCB->uxPriority < uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",723
00000149 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000014F ECE1                    		MOV.L [R14], R1
00000151 AA99                    		MOV.L 2CH[R1], R1
00000153 06850107                		CMP 1CH[R0].L, R1
00000157 22rr                    		BGEU L46
00000159                         L45:	; bb152
                                 ;     724 			{
                                 ;     725 				taskYIELD_IF_USING_PREEMPTION();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",725
                                 		._LINE_TOP  inline_asm
                                  
00000159 7EA5                    	PUSH.L R5
                                 	 
0000015B FB5EE07208              	MOV.L #553696, R5
00000160 F85401                  	MOV.B #1, [R5]
                                 	 
00000163 EC55                    	MOV.L [R5], R5
                                 	 
00000165 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
00000167                         L46:	; bb172
                                 ;     726 			}
                                 ;     727 			else
                                 ;     728 			{
                                 ;     729 				mtCOVERAGE_TEST_MARKER();
                                 ;     730 			}
                                 ;     731 		}
                                 ;     732 		else
                                 ;     733 		{
                                 ;     734 			mtCOVERAGE_TEST_MARKER();
                                 ;     735 		}
                                 ;     736 	}
                                 ;     737 
                                 ;     738 	return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",738
00000167 EC01                    		MOV.L [R0], R1
00000169 A089                    		MOV.L R1, 0CH[R0]
0000016B                         L47:	; bb172.split
                                 ;     739 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",739
0000016B 3F660D                  		RTSD #34H, R6-R6
0000016E                         _vTaskDelete:
                                 		.STACK	_vTaskDelete=16
                                 ;     740 /*-----------------------------------------------------------*/
                                 ;     741 
                                 ;     742 #if ( INCLUDE_vTaskDelete == 1 )
                                 ;     743 
                                 ;     744 	void vTaskDelete( TaskHandle_t xTaskToDelete )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",744
0000016E 60C0                    		SUB #0CH, R0
00000170 A081                    		MOV.L R1, 08H[R0]
                                 ;     745 	{
                                 ;     746 	TCB_t *pxTCB;
                                 ;     747 
                                 ;     748 		taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",748
00000172 39rrrr               W  		BSR _vTaskEnterCritical
00000175                         L49:	; entry.split
                                 ;     749 		{
                                 ;     750 			/* If null is passed in here then it is the calling task that is
                                 ;     751 			being deleted. */
                                 ;     752 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",752
00000175 A881                    		MOV.L 08H[R0], R1
00000177 6101                    		CMP #00H, R1
00000179 18                   S  		BNE L51
0000017A                         L50:	; bb
0000017A FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000180 E0E0                    		MOV.L [R14], [R0]
00000182 08                   S  		BRA L52
00000183                         L51:	; bb6
00000183 E10002                  		MOV.L 08H[R0], [R0]
00000186                         L52:	; bb9
00000186 EC01                    		MOV.L [R0], R1
00000188 A009                    		MOV.L R1, 04H[R0]
                                 ;     753 
                                 ;     754 			/* Remove task from the ready list and place in the	termination list.
                                 ;     755 			This will stop the task from be scheduled.  The idle task will check
                                 ;     756 			the termination list and free up any memory allocated by the
                                 ;     757 			scheduler for the TCB and stack. */
                                 ;     758 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",758
0000018A 6241                    		ADD #04H, R1
0000018C 05rrrrrr             A  		BSR _uxListRemove
00000190                         L53:	; bb9.split
                                 ;     759 			{
                                 ;     760 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
                                 ;     761 			}
                                 ;     762 			else
                                 ;     763 			{
                                 ;     764 				mtCOVERAGE_TEST_MARKER();
                                 ;     765 			}
                                 ;     766 
                                 ;     767 			/* Is the task waiting on an event also? */
                                 ;     768 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",768
00000190 A809                    		MOV.L 04H[R0], R1
00000192 AA91                    		MOV.L 28H[R1], R1
00000194 6101                    		CMP #00H, R1
00000196 10                   S  		BEQ L55
00000197                         L54:	; bb22
                                 ;     769 			{
                                 ;     770 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",770
00000197 A809                    		MOV.L 04H[R0], R1
00000199 711118                  		ADD #18H, R1
0000019C 05rrrrrr             A  		BSR _uxListRemove
000001A0                         L55:	; bb34
                                 ;     771 			}
                                 ;     772 			else
                                 ;     773 			{
                                 ;     774 				mtCOVERAGE_TEST_MARKER();
                                 ;     775 			}
                                 ;     776 
                                 ;     777 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",777
000001A0 A80A                    		MOV.L 04H[R0], R2
000001A2 6242                    		ADD #04H, R2
000001A4 FB12rrrrrrrr            		MOV.L #__$xTasksWaitingTermination, R1
000001AA 05rrrrrr             A  		BSR _vListInsertEnd
000001AE                         L56:	; bb34.split
                                 ;     778 
                                 ;     779 			/* Increment the ucTasksDeleted variable so the idle task knows
                                 ;     780 			there is a task that has been deleted and that it should therefore
                                 ;     781 			check the xTasksWaitingTermination list. */
                                 ;     782 			++uxTasksDeleted;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",782
000001AE FBE2rrrrrrrr            		MOV.L #__$uxTasksDeleted, R14
000001B4 ECEF                    		MOV.L [R14], R15
000001B6 621F                    		ADD #01H, R15
000001B8 E3EF                    		MOV.L R15, [R14]
000001BA                         L57:	; bb34.split1
                                 ;     783 
                                 ;     784 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
                                 ;     785 			can detect that the task lists need re-generating. */
                                 ;     786 			uxTaskNumber++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",786
000001BA FBE2rrrrrrrr            		MOV.L #__$uxTaskNumber, R14
000001C0 ECEF                    		MOV.L [R14], R15
000001C2 621F                    		ADD #01H, R15
000001C4 E3EF                    		MOV.L R15, [R14]
000001C6                         L58:	; bb34.split2
                                 ;     787 
                                 ;     788 			traceTASK_DELETE( pxTCB );
                                 ;     789 		}
                                 ;     790 		taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",790
000001C6 39rrrr               W  		BSR _vTaskExitCritical
000001C9                         L59:	; bb34.split3
                                 ;     791 
                                 ;     792 		/* Force a reschedule if it is the currently running task that has just
                                 ;     793 		been deleted. */
                                 ;     794 		if( xSchedulerRunning != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",794
000001C9 FBE2rrrrrrrr            		MOV.L #__$xSchedulerRunning, R14
000001CF ECEE                    		MOV.L [R14], R14
000001D1 610E                    		CMP #00H, R14
000001D3 20rr                    		BEQ L67
000001D5                         L60:	; bb43
                                 ;     795 		{
                                 ;     796 			if( pxTCB == pxCurrentTCB )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",796
000001D5 A809                    		MOV.L 04H[R0], R1
000001D7 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000001DD 0684E1                  		CMP [R14].L, R1
000001E0 21rr                    		BNE L64
000001E2                         L61:	; bb45
                                 ;     797 			{
                                 ;     798 				configASSERT( uxSchedulerSuspended == 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",798
000001E2 FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
000001E8 ECEE                    		MOV.L [R14], R14
000001EA 610E                    		CMP #00H, R14
000001EC 10                   S  		BEQ L63
000001ED                         L62:	; bb46
000001ED 05rrrrrr             A  		BSR _vAssertCalled
000001F1                         L63:	; bb53
                                 ;     799 
                                 ;     800 				/* The pre-delete hook is primarily for the Windows simulator,
                                 ;     801 				in which Windows specific clean up operations are performed,
                                 ;     802 				after which it is not possible to yield away from this task -
                                 ;     803 				hence xYieldPending is used to latch that a context switch is
                                 ;     804 				required. */
                                 ;     805 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
                                 ;     806 				portYIELD_WITHIN_API();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",806
                                 		._LINE_TOP  inline_asm
                                  
000001F1 7EA5                    	PUSH.L R5
                                 	 
000001F3 FB5EE07208              	MOV.L #553696, R5
000001F8 F85401                  	MOV.B #1, [R5]
                                 	 
000001FB EC55                    	MOV.L [R5], R5
                                 	 
000001FD 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
000001FF 6703                    		RTSD #0CH
00000201                         L64:	; bb54
                                 ;     807 			}
                                 ;     808 			else
                                 ;     809 			{
                                 ;     810 				/* Reset the next expected unblock time in case it referred to
                                 ;     811 				the task that has just been deleted. */
                                 ;     812 				taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",812
00000201 39rrrr               W  		BSR _vTaskEnterCritical
00000204                         L65:	; bb54.split
                                 ;     813 				{
                                 ;     814 					prvResetNextTaskUnblockTime();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",814
00000204 39rrrr               W  		BSR __$prvResetNextTaskUnblockTime
00000207                         L66:	; bb54.split4
                                 ;     815 				}
                                 ;     816 				taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",816
00000207 39rrrr               W  		BSR _vTaskExitCritical
0000020A 6703                    		RTSD #0CH
0000020C                         L67:	; return
                                 ;     817 			}
                                 ;     818 		}
                                 ;     819 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",819
0000020C 6703                    		RTSD #0CH
0000020E                         _vTaskDelayUntil:
                                 		.STACK	_vTaskDelayUntil=32
                                 ;     820 
                                 ;     821 #endif /* INCLUDE_vTaskDelete */
                                 ;     822 /*-----------------------------------------------------------*/
                                 ;     823 
                                 ;     824 #if ( INCLUDE_vTaskDelayUntil == 1 )
                                 ;     825 
                                 ;     826 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",826
0000020E 7100E4                  		ADD #0FFFFFFE4H, R0
00000211 A181                    		MOV.L R1, 18H[R0]
00000213 A10A                    		MOV.L R2, 14H[R0]
                                 ;     827 	{
                                 ;     828 	TickType_t xTimeToWake;
                                 ;     829 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",829
00000215 3E0300                  		MOV.L #00000000H, 0CH[R0]
00000218                         L69:	; entry.split
                                 ;     830 
                                 ;     831 		configASSERT( pxPreviousWakeTime );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",831
00000218 A981                    		MOV.L 18H[R0], R1
0000021A 6101                    		CMP #00H, R1
0000021C 18                   S  		BNE L71
0000021D                         L70:	; bb7
0000021D 05rrrrrr             A  		BSR _vAssertCalled
00000221                         L71:	; bb11
                                 ;     832 		configASSERT( ( xTimeIncrement > 0U ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",832
00000221 A909                    		MOV.L 14H[R0], R1
00000223 6101                    		CMP #00H, R1
00000225 18                   S  		BNE L73
00000226                         L72:	; bb12
00000226 05rrrrrr             A  		BSR _vAssertCalled
0000022A                         L73:	; bb20
                                 ;     833 		configASSERT( uxSchedulerSuspended == 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",833
0000022A FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
00000230 ECEE                    		MOV.L [R14], R14
00000232 610E                    		CMP #00H, R14
00000234 10                   S  		BEQ L75
00000235                         L74:	; bb21
00000235 05rrrrrr             A  		BSR _vAssertCalled
00000239                         L75:	; bb28
                                 ;     834 
                                 ;     835 		vTaskSuspendAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",835
00000239 39rrrr               W  		BSR _vTaskSuspendAll
0000023C                         L76:	; bb28.split
                                 ;     836 		{
                                 ;     837 			/* Minor optimisation.  The tick count cannot change in this
                                 ;     838 			block. */
                                 ;     839 			const TickType_t xConstTickCount = xTickCount;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",839
0000023C FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000242 E4E004                  		MOV.L [R14], 10H[R0]
00000245                         L77:	; bb28.split1
                                 ;     840 
                                 ;     841 			/* Generate the tick time at which the task wants to wake. */
                                 ;     842 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",842
00000245 A981                    		MOV.L 18H[R0], R1
00000247 EC11                    		MOV.L [R1], R1
00000249 06890105                		ADD 14H[R0].L, R1
0000024D A009                    		MOV.L R1, 04H[R0]
0000024F                         L78:	; bb28.split2
                                 ;     843 
                                 ;     844 			if( xConstTickCount < *pxPreviousWakeTime )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",844
0000024F A981                    		MOV.L 18H[R0], R1
00000251 EC1E                    		MOV.L [R1], R14
00000253 06850E01                		CMP 04H[R0].L, R14
00000257 FCDBF4                  		SCGTU.L R15
0000025A 06850E04                		CMP 10H[R0].L, R14
0000025E 25rr                    		BLEU L85
00000260                         L79:	; bb36
00000260 610F                    		CMP #00H, R15
                                 ;     845 			{
                                 ;     846 				/* The tick count has overflowed since this function was
                                 ;     847 				lasted called.  In this case the only time we should ever
                                 ;     848 				actually delay is if the wake time has also	overflowed,
                                 ;     849 				and the wake time is greater than the tick time.  When this
                                 ;     850 				is the case it is as if neither time had overflowed. */
                                 ;     851 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",851
00000262 18                   S  		BNE L81
00000263 2Err                 B  		BRA L83
00000265                         L80:	; bb37
                                 ;     852 				{
                                 ;     853 					xShouldDelay = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",853
00000265 3E0301                  		MOV.L #00000001H, 0CH[R0]
00000268 2Err                 B  		BRA L91
0000026A                         L81:	; bb44
0000026A ED0F01                  		MOV.L 04H[R0], R15
0000026D 06850F04                		CMP 10H[R0].L, R15
00000271 25rr                    		BLEU L83
00000273                         L82:	; bb49
00000273 F80601                  		MOV.L #00000001H, [R0]
00000276 08                   S  		BRA L84
00000277                         L83:	; bb50
00000277 F80600                  		MOV.L #00000000H, [R0]
0000027A                         L84:	; bb51
0000027A EC0F                    		MOV.L [R0], R15
0000027C 610F                    		CMP #00H, R15
0000027E 21rr                    		BNE L80
00000280 2Err                 B  		BRA L91
00000282                         L85:	; bb58
00000282 610F                    		CMP #00H, R15
                                 ;     854 				}
                                 ;     855 				else
                                 ;     856 				{
                                 ;     857 					mtCOVERAGE_TEST_MARKER();
                                 ;     858 				}
                                 ;     859 			}
                                 ;     860 			else
                                 ;     861 			{
                                 ;     862 				/* The tick time has not overflowed.  In this case we will
                                 ;     863 				delay if either the wake time has overflowed, and/or the
                                 ;     864 				tick time is less than the wake time. */
                                 ;     865 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",865
00000284 21rr                    		BNE L88
00000286 08                   S  		BRA L87
00000287                         L86:	; bb59
                                 ;     866 				{
                                 ;     867 					xShouldDelay = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",867
00000287 3E0301                  		MOV.L #00000001H, 0CH[R0]
0000028A 2Err                 B  		BRA L91
0000028C                         L87:	; bb66
0000028C A809                    		MOV.L 04H[R0], R1
0000028E 06850104                		CMP 10H[R0].L, R1
00000292 25rr                    		BLEU L89
00000294                         L88:	; bb71
00000294 F80601                  		MOV.L #00000001H, [R0]
00000297 08                   S  		BRA L90
00000298                         L89:	; bb72
00000298 F80600                  		MOV.L #00000000H, [R0]
0000029B                         L90:	; bb73
0000029B EC01                    		MOV.L [R0], R1
0000029D 6101                    		CMP #00H, R1
0000029F 21rr                    		BNE L86
000002A1                         L91:	; bb85
                                 ;     868 				}
                                 ;     869 				else
                                 ;     870 				{
                                 ;     871 					mtCOVERAGE_TEST_MARKER();
                                 ;     872 				}
                                 ;     873 			}
                                 ;     874 
                                 ;     875 			/* Update the wake time ready for the next call. */
                                 ;     876 			*pxPreviousWakeTime = xTimeToWake;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",876
000002A1 A809                    		MOV.L 04H[R0], R1
000002A3 A982                    		MOV.L 18H[R0], R2
000002A5 E321                    		MOV.L R1, [R2]
000002A7                         L92:	; bb85.split
                                 ;     877 
                                 ;     878 			if( xShouldDelay != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",878
000002A7 A889                    		MOV.L 0CH[R0], R1
000002A9 6101                    		CMP #00H, R1
000002AB 20rr                    		BEQ L95
000002AD                         L93:	; bb90
                                 ;     879 			{
                                 ;     880 				traceTASK_DELAY_UNTIL();
                                 ;     881 
                                 ;     882 				/* Remove the task from the ready list before adding it to the
                                 ;     883 				blocked list as the same list item is used for both lists. */
                                 ;     884 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",884
000002AD FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000002B3 ECE1                    		MOV.L [R14], R1
000002B5 6241                    		ADD #04H, R1
000002B7 05rrrrrr             A  		BSR _uxListRemove
000002BB                         L94:	; bb90.split
                                 ;     885 				{
                                 ;     886 					/* The current task must be in a ready list, so there is
                                 ;     887 					no need to check, and the port reset macro can be called
                                 ;     888 					directly. */
                                 ;     889 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
                                 ;     890 				}
                                 ;     891 				else
                                 ;     892 				{
                                 ;     893 					mtCOVERAGE_TEST_MARKER();
                                 ;     894 				}
                                 ;     895 
                                 ;     896 				prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",896
000002BB A809                    		MOV.L 04H[R0], R1
000002BD 39rrrr               W  		BSR __$prvAddCurrentTaskToDelayedList
000002C0                         L95:	; bb106
                                 ;     897 			}
                                 ;     898 			else
                                 ;     899 			{
                                 ;     900 				mtCOVERAGE_TEST_MARKER();
                                 ;     901 			}
                                 ;     902 		}
                                 ;     903 		xAlreadyYielded = xTaskResumeAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",903
000002C0 39rrrr               W  		BSR _xTaskResumeAll
000002C3 A081                    		MOV.L R1, 08H[R0]
000002C5                         L96:	; bb106.split
                                 ;     904 
                                 ;     905 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
                                 ;     906 		have put ourselves to sleep. */
                                 ;     907 		if( xAlreadyYielded == pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",907
000002C5 A881                    		MOV.L 08H[R0], R1
000002C7 6101                    		CMP #00H, R1
000002C9 21rr                    		BNE L98
000002CB                         L97:	; bb109
                                 ;     908 		{
                                 ;     909 			portYIELD_WITHIN_API();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",909
                                 		._LINE_TOP  inline_asm
                                  
000002CB 7EA5                    	PUSH.L R5
                                 	 
000002CD FB5EE07208              	MOV.L #553696, R5
000002D2 F85401                  	MOV.B #1, [R5]
                                 	 
000002D5 EC55                    	MOV.L [R5], R5
                                 	 
000002D7 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
000002D9 6707                    		RTSD #1CH
000002DB                         L98:	; return
                                 ;     910 		}
                                 ;     911 		else
                                 ;     912 		{
                                 ;     913 			mtCOVERAGE_TEST_MARKER();
                                 ;     914 		}
                                 ;     915 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",915
000002DB 6707                    		RTSD #1CH
000002DD                         _vTaskDelay:
                                 		.STACK	_vTaskDelay=16
                                 ;     916 
                                 ;     917 #endif /* INCLUDE_vTaskDelayUntil */
                                 ;     918 /*-----------------------------------------------------------*/
                                 ;     919 
                                 ;     920 #if ( INCLUDE_vTaskDelay == 1 )
                                 ;     921 
                                 ;     922 	void vTaskDelay( const TickType_t xTicksToDelay )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",922
000002DD 60C0                    		SUB #0CH, R0
000002DF A081                    		MOV.L R1, 08H[R0]
                                 ;     923 	{
                                 ;     924 	TickType_t xTimeToWake;
                                 ;     925 	BaseType_t xAlreadyYielded = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",925
000002E1 3E0100                  		MOV.L #00000000H, 04H[R0]
000002E4                         L100:	; entry.split
                                 ;     926 
                                 ;     927 
                                 ;     928 		/* A delay time of zero just forces a reschedule. */
                                 ;     929 		if( xTicksToDelay > ( TickType_t ) 0U )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",929
000002E4 A881                    		MOV.L 08H[R0], R1
000002E6 6101                    		CMP #00H, R1
000002E8 20rr                    		BEQ L108
000002EA                         L101:	; bb5
                                 ;     930 		{
                                 ;     931 			configASSERT( uxSchedulerSuspended == 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",931
000002EA FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
000002F0 ECEE                    		MOV.L [R14], R14
000002F2 610E                    		CMP #00H, R14
000002F4 10                   S  		BEQ L103
000002F5                         L102:	; bb6
000002F5 05rrrrrr             A  		BSR _vAssertCalled
000002F9                         L103:	; bb11
                                 ;     932 			vTaskSuspendAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",932
000002F9 39rrrr               W  		BSR _vTaskSuspendAll
000002FC                         L104:	; bb11.split
                                 ;     933 			{
                                 ;     934 				traceTASK_DELAY();
                                 ;     935 
                                 ;     936 				/* A task that is removed from the event list while the
                                 ;     937 				scheduler is suspended will not get placed in the ready
                                 ;     938 				list or removed from the blocked list until the scheduler
                                 ;     939 				is resumed.
                                 ;     940 
                                 ;     941 				This task cannot be in an event list as it is the currently
                                 ;     942 				executing task. */
                                 ;     943 
                                 ;     944 				/* Calculate the time to wake - this may overflow but this is
                                 ;     945 				not a problem. */
                                 ;     946 				xTimeToWake = xTickCount + xTicksToDelay;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",946
000002FC FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000302 ECE1                    		MOV.L [R14], R1
00000304 06890102                		ADD 08H[R0].L, R1
00000308 E301                    		MOV.L R1, [R0]
0000030A                         L105:	; bb11.split1
                                 ;     947 
                                 ;     948 				/* We must remove ourselves from the ready list before adding
                                 ;     949 				ourselves to the blocked list as the same list item is used for
                                 ;     950 				both lists. */
                                 ;     951 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",951
0000030A FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000310 ECE1                    		MOV.L [R14], R1
00000312 6241                    		ADD #04H, R1
00000314 05rrrrrr             A  		BSR _uxListRemove
00000318                         L106:	; bb11.split2
                                 ;     952 				{
                                 ;     953 					/* The current task must be in a ready list, so there is
                                 ;     954 					no need to check, and the port reset macro can be called
                                 ;     955 					directly. */
                                 ;     956 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
                                 ;     957 				}
                                 ;     958 				else
                                 ;     959 				{
                                 ;     960 					mtCOVERAGE_TEST_MARKER();
                                 ;     961 				}
                                 ;     962 				prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",962
00000318 EC01                    		MOV.L [R0], R1
0000031A 39rrrr               W  		BSR __$prvAddCurrentTaskToDelayedList
0000031D                         L107:	; bb11.split3
                                 ;     963 			}
                                 ;     964 			xAlreadyYielded = xTaskResumeAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",964
0000031D 39rrrr               W  		BSR _xTaskResumeAll
00000320 A009                    		MOV.L R1, 04H[R0]
00000322                         L108:	; bb33
                                 ;     965 		}
                                 ;     966 		else
                                 ;     967 		{
                                 ;     968 			mtCOVERAGE_TEST_MARKER();
                                 ;     969 		}
                                 ;     970 
                                 ;     971 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
                                 ;     972 		have put ourselves to sleep. */
                                 ;     973 		if( xAlreadyYielded == pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",973
00000322 A809                    		MOV.L 04H[R0], R1
00000324 6101                    		CMP #00H, R1
00000326 21rr                    		BNE L110
00000328                         L109:	; bb34
                                 ;     974 		{
                                 ;     975 			portYIELD_WITHIN_API();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",975
                                 		._LINE_TOP  inline_asm
                                  
00000328 7EA5                    	PUSH.L R5
                                 	 
0000032A FB5EE07208              	MOV.L #553696, R5
0000032F F85401                  	MOV.B #1, [R5]
                                 	 
00000332 EC55                    	MOV.L [R5], R5
                                 	 
00000334 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
00000336 6703                    		RTSD #0CH
00000338                         L110:	; return
                                 ;     976 		}
                                 ;     977 		else
                                 ;     978 		{
                                 ;     979 			mtCOVERAGE_TEST_MARKER();
                                 ;     980 		}
                                 ;     981 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",981
00000338 6703                    		RTSD #0CH
0000033A                         _eTaskGetState:
                                 		.STACK	_eTaskGetState=28
                                 ;     982 
                                 ;     983 #endif /* INCLUDE_vTaskDelay */
                                 ;     984 /*-----------------------------------------------------------*/
                                 ;     985 
                                 ;     986 #if ( INCLUDE_eTaskGetState == 1 )
                                 ;     987 
                                 ;     988 	eTaskState eTaskGetState( TaskHandle_t xTask )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",988
0000033A 7100E8                  		ADD #0FFFFFFE8H, R0
0000033D A109                    		MOV.L R1, 14H[R0]
                                 ;     989 	{
                                 ;     990 	eTaskState eReturn;
                                 ;     991 	List_t *pxStateList;
                                 ;     992 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",992
0000033F A089                    		MOV.L R1, 0CH[R0]
00000341                         L112:	; entry.split
                                 ;     993 
                                 ;     994 		configASSERT( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",994
00000341 A889                    		MOV.L 0CH[R0], R1
00000343 6101                    		CMP #00H, R1
00000345 18                   S  		BNE L114
00000346                         L113:	; bb7
00000346 05rrrrrr             A  		BSR _vAssertCalled
0000034A                         L114:	; bb12
                                 ;     995 
                                 ;     996 		if( pxTCB == pxCurrentTCB )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",996
0000034A A889                    		MOV.L 0CH[R0], R1
0000034C FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000352 0684E1                  		CMP [R14].L, R1
00000355 18                   S  		BNE L116
00000356                         L115:	; bb13
                                 ;     997 		{
                                 ;     998 			/* The task calling this function is querying its own state. */
                                 ;     999 			eReturn = eRunning;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",999
00000356 3E0100                  		MOV.L #00000000H, 04H[R0]
00000359 2Err                 B  		BRA L132
0000035B                         L116:	; bb14
                                 ;    1000 		}
                                 ;    1001 		else
                                 ;    1002 		{
                                 ;    1003 			taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1003
0000035B 39rrrr               W  		BSR _vTaskEnterCritical
0000035E                         L117:	; bb14.split
                                 ;    1004 			{
                                 ;    1005 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1005
0000035E A889                    		MOV.L 0CH[R0], R1
00000360 E5100502                		MOV.L 14H[R1], 08H[R0]
00000364                         L118:	; bb14.split1
                                 ;    1006 			}
                                 ;    1007 			taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1007
00000364 39rrrr               W  		BSR _vTaskExitCritical
00000367                         L119:	; bb14.split2
                                 ;    1008 
                                 ;    1009 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1009
00000367 A881                    		MOV.L 08H[R0], R1
00000369 FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
0000036F 0684E1                  		CMP [R14].L, R1
00000372 20rr                    		BEQ L129
00000374 2Err                 B  		BRA L128
00000376                         L120:	; bb21
                                 ;    1010 			{
                                 ;    1011 				/* The task being queried is referenced from one of the Blocked
                                 ;    1012 				lists. */
                                 ;    1013 				eReturn = eBlocked;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1013
00000376 3E0102                  		MOV.L #00000002H, 04H[R0]
00000379 2Err                 B  		BRA L132
0000037B                         L121:	; bb23
                                 ;    1014 			}
                                 ;    1015 
                                 ;    1016 			#if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    1017 				else if( pxStateList == &xSuspendedTaskList )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1017
0000037B FBE2rrrrrrrr            		MOV.L #__$xSuspendedTaskList, R14
00000381 06850E02                		CMP 08H[R0].L, R14
00000385 21rr                    		BNE L125
00000387                         L122:	; bb25
                                 ;    1018 				{
                                 ;    1019 					/* The task being queried is referenced from the suspended
                                 ;    1020 					list.  Is it genuinely suspended or is it block
                                 ;    1021 					indefinitely? */
                                 ;    1022 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1022
00000387 A889                    		MOV.L 0CH[R0], R1
00000389 AA91                    		MOV.L 28H[R1], R1
0000038B 6101                    		CMP #00H, R1
0000038D 18                   S  		BNE L124
0000038E                         L123:	; bb26
                                 ;    1023 					{
                                 ;    1024 						eReturn = eSuspended;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1024
0000038E 3E0103                  		MOV.L #00000003H, 04H[R0]
00000391 2Err                 B  		BRA L132
00000393                         L124:	; bb27
                                 ;    1025 					}
                                 ;    1026 					else
                                 ;    1027 					{
                                 ;    1028 						eReturn = eBlocked;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1028
00000393 3E0102                  		MOV.L #00000002H, 04H[R0]
00000396 2Err                 B  		BRA L132
00000398                         L125:	; bb37
                                 ;    1029 					}
                                 ;    1030 				}
                                 ;    1031 			#endif
                                 ;    1032 
                                 ;    1033 			#if ( INCLUDE_vTaskDelete == 1 )
                                 ;    1034 				else if( pxStateList == &xTasksWaitingTermination )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1034
00000398 FBE2rrrrrrrr            		MOV.L #__$xTasksWaitingTermination, R14
0000039E 06850E02                		CMP 08H[R0].L, R14
000003A2 18                   S  		BNE L127
000003A3                         L126:	; bb38
                                 ;    1035 				{
                                 ;    1036 					/* The task being queried is referenced from the deleted
                                 ;    1037 					tasks list. */
                                 ;    1038 					eReturn = eDeleted;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1038
000003A3 3E0104                  		MOV.L #00000004H, 04H[R0]
000003A6 2Err                 B  		BRA L132
000003A8                         L127:	; bb39
                                 ;    1039 				}
                                 ;    1040 			#endif
                                 ;    1041 
                                 ;    1042 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
                                 ;    1043 			{
                                 ;    1044 				/* If the task is not in any other state, it must be in the
                                 ;    1045 				Ready (including pending ready) state. */
                                 ;    1046 				eReturn = eReady;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1046
000003A8 3E0101                  		MOV.L #00000001H, 04H[R0]
000003AB 2Err                 B  		BRA L132
000003AD                         L128:	; bb54
000003AD A881                    		MOV.L 08H[R0], R1
000003AF FBE2rrrrrrrr            		MOV.L #__$pxOverflowDelayedTaskList, R14
000003B5 0684E1                  		CMP [R14].L, R1
000003B8 18                   S  		BNE L130
000003B9                         L129:	; bb60
000003B9 F80601                  		MOV.L #00000001H, [R0]
000003BC 08                   S  		BRA L131
000003BD                         L130:	; bb61
000003BD F80600                  		MOV.L #00000000H, [R0]
000003C0                         L131:	; bb62
000003C0 EC01                    		MOV.L [R0], R1
000003C2 6101                    		CMP #00H, R1
000003C4 21rr                    		BNE L120
000003C6 2Err                 B  		BRA L121
000003C8                         L132:	; bb73
                                 ;    1047 			}
                                 ;    1048 		}
                                 ;    1049 
                                 ;    1050 		return eReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1050
000003C8 A809                    		MOV.L 04H[R0], R1
000003CA A101                    		MOV.L R1, 10H[R0]
000003CC                         L133:	; bb73.split
                                 ;    1051 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1051
000003CC 6706                    		RTSD #18H
000003CE                         _uxTaskPriorityGet:
                                 		.STACK	_uxTaskPriorityGet=24
                                 ;    1052 
                                 ;    1053 #endif /* INCLUDE_eTaskGetState */
                                 ;    1054 /*-----------------------------------------------------------*/
                                 ;    1055 
                                 ;    1056 #if ( INCLUDE_uxTaskPriorityGet == 1 )
                                 ;    1057 
                                 ;    1058 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1058
000003CE 7100EC                  		ADD #0FFFFFFECH, R0
000003D1 A101                    		MOV.L R1, 10H[R0]
                                 ;    1059 	{
                                 ;    1060 	TCB_t *pxTCB;
                                 ;    1061 	UBaseType_t uxReturn;
                                 ;    1062 
                                 ;    1063 		taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1063
000003D3 39rrrr               W  		BSR _vTaskEnterCritical
000003D6                         L135:	; entry.split
                                 ;    1064 		{
                                 ;    1065 			/* If null is passed in here then we are changing the
                                 ;    1066 			priority of the calling function. */
                                 ;    1067 			pxTCB = prvGetTCBFromHandle( xTask );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1067
000003D6 A901                    		MOV.L 10H[R0], R1
000003D8 6101                    		CMP #00H, R1
000003DA 18                   S  		BNE L137
000003DB                         L136:	; bb
000003DB FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000003E1 E0E0                    		MOV.L [R14], [R0]
000003E3 08                   S  		BRA L138
000003E4                         L137:	; bb8
000003E4 E10004                  		MOV.L 10H[R0], [R0]
000003E7                         L138:	; bb11
000003E7 EC01                    		MOV.L [R0], R1
000003E9 A009                    		MOV.L R1, 04H[R0]
                                 ;    1068 			uxReturn = pxTCB->uxPriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1068
000003EB E5100B02                		MOV.L 2CH[R1], 08H[R0]
000003EF                         L139:	; bb11.split
                                 ;    1069 		}
                                 ;    1070 		taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1070
000003EF 39rrrr               W  		BSR _vTaskExitCritical
000003F2                         L140:	; bb11.split1
                                 ;    1071 
                                 ;    1072 		return uxReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1072
000003F2 A881                    		MOV.L 08H[R0], R1
000003F4 A089                    		MOV.L R1, 0CH[R0]
000003F6                         L141:	; bb11.split2
                                 ;    1073 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1073
000003F6 6705                    		RTSD #14H
000003F8                         _uxTaskPriorityGetFromISR:
                                 		.STACK	_uxTaskPriorityGetFromISR=28
                                 ;    1074 
                                 ;    1075 #endif /* INCLUDE_uxTaskPriorityGet */
                                 ;    1076 /*-----------------------------------------------------------*/
                                 ;    1077 
                                 ;    1078 #if ( INCLUDE_uxTaskPriorityGet == 1 )
                                 ;    1079 
                                 ;    1080 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1080
000003F8 7100E8                  		ADD #0FFFFFFE8H, R0
000003FB A109                    		MOV.L R1, 14H[R0]
                                 ;    1081 	{
                                 ;    1082 	TCB_t *pxTCB;
                                 ;    1083 	UBaseType_t uxReturn, uxSavedInterruptState;
                                 ;    1084 
                                 ;    1085 		/* RTOS ports that support interrupt nesting have the concept of a
                                 ;    1086 		maximum	system call (or maximum API call) interrupt priority.
                                 ;    1087 		Interrupts that are	above the maximum system call priority are keep
                                 ;    1088 		permanently enabled, even when the RTOS kernel is in a critical section,
                                 ;    1089 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
                                 ;    1090 		is defined in FreeRTOSConfig.h then
                                 ;    1091 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
                                 ;    1092 		failure if a FreeRTOS API function is called from an interrupt that has
                                 ;    1093 		been assigned a priority above the configured maximum system call
                                 ;    1094 		priority.  Only FreeRTOS functions that end in FromISR can be called
                                 ;    1095 		from interrupts	that have been assigned a priority at or (logically)
                                 ;    1096 		below the maximum system call interrupt priority.  FreeRTOS maintains a
                                 ;    1097 		separate interrupt safe API to ensure interrupt entry is as fast and as
                                 ;    1098 		simple as possible.  More information (albeit Cortex-M specific) is
                                 ;    1099 		provided on the following link:
                                 ;    1100 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
                                 ;    1101 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1101
000003FD FD6A0E                  		MVFC PSW, R14
00000400 FD67EE                  		REVL R14, R14
00000403 64FE                    		AND #0FH, R14
00000405 616E                    		CMP #06H, R14
00000407 29rr                    		BLT L144
00000409                         L143:	; bb5
00000409 05rrrrrr             A  		BSR _vAssertCalled
0000040D                         L144:	; bb13
                                 ;    1102 
                                 ;    1103 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1103
0000040D FD6A0E                  		MVFC PSW, R14
00000410 FD67E1                  		REVL R14, R1
00000413 64F1                    		AND #0FH, R1
00000415 A089                    		MOV.L R1, 0CH[R0]
00000417 757005                  		MVTIPL #05H
0000041A                         L145:	; bb13.split
                                 ;    1104 		{
                                 ;    1105 			/* If null is passed in here then it is the priority of the calling
                                 ;    1106 			task that is being queried. */
                                 ;    1107 			pxTCB = prvGetTCBFromHandle( xTask );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1107
0000041A A909                    		MOV.L 14H[R0], R1
0000041C 6101                    		CMP #00H, R1
0000041E 18                   S  		BNE L147
0000041F                         L146:	; bb20
0000041F FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000425 E0E0                    		MOV.L [R14], [R0]
00000427 08                   S  		BRA L148
00000428                         L147:	; bb22
00000428 E10005                  		MOV.L 14H[R0], [R0]
0000042B                         L148:	; bb25
0000042B EC01                    		MOV.L [R0], R1
0000042D A009                    		MOV.L R1, 04H[R0]
                                 ;    1108 			uxReturn = pxTCB->uxPriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1108
0000042F E5100B02                		MOV.L 2CH[R1], 08H[R0]
00000433                         L149:	; bb25.split
                                 ;    1109 		}
                                 ;    1110 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1110
00000433 A889                    		MOV.L 0CH[R0], R1
00000435 6DC1                    		SHLL #1CH, R1
00000437 6841                    		SHLR #04H, R1
00000439 FD6A0E                  		MVFC PSW, R14
0000043C 742EFFFFFFF0            		AND #0F0FFFFFFH, R14
00000442 57E1                    		OR R14, R1
00000444 FD6810                  		MVTC R1, PSW
00000447                         L150:	; bb25.split1
                                 ;    1111 
                                 ;    1112 		return uxReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1112
00000447 A881                    		MOV.L 08H[R0], R1
00000449 A101                    		MOV.L R1, 10H[R0]
0000044B                         L151:	; bb25.split2
                                 ;    1113 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1113
0000044B 6706                    		RTSD #18H
0000044D                         _vTaskPrioritySet:
                                 		.STACK	_vTaskPrioritySet=32
                                 ;    1114 
                                 ;    1115 #endif /* INCLUDE_uxTaskPriorityGet */
                                 ;    1116 /*-----------------------------------------------------------*/
                                 ;    1117 
                                 ;    1118 #if ( INCLUDE_vTaskPrioritySet == 1 )
                                 ;    1119 
                                 ;    1120 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1120
0000044D 7100E4                  		ADD #0FFFFFFE4H, R0
00000450 A181                    		MOV.L R1, 18H[R0]
00000452 A10A                    		MOV.L R2, 14H[R0]
                                 ;    1121 	{
                                 ;    1122 	TCB_t *pxTCB;
                                 ;    1123 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
                                 ;    1124 	BaseType_t xYieldRequired = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1124
00000454 3E0400                  		MOV.L #00000000H, 10H[R0]
00000457                         L153:	; entry.split
                                 ;    1125 
                                 ;    1126 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1126
00000457 A909                    		MOV.L 14H[R0], R1
00000459 6181                    		CMP #08H, R1
0000045B 23rr                    		BLTU L155
0000045D                         L154:	; bb7
0000045D 05rrrrrr             A  		BSR _vAssertCalled
00000461                         L155:	; bb13
                                 ;    1127 
                                 ;    1128 		/* Ensure the new priority is valid. */
                                 ;    1129 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1129
00000461 A909                    		MOV.L 14H[R0], R1
00000463 6181                    		CMP #08H, R1
00000465 23rr                    		BLTU L157
00000467                         L156:	; bb14
                                 ;    1130 		{
                                 ;    1131 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1131
00000467 3E0507                  		MOV.L #00000007H, 14H[R0]
0000046A                         L157:	; bb20
                                 ;    1132 		}
                                 ;    1133 		else
                                 ;    1134 		{
                                 ;    1135 			mtCOVERAGE_TEST_MARKER();
                                 ;    1136 		}
                                 ;    1137 
                                 ;    1138 		taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1138
0000046A 39rrrr               W  		BSR _vTaskEnterCritical
0000046D                         L158:	; bb20.split
                                 ;    1139 		{
                                 ;    1140 			/* If null is passed in here then it is the priority of the calling
                                 ;    1141 			task that is being changed. */
                                 ;    1142 			pxTCB = prvGetTCBFromHandle( xTask );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1142
0000046D A981                    		MOV.L 18H[R0], R1
0000046F 6101                    		CMP #00H, R1
00000471 18                   S  		BNE L160
00000472                         L159:	; bb24
00000472 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000478 E0E0                    		MOV.L [R14], [R0]
0000047A 08                   S  		BRA L161
0000047B                         L160:	; bb26
0000047B E10006                  		MOV.L 18H[R0], [R0]
0000047E                         L161:	; bb29
0000047E EC01                    		MOV.L [R0], R1
00000480 A009                    		MOV.L R1, 04H[R0]
                                 ;    1143 
                                 ;    1144 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
                                 ;    1145 
                                 ;    1146 			#if ( configUSE_MUTEXES == 1 )
                                 ;    1147 			{
                                 ;    1148 				uxCurrentBasePriority = pxTCB->uxBasePriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1148
00000482 E5101302                		MOV.L 4CH[R1], 08H[R0]
00000486                         L162:	; bb29.split
                                 ;    1149 			}
                                 ;    1150 			#else
                                 ;    1151 			{
                                 ;    1152 				uxCurrentBasePriority = pxTCB->uxPriority;
                                 ;    1153 			}
                                 ;    1154 			#endif
                                 ;    1155 
                                 ;    1156 			if( uxCurrentBasePriority != uxNewPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1156
00000486 A881                    		MOV.L 08H[R0], R1
00000488 06850105                		CMP 14H[R0].L, R1
0000048C 3Arrrr               W  		BEQ L182
0000048F                         L163:	; bb37
                                 ;    1157 			{
                                 ;    1158 				/* The priority change may have readied a task of higher
                                 ;    1159 				priority than the calling task. */
                                 ;    1160 				if( uxNewPriority > uxCurrentBasePriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1160
0000048F A909                    		MOV.L 14H[R0], R1
00000491 06850102                		CMP 08H[R0].L, R1
00000495 A809                    		MOV.L 04H[R0], R1
00000497 25rr                    		BLEU L167
00000499                         L164:	; bb39
                                 ;    1161 				{
                                 ;    1162 					if( pxTCB != pxCurrentTCB )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1162
00000499 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000049F 0684E1                  		CMP [R14].L, R1
000004A2 20rr                    		BEQ L169
000004A4                         L165:	; bb41
                                 ;    1163 					{
                                 ;    1164 						/* The priority of a task other than the currently
                                 ;    1165 						running task is being raised.  Is the priority being
                                 ;    1166 						raised above that of the running task? */
                                 ;    1167 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1167
000004A4 A909                    		MOV.L 14H[R0], R1
000004A6 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000004AC ECEE                    		MOV.L [R14], R14
000004AE 0685E10B                		CMP 2CH[R14].L, R1
000004B2 23rr                    		BLTU L169
000004B4                         L166:	; bb42
                                 ;    1168 						{
                                 ;    1169 							xYieldRequired = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1169
000004B4 3E0401                  		MOV.L #00000001H, 10H[R0]
000004B7 2Err                 B  		BRA L169
000004B9                         L167:	; bb60
                                 ;    1170 						}
                                 ;    1171 						else
                                 ;    1172 						{
                                 ;    1173 							mtCOVERAGE_TEST_MARKER();
                                 ;    1174 						}
                                 ;    1175 					}
                                 ;    1176 					else
                                 ;    1177 					{
                                 ;    1178 						/* The priority of the running task is being raised,
                                 ;    1179 						but the running task must already be the highest
                                 ;    1180 						priority task able to run so no yield is required. */
                                 ;    1181 					}
                                 ;    1182 				}
                                 ;    1183 				else if( pxTCB == pxCurrentTCB )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1183
000004B9 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000004BF 0684E1                  		CMP [R14].L, R1
000004C2 18                   S  		BNE L169
000004C3                         L168:	; bb61
                                 ;    1184 				{
                                 ;    1185 					/* Setting the priority of the running task down means
                                 ;    1186 					there may now be another task of higher priority that
                                 ;    1187 					is ready to execute. */
                                 ;    1188 					xYieldRequired = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1188
000004C3 3E0401                  		MOV.L #00000001H, 10H[R0]
000004C6                         L169:	; bb74
                                 ;    1189 				}
                                 ;    1190 				else
                                 ;    1191 				{
                                 ;    1192 					/* Setting the priority of any other task down does not
                                 ;    1193 					require a yield as the running task must be above the
                                 ;    1194 					new priority of the task being modified. */
                                 ;    1195 				}
                                 ;    1196 
                                 ;    1197 				/* Remember the ready list the task might be referenced from
                                 ;    1198 				before its uxPriority member is changed so the
                                 ;    1199 				taskRESET_READY_PRIORITY() macro can function correctly. */
                                 ;    1200 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1200
000004C6 A809                    		MOV.L 04H[R0], R1
000004C8 E5100B03                		MOV.L 2CH[R1], 0CH[R0]
000004CC                         L170:	; bb74.split
                                 ;    1201 
                                 ;    1202 				#if ( configUSE_MUTEXES == 1 )
                                 ;    1203 				{
                                 ;    1204 					/* Only change the priority being used if the task is not
                                 ;    1205 					currently using an inherited priority. */
                                 ;    1206 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1206
000004CC A809                    		MOV.L 04H[R0], R1
000004CE AC9A                    		MOV.L 4CH[R1], R2
000004D0 0685120B                		CMP 2CH[R1].L, R2
000004D4 18                   S  		BNE L172
000004D5                         L171:	; bb79
                                 ;    1207 					{
                                 ;    1208 						pxTCB->uxPriority = uxNewPriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1208
000004D5 A909                    		MOV.L 14H[R0], R1
000004D7 A80A                    		MOV.L 04H[R0], R2
000004D9 A2A9                    		MOV.L R1, 2CH[R2]
000004DB                         L172:	; bb93
                                 ;    1209 					}
                                 ;    1210 					else
                                 ;    1211 					{
                                 ;    1212 						mtCOVERAGE_TEST_MARKER();
                                 ;    1213 					}
                                 ;    1214 
                                 ;    1215 					/* The base priority gets set whatever. */
                                 ;    1216 					pxTCB->uxBasePriority = uxNewPriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1216
000004DB A909                    		MOV.L 14H[R0], R1
000004DD A80A                    		MOV.L 04H[R0], R2
000004DF A4A9                    		MOV.L R1, 4CH[R2]
000004E1                         L173:	; bb93.split
                                 ;    1217 				}
                                 ;    1218 				#else
                                 ;    1219 				{
                                 ;    1220 					pxTCB->uxPriority = uxNewPriority;
                                 ;    1221 				}
                                 ;    1222 				#endif
                                 ;    1223 
                                 ;    1224 				/* Only reset the event list item value if the value is not
                                 ;    1225 				being used for anything else. */
                                 ;    1226 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1226
000004E1 A809                    		MOV.L 04H[R0], R1
000004E3 A991                    		MOV.L 18H[R1], R1
000004E5 7DF1                    		BTST #1FH, R1
000004E7 21rr                    		BNE L175
000004E9                         L174:	; bb98
000004E9 6681                    		MOV.L #00000008H, R1
                                 ;    1227 				{
                                 ;    1228 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriorit
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1228
000004EB 06810105                		SUB 14H[R0].L, R1
000004EF A80A                    		MOV.L 04H[R0], R2
000004F1 A1A1                    		MOV.L R1, 18H[R2]
000004F3                         L175:	; bb114
                                 ;    1229 				}
                                 ;    1230 				else
                                 ;    1231 				{
                                 ;    1232 					mtCOVERAGE_TEST_MARKER();
                                 ;    1233 				}
                                 ;    1234 
                                 ;    1235 				/* If the task is in the blocked or suspended list we need do
                                 ;    1236 				nothing more than change it's priority variable. However, if
                                 ;    1237 				the task is in a ready list it needs to be removed and placed
                                 ;    1238 				in the list appropriate to its new priority. */
                                 ;    1239 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1239
000004F3 A889                    		MOV.L 0CH[R0], R1
000004F5 751114                  		MUL #14H, R1
000004F8 FBE2rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R14
000004FE 4B1E                    		ADD R1, R14
00000500 A809                    		MOV.L 04H[R0], R1
00000502 06851E05                		CMP 14H[R1].L, R14
00000506 21rr                    		BNE L180
00000508                         L176:	; bb116
                                 ;    1240 				{
                                 ;    1241 					/* The task is currently in its ready list - remove before adding
                                 ;    1242 					it to it's new ready list.  As we are in a critical section we
                                 ;    1243 					can do this even if the scheduler is suspended. */
                                 ;    1244 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1244
00000508 A809                    		MOV.L 04H[R0], R1
0000050A 6241                    		ADD #04H, R1
0000050C 05rrrrrr             A  		BSR _uxListRemove
00000510                         L177:	; bb116.split
                                 ;    1245 					{
                                 ;    1246 						/* It is known that the task is in its ready list so
                                 ;    1247 						there is no need to check again and the port level
                                 ;    1248 						reset macro can be called directly. */
                                 ;    1249 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
                                 ;    1250 					}
                                 ;    1251 					else
                                 ;    1252 					{
                                 ;    1253 						mtCOVERAGE_TEST_MARKER();
                                 ;    1254 					}
                                 ;    1255 					prvAddTaskToReadyList( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1255
00000510 A809                    		MOV.L 04H[R0], R1
00000512 AA99                    		MOV.L 2CH[R1], R1
00000514 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
0000051A 0684E1                  		CMP [R14].L, R1
0000051D 25rr                    		BLEU L179
0000051F                         L178:	; bb127
0000051F A809                    		MOV.L 04H[R0], R1
00000521 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000527 E11E0B                  		MOV.L 2CH[R1], [R14]
0000052A                         L179:	; bb138
0000052A A80A                    		MOV.L 04H[R0], R2
0000052C AAAB                    		MOV.L 2CH[R2], R3
0000052E 751314                  		MUL #14H, R3
00000531 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
00000537 4B31                    		ADD R3, R1
00000539 6242                    		ADD #04H, R2
0000053B 05rrrrrr             A  		BSR _vListInsertEnd
0000053F                         L180:	; bb159
                                 ;    1256 				}
                                 ;    1257 				else
                                 ;    1258 				{
                                 ;    1259 					mtCOVERAGE_TEST_MARKER();
                                 ;    1260 				}
                                 ;    1261 
                                 ;    1262 				if( xYieldRequired == pdTRUE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1262
0000053F A901                    		MOV.L 10H[R0], R1
00000541 6111                    		CMP #01H, R1
00000543 21rr                    		BNE L182
00000545                         L181:	; bb160
                                 ;    1263 				{
                                 ;    1264 					taskYIELD_IF_USING_PREEMPTION();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1264
                                 		._LINE_TOP  inline_asm
                                  
00000545 7EA5                    	PUSH.L R5
                                 	 
00000547 FB5EE07208              	MOV.L #553696, R5
0000054C F85401                  	MOV.B #1, [R5]
                                 	 
0000054F EC55                    	MOV.L [R5], R5
                                 	 
00000551 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
00000553                         L182:	; bb173
                                 ;    1265 				}
                                 ;    1266 				else
                                 ;    1267 				{
                                 ;    1268 					mtCOVERAGE_TEST_MARKER();
                                 ;    1269 				}
                                 ;    1270 
                                 ;    1271 				/* Remove compiler warning about unused variables when the port
                                 ;    1272 				optimised task selection is not being used. */
                                 ;    1273 				( void ) uxPriorityUsedOnEntry;
                                 ;    1274 			}
                                 ;    1275 		}
                                 ;    1276 		taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1276
00000553 39rrrr               W  		BSR _vTaskExitCritical
00000556 6707                    		RTSD #1CH
00000558                         _vTaskSuspend:
                                 		.STACK	_vTaskSuspend=16
                                 ;    1277 	}
                                 ;    1278 
                                 ;    1279 #endif /* INCLUDE_vTaskPrioritySet */
                                 ;    1280 /*-----------------------------------------------------------*/
                                 ;    1281 
                                 ;    1282 #if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    1283 
                                 ;    1284 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1284
00000558 60C0                    		SUB #0CH, R0
0000055A A081                    		MOV.L R1, 08H[R0]
                                 ;    1285 	{
                                 ;    1286 	TCB_t *pxTCB;
                                 ;    1287 
                                 ;    1288 		taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1288
0000055C 39rrrr               W  		BSR _vTaskEnterCritical
0000055F                         L184:	; entry.split
                                 ;    1289 		{
                                 ;    1290 			/* If null is passed in here then it is the running task that is
                                 ;    1291 			being suspended. */
                                 ;    1292 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1292
0000055F A881                    		MOV.L 08H[R0], R1
00000561 6101                    		CMP #00H, R1
00000563 18                   S  		BNE L186
00000564                         L185:	; bb
00000564 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000056A E0E0                    		MOV.L [R14], [R0]
0000056C 08                   S  		BRA L187
0000056D                         L186:	; bb6
0000056D E10002                  		MOV.L 08H[R0], [R0]
00000570                         L187:	; bb9
00000570 EC01                    		MOV.L [R0], R1
00000572 A009                    		MOV.L R1, 04H[R0]
                                 ;    1293 
                                 ;    1294 			traceTASK_SUSPEND( pxTCB );
                                 ;    1295 
                                 ;    1296 			/* Remove task from the ready/delayed list and place in the
                                 ;    1297 			suspended list. */
                                 ;    1298 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1298
00000574 6241                    		ADD #04H, R1
00000576 05rrrrrr             A  		BSR _uxListRemove
0000057A                         L188:	; bb9.split
                                 ;    1299 			{
                                 ;    1300 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
                                 ;    1301 			}
                                 ;    1302 			else
                                 ;    1303 			{
                                 ;    1304 				mtCOVERAGE_TEST_MARKER();
                                 ;    1305 			}
                                 ;    1306 
                                 ;    1307 			/* Is the task waiting on an event also? */
                                 ;    1308 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1308
0000057A A809                    		MOV.L 04H[R0], R1
0000057C AA91                    		MOV.L 28H[R1], R1
0000057E 6101                    		CMP #00H, R1
00000580 10                   S  		BEQ L190
00000581                         L189:	; bb22
                                 ;    1309 			{
                                 ;    1310 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1310
00000581 A809                    		MOV.L 04H[R0], R1
00000583 711118                  		ADD #18H, R1
00000586 05rrrrrr             A  		BSR _uxListRemove
0000058A                         L190:	; bb34
                                 ;    1311 			}
                                 ;    1312 			else
                                 ;    1313 			{
                                 ;    1314 				mtCOVERAGE_TEST_MARKER();
                                 ;    1315 			}
                                 ;    1316 
                                 ;    1317 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1317
0000058A A80A                    		MOV.L 04H[R0], R2
0000058C 6242                    		ADD #04H, R2
0000058E FB12rrrrrrrr            		MOV.L #__$xSuspendedTaskList, R1
00000594 05rrrrrr             A  		BSR _vListInsertEnd
00000598                         L191:	; bb34.split
                                 ;    1318 		}
                                 ;    1319 		taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1319
00000598 39rrrr               W  		BSR _vTaskExitCritical
0000059B                         L192:	; bb34.split1
                                 ;    1320 
                                 ;    1321 		if( pxTCB == pxCurrentTCB )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1321
0000059B A809                    		MOV.L 04H[R0], R1
0000059D FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000005A3 0684E1                  		CMP [R14].L, R1
000005A6 21rr                    		BNE L200
000005A8                         L193:	; bb39
                                 ;    1322 		{
                                 ;    1323 			if( xSchedulerRunning != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1323
000005A8 FBE2rrrrrrrr            		MOV.L #__$xSchedulerRunning, R14
000005AE ECEE                    		MOV.L [R14], R14
000005B0 610E                    		CMP #00H, R14
000005B2 20rr                    		BEQ L197
000005B4                         L194:	; bb41
                                 ;    1324 			{
                                 ;    1325 				/* The current task has just been suspended. */
                                 ;    1326 				configASSERT( uxSchedulerSuspended == 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1326
000005B4 FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
000005BA ECEE                    		MOV.L [R14], R14
000005BC 610E                    		CMP #00H, R14
000005BE 10                   S  		BEQ L196
000005BF                         L195:	; bb42
000005BF 05rrrrrr             A  		BSR _vAssertCalled
000005C3                         L196:	; bb49
                                 ;    1327 				portYIELD_WITHIN_API();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1327
                                 		._LINE_TOP  inline_asm
                                  
000005C3 7EA5                    	PUSH.L R5
                                 	 
000005C5 FB5EE07208              	MOV.L #553696, R5
000005CA F85401                  	MOV.B #1, [R5]
                                 	 
000005CD EC55                    	MOV.L [R5], R5
                                 	 
000005CF 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
000005D1 6703                    		RTSD #0CH
000005D3                         L197:	; bb51
                                 ;    1328 			}
                                 ;    1329 			else
                                 ;    1330 			{
                                 ;    1331 				/* The scheduler is not running, but the task that was pointed
                                 ;    1332 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
                                 ;    1333 				must be adjusted to point to a different task. */
                                 ;    1334 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1334
000005D3 FBE2rrrrrrrr            		MOV.L #__$xSuspendedTaskList, R14
000005D9 ECEE                    		MOV.L [R14], R14
000005DB FBF2rrrrrrrr            		MOV.L #__$uxCurrentNumberOfTasks, R15
000005E1 0684FE                  		CMP [R15].L, R14
000005E4 21rr                    		BNE L199
000005E6                         L198:	; bb52
                                 ;    1335 				{
                                 ;    1336 					/* No other tasks are ready, so set pxCurrentTCB back to
                                 ;    1337 					NULL so when the next task is created pxCurrentTCB will
                                 ;    1338 					be set to point to it no matter what its relative priority
                                 ;    1339 					is. */
                                 ;    1340 					pxCurrentTCB = NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1340
000005E6 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000005EC F8E600                  		MOV.L #00000000H, [R14]
000005EF 6703                    		RTSD #0CH
000005F1                         L199:	; bb53
                                 ;    1341 				}
                                 ;    1342 				else
                                 ;    1343 				{
                                 ;    1344 					vTaskSwitchContext();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1344
000005F1 39rrrr               W  		BSR _vTaskSwitchContext
000005F4 6703                    		RTSD #0CH
000005F6                         L200:	; bb66
                                 ;    1345 				}
                                 ;    1346 			}
                                 ;    1347 		}
                                 ;    1348 		else
                                 ;    1349 		{
                                 ;    1350 			if( xSchedulerRunning != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1350
000005F6 FBE2rrrrrrrr            		MOV.L #__$xSchedulerRunning, R14
000005FC ECEE                    		MOV.L [R14], R14
000005FE 610E                    		CMP #00H, R14
00000600 20rr                    		BEQ L204
00000602                         L201:	; bb67
                                 ;    1351 			{
                                 ;    1352 				/* A task other than the currently running task was suspended,
                                 ;    1353 				reset the next expected unblock time in case it referred to the
                                 ;    1354 				task that is now in the Suspended state. */
                                 ;    1355 				taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1355
00000602 39rrrr               W  		BSR _vTaskEnterCritical
00000605                         L202:	; bb67.split
                                 ;    1356 				{
                                 ;    1357 					prvResetNextTaskUnblockTime();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1357
00000605 39rrrr               W  		BSR __$prvResetNextTaskUnblockTime
00000608                         L203:	; bb67.split2
                                 ;    1358 				}
                                 ;    1359 				taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1359
00000608 39rrrr               W  		BSR _vTaskExitCritical
0000060B 6703                    		RTSD #0CH
0000060D                         L204:	; return
                                 ;    1360 			}
                                 ;    1361 			else
                                 ;    1362 			{
                                 ;    1363 				mtCOVERAGE_TEST_MARKER();
                                 ;    1364 			}
                                 ;    1365 		}
                                 ;    1366 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1366
0000060D 6703                    		RTSD #0CH
0000060F                         __$prvTaskIsTaskSuspended:
                                 		.STACK	__$prvTaskIsTaskSuspended=20
                                 ;    1367 
                                 ;    1368 #endif /* INCLUDE_vTaskSuspend */
                                 ;    1369 /*-----------------------------------------------------------*/
                                 ;    1370 
                                 ;    1371 #if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    1372 
                                 ;    1373 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1373
0000060F 7100F0                  		ADD #0FFFFFFF0H, R0
00000612 A089                    		MOV.L R1, 0CH[R0]
                                 ;    1374 	{
                                 ;    1375 	BaseType_t xReturn = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1375
00000614 F80600                  		MOV.L #00000000H, [R0]
00000617                         L206:	; entry.split
                                 ;    1376 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1376
00000617 E5000301                		MOV.L 0CH[R0], 04H[R0]
0000061B                         L207:	; entry.split1
                                 ;    1377 
                                 ;    1378 		/* Accesses xPendingReadyList so must be called from a critical
                                 ;    1379 		section. */
                                 ;    1380 
                                 ;    1381 		/* It does not make sense to check if the calling task is suspended. */
                                 ;    1382 		configASSERT( xTask );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1382
0000061B A889                    		MOV.L 0CH[R0], R1
0000061D 6101                    		CMP #00H, R1
0000061F 18                   S  		BNE L209
00000620                         L208:	; bb6
00000620 05rrrrrr             A  		BSR _vAssertCalled
00000624                         L209:	; bb11
                                 ;    1383 
                                 ;    1384 		/* Is the task being resumed actually in the suspended list? */
                                 ;    1385 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1385
00000624 A809                    		MOV.L 04H[R0], R1
00000626 FBE2rrrrrrrr            		MOV.L #__$xSuspendedTaskList, R14
0000062C 06851E05                		CMP 14H[R1].L, R14
00000630 21rr                    		BNE L213
00000632                         L210:	; bb13
                                 ;    1386 		{
                                 ;    1387 			/* Has the task already been resumed from within an ISR? */
                                 ;    1388 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1388
00000632 A809                    		MOV.L 04H[R0], R1
00000634 FBE2rrrrrrrr            		MOV.L #__$xPendingReadyList, R14
0000063A 06851E0A                		CMP 28H[R1].L, R14
0000063E 20rr                    		BEQ L213
00000640                         L211:	; bb15
                                 ;    1389 			{
                                 ;    1390 				/* Is it in the suspended list because it is in the	Suspended
                                 ;    1391 				state, or because is is blocked with no timeout? */
                                 ;    1392 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1392
00000640 A809                    		MOV.L 04H[R0], R1
00000642 AA91                    		MOV.L 28H[R1], R1
00000644 6101                    		CMP #00H, R1
00000646 18                   S  		BNE L213
00000647                         L212:	; bb16
                                 ;    1393 				{
                                 ;    1394 					xReturn = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1394
00000647 F80601                  		MOV.L #00000001H, [R0]
0000064A                         L213:	; bb50
                                 ;    1395 				}
                                 ;    1396 				else
                                 ;    1397 				{
                                 ;    1398 					mtCOVERAGE_TEST_MARKER();
                                 ;    1399 				}
                                 ;    1400 			}
                                 ;    1401 			else
                                 ;    1402 			{
                                 ;    1403 				mtCOVERAGE_TEST_MARKER();
                                 ;    1404 			}
                                 ;    1405 		}
                                 ;    1406 		else
                                 ;    1407 		{
                                 ;    1408 			mtCOVERAGE_TEST_MARKER();
                                 ;    1409 		}
                                 ;    1410 
                                 ;    1411 		return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1411
0000064A EC01                    		MOV.L [R0], R1
0000064C A081                    		MOV.L R1, 08H[R0]
0000064E                         L214:	; bb50.split
                                 ;    1412 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1412
0000064E 6704                    		RTSD #10H
00000650                         _vTaskResume:
                                 		.STACK	_vTaskResume=16
                                 ;    1413 
                                 ;    1414 #endif /* INCLUDE_vTaskSuspend */
                                 ;    1415 /*-----------------------------------------------------------*/
                                 ;    1416 
                                 ;    1417 #if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    1418 
                                 ;    1419 	void vTaskResume( TaskHandle_t xTaskToResume )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1419
00000650 60C0                    		SUB #0CH, R0
00000652 A081                    		MOV.L R1, 08H[R0]
                                 ;    1420 	{
                                 ;    1421 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1421
00000654 A009                    		MOV.L R1, 04H[R0]
00000656                         L216:	; entry.split
                                 ;    1422 
                                 ;    1423 		/* It does not make sense to resume the calling task. */
                                 ;    1424 		configASSERT( xTaskToResume );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1424
00000656 A881                    		MOV.L 08H[R0], R1
00000658 6101                    		CMP #00H, R1
0000065A 18                   S  		BNE L218
0000065B                         L217:	; bb4
0000065B 05rrrrrr             A  		BSR _vAssertCalled
0000065F                         L218:	; bb9
                                 ;    1425 
                                 ;    1426 		/* The parameter cannot be NULL as it is impossible to resume the
                                 ;    1427 		currently executing task. */
                                 ;    1428 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1428
0000065F A809                    		MOV.L 04H[R0], R1
00000661 6101                    		CMP #00H, R1
00000663 21rr                    		BNE L228
00000665 2Err                 B  		BRA L230
00000667                         L219:	; bb10
                                 ;    1429 		{
                                 ;    1430 			taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1430
00000667 39rrrr               W  		BSR _vTaskEnterCritical
0000066A                         L220:	; bb10.split
                                 ;    1431 			{
                                 ;    1432 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1432
0000066A A809                    		MOV.L 04H[R0], R1
0000066C 39rrrr               W  		BSR __$prvTaskIsTaskSuspended
0000066F 6111                    		CMP #01H, R1
00000671 21rr                    		BNE L227
00000673                         L221:	; bb12
                                 ;    1433 				{
                                 ;    1434 					traceTASK_RESUME( pxTCB );
                                 ;    1435 
                                 ;    1436 					/* As we are in a critical section we can access the ready
                                 ;    1437 					lists even if the scheduler is suspended. */
                                 ;    1438 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1438
00000673 A809                    		MOV.L 04H[R0], R1
00000675 6241                    		ADD #04H, R1
00000677 05rrrrrr             A  		BSR _uxListRemove
0000067B                         L222:	; bb12.split
                                 ;    1439 					prvAddTaskToReadyList( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1439
0000067B A809                    		MOV.L 04H[R0], R1
0000067D AA99                    		MOV.L 2CH[R1], R1
0000067F FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000685 0684E1                  		CMP [R14].L, R1
00000688 25rr                    		BLEU L224
0000068A                         L223:	; bb17
0000068A A809                    		MOV.L 04H[R0], R1
0000068C FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000692 E11E0B                  		MOV.L 2CH[R1], [R14]
00000695                         L224:	; bb28
00000695 A80A                    		MOV.L 04H[R0], R2
00000697 AAAB                    		MOV.L 2CH[R2], R3
00000699 751314                  		MUL #14H, R3
0000069C FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
000006A2 4B31                    		ADD R3, R1
000006A4 6242                    		ADD #04H, R2
000006A6 05rrrrrr             A  		BSR _vListInsertEnd
000006AA                         L225:	; bb28.split
                                 ;    1440 
                                 ;    1441 					/* We may have just resumed a higher priority task. */
                                 ;    1442 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1442
000006AA A809                    		MOV.L 04H[R0], R1
000006AC AA99                    		MOV.L 2CH[R1], R1
000006AE FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000006B4 ECEE                    		MOV.L [R14], R14
000006B6 0685E10B                		CMP 2CH[R14].L, R1
000006BA 23rr                    		BLTU L227
000006BC                         L226:	; bb36
                                 ;    1443 					{
                                 ;    1444 						/* This yield may not cause the task just resumed to run,
                                 ;    1445 						but will leave the lists in the correct state for the
                                 ;    1446 						next yield. */
                                 ;    1447 						taskYIELD_IF_USING_PREEMPTION();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1447
                                 		._LINE_TOP  inline_asm
                                  
000006BC 7EA5                    	PUSH.L R5
                                 	 
000006BE FB5EE07208              	MOV.L #553696, R5
000006C3 F85401                  	MOV.B #1, [R5]
                                 	 
000006C6 EC55                    	MOV.L [R5], R5
                                 	 
000006C8 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
000006CA                         L227:	; bb55
                                 ;    1448 					}
                                 ;    1449 					else
                                 ;    1450 					{
                                 ;    1451 						mtCOVERAGE_TEST_MARKER();
                                 ;    1452 					}
                                 ;    1453 				}
                                 ;    1454 				else
                                 ;    1455 				{
                                 ;    1456 					mtCOVERAGE_TEST_MARKER();
                                 ;    1457 				}
                                 ;    1458 			}
                                 ;    1459 			taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1459
000006CA 39rrrr               W  		BSR _vTaskExitCritical
000006CD 6703                    		RTSD #0CH
000006CF                         L228:	; bb60
000006CF A809                    		MOV.L 04H[R0], R1
000006D1 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000006D7 0684E1                  		CMP [R14].L, R1
000006DA 10                   S  		BEQ L230
000006DB                         L229:	; bb65
000006DB F80601                  		MOV.L #00000001H, [R0]
000006DE 08                   S  		BRA L231
000006DF                         L230:	; bb66
000006DF F80600                  		MOV.L #00000000H, [R0]
000006E2                         L231:	; bb67
000006E2 EC01                    		MOV.L [R0], R1
000006E4 6101                    		CMP #00H, R1
000006E6 3Brrrr               W  		BNE L219
000006E9                         L232:	; return
                                 ;    1460 		}
                                 ;    1461 		else
                                 ;    1462 		{
                                 ;    1463 			mtCOVERAGE_TEST_MARKER();
                                 ;    1464 		}
                                 ;    1465 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1465
000006E9 6703                    		RTSD #0CH
000006EB                         _xTaskResumeFromISR:
                                 		.STACK	_xTaskResumeFromISR=24
                                 ;    1466 
                                 ;    1467 #endif /* INCLUDE_vTaskSuspend */
                                 ;    1468 
                                 ;    1469 /*-----------------------------------------------------------*/
                                 ;    1470 
                                 ;    1471 #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
                                 ;    1472 
                                 ;    1473 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1473
000006EB 7100EC                  		ADD #0FFFFFFECH, R0
000006EE A101                    		MOV.L R1, 10H[R0]
                                 ;    1474 	{
                                 ;    1475 	BaseType_t xYieldRequired = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1475
000006F0 F80600                  		MOV.L #00000000H, [R0]
000006F3                         L234:	; entry.split
                                 ;    1476 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1476
000006F3 E5000401                		MOV.L 10H[R0], 04H[R0]
000006F7                         L235:	; entry.split1
                                 ;    1477 	UBaseType_t uxSavedInterruptStatus;
                                 ;    1478 
                                 ;    1479 		configASSERT( xTaskToResume );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1479
000006F7 A901                    		MOV.L 10H[R0], R1
000006F9 6101                    		CMP #00H, R1
000006FB 18                   S  		BNE L237
000006FC                         L236:	; bb7
000006FC 05rrrrrr             A  		BSR _vAssertCalled
00000700                         L237:	; bb12
                                 ;    1480 
                                 ;    1481 		/* RTOS ports that support interrupt nesting have the concept of a
                                 ;    1482 		maximum	system call (or maximum API call) interrupt priority.
                                 ;    1483 		Interrupts that are	above the maximum system call priority are keep
                                 ;    1484 		permanently enabled, even when the RTOS kernel is in a critical section,
                                 ;    1485 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
                                 ;    1486 		is defined in FreeRTOSConfig.h then
                                 ;    1487 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
                                 ;    1488 		failure if a FreeRTOS API function is called from an interrupt that has
                                 ;    1489 		been assigned a priority above the configured maximum system call
                                 ;    1490 		priority.  Only FreeRTOS functions that end in FromISR can be called
                                 ;    1491 		from interrupts	that have been assigned a priority at or (logically)
                                 ;    1492 		below the maximum system call interrupt priority.  FreeRTOS maintains a
                                 ;    1493 		separate interrupt safe API to ensure interrupt entry is as fast and as
                                 ;    1494 		simple as possible.  More information (albeit Cortex-M specific) is
                                 ;    1495 		provided on the following link:
                                 ;    1496 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
                                 ;    1497 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1497
00000700 FD6A0E                  		MVFC PSW, R14
00000703 FD67EE                  		REVL R14, R14
00000706 64FE                    		AND #0FH, R14
00000708 616E                    		CMP #06H, R14
0000070A 29rr                    		BLT L239
0000070C                         L238:	; bb13
0000070C 05rrrrrr             A  		BSR _vAssertCalled
00000710                         L239:	; bb22
                                 ;    1498 
                                 ;    1499 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1499
00000710 FD6A0E                  		MVFC PSW, R14
00000713 FD67E1                  		REVL R14, R1
00000716 64F1                    		AND #0FH, R1
00000718 A081                    		MOV.L R1, 08H[R0]
0000071A 757005                  		MVTIPL #05H
0000071D                         L240:	; bb22.split
                                 ;    1500 		{
                                 ;    1501 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1501
0000071D A809                    		MOV.L 04H[R0], R1
0000071F 39rrrr               W  		BSR __$prvTaskIsTaskSuspended
00000722 6111                    		CMP #01H, R1
00000724 21rr                    		BNE L249
00000726                         L241:	; bb28
                                 ;    1502 			{
                                 ;    1503 				traceTASK_RESUME_FROM_ISR( pxTCB );
                                 ;    1504 
                                 ;    1505 				/* Check the ready lists can be accessed. */
                                 ;    1506 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1506
00000726 FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
0000072C ECEE                    		MOV.L [R14], R14
0000072E 610E                    		CMP #00H, R14
00000730 A80A                    		MOV.L 04H[R0], R2
00000732 21rr                    		BNE L248
00000734                         L242:	; bb30
                                 ;    1507 				{
                                 ;    1508 					/* Ready lists can be accessed so move the task from the
                                 ;    1509 					suspended list to the ready list directly. */
                                 ;    1510 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1510
00000734 AAA9                    		MOV.L 2CH[R2], R1
00000736 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000073C ECEE                    		MOV.L [R14], R14
0000073E 0685E10B                		CMP 2CH[R14].L, R1
00000742 23rr                    		BLTU L244
00000744                         L243:	; bb31
                                 ;    1511 					{
                                 ;    1512 						xYieldRequired = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1512
00000744 F80601                  		MOV.L #00000001H, [R0]
00000747                         L244:	; bb42
                                 ;    1513 					}
                                 ;    1514 					else
                                 ;    1515 					{
                                 ;    1516 						mtCOVERAGE_TEST_MARKER();
                                 ;    1517 					}
                                 ;    1518 
                                 ;    1519 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1519
00000747 A809                    		MOV.L 04H[R0], R1
00000749 6241                    		ADD #04H, R1
0000074B 05rrrrrr             A  		BSR _uxListRemove
0000074F                         L245:	; bb42.split
                                 ;    1520 					prvAddTaskToReadyList( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1520
0000074F A809                    		MOV.L 04H[R0], R1
00000751 AA99                    		MOV.L 2CH[R1], R1
00000753 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000759 0684E1                  		CMP [R14].L, R1
0000075C 25rr                    		BLEU L247
0000075E                         L246:	; bb47
0000075E A809                    		MOV.L 04H[R0], R1
00000760 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000766 E11E0B                  		MOV.L 2CH[R1], [R14]
00000769                         L247:	; bb59
00000769 A80A                    		MOV.L 04H[R0], R2
0000076B AAAB                    		MOV.L 2CH[R2], R3
0000076D 751314                  		MUL #14H, R3
00000770 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
00000776 4B31                    		ADD R3, R1
00000778 6242                    		ADD #04H, R2
0000077A 05rrrrrr             A  		BSR _vListInsertEnd
0000077E 2Err                 B  		BRA L249
00000780                         L248:	; bb66
                                 ;    1521 				}
                                 ;    1522 				else
                                 ;    1523 				{
                                 ;    1524 					/* The delayed or ready lists cannot be accessed so the task
                                 ;    1525 					is held in the pending ready list until the scheduler is
                                 ;    1526 					unsuspended. */
                                 ;    1527 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1527
00000780 712218                  		ADD #18H, R2
00000783 FB12rrrrrrrr            		MOV.L #__$xPendingReadyList, R1
00000789 05rrrrrr             A  		BSR _vListInsertEnd
0000078D                         L249:	; bb81
                                 ;    1528 				}
                                 ;    1529 			}
                                 ;    1530 			else
                                 ;    1531 			{
                                 ;    1532 				mtCOVERAGE_TEST_MARKER();
                                 ;    1533 			}
                                 ;    1534 		}
                                 ;    1535 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1535
0000078D A881                    		MOV.L 08H[R0], R1
0000078F 6DC1                    		SHLL #1CH, R1
00000791 6841                    		SHLR #04H, R1
00000793 FD6A0E                  		MVFC PSW, R14
00000796 742EFFFFFFF0            		AND #0F0FFFFFFH, R14
0000079C 57E1                    		OR R14, R1
0000079E FD6810                  		MVTC R1, PSW
000007A1                         L250:	; bb81.split
                                 ;    1536 
                                 ;    1537 		return xYieldRequired;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1537
000007A1 EC01                    		MOV.L [R0], R1
000007A3 A089                    		MOV.L R1, 0CH[R0]
000007A5                         L251:	; bb81.split2
                                 ;    1538 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1538
000007A5 6705                    		RTSD #14H
000007A7                         _vTaskStartScheduler:
                                 		.STACK	_vTaskStartScheduler=24
                                 ;    1539 
                                 ;    1540 #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
                                 ;    1541 /*-----------------------------------------------------------*/
                                 ;    1542 
                                 ;    1543 void vTaskStartScheduler( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1543
000007A7 6040                    		SUB #04H, R0
000007A9 7100F0                  		ADD #0FFFFFFF0H, R0
000007AC 6604                    		MOV.L #00000000H, R4
                                 ;    1544 {
                                 ;    1545 BaseType_t xReturn;
                                 ;    1546 
                                 ;    1547 	/* Add the idle task at the lowest priority. */
                                 ;    1548 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
                                 ;    1549 	{
                                 ;    1550 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
                                 ;    1551 		be returned by the xTaskGetIdleTaskHandle() function. */
                                 ;    1552 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /
                                 ;    1553 	}
                                 ;    1554 	#else
                                 ;    1555 	{
                                 ;    1556 		/* Create the idle task without storing its handle. */
                                 ;    1557 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1557
000007AE A08C                    		MOV.L R4, 0CH[R0]
000007B0 A084                    		MOV.L R4, 08H[R0]
000007B2 A00C                    		MOV.L R4, 04H[R0]
000007B4 E304                    		MOV.L R4, [R0]
000007B6 75438C                  		MOV.L #0000008CH, R3
000007B9 FB22rrrrrrrr            		MOV.L #_L10, R2
000007BF FB12rrrrrrrr            		MOV.L #__$prvIdleTask, R1
000007C5 39rrrr               W  		BSR _xTaskGenericCreate
000007C8 710010                  		ADD #10H, R0
000007CB E301                    		MOV.L R1, [R0]
000007CD                         L253:	; entry.split
                                 ;    1558 	}
                                 ;    1559 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
                                 ;    1560 
                                 ;    1561 	#if ( configUSE_TIMERS == 1 )
                                 ;    1562 	{
                                 ;    1563 		if( xReturn == pdPASS )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1563
000007CD EC01                    		MOV.L [R0], R1
000007CF 6111                    		CMP #01H, R1
000007D1 18                   S  		BNE L255
000007D2                         L254:	; bb2
                                 ;    1564 		{
                                 ;    1565 			xReturn = xTimerCreateTimerTask();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1565
000007D2 05rrrrrr             A  		BSR _xTimerCreateTimerTask
000007D6 E301                    		MOV.L R1, [R0]
000007D8                         L255:	; bb9
                                 ;    1566 		}
                                 ;    1567 		else
                                 ;    1568 		{
                                 ;    1569 			mtCOVERAGE_TEST_MARKER();
                                 ;    1570 		}
                                 ;    1571 	}
                                 ;    1572 	#endif /* configUSE_TIMERS */
                                 ;    1573 
                                 ;    1574 	if( xReturn == pdPASS )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1574
000007D8 EC01                    		MOV.L [R0], R1
000007DA 6111                    		CMP #01H, R1
000007DC 21rr                    		BNE L261
000007DE                         L256:	; bb11
                                 ;    1575 	{
                                 ;    1576 		/* Interrupts are turned off here, to ensure a tick does not occur
                                 ;    1577 		before or during the call to xPortStartScheduler().  The stacks of
                                 ;    1578 		the created tasks contain a status word with interrupts switched on
                                 ;    1579 		so interrupts will automatically get re-enabled when the first task
                                 ;    1580 		starts to run. */
                                 ;    1581 		portDISABLE_INTERRUPTS();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1581
000007DE FD6A0E                  		MVFC PSW, R14
000007E1 FD67EE                  		REVL R14, R14
000007E4 64FE                    		AND #0FH, R14
000007E6 614E                    		CMP #04H, R14
000007E8 2Arr                    		BGT L258
000007EA                         L257:	; bb12
000007EA 757005                  		MVTIPL #05H
000007ED                         L258:	; bb19
                                 ;    1582 
                                 ;    1583 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
                                 ;    1584 		{
                                 ;    1585 			/* Switch Newlib's _impure_ptr variable to point to the _reent
                                 ;    1586 			structure specific to the task that will run first. */
                                 ;    1587 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
                                 ;    1588 		}
                                 ;    1589 		#endif /* configUSE_NEWLIB_REENTRANT */
                                 ;    1590 
                                 ;    1591 		xSchedulerRunning = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1591
000007ED FBE2rrrrrrrr            		MOV.L #__$xSchedulerRunning, R14
000007F3 F8E601                  		MOV.L #00000001H, [R14]
000007F6                         L259:	; bb19.split
                                 ;    1592 		xTickCount = ( TickType_t ) 0U;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1592
000007F6 FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
000007FC F8E600                  		MOV.L #00000000H, [R14]
000007FF                         L260:	; bb19.split1
                                 ;    1593 
                                 ;    1594 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
                                 ;    1595 		macro must be defined to configure the timer/counter used to generate
                                 ;    1596 		the run time counter time base. */
                                 ;    1597 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
                                 ;    1598 
                                 ;    1599 		/* Setting up the timer tick is hardware specific and thus in the
                                 ;    1600 		portable interface. */
                                 ;    1601 		if( xPortStartScheduler() != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1601
000007FF 05rrrrrr             A  		BSR _xPortStartScheduler
00000803 6701                    		RTSD #04H
00000805                         L261:	; bb29
                                 ;    1602 		{
                                 ;    1603 			/* Should not reach here as if the scheduler is running the
                                 ;    1604 			function will not return. */
                                 ;    1605 		}
                                 ;    1606 		else
                                 ;    1607 		{
                                 ;    1608 			/* Should only reach here if a task calls xTaskEndScheduler(). */
                                 ;    1609 		}
                                 ;    1610 	}
                                 ;    1611 	else
                                 ;    1612 	{
                                 ;    1613 		/* This line will only be reached if the kernel could not be started,
                                 ;    1614 		because there was not enough FreeRTOS heap to create the idle task
                                 ;    1615 		or the timer task. */
                                 ;    1616 		configASSERT( xReturn );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1616
00000805 EC01                    		MOV.L [R0], R1
00000807 6101                    		CMP #00H, R1
00000809 18                   S  		BNE L263
0000080A                         L262:	; bb30
0000080A 05rrrrrr             A  		BSR _vAssertCalled
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1618
0000080E 6701                    		RTSD #04H
00000810                         L263:	; return
                                 ;    1617 	}
                                 ;    1618 }
00000810 6701                    		RTSD #04H
00000812                         _vTaskEndScheduler:
                                 		.STACK	_vTaskEndScheduler=4
                                 ;    1619 /*-----------------------------------------------------------*/
                                 ;    1620 
                                 ;    1621 void vTaskEndScheduler( void )
                                 ;    1622 {
                                 ;    1623 	/* Stop the scheduler interrupts and call the portable scheduler end
                                 ;    1624 	routine so the original ISRs can be restored if necessary.  The port
                                 ;    1625 	layer must ensure interrupts enable	bit is left in the correct state. */
                                 ;    1626 	portDISABLE_INTERRUPTS();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1626
00000812 FD6A0E                  		MVFC PSW, R14
00000815 FD67EE                  		REVL R14, R14
00000818 64FE                    		AND #0FH, R14
0000081A 614E                    		CMP #04H, R14
0000081C 2Arr                    		BGT L266
0000081E                         L265:	; bb1
0000081E 757005                  		MVTIPL #05H
00000821                         L266:	; bb6
                                 ;    1627 	xSchedulerRunning = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1627
00000821 FBE2rrrrrrrr            		MOV.L #__$xSchedulerRunning, R14
00000827 F8E600                  		MOV.L #00000000H, [R14]
0000082A                         L267:	; bb6.split
                                 ;    1628 	vPortEndScheduler();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1628
0000082A 05rrrrrr             A  		BSR _vPortEndScheduler
0000082E 02                      		RTS
0000082F                         _vTaskSuspendAll:
                                 		.STACK	_vTaskSuspendAll=4
                                 ;    1629 }
                                 ;    1630 /*----------------------------------------------------------*/
                                 ;    1631 
                                 ;    1632 void vTaskSuspendAll( void )
                                 ;    1633 {
                                 ;    1634 	/* A critical section is not required as the variable is of type
                                 ;    1635 	BaseType_t.  Please read Richard Barry's reply in the following link to a
                                 ;    1636 	post in the FreeRTOS support forum before reporting this as a bug! -
                                 ;    1637 	http://goo.gl/wu4acr */
                                 ;    1638 	++uxSchedulerSuspended;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1638
0000082F FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
00000835 ECEF                    		MOV.L [R14], R15
00000837 621F                    		ADD #01H, R15
00000839 E3EF                    		MOV.L R15, [R14]
0000083B 02                      		RTS
0000083C                         _xTaskResumeAll:
                                 		.STACK	_xTaskResumeAll=16
                                 ;    1639 }
                                 ;    1640 /*----------------------------------------------------------*/
                                 ;    1641 
                                 ;    1642 #if ( configUSE_TICKLESS_IDLE != 0 )
                                 ;    1643 
                                 ;    1644 	static TickType_t prvGetExpectedIdleTime( void )
                                 ;    1645 	{
                                 ;    1646 	TickType_t xReturn;
                                 ;    1647 
                                 ;    1648 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
                                 ;    1649 		{
                                 ;    1650 			xReturn = 0;
                                 ;    1651 		}
                                 ;    1652 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
                                 ;    1653 		{
                                 ;    1654 			/* There are other idle priority tasks in the ready state.  If
                                 ;    1655 			time slicing is used then the very next tick interrupt must be
                                 ;    1656 			processed. */
                                 ;    1657 			xReturn = 0;
                                 ;    1658 		}
                                 ;    1659 		else
                                 ;    1660 		{
                                 ;    1661 			xReturn = xNextTaskUnblockTime - xTickCount;
                                 ;    1662 		}
                                 ;    1663 
                                 ;    1664 		return xReturn;
                                 ;    1665 	}
                                 ;    1666 
                                 ;    1667 #endif /* configUSE_TICKLESS_IDLE */
                                 ;    1668 /*----------------------------------------------------------*/
                                 ;    1669 
                                 ;    1670 BaseType_t xTaskResumeAll( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1670
0000083C 60C0                    		SUB #0CH, R0
                                 ;    1671 {
                                 ;    1672 TCB_t *pxTCB;
                                 ;    1673 BaseType_t xAlreadyYielded = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1673
0000083E 3E0100                  		MOV.L #00000000H, 04H[R0]
00000841                         L270:	; entry.split
                                 ;    1674 
                                 ;    1675 	/* If uxSchedulerSuspended is zero then this function does not match a
                                 ;    1676 	previous call to vTaskSuspendAll(). */
                                 ;    1677 	configASSERT( uxSchedulerSuspended );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1677
00000841 FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
00000847 ECEE                    		MOV.L [R14], R14
00000849 610E                    		CMP #00H, R14
0000084B 18                   S  		BNE L272
0000084C                         L271:	; bb3
0000084C 05rrrrrr             A  		BSR _vAssertCalled
00000850                         L272:	; bb7
                                 ;    1678 
                                 ;    1679 	/* It is possible that an ISR caused a task to be removed from an event
                                 ;    1680 	list while the scheduler was suspended.  If this was the case then the
                                 ;    1681 	removed task will have been added to the xPendingReadyList.  Once the
                                 ;    1682 	scheduler has been resumed it is safe to move all the pending ready
                                 ;    1683 	tasks from this list into their appropriate ready list. */
                                 ;    1684 	taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1684
00000850 39rrrr               W  		BSR _vTaskEnterCritical
00000853                         L273:	; bb7.split
                                 ;    1685 	{
                                 ;    1686 		--uxSchedulerSuspended;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1686
00000853 FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
00000859 ECEF                    		MOV.L [R14], R15
0000085B 601F                    		SUB #01H, R15
0000085D E3EF                    		MOV.L R15, [R14]
0000085F                         L274:	; bb7.split1
                                 ;    1687 
                                 ;    1688 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1688
0000085F FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
00000865 ECEE                    		MOV.L [R14], R14
00000867 610E                    		CMP #00H, R14
00000869 3Brrrr               W  		BNE L293
0000086C                         L275:	; bb12
                                 ;    1689 		{
                                 ;    1690 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1690
0000086C FBE2rrrrrrrr            		MOV.L #__$uxCurrentNumberOfTasks, R14
00000872 ECEE                    		MOV.L [R14], R14
00000874 610E                    		CMP #00H, R14
00000876 21rr                    		BNE L284
00000878 38rrrr               W  		BRA L293
0000087B                         L276:	; bb14
                                 ;    1691 			{
                                 ;    1692 				/* Move any readied tasks from the pending list into the
                                 ;    1693 				appropriate ready list. */
                                 ;    1694 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
                                 ;    1695 				{
                                 ;    1696 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1696
0000087B FB12rrrrrrrr            		MOV.L #__$xPendingReadyList, R1
00000881 A899                    		MOV.L 0CH[R1], R1
00000883 E11003                  		MOV.L 0CH[R1], [R0]
00000886                         L277:	; bb14.split
                                 ;    1697 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1697
00000886 EC01                    		MOV.L [R0], R1
00000888 711118                  		ADD #18H, R1
0000088B 05rrrrrr             A  		BSR _uxListRemove
0000088F                         L278:	; bb14.split2
                                 ;    1698 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1698
0000088F EC01                    		MOV.L [R0], R1
00000891 6241                    		ADD #04H, R1
00000893 05rrrrrr             A  		BSR _uxListRemove
00000897                         L279:	; bb14.split3
                                 ;    1699 					prvAddTaskToReadyList( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1699
00000897 EC01                    		MOV.L [R0], R1
00000899 AA99                    		MOV.L 2CH[R1], R1
0000089B FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
000008A1 0684E1                  		CMP [R14].L, R1
000008A4 25rr                    		BLEU L281
000008A6                         L280:	; bb26
000008A6 EC01                    		MOV.L [R0], R1
000008A8 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
000008AE E11E0B                  		MOV.L 2CH[R1], [R14]
000008B1                         L281:	; bb37
000008B1 EC02                    		MOV.L [R0], R2
000008B3 AAAB                    		MOV.L 2CH[R2], R3
000008B5 751314                  		MUL #14H, R3
000008B8 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
000008BE 4B31                    		ADD R3, R1
000008C0 6242                    		ADD #04H, R2
000008C2 05rrrrrr             A  		BSR _vListInsertEnd
000008C6                         L282:	; bb37.split
                                 ;    1700 
                                 ;    1701 					/* If the moved task has a priority higher than the current
                                 ;    1702 					task then a yield must be performed. */
                                 ;    1703 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1703
000008C6 EC01                    		MOV.L [R0], R1
000008C8 AA99                    		MOV.L 2CH[R1], R1
000008CA FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000008D0 ECEE                    		MOV.L [R14], R14
000008D2 0685E10B                		CMP 2CH[R14].L, R1
000008D6 23rr                    		BLTU L284
000008D8                         L283:	; bb45
                                 ;    1704 					{
                                 ;    1705 						xYieldPending = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1705
000008D8 FBE2rrrrrrrr            		MOV.L #__$xYieldPending, R14
000008DE F8E601                  		MOV.L #00000001H, [R14]
000008E1                         L284:	; bb57
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1694
000008E1 FBE2rrrrrrrr            		MOV.L #__$xPendingReadyList, R14
000008E7 ECEE                    		MOV.L [R14], R14
000008E9 610E                    		CMP #00H, R14
000008EB 21rr                    		BNE L276
000008ED                         L285:	; bb65
                                 ;    1706 					}
                                 ;    1707 					else
                                 ;    1708 					{
                                 ;    1709 						mtCOVERAGE_TEST_MARKER();
                                 ;    1710 					}
                                 ;    1711 				}
                                 ;    1712 
                                 ;    1713 				/* If any ticks occurred while the scheduler was suspended then
                                 ;    1714 				they should be processed now.  This ensures the tick count does
                                 ;    1715 				not	slip, and that any delayed tasks are resumed at the correct
                                 ;    1716 				time. */
                                 ;    1717 				if( uxPendedTicks > ( UBaseType_t ) 0U )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1717
000008ED FBE2rrrrrrrr            		MOV.L #__$uxPendedTicks, R14
000008F3 ECEE                    		MOV.L [R14], R14
000008F5 610E                    		CMP #00H, R14
000008F7 21rr                    		BNE L289
000008F9 2Err                 B  		BRA L290
000008FB                         L286:	; bb68
                                 ;    1718 				{
                                 ;    1719 					while( uxPendedTicks > ( UBaseType_t ) 0U )
                                 ;    1720 					{
                                 ;    1721 						if( xTaskIncrementTick() != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1721
000008FB 39rrrr               W  		BSR _xTaskIncrementTick
000008FE 6101                    		CMP #00H, R1
00000900 10                   S  		BEQ L288
00000901                         L287:	; bb69
                                 ;    1722 						{
                                 ;    1723 							xYieldPending = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1723
00000901 FBE2rrrrrrrr            		MOV.L #__$xYieldPending, R14
00000907 F8E601                  		MOV.L #00000001H, [R14]
0000090A                         L288:	; bb75
                                 ;    1724 						}
                                 ;    1725 						else
                                 ;    1726 						{
                                 ;    1727 							mtCOVERAGE_TEST_MARKER();
                                 ;    1728 						}
                                 ;    1729 						--uxPendedTicks;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1729
0000090A FBE2rrrrrrrr            		MOV.L #__$uxPendedTicks, R14
00000910 ECEF                    		MOV.L [R14], R15
00000912 601F                    		SUB #01H, R15
00000914 E3EF                    		MOV.L R15, [R14]
00000916                         L289:	; bb78
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1719
00000916 FBE2rrrrrrrr            		MOV.L #__$uxPendedTicks, R14
0000091C ECEE                    		MOV.L [R14], R14
0000091E 610E                    		CMP #00H, R14
00000920 21rr                    		BNE L286
00000922                         L290:	; bb90
                                 ;    1730 					}
                                 ;    1731 				}
                                 ;    1732 				else
                                 ;    1733 				{
                                 ;    1734 					mtCOVERAGE_TEST_MARKER();
                                 ;    1735 				}
                                 ;    1736 
                                 ;    1737 				if( xYieldPending == pdTRUE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1737
00000922 FBE2rrrrrrrr            		MOV.L #__$xYieldPending, R14
00000928 ECEE                    		MOV.L [R14], R14
0000092A 611E                    		CMP #01H, R14
0000092C 21rr                    		BNE L293
0000092E                         L291:	; bb91
                                 ;    1738 				{
                                 ;    1739 					#if( configUSE_PREEMPTION != 0 )
                                 ;    1740 					{
                                 ;    1741 						xAlreadyYielded = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1741
0000092E 3E0101                  		MOV.L #00000001H, 04H[R0]
00000931                         L292:	; bb91.split
                                 ;    1742 					}
                                 ;    1743 					#endif
                                 ;    1744 					taskYIELD_IF_USING_PREEMPTION();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1744
                                 		._LINE_TOP  inline_asm
                                  
00000931 7EA5                    	PUSH.L R5
                                 	 
00000933 FB5EE07208              	MOV.L #553696, R5
00000938 F85401                  	MOV.B #1, [R5]
                                 	 
0000093B EC55                    	MOV.L [R5], R5
                                 	 
0000093D 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
0000093F                         L293:	; bb108
                                 ;    1745 				}
                                 ;    1746 				else
                                 ;    1747 				{
                                 ;    1748 					mtCOVERAGE_TEST_MARKER();
                                 ;    1749 				}
                                 ;    1750 			}
                                 ;    1751 		}
                                 ;    1752 		else
                                 ;    1753 		{
                                 ;    1754 			mtCOVERAGE_TEST_MARKER();
                                 ;    1755 		}
                                 ;    1756 	}
                                 ;    1757 	taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1757
0000093F 39rrrr               W  		BSR _vTaskExitCritical
00000942                         L294:	; bb108.split
                                 ;    1758 
                                 ;    1759 	return xAlreadyYielded;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1759
00000942 A809                    		MOV.L 04H[R0], R1
00000944 A081                    		MOV.L R1, 08H[R0]
00000946                         L295:	; bb108.split4
                                 ;    1760 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1760
00000946 6703                    		RTSD #0CH
00000948                         _xTaskGetTickCount:
                                 		.STACK	_xTaskGetTickCount=12
                                 ;    1761 /*-----------------------------------------------------------*/
                                 ;    1762 
                                 ;    1763 TickType_t xTaskGetTickCount( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1763
00000948 6080                    		SUB #08H, R0
                                 ;    1764 {
                                 ;    1765 TickType_t xTicks;
                                 ;    1766 
                                 ;    1767 	/* Critical section required if running on a 16 bit processor. */
                                 ;    1768 	portTICK_TYPE_ENTER_CRITICAL();
                                 ;    1769 	{
                                 ;    1770 		xTicks = xTickCount;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1770
0000094A FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000950 E0E0                    		MOV.L [R14], [R0]
00000952                         L297:	; entry.split
                                 ;    1771 	}
                                 ;    1772 	portTICK_TYPE_EXIT_CRITICAL();
                                 ;    1773 
                                 ;    1774 	return xTicks;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1774
00000952 EC01                    		MOV.L [R0], R1
00000954 A009                    		MOV.L R1, 04H[R0]
00000956                         L298:	; entry.split1
                                 ;    1775 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1775
00000956 6702                    		RTSD #08H
00000958                         _xTaskGetTickCountFromISR:
                                 		.STACK	_xTaskGetTickCountFromISR=16
                                 ;    1776 /*-----------------------------------------------------------*/
                                 ;    1777 
                                 ;    1778 TickType_t xTaskGetTickCountFromISR( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1778
00000958 60C0                    		SUB #0CH, R0
                                 ;    1779 {
                                 ;    1780 TickType_t xReturn;
                                 ;    1781 UBaseType_t uxSavedInterruptStatus;
                                 ;    1782 
                                 ;    1783 	/* RTOS ports that support interrupt nesting have the concept of a maximum
                                 ;    1784 	system call (or maximum API call) interrupt priority.  Interrupts that are
                                 ;    1785 	above the maximum system call priority are kept permanently enabled, even
                                 ;    1786 	when the RTOS kernel is in a critical section, but cannot make any calls to
                                 ;    1787 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
                                 ;    1788 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
                                 ;    1789 	failure if a FreeRTOS API function is called from an interrupt that has been
                                 ;    1790 	assigned a priority above the configured maximum system call priority.
                                 ;    1791 	Only FreeRTOS functions that end in FromISR can be called from interrupts
                                 ;    1792 	that have been assigned a priority at or (logically) below the maximum
                                 ;    1793 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
                                 ;    1794 	safe API to ensure interrupt entry is as fast and as simple as possible.
                                 ;    1795 	More information (albeit Cortex-M specific) is provided on the following
                                 ;    1796 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
                                 ;    1797 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1797
0000095A FD6A0E                  		MVFC PSW, R14
0000095D FD67EE                  		REVL R14, R14
00000960 64FE                    		AND #0FH, R14
00000962 616E                    		CMP #06H, R14
00000964 29rr                    		BLT L301
00000966                         L300:	; bb3
00000966 05rrrrrr             A  		BSR _vAssertCalled
0000096A                         L301:	; bb11
                                 ;    1798 
                                 ;    1799 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1799
0000096A 3E0100                  		MOV.L #00000000H, 04H[R0]
0000096D                         L302:	; bb11.split
                                 ;    1800 	{
                                 ;    1801 		xReturn = xTickCount;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1801
0000096D FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000973 E0E0                    		MOV.L [R14], [R0]
00000975                         L303:	; bb11.split2
                                 ;    1802 	}
                                 ;    1803 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
                                 ;    1804 
                                 ;    1805 	return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1805
00000975 EC01                    		MOV.L [R0], R1
00000977 A081                    		MOV.L R1, 08H[R0]
00000979                         L304:	; bb11.split3
                                 ;    1806 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1806
00000979 6703                    		RTSD #0CH
0000097B                         _uxTaskGetNumberOfTasks:
                                 		.STACK	_uxTaskGetNumberOfTasks=8
                                 ;    1807 /*-----------------------------------------------------------*/
                                 ;    1808 
                                 ;    1809 UBaseType_t uxTaskGetNumberOfTasks( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1809
0000097B 6040                    		SUB #04H, R0
                                 ;    1810 {
                                 ;    1811 	/* A critical section is not required because the variables are of type
                                 ;    1812 	BaseType_t. */
                                 ;    1813 	return uxCurrentNumberOfTasks;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1813
0000097D FBE2rrrrrrrr            		MOV.L #__$uxCurrentNumberOfTasks, R14
00000983 ECE1                    		MOV.L [R14], R1
00000985 E301                    		MOV.L R1, [R0]
00000987                         L306:	; entry.split
                                 ;    1814 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1814
00000987 6701                    		RTSD #04H
00000989                         _uxTaskGetSystemState:
                                 		.STACK	_uxTaskGetSystemState=28
                                 ;    1815 /*-----------------------------------------------------------*/
                                 ;    1816 
                                 ;    1817 #if ( INCLUDE_pcTaskGetTaskName == 1 )
                                 ;    1818 
                                 ;    1819 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                 ;    1820 	{
                                 ;    1821 	TCB_t *pxTCB;
                                 ;    1822 
                                 ;    1823 		/* If null is passed in here then the name of the calling task is being queried. */
                                 ;    1824 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
                                 ;    1825 		configASSERT( pxTCB );
                                 ;    1826 		return &( pxTCB->pcTaskName[ 0 ] );
                                 ;    1827 	}
                                 ;    1828 
                                 ;    1829 #endif /* INCLUDE_pcTaskGetTaskName */
                                 ;    1830 /*-----------------------------------------------------------*/
                                 ;    1831 
                                 ;    1832 #if ( configUSE_TRACE_FACILITY == 1 )
                                 ;    1833 
                                 ;    1834 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1834
00000989 7100E8                  		ADD #0FFFFFFE8H, R0
0000098C A109                    		MOV.L R1, 14H[R0]
0000098E A102                    		MOV.L R2, 10H[R0]
00000990 A08B                    		MOV.L R3, 0CH[R0]
                                 ;    1835 	{
                                 ;    1836 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1836
00000992 F80600                  		MOV.L #00000000H, [R0]
00000995 3E0108                  		MOV.L #00000008H, 04H[R0]
00000998                         L308:	; entry.split
                                 ;    1837 
                                 ;    1838 		vTaskSuspendAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1838
00000998 39rrrr               W  		BSR _vTaskSuspendAll
0000099B                         L309:	; entry.split1
                                 ;    1839 		{
                                 ;    1840 			/* Is there a space in the array for each task in the system? */
                                 ;    1841 			if( uxArraySize >= uxCurrentNumberOfTasks )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1841
0000099B A901                    		MOV.L 10H[R0], R1
0000099D FBE2rrrrrrrr            		MOV.L #__$uxCurrentNumberOfTasks, R14
000009A3 0684E1                  		CMP [R14].L, R1
000009A6 22rr                  * 		BLTU L319
         38rrrr                  
000009AB                         L310:	; bb7
                                 ;    1842 			{
                                 ;    1843 				/* Fill in an TaskStatus_t structure with information on each
                                 ;    1844 				task in the Ready state. */
                                 ;    1845 				do
                                 ;    1846 				{
                                 ;    1847 					uxQueue--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1847
000009AB A809                    		MOV.L 04H[R0], R1
000009AD 6011                    		SUB #01H, R1
000009AF A009                    		MOV.L R1, 04H[R0]
000009B1                         L311:	; bb7.split
                                 ;    1848 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1848
000009B1 EC01                    		MOV.L [R0], R1
000009B3 6C51                    		SHLL #05H, R1
000009B5 06890105                		ADD 14H[R0].L, R1
000009B9 A80B                    		MOV.L 04H[R0], R3
000009BB 751314                  		MUL #14H, R3
000009BE FB22rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R2
000009C4 4B32                    		ADD R3, R2
000009C6 6613                    		MOV.L #00000001H, R3
000009C8 39rrrr               W  		BSR __$prvListTaskWithinSingleList
000009CB 068801                  		ADD [R0].L, R1
000009CE E301                    		MOV.L R1, [R0]
000009D0                         L312:	; bb7.split2
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1845
000009D0 A809                    		MOV.L 04H[R0], R1
000009D2 6101                    		CMP #00H, R1
000009D4 21rr                    		BNE L310
000009D6                         L313:	; bb21
                                 ;    1849 
                                 ;    1850 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some por
                                 ;    1851 
                                 ;    1852 				/* Fill in an TaskStatus_t structure with information on each
                                 ;    1853 				task in the Blocked state. */
                                 ;    1854 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1854
000009D6 EC01                    		MOV.L [R0], R1
000009D8 6C51                    		SHLL #05H, R1
000009DA 06890105                		ADD 14H[R0].L, R1
000009DE FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
000009E4 ECE2                    		MOV.L [R14], R2
000009E6 6623                    		MOV.L #00000002H, R3
000009E8 39rrrr               W  		BSR __$prvListTaskWithinSingleList
000009EB 068801                  		ADD [R0].L, R1
000009EE E301                    		MOV.L R1, [R0]
000009F0                         L314:	; bb21.split
                                 ;    1855 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1855
000009F0 EC01                    		MOV.L [R0], R1
000009F2 6C51                    		SHLL #05H, R1
000009F4 06890105                		ADD 14H[R0].L, R1
000009F8 FBE2rrrrrrrr            		MOV.L #__$pxOverflowDelayedTaskList, R14
000009FE ECE2                    		MOV.L [R14], R2
00000A00 6623                    		MOV.L #00000002H, R3
00000A02 39rrrr               W  		BSR __$prvListTaskWithinSingleList
00000A05 068801                  		ADD [R0].L, R1
00000A08 E301                    		MOV.L R1, [R0]
00000A0A                         L315:	; bb21.split3
                                 ;    1856 
                                 ;    1857 				#if( INCLUDE_vTaskDelete == 1 )
                                 ;    1858 				{
                                 ;    1859 					/* Fill in an TaskStatus_t structure with information on
                                 ;    1860 					each task that has been deleted but not yet cleaned up. */
                                 ;    1861 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1861
00000A0A EC01                    		MOV.L [R0], R1
00000A0C 6C51                    		SHLL #05H, R1
00000A0E 06890105                		ADD 14H[R0].L, R1
00000A12 6643                    		MOV.L #00000004H, R3
00000A14 FB22rrrrrrrr            		MOV.L #__$xTasksWaitingTermination, R2
00000A1A 39rrrr               W  		BSR __$prvListTaskWithinSingleList
00000A1D 068801                  		ADD [R0].L, R1
00000A20 E301                    		MOV.L R1, [R0]
00000A22                         L316:	; bb21.split4
                                 ;    1862 				}
                                 ;    1863 				#endif
                                 ;    1864 
                                 ;    1865 				#if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    1866 				{
                                 ;    1867 					/* Fill in an TaskStatus_t structure with information on
                                 ;    1868 					each task in the Suspended state. */
                                 ;    1869 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1869
00000A22 EC01                    		MOV.L [R0], R1
00000A24 6C51                    		SHLL #05H, R1
00000A26 06890105                		ADD 14H[R0].L, R1
00000A2A 6633                    		MOV.L #00000003H, R3
00000A2C FB22rrrrrrrr            		MOV.L #__$xSuspendedTaskList, R2
00000A32 39rrrr               W  		BSR __$prvListTaskWithinSingleList
00000A35 068801                  		ADD [R0].L, R1
00000A38 E301                    		MOV.L R1, [R0]
00000A3A                         L317:	; bb21.split5
                                 ;    1870 				}
                                 ;    1871 				#endif
                                 ;    1872 
                                 ;    1873 				#if ( configGENERATE_RUN_TIME_STATS == 1)
                                 ;    1874 				{
                                 ;    1875 					if( pulTotalRunTime != NULL )
                                 ;    1876 					{
                                 ;    1877 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
                                 ;    1878 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
                                 ;    1879 						#else
                                 ;    1880 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
                                 ;    1881 						#endif
                                 ;    1882 					}
                                 ;    1883 				}
                                 ;    1884 				#else
                                 ;    1885 				{
                                 ;    1886 					if( pulTotalRunTime != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1886
00000A3A A889                    		MOV.L 0CH[R0], R1
00000A3C 6101                    		CMP #00H, R1
00000A3E 10                   S  		BEQ L319
00000A3F                         L318:	; bb49
                                 ;    1887 					{
                                 ;    1888 						*pulTotalRunTime = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1888
00000A3F A889                    		MOV.L 0CH[R0], R1
00000A41 F81600                  		MOV.L #00000000H, [R1]
00000A44                         L319:	; bb62
                                 ;    1889 					}
                                 ;    1890 				}
                                 ;    1891 				#endif
                                 ;    1892 			}
                                 ;    1893 			else
                                 ;    1894 			{
                                 ;    1895 				mtCOVERAGE_TEST_MARKER();
                                 ;    1896 			}
                                 ;    1897 		}
                                 ;    1898 		( void ) xTaskResumeAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1898
00000A44 39rrrr               W  		BSR _xTaskResumeAll
00000A47                         L320:	; bb62.split
                                 ;    1899 
                                 ;    1900 		return uxTask;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1900
00000A47 EC01                    		MOV.L [R0], R1
00000A49 A081                    		MOV.L R1, 08H[R0]
00000A4B                         L321:	; bb62.split6
                                 ;    1901 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1901
00000A4B 6706                    		RTSD #18H
00000A4D                         _xTaskIncrementTick:
                                 		.STACK	_xTaskIncrementTick=28
                                 ;    1902 
                                 ;    1903 #endif /* configUSE_TRACE_FACILITY */
                                 ;    1904 /*----------------------------------------------------------*/
                                 ;    1905 
                                 ;    1906 #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
                                 ;    1907 
                                 ;    1908 	TaskHandle_t xTaskGetIdleTaskHandle( void )
                                 ;    1909 	{
                                 ;    1910 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
                                 ;    1911 		started, then xIdleTaskHandle will be NULL. */
                                 ;    1912 		configASSERT( ( xIdleTaskHandle != NULL ) );
                                 ;    1913 		return xIdleTaskHandle;
                                 ;    1914 	}
                                 ;    1915 
                                 ;    1916 #endif /* INCLUDE_xTaskGetIdleTaskHandle */
                                 ;    1917 /*----------------------------------------------------------*/
                                 ;    1918 
                                 ;    1919 /* This conditional compilation should use inequality to 0, not equality to 1.
                                 ;    1920 This is to ensure vTaskStepTick() is available when user defined low power mode
                                 ;    1921 implementations require configUSE_TICKLESS_IDLE to be set to a value other than
                                 ;    1922 1. */
                                 ;    1923 #if ( configUSE_TICKLESS_IDLE != 0 )
                                 ;    1924 
                                 ;    1925 	void vTaskStepTick( const TickType_t xTicksToJump )
                                 ;    1926 	{
                                 ;    1927 		/* Correct the tick count value after a period during which the tick
                                 ;    1928 		was suppressed.  Note this does *not* call the tick hook function for
                                 ;    1929 		each stepped tick. */
                                 ;    1930 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
                                 ;    1931 		xTickCount += xTicksToJump;
                                 ;    1932 		traceINCREASE_TICK_COUNT( xTicksToJump );
                                 ;    1933 	}
                                 ;    1934 
                                 ;    1935 #endif /* configUSE_TICKLESS_IDLE */
                                 ;    1936 /*----------------------------------------------------------*/
                                 ;    1937 
                                 ;    1938 BaseType_t xTaskIncrementTick( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1938
00000A4D 7100E8                  		ADD #0FFFFFFE8H, R0
                                 ;    1939 {
                                 ;    1940 TCB_t * pxTCB;
                                 ;    1941 TickType_t xItemValue;
                                 ;    1942 BaseType_t xSwitchRequired = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1942
00000A50 3E0200                  		MOV.L #00000000H, 08H[R0]
00000A53                         L323:	; entry.split
                                 ;    1943 
                                 ;    1944 	/* Called by the portable layer each time a tick interrupt occurs.
                                 ;    1945 	Increments the tick then checks to see if the new tick value will cause any
                                 ;    1946 	tasks to be unblocked. */
                                 ;    1947 	traceTASK_INCREMENT_TICK( xTickCount );
                                 ;    1948 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1948
00000A53 FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
00000A59 ECEE                    		MOV.L [R14], R14
00000A5B 610E                    		CMP #00H, R14
00000A5D 3Brrrr               W  		BNE L353
00000A60                         L324:	; bb6
                                 ;    1949 	{
                                 ;    1950 		/* Increment the RTOS tick, switching the delayed and overflowed
                                 ;    1951 		delayed lists if it wraps to 0. */
                                 ;    1952 		++xTickCount;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1952
00000A60 FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000A66 ECEF                    		MOV.L [R14], R15
00000A68 621F                    		ADD #01H, R15
00000A6A E3EF                    		MOV.L R15, [R14]
00000A6C                         L325:	; bb6.split
                                 ;    1953 
                                 ;    1954 		{
                                 ;    1955 			/* Minor optimisation.  The tick count cannot change in this
                                 ;    1956 			block. */
                                 ;    1957 			const TickType_t xConstTickCount = xTickCount;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1957
00000A6C FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000A72 E4E003                  		MOV.L [R14], 0CH[R0]
00000A75                         L326:	; bb6.split1
                                 ;    1958 
                                 ;    1959 			if( xConstTickCount == ( TickType_t ) 0U )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1959
00000A75 A889                    		MOV.L 0CH[R0], R1
00000A77 6101                    		CMP #00H, R1
00000A79 21rr                    		BNE L334
00000A7B                         L327:	; bb12
                                 ;    1960 			{
                                 ;    1961 				taskSWITCH_DELAYED_LISTS();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1961
00000A7B FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
00000A81 ECEE                    		MOV.L [R14], R14
00000A83 ECEE                    		MOV.L [R14], R14
00000A85 610E                    		CMP #00H, R14
00000A87 10                   S  		BEQ L329
00000A88                         L328:	; bb13
00000A88 05rrrrrr             A  		BSR _vAssertCalled
00000A8C                         L329:	; bb21
00000A8C FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
00000A92 E4E004                  		MOV.L [R14], 10H[R0]
00000A95                         L330:	; bb21.split
00000A95 FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
00000A9B FBF2rrrrrrrr            		MOV.L #__$pxOverflowDelayedTaskList, R15
00000AA1 E0FE                    		MOV.L [R15], [R14]
00000AA3                         L331:	; bb21.split2
00000AA3 FBE2rrrrrrrr            		MOV.L #__$pxOverflowDelayedTaskList, R14
00000AA9 E10E04                  		MOV.L 10H[R0], [R14]
00000AAC                         L332:	; bb21.split3
00000AAC FBE2rrrrrrrr            		MOV.L #__$xNumOfOverflows, R14
00000AB2 ECEF                    		MOV.L [R14], R15
00000AB4 621F                    		ADD #01H, R15
00000AB6 E3EF                    		MOV.L R15, [R14]
00000AB8                         L333:	; bb21.split4
00000AB8 39rrrr               W  		BSR __$prvResetNextTaskUnblockTime
00000ABB                         L334:	; bb33
                                 ;    1962 			}
                                 ;    1963 			else
                                 ;    1964 			{
                                 ;    1965 				mtCOVERAGE_TEST_MARKER();
                                 ;    1966 			}
                                 ;    1967 
                                 ;    1968 			/* See if this tick has made a timeout expire.  Tasks are stored in
                                 ;    1969 			the	queue in the order of their wake time - meaning once one task
                                 ;    1970 			has been found whose block time has not expired there is no need to
                                 ;    1971 			look any further down the list. */
                                 ;    1972 			if( xConstTickCount >= xNextTaskUnblockTime )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1972
00000ABB A889                    		MOV.L 0CH[R0], R1
00000ABD FBE2rrrrrrrr            		MOV.L #__$xNextTaskUnblockTime, R14
00000AC3 0684E1                  		CMP [R14].L, R1
00000AC6 23rr                  * 		BGEU L348
         38rrrr                  
00000ACB 38rrrr               W  		BRA L349
00000ACE                         L335:	; bb37
                                 ;    1973 			{
                                 ;    1974 				for( ;; )
                                 ;    1975 				{
                                 ;    1976 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
                                 ;    1977 					{
                                 ;    1978 						/* The delayed list is empty.  Set xNextTaskUnblockTime
                                 ;    1979 						to the maximum possible value so it is extremely
                                 ;    1980 						unlikely that the
                                 ;    1981 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
                                 ;    1982 						next time through. */
                                 ;    1983 						xNextTaskUnblockTime = portMAX_DELAY;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1983
00000ACE FBE2rrrrrrrr            		MOV.L #__$xNextTaskUnblockTime, R14
00000AD4 F8E6FF                  		MOV.L #0FFFFFFFFH, [R14]
00000AD7 38rrrr               W  		BRA L349
00000ADA                         L336:	; bb39
                                 ;    1984 						break;
                                 ;    1985 					}
                                 ;    1986 					else
                                 ;    1987 					{
                                 ;    1988 						/* The delayed list is not empty, get the value of the
                                 ;    1989 						item at the head of the delayed list.  This is the time
                                 ;    1990 						at which the task at the head of the delayed list must
                                 ;    1991 						be removed from the Blocked state. */
                                 ;    1992 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1992
00000ADA FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
00000AE0 ECE1                    		MOV.L [R14], R1
00000AE2 A899                    		MOV.L 0CH[R1], R1
00000AE4 E11003                  		MOV.L 0CH[R1], [R0]
00000AE7                         L337:	; bb39.split
                                 ;    1993 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1993
00000AE7 EC01                    		MOV.L [R0], R1
00000AE9 E5100101                		MOV.L 04H[R1], 04H[R0]
00000AED                         L338:	; bb39.split5
                                 ;    1994 
                                 ;    1995 						if( xConstTickCount < xItemValue )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1995
00000AED A889                    		MOV.L 0CH[R0], R1
00000AEF 06850101                		CMP 04H[R0].L, R1
00000AF3 22rr                    		BGEU L340
00000AF5                         L339:	; bb52
                                 ;    1996 						{
                                 ;    1997 							/* It is not time to unblock this item yet, but the
                                 ;    1998 							item value is the time at which the task at the head
                                 ;    1999 							of the blocked list must be removed from the Blocked
                                 ;    2000 							state -	so record the item value in
                                 ;    2001 							xNextTaskUnblockTime. */
                                 ;    2002 							xNextTaskUnblockTime = xItemValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2002
00000AF5 FBE2rrrrrrrr            		MOV.L #__$xNextTaskUnblockTime, R14
00000AFB E10E01                  		MOV.L 04H[R0], [R14]
00000AFE 2Err                 B  		BRA L349
00000B00                         L340:	; bb61
                                 ;    2003 							break;
                                 ;    2004 						}
                                 ;    2005 						else
                                 ;    2006 						{
                                 ;    2007 							mtCOVERAGE_TEST_MARKER();
                                 ;    2008 						}
                                 ;    2009 
                                 ;    2010 						/* It is time to remove the item from the Blocked state. */
                                 ;    2011 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2011
00000B00 EC01                    		MOV.L [R0], R1
00000B02 6241                    		ADD #04H, R1
00000B04 05rrrrrr             A  		BSR _uxListRemove
00000B08                         L341:	; bb61.split
                                 ;    2012 
                                 ;    2013 						/* Is the task waiting on an event also?  If so remove
                                 ;    2014 						it from the event list. */
                                 ;    2015 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2015
00000B08 EC01                    		MOV.L [R0], R1
00000B0A AA91                    		MOV.L 28H[R1], R1
00000B0C 6101                    		CMP #00H, R1
00000B0E 10                   S  		BEQ L343
00000B0F                         L342:	; bb66
                                 ;    2016 						{
                                 ;    2017 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2017
00000B0F EC01                    		MOV.L [R0], R1
00000B11 711118                  		ADD #18H, R1
00000B14 05rrrrrr             A  		BSR _uxListRemove
00000B18                         L343:	; bb79
                                 ;    2018 						}
                                 ;    2019 						else
                                 ;    2020 						{
                                 ;    2021 							mtCOVERAGE_TEST_MARKER();
                                 ;    2022 						}
                                 ;    2023 
                                 ;    2024 						/* Place the unblocked task into the appropriate ready
                                 ;    2025 						list. */
                                 ;    2026 						prvAddTaskToReadyList( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2026
00000B18 EC01                    		MOV.L [R0], R1
00000B1A AA99                    		MOV.L 2CH[R1], R1
00000B1C FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000B22 0684E1                  		CMP [R14].L, R1
00000B25 25rr                    		BLEU L345
00000B27                         L344:	; bb80
00000B27 EC01                    		MOV.L [R0], R1
00000B29 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000B2F E11E0B                  		MOV.L 2CH[R1], [R14]
00000B32                         L345:	; bb91
00000B32 EC02                    		MOV.L [R0], R2
00000B34 AAAB                    		MOV.L 2CH[R2], R3
00000B36 751314                  		MUL #14H, R3
00000B39 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
00000B3F 4B31                    		ADD R3, R1
00000B41 6242                    		ADD #04H, R2
00000B43 05rrrrrr             A  		BSR _vListInsertEnd
00000B47                         L346:	; bb91.split
                                 ;    2027 
                                 ;    2028 						/* A task being unblocked cannot cause an immediate
                                 ;    2029 						context switch if preemption is turned off. */
                                 ;    2030 						#if (  configUSE_PREEMPTION == 1 )
                                 ;    2031 						{
                                 ;    2032 							/* Preemption is on, but a context switch should
                                 ;    2033 							only be performed if the unblocked task has a
                                 ;    2034 							priority that is equal to or higher than the
                                 ;    2035 							currently executing task. */
                                 ;    2036 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2036
00000B47 EC01                    		MOV.L [R0], R1
00000B49 AA99                    		MOV.L 2CH[R1], R1
00000B4B FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000B51 ECEE                    		MOV.L [R14], R14
00000B53 0685E10B                		CMP 2CH[R14].L, R1
00000B57 23rr                    		BLTU L348
00000B59                         L347:	; bb99
                                 ;    2037 							{
                                 ;    2038 								xSwitchRequired = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2038
00000B59 3E0201                  		MOV.L #00000001H, 08H[R0]
00000B5C                         L348:	; bb120.split
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",1976
00000B5C FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
00000B62 ECEE                    		MOV.L [R14], R14
00000B64 ECEE                    		MOV.L [R14], R14
00000B66 610E                    		CMP #00H, R14
00000B68 3Arrrr               W  		BEQ L335
00000B6B 38rrrr               W  		BRA L336
00000B6E                         L349:	; bb129
                                 ;    2039 							}
                                 ;    2040 							else
                                 ;    2041 							{
                                 ;    2042 								mtCOVERAGE_TEST_MARKER();
                                 ;    2043 							}
                                 ;    2044 						}
                                 ;    2045 						#endif /* configUSE_PREEMPTION */
                                 ;    2046 					}
                                 ;    2047 				}
                                 ;    2048 			}
                                 ;    2049 		}
                                 ;    2050 
                                 ;    2051 		/* Tasks of equal priority to the currently running task will share
                                 ;    2052 		processing time (time slice) if preemption is on, and the application
                                 ;    2053 		writer has not explicitly turned time slicing off. */
                                 ;    2054 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
                                 ;    2055 		{
                                 ;    2056 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2056
00000B6E FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000B74 ECE1                    		MOV.L [R14], R1
00000B76 AA99                    		MOV.L 2CH[R1], R1
00000B78 751114                  		MUL #14H, R1
00000B7B FBE2rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R14
00000B81 4B1E                    		ADD R1, R14
00000B83 ECEE                    		MOV.L [R14], R14
00000B85 612E                    		CMP #02H, R14
00000B87 23rr                    		BLTU L351
00000B89                         L350:	; bb130
                                 ;    2057 			{
                                 ;    2058 				xSwitchRequired = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2058
00000B89 3E0201                  		MOV.L #00000001H, 08H[R0]
00000B8C                         L351:	; bb142
                                 ;    2059 			}
                                 ;    2060 			else
                                 ;    2061 			{
                                 ;    2062 				mtCOVERAGE_TEST_MARKER();
                                 ;    2063 			}
                                 ;    2064 		}
                                 ;    2065 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
                                 ;    2066 
                                 ;    2067 		#if ( configUSE_TICK_HOOK == 1 )
                                 ;    2068 		{
                                 ;    2069 			/* Guard against the tick hook being called when the pended tick
                                 ;    2070 			count is being unwound (when the scheduler is being unlocked). */
                                 ;    2071 			if( uxPendedTicks == ( UBaseType_t ) 0U )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2071
00000B8C FBE2rrrrrrrr            		MOV.L #__$uxPendedTicks, R14
00000B92 ECEE                    		MOV.L [R14], R14
00000B94 610E                    		CMP #00H, R14
00000B96 21rr                    		BNE L355
00000B98                         L352:	; bb143
                                 ;    2072 			{
                                 ;    2073 				vApplicationTickHook();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2073
00000B98 05rrrrrr             A  		BSR _vApplicationTickHook
00000B9C 2Err                 B  		BRA L355
00000B9E                         L353:	; bb150
                                 ;    2074 			}
                                 ;    2075 			else
                                 ;    2076 			{
                                 ;    2077 				mtCOVERAGE_TEST_MARKER();
                                 ;    2078 			}
                                 ;    2079 		}
                                 ;    2080 		#endif /* configUSE_TICK_HOOK */
                                 ;    2081 	}
                                 ;    2082 	else
                                 ;    2083 	{
                                 ;    2084 		++uxPendedTicks;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2084
00000B9E FBE2rrrrrrrr            		MOV.L #__$uxPendedTicks, R14
00000BA4 ECEF                    		MOV.L [R14], R15
00000BA6 621F                    		ADD #01H, R15
00000BA8 E3EF                    		MOV.L R15, [R14]
00000BAA                         L354:	; bb150.split
                                 ;    2085 
                                 ;    2086 		/* The tick hook gets called at regular intervals, even if the
                                 ;    2087 		scheduler is locked. */
                                 ;    2088 		#if ( configUSE_TICK_HOOK == 1 )
                                 ;    2089 		{
                                 ;    2090 			vApplicationTickHook();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2090
00000BAA 05rrrrrr             A  		BSR _vApplicationTickHook
00000BAE                         L355:	; bb158
                                 ;    2091 		}
                                 ;    2092 		#endif
                                 ;    2093 	}
                                 ;    2094 
                                 ;    2095 	#if ( configUSE_PREEMPTION == 1 )
                                 ;    2096 	{
                                 ;    2097 		if( xYieldPending != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2097
00000BAE FBE2rrrrrrrr            		MOV.L #__$xYieldPending, R14
00000BB4 ECEE                    		MOV.L [R14], R14
00000BB6 610E                    		CMP #00H, R14
00000BB8 10                   S  		BEQ L357
00000BB9                         L356:	; bb159
                                 ;    2098 		{
                                 ;    2099 			xSwitchRequired = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2099
00000BB9 3E0201                  		MOV.L #00000001H, 08H[R0]
00000BBC                         L357:	; bb165
                                 ;    2100 		}
                                 ;    2101 		else
                                 ;    2102 		{
                                 ;    2103 			mtCOVERAGE_TEST_MARKER();
                                 ;    2104 		}
                                 ;    2105 	}
                                 ;    2106 	#endif /* configUSE_PREEMPTION */
                                 ;    2107 
                                 ;    2108 	return xSwitchRequired;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2108
00000BBC A881                    		MOV.L 08H[R0], R1
00000BBE A109                    		MOV.L R1, 14H[R0]
00000BC0                         L358:	; bb165.split
                                 ;    2109 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2109
00000BC0 6706                    		RTSD #18H
00000BC2                         _vTaskSwitchContext:
                                 		.STACK	_vTaskSwitchContext=8
                                 ;    2110 /*-----------------------------------------------------------*/
                                 ;    2111 
                                 ;    2112 #if ( configUSE_APPLICATION_TASK_TAG == 1 )
                                 ;    2113 
                                 ;    2114 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
                                 ;    2115 	{
                                 ;    2116 	TCB_t *xTCB;
                                 ;    2117 
                                 ;    2118 		/* If xTask is NULL then it is the task hook of the calling task that is
                                 ;    2119 		getting set. */
                                 ;    2120 		if( xTask == NULL )
                                 ;    2121 		{
                                 ;    2122 			xTCB = ( TCB_t * ) pxCurrentTCB;
                                 ;    2123 		}
                                 ;    2124 		else
                                 ;    2125 		{
                                 ;    2126 			xTCB = ( TCB_t * ) xTask;
                                 ;    2127 		}
                                 ;    2128 
                                 ;    2129 		/* Save the hook function in the TCB.  A critical section is required as
                                 ;    2130 		the value can be accessed from an interrupt. */
                                 ;    2131 		taskENTER_CRITICAL();
                                 ;    2132 			xTCB->pxTaskTag = pxHookFunction;
                                 ;    2133 		taskEXIT_CRITICAL();
                                 ;    2134 	}
                                 ;    2135 
                                 ;    2136 #endif /* configUSE_APPLICATION_TASK_TAG */
                                 ;    2137 /*-----------------------------------------------------------*/
                                 ;    2138 
                                 ;    2139 #if ( configUSE_APPLICATION_TASK_TAG == 1 )
                                 ;    2140 
                                 ;    2141 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
                                 ;    2142 	{
                                 ;    2143 	TCB_t *xTCB;
                                 ;    2144 	TaskHookFunction_t xReturn;
                                 ;    2145 
                                 ;    2146 		/* If xTask is NULL then we are setting our own task hook. */
                                 ;    2147 		if( xTask == NULL )
                                 ;    2148 		{
                                 ;    2149 			xTCB = ( TCB_t * ) pxCurrentTCB;
                                 ;    2150 		}
                                 ;    2151 		else
                                 ;    2152 		{
                                 ;    2153 			xTCB = ( TCB_t * ) xTask;
                                 ;    2154 		}
                                 ;    2155 
                                 ;    2156 		/* Save the hook function in the TCB.  A critical section is required as
                                 ;    2157 		the value can be accessed from an interrupt. */
                                 ;    2158 		taskENTER_CRITICAL();
                                 ;    2159 		{
                                 ;    2160 			xReturn = xTCB->pxTaskTag;
                                 ;    2161 		}
                                 ;    2162 		taskEXIT_CRITICAL();
                                 ;    2163 
                                 ;    2164 		return xReturn;
                                 ;    2165 	}
                                 ;    2166 
                                 ;    2167 #endif /* configUSE_APPLICATION_TASK_TAG */
                                 ;    2168 /*-----------------------------------------------------------*/
                                 ;    2169 
                                 ;    2170 #if ( configUSE_APPLICATION_TASK_TAG == 1 )
                                 ;    2171 
                                 ;    2172 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
                                 ;    2173 	{
                                 ;    2174 	TCB_t *xTCB;
                                 ;    2175 	BaseType_t xReturn;
                                 ;    2176 
                                 ;    2177 		/* If xTask is NULL then we are calling our own task hook. */
                                 ;    2178 		if( xTask == NULL )
                                 ;    2179 		{
                                 ;    2180 			xTCB = ( TCB_t * ) pxCurrentTCB;
                                 ;    2181 		}
                                 ;    2182 		else
                                 ;    2183 		{
                                 ;    2184 			xTCB = ( TCB_t * ) xTask;
                                 ;    2185 		}
                                 ;    2186 
                                 ;    2187 		if( xTCB->pxTaskTag != NULL )
                                 ;    2188 		{
                                 ;    2189 			xReturn = xTCB->pxTaskTag( pvParameter );
                                 ;    2190 		}
                                 ;    2191 		else
                                 ;    2192 		{
                                 ;    2193 			xReturn = pdFAIL;
                                 ;    2194 		}
                                 ;    2195 
                                 ;    2196 		return xReturn;
                                 ;    2197 	}
                                 ;    2198 
                                 ;    2199 #endif /* configUSE_APPLICATION_TASK_TAG */
                                 ;    2200 /*-----------------------------------------------------------*/
                                 ;    2201 
                                 ;    2202 void vTaskSwitchContext( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2202
00000BC2 6040                    		SUB #04H, R0
                                 ;    2203 {
                                 ;    2204 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2204
00000BC4 FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
00000BCA ECEE                    		MOV.L [R14], R14
00000BCC 610E                    		CMP #00H, R14
00000BCE 20rr                    		BEQ L361
00000BD0                         L360:	; bb2
                                 ;    2205 	{
                                 ;    2206 		/* The scheduler is currently suspended - do not allow a context
                                 ;    2207 		switch. */
                                 ;    2208 		xYieldPending = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2208
00000BD0 FBE2rrrrrrrr            		MOV.L #__$xYieldPending, R14
00000BD6 F8E601                  		MOV.L #00000001H, [R14]
00000BD9 6701                    		RTSD #04H
00000BDB                         L361:	; bb3
                                 ;    2209 	}
                                 ;    2210 	else
                                 ;    2211 	{
                                 ;    2212 		xYieldPending = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2212
00000BDB FBE2rrrrrrrr            		MOV.L #__$xYieldPending, R14
00000BE1 F8E600                  		MOV.L #00000000H, [R14]
00000BE4                         L362:	; bb3.split
                                 ;    2213 		traceTASK_SWITCHED_OUT();
                                 ;    2214 
                                 ;    2215 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
                                 ;    2216 		{
                                 ;    2217 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
                                 ;    2218 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
                                 ;    2219 				#else
                                 ;    2220 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
                                 ;    2221 				#endif
                                 ;    2222 
                                 ;    2223 				/* Add the amount of time the task has been running to the
                                 ;    2224 				accumulated	time so far.  The time the task started running was
                                 ;    2225 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
                                 ;    2226 				protection here	so count values are only valid until the timer
                                 ;    2227 				overflows.  The guard against negative values is to protect
                                 ;    2228 				against suspect run time stat counter implementations - which
                                 ;    2229 				are provided by the application, not the kernel. */
                                 ;    2230 				if( ulTotalRunTime > ulTaskSwitchedInTime )
                                 ;    2231 				{
                                 ;    2232 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
                                 ;    2233 				}
                                 ;    2234 				else
                                 ;    2235 				{
                                 ;    2236 					mtCOVERAGE_TEST_MARKER();
                                 ;    2237 				}
                                 ;    2238 				ulTaskSwitchedInTime = ulTotalRunTime;
                                 ;    2239 		}
                                 ;    2240 		#endif /* configGENERATE_RUN_TIME_STATS */
                                 ;    2241 
                                 ;    2242 		/* Check for stack overflow, if configured. */
                                 ;    2243 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2243
00000BE4 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000BEA ECEF                    		MOV.L [R14], R15
00000BEC ECFF                    		MOV.L [R15], R15
00000BEE ECEE                    		MOV.L [R14], R14
00000BF0 0685EF0C                		CMP 30H[R14].L, R15
00000BF4 24rr                    		BGTU L367
00000BF6                         L363:	; bb5
00000BF6 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000BFC ECE1                    		MOV.L [R14], R1
00000BFE ECE2                    		MOV.L [R14], R2
00000C00 712234                  		ADD #34H, R2
00000C03 05rrrrrr             A  		BSR _vApplicationStackOverflowHook
00000C07 2Err                 B  		BRA L367
00000C09                         L364:	; bb20
00000C09 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000C0F ECEE                    		MOV.L [R14], R14
00000C11 610E                    		CMP #00H, R14
00000C13 18                   S  		BNE L366
00000C14                         L365:	; bb21
00000C14 05rrrrrr             A  		BSR _vAssertCalled
00000C18                         L366:	; bb26
00000C18 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000C1E ECEF                    		MOV.L [R14], R15
00000C20 601F                    		SUB #01H, R15
00000C22 E3EF                    		MOV.L R15, [R14]
00000C24                         L367:	; bb29
                                 ;    2244 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
                                 ;    2245 
                                 ;    2246 		/* Select a new task to run using either the generic C or port
                                 ;    2247 		optimised asm code. */
                                 ;    2248 		taskSELECT_HIGHEST_PRIORITY_TASK();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2248
00000C24 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000C2A ECEE                    		MOV.L [R14], R14
00000C2C 751E14                  		MUL #14H, R14
00000C2F FBF2rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R15
00000C35 4BEF                    		ADD R14, R15
00000C37 ECFE                    		MOV.L [R15], R14
00000C39 610E                    		CMP #00H, R14
00000C3B 20rr                    		BEQ L364
00000C3D                         L368:	; bb39
00000C3D FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000C43 ECEE                    		MOV.L [R14], R14
00000C45 751E14                  		MUL #14H, R14
00000C48 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
00000C4E 4BE1                    		ADD R14, R1
00000C50 E301                    		MOV.L R1, [R0]
00000C52                         L369:	; bb39.split
00000C52 EC01                    		MOV.L [R0], R1
00000C54 A81A                    		MOV.L 04H[R1], R2
00000C56 E5210101                		MOV.L 04H[R2], 04H[R1]
00000C5A                         L370:	; bb39.split1
00000C5A EC01                    		MOV.L [R0], R1
00000C5C 711E08                  		ADD #08H, R1, R14
00000C5F 06851E01                		CMP 04H[R1].L, R14
00000C63 18                   S  		BNE L372
00000C64                         L371:	; bb50
00000C64 EC01                    		MOV.L [R0], R1
00000C66 A81A                    		MOV.L 04H[R1], R2
00000C68 E5210101                		MOV.L 04H[R2], 04H[R1]
00000C6C                         L372:	; bb68
00000C6C EC01                    		MOV.L [R0], R1
00000C6E A819                    		MOV.L 04H[R1], R1
00000C70 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000C76 E11E03                  		MOV.L 0CH[R1], [R14]
00000C79 6701                    		RTSD #04H
00000C7B                         _vTaskPlaceOnEventList:
                                 		.STACK	_vTaskPlaceOnEventList=16
                                 ;    2249 		traceTASK_SWITCHED_IN();
                                 ;    2250 
                                 ;    2251 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
                                 ;    2252 		{
                                 ;    2253 			/* Switch Newlib's _impure_ptr variable to point to the _reent
                                 ;    2254 			structure specific to this task. */
                                 ;    2255 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
                                 ;    2256 		}
                                 ;    2257 		#endif /* configUSE_NEWLIB_REENTRANT */
                                 ;    2258 	}
                                 ;    2259 }
                                 ;    2260 /*-----------------------------------------------------------*/
                                 ;    2261 
                                 ;    2262 void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2262
00000C7B 60C0                    		SUB #0CH, R0
00000C7D A081                    		MOV.L R1, 08H[R0]
00000C7F A00A                    		MOV.L R2, 04H[R0]
                                 ;    2263 {
                                 ;    2264 TickType_t xTimeToWake;
                                 ;    2265 
                                 ;    2266 	configASSERT( pxEventList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2266
00000C81 A881                    		MOV.L 08H[R0], R1
00000C83 6101                    		CMP #00H, R1
00000C85 18                   S  		BNE L375
00000C86                         L374:	; bb4
00000C86 05rrrrrr             A  		BSR _vAssertCalled
00000C8A                         L375:	; bb7
                                 ;    2267 
                                 ;    2268 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
                                 ;    2269 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
                                 ;    2270 
                                 ;    2271 	/* Place the event list item of the TCB in the appropriate event list.
                                 ;    2272 	This is placed in the list in priority order so the highest priority task
                                 ;    2273 	is the first to be woken by the event.  The queue that contains the event
                                 ;    2274 	list is locked, preventing simultaneous access from interrupts. */
                                 ;    2275 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2275
00000C8A A881                    		MOV.L 08H[R0], R1
00000C8C FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000C92 ECE2                    		MOV.L [R14], R2
00000C94 712218                  		ADD #18H, R2
00000C97 05rrrrrr             A  		BSR _vListInsert
00000C9B                         L376:	; bb7.split
                                 ;    2276 
                                 ;    2277 	/* The task must be removed from from the ready list before it is added to
                                 ;    2278 	the blocked list as the same list item is used for both lists.  Exclusive
                                 ;    2279 	access to the ready lists guaranteed because the scheduler is locked. */
                                 ;    2280 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2280
00000C9B FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000CA1 ECE1                    		MOV.L [R14], R1
00000CA3 6241                    		ADD #04H, R1
00000CA5 05rrrrrr             A  		BSR _uxListRemove
00000CA9                         L377:	; bb7.split1
                                 ;    2281 	{
                                 ;    2282 		/* The current task must be in a ready list, so there is no need to
                                 ;    2283 		check, and the port reset macro can be called directly. */
                                 ;    2284 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
                                 ;    2285 	}
                                 ;    2286 	else
                                 ;    2287 	{
                                 ;    2288 		mtCOVERAGE_TEST_MARKER();
                                 ;    2289 	}
                                 ;    2290 
                                 ;    2291 	#if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    2292 	{
                                 ;    2293 		if( xTicksToWait == portMAX_DELAY )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2293
00000CA9 A809                    		MOV.L 04H[R0], R1
00000CAB 7501FF                  		CMP #0FFFFFFFFH, R1
00000CAE 21rr                    		BNE L379
00000CB0                         L378:	; bb22
                                 ;    2294 		{
                                 ;    2295 			/* Add the task to the suspended task list instead of a delayed task
                                 ;    2296 			list to ensure the task is not woken by a timing event.  It will
                                 ;    2297 			block indefinitely. */
                                 ;    2298 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2298
00000CB0 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000CB6 ECE2                    		MOV.L [R14], R2
00000CB8 6242                    		ADD #04H, R2
00000CBA FB12rrrrrrrr            		MOV.L #__$xSuspendedTaskList, R1
00000CC0 05rrrrrr             A  		BSR _vListInsertEnd
00000CC4 6703                    		RTSD #0CH
00000CC6                         L379:	; bb25
                                 ;    2299 		}
                                 ;    2300 		else
                                 ;    2301 		{
                                 ;    2302 			/* Calculate the time at which the task should be woken if the event
                                 ;    2303 			does not occur.  This may overflow but this doesn't matter, the
                                 ;    2304 			scheduler will handle it. */
                                 ;    2305 			xTimeToWake = xTickCount + xTicksToWait;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2305
00000CC6 FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000CCC ECE1                    		MOV.L [R14], R1
00000CCE 06890101                		ADD 04H[R0].L, R1
00000CD2 E301                    		MOV.L R1, [R0]
00000CD4                         L380:	; bb25.split
                                 ;    2306 			prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2306
00000CD4 EC01                    		MOV.L [R0], R1
00000CD6 39rrrr               W  		BSR __$prvAddCurrentTaskToDelayedList
00000CD9 6703                    		RTSD #0CH
00000CDB                         _vTaskPlaceOnUnorderedEventList:
                                 		.STACK	_vTaskPlaceOnUnorderedEventList=20
                                 ;    2307 		}
                                 ;    2308 	}
                                 ;    2309 	#else /* INCLUDE_vTaskSuspend */
                                 ;    2310 	{
                                 ;    2311 			/* Calculate the time at which the task should be woken if the event does
                                 ;    2312 			not occur.  This may overflow but this doesn't matter, the scheduler
                                 ;    2313 			will handle it. */
                                 ;    2314 			xTimeToWake = xTickCount + xTicksToWait;
                                 ;    2315 			prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 ;    2316 	}
                                 ;    2317 	#endif /* INCLUDE_vTaskSuspend */
                                 ;    2318 }
                                 ;    2319 /*-----------------------------------------------------------*/
                                 ;    2320 
                                 ;    2321 void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2321
00000CDB 7100F0                  		ADD #0FFFFFFF0H, R0
00000CDE A089                    		MOV.L R1, 0CH[R0]
00000CE0 A082                    		MOV.L R2, 08H[R0]
00000CE2 A00B                    		MOV.L R3, 04H[R0]
                                 ;    2322 {
                                 ;    2323 TickType_t xTimeToWake;
                                 ;    2324 
                                 ;    2325 	configASSERT( pxEventList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2325
00000CE4 A889                    		MOV.L 0CH[R0], R1
00000CE6 6101                    		CMP #00H, R1
00000CE8 18                   S  		BNE L383
00000CE9                         L382:	; bb5
00000CE9 05rrrrrr             A  		BSR _vAssertCalled
00000CED                         L383:	; bb9
                                 ;    2326 
                                 ;    2327 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
                                 ;    2328 	the event groups implementation. */
                                 ;    2329 	configASSERT( uxSchedulerSuspended != 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2329
00000CED FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
00000CF3 ECEE                    		MOV.L [R14], R14
00000CF5 610E                    		CMP #00H, R14
00000CF7 18                   S  		BNE L385
00000CF8                         L384:	; bb10
00000CF8 05rrrrrr             A  		BSR _vAssertCalled
00000CFC                         L385:	; bb17
                                 ;    2330 
                                 ;    2331 	/* Store the item value in the event list item.  It is safe to access the
                                 ;    2332 	event list item here as interrupts won't access the event list item of a
                                 ;    2333 	task that is not in the Blocked state. */
                                 ;    2334 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2334
00000CFC FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000D02 ECE1                    		MOV.L [R14], R1
00000D04 A882                    		MOV.L 08H[R0], R2
00000D06 79F2                    		BSET #1FH, R2
00000D08 A192                    		MOV.L R2, 18H[R1]
00000D0A                         L386:	; bb17.split
                                 ;    2335 
                                 ;    2336 	/* Place the event list item of the TCB at the end of the appropriate event
                                 ;    2337 	list.  It is safe to access the event list here because it is part of an
                                 ;    2338 	event group implementation - and interrupts don't access event groups
                                 ;    2339 	directly (instead they access them indirectly by pending function calls to
                                 ;    2340 	the task level). */
                                 ;    2341 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2341
00000D0A A889                    		MOV.L 0CH[R0], R1
00000D0C FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000D12 ECE2                    		MOV.L [R14], R2
00000D14 712218                  		ADD #18H, R2
00000D17 05rrrrrr             A  		BSR _vListInsertEnd
00000D1B                         L387:	; bb17.split1
                                 ;    2342 
                                 ;    2343 	/* The task must be removed from the ready list before it is added to the
                                 ;    2344 	blocked list.  Exclusive access can be assured to the ready list as the
                                 ;    2345 	scheduler is locked. */
                                 ;    2346 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2346
00000D1B FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000D21 ECE1                    		MOV.L [R14], R1
00000D23 6241                    		ADD #04H, R1
00000D25 05rrrrrr             A  		BSR _uxListRemove
00000D29                         L388:	; bb17.split2
                                 ;    2347 	{
                                 ;    2348 		/* The current task must be in a ready list, so there is no need to
                                 ;    2349 		check, and the port reset macro can be called directly. */
                                 ;    2350 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
                                 ;    2351 	}
                                 ;    2352 	else
                                 ;    2353 	{
                                 ;    2354 		mtCOVERAGE_TEST_MARKER();
                                 ;    2355 	}
                                 ;    2356 
                                 ;    2357 	#if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    2358 	{
                                 ;    2359 		if( xTicksToWait == portMAX_DELAY )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2359
00000D29 A809                    		MOV.L 04H[R0], R1
00000D2B 7501FF                  		CMP #0FFFFFFFFH, R1
00000D2E 21rr                    		BNE L390
00000D30                         L389:	; bb37
                                 ;    2360 		{
                                 ;    2361 			/* Add the task to the suspended task list instead of a delayed task
                                 ;    2362 			list to ensure it is not woken by a timing event.  It will block
                                 ;    2363 			indefinitely. */
                                 ;    2364 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2364
00000D30 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000D36 ECE2                    		MOV.L [R14], R2
00000D38 6242                    		ADD #04H, R2
00000D3A FB12rrrrrrrr            		MOV.L #__$xSuspendedTaskList, R1
00000D40 05rrrrrr             A  		BSR _vListInsertEnd
00000D44 6704                    		RTSD #10H
00000D46                         L390:	; bb40
                                 ;    2365 		}
                                 ;    2366 		else
                                 ;    2367 		{
                                 ;    2368 			/* Calculate the time at which the task should be woken if the event
                                 ;    2369 			does not occur.  This may overflow but this doesn't matter, the
                                 ;    2370 			kernel will manage it correctly. */
                                 ;    2371 			xTimeToWake = xTickCount + xTicksToWait;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2371
00000D46 FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000D4C ECE1                    		MOV.L [R14], R1
00000D4E 06890101                		ADD 04H[R0].L, R1
00000D52 E301                    		MOV.L R1, [R0]
00000D54                         L391:	; bb40.split
                                 ;    2372 			prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2372
00000D54 EC01                    		MOV.L [R0], R1
00000D56 39rrrr               W  		BSR __$prvAddCurrentTaskToDelayedList
00000D59 6704                    		RTSD #10H
00000D5B                         _vTaskPlaceOnEventListRestricted:
                                 		.STACK	_vTaskPlaceOnEventListRestricted=16
                                 ;    2373 		}
                                 ;    2374 	}
                                 ;    2375 	#else /* INCLUDE_vTaskSuspend */
                                 ;    2376 	{
                                 ;    2377 			/* Calculate the time at which the task should be woken if the event does
                                 ;    2378 			not occur.  This may overflow but this doesn't matter, the kernel
                                 ;    2379 			will manage it correctly. */
                                 ;    2380 			xTimeToWake = xTickCount + xTicksToWait;
                                 ;    2381 			prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 ;    2382 	}
                                 ;    2383 	#endif /* INCLUDE_vTaskSuspend */
                                 ;    2384 }
                                 ;    2385 /*-----------------------------------------------------------*/
                                 ;    2386 
                                 ;    2387 #if configUSE_TIMERS == 1
                                 ;    2388 
                                 ;    2389 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2389
00000D5B 60C0                    		SUB #0CH, R0
00000D5D A081                    		MOV.L R1, 08H[R0]
00000D5F A00A                    		MOV.L R2, 04H[R0]
                                 ;    2390 	{
                                 ;    2391 	TickType_t xTimeToWake;
                                 ;    2392 
                                 ;    2393 		configASSERT( pxEventList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2393
00000D61 A881                    		MOV.L 08H[R0], R1
00000D63 6101                    		CMP #00H, R1
00000D65 18                   S  		BNE L394
00000D66                         L393:	; bb4
00000D66 05rrrrrr             A  		BSR _vAssertCalled
00000D6A                         L394:	; bb7
                                 ;    2394 
                                 ;    2395 		/* This function should not be called by application code hence the
                                 ;    2396 		'Restricted' in its name.  It is not part of the public API.  It is
                                 ;    2397 		designed for use by kernel code, and has special calling requirements -
                                 ;    2398 		it should be called with the scheduler suspended. */
                                 ;    2399 
                                 ;    2400 
                                 ;    2401 		/* Place the event list item of the TCB in the appropriate event list.
                                 ;    2402 		In this case it is assume that this is the only task that is going to
                                 ;    2403 		be waiting on this event list, so the faster vListInsertEnd() function
                                 ;    2404 		can be used in place of vListInsert. */
                                 ;    2405 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2405
00000D6A A881                    		MOV.L 08H[R0], R1
00000D6C FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000D72 ECE2                    		MOV.L [R14], R2
00000D74 712218                  		ADD #18H, R2
00000D77 05rrrrrr             A  		BSR _vListInsertEnd
00000D7B                         L395:	; bb7.split
                                 ;    2406 
                                 ;    2407 		/* We must remove this task from the ready list before adding it to the
                                 ;    2408 		blocked list as the same list item is used for both lists.  This
                                 ;    2409 		function is called with the scheduler locked so interrupts will not
                                 ;    2410 		access the lists at the same time. */
                                 ;    2411 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2411
00000D7B FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000D81 ECE1                    		MOV.L [R14], R1
00000D83 6241                    		ADD #04H, R1
00000D85 05rrrrrr             A  		BSR _uxListRemove
00000D89                         L396:	; bb7.split1
                                 ;    2412 		{
                                 ;    2413 			/* The current task must be in a ready list, so there is no need to
                                 ;    2414 			check, and the port reset macro can be called directly. */
                                 ;    2415 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
                                 ;    2416 		}
                                 ;    2417 		else
                                 ;    2418 		{
                                 ;    2419 			mtCOVERAGE_TEST_MARKER();
                                 ;    2420 		}
                                 ;    2421 
                                 ;    2422 		/* Calculate the time at which the task should be woken if the event does
                                 ;    2423 		not occur.  This may overflow but this doesn't matter. */
                                 ;    2424 		xTimeToWake = xTickCount + xTicksToWait;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2424
00000D89 FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000D8F ECE1                    		MOV.L [R14], R1
00000D91 06890101                		ADD 04H[R0].L, R1
00000D95 E301                    		MOV.L R1, [R0]
00000D97                         L397:	; bb7.split2
                                 ;    2425 
                                 ;    2426 		traceTASK_DELAY_UNTIL();
                                 ;    2427 		prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2427
00000D97 EC01                    		MOV.L [R0], R1
00000D99 39rrrr               W  		BSR __$prvAddCurrentTaskToDelayedList
00000D9C 6703                    		RTSD #0CH
00000D9E                         _xTaskRemoveFromEventList:
                                 		.STACK	_xTaskRemoveFromEventList=20
                                 ;    2428 	}
                                 ;    2429 
                                 ;    2430 #endif /* configUSE_TIMERS */
                                 ;    2431 /*-----------------------------------------------------------*/
                                 ;    2432 
                                 ;    2433 BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2433
00000D9E 7100F0                  		ADD #0FFFFFFF0H, R0
00000DA1 A089                    		MOV.L R1, 0CH[R0]
                                 ;    2434 {
                                 ;    2435 TCB_t *pxUnblockedTCB;
                                 ;    2436 BaseType_t xReturn;
                                 ;    2437 
                                 ;    2438 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
                                 ;    2439 	called from a critical section within an ISR. */
                                 ;    2440 
                                 ;    2441 	/* The event list is sorted in priority order, so the first in the list can
                                 ;    2442 	be removed as it is known to be the highest priority.  Remove the TCB from
                                 ;    2443 	the delayed list, and add it to the ready list.
                                 ;    2444 
                                 ;    2445 	If an event is for a queue that is locked then this function will never
                                 ;    2446 	get called - the lock count on the queue will get modified instead.  This
                                 ;    2447 	means exclusive access to the event list is guaranteed here.
                                 ;    2448 
                                 ;    2449 	This function assumes that a check has already been made to ensure that
                                 ;    2450 	pxEventList is not empty. */
                                 ;    2451 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2451
00000DA3 A899                    		MOV.L 0CH[R1], R1
00000DA5 E11003                  		MOV.L 0CH[R1], [R0]
00000DA8                         L399:	; entry.split
                                 ;    2452 	configASSERT( pxUnblockedTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2452
00000DA8 EC01                    		MOV.L [R0], R1
00000DAA 6101                    		CMP #00H, R1
00000DAC 18                   S  		BNE L401
00000DAD                         L400:	; bb11
00000DAD 05rrrrrr             A  		BSR _vAssertCalled
00000DB1                         L401:	; bb15
                                 ;    2453 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2453
00000DB1 EC01                    		MOV.L [R0], R1
00000DB3 711118                  		ADD #18H, R1
00000DB6 05rrrrrr             A  		BSR _uxListRemove
00000DBA                         L402:	; bb15.split
                                 ;    2454 
                                 ;    2455 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2455
00000DBA FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
00000DC0 ECEE                    		MOV.L [R14], R14
00000DC2 610E                    		CMP #00H, R14
00000DC4 EC01                    		MOV.L [R0], R1
00000DC6 21rr                    		BNE L407
00000DC8                         L403:	; bb20
                                 ;    2456 	{
                                 ;    2457 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2457
00000DC8 6241                    		ADD #04H, R1
00000DCA 05rrrrrr             A  		BSR _uxListRemove
00000DCE                         L404:	; bb20.split
                                 ;    2458 		prvAddTaskToReadyList( pxUnblockedTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2458
00000DCE EC01                    		MOV.L [R0], R1
00000DD0 AA99                    		MOV.L 2CH[R1], R1
00000DD2 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000DD8 0684E1                  		CMP [R14].L, R1
00000DDB 25rr                    		BLEU L406
00000DDD                         L405:	; bb25
00000DDD EC01                    		MOV.L [R0], R1
00000DDF FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000DE5 E11E0B                  		MOV.L 2CH[R1], [R14]
00000DE8                         L406:	; bb36
00000DE8 EC02                    		MOV.L [R0], R2
00000DEA AAAB                    		MOV.L 2CH[R2], R3
00000DEC 751314                  		MUL #14H, R3
00000DEF FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
00000DF5 4B31                    		ADD R3, R1
00000DF7 6242                    		ADD #04H, R2
00000DF9 05rrrrrr             A  		BSR _vListInsertEnd
00000DFD 2Err                 B  		BRA L408
00000DFF                         L407:	; bb43
                                 ;    2459 	}
                                 ;    2460 	else
                                 ;    2461 	{
                                 ;    2462 		/* The delayed and ready lists cannot be accessed, so hold this task
                                 ;    2463 		pending until the scheduler is resumed. */
                                 ;    2464 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2464
00000DFF EF12                    		MOV.L R1, R2
00000E01 712218                  		ADD #18H, R2
00000E04 FB12rrrrrrrr            		MOV.L #__$xPendingReadyList, R1
00000E0A 05rrrrrr             A  		BSR _vListInsertEnd
00000E0E                         L408:	; bb51
                                 ;    2465 	}
                                 ;    2466 
                                 ;    2467 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2467
00000E0E EC01                    		MOV.L [R0], R1
00000E10 AA99                    		MOV.L 2CH[R1], R1
00000E12 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000E18 ECEE                    		MOV.L [R14], R14
00000E1A 0685E10B                		CMP 2CH[R14].L, R1
00000E1E 25rr                    		BLEU L411
00000E20                         L409:	; bb52
                                 ;    2468 	{
                                 ;    2469 		/* Return true if the task removed from the event list has a higher
                                 ;    2470 		priority than the calling task.  This allows the calling task to know if
                                 ;    2471 		it should force a context switch now. */
                                 ;    2472 		xReturn = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2472
00000E20 3E0101                  		MOV.L #00000001H, 04H[R0]
00000E23                         L410:	; bb52.split
                                 ;    2473 
                                 ;    2474 		/* Mark that a yield is pending in case the user is not using the
                                 ;    2475 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
                                 ;    2476 		xYieldPending = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2476
00000E23 FBE2rrrrrrrr            		MOV.L #__$xYieldPending, R14
00000E29 F8E601                  		MOV.L #00000001H, [R14]
00000E2C 08                   S  		BRA L412
00000E2D                         L411:	; bb53
                                 ;    2477 	}
                                 ;    2478 	else
                                 ;    2479 	{
                                 ;    2480 		xReturn = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2480
00000E2D 3E0100                  		MOV.L #00000000H, 04H[R0]
00000E30                         L412:	; bb63
                                 ;    2481 	}
                                 ;    2482 
                                 ;    2483 	#if( configUSE_TICKLESS_IDLE == 1 )
                                 ;    2484 	{
                                 ;    2485 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
                                 ;    2486 		might be set to the blocked task's time out time.  If the task is
                                 ;    2487 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
                                 ;    2488 		normally left unchanged, because it is automatically get reset to a new
                                 ;    2489 		value when the tick count equals xNextTaskUnblockTime.  However if
                                 ;    2490 		tickless idling is used it might be more important to enter sleep mode
                                 ;    2491 		at the earliest possible time - so reset xNextTaskUnblockTime here to
                                 ;    2492 		ensure it is updated at the earliest possible time. */
                                 ;    2493 		prvResetNextTaskUnblockTime();
                                 ;    2494 	}
                                 ;    2495 	#endif
                                 ;    2496 
                                 ;    2497 	return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2497
00000E30 A809                    		MOV.L 04H[R0], R1
00000E32 A081                    		MOV.L R1, 08H[R0]
00000E34                         L413:	; bb63.split
                                 ;    2498 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2498
00000E34 6704                    		RTSD #10H
00000E36                         _xTaskRemoveFromUnorderedEventList:
                                 		.STACK	_xTaskRemoveFromUnorderedEventList=24
                                 ;    2499 /*-----------------------------------------------------------*/
                                 ;    2500 
                                 ;    2501 BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2501
00000E36 7100EC                  		ADD #0FFFFFFECH, R0
00000E39 A101                    		MOV.L R1, 10H[R0]
00000E3B A08A                    		MOV.L R2, 0CH[R0]
                                 ;    2502 {
                                 ;    2503 TCB_t *pxUnblockedTCB;
                                 ;    2504 BaseType_t xReturn;
                                 ;    2505 
                                 ;    2506 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
                                 ;    2507 	the event flags implementation. */
                                 ;    2508 	configASSERT( uxSchedulerSuspended != pdFALSE );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2508
00000E3D FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
00000E43 ECEE                    		MOV.L [R14], R14
00000E45 610E                    		CMP #00H, R14
00000E47 18                   S  		BNE L416
00000E48                         L415:	; bb5
00000E48 05rrrrrr             A  		BSR _vAssertCalled
00000E4C                         L416:	; bb11
                                 ;    2509 
                                 ;    2510 	/* Store the new item value in the event list. */
                                 ;    2511 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2511
00000E4C A889                    		MOV.L 0CH[R0], R1
00000E4E 79F1                    		BSET #1FH, R1
00000E50 A902                    		MOV.L 10H[R0], R2
00000E52 E321                    		MOV.L R1, [R2]
00000E54                         L417:	; bb11.split
                                 ;    2512 
                                 ;    2513 	/* Remove the event list form the event flag.  Interrupts do not access
                                 ;    2514 	event flags. */
                                 ;    2515 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2515
00000E54 A901                    		MOV.L 10H[R0], R1
00000E56 E11003                  		MOV.L 0CH[R1], [R0]
00000E59                         L418:	; bb11.split1
                                 ;    2516 	configASSERT( pxUnblockedTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2516
00000E59 EC01                    		MOV.L [R0], R1
00000E5B 6101                    		CMP #00H, R1
00000E5D 18                   S  		BNE L420
00000E5E                         L419:	; bb21
00000E5E 05rrrrrr             A  		BSR _vAssertCalled
00000E62                         L420:	; bb26
                                 ;    2517 	( void ) uxListRemove( pxEventListItem );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2517
00000E62 A901                    		MOV.L 10H[R0], R1
00000E64 05rrrrrr             A  		BSR _uxListRemove
00000E68                         L421:	; bb26.split
                                 ;    2518 
                                 ;    2519 	/* Remove the task from the delayed list and add it to the ready list.  The
                                 ;    2520 	scheduler is suspended so interrupts will not be accessing the ready
                                 ;    2521 	lists. */
                                 ;    2522 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2522
00000E68 EC01                    		MOV.L [R0], R1
00000E6A 6241                    		ADD #04H, R1
00000E6C 05rrrrrr             A  		BSR _uxListRemove
00000E70                         L422:	; bb26.split2
                                 ;    2523 	prvAddTaskToReadyList( pxUnblockedTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2523
00000E70 EC01                    		MOV.L [R0], R1
00000E72 AA99                    		MOV.L 2CH[R1], R1
00000E74 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000E7A 0684E1                  		CMP [R14].L, R1
00000E7D 25rr                    		BLEU L424
00000E7F                         L423:	; bb33
00000E7F EC01                    		MOV.L [R0], R1
00000E81 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00000E87 E11E0B                  		MOV.L 2CH[R1], [R14]
00000E8A                         L424:	; bb44
00000E8A EC02                    		MOV.L [R0], R2
00000E8C AAAB                    		MOV.L 2CH[R2], R3
00000E8E 751314                  		MUL #14H, R3
00000E91 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
00000E97 4B31                    		ADD R3, R1
00000E99 6242                    		ADD #04H, R2
00000E9B 05rrrrrr             A  		BSR _vListInsertEnd
                                 ;    2524 
                                 ;    2525 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2525
00000E9F EC01                    		MOV.L [R0], R1
00000EA1 AA99                    		MOV.L 2CH[R1], R1
00000EA3 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000EA9 ECEE                    		MOV.L [R14], R14
00000EAB 0685E10B                		CMP 2CH[R14].L, R1
00000EAF 25rr                    		BLEU L427
00000EB1                         L425:	; bb52
                                 ;    2526 	{
                                 ;    2527 		/* Return true if the task removed from the event list has
                                 ;    2528 		a higher priority than the calling task.  This allows
                                 ;    2529 		the calling task to know if it should force a context
                                 ;    2530 		switch now. */
                                 ;    2531 		xReturn = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2531
00000EB1 3E0101                  		MOV.L #00000001H, 04H[R0]
00000EB4                         L426:	; bb52.split
                                 ;    2532 
                                 ;    2533 		/* Mark that a yield is pending in case the user is not using the
                                 ;    2534 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
                                 ;    2535 		xYieldPending = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2535
00000EB4 FBE2rrrrrrrr            		MOV.L #__$xYieldPending, R14
00000EBA F8E601                  		MOV.L #00000001H, [R14]
00000EBD 08                   S  		BRA L428
00000EBE                         L427:	; bb53
                                 ;    2536 	}
                                 ;    2537 	else
                                 ;    2538 	{
                                 ;    2539 		xReturn = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2539
00000EBE 3E0100                  		MOV.L #00000000H, 04H[R0]
00000EC1                         L428:	; bb63
                                 ;    2540 	}
                                 ;    2541 
                                 ;    2542 	return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2542
00000EC1 A809                    		MOV.L 04H[R0], R1
00000EC3 A081                    		MOV.L R1, 08H[R0]
00000EC5                         L429:	; bb63.split
                                 ;    2543 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2543
00000EC5 6705                    		RTSD #14H
00000EC7                         _vTaskSetTimeOutState:
                                 		.STACK	_vTaskSetTimeOutState=8
                                 ;    2544 /*-----------------------------------------------------------*/
                                 ;    2545 
                                 ;    2546 void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2546
00000EC7 6040                    		SUB #04H, R0
00000EC9 E301                    		MOV.L R1, [R0]
                                 ;    2547 {
                                 ;    2548 	configASSERT( pxTimeOut );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2548
00000ECB 6101                    		CMP #00H, R1
00000ECD 18                   S  		BNE L432
00000ECE                         L431:	; bb2
00000ECE 05rrrrrr             A  		BSR _vAssertCalled
00000ED2                         L432:	; bb5
                                 ;    2549 	pxTimeOut->xOverflowCount = xNumOfOverflows;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2549
00000ED2 EC01                    		MOV.L [R0], R1
00000ED4 FBE2rrrrrrrr            		MOV.L #__$xNumOfOverflows, R14
00000EDA E0E1                    		MOV.L [R14], [R1]
00000EDC                         L433:	; bb5.split
                                 ;    2550 	pxTimeOut->xTimeOnEntering = xTickCount;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2550
00000EDC EC01                    		MOV.L [R0], R1
00000EDE FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000EE4 E4E101                  		MOV.L [R14], 04H[R1]
00000EE7 6701                    		RTSD #04H
00000EE9                         _xTaskCheckForTimeOut:
                                 		.STACK	_xTaskCheckForTimeOut=28
                                 ;    2551 }
                                 ;    2552 /*-----------------------------------------------------------*/
                                 ;    2553 
                                 ;    2554 BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2554
00000EE9 7100E8                  		ADD #0FFFFFFE8H, R0
00000EEC A109                    		MOV.L R1, 14H[R0]
00000EEE A102                    		MOV.L R2, 10H[R0]
                                 ;    2555 {
                                 ;    2556 BaseType_t xReturn;
                                 ;    2557 
                                 ;    2558 	configASSERT( pxTimeOut );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2558
00000EF0 A909                    		MOV.L 14H[R0], R1
00000EF2 6101                    		CMP #00H, R1
00000EF4 18                   S  		BNE L436
00000EF5                         L435:	; bb5
00000EF5 05rrrrrr             A  		BSR _vAssertCalled
00000EF9                         L436:	; bb10
                                 ;    2559 	configASSERT( pxTicksToWait );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2559
00000EF9 A901                    		MOV.L 10H[R0], R1
00000EFB 6101                    		CMP #00H, R1
00000EFD 18                   S  		BNE L438
00000EFE                         L437:	; bb11
00000EFE 05rrrrrr             A  		BSR _vAssertCalled
00000F02                         L438:	; bb16
                                 ;    2560 
                                 ;    2561 	taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2561
00000F02 39rrrr               W  		BSR _vTaskEnterCritical
00000F05                         L439:	; bb16.split
                                 ;    2562 	{
                                 ;    2563 		/* Minor optimisation.  The tick count cannot change in this block. */
                                 ;    2564 		const TickType_t xConstTickCount = xTickCount;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2564
00000F05 FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00000F0B E4E002                  		MOV.L [R14], 08H[R0]
00000F0E                         L440:	; bb16.split1
                                 ;    2565 
                                 ;    2566 		#if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    2567 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
                                 ;    2568 			the maximum block time then the task should block indefinitely, and
                                 ;    2569 			therefore never time out. */
                                 ;    2570 			if( *pxTicksToWait == portMAX_DELAY )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2570
00000F0E A901                    		MOV.L 10H[R0], R1
00000F10 EC1E                    		MOV.L [R1], R14
00000F12 750EFF                  		CMP #0FFFFFFFFH, R14
00000F15 18                   S  		BNE L442
00000F16                         L441:	; bb19
                                 ;    2571 			{
                                 ;    2572 				xReturn = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2572
00000F16 3E0100                  		MOV.L #00000000H, 04H[R0]
00000F19 2Err                 B  		BRA L453
00000F1B                         L442:	; bb21
                                 ;    2573 			}
                                 ;    2574 			else /* We are not blocking indefinitely, perform the checks below. */
                                 ;    2575 		#endif
                                 ;    2576 
                                 ;    2577 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred a
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2577
00000F1B FBE2rrrrrrrr            		MOV.L #__$xNumOfOverflows, R14
00000F21 ECEE                    		MOV.L [R14], R14
00000F23 A909                    		MOV.L 14H[R0], R1
00000F25 06841E                  		CMP [R1].L, R14
00000F28 21rr                    		BNE L449
00000F2A 2Err                 B  		BRA L451
00000F2C                         L443:	; bb22
                                 ;    2578 		{
                                 ;    2579 			/* The tick count is greater than the time at which vTaskSetTimeout()
                                 ;    2580 			was called, but has also overflowed since vTaskSetTimeOut() was called.
                                 ;    2581 			It must have wrapped all the way around and gone past us again. This
                                 ;    2582 			passed since vTaskSetTimeout() was called. */
                                 ;    2583 			xReturn = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2583
00000F2C 3E0101                  		MOV.L #00000001H, 04H[R0]
00000F2F 2Err                 B  		BRA L453
00000F31                         L444:	; bb24
                                 ;    2584 		}
                                 ;    2585 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2585
00000F31 A881                    		MOV.L 08H[R0], R1
00000F33 A90A                    		MOV.L 14H[R0], R2
00000F35 06812101                		SUB 04H[R2].L, R1
00000F39 A902                    		MOV.L 10H[R0], R2
00000F3B 068421                  		CMP [R2].L, R1
00000F3E 22rr                    		BGEU L448
00000F40                         L445:	; bb25
                                 ;    2586 		{
                                 ;    2587 			/* Not a genuine timeout. Adjust parameters for time remaining. */
                                 ;    2588 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2588
00000F40 A881                    		MOV.L 08H[R0], R1
00000F42 A90A                    		MOV.L 14H[R0], R2
00000F44 06812101                		SUB 04H[R2].L, R1
00000F48 A902                    		MOV.L 10H[R0], R2
00000F4A EC2E                    		MOV.L [R2], R14
00000F4C 431E                    		SUB R1, R14
00000F4E E32E                    		MOV.L R14, [R2]
00000F50                         L446:	; bb25.split
                                 ;    2589 			vTaskSetTimeOutState( pxTimeOut );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2589
00000F50 A909                    		MOV.L 14H[R0], R1
00000F52 39rrrr               W  		BSR _vTaskSetTimeOutState
00000F55                         L447:	; bb25.split2
                                 ;    2590 			xReturn = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2590
00000F55 3E0100                  		MOV.L #00000000H, 04H[R0]
00000F58 2Err                 B  		BRA L453
00000F5A                         L448:	; bb35
                                 ;    2591 		}
                                 ;    2592 		else
                                 ;    2593 		{
                                 ;    2594 			xReturn = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2594
00000F5A 3E0101                  		MOV.L #00000001H, 04H[R0]
00000F5D 2Err                 B  		BRA L453
00000F5F                         L449:	; bb53
00000F5F A909                    		MOV.L 14H[R0], R1
00000F61 A882                    		MOV.L 08H[R0], R2
00000F63 06851201                		CMP 04H[R1].L, R2
00000F67 23rr                    		BLTU L451
00000F69                         L450:	; bb60
00000F69 F80601                  		MOV.L #00000001H, [R0]
00000F6C 08                   S  		BRA L452
00000F6D                         L451:	; bb61
00000F6D F80600                  		MOV.L #00000000H, [R0]
00000F70                         L452:	; bb62
00000F70 EC01                    		MOV.L [R0], R1
00000F72 6101                    		CMP #00H, R1
00000F74 21rr                    		BNE L443
00000F76 2Err                 B  		BRA L444
00000F78                         L453:	; bb73
                                 ;    2595 		}
                                 ;    2596 	}
                                 ;    2597 	taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2597
00000F78 39rrrr               W  		BSR _vTaskExitCritical
00000F7B                         L454:	; bb73.split
                                 ;    2598 
                                 ;    2599 	return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2599
00000F7B A809                    		MOV.L 04H[R0], R1
00000F7D A089                    		MOV.L R1, 0CH[R0]
00000F7F                         L455:	; bb73.split3
                                 ;    2600 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2600
00000F7F 6706                    		RTSD #18H
00000F81                         _vTaskMissedYield:
                                 		.STACK	_vTaskMissedYield=4
                                 ;    2601 /*-----------------------------------------------------------*/
                                 ;    2602 
                                 ;    2603 void vTaskMissedYield( void )
                                 ;    2604 {
                                 ;    2605 	xYieldPending = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2605
00000F81 FBE2rrrrrrrr            		MOV.L #__$xYieldPending, R14
00000F87 F8E601                  		MOV.L #00000001H, [R14]
00000F8A 02                      		RTS
00000F8B                         _uxTaskGetTaskNumber:
                                 		.STACK	_uxTaskGetTaskNumber=20
                                 ;    2606 }
                                 ;    2607 /*-----------------------------------------------------------*/
                                 ;    2608 
                                 ;    2609 #if ( configUSE_TRACE_FACILITY == 1 )
                                 ;    2610 
                                 ;    2611 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2611
00000F8B 7100F0                  		ADD #0FFFFFFF0H, R0
00000F8E A089                    		MOV.L R1, 0CH[R0]
                                 ;    2612 	{
                                 ;    2613 	UBaseType_t uxReturn;
                                 ;    2614 	TCB_t *pxTCB;
                                 ;    2615 
                                 ;    2616 		if( xTask != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2616
00000F90 6101                    		CMP #00H, R1
00000F92 20rr                    		BEQ L460
00000F94                         L458:	; bb4
                                 ;    2617 		{
                                 ;    2618 			pxTCB = ( TCB_t * ) xTask;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2618
00000F94 E5000301                		MOV.L 0CH[R0], 04H[R0]
00000F98                         L459:	; bb4.split
                                 ;    2619 			uxReturn = pxTCB->uxTaskNumber;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2619
00000F98 A809                    		MOV.L 04H[R0], R1
00000F9A E11012                  		MOV.L 48H[R1], [R0]
00000F9D 08                   S  		BRA L461
00000F9E                         L460:	; bb10
                                 ;    2620 		}
                                 ;    2621 		else
                                 ;    2622 		{
                                 ;    2623 			uxReturn = 0U;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2623
00000F9E F80600                  		MOV.L #00000000H, [R0]
00000FA1                         L461:	; bb14
                                 ;    2624 		}
                                 ;    2625 
                                 ;    2626 		return uxReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2626
00000FA1 EC01                    		MOV.L [R0], R1
00000FA3 A081                    		MOV.L R1, 08H[R0]
00000FA5                         L462:	; bb14.split
                                 ;    2627 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2627
00000FA5 6704                    		RTSD #10H
00000FA7                         _vTaskSetTaskNumber:
                                 		.STACK	_vTaskSetTaskNumber=16
                                 ;    2628 
                                 ;    2629 #endif /* configUSE_TRACE_FACILITY */
                                 ;    2630 /*-----------------------------------------------------------*/
                                 ;    2631 
                                 ;    2632 #if ( configUSE_TRACE_FACILITY == 1 )
                                 ;    2633 
                                 ;    2634 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2634
00000FA7 60C0                    		SUB #0CH, R0
00000FA9 A081                    		MOV.L R1, 08H[R0]
00000FAB A00A                    		MOV.L R2, 04H[R0]
                                 ;    2635 	{
                                 ;    2636 	TCB_t *pxTCB;
                                 ;    2637 
                                 ;    2638 		if( xTask != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2638
00000FAD A881                    		MOV.L 08H[R0], R1
00000FAF 6101                    		CMP #00H, R1
00000FB1 20rr                    		BEQ L466
00000FB3                         L464:	; bb4
                                 ;    2639 		{
                                 ;    2640 			pxTCB = ( TCB_t * ) xTask;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2640
00000FB3 E10002                  		MOV.L 08H[R0], [R0]
00000FB6                         L465:	; bb4.split
                                 ;    2641 			pxTCB->uxTaskNumber = uxHandle;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2641
00000FB6 A809                    		MOV.L 04H[R0], R1
00000FB8 EC02                    		MOV.L [R0], R2
00000FBA A4A1                    		MOV.L R1, 48H[R2]
00000FBC 6703                    		RTSD #0CH
00000FBE                         L466:	; return
                                 ;    2642 		}
                                 ;    2643 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2643
00000FBE 6703                    		RTSD #0CH
00000FC0                         __$prvIdleTask:
                                 		.STACK	__$prvIdleTask=8
                                 ;    2644 
                                 ;    2645 #endif /* configUSE_TRACE_FACILITY */
                                 ;    2646 
                                 ;    2647 /*
                                 ;    2648  * -----------------------------------------------------------
                                 ;    2649  * The Idle task.
                                 ;    2650  * ----------------------------------------------------------
                                 ;    2651  *
                                 ;    2652  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
                                 ;    2653  * language extensions.  The equivalent prototype for this function is:
                                 ;    2654  *
                                 ;    2655  * void prvIdleTask( void *pvParameters );
                                 ;    2656  *
                                 ;    2657  */
                                 ;    2658 static portTASK_FUNCTION( prvIdleTask, pvParameters )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2658
00000FC0 6040                    		SUB #04H, R0
00000FC2 E301                    		MOV.L R1, [R0]
                                 ;    2659 {
                                 ;    2660 	/* Stop warnings. */
                                 ;    2661 	( void ) pvParameters;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2661
00000FC4 2Err                 B  		BRA L470
00000FC6                         L468:	; bb3
                                 ;    2662 
                                 ;    2663 	for( ;; )
                                 ;    2664 	{
                                 ;    2665 		/* See if any tasks have been deleted. */
                                 ;    2666 		prvCheckTasksWaitingTermination();
                                 ;    2667 
                                 ;    2668 		#if ( configUSE_PREEMPTION == 0 )
                                 ;    2669 		{
                                 ;    2670 			/* If we are not using preemption we keep forcing a task switch to
                                 ;    2671 			see if any other task has become available.  If we are using
                                 ;    2672 			preemption we don't need to do this as any task becoming available
                                 ;    2673 			will automatically get the processor anyway. */
                                 ;    2674 			taskYIELD();
                                 ;    2675 		}
                                 ;    2676 		#endif /* configUSE_PREEMPTION */
                                 ;    2677 
                                 ;    2678 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
                                 ;    2679 		{
                                 ;    2680 			/* When using preemption tasks of equal priority will be
                                 ;    2681 			timesliced.  If a task that is sharing the idle priority is ready
                                 ;    2682 			to run then the idle task should yield before the end of the
                                 ;    2683 			timeslice.
                                 ;    2684 
                                 ;    2685 			A critical region is not required here as we are just reading from
                                 ;    2686 			the list, and an occasional incorrect value will not matter.  If
                                 ;    2687 			the ready list at the idle priority contains more than one task
                                 ;    2688 			then a task other than the idle task is ready to execute. */
                                 ;    2689 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
                                 ;    2690 			{
                                 ;    2691 				taskYIELD();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2691
                                 		._LINE_TOP  inline_asm
                                  
00000FC6 7EA5                    	PUSH.L R5
                                 	 
00000FC8 FB5EE07208              	MOV.L #553696, R5
00000FCD F85401                  	MOV.B #1, [R5]
                                 	 
00000FD0 EC55                    	MOV.L [R5], R5
                                 	 
00000FD2 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
00000FD4                         L469:	; bb8
                                 ;    2692 			}
                                 ;    2693 			else
                                 ;    2694 			{
                                 ;    2695 				mtCOVERAGE_TEST_MARKER();
                                 ;    2696 			}
                                 ;    2697 		}
                                 ;    2698 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
                                 ;    2699 
                                 ;    2700 		#if ( configUSE_IDLE_HOOK == 1 )
                                 ;    2701 		{
                                 ;    2702 			extern void vApplicationIdleHook( void );
                                 ;    2703 
                                 ;    2704 			/* Call the user defined function from within the idle task.  This
                                 ;    2705 			allows the application designer to add background functionality
                                 ;    2706 			without the overhead of a separate task.
                                 ;    2707 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                                 ;    2708 			CALL A FUNCTION THAT MIGHT BLOCK. */
                                 ;    2709 			vApplicationIdleHook();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2709
00000FD4 05rrrrrr             A  		BSR _vApplicationIdleHook
00000FD8                         L470:	; bb9.split
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2666
00000FD8 39rrrr               W  		BSR __$prvCheckTasksWaitingTermination
00000FDB                         L471:	; bb9.split1
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2689
00000FDB FBE2rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R14
00000FE1 ECEE                    		MOV.L [R14], R14
00000FE3 611E                    		CMP #01H, R14
00000FE5 24rr                    		BGTU L468
00000FE7 2Err                 B  		BRA L469
00000FE9                         __$prvInitialiseTCBVariables:
                                 		.STACK	__$prvInitialiseTCBVariables=28
                                 ;    2710 		}
                                 ;    2711 		#endif /* configUSE_IDLE_HOOK */
                                 ;    2712 
                                 ;    2713 		/* This conditional compilation should use inequality to 0, not equality
                                 ;    2714 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
                                 ;    2715 		user defined low power mode	implementations require
                                 ;    2716 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
                                 ;    2717 		#if ( configUSE_TICKLESS_IDLE != 0 )
                                 ;    2718 		{
                                 ;    2719 		TickType_t xExpectedIdleTime;
                                 ;    2720 
                                 ;    2721 			/* It is not desirable to suspend then resume the scheduler on
                                 ;    2722 			each iteration of the idle task.  Therefore, a preliminary
                                 ;    2723 			test of the expected idle time is performed without the
                                 ;    2724 			scheduler suspended.  The result here is not necessarily
                                 ;    2725 			valid. */
                                 ;    2726 			xExpectedIdleTime = prvGetExpectedIdleTime();
                                 ;    2727 
                                 ;    2728 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
                                 ;    2729 			{
                                 ;    2730 				vTaskSuspendAll();
                                 ;    2731 				{
                                 ;    2732 					/* Now the scheduler is suspended, the expected idle
                                 ;    2733 					time can be sampled again, and this time its value can
                                 ;    2734 					be used. */
                                 ;    2735 					configASSERT( xNextTaskUnblockTime >= xTickCount );
                                 ;    2736 					xExpectedIdleTime = prvGetExpectedIdleTime();
                                 ;    2737 
                                 ;    2738 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
                                 ;    2739 					{
                                 ;    2740 						traceLOW_POWER_IDLE_BEGIN();
                                 ;    2741 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
                                 ;    2742 						traceLOW_POWER_IDLE_END();
                                 ;    2743 					}
                                 ;    2744 					else
                                 ;    2745 					{
                                 ;    2746 						mtCOVERAGE_TEST_MARKER();
                                 ;    2747 					}
                                 ;    2748 				}
                                 ;    2749 				( void ) xTaskResumeAll();
                                 ;    2750 			}
                                 ;    2751 			else
                                 ;    2752 			{
                                 ;    2753 				mtCOVERAGE_TEST_MARKER();
                                 ;    2754 			}
                                 ;    2755 		}
                                 ;    2756 		#endif /* configUSE_TICKLESS_IDLE */
                                 ;    2757 	}
                                 ;    2758 }
                                 ;    2759 /*-----------------------------------------------------------*/
                                 ;    2760 
                                 ;    2761 #if configUSE_TICKLESS_IDLE != 0
                                 ;    2762 
                                 ;    2763 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
                                 ;    2764 	{
                                 ;    2765 	eSleepModeStatus eReturn = eStandardSleep;
                                 ;    2766 
                                 ;    2767 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
                                 ;    2768 		{
                                 ;    2769 			/* A task was made ready while the scheduler was suspended. */
                                 ;    2770 			eReturn = eAbortSleep;
                                 ;    2771 		}
                                 ;    2772 		else if( xYieldPending != pdFALSE )
                                 ;    2773 		{
                                 ;    2774 			/* A yield was pended while the scheduler was suspended. */
                                 ;    2775 			eReturn = eAbortSleep;
                                 ;    2776 		}
                                 ;    2777 		else
                                 ;    2778 		{
                                 ;    2779 			#if configUSE_TIMERS == 0
                                 ;    2780 			{
                                 ;    2781 				/* The idle task exists in addition to the application tasks. */
                                 ;    2782 				const UBaseType_t uxNonApplicationTasks = 1;
                                 ;    2783 
                                 ;    2784 				/* If timers are not being used and all the tasks are in the
                                 ;    2785 				suspended list (which might mean they have an infinite block
                                 ;    2786 				time rather than actually being suspended) then it is safe to
                                 ;    2787 				turn all clocks off and just wait for external interrupts. */
                                 ;    2788 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
                                 ;    2789 				{
                                 ;    2790 					eReturn = eNoTasksWaitingTimeout;
                                 ;    2791 				}
                                 ;    2792 				else
                                 ;    2793 				{
                                 ;    2794 					mtCOVERAGE_TEST_MARKER();
                                 ;    2795 				}
                                 ;    2796 			}
                                 ;    2797 			#endif /* configUSE_TIMERS */
                                 ;    2798 		}
                                 ;    2799 
                                 ;    2800 		return eReturn;
                                 ;    2801 	}
                                 ;    2802 #endif /* configUSE_TICKLESS_IDLE */
                                 ;    2803 /*-----------------------------------------------------------*/
                                 ;    2804 
                                 ;    2805 static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const u
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2805
00000FE9 7100E8                  		ADD #0FFFFFFE8H, R0
00000FEC A109                    		MOV.L R1, 14H[R0]
00000FEE A102                    		MOV.L R2, 10H[R0]
00000FF0 A08B                    		MOV.L R3, 0CH[R0]
00000FF2 A084                    		MOV.L R4, 08H[R0]
00000FF4 D5000E03                		MOV.W 1CH[R0], 06H[R0]
                                 ;    2806 {
                                 ;    2807 UBaseType_t x;
                                 ;    2808 
                                 ;    2809 	/* Store the task name in the TCB. */
                                 ;    2810 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2810
00000FF8 F80600                  		MOV.L #00000000H, [R0]
00000FFB 2Err                 B  		BRA L476
00000FFD                         L473:	; bb
                                 ;    2811 	{
                                 ;    2812 		pxTCB->pcTaskName[ x ] = pcName[ x ];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2812
00000FFD EC01                    		MOV.L [R0], R1
00000FFF A902                    		MOV.L 10H[R0], R2
00001001 FEC21E                  		MOVU.B [R2,R1], R14
00001004 06890105                		ADD 14H[R0].L, R1
00001008 C71E34                  		MOV.B R14, 34H[R1]
0000100B                         L474:	; bb.split
                                 ;    2813 
                                 ;    2814 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
                                 ;    2815 		configMAX_TASK_NAME_LEN characters just in case the memory after the
                                 ;    2816 		string is not accessible (extremely unlikely). */
                                 ;    2817 		if( pcName[ x ] == 0x00 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2817
0000100B EC01                    		MOV.L [R0], R1
0000100D A902                    		MOV.L 10H[R0], R2
0000100F FEC21E                  		MOVU.B [R2,R1], R14
00001012 610E                    		CMP #00H, R14
00001014 20rr                    		BEQ L477
00001016                         L475:	; bb26
00001016 EC01                    		MOV.L [R0], R1
00001018 6211                    		ADD #01H, R1
0000101A E301                    		MOV.L R1, [R0]
0000101C                         L476:	; bb29
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2810
0000101C EC01                    		MOV.L [R0], R1
0000101E 61C1                    		CMP #0CH, R1
00001020 23rr                    		BLTU L473
00001022                         L477:	; bb35
                                 ;    2818 		{
                                 ;    2819 			break;
                                 ;    2820 		}
                                 ;    2821 		else
                                 ;    2822 		{
                                 ;    2823 			mtCOVERAGE_TEST_MARKER();
                                 ;    2824 		}
                                 ;    2825 	}
                                 ;    2826 
                                 ;    2827 	/* Ensure the name string is terminated in the case that the string length
                                 ;    2828 	was greater or equal to configMAX_TASK_NAME_LEN. */
                                 ;    2829 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2829
00001022 A909                    		MOV.L 14H[R0], R1
00001024 F9143F00                		MOV.B #00H, 3FH[R1]
00001028                         L478:	; bb35.split
                                 ;    2830 
                                 ;    2831 	/* This is used as an array index so must ensure it's not too large.  First
                                 ;    2832 	remove the privilege bit if one is present. */
                                 ;    2833 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2833
00001028 A889                    		MOV.L 0CH[R0], R1
0000102A 6181                    		CMP #08H, R1
0000102C 23rr                    		BLTU L480
0000102E                         L479:	; bb41
                                 ;    2834 	{
                                 ;    2835 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2835
0000102E 3E0307                  		MOV.L #00000007H, 0CH[R0]
00001031                         L480:	; bb47
                                 ;    2836 	}
                                 ;    2837 	else
                                 ;    2838 	{
                                 ;    2839 		mtCOVERAGE_TEST_MARKER();
                                 ;    2840 	}
                                 ;    2841 
                                 ;    2842 	pxTCB->uxPriority = uxPriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2842
00001031 A889                    		MOV.L 0CH[R0], R1
00001033 A90A                    		MOV.L 14H[R0], R2
00001035 A2A9                    		MOV.L R1, 2CH[R2]
00001037                         L481:	; bb47.split
                                 ;    2843 	#if ( configUSE_MUTEXES == 1 )
                                 ;    2844 	{
                                 ;    2845 		pxTCB->uxBasePriority = uxPriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2845
00001037 A889                    		MOV.L 0CH[R0], R1
00001039 A90A                    		MOV.L 14H[R0], R2
0000103B A4A9                    		MOV.L R1, 4CH[R2]
0000103D                         L482:	; bb47.split1
                                 ;    2846 		pxTCB->uxMutexesHeld = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2846
0000103D A909                    		MOV.L 14H[R0], R1
0000103F 3E9400                  		MOV.L #00000000H, 50H[R1]
00001042                         L483:	; bb47.split2
                                 ;    2847 	}
                                 ;    2848 	#endif /* configUSE_MUTEXES */
                                 ;    2849 
                                 ;    2850 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2850
00001042 A909                    		MOV.L 14H[R0], R1
00001044 6241                    		ADD #04H, R1
00001046 05rrrrrr             A  		BSR _vListInitialiseItem
0000104A                         L484:	; bb47.split3
                                 ;    2851 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2851
0000104A A909                    		MOV.L 14H[R0], R1
0000104C 711118                  		ADD #18H, R1
0000104F 05rrrrrr             A  		BSR _vListInitialiseItem
00001053                         L485:	; bb47.split4
                                 ;    2852 
                                 ;    2853 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
                                 ;    2854 	back to	the containing TCB from a generic item in a list. */
                                 ;    2855 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2855
00001053 A909                    		MOV.L 14H[R0], R1
00001055 A111                    		MOV.L R1, 10H[R1]
00001057                         L486:	; bb47.split5
00001057 6681                    		MOV.L #00000008H, R1
                                 ;    2856 
                                 ;    2857 	/* Event lists are always in priority order. */
                                 ;    2858 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as 
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2858
00001059 06810103                		SUB 0CH[R0].L, R1
0000105D A90A                    		MOV.L 14H[R0], R2
0000105F A1A1                    		MOV.L R1, 18H[R2]
00001061                         L487:	; bb47.split6
                                 ;    2859 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2859
00001061 A909                    		MOV.L 14H[R0], R1
00001063 A219                    		MOV.L R1, 24H[R1]
00001065                         L488:	; bb47.split7
                                 ;    2860 
                                 ;    2861 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
                                 ;    2862 	{
                                 ;    2863 		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2863
00001065 A909                    		MOV.L 14H[R0], R1
00001067 3E9000                  		MOV.L #00000000H, 40H[R1]
0000106A                         L489:	; bb47.split10
                                 ;    2864 	}
                                 ;    2865 	#endif /* portCRITICAL_NESTING_IN_TCB */
                                 ;    2866 
                                 ;    2867 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
                                 ;    2868 	{
                                 ;    2869 		pxTCB->pxTaskTag = NULL;
                                 ;    2870 	}
                                 ;    2871 	#endif /* configUSE_APPLICATION_TASK_TAG */
                                 ;    2872 
                                 ;    2873 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
                                 ;    2874 	{
                                 ;    2875 		pxTCB->ulRunTimeCounter = 0UL;
                                 ;    2876 	}
                                 ;    2877 	#endif /* configGENERATE_RUN_TIME_STATS */
                                 ;    2878 
                                 ;    2879 	#if ( portUSING_MPU_WRAPPERS == 1 )
                                 ;    2880 	{
                                 ;    2881 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
                                 ;    2882 	}
                                 ;    2883 	#else /* portUSING_MPU_WRAPPERS */
                                 ;    2884 	{
                                 ;    2885 		( void ) xRegions;
                                 ;    2886 		( void ) usStackDepth;
                                 ;    2887 	}
                                 ;    2888 	#endif /* portUSING_MPU_WRAPPERS */
                                 ;    2889 
                                 ;    2890 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
                                 ;    2891 	{
                                 ;    2892 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
                                 ;    2893 		{
                                 ;    2894 			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
                                 ;    2895 		}
                                 ;    2896 	}
                                 ;    2897 	#endif
                                 ;    2898 
                                 ;    2899 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
                                 ;    2900 	{
                                 ;    2901 		pxTCB->ulNotifiedValue = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2901
0000106A A909                    		MOV.L 14H[R0], R1
0000106C 3E9500                  		MOV.L #00000000H, 54H[R1]
0000106F                         L490:	; bb47.split11
                                 ;    2902 		pxTCB->eNotifyState = eNotWaitingNotification;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2902
0000106F A909                    		MOV.L 14H[R0], R1
00001071 3E9600                  		MOV.L #00000000H, 58H[R1]
00001074 6706                    		RTSD #18H
00001076                         __$prvInitialiseTaskLists:
                                 		.STACK	__$prvInitialiseTaskLists=8
                                 ;    2903 	}
                                 ;    2904 	#endif
                                 ;    2905 
                                 ;    2906 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
                                 ;    2907 	{
                                 ;    2908 		/* Initialise this task's Newlib reent structure. */
                                 ;    2909 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
                                 ;    2910 	}
                                 ;    2911 	#endif /* configUSE_NEWLIB_REENTRANT */
                                 ;    2912 }
                                 ;    2913 /*-----------------------------------------------------------*/
                                 ;    2914 
                                 ;    2915 #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
                                 ;    2916 
                                 ;    2917 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
                                 ;    2918 	{
                                 ;    2919 	TCB_t *pxTCB;
                                 ;    2920 
                                 ;    2921 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
                                 ;    2922 		{
                                 ;    2923 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
                                 ;    2924 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
                                 ;    2925 		}
                                 ;    2926 	}
                                 ;    2927 
                                 ;    2928 #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
                                 ;    2929 /*-----------------------------------------------------------*/
                                 ;    2930 
                                 ;    2931 #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
                                 ;    2932 
                                 ;    2933 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
                                 ;    2934 	{
                                 ;    2935 	void *pvReturn = NULL;
                                 ;    2936 	TCB_t *pxTCB;
                                 ;    2937 
                                 ;    2938 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
                                 ;    2939 		{
                                 ;    2940 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
                                 ;    2941 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
                                 ;    2942 		}
                                 ;    2943 		else
                                 ;    2944 		{
                                 ;    2945 			pvReturn = NULL;
                                 ;    2946 		}
                                 ;    2947 
                                 ;    2948 		return pvReturn;
                                 ;    2949 	}
                                 ;    2950 
                                 ;    2951 #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
                                 ;    2952 /*-----------------------------------------------------------*/
                                 ;    2953 
                                 ;    2954 #if ( portUSING_MPU_WRAPPERS == 1 )
                                 ;    2955 
                                 ;    2956 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
                                 ;    2957 	{
                                 ;    2958 	TCB_t *pxTCB;
                                 ;    2959 
                                 ;    2960 		/* If null is passed in here then we are deleting ourselves. */
                                 ;    2961 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
                                 ;    2962 
                                 ;    2963         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
                                 ;    2964 	}
                                 ;    2965 
                                 ;    2966 #endif /* portUSING_MPU_WRAPPERS */
                                 ;    2967 /*-----------------------------------------------------------*/
                                 ;    2968 
                                 ;    2969 static void prvInitialiseTaskLists( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2969
00001076 6040                    		SUB #04H, R0
                                 ;    2970 {
                                 ;    2971 UBaseType_t uxPriority;
                                 ;    2972 
                                 ;    2973 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2973
00001078 F80600                  		MOV.L #00000000H, [R0]
0000107B 2Err                 B  		BRA L493
0000107D                         L492:	; bb
                                 ;    2974 	{
                                 ;    2975 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2975
0000107D EC02                    		MOV.L [R0], R2
0000107F 751214                  		MUL #14H, R2
00001082 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
00001088 4B21                    		ADD R2, R1
0000108A 05rrrrrr             A  		BSR _vListInitialise
0000108E EC01                    		MOV.L [R0], R1
00001090 6211                    		ADD #01H, R1
00001092 E301                    		MOV.L R1, [R0]
00001094                         L493:	; bb5
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2973
00001094 EC01                    		MOV.L [R0], R1
00001096 6181                    		CMP #08H, R1
00001098 23rr                    		BLTU L492
0000109A                         L494:	; bb9
                                 ;    2976 	}
                                 ;    2977 
                                 ;    2978 	vListInitialise( &xDelayedTaskList1 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2978
0000109A FB12rrrrrrrr            		MOV.L #__$xDelayedTaskList1, R1
000010A0 05rrrrrr             A  		BSR _vListInitialise
000010A4                         L495:	; bb9.split
                                 ;    2979 	vListInitialise( &xDelayedTaskList2 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2979
000010A4 FB12rrrrrrrr            		MOV.L #__$xDelayedTaskList2, R1
000010AA 05rrrrrr             A  		BSR _vListInitialise
000010AE                         L496:	; bb9.split1
                                 ;    2980 	vListInitialise( &xPendingReadyList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2980
000010AE FB12rrrrrrrr            		MOV.L #__$xPendingReadyList, R1
000010B4 05rrrrrr             A  		BSR _vListInitialise
000010B8                         L497:	; bb9.split2
                                 ;    2981 
                                 ;    2982 	#if ( INCLUDE_vTaskDelete == 1 )
                                 ;    2983 	{
                                 ;    2984 		vListInitialise( &xTasksWaitingTermination );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2984
000010B8 FB12rrrrrrrr            		MOV.L #__$xTasksWaitingTermination, R1
000010BE 05rrrrrr             A  		BSR _vListInitialise
000010C2                         L498:	; bb9.split3
                                 ;    2985 	}
                                 ;    2986 	#endif /* INCLUDE_vTaskDelete */
                                 ;    2987 
                                 ;    2988 	#if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    2989 	{
                                 ;    2990 		vListInitialise( &xSuspendedTaskList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2990
000010C2 FB12rrrrrrrr            		MOV.L #__$xSuspendedTaskList, R1
000010C8 05rrrrrr             A  		BSR _vListInitialise
000010CC                         L499:	; bb9.split4
                                 ;    2991 	}
                                 ;    2992 	#endif /* INCLUDE_vTaskSuspend */
                                 ;    2993 
                                 ;    2994 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
                                 ;    2995 	using list2. */
                                 ;    2996 	pxDelayedTaskList = &xDelayedTaskList1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2996
000010CC FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
000010D2 FBF2rrrrrrrr            		MOV.L #__$xDelayedTaskList1, R15
000010D8 E3EF                    		MOV.L R15, [R14]
000010DA                         L500:	; bb9.split5
                                 ;    2997 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",2997
000010DA FBE2rrrrrrrr            		MOV.L #__$pxOverflowDelayedTaskList, R14
000010E0 FBF2rrrrrrrr            		MOV.L #__$xDelayedTaskList2, R15
000010E6 E3EF                    		MOV.L R15, [R14]
000010E8 6701                    		RTSD #04H
000010EA                         __$prvCheckTasksWaitingTermination:
                                 		.STACK	__$prvCheckTasksWaitingTermination=12
                                 ;    2998 }
                                 ;    2999 /*-----------------------------------------------------------*/
                                 ;    3000 
                                 ;    3001 static void prvCheckTasksWaitingTermination( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3001
000010EA 6080                    		SUB #08H, R0
000010EC 2Err                 B  		BRA L513
000010EE                         L502:	; bb
                                 ;    3002 {
                                 ;    3003 	#if ( INCLUDE_vTaskDelete == 1 )
                                 ;    3004 	{
                                 ;    3005 		BaseType_t xListIsEmpty;
                                 ;    3006 
                                 ;    3007 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
                                 ;    3008 		too often in the idle task. */
                                 ;    3009 		while( uxTasksDeleted > ( UBaseType_t ) 0U )
                                 ;    3010 		{
                                 ;    3011 			vTaskSuspendAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3011
000010EE 39rrrr               W  		BSR _vTaskSuspendAll
000010F1                         L503:	; bb.split
                                 ;    3012 			{
                                 ;    3013 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3013
000010F1 FBE2rrrrrrrr            		MOV.L #__$xTasksWaitingTermination, R14
000010F7 ECEE                    		MOV.L [R14], R14
000010F9 610E                    		CMP #00H, R14
000010FB FCD800                  		SCEQ.L [R0]
000010FE                         L504:	; bb.split1
                                 ;    3014 			}
                                 ;    3015 			( void ) xTaskResumeAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3015
000010FE 39rrrr               W  		BSR _xTaskResumeAll
00001101                         L505:	; bb.split2
                                 ;    3016 
                                 ;    3017 			if( xListIsEmpty == pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3017
00001101 EC01                    		MOV.L [R0], R1
00001103 6101                    		CMP #00H, R1
00001105 21rr                    		BNE L513
00001107                         L506:	; bb7
                                 ;    3018 			{
                                 ;    3019 				TCB_t *pxTCB;
                                 ;    3020 
                                 ;    3021 				taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3021
00001107 39rrrr               W  		BSR _vTaskEnterCritical
0000110A                         L507:	; bb7.split
                                 ;    3022 				{
                                 ;    3023 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3023
0000110A FB12rrrrrrrr            		MOV.L #__$xTasksWaitingTermination, R1
00001110 A899                    		MOV.L 0CH[R1], R1
00001112 E5100301                		MOV.L 0CH[R1], 04H[R0]
00001116                         L508:	; bb7.split3
                                 ;    3024 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3024
00001116 A809                    		MOV.L 04H[R0], R1
00001118 6241                    		ADD #04H, R1
0000111A 05rrrrrr             A  		BSR _uxListRemove
0000111E                         L509:	; bb7.split4
                                 ;    3025 					--uxCurrentNumberOfTasks;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3025
0000111E FBE2rrrrrrrr            		MOV.L #__$uxCurrentNumberOfTasks, R14
00001124 ECEF                    		MOV.L [R14], R15
00001126 601F                    		SUB #01H, R15
00001128 E3EF                    		MOV.L R15, [R14]
0000112A                         L510:	; bb7.split5
                                 ;    3026 					--uxTasksDeleted;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3026
0000112A FBE2rrrrrrrr            		MOV.L #__$uxTasksDeleted, R14
00001130 ECEF                    		MOV.L [R14], R15
00001132 601F                    		SUB #01H, R15
00001134 E3EF                    		MOV.L R15, [R14]
00001136                         L511:	; bb7.split6
                                 ;    3027 				}
                                 ;    3028 				taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3028
00001136 39rrrr               W  		BSR _vTaskExitCritical
00001139                         L512:	; bb7.split7
                                 ;    3029 
                                 ;    3030 				prvDeleteTCB( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3030
00001139 A809                    		MOV.L 04H[R0], R1
0000113B 39rrrr               W  		BSR __$prvDeleteTCB
0000113E                         L513:	; bb25
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3009
0000113E FBE2rrrrrrrr            		MOV.L #__$uxTasksDeleted, R14
00001144 ECEE                    		MOV.L [R14], R14
00001146 610E                    		CMP #00H, R14
00001148 21rr                    		BNE L502
0000114A                         L514:	; return
                                 ;    3031 			}
                                 ;    3032 			else
                                 ;    3033 			{
                                 ;    3034 				mtCOVERAGE_TEST_MARKER();
                                 ;    3035 			}
                                 ;    3036 		}
                                 ;    3037 	}
                                 ;    3038 	#endif /* vTaskDelete */
                                 ;    3039 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3039
0000114A 6702                    		RTSD #08H
0000114C                         __$prvAddCurrentTaskToDelayedList:
                                 		.STACK	__$prvAddCurrentTaskToDelayedList=8
                                 ;    3040 /*-----------------------------------------------------------*/
                                 ;    3041 
                                 ;    3042 static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3042
0000114C 6040                    		SUB #04H, R0
0000114E E301                    		MOV.L R1, [R0]
                                 ;    3043 {
                                 ;    3044 	/* The list item will be inserted in wake time order. */
                                 ;    3045 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3045
00001150 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001156 ECEE                    		MOV.L [R14], R14
00001158 E40E01                  		MOV.L [R0], 04H[R14]
0000115B                         L516:	; entry.split
                                 ;    3046 
                                 ;    3047 	if( xTimeToWake < xTickCount )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3047
0000115B EC01                    		MOV.L [R0], R1
0000115D FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00001163 0684E1                  		CMP [R14].L, R1
00001166 22rr                    		BGEU L518
00001168                         L517:	; bb5
                                 ;    3048 	{
                                 ;    3049 		/* Wake time has overflowed.  Place this item in the overflow list. */
                                 ;    3050 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3050
00001168 FBE2rrrrrrrr            		MOV.L #__$pxOverflowDelayedTaskList, R14
0000116E ECE1                    		MOV.L [R14], R1
00001170 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001176 ECE2                    		MOV.L [R14], R2
00001178 6242                    		ADD #04H, R2
0000117A 05rrrrrr             A  		BSR _vListInsert
0000117E 6701                    		RTSD #04H
00001180                         L518:	; bb9
                                 ;    3051 	}
                                 ;    3052 	else
                                 ;    3053 	{
                                 ;    3054 		/* The wake time has not overflowed, so the current block list is used. */
                                 ;    3055 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3055
00001180 FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
00001186 ECE1                    		MOV.L [R14], R1
00001188 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000118E ECE2                    		MOV.L [R14], R2
00001190 6242                    		ADD #04H, R2
00001192 05rrrrrr             A  		BSR _vListInsert
00001196                         L519:	; bb9.split
                                 ;    3056 
                                 ;    3057 		/* If the task entering the blocked state was placed at the head of the
                                 ;    3058 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
                                 ;    3059 		too. */
                                 ;    3060 		if( xTimeToWake < xNextTaskUnblockTime )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3060
00001196 EC01                    		MOV.L [R0], R1
00001198 FBE2rrrrrrrr            		MOV.L #__$xNextTaskUnblockTime, R14
0000119E 0684E1                  		CMP [R14].L, R1
000011A1 22rr                    		BGEU L521
000011A3                         L520:	; bb14
                                 ;    3061 		{
                                 ;    3062 			xNextTaskUnblockTime = xTimeToWake;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3062
000011A3 FBE2rrrrrrrr            		MOV.L #__$xNextTaskUnblockTime, R14
000011A9 E00E                    		MOV.L [R0], [R14]
000011AB 6701                    		RTSD #04H
000011AD                         L521:	; return
                                 ;    3063 		}
                                 ;    3064 		else
                                 ;    3065 		{
                                 ;    3066 			mtCOVERAGE_TEST_MARKER();
                                 ;    3067 		}
                                 ;    3068 	}
                                 ;    3069 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3069
000011AD 6701                    		RTSD #04H
000011AF                         __$prvAllocateTCBAndStack:
                                 		.STACK	__$prvAllocateTCBAndStack=28
                                 ;    3070 /*-----------------------------------------------------------*/
                                 ;    3071 
                                 ;    3072 static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3072
000011AF 7100E8                  		ADD #0FFFFFFE8H, R0
000011B2 9289                    		MOV.W R1, 16H[R0]
000011B4 A102                    		MOV.L R2, 10H[R0]
                                 ;    3073 {
                                 ;    3074 TCB_t *pxNewTCB;
                                 ;    3075 
                                 ;    3076 	/* If the stack grows down then allocate the stack then the TCB so the stack
                                 ;    3077 	does not grow into the TCB.  Likewise if the stack grows up then allocate
                                 ;    3078 	the TCB then the stack. */
                                 ;    3079 	#if( portSTACK_GROWTH > 0 )
                                 ;    3080 	{
                                 ;    3081 		/* Allocate space for the TCB.  Where the memory comes from depends on
                                 ;    3082 		the implementation of the port malloc function. */
                                 ;    3083 		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
                                 ;    3084 
                                 ;    3085 		if( pxNewTCB != NULL )
                                 ;    3086 		{
                                 ;    3087 			/* Allocate space for the stack used by the task being created.
                                 ;    3088 			The base of the stack memory stored in the TCB so the task can
                                 ;    3089 			be deleted later if required. */
                                 ;    3090 			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*
                                 ;    3091 
                                 ;    3092 			if( pxNewTCB->pxStack == NULL )
                                 ;    3093 			{
                                 ;    3094 				/* Could not allocate the stack.  Delete the allocated TCB. */
                                 ;    3095 				vPortFree( pxNewTCB );
                                 ;    3096 				pxNewTCB = NULL;
                                 ;    3097 			}
                                 ;    3098 		}
                                 ;    3099 	}
                                 ;    3100 	#else /* portSTACK_GROWTH */
                                 ;    3101 	{
                                 ;    3102 	StackType_t *pxStack;
                                 ;    3103 
                                 ;    3104 		/* Allocate space for the stack used by the task being created. */
                                 ;    3105 		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA e
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3105
000011B6 6102                    		CMP #00H, R2
000011B8 21rr                    		BNE L524
000011BA                         L523:	; bb
000011BA BA89                    		MOVU.W 16H[R0], R1
000011BC 6C21                    		SHLL #02H, R1
000011BE 05rrrrrr             A  		BSR _pvPortMalloc
000011C2 E301                    		MOV.L R1, [R0]
000011C4 08                   S  		BRA L525
000011C5                         L524:	; bb12
000011C5 E10004                  		MOV.L 10H[R0], [R0]
000011C8                         L525:	; bb15
000011C8 EC01                    		MOV.L [R0], R1
000011CA A081                    		MOV.L R1, 08H[R0]
                                 ;    3106 
                                 ;    3107 		if( pxStack != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3107
000011CC 6101                    		CMP #00H, R1
000011CE 20rr                    		BEQ L530
000011D0                         L526:	; bb19
000011D0 75415C                  		MOV.L #0000005CH, R1
                                 ;    3108 		{
                                 ;    3109 			/* Allocate space for the TCB.  Where the memory comes from depends
                                 ;    3110 			on the implementation of the port malloc function. */
                                 ;    3111 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3111
000011D3 05rrrrrr             A  		BSR _pvPortMalloc
000011D7 A009                    		MOV.L R1, 04H[R0]
000011D9                         L527:	; bb19.split
                                 ;    3112 
                                 ;    3113 			if( pxNewTCB != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3113
000011D9 A809                    		MOV.L 04H[R0], R1
000011DB 6101                    		CMP #00H, R1
000011DD 10                   S  		BEQ L529
000011DE                         L528:	; bb23
                                 ;    3114 			{
                                 ;    3115 				/* Store the stack location in the TCB. */
                                 ;    3116 				pxNewTCB->pxStack = pxStack;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3116
000011DE A881                    		MOV.L 08H[R0], R1
000011E0 A80A                    		MOV.L 04H[R0], R2
000011E2 A321                    		MOV.L R1, 30H[R2]
000011E4 2Err                 B  		BRA L531
000011E6                         L529:	; bb27
                                 ;    3117 			}
                                 ;    3118 			else
                                 ;    3119 			{
                                 ;    3120 				/* The stack cannot be used as the TCB was not created.  Free it
                                 ;    3121 				again. */
                                 ;    3122 				vPortFree( pxStack );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3122
000011E6 A881                    		MOV.L 08H[R0], R1
000011E8 05rrrrrr             A  		BSR _vPortFree
000011EC 08                   S  		BRA L531
000011ED                         L530:	; bb35
                                 ;    3123 			}
                                 ;    3124 		}
                                 ;    3125 		else
                                 ;    3126 		{
                                 ;    3127 			pxNewTCB = NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3127
000011ED 3E0100                  		MOV.L #00000000H, 04H[R0]
000011F0                         L531:	; bb41
                                 ;    3128 		}
                                 ;    3129 	}
                                 ;    3130 	#endif /* portSTACK_GROWTH */
                                 ;    3131 
                                 ;    3132 	if( pxNewTCB != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3132
000011F0 A809                    		MOV.L 04H[R0], R1
000011F2 6101                    		CMP #00H, R1
000011F4 20rr                    		BEQ L533
000011F6                         L532:	; bb42
                                 ;    3133 	{
                                 ;    3134 		/* Avoid dependency on memset() if it is not required. */
                                 ;    3135 		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
                                 ;    3136 		{
                                 ;    3137 			/* Just to help debugging. */
                                 ;    3138 			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3138
000011F6 BA8B                    		MOVU.W 16H[R0], R3
000011F8 6C23                    		SHLL #02H, R3
000011FA A809                    		MOV.L 04H[R0], R1
000011FC AB11                    		MOV.L 30H[R1], R1
000011FE 7542A5                  		MOV.L #000000A5H, R2
00001201 7F88                    		SSTR.B
00001203                         L533:	; bb54
                                 ;    3139 		}
                                 ;    3140 		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
                                 ;    3141 	}
                                 ;    3142 
                                 ;    3143 	return pxNewTCB;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3143
00001203 A809                    		MOV.L 04H[R0], R1
00001205 A089                    		MOV.L R1, 0CH[R0]
00001207                         L534:	; bb54.split
                                 ;    3144 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3144
00001207 6706                    		RTSD #18H
00001209                         __$prvListTaskWithinSingleList:
                                 		.STACK	__$prvListTaskWithinSingleList=44
                                 ;    3145 /*-----------------------------------------------------------*/
                                 ;    3146 
                                 ;    3147 #if ( configUSE_TRACE_FACILITY == 1 )
                                 ;    3148 
                                 ;    3149 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3149
00001209 7EA6                    		PUSH.L R6
0000120B 7100DC                  		ADD #0FFFFFFDCH, R0
0000120E A201                    		MOV.L R1, 20H[R0]
00001210 A18A                    		MOV.L R2, 1CH[R0]
00001212 A183                    		MOV.L R3, 18H[R0]
                                 ;    3150 	{
                                 ;    3151 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
                                 ;    3152 	UBaseType_t uxTask = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3152
00001214 3E0200                  		MOV.L #00000000H, 08H[R0]
00001217                         L536:	; entry.split
                                 ;    3153 
                                 ;    3154 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3154
00001217 A989                    		MOV.L 1CH[R0], R1
00001219 EC1E                    		MOV.L [R1], R14
0000121B 610E                    		CMP #00H, R14
0000121D 3Arrrr               W  		BEQ L560
00001220                         L537:	; bb10
                                 ;    3155 		{
                                 ;    3156 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3156
00001220 E5000703                		MOV.L 1CH[R0], 0CH[R0]
00001224                         L538:	; bb10.split
00001224 A889                    		MOV.L 0CH[R0], R1
00001226 A81A                    		MOV.L 04H[R1], R2
00001228 E5210101                		MOV.L 04H[R2], 04H[R1]
0000122C                         L539:	; bb10.split1
0000122C A889                    		MOV.L 0CH[R0], R1
0000122E 711E08                  		ADD #08H, R1, R14
00001231 06851E01                		CMP 04H[R1].L, R14
00001235 18                   S  		BNE L541
00001236                         L540:	; bb20
00001236 A889                    		MOV.L 0CH[R0], R1
00001238 A81A                    		MOV.L 04H[R1], R2
0000123A E5210101                		MOV.L 04H[R2], 04H[R1]
0000123E                         L541:	; bb37
0000123E A889                    		MOV.L 0CH[R0], R1
00001240 A819                    		MOV.L 04H[R1], R1
00001242 E5100301                		MOV.L 0CH[R1], 04H[R0]
00001246                         L542:	; bb44
                                 ;    3157 
                                 ;    3158 			/* Populate an TaskStatus_t structure within the
                                 ;    3159 			pxTaskStatusArray array for each task that is referenced from
                                 ;    3160 			pxList.  See the definition of TaskStatus_t in task.h for the
                                 ;    3161 			meaning of each TaskStatus_t structure member. */
                                 ;    3162 			do
                                 ;    3163 			{
                                 ;    3164 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3164
00001246 E5000704                		MOV.L 1CH[R0], 10H[R0]
0000124A                         L543:	; bb44.split
0000124A A901                    		MOV.L 10H[R0], R1
0000124C A81A                    		MOV.L 04H[R1], R2
0000124E E5210101                		MOV.L 04H[R2], 04H[R1]
00001252                         L544:	; bb44.split2
00001252 A901                    		MOV.L 10H[R0], R1
00001254 711E08                  		ADD #08H, R1, R14
00001257 06851E01                		CMP 04H[R1].L, R14
0000125B 18                   S  		BNE L546
0000125C                         L545:	; bb54
0000125C A901                    		MOV.L 10H[R0], R1
0000125E A81A                    		MOV.L 04H[R1], R2
00001260 E5210101                		MOV.L 04H[R2], 04H[R1]
00001264                         L546:	; bb72
00001264 A901                    		MOV.L 10H[R0], R1
00001266 A819                    		MOV.L 04H[R1], R1
00001268 E11003                  		MOV.L 0CH[R1], [R0]
0000126B                         L547:	; bb72.split
                                 ;    3165 
                                 ;    3166 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3166
0000126B A881                    		MOV.L 08H[R0], R1
0000126D 6C51                    		SHLL #05H, R1
0000126F 06890108                		ADD 20H[R0].L, R1
00001273 E001                    		MOV.L [R0], [R1]
00001275                         L548:	; bb72.split3
                                 ;    3167 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3167
00001275 EC01                    		MOV.L [R0], R1
00001277 711134                  		ADD #34H, R1
0000127A A882                    		MOV.L 08H[R0], R2
0000127C 6C52                    		SHLL #05H, R2
0000127E 06890208                		ADD 20H[R0].L, R2
00001282 A029                    		MOV.L R1, 04H[R2]
00001284                         L549:	; bb72.split4
                                 ;    3168 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3168
00001284 A881                    		MOV.L 08H[R0], R1
00001286 6C51                    		SHLL #05H, R1
00001288 06890108                		ADD 20H[R0].L, R1
0000128C EC02                    		MOV.L [R0], R2
0000128E E5211102                		MOV.L 44H[R2], 08H[R1]
00001292                         L550:	; bb72.split5
                                 ;    3169 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3169
00001292 A881                    		MOV.L 08H[R0], R1
00001294 6C51                    		SHLL #05H, R1
00001296 06890108                		ADD 20H[R0].L, R1
0000129A E5010603                		MOV.L 18H[R0], 0CH[R1]
0000129E                         L551:	; bb72.split6
                                 ;    3170 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3170
0000129E A881                    		MOV.L 08H[R0], R1
000012A0 6C51                    		SHLL #05H, R1
000012A2 06890108                		ADD 20H[R0].L, R1
000012A6 EC02                    		MOV.L [R0], R2
000012A8 E5210B04                		MOV.L 2CH[R2], 10H[R1]
000012AC                         L552:	; bb72.split7
                                 ;    3171 
                                 ;    3172 				#if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    3173 				{
                                 ;    3174 					/* If the task is in the suspended list then there is a chance
                                 ;    3175 					it is actually just blocked indefinitely - so really it should
                                 ;    3176 					be reported as being in the Blocked state. */
                                 ;    3177 					if( eState == eSuspended )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3177
000012AC A981                    		MOV.L 18H[R0], R1
000012AE 6131                    		CMP #03H, R1
000012B0 21rr                    		BNE L555
000012B2                         L553:	; bb114
                                 ;    3178 					{
                                 ;    3179 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3179
000012B2 EC01                    		MOV.L [R0], R1
000012B4 AA91                    		MOV.L 28H[R1], R1
000012B6 6101                    		CMP #00H, R1
000012B8 20rr                    		BEQ L555
000012BA                         L554:	; bb115
                                 ;    3180 						{
                                 ;    3181 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3181
000012BA A881                    		MOV.L 08H[R0], R1
000012BC 6C51                    		SHLL #05H, R1
000012BE 06890108                		ADD 20H[R0].L, R1
000012C2 3E1302                  		MOV.L #00000002H, 0CH[R1]
000012C5                         L555:	; bb132
                                 ;    3182 						}
                                 ;    3183 					}
                                 ;    3184 				}
                                 ;    3185 				#endif /* INCLUDE_vTaskSuspend */
                                 ;    3186 
                                 ;    3187 				#if ( configUSE_MUTEXES == 1 )
                                 ;    3188 				{
                                 ;    3189 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3189
000012C5 A881                    		MOV.L 08H[R0], R1
000012C7 6C51                    		SHLL #05H, R1
000012C9 06890108                		ADD 20H[R0].L, R1
000012CD EC02                    		MOV.L [R0], R2
000012CF E5211305                		MOV.L 4CH[R2], 14H[R1]
000012D3                         L556:	; bb132.split
                                 ;    3190 				}
                                 ;    3191 				#else
                                 ;    3192 				{
                                 ;    3193 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
                                 ;    3194 				}
                                 ;    3195 				#endif
                                 ;    3196 
                                 ;    3197 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
                                 ;    3198 				{
                                 ;    3199 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
                                 ;    3200 				}
                                 ;    3201 				#else
                                 ;    3202 				{
                                 ;    3203 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3203
000012D3 A881                    		MOV.L 08H[R0], R1
000012D5 6C51                    		SHLL #05H, R1
000012D7 06890108                		ADD 20H[R0].L, R1
000012DB 3E1600                  		MOV.L #00000000H, 18H[R1]
000012DE                         L557:	; bb132.split8
                                 ;    3204 				}
                                 ;    3205 				#endif
                                 ;    3206 
                                 ;    3207 				#if ( portSTACK_GROWTH > 0 )
                                 ;    3208 				{
                                 ;    3209 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
                                 ;    3210 				}
                                 ;    3211 				#else
                                 ;    3212 				{
                                 ;    3213 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3213
000012DE A886                    		MOV.L 08H[R0], R6
000012E0 6C56                    		SHLL #05H, R6
000012E2 06890608                		ADD 20H[R0].L, R6
000012E6 EC01                    		MOV.L [R0], R1
000012E8 AB11                    		MOV.L 30H[R1], R1
000012EA 39rrrr               W  		BSR __$prvTaskCheckFreeStackSpace
000012ED 93E1                    		MOV.W R1, 1CH[R6]
000012EF                         L558:	; bb132.split9
                                 ;    3214 				}
                                 ;    3215 				#endif
                                 ;    3216 
                                 ;    3217 				uxTask++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3217
000012EF A881                    		MOV.L 08H[R0], R1
000012F1 6211                    		ADD #01H, R1
000012F3 A081                    		MOV.L R1, 08H[R0]
000012F5                         L559:	; bb132.split10
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3162
000012F5 EC01                    		MOV.L [R0], R1
000012F7 06850101                		CMP 04H[R0].L, R1
000012FB 3Brrrr               W  		BNE L542
000012FE                         L560:	; bb168
                                 ;    3218 
                                 ;    3219 			} while( pxNextTCB != pxFirstTCB );
                                 ;    3220 		}
                                 ;    3221 		else
                                 ;    3222 		{
                                 ;    3223 			mtCOVERAGE_TEST_MARKER();
                                 ;    3224 		}
                                 ;    3225 
                                 ;    3226 		return uxTask;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3226
000012FE A881                    		MOV.L 08H[R0], R1
00001300 A109                    		MOV.L R1, 14H[R0]
00001302                         L561:	; bb168.split
                                 ;    3227 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3227
00001302 3F660A                  		RTSD #28H, R6-R6
00001305                         __$prvTaskCheckFreeStackSpace:
                                 		.STACK	__$prvTaskCheckFreeStackSpace=16
                                 ;    3228 
                                 ;    3229 #endif /* configUSE_TRACE_FACILITY */
                                 ;    3230 /*-----------------------------------------------------------*/
                                 ;    3231 
                                 ;    3232 #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
                                 ;    3233 
                                 ;    3234 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3234
00001305 60C0                    		SUB #0CH, R0
00001307 A081                    		MOV.L R1, 08H[R0]
                                 ;    3235 	{
                                 ;    3236 	uint32_t ulCount = 0U;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3236
00001309 F80600                  		MOV.L #00000000H, [R0]
0000130C 2Err                 B  		BRA L565
0000130E                         L563:	; bb
                                 ;    3237 
                                 ;    3238 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
                                 ;    3239 		{
                                 ;    3240 			pucStackByte -= portSTACK_GROWTH;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3240
0000130E A881                    		MOV.L 08H[R0], R1
00001310 6211                    		ADD #01H, R1
00001312 A081                    		MOV.L R1, 08H[R0]
00001314                         L564:	; bb.split
                                 ;    3241 			ulCount++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3241
00001314 EC01                    		MOV.L [R0], R1
00001316 6211                    		ADD #01H, R1
00001318 E301                    		MOV.L R1, [R0]
0000131A                         L565:	; bb7
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3238
0000131A A881                    		MOV.L 08H[R0], R1
0000131C 581E                    		MOVU.B [R1], R14
0000131E 755EA5                  		CMP #0A5H, R14
00001321 20rr                    		BEQ L563
00001323                         L566:	; bb13
                                 ;    3242 		}
                                 ;    3243 
                                 ;    3244 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3244
00001323 EC01                    		MOV.L [R0], R1
00001325 6821                    		SHLR #02H, R1
00001327 E301                    		MOV.L R1, [R0]
00001329                         L567:	; bb13.split
                                 ;    3245 
                                 ;    3246 		return ( uint16_t ) ulCount;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3246
00001329 EC01                    		MOV.L [R0], R1
0000132B 9089                    		MOV.W R1, 06H[R0]
0000132D 9889                    		MOV.W 06H[R0], R1
0000132F                         L568:	; bb13.split1
                                 ;    3247 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3247
0000132F 5F11                    		MOVU.W R1, R1
00001331 6703                    		RTSD #0CH
00001333                         _uxTaskGetStackHighWaterMark:
                                 		.STACK	_uxTaskGetStackHighWaterMark=28
                                 ;    3248 
                                 ;    3249 #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
                                 ;    3250 /*-----------------------------------------------------------*/
                                 ;    3251 
                                 ;    3252 #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
                                 ;    3253 
                                 ;    3254 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3254
00001333 7100E8                  		ADD #0FFFFFFE8H, R0
00001336 A109                    		MOV.L R1, 14H[R0]
                                 ;    3255 	{
                                 ;    3256 	TCB_t *pxTCB;
                                 ;    3257 	uint8_t *pucEndOfStack;
                                 ;    3258 	UBaseType_t uxReturn;
                                 ;    3259 
                                 ;    3260 		pxTCB = prvGetTCBFromHandle( xTask );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3260
00001338 6101                    		CMP #00H, R1
0000133A 18                   S  		BNE L571
0000133B                         L570:	; bb
0000133B FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001341 E0E0                    		MOV.L [R14], [R0]
00001343 08                   S  		BRA L572
00001344                         L571:	; bb9
00001344 E10005                  		MOV.L 14H[R0], [R0]
00001347                         L572:	; bb12
00001347 EC01                    		MOV.L [R0], R1
00001349 A009                    		MOV.L R1, 04H[R0]
                                 ;    3261 
                                 ;    3262 		#if portSTACK_GROWTH < 0
                                 ;    3263 		{
                                 ;    3264 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3264
0000134B E5100C02                		MOV.L 30H[R1], 08H[R0]
0000134F                         L573:	; bb12.split
                                 ;    3265 		}
                                 ;    3266 		#else
                                 ;    3267 		{
                                 ;    3268 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
                                 ;    3269 		}
                                 ;    3270 		#endif
                                 ;    3271 
                                 ;    3272 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3272
0000134F A881                    		MOV.L 08H[R0], R1
00001351 39rrrr               W  		BSR __$prvTaskCheckFreeStackSpace
00001354 A089                    		MOV.L R1, 0CH[R0]
00001356                         L574:	; bb12.split1
                                 ;    3273 
                                 ;    3274 		return uxReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3274
00001356 A889                    		MOV.L 0CH[R0], R1
00001358 A101                    		MOV.L R1, 10H[R0]
0000135A                         L575:	; bb12.split2
                                 ;    3275 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3275
0000135A 6706                    		RTSD #18H
0000135C                         __$prvDeleteTCB:
                                 		.STACK	__$prvDeleteTCB=8
                                 ;    3276 
                                 ;    3277 #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
                                 ;    3278 /*-----------------------------------------------------------*/
                                 ;    3279 
                                 ;    3280 #if ( INCLUDE_vTaskDelete == 1 )
                                 ;    3281 
                                 ;    3282 	static void prvDeleteTCB( TCB_t *pxTCB )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3282
0000135C 6040                    		SUB #04H, R0
0000135E E301                    		MOV.L R1, [R0]
00001360                         L577:	; entry.split
                                 ;    3283 	{
                                 ;    3284 		/* This call is required specifically for the TriCore port.  It must be
                                 ;    3285 		above the vPortFree() calls.  The call is also used by ports/demos that
                                 ;    3286 		want to allocate and clean RAM statically. */
                                 ;    3287 		portCLEAN_UP_TCB( pxTCB );
                                 ;    3288 
                                 ;    3289 		/* Free up the memory allocated by the scheduler for the task.  It is up
                                 ;    3290 		to the task to free any memory allocated at the application level. */
                                 ;    3291 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
                                 ;    3292 		{
                                 ;    3293 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
                                 ;    3294 		}
                                 ;    3295 		#endif /* configUSE_NEWLIB_REENTRANT */
                                 ;    3296 
                                 ;    3297 		#if( portUSING_MPU_WRAPPERS == 1 )
                                 ;    3298 		{
                                 ;    3299 			/* Only free the stack if it was allocated dynamically in the first
                                 ;    3300 			place. */
                                 ;    3301 			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
                                 ;    3302 			{
                                 ;    3303 				vPortFreeAligned( pxTCB->pxStack );
                                 ;    3304 			}
                                 ;    3305 		}
                                 ;    3306 		#else
                                 ;    3307 		{
                                 ;    3308 			vPortFreeAligned( pxTCB->pxStack );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3308
00001360 EC01                    		MOV.L [R0], R1
00001362 AB11                    		MOV.L 30H[R1], R1
00001364 05rrrrrr             A  		BSR _vPortFree
00001368                         L578:	; entry.split1
                                 ;    3309 		}
                                 ;    3310 		#endif
                                 ;    3311 
                                 ;    3312 		vPortFree( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3312
00001368 EC01                    		MOV.L [R0], R1
0000136A 05rrrrrr             A  		BSR _vPortFree
0000136E 6701                    		RTSD #04H
00001370                         __$prvResetNextTaskUnblockTime:
                                 		.STACK	__$prvResetNextTaskUnblockTime=8
                                 ;    3313 	}
                                 ;    3314 
                                 ;    3315 #endif /* INCLUDE_vTaskDelete */
                                 ;    3316 /*-----------------------------------------------------------*/
                                 ;    3317 
                                 ;    3318 static void prvResetNextTaskUnblockTime( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3318
00001370 6040                    		SUB #04H, R0
                                 ;    3319 {
                                 ;    3320 TCB_t *pxTCB;
                                 ;    3321 
                                 ;    3322 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3322
00001372 FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
00001378 ECEE                    		MOV.L [R14], R14
0000137A ECEE                    		MOV.L [R14], R14
0000137C 610E                    		CMP #00H, R14
0000137E 21rr                    		BNE L581
00001380                         L580:	; bb2
                                 ;    3323 	{
                                 ;    3324 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
                                 ;    3325 		the maximum possible value so it is	extremely unlikely that the
                                 ;    3326 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
                                 ;    3327 		there is an item in the delayed list. */
                                 ;    3328 		xNextTaskUnblockTime = portMAX_DELAY;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3328
00001380 FBE2rrrrrrrr            		MOV.L #__$xNextTaskUnblockTime, R14
00001386 F8E6FF                  		MOV.L #0FFFFFFFFH, [R14]
00001389 6701                    		RTSD #04H
0000138B                         L581:	; bb3
                                 ;    3329 	}
                                 ;    3330 	else
                                 ;    3331 	{
                                 ;    3332 		/* The new current delayed list is not empty, get the value of
                                 ;    3333 		the item at the head of the delayed list.  This is the time at
                                 ;    3334 		which the task at the head of the delayed list should be removed
                                 ;    3335 		from the Blocked state. */
                                 ;    3336 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3336
0000138B FBE2rrrrrrrr            		MOV.L #__$pxDelayedTaskList, R14
00001391 ECE1                    		MOV.L [R14], R1
00001393 A899                    		MOV.L 0CH[R1], R1
00001395 E11003                  		MOV.L 0CH[R1], [R0]
00001398                         L582:	; bb3.split
                                 ;    3337 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3337
00001398 EC01                    		MOV.L [R0], R1
0000139A FBE2rrrrrrrr            		MOV.L #__$xNextTaskUnblockTime, R14
000013A0 E11E01                  		MOV.L 04H[R1], [R14]
000013A3 6701                    		RTSD #04H
000013A5                         _xTaskGetCurrentTaskHandle:
                                 		.STACK	_xTaskGetCurrentTaskHandle=12
                                 ;    3338 	}
                                 ;    3339 }
                                 ;    3340 /*-----------------------------------------------------------*/
                                 ;    3341 
                                 ;    3342 #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
                                 ;    3343 
                                 ;    3344 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3344
000013A5 6080                    		SUB #08H, R0
                                 ;    3345 	{
                                 ;    3346 	TaskHandle_t xReturn;
                                 ;    3347 
                                 ;    3348 		/* A critical section is not required as this is not called from
                                 ;    3349 		an interrupt and the current TCB will always be the same for any
                                 ;    3350 		individual execution thread. */
                                 ;    3351 		xReturn = pxCurrentTCB;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3351
000013A7 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000013AD E0E0                    		MOV.L [R14], [R0]
000013AF                         L584:	; entry.split
                                 ;    3352 
                                 ;    3353 		return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3353
000013AF EC01                    		MOV.L [R0], R1
000013B1 A009                    		MOV.L R1, 04H[R0]
000013B3                         L585:	; entry.split1
                                 ;    3354 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3354
000013B3 6702                    		RTSD #08H
000013B5                         _xTaskGetSchedulerState:
                                 		.STACK	_xTaskGetSchedulerState=12
                                 ;    3355 
                                 ;    3356 #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
                                 ;    3357 /*-----------------------------------------------------------*/
                                 ;    3358 
                                 ;    3359 #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
                                 ;    3360 
                                 ;    3361 	BaseType_t xTaskGetSchedulerState( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3361
000013B5 6080                    		SUB #08H, R0
                                 ;    3362 	{
                                 ;    3363 	BaseType_t xReturn;
                                 ;    3364 
                                 ;    3365 		if( xSchedulerRunning == pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3365
000013B7 FBE2rrrrrrrr            		MOV.L #__$xSchedulerRunning, R14
000013BD ECEE                    		MOV.L [R14], R14
000013BF 610E                    		CMP #00H, R14
000013C1 18                   S  		BNE L588
000013C2                         L587:	; bb2
                                 ;    3366 		{
                                 ;    3367 			xReturn = taskSCHEDULER_NOT_STARTED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3367
000013C2 F80601                  		MOV.L #00000001H, [R0]
000013C5 2Err                 B  		BRA L591
000013C7                         L588:	; bb4
                                 ;    3368 		}
                                 ;    3369 		else
                                 ;    3370 		{
                                 ;    3371 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3371
000013C7 FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
000013CD ECEE                    		MOV.L [R14], R14
000013CF 610E                    		CMP #00H, R14
000013D1 18                   S  		BNE L590
000013D2                         L589:	; bb5
                                 ;    3372 			{
                                 ;    3373 				xReturn = taskSCHEDULER_RUNNING;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3373
000013D2 F80602                  		MOV.L #00000002H, [R0]
000013D5 08                   S  		BRA L591
000013D6                         L590:	; bb6
                                 ;    3374 			}
                                 ;    3375 			else
                                 ;    3376 			{
                                 ;    3377 				xReturn = taskSCHEDULER_SUSPENDED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3377
000013D6 F80600                  		MOV.L #00000000H, [R0]
000013D9                         L591:	; bb15
                                 ;    3378 			}
                                 ;    3379 		}
                                 ;    3380 
                                 ;    3381 		return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3381
000013D9 EC01                    		MOV.L [R0], R1
000013DB A009                    		MOV.L R1, 04H[R0]
000013DD                         L592:	; bb15.split
                                 ;    3382 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3382
000013DD 6702                    		RTSD #08H
000013DF                         _vTaskPriorityInherit:
                                 		.STACK	_vTaskPriorityInherit=12
                                 ;    3383 
                                 ;    3384 #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
                                 ;    3385 /*-----------------------------------------------------------*/
                                 ;    3386 
                                 ;    3387 #if ( configUSE_MUTEXES == 1 )
                                 ;    3388 
                                 ;    3389 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3389
000013DF 6080                    		SUB #08H, R0
000013E1 A009                    		MOV.L R1, 04H[R0]
                                 ;    3390 	{
                                 ;    3391 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3391
000013E3 E301                    		MOV.L R1, [R0]
000013E5                         L594:	; entry.split
                                 ;    3392 
                                 ;    3393 		/* If the mutex was given back by an interrupt while the queue was
                                 ;    3394 		locked then the mutex holder might now be NULL. */
                                 ;    3395 		if( pxMutexHolder != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3395
000013E5 A809                    		MOV.L 04H[R0], R1
000013E7 6101                    		CMP #00H, R1
000013E9 3Arrrr               W  		BEQ L605
000013EC                         L595:	; bb5
                                 ;    3396 		{
                                 ;    3397 			/* If the holder of the mutex has a priority below the priority of
                                 ;    3398 			the task attempting to obtain the mutex then it will temporarily
                                 ;    3399 			inherit the priority of the task attempting to obtain the mutex. */
                                 ;    3400 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3400
000013EC EC01                    		MOV.L [R0], R1
000013EE AA99                    		MOV.L 2CH[R1], R1
000013F0 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000013F6 ECEE                    		MOV.L [R14], R14
000013F8 0685E10B                		CMP 2CH[R14].L, R1
000013FC 23rr                  * 		BGEU L605
         38rrrr                  
00001401                         L596:	; bb7
                                 ;    3401 			{
                                 ;    3402 				/* Adjust the mutex holder state to account for its new
                                 ;    3403 				priority.  Only reset the event list item value if the value is
                                 ;    3404 				not	being used for anything else. */
                                 ;    3405 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3405
00001401 EC01                    		MOV.L [R0], R1
00001403 A991                    		MOV.L 18H[R1], R1
00001405 7DF1                    		BTST #1FH, R1
00001407 21rr                    		BNE L598
00001409                         L597:	; bb8
                                 ;    3406 				{
                                 ;    3407 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3407
00001409 EC01                    		MOV.L [R0], R1
0000140B FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001411 ECEE                    		MOV.L [R14], R14
00001413 6682                    		MOV.L #00000008H, R2
00001415 0681E20B                		SUB 2CH[R14].L, R2
00001419 A192                    		MOV.L R2, 18H[R1]
0000141B                         L598:	; bb25
                                 ;    3408 				}
                                 ;    3409 				else
                                 ;    3410 				{
                                 ;    3411 					mtCOVERAGE_TEST_MARKER();
                                 ;    3412 				}
                                 ;    3413 
                                 ;    3414 				/* If the task being modified is in the ready state it will need
                                 ;    3415 				to be moved into a new list. */
                                 ;    3416 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3416
0000141B EC01                    		MOV.L [R0], R1
0000141D AA9A                    		MOV.L 2CH[R1], R2
0000141F 751214                  		MUL #14H, R2
00001422 FBE2rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R14
00001428 4B2E                    		ADD R2, R14
0000142A 06851E05                		CMP 14H[R1].L, R14
0000142E 21rr                    		BNE L604
00001430                         L599:	; bb27
                                 ;    3417 				{
                                 ;    3418 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3418
00001430 6241                    		ADD #04H, R1
00001432 05rrrrrr             A  		BSR _uxListRemove
00001436                         L600:	; bb27.split
                                 ;    3419 					{
                                 ;    3420 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
                                 ;    3421 					}
                                 ;    3422 					else
                                 ;    3423 					{
                                 ;    3424 						mtCOVERAGE_TEST_MARKER();
                                 ;    3425 					}
                                 ;    3426 
                                 ;    3427 					/* Inherit the priority before being moved into the new list. */
                                 ;    3428 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3428
00001436 EC01                    		MOV.L [R0], R1
00001438 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000143E ECEE                    		MOV.L [R14], R14
00001440 E5E10B0B                		MOV.L 2CH[R14], 2CH[R1]
00001444                         L601:	; bb27.split1
                                 ;    3429 					prvAddTaskToReadyList( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3429
00001444 EC01                    		MOV.L [R0], R1
00001446 AA99                    		MOV.L 2CH[R1], R1
00001448 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
0000144E 0684E1                  		CMP [R14].L, R1
00001451 25rr                    		BLEU L603
00001453                         L602:	; bb43
00001453 EC01                    		MOV.L [R0], R1
00001455 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
0000145B E11E0B                  		MOV.L 2CH[R1], [R14]
0000145E                         L603:	; bb54
0000145E EC02                    		MOV.L [R0], R2
00001460 AAAB                    		MOV.L 2CH[R2], R3
00001462 751314                  		MUL #14H, R3
00001465 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
0000146B 4B31                    		ADD R3, R1
0000146D 6242                    		ADD #04H, R2
0000146F 05rrrrrr             A  		BSR _vListInsertEnd
00001473 6702                    		RTSD #08H
00001475                         L604:	; bb61
                                 ;    3430 				}
                                 ;    3431 				else
                                 ;    3432 				{
                                 ;    3433 					/* Just inherit the priority. */
                                 ;    3434 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3434
00001475 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000147B ECEE                    		MOV.L [R14], R14
0000147D E5E10B0B                		MOV.L 2CH[R14], 2CH[R1]
00001481 6702                    		RTSD #08H
00001483                         L605:	; return
                                 ;    3435 				}
                                 ;    3436 
                                 ;    3437 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
                                 ;    3438 			}
                                 ;    3439 			else
                                 ;    3440 			{
                                 ;    3441 				mtCOVERAGE_TEST_MARKER();
                                 ;    3442 			}
                                 ;    3443 		}
                                 ;    3444 		else
                                 ;    3445 		{
                                 ;    3446 			mtCOVERAGE_TEST_MARKER();
                                 ;    3447 		}
                                 ;    3448 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3448
00001483 6702                    		RTSD #08H
00001485                         _xTaskPriorityDisinherit:
                                 		.STACK	_xTaskPriorityDisinherit=20
                                 ;    3449 
                                 ;    3450 #endif /* configUSE_MUTEXES */
                                 ;    3451 /*-----------------------------------------------------------*/
                                 ;    3452 
                                 ;    3453 #if ( configUSE_MUTEXES == 1 )
                                 ;    3454 
                                 ;    3455 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3455
00001485 7100F0                  		ADD #0FFFFFFF0H, R0
00001488 A089                    		MOV.L R1, 0CH[R0]
                                 ;    3456 	{
                                 ;    3457 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3457
0000148A E301                    		MOV.L R1, [R0]
0000148C                         L607:	; entry.split
                                 ;    3458 	BaseType_t xReturn = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3458
0000148C 3E0100                  		MOV.L #00000000H, 04H[R0]
0000148F                         L608:	; entry.split1
                                 ;    3459 
                                 ;    3460 		if( pxMutexHolder != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3460
0000148F A889                    		MOV.L 0CH[R0], R1
00001491 6101                    		CMP #00H, R1
00001493 3Arrrr               W  		BEQ L623
00001496                         L609:	; bb7
                                 ;    3461 		{
                                 ;    3462 			/* A task can only have an inherited priority if it holds the mutex.
                                 ;    3463 			If the mutex is held by a task then it cannot be given from an
                                 ;    3464 			interrupt, and if a mutex is given by the holding task then it must
                                 ;    3465 			be the running state task. */
                                 ;    3466 			configASSERT( pxTCB == pxCurrentTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3466
00001496 EC01                    		MOV.L [R0], R1
00001498 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000149E 0684E1                  		CMP [R14].L, R1
000014A1 10                   S  		BEQ L611
000014A2                         L610:	; bb8
000014A2 05rrrrrr             A  		BSR _vAssertCalled
000014A6                         L611:	; bb16
                                 ;    3467 
                                 ;    3468 			configASSERT( pxTCB->uxMutexesHeld );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3468
000014A6 EC01                    		MOV.L [R0], R1
000014A8 AD11                    		MOV.L 50H[R1], R1
000014AA 6101                    		CMP #00H, R1
000014AC 18                   S  		BNE L613
000014AD                         L612:	; bb17
000014AD 05rrrrrr             A  		BSR _vAssertCalled
000014B1                         L613:	; bb24
                                 ;    3469 			( pxTCB->uxMutexesHeld )--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3469
000014B1 EC01                    		MOV.L [R0], R1
000014B3 AD12                    		MOV.L 50H[R1], R2
000014B5 6012                    		SUB #01H, R2
000014B7 A512                    		MOV.L R2, 50H[R1]
000014B9                         L614:	; bb24.split
                                 ;    3470 
                                 ;    3471 			/* Has the holder of the mutex inherited the priority of another
                                 ;    3472 			task? */
                                 ;    3473 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3473
000014B9 EC01                    		MOV.L [R0], R1
000014BB AA9A                    		MOV.L 2CH[R1], R2
000014BD 06851213                		CMP 4CH[R1].L, R2
000014C1 20rr                    		BEQ L623
000014C3                         L615:	; bb31
                                 ;    3474 			{
                                 ;    3475 				/* Only disinherit if no other mutexes are held. */
                                 ;    3476 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3476
000014C3 EC01                    		MOV.L [R0], R1
000014C5 AD11                    		MOV.L 50H[R1], R1
000014C7 6101                    		CMP #00H, R1
000014C9 21rr                    		BNE L623
000014CB                         L616:	; bb33
                                 ;    3477 				{
                                 ;    3478 					/* A task can only have an inherited priority if it holds
                                 ;    3479 					the mutex.  If the mutex is held by a task then it cannot be
                                 ;    3480 					given from an interrupt, and if a mutex is given by the
                                 ;    3481 					holding	task then it must be the running state task.  Remove
                                 ;    3482 					the	holding task from the ready	list. */
                                 ;    3483 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3483
000014CB EC01                    		MOV.L [R0], R1
000014CD 6241                    		ADD #04H, R1
000014CF 05rrrrrr             A  		BSR _uxListRemove
000014D3                         L617:	; bb33.split
                                 ;    3484 					{
                                 ;    3485 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
                                 ;    3486 					}
                                 ;    3487 					else
                                 ;    3488 					{
                                 ;    3489 						mtCOVERAGE_TEST_MARKER();
                                 ;    3490 					}
                                 ;    3491 
                                 ;    3492 					/* Disinherit the priority before adding the task into the
                                 ;    3493 					new	ready list. */
                                 ;    3494 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                                 ;    3495 					pxTCB->uxPriority = pxTCB->uxBasePriority;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3495
000014D3 EC01                    		MOV.L [R0], R1
000014D5 E511130B                		MOV.L 4CH[R1], 2CH[R1]
000014D9                         L618:	; bb33.split2
                                 ;    3496 
                                 ;    3497 					/* Reset the event list item value.  It cannot be in use for
                                 ;    3498 					any other purpose if this task is running, and it must be
                                 ;    3499 					running to give back the mutex. */
                                 ;    3500 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPrior
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3500
000014D9 EC01                    		MOV.L [R0], R1
000014DB 6682                    		MOV.L #00000008H, R2
000014DD 0681120B                		SUB 2CH[R1].L, R2
000014E1 A192                    		MOV.L R2, 18H[R1]
000014E3                         L619:	; bb33.split3
                                 ;    3501 					prvAddTaskToReadyList( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3501
000014E3 EC01                    		MOV.L [R0], R1
000014E5 AA99                    		MOV.L 2CH[R1], R1
000014E7 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
000014ED 0684E1                  		CMP [R14].L, R1
000014F0 25rr                    		BLEU L621
000014F2                         L620:	; bb57
000014F2 EC01                    		MOV.L [R0], R1
000014F4 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
000014FA E11E0B                  		MOV.L 2CH[R1], [R14]
000014FD                         L621:	; bb68
000014FD EC02                    		MOV.L [R0], R2
000014FF AAAB                    		MOV.L 2CH[R2], R3
00001501 751314                  		MUL #14H, R3
00001504 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
0000150A 4B31                    		ADD R3, R1
0000150C 6242                    		ADD #04H, R2
0000150E 05rrrrrr             A  		BSR _vListInsertEnd
00001512                         L622:	; bb68.split
                                 ;    3502 
                                 ;    3503 					/* Return true to indicate that a context switch is required.
                                 ;    3504 					This is only actually required in the corner case whereby
                                 ;    3505 					multiple mutexes were held and the mutexes were given back
                                 ;    3506 					in an order different to that in which they were taken.
                                 ;    3507 					If a context switch did not occur when the first mutex was
                                 ;    3508 					returned, even if a task was waiting on it, then a context
                                 ;    3509 					switch should occur when the last mutex is returned whether
                                 ;    3510 					a task is waiting on it or not. */
                                 ;    3511 					xReturn = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3511
00001512 3E0101                  		MOV.L #00000001H, 04H[R0]
00001515                         L623:	; bb99
                                 ;    3512 				}
                                 ;    3513 				else
                                 ;    3514 				{
                                 ;    3515 					mtCOVERAGE_TEST_MARKER();
                                 ;    3516 				}
                                 ;    3517 			}
                                 ;    3518 			else
                                 ;    3519 			{
                                 ;    3520 				mtCOVERAGE_TEST_MARKER();
                                 ;    3521 			}
                                 ;    3522 		}
                                 ;    3523 		else
                                 ;    3524 		{
                                 ;    3525 			mtCOVERAGE_TEST_MARKER();
                                 ;    3526 		}
                                 ;    3527 
                                 ;    3528 		return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3528
00001515 A809                    		MOV.L 04H[R0], R1
00001517 A081                    		MOV.L R1, 08H[R0]
00001519                         L624:	; bb99.split
                                 ;    3529 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3529
00001519 6704                    		RTSD #10H
0000151B                         _vTaskEnterCritical:
                                 		.STACK	_vTaskEnterCritical=4
                                 ;    3530 
                                 ;    3531 #endif /* configUSE_MUTEXES */
                                 ;    3532 /*-----------------------------------------------------------*/
                                 ;    3533 
                                 ;    3534 #if ( portCRITICAL_NESTING_IN_TCB == 1 )
                                 ;    3535 
                                 ;    3536 	void vTaskEnterCritical( void )
                                 ;    3537 	{
                                 ;    3538 		portDISABLE_INTERRUPTS();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3538
0000151B FD6A0E                  		MVFC PSW, R14
0000151E FD67EE                  		REVL R14, R14
00001521 64FE                    		AND #0FH, R14
00001523 614E                    		CMP #04H, R14
00001525 2Arr                    		BGT L627
00001527                         L626:	; bb1
00001527 757005                  		MVTIPL #05H
0000152A                         L627:	; bb7
                                 ;    3539 
                                 ;    3540 		if( xSchedulerRunning != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3540
0000152A FBE2rrrrrrrr            		MOV.L #__$xSchedulerRunning, R14
00001530 ECEE                    		MOV.L [R14], R14
00001532 610E                    		CMP #00H, R14
00001534 20rr                    		BEQ L630
00001536                         L628:	; bb8
                                 ;    3541 		{
                                 ;    3542 			( pxCurrentTCB->uxCriticalNesting )++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3542
00001536 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000153C ECE1                    		MOV.L [R14], R1
0000153E AC12                    		MOV.L 40H[R1], R2
00001540 6212                    		ADD #01H, R2
00001542 A412                    		MOV.L R2, 40H[R1]
00001544                         L629:	; bb8.split
                                 ;    3543 
                                 ;    3544 			/* This is not the interrupt safe version of the enter critical
                                 ;    3545 			function so	assert() if it is being called from an interrupt
                                 ;    3546 			context.  Only API functions that end in "FromISR" can be used in an
                                 ;    3547 			interrupt.  Only assert if the critical nesting count is 1 to
                                 ;    3548 			protect against recursive calls if the assert function also uses a
                                 ;    3549 			critical section. */
                                 ;    3550 			if( pxCurrentTCB->uxCriticalNesting == 1 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3550
00001544 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000154A ECEE                    		MOV.L [R14], R14
0000154C 02                      		RTS
0000154D                         L630:	; return
                                 ;    3551 			{
                                 ;    3552 				portASSERT_IF_IN_ISR();
                                 ;    3553 			}
                                 ;    3554 
                                 ;    3555 		}
                                 ;    3556 		else
                                 ;    3557 		{
                                 ;    3558 			mtCOVERAGE_TEST_MARKER();
                                 ;    3559 		}
                                 ;    3560 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3560
0000154D 02                      		RTS
0000154E                         _vTaskExitCritical:
                                 		.STACK	_vTaskExitCritical=4
                                 ;    3561 
                                 ;    3562 #endif /* portCRITICAL_NESTING_IN_TCB */
                                 ;    3563 /*-----------------------------------------------------------*/
                                 ;    3564 
                                 ;    3565 #if ( portCRITICAL_NESTING_IN_TCB == 1 )
                                 ;    3566 
                                 ;    3567 	void vTaskExitCritical( void )
                                 ;    3568 	{
                                 ;    3569 		if( xSchedulerRunning != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3569
0000154E FBE2rrrrrrrr            		MOV.L #__$xSchedulerRunning, R14
00001554 ECEE                    		MOV.L [R14], R14
00001556 610E                    		CMP #00H, R14
00001558 20rr                    		BEQ L636
0000155A                         L632:	; bb2
                                 ;    3570 		{
                                 ;    3571 			if( pxCurrentTCB->uxCriticalNesting > 0U )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3571
0000155A FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001560 ECE1                    		MOV.L [R14], R1
00001562 AC11                    		MOV.L 40H[R1], R1
00001564 6101                    		CMP #00H, R1
00001566 20rr                    		BEQ L636
00001568                         L633:	; bb3
                                 ;    3572 			{
                                 ;    3573 				( pxCurrentTCB->uxCriticalNesting )--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3573
00001568 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000156E ECE1                    		MOV.L [R14], R1
00001570 AC12                    		MOV.L 40H[R1], R2
00001572 6012                    		SUB #01H, R2
00001574 A412                    		MOV.L R2, 40H[R1]
00001576                         L634:	; bb3.split
                                 ;    3574 
                                 ;    3575 				if( pxCurrentTCB->uxCriticalNesting == 0U )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3575
00001576 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000157C ECE1                    		MOV.L [R14], R1
0000157E AC11                    		MOV.L 40H[R1], R1
00001580 6101                    		CMP #00H, R1
00001582 18                   S  		BNE L636
00001583                         L635:	; bb8
                                 ;    3576 				{
                                 ;    3577 					portENABLE_INTERRUPTS();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3577
00001583 757000                  		MVTIPL #00H
00001586 02                      		RTS
00001587                         L636:	; return
                                 ;    3578 				}
                                 ;    3579 				else
                                 ;    3580 				{
                                 ;    3581 					mtCOVERAGE_TEST_MARKER();
                                 ;    3582 				}
                                 ;    3583 			}
                                 ;    3584 			else
                                 ;    3585 			{
                                 ;    3586 				mtCOVERAGE_TEST_MARKER();
                                 ;    3587 			}
                                 ;    3588 		}
                                 ;    3589 		else
                                 ;    3590 		{
                                 ;    3591 			mtCOVERAGE_TEST_MARKER();
                                 ;    3592 		}
                                 ;    3593 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3593
00001587 02                      		RTS
00001588                         _uxTaskResetEventItemValue:
                                 		.STACK	_uxTaskResetEventItemValue=12
                                 ;    3594 
                                 ;    3595 #endif /* portCRITICAL_NESTING_IN_TCB */
                                 ;    3596 /*-----------------------------------------------------------*/
                                 ;    3597 
                                 ;    3598 #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
                                 ;    3599 
                                 ;    3600 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
                                 ;    3601 	{
                                 ;    3602 	BaseType_t x;
                                 ;    3603 
                                 ;    3604 		/* Start by copying the entire string. */
                                 ;    3605 		strcpy( pcBuffer, pcTaskName );
                                 ;    3606 
                                 ;    3607 		/* Pad the end of the string with spaces to ensure columns line up when
                                 ;    3608 		printed out. */
                                 ;    3609 		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
                                 ;    3610 		{
                                 ;    3611 			pcBuffer[ x ] = ' ';
                                 ;    3612 		}
                                 ;    3613 
                                 ;    3614 		/* Terminate. */
                                 ;    3615 		pcBuffer[ x ] = 0x00;
                                 ;    3616 
                                 ;    3617 		/* Return the new end of string. */
                                 ;    3618 		return &( pcBuffer[ x ] );
                                 ;    3619 	}
                                 ;    3620 
                                 ;    3621 #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
                                 ;    3622 /*-----------------------------------------------------------*/
                                 ;    3623 
                                 ;    3624 #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
                                 ;    3625 
                                 ;    3626 	void vTaskList( char * pcWriteBuffer )
                                 ;    3627 	{
                                 ;    3628 	TaskStatus_t *pxTaskStatusArray;
                                 ;    3629 	volatile UBaseType_t uxArraySize, x;
                                 ;    3630 	char cStatus;
                                 ;    3631 
                                 ;    3632 		/*
                                 ;    3633 		 * PLEASE NOTE:
                                 ;    3634 		 *
                                 ;    3635 		 * This function is provided for convenience only, and is used by many
                                 ;    3636 		 * of the demo applications.  Do not consider it to be part of the
                                 ;    3637 		 * scheduler.
                                 ;    3638 		 *
                                 ;    3639 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
                                 ;    3640 		 * uxTaskGetSystemState() output into a human readable table that
                                 ;    3641 		 * displays task names, states and stack usage.
                                 ;    3642 		 *
                                 ;    3643 		 * vTaskList() has a dependency on the sprintf() C library function that
                                 ;    3644 		 * might bloat the code size, use a lot of stack, and provide different
                                 ;    3645 		 * results on different platforms.  An alternative, tiny, third party,
                                 ;    3646 		 * and limited functionality implementation of sprintf() is provided in
                                 ;    3647 		 * many of the FreeRTOS/Demo sub-directories in a file called
                                 ;    3648 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
                                 ;    3649 		 * snprintf() implementation!).
                                 ;    3650 		 *
                                 ;    3651 		 * It is recommended that production systems call uxTaskGetSystemState()
                                 ;    3652 		 * directly to get access to raw stats data, rather than indirectly
                                 ;    3653 		 * through a call to vTaskList().
                                 ;    3654 		 */
                                 ;    3655 
                                 ;    3656 
                                 ;    3657 		/* Make sure the write buffer does not contain a string. */
                                 ;    3658 		*pcWriteBuffer = 0x00;
                                 ;    3659 
                                 ;    3660 		/* Take a snapshot of the number of tasks in case it changes while this
                                 ;    3661 		function is executing. */
                                 ;    3662 		uxArraySize = uxCurrentNumberOfTasks;
                                 ;    3663 
                                 ;    3664 		/* Allocate an array index for each task. */
                                 ;    3665 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
                                 ;    3666 
                                 ;    3667 		if( pxTaskStatusArray != NULL )
                                 ;    3668 		{
                                 ;    3669 			/* Generate the (binary) data. */
                                 ;    3670 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
                                 ;    3671 
                                 ;    3672 			/* Create a human readable table from the binary data. */
                                 ;    3673 			for( x = 0; x < uxArraySize; x++ )
                                 ;    3674 			{
                                 ;    3675 				switch( pxTaskStatusArray[ x ].eCurrentState )
                                 ;    3676 				{
                                 ;    3677 					case eReady:		cStatus = tskREADY_CHAR;
                                 ;    3678 										break;
                                 ;    3679 
                                 ;    3680 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
                                 ;    3681 										break;
                                 ;    3682 
                                 ;    3683 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
                                 ;    3684 										break;
                                 ;    3685 
                                 ;    3686 					case eDeleted:		cStatus = tskDELETED_CHAR;
                                 ;    3687 										break;
                                 ;    3688 
                                 ;    3689 					default:			/* Should not get here, but it is included
                                 ;    3690 										to prevent static checking errors. */
                                 ;    3691 										cStatus = 0x00;
                                 ;    3692 										break;
                                 ;    3693 				}
                                 ;    3694 
                                 ;    3695 				/* Write the task name to the string, padding with spaces so it
                                 ;    3696 				can be printed in tabular form more easily. */
                                 ;    3697 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
                                 ;    3698 
                                 ;    3699 				/* Write the rest of the string. */
                                 ;    3700 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned i
                                 ;    3701 				pcWriteBuffer += strlen( pcWriteBuffer );
                                 ;    3702 			}
                                 ;    3703 
                                 ;    3704 			/* Free the array again. */
                                 ;    3705 			vPortFree( pxTaskStatusArray );
                                 ;    3706 		}
                                 ;    3707 		else
                                 ;    3708 		{
                                 ;    3709 			mtCOVERAGE_TEST_MARKER();
                                 ;    3710 		}
                                 ;    3711 	}
                                 ;    3712 
                                 ;    3713 #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
                                 ;    3714 /*----------------------------------------------------------*/
                                 ;    3715 
                                 ;    3716 #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
                                 ;    3717 
                                 ;    3718 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
                                 ;    3719 	{
                                 ;    3720 	TaskStatus_t *pxTaskStatusArray;
                                 ;    3721 	volatile UBaseType_t uxArraySize, x;
                                 ;    3722 	uint32_t ulTotalTime, ulStatsAsPercentage;
                                 ;    3723 
                                 ;    3724 		#if( configUSE_TRACE_FACILITY != 1 )
                                 ;    3725 		{
                                 ;    3726 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTimeStats().
                                 ;    3727 		}
                                 ;    3728 		#endif
                                 ;    3729 
                                 ;    3730 		/*
                                 ;    3731 		 * PLEASE NOTE:
                                 ;    3732 		 *
                                 ;    3733 		 * This function is provided for convenience only, and is used by many
                                 ;    3734 		 * of the demo applications.  Do not consider it to be part of the
                                 ;    3735 		 * scheduler.
                                 ;    3736 		 *
                                 ;    3737 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
                                 ;    3738 		 * of the uxTaskGetSystemState() output into a human readable table that
                                 ;    3739 		 * displays the amount of time each task has spent in the Running state
                                 ;    3740 		 * in both absolute and percentage terms.
                                 ;    3741 		 *
                                 ;    3742 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
                                 ;    3743 		 * function that might bloat the code size, use a lot of stack, and
                                 ;    3744 		 * provide different results on different platforms.  An alternative,
                                 ;    3745 		 * tiny, third party, and limited functionality implementation of
                                 ;    3746 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
                                 ;    3747 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
                                 ;    3748 		 * a full snprintf() implementation!).
                                 ;    3749 		 *
                                 ;    3750 		 * It is recommended that production systems call uxTaskGetSystemState()
                                 ;    3751 		 * directly to get access to raw stats data, rather than indirectly
                                 ;    3752 		 * through a call to vTaskGetRunTimeStats().
                                 ;    3753 		 */
                                 ;    3754 
                                 ;    3755 		/* Make sure the write buffer does not contain a string. */
                                 ;    3756 		*pcWriteBuffer = 0x00;
                                 ;    3757 
                                 ;    3758 		/* Take a snapshot of the number of tasks in case it changes while this
                                 ;    3759 		function is executing. */
                                 ;    3760 		uxArraySize = uxCurrentNumberOfTasks;
                                 ;    3761 
                                 ;    3762 		/* Allocate an array index for each task. */
                                 ;    3763 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
                                 ;    3764 
                                 ;    3765 		if( pxTaskStatusArray != NULL )
                                 ;    3766 		{
                                 ;    3767 			/* Generate the (binary) data. */
                                 ;    3768 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
                                 ;    3769 
                                 ;    3770 			/* For percentage calculations. */
                                 ;    3771 			ulTotalTime /= 100UL;
                                 ;    3772 
                                 ;    3773 			/* Avoid divide by zero errors. */
                                 ;    3774 			if( ulTotalTime > 0 )
                                 ;    3775 			{
                                 ;    3776 				/* Create a human readable table from the binary data. */
                                 ;    3777 				for( x = 0; x < uxArraySize; x++ )
                                 ;    3778 				{
                                 ;    3779 					/* What percentage of the total run time has the task used?
                                 ;    3780 					This will always be rounded down to the nearest integer.
                                 ;    3781 					ulTotalRunTimeDiv100 has already been divided by 100. */
                                 ;    3782 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
                                 ;    3783 
                                 ;    3784 					/* Write the task name to the string, padding with
                                 ;    3785 					spaces so it can be printed in tabular form more
                                 ;    3786 					easily. */
                                 ;    3787 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
                                 ;    3788 
                                 ;    3789 					if( ulStatsAsPercentage > 0UL )
                                 ;    3790 					{
                                 ;    3791 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
                                 ;    3792 						{
                                 ;    3793 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercenta
                                 ;    3794 						}
                                 ;    3795 						#else
                                 ;    3796 						{
                                 ;    3797 							/* sizeof( int ) == sizeof( long ) so a smaller
                                 ;    3798 							printf() library can be used. */
                                 ;    3799 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( 
                                 ;    3800 						}
                                 ;    3801 						#endif
                                 ;    3802 					}
                                 ;    3803 					else
                                 ;    3804 					{
                                 ;    3805 						/* If the percentage is zero here then the task has
                                 ;    3806 						consumed less than 1% of the total run time. */
                                 ;    3807 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
                                 ;    3808 						{
                                 ;    3809 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
                                 ;    3810 						}
                                 ;    3811 						#else
                                 ;    3812 						{
                                 ;    3813 							/* sizeof( int ) == sizeof( long ) so a smaller
                                 ;    3814 							printf() library can be used. */
                                 ;    3815 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
                                 ;    3816 						}
                                 ;    3817 						#endif
                                 ;    3818 					}
                                 ;    3819 
                                 ;    3820 					pcWriteBuffer += strlen( pcWriteBuffer );
                                 ;    3821 				}
                                 ;    3822 			}
                                 ;    3823 			else
                                 ;    3824 			{
                                 ;    3825 				mtCOVERAGE_TEST_MARKER();
                                 ;    3826 			}
                                 ;    3827 
                                 ;    3828 			/* Free the array again. */
                                 ;    3829 			vPortFree( pxTaskStatusArray );
                                 ;    3830 		}
                                 ;    3831 		else
                                 ;    3832 		{
                                 ;    3833 			mtCOVERAGE_TEST_MARKER();
                                 ;    3834 		}
                                 ;    3835 	}
                                 ;    3836 
                                 ;    3837 #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
                                 ;    3838 /*-----------------------------------------------------------*/
                                 ;    3839 
                                 ;    3840 TickType_t uxTaskResetEventItemValue( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3840
00001588 6080                    		SUB #08H, R0
                                 ;    3841 {
                                 ;    3842 TickType_t uxReturn;
                                 ;    3843 
                                 ;    3844 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3844
0000158A FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001590 ECEE                    		MOV.L [R14], R14
00001592 E1E006                  		MOV.L 18H[R14], [R0]
00001595                         L638:	; entry.split
                                 ;    3845 
                                 ;    3846 	/* Reset the event list item to its normal value - so it can be used with
                                 ;    3847 	queues and semaphores. */
                                 ;    3848 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint 
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3848
00001595 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000159B ECE1                    		MOV.L [R14], R1
0000159D ECEE                    		MOV.L [R14], R14
0000159F 6682                    		MOV.L #00000008H, R2
000015A1 0681E20B                		SUB 2CH[R14].L, R2
000015A5 A192                    		MOV.L R2, 18H[R1]
000015A7                         L639:	; entry.split1
                                 ;    3849 
                                 ;    3850 	return uxReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3850
000015A7 EC01                    		MOV.L [R0], R1
000015A9 A009                    		MOV.L R1, 04H[R0]
000015AB                         L640:	; entry.split2
                                 ;    3851 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3851
000015AB 6702                    		RTSD #08H
000015AD                         _pvTaskIncrementMutexHeldCount:
                                 		.STACK	_pvTaskIncrementMutexHeldCount=8
                                 ;    3852 /*-----------------------------------------------------------*/
                                 ;    3853 
                                 ;    3854 #if ( configUSE_MUTEXES == 1 )
                                 ;    3855 
                                 ;    3856 	void *pvTaskIncrementMutexHeldCount( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3856
000015AD 6040                    		SUB #04H, R0
                                 ;    3857 	{
                                 ;    3858 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
                                 ;    3859 		then pxCurrentTCB will be NULL. */
                                 ;    3860 		if( pxCurrentTCB != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3860
000015AF FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000015B5 ECEE                    		MOV.L [R14], R14
000015B7 610E                    		CMP #00H, R14
000015B9 20rr                    		BEQ L643
000015BB                         L642:	; bb1
                                 ;    3861 		{
                                 ;    3862 			( pxCurrentTCB->uxMutexesHeld )++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3862
000015BB FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000015C1 ECE1                    		MOV.L [R14], R1
000015C3 AD12                    		MOV.L 50H[R1], R2
000015C5 6212                    		ADD #01H, R2
000015C7 A512                    		MOV.L R2, 50H[R1]
000015C9                         L643:	; bb9
                                 ;    3863 		}
                                 ;    3864 
                                 ;    3865 		return pxCurrentTCB;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3865
000015C9 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000015CF ECE1                    		MOV.L [R14], R1
000015D1 E301                    		MOV.L R1, [R0]
000015D3                         L644:	; bb9.split
                                 ;    3866 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3866
000015D3 6701                    		RTSD #04H
000015D5                         _ulTaskNotifyTake:
                                 		.STACK	_ulTaskNotifyTake=24
                                 ;    3867 
                                 ;    3868 #endif /* configUSE_MUTEXES */
                                 ;    3869 /*-----------------------------------------------------------*/
                                 ;    3870 
                                 ;    3871 #if( configUSE_TASK_NOTIFICATIONS == 1 )
                                 ;    3872 
                                 ;    3873 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3873
000015D5 7100EC                  		ADD #0FFFFFFECH, R0
000015D8 A101                    		MOV.L R1, 10H[R0]
000015DA A08A                    		MOV.L R2, 0CH[R0]
                                 ;    3874 	{
                                 ;    3875 	TickType_t xTimeToWake;
                                 ;    3876 	uint32_t ulReturn;
                                 ;    3877 
                                 ;    3878 		taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3878
000015DC 39rrrr               W  		BSR _vTaskEnterCritical
000015DF                         L646:	; entry.split
                                 ;    3879 		{
                                 ;    3880 			/* Only block if the notification count is not already non-zero. */
                                 ;    3881 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3881
000015DF FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000015E5 ECE1                    		MOV.L [R14], R1
000015E7 AD19                    		MOV.L 54H[R1], R1
000015E9 6101                    		CMP #00H, R1
000015EB 21rr                    		BNE L655
000015ED                         L647:	; bb5
                                 ;    3882 			{
                                 ;    3883 				/* Mark this task as waiting for a notification. */
                                 ;    3884 				pxCurrentTCB->eNotifyState = eWaitingNotification;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3884
000015ED FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000015F3 ECE1                    		MOV.L [R14], R1
000015F5 3E9601                  		MOV.L #00000001H, 58H[R1]
000015F8                         L648:	; bb5.split
                                 ;    3885 
                                 ;    3886 				if( xTicksToWait > ( TickType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3886
000015F8 A889                    		MOV.L 0CH[R0], R1
000015FA 6101                    		CMP #00H, R1
000015FC 20rr                    		BEQ L655
000015FE                         L649:	; bb10
                                 ;    3887 				{
                                 ;    3888 					/* The task is going to block.  First it must be removed
                                 ;    3889 					from the ready list. */
                                 ;    3890 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3890
000015FE FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001604 ECE1                    		MOV.L [R14], R1
00001606 6241                    		ADD #04H, R1
00001608 05rrrrrr             A  		BSR _uxListRemove
0000160C                         L650:	; bb10.split
                                 ;    3891 					{
                                 ;    3892 						/* The current task must be in a ready list, so there is
                                 ;    3893 						no need to check, and the port reset macro can be called
                                 ;    3894 						directly. */
                                 ;    3895 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
                                 ;    3896 					}
                                 ;    3897 					else
                                 ;    3898 					{
                                 ;    3899 						mtCOVERAGE_TEST_MARKER();
                                 ;    3900 					}
                                 ;    3901 
                                 ;    3902 					#if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    3903 					{
                                 ;    3904 						if( xTicksToWait == portMAX_DELAY )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3904
0000160C A889                    		MOV.L 0CH[R0], R1
0000160E 7501FF                  		CMP #0FFFFFFFFH, R1
00001611 21rr                    		BNE L652
00001613                         L651:	; bb20
                                 ;    3905 						{
                                 ;    3906 							/* Add the task to the suspended task list instead
                                 ;    3907 							of a delayed task list to ensure the task is not
                                 ;    3908 							woken by a timing event.  It will block
                                 ;    3909 							indefinitely. */
                                 ;    3910 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3910
00001613 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001619 ECE2                    		MOV.L [R14], R2
0000161B 6242                    		ADD #04H, R2
0000161D FB12rrrrrrrr            		MOV.L #__$xSuspendedTaskList, R1
00001623 05rrrrrr             A  		BSR _vListInsertEnd
00001627 2Err                 B  		BRA L654
00001629                         L652:	; bb23
                                 ;    3911 						}
                                 ;    3912 						else
                                 ;    3913 						{
                                 ;    3914 							/* Calculate the time at which the task should be
                                 ;    3915 							woken if no notification events occur.  This may
                                 ;    3916 							overflow but this doesn't matter, the scheduler will
                                 ;    3917 							handle it. */
                                 ;    3918 							xTimeToWake = xTickCount + xTicksToWait;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3918
00001629 FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
0000162F ECE1                    		MOV.L [R14], R1
00001631 06890103                		ADD 0CH[R0].L, R1
00001635 E301                    		MOV.L R1, [R0]
00001637                         L653:	; bb23.split
                                 ;    3919 							prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3919
00001637 EC01                    		MOV.L [R0], R1
00001639 39rrrr               W  		BSR __$prvAddCurrentTaskToDelayedList
0000163C                         L654:	; bb32
                                 ;    3920 						}
                                 ;    3921 					}
                                 ;    3922 					#else /* INCLUDE_vTaskSuspend */
                                 ;    3923 					{
                                 ;    3924 							/* Calculate the time at which the task should be
                                 ;    3925 							woken if the event does not occur.  This may
                                 ;    3926 							overflow but this doesn't matter, the scheduler will
                                 ;    3927 							handle it. */
                                 ;    3928 							xTimeToWake = xTickCount + xTicksToWait;
                                 ;    3929 							prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 ;    3930 					}
                                 ;    3931 					#endif /* INCLUDE_vTaskSuspend */
                                 ;    3932 
                                 ;    3933 					/* All ports are written to allow a yield in a critical
                                 ;    3934 					section (some will yield immediately, others wait until the
                                 ;    3935 					critical section exits) - but it is not something that
                                 ;    3936 					application code should ever do. */
                                 ;    3937 					portYIELD_WITHIN_API();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3937
                                 		._LINE_TOP  inline_asm
                                  
0000163C 7EA5                    	PUSH.L R5
                                 	 
0000163E FB5EE07208              	MOV.L #553696, R5
00001643 F85401                  	MOV.B #1, [R5]
                                 	 
00001646 EC55                    	MOV.L [R5], R5
                                 	 
00001648 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
0000164A                         L655:	; bb46
                                 ;    3938 				}
                                 ;    3939 				else
                                 ;    3940 				{
                                 ;    3941 					mtCOVERAGE_TEST_MARKER();
                                 ;    3942 				}
                                 ;    3943 			}
                                 ;    3944 			else
                                 ;    3945 			{
                                 ;    3946 				mtCOVERAGE_TEST_MARKER();
                                 ;    3947 			}
                                 ;    3948 		}
                                 ;    3949 		taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3949
0000164A 39rrrr               W  		BSR _vTaskExitCritical
0000164D                         L656:	; bb46.split
                                 ;    3950 
                                 ;    3951 		taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3951
0000164D 39rrrr               W  		BSR _vTaskEnterCritical
00001650                         L657:	; bb46.split1
                                 ;    3952 		{
                                 ;    3953 			ulReturn = pxCurrentTCB->ulNotifiedValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3953
00001650 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001656 ECEE                    		MOV.L [R14], R14
00001658 E5E01501                		MOV.L 54H[R14], 04H[R0]
0000165C                         L658:	; bb46.split2
                                 ;    3954 
                                 ;    3955 			if( ulReturn != 0UL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3955
0000165C A809                    		MOV.L 04H[R0], R1
0000165E 6101                    		CMP #00H, R1
00001660 20rr                    		BEQ L662
00001662                         L659:	; bb52
                                 ;    3956 			{
                                 ;    3957 				if( xClearCountOnExit != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3957
00001662 A901                    		MOV.L 10H[R0], R1
00001664 6101                    		CMP #00H, R1
00001666 20rr                    		BEQ L661
00001668                         L660:	; bb53
                                 ;    3958 				{
                                 ;    3959 					pxCurrentTCB->ulNotifiedValue = 0UL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3959
00001668 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000166E ECE1                    		MOV.L [R14], R1
00001670 3E9500                  		MOV.L #00000000H, 54H[R1]
00001673 2Err                 B  		BRA L662
00001675                         L661:	; bb56
                                 ;    3960 				}
                                 ;    3961 				else
                                 ;    3962 				{
                                 ;    3963 					( pxCurrentTCB->ulNotifiedValue )--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3963
00001675 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000167B ECE1                    		MOV.L [R14], R1
0000167D AD1A                    		MOV.L 54H[R1], R2
0000167F 6012                    		SUB #01H, R2
00001681 A51A                    		MOV.L R2, 54H[R1]
00001683                         L662:	; bb71
                                 ;    3964 				}
                                 ;    3965 			}
                                 ;    3966 			else
                                 ;    3967 			{
                                 ;    3968 				mtCOVERAGE_TEST_MARKER();
                                 ;    3969 			}
                                 ;    3970 
                                 ;    3971 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3971
00001683 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001689 ECE1                    		MOV.L [R14], R1
0000168B 3E9600                  		MOV.L #00000000H, 58H[R1]
0000168E                         L663:	; bb71.split
                                 ;    3972 		}
                                 ;    3973 		taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3973
0000168E 39rrrr               W  		BSR _vTaskExitCritical
00001691                         L664:	; bb71.split3
                                 ;    3974 
                                 ;    3975 		return ulReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3975
00001691 A809                    		MOV.L 04H[R0], R1
00001693 A081                    		MOV.L R1, 08H[R0]
00001695                         L665:	; bb71.split4
                                 ;    3976 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3976
00001695 6705                    		RTSD #14H
00001697                         _xTaskNotifyWait:
                                 		.STACK	_xTaskNotifyWait=32
                                 ;    3977 
                                 ;    3978 #endif /* configUSE_TASK_NOTIFICATIONS */
                                 ;    3979 /*-----------------------------------------------------------*/
                                 ;    3980 
                                 ;    3981 #if( configUSE_TASK_NOTIFICATIONS == 1 )
                                 ;    3982 
                                 ;    3983 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3983
00001697 7100E4                  		ADD #0FFFFFFE4H, R0
0000169A A181                    		MOV.L R1, 18H[R0]
0000169C A10A                    		MOV.L R2, 14H[R0]
0000169E A103                    		MOV.L R3, 10H[R0]
000016A0 A08C                    		MOV.L R4, 0CH[R0]
                                 ;    3984 	{
                                 ;    3985 	TickType_t xTimeToWake;
                                 ;    3986 	BaseType_t xReturn;
                                 ;    3987 
                                 ;    3988 		taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3988
000016A2 39rrrr               W  		BSR _vTaskEnterCritical
000016A5                         L667:	; entry.split
                                 ;    3989 		{
                                 ;    3990 			/* Only block if a notification is not already pending. */
                                 ;    3991 			if( pxCurrentTCB->eNotifyState != eNotified )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3991
000016A5 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000016AB ECE1                    		MOV.L [R14], R1
000016AD AD91                    		MOV.L 58H[R1], R1
000016AF 6121                    		CMP #02H, R1
000016B1 20rr                    		BEQ L677
000016B3                         L668:	; bb7
                                 ;    3992 			{
                                 ;    3993 				/* Clear bits in the task's notification value as bits may get
                                 ;    3994 				set	by the notifying task or interrupt.  This can be used to
                                 ;    3995 				clear the value to zero. */
                                 ;    3996 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3996
000016B3 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000016B9 ECE1                    		MOV.L [R14], R1
000016BB A982                    		MOV.L 18H[R0], R2
000016BD 7E02                    		NOT R2
000016BF 06911215                		AND 54H[R1].L, R2
000016C3 A51A                    		MOV.L R2, 54H[R1]
000016C5                         L669:	; bb7.split
                                 ;    3997 
                                 ;    3998 				/* Mark this task as waiting for a notification. */
                                 ;    3999 				pxCurrentTCB->eNotifyState = eWaitingNotification;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",3999
000016C5 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000016CB ECE1                    		MOV.L [R14], R1
000016CD 3E9601                  		MOV.L #00000001H, 58H[R1]
000016D0                         L670:	; bb7.split1
                                 ;    4000 
                                 ;    4001 				if( xTicksToWait > ( TickType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4001
000016D0 A889                    		MOV.L 0CH[R0], R1
000016D2 6101                    		CMP #00H, R1
000016D4 20rr                    		BEQ L677
000016D6                         L671:	; bb17
                                 ;    4002 				{
                                 ;    4003 					/* The task is going to block.  First it must be removed
                                 ;    4004 					from the	ready list. */
                                 ;    4005 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4005
000016D6 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000016DC ECE1                    		MOV.L [R14], R1
000016DE 6241                    		ADD #04H, R1
000016E0 05rrrrrr             A  		BSR _uxListRemove
000016E4                         L672:	; bb17.split
                                 ;    4006 					{
                                 ;    4007 						/* The current task must be in a ready list, so there is
                                 ;    4008 						no need to check, and the port reset macro can be called
                                 ;    4009 						directly. */
                                 ;    4010 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
                                 ;    4011 					}
                                 ;    4012 					else
                                 ;    4013 					{
                                 ;    4014 						mtCOVERAGE_TEST_MARKER();
                                 ;    4015 					}
                                 ;    4016 
                                 ;    4017 					#if ( INCLUDE_vTaskSuspend == 1 )
                                 ;    4018 					{
                                 ;    4019 						if( xTicksToWait == portMAX_DELAY )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4019
000016E4 A889                    		MOV.L 0CH[R0], R1
000016E6 7501FF                  		CMP #0FFFFFFFFH, R1
000016E9 21rr                    		BNE L674
000016EB                         L673:	; bb27
                                 ;    4020 						{
                                 ;    4021 							/* Add the task to the suspended task list instead
                                 ;    4022 							of a delayed task list to ensure the task is not
                                 ;    4023 							woken by a timing event.  It will block
                                 ;    4024 							indefinitely. */
                                 ;    4025 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4025
000016EB FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
000016F1 ECE2                    		MOV.L [R14], R2
000016F3 6242                    		ADD #04H, R2
000016F5 FB12rrrrrrrr            		MOV.L #__$xSuspendedTaskList, R1
000016FB 05rrrrrr             A  		BSR _vListInsertEnd
000016FF 2Err                 B  		BRA L676
00001701                         L674:	; bb30
                                 ;    4026 						}
                                 ;    4027 						else
                                 ;    4028 						{
                                 ;    4029 							/* Calculate the time at which the task should be
                                 ;    4030 							woken if no notification events occur.  This may
                                 ;    4031 							overflow but this doesn't matter, the scheduler will
                                 ;    4032 							handle it. */
                                 ;    4033 							xTimeToWake = xTickCount + xTicksToWait;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4033
00001701 FBE2rrrrrrrr            		MOV.L #__$xTickCount, R14
00001707 ECE1                    		MOV.L [R14], R1
00001709 06890103                		ADD 0CH[R0].L, R1
0000170D E301                    		MOV.L R1, [R0]
0000170F                         L675:	; bb30.split
                                 ;    4034 							prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4034
0000170F EC01                    		MOV.L [R0], R1
00001711 39rrrr               W  		BSR __$prvAddCurrentTaskToDelayedList
00001714                         L676:	; bb39
                                 ;    4035 						}
                                 ;    4036 					}
                                 ;    4037 					#else /* INCLUDE_vTaskSuspend */
                                 ;    4038 					{
                                 ;    4039 							/* Calculate the time at which the task should be
                                 ;    4040 							woken if the event does not occur.  This may
                                 ;    4041 							overflow but this doesn't matter, the scheduler will
                                 ;    4042 							handle it. */
                                 ;    4043 							xTimeToWake = xTickCount + xTicksToWait;
                                 ;    4044 							prvAddCurrentTaskToDelayedList( xTimeToWake );
                                 ;    4045 					}
                                 ;    4046 					#endif /* INCLUDE_vTaskSuspend */
                                 ;    4047 
                                 ;    4048 					/* All ports are written to allow a yield in a critical
                                 ;    4049 					section (some will yield immediately, others wait until the
                                 ;    4050 					critical section exits) - but it is not something that
                                 ;    4051 					application code should ever do. */
                                 ;    4052 					portYIELD_WITHIN_API();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4052
                                 		._LINE_TOP  inline_asm
                                  
00001714 7EA5                    	PUSH.L R5
                                 	 
00001716 FB5EE07208              	MOV.L #553696, R5
0000171B F85401                  	MOV.B #1, [R5]
                                 	 
0000171E EC55                    	MOV.L [R5], R5
                                 	 
00001720 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
00001722                         L677:	; bb53
                                 ;    4053 				}
                                 ;    4054 				else
                                 ;    4055 				{
                                 ;    4056 					mtCOVERAGE_TEST_MARKER();
                                 ;    4057 				}
                                 ;    4058 			}
                                 ;    4059 			else
                                 ;    4060 			{
                                 ;    4061 				mtCOVERAGE_TEST_MARKER();
                                 ;    4062 			}
                                 ;    4063 		}
                                 ;    4064 		taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4064
00001722 39rrrr               W  		BSR _vTaskExitCritical
00001725                         L678:	; bb53.split
                                 ;    4065 
                                 ;    4066 		taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4066
00001725 39rrrr               W  		BSR _vTaskEnterCritical
00001728                         L679:	; bb53.split2
                                 ;    4067 		{
                                 ;    4068 			if( pulNotificationValue != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4068
00001728 A901                    		MOV.L 10H[R0], R1
0000172A 6101                    		CMP #00H, R1
0000172C 20rr                    		BEQ L681
0000172E                         L680:	; bb55
                                 ;    4069 			{
                                 ;    4070 				/* Output the current notification value, which may or may not
                                 ;    4071 				have changed. */
                                 ;    4072 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4072
0000172E A901                    		MOV.L 10H[R0], R1
00001730 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001736 ECEE                    		MOV.L [R14], R14
00001738 E1E115                  		MOV.L 54H[R14], [R1]
0000173B                         L681:	; bb65
                                 ;    4073 			}
                                 ;    4074 
                                 ;    4075 			/* If eNotifyValue is set then either the task never entered the
                                 ;    4076 			blocked state (because a notification was already pending) or the
                                 ;    4077 			task unblocked because of a notification.  Otherwise the task
                                 ;    4078 			unblocked because of a timeout. */
                                 ;    4079 			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4079
0000173B FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001741 ECE1                    		MOV.L [R14], R1
00001743 AD91                    		MOV.L 58H[R1], R1
00001745 6111                    		CMP #01H, R1
00001747 18                   S  		BNE L683
00001748                         L682:	; bb66
                                 ;    4080 			{
                                 ;    4081 				/* A notification was not received. */
                                 ;    4082 				xReturn = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4082
00001748 3E0100                  		MOV.L #00000000H, 04H[R0]
0000174B 2Err                 B  		BRA L685
0000174D                         L683:	; bb67
                                 ;    4083 			}
                                 ;    4084 			else
                                 ;    4085 			{
                                 ;    4086 				/* A notification was already pending or a notification was
                                 ;    4087 				received while the task was waiting. */
                                 ;    4088 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4088
0000174D FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001753 ECE1                    		MOV.L [R14], R1
00001755 A90A                    		MOV.L 14H[R0], R2
00001757 7E02                    		NOT R2
00001759 06911215                		AND 54H[R1].L, R2
0000175D A51A                    		MOV.L R2, 54H[R1]
0000175F                         L684:	; bb67.split
                                 ;    4089 				xReturn = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4089
0000175F 3E0101                  		MOV.L #00000001H, 04H[R0]
00001762                         L685:	; bb79
                                 ;    4090 			}
                                 ;    4091 
                                 ;    4092 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4092
00001762 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001768 ECE1                    		MOV.L [R14], R1
0000176A 3E9600                  		MOV.L #00000000H, 58H[R1]
0000176D                         L686:	; bb79.split
                                 ;    4093 		}
                                 ;    4094 		taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4094
0000176D 39rrrr               W  		BSR _vTaskExitCritical
00001770                         L687:	; bb79.split3
                                 ;    4095 
                                 ;    4096 		return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4096
00001770 A809                    		MOV.L 04H[R0], R1
00001772 A081                    		MOV.L R1, 08H[R0]
00001774                         L688:	; bb79.split4
                                 ;    4097 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4097
00001774 6707                    		RTSD #1CH
00001776                         _xTaskGenericNotify:
                                 		.STACK	_xTaskGenericNotify=36
                                 ;    4098 
                                 ;    4099 #endif /* configUSE_TASK_NOTIFICATIONS */
                                 ;    4100 /*-----------------------------------------------------------*/
                                 ;    4101 
                                 ;    4102 #if( configUSE_TASK_NOTIFICATIONS == 1 )
                                 ;    4103 
                                 ;    4104 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4104
00001776 7100E0                  		ADD #0FFFFFFE0H, R0
00001779 A189                    		MOV.L R1, 1CH[R0]
0000177B A182                    		MOV.L R2, 18H[R0]
0000177D A10B                    		MOV.L R3, 14H[R0]
0000177F A104                    		MOV.L R4, 10H[R0]
                                 ;    4105 	{
                                 ;    4106 	TCB_t * pxTCB;
                                 ;    4107 	eNotifyValue eOriginalNotifyState;
                                 ;    4108 	BaseType_t xReturn = pdPASS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4108
00001781 3E0201                  		MOV.L #00000001H, 08H[R0]
00001784                         L690:	; entry.split
                                 ;    4109 
                                 ;    4110 		configASSERT( xTaskToNotify );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4110
00001784 A989                    		MOV.L 1CH[R0], R1
00001786 6101                    		CMP #00H, R1
00001788 18                   S  		BNE L692
00001789                         L691:	; bb8
00001789 05rrrrrr             A  		BSR _vAssertCalled
0000178D                         L692:	; bb12
                                 ;    4111 		pxTCB = ( TCB_t * ) xTaskToNotify;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4111
0000178D E10007                  		MOV.L 1CH[R0], [R0]
00001790                         L693:	; bb12.split
                                 ;    4112 
                                 ;    4113 		taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4113
00001790 39rrrr               W  		BSR _vTaskEnterCritical
00001793                         L694:	; bb12.split1
                                 ;    4114 		{
                                 ;    4115 			if( pulPreviousNotificationValue != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4115
00001793 A901                    		MOV.L 10H[R0], R1
00001795 6101                    		CMP #00H, R1
00001797 10                   S  		BEQ L696
00001798                         L695:	; bb16
                                 ;    4116 			{
                                 ;    4117 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4117
00001798 EC01                    		MOV.L [R0], R1
0000179A A902                    		MOV.L 10H[R0], R2
0000179C E11215                  		MOV.L 54H[R1], [R2]
0000179F                         L696:	; bb25
                                 ;    4118 			}
                                 ;    4119 
                                 ;    4120 			eOriginalNotifyState = pxTCB->eNotifyState;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4120
0000179F EC01                    		MOV.L [R0], R1
000017A1 E5101601                		MOV.L 58H[R1], 04H[R0]
000017A5                         L697:	; bb25.split
                                 ;    4121 
                                 ;    4122 			pxTCB->eNotifyState = eNotified;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4122
000017A5 EC01                    		MOV.L [R0], R1
000017A7 3E9602                  		MOV.L #00000002H, 58H[R1]
000017AA                         L698:	; bb25.split2
                                 ;    4123 
                                 ;    4124 			switch( eAction )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4124
000017AA A909                    		MOV.L 14H[R0], R1
000017AC 6141                    		CMP #04H, R1
000017AE 20rr                    		BEQ L705
000017B0                         L699:	; bb25.split2
000017B0 6121                    		CMP #02H, R1
000017B2 20rr                    		BEQ L703
000017B4                         L700:	; bb25.split2
000017B4 6131                    		CMP #03H, R1
000017B6 20rr                    		BEQ L704
000017B8                         L701:	; bb25.split2
000017B8 6111                    		CMP #01H, R1
000017BA 21rr                    		BNE L708
000017BC                         L702:	; bb32
                                 ;    4125 			{
                                 ;    4126 				case eSetBits	:
                                 ;    4127 					pxTCB->ulNotifiedValue |= ulValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4127
000017BC EC01                    		MOV.L [R0], R1
000017BE A982                    		MOV.L 18H[R0], R2
000017C0 06951215                		OR 54H[R1].L, R2
000017C4 A51A                    		MOV.L R2, 54H[R1]
000017C6 2Err                 B  		BRA L708
000017C8                         L703:	; bb38
                                 ;    4128 					break;
                                 ;    4129 
                                 ;    4130 				case eIncrement	:
                                 ;    4131 					( pxTCB->ulNotifiedValue )++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4131
000017C8 EC01                    		MOV.L [R0], R1
000017CA AD1A                    		MOV.L 54H[R1], R2
000017CC 6212                    		ADD #01H, R2
000017CE A51A                    		MOV.L R2, 54H[R1]
000017D0 2Err                 B  		BRA L708
000017D2                         L704:	; bb43
                                 ;    4132 					break;
                                 ;    4133 
                                 ;    4134 				case eSetValueWithOverwrite	:
                                 ;    4135 					pxTCB->ulNotifiedValue = ulValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4135
000017D2 A981                    		MOV.L 18H[R0], R1
000017D4 EC02                    		MOV.L [R0], R2
000017D6 A529                    		MOV.L R1, 54H[R2]
000017D8 2Err                 B  		BRA L708
000017DA                         L705:	; bb48
                                 ;    4136 					break;
                                 ;    4137 
                                 ;    4138 				case eSetValueWithoutOverwrite :
                                 ;    4139 					if( eOriginalNotifyState != eNotified )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4139
000017DA A809                    		MOV.L 04H[R0], R1
000017DC 6121                    		CMP #02H, R1
000017DE 10                   S  		BEQ L707
000017DF                         L706:	; bb49
                                 ;    4140 					{
                                 ;    4141 						pxTCB->ulNotifiedValue = ulValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4141
000017DF A981                    		MOV.L 18H[R0], R1
000017E1 EC02                    		MOV.L [R0], R2
000017E3 A529                    		MOV.L R1, 54H[R2]
000017E5 08                   S  		BRA L708
000017E6                         L707:	; bb53
                                 ;    4142 					}
                                 ;    4143 					else
                                 ;    4144 					{
                                 ;    4145 						/* The value could not be written to the task. */
                                 ;    4146 						xReturn = pdFAIL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4146
000017E6 3E0200                  		MOV.L #00000000H, 08H[R0]
000017E9                         L708:	; bb61
                                 ;    4147 					}
                                 ;    4148 					break;
                                 ;    4149 
                                 ;    4150 				case eNoAction:
                                 ;    4151 					/* The task is being notified without its notify value being
                                 ;    4152 					updated. */
                                 ;    4153 					break;
                                 ;    4154 			}
                                 ;    4155 
                                 ;    4156 
                                 ;    4157 			/* If the task is in the blocked state specifically to wait for a
                                 ;    4158 			notification then unblock it now. */
                                 ;    4159 			if( eOriginalNotifyState == eWaitingNotification )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4159
000017E9 A809                    		MOV.L 04H[R0], R1
000017EB 6111                    		CMP #01H, R1
000017ED 21rr                    		BNE L717
000017EF                         L709:	; bb62
                                 ;    4160 			{
                                 ;    4161 				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4161
000017EF EC01                    		MOV.L [R0], R1
000017F1 6241                    		ADD #04H, R1
000017F3 05rrrrrr             A  		BSR _uxListRemove
000017F7                         L710:	; bb62.split
                                 ;    4162 				prvAddTaskToReadyList( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4162
000017F7 EC01                    		MOV.L [R0], R1
000017F9 AA99                    		MOV.L 2CH[R1], R1
000017FB FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00001801 0684E1                  		CMP [R14].L, R1
00001804 25rr                    		BLEU L712
00001806                         L711:	; bb67
00001806 EC01                    		MOV.L [R0], R1
00001808 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
0000180E E11E0B                  		MOV.L 2CH[R1], [R14]
00001811                         L712:	; bb78
00001811 EC02                    		MOV.L [R0], R2
00001813 AAAB                    		MOV.L 2CH[R2], R3
00001815 751314                  		MUL #14H, R3
00001818 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
0000181E 4B31                    		ADD R3, R1
00001820 6242                    		ADD #04H, R2
00001822 05rrrrrr             A  		BSR _vListInsertEnd
00001826                         L713:	; bb78.split
                                 ;    4163 
                                 ;    4164 				/* The task should not have been on an event list. */
                                 ;    4165 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4165
00001826 EC01                    		MOV.L [R0], R1
00001828 AA91                    		MOV.L 28H[R1], R1
0000182A 6101                    		CMP #00H, R1
0000182C 10                   S  		BEQ L715
0000182D                         L714:	; bb86
0000182D 05rrrrrr             A  		BSR _vAssertCalled
00001831                         L715:	; bb97
                                 ;    4166 
                                 ;    4167 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4167
00001831 EC01                    		MOV.L [R0], R1
00001833 AA99                    		MOV.L 2CH[R1], R1
00001835 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000183B ECEE                    		MOV.L [R14], R14
0000183D 0685E10B                		CMP 2CH[R14].L, R1
00001841 25rr                    		BLEU L717
00001843                         L716:	; bb98
                                 ;    4168 				{
                                 ;    4169 					/* The notified task has a priority above the currently
                                 ;    4170 					executing task so a yield is required. */
                                 ;    4171 					taskYIELD_IF_USING_PREEMPTION();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4171
                                 		._LINE_TOP  inline_asm
                                  
00001843 7EA5                    	PUSH.L R5
                                 	 
00001845 FB5EE07208              	MOV.L #553696, R5
0000184A F85401                  	MOV.B #1, [R5]
                                 	 
0000184D EC55                    	MOV.L [R5], R5
                                 	 
0000184F 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
00001851                         L717:	; bb115
                                 ;    4172 				}
                                 ;    4173 				else
                                 ;    4174 				{
                                 ;    4175 					mtCOVERAGE_TEST_MARKER();
                                 ;    4176 				}
                                 ;    4177 			}
                                 ;    4178 			else
                                 ;    4179 			{
                                 ;    4180 				mtCOVERAGE_TEST_MARKER();
                                 ;    4181 			}
                                 ;    4182 		}
                                 ;    4183 		taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4183
00001851 39rrrr               W  		BSR _vTaskExitCritical
00001854                         L718:	; bb115.split
                                 ;    4184 
                                 ;    4185 		return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4185
00001854 A881                    		MOV.L 08H[R0], R1
00001856 A089                    		MOV.L R1, 0CH[R0]
00001858                         L719:	; bb115.split3
                                 ;    4186 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4186
00001858 6708                    		RTSD #20H
0000185A                         _xTaskNotifyFromISR:
                                 		.STACK	_xTaskNotifyFromISR=40
                                 ;    4187 
                                 ;    4188 #endif /* configUSE_TASK_NOTIFICATIONS */
                                 ;    4189 /*-----------------------------------------------------------*/
                                 ;    4190 
                                 ;    4191 #if( configUSE_TASK_NOTIFICATIONS == 1 )
                                 ;    4192 
                                 ;    4193 	BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4193
0000185A 7100DC                  		ADD #0FFFFFFDCH, R0
0000185D A201                    		MOV.L R1, 20H[R0]
0000185F A18A                    		MOV.L R2, 1CH[R0]
00001861 A183                    		MOV.L R3, 18H[R0]
00001863 A10C                    		MOV.L R4, 14H[R0]
                                 ;    4194 	{
                                 ;    4195 	TCB_t * pxTCB;
                                 ;    4196 	eNotifyValue eOriginalNotifyState;
                                 ;    4197 	BaseType_t xReturn = pdPASS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4197
00001865 3E0201                  		MOV.L #00000001H, 08H[R0]
00001868                         L721:	; entry.split
                                 ;    4198 	UBaseType_t uxSavedInterruptStatus;
                                 ;    4199 
                                 ;    4200 		configASSERT( xTaskToNotify );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4200
00001868 AA01                    		MOV.L 20H[R0], R1
0000186A 6101                    		CMP #00H, R1
0000186C 18                   S  		BNE L723
0000186D                         L722:	; bb9
0000186D 05rrrrrr             A  		BSR _vAssertCalled
00001871                         L723:	; bb14
                                 ;    4201 
                                 ;    4202 		/* RTOS ports that support interrupt nesting have the concept of a
                                 ;    4203 		maximum	system call (or maximum API call) interrupt priority.
                                 ;    4204 		Interrupts that are	above the maximum system call priority are keep
                                 ;    4205 		permanently enabled, even when the RTOS kernel is in a critical section,
                                 ;    4206 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
                                 ;    4207 		is defined in FreeRTOSConfig.h then
                                 ;    4208 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
                                 ;    4209 		failure if a FreeRTOS API function is called from an interrupt that has
                                 ;    4210 		been assigned a priority above the configured maximum system call
                                 ;    4211 		priority.  Only FreeRTOS functions that end in FromISR can be called
                                 ;    4212 		from interrupts	that have been assigned a priority at or (logically)
                                 ;    4213 		below the maximum system call interrupt priority.  FreeRTOS maintains a
                                 ;    4214 		separate interrupt safe API to ensure interrupt entry is as fast and as
                                 ;    4215 		simple as possible.  More information (albeit Cortex-M specific) is
                                 ;    4216 		provided on the following link:
                                 ;    4217 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
                                 ;    4218 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4218
00001871 FD6A0E                  		MVFC PSW, R14
00001874 FD67EE                  		REVL R14, R14
00001877 64FE                    		AND #0FH, R14
00001879 616E                    		CMP #06H, R14
0000187B 29rr                    		BLT L725
0000187D                         L724:	; bb15
0000187D 05rrrrrr             A  		BSR _vAssertCalled
00001881                         L725:	; bb24
                                 ;    4219 
                                 ;    4220 		pxTCB = ( TCB_t * ) xTaskToNotify;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4220
00001881 E10008                  		MOV.L 20H[R0], [R0]
00001884                         L726:	; bb24.split
                                 ;    4221 
                                 ;    4222 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4222
00001884 FD6A0E                  		MVFC PSW, R14
00001887 FD67E1                  		REVL R14, R1
0000188A 64F1                    		AND #0FH, R1
0000188C A089                    		MOV.L R1, 0CH[R0]
0000188E 757005                  		MVTIPL #05H
00001891                         L727:	; bb24.split1
                                 ;    4223 		{
                                 ;    4224 			eOriginalNotifyState = pxTCB->eNotifyState;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4224
00001891 EC01                    		MOV.L [R0], R1
00001893 E5101601                		MOV.L 58H[R1], 04H[R0]
00001897                         L728:	; bb24.split2
                                 ;    4225 
                                 ;    4226 			pxTCB->eNotifyState = eNotified;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4226
00001897 EC01                    		MOV.L [R0], R1
00001899 3E9602                  		MOV.L #00000002H, 58H[R1]
0000189C                         L729:	; bb24.split3
                                 ;    4227 
                                 ;    4228 			switch( eAction )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4228
0000189C A981                    		MOV.L 18H[R0], R1
0000189E 6141                    		CMP #04H, R1
000018A0 20rr                    		BEQ L736
000018A2                         L730:	; bb24.split3
000018A2 6121                    		CMP #02H, R1
000018A4 20rr                    		BEQ L734
000018A6                         L731:	; bb24.split3
000018A6 6131                    		CMP #03H, R1
000018A8 20rr                    		BEQ L735
000018AA                         L732:	; bb24.split3
000018AA 6111                    		CMP #01H, R1
000018AC 21rr                    		BNE L739
000018AE                         L733:	; bb36
                                 ;    4229 			{
                                 ;    4230 				case eSetBits	:
                                 ;    4231 					pxTCB->ulNotifiedValue |= ulValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4231
000018AE EC01                    		MOV.L [R0], R1
000018B0 A98A                    		MOV.L 1CH[R0], R2
000018B2 06951215                		OR 54H[R1].L, R2
000018B6 A51A                    		MOV.L R2, 54H[R1]
000018B8 2Err                 B  		BRA L739
000018BA                         L734:	; bb42
                                 ;    4232 					break;
                                 ;    4233 
                                 ;    4234 				case eIncrement	:
                                 ;    4235 					( pxTCB->ulNotifiedValue )++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4235
000018BA EC01                    		MOV.L [R0], R1
000018BC AD1A                    		MOV.L 54H[R1], R2
000018BE 6212                    		ADD #01H, R2
000018C0 A51A                    		MOV.L R2, 54H[R1]
000018C2 2Err                 B  		BRA L739
000018C4                         L735:	; bb47
                                 ;    4236 					break;
                                 ;    4237 
                                 ;    4238 				case eSetValueWithOverwrite	:
                                 ;    4239 					pxTCB->ulNotifiedValue = ulValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4239
000018C4 A989                    		MOV.L 1CH[R0], R1
000018C6 EC02                    		MOV.L [R0], R2
000018C8 A529                    		MOV.L R1, 54H[R2]
000018CA 2Err                 B  		BRA L739
000018CC                         L736:	; bb52
                                 ;    4240 					break;
                                 ;    4241 
                                 ;    4242 				case eSetValueWithoutOverwrite :
                                 ;    4243 					if( eOriginalNotifyState != eNotified )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4243
000018CC A809                    		MOV.L 04H[R0], R1
000018CE 6121                    		CMP #02H, R1
000018D0 10                   S  		BEQ L738
000018D1                         L737:	; bb53
                                 ;    4244 					{
                                 ;    4245 						pxTCB->ulNotifiedValue = ulValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4245
000018D1 A989                    		MOV.L 1CH[R0], R1
000018D3 EC02                    		MOV.L [R0], R2
000018D5 A529                    		MOV.L R1, 54H[R2]
000018D7 08                   S  		BRA L739
000018D8                         L738:	; bb57
                                 ;    4246 					}
                                 ;    4247 					else
                                 ;    4248 					{
                                 ;    4249 						/* The value could not be written to the task. */
                                 ;    4250 						xReturn = pdFAIL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4250
000018D8 3E0200                  		MOV.L #00000000H, 08H[R0]
000018DB                         L739:	; bb65
                                 ;    4251 					}
                                 ;    4252 					break;
                                 ;    4253 
                                 ;    4254 				case eNoAction :
                                 ;    4255 					/* The task is being notified without its notify value being
                                 ;    4256 					updated. */
                                 ;    4257 					break;
                                 ;    4258 			}
                                 ;    4259 
                                 ;    4260 
                                 ;    4261 			/* If the task is in the blocked state specifically to wait for a
                                 ;    4262 			notification then unblock it now. */
                                 ;    4263 			if( eOriginalNotifyState == eWaitingNotification )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4263
000018DB A809                    		MOV.L 04H[R0], R1
000018DD 6111                    		CMP #01H, R1
000018DF 21rr                    		BNE L751
000018E1                         L740:	; bb67
                                 ;    4264 			{
                                 ;    4265 				/* The task should not have been on an event list. */
                                 ;    4266 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4266
000018E1 EC01                    		MOV.L [R0], R1
000018E3 AA91                    		MOV.L 28H[R1], R1
000018E5 6101                    		CMP #00H, R1
000018E7 10                   S  		BEQ L742
000018E8                         L741:	; bb68
000018E8 05rrrrrr             A  		BSR _vAssertCalled
000018EC                         L742:	; bb79
                                 ;    4267 
                                 ;    4268 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4268
000018EC FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
000018F2 ECEE                    		MOV.L [R14], R14
000018F4 610E                    		CMP #00H, R14
000018F6 EC01                    		MOV.L [R0], R1
000018F8 21rr                    		BNE L747
000018FA                         L743:	; bb80
                                 ;    4269 				{
                                 ;    4270 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4270
000018FA 6241                    		ADD #04H, R1
000018FC 05rrrrrr             A  		BSR _uxListRemove
00001900                         L744:	; bb80.split
                                 ;    4271 					prvAddTaskToReadyList( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4271
00001900 EC01                    		MOV.L [R0], R1
00001902 AA99                    		MOV.L 2CH[R1], R1
00001904 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
0000190A 0684E1                  		CMP [R14].L, R1
0000190D 25rr                    		BLEU L746
0000190F                         L745:	; bb85
0000190F EC01                    		MOV.L [R0], R1
00001911 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
00001917 E11E0B                  		MOV.L 2CH[R1], [R14]
0000191A                         L746:	; bb96
0000191A EC02                    		MOV.L [R0], R2
0000191C AAAB                    		MOV.L 2CH[R2], R3
0000191E 751314                  		MUL #14H, R3
00001921 FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
00001927 4B31                    		ADD R3, R1
00001929 6242                    		ADD #04H, R2
0000192B 05rrrrrr             A  		BSR _vListInsertEnd
0000192F 2Err                 B  		BRA L748
00001931                         L747:	; bb103
                                 ;    4272 				}
                                 ;    4273 				else
                                 ;    4274 				{
                                 ;    4275 					/* The delayed and ready lists cannot be accessed, so hold
                                 ;    4276 					this task pending until the scheduler is resumed. */
                                 ;    4277 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4277
00001931 EF12                    		MOV.L R1, R2
00001933 712218                  		ADD #18H, R2
00001936 FB12rrrrrrrr            		MOV.L #__$xPendingReadyList, R1
0000193C 05rrrrrr             A  		BSR _vListInsertEnd
00001940                         L748:	; bb111
                                 ;    4278 				}
                                 ;    4279 
                                 ;    4280 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4280
00001940 EC01                    		MOV.L [R0], R1
00001942 AA99                    		MOV.L 2CH[R1], R1
00001944 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000194A ECEE                    		MOV.L [R14], R14
0000194C 0685E10B                		CMP 2CH[R14].L, R1
00001950 25rr                    		BLEU L751
00001952                         L749:	; bb113
                                 ;    4281 				{
                                 ;    4282 					/* The notified task has a priority above the currently
                                 ;    4283 					executing task so a yield is required. */
                                 ;    4284 					if( pxHigherPriorityTaskWoken != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4284
00001952 A909                    		MOV.L 14H[R0], R1
00001954 6101                    		CMP #00H, R1
00001956 10                   S  		BEQ L751
00001957                         L750:	; bb114
                                 ;    4285 					{
                                 ;    4286 						*pxHigherPriorityTaskWoken = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4286
00001957 A909                    		MOV.L 14H[R0], R1
00001959 F81601                  		MOV.L #00000001H, [R1]
0000195C                         L751:	; bb136
                                 ;    4287 					}
                                 ;    4288 				}
                                 ;    4289 				else
                                 ;    4290 				{
                                 ;    4291 					mtCOVERAGE_TEST_MARKER();
                                 ;    4292 				}
                                 ;    4293 			}
                                 ;    4294 		}
                                 ;    4295 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4295
0000195C A889                    		MOV.L 0CH[R0], R1
0000195E 6DC1                    		SHLL #1CH, R1
00001960 6841                    		SHLR #04H, R1
00001962 FD6A0E                  		MVFC PSW, R14
00001965 742EFFFFFFF0            		AND #0F0FFFFFFH, R14
0000196B 57E1                    		OR R14, R1
0000196D FD6810                  		MVTC R1, PSW
00001970                         L752:	; bb136.split
                                 ;    4296 
                                 ;    4297 		return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4297
00001970 A881                    		MOV.L 08H[R0], R1
00001972 A101                    		MOV.L R1, 10H[R0]
00001974                         L753:	; bb136.split4
                                 ;    4298 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4298
00001974 6709                    		RTSD #24H
00001976                         _vTaskNotifyGiveFromISR:
                                 		.STACK	_vTaskNotifyGiveFromISR=24
                                 ;    4299 
                                 ;    4300 #endif /* configUSE_TASK_NOTIFICATIONS */
                                 ;    4301 /*-----------------------------------------------------------*/
                                 ;    4302 
                                 ;    4303 #if( configUSE_TASK_NOTIFICATIONS == 1 )
                                 ;    4304 
                                 ;    4305 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4305
00001976 7100EC                  		ADD #0FFFFFFECH, R0
00001979 A101                    		MOV.L R1, 10H[R0]
0000197B A08A                    		MOV.L R2, 0CH[R0]
                                 ;    4306 	{
                                 ;    4307 	TCB_t * pxTCB;
                                 ;    4308 	eNotifyValue eOriginalNotifyState;
                                 ;    4309 	UBaseType_t uxSavedInterruptStatus;
                                 ;    4310 
                                 ;    4311 		configASSERT( xTaskToNotify );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4311
0000197D A901                    		MOV.L 10H[R0], R1
0000197F 6101                    		CMP #00H, R1
00001981 18                   S  		BNE L756
00001982                         L755:	; bb6
00001982 05rrrrrr             A  		BSR _vAssertCalled
00001986                         L756:	; bb10
                                 ;    4312 
                                 ;    4313 		/* RTOS ports that support interrupt nesting have the concept of a
                                 ;    4314 		maximum	system call (or maximum API call) interrupt priority.
                                 ;    4315 		Interrupts that are	above the maximum system call priority are keep
                                 ;    4316 		permanently enabled, even when the RTOS kernel is in a critical section,
                                 ;    4317 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
                                 ;    4318 		is defined in FreeRTOSConfig.h then
                                 ;    4319 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
                                 ;    4320 		failure if a FreeRTOS API function is called from an interrupt that has
                                 ;    4321 		been assigned a priority above the configured maximum system call
                                 ;    4322 		priority.  Only FreeRTOS functions that end in FromISR can be called
                                 ;    4323 		from interrupts	that have been assigned a priority at or (logically)
                                 ;    4324 		below the maximum system call interrupt priority.  FreeRTOS maintains a
                                 ;    4325 		separate interrupt safe API to ensure interrupt entry is as fast and as
                                 ;    4326 		simple as possible.  More information (albeit Cortex-M specific) is
                                 ;    4327 		provided on the following link:
                                 ;    4328 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
                                 ;    4329 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4329
00001986 FD6A0E                  		MVFC PSW, R14
00001989 FD67EE                  		REVL R14, R14
0000198C 64FE                    		AND #0FH, R14
0000198E 616E                    		CMP #06H, R14
00001990 29rr                    		BLT L758
00001992                         L757:	; bb11
00001992 05rrrrrr             A  		BSR _vAssertCalled
00001996                         L758:	; bb20
                                 ;    4330 
                                 ;    4331 		pxTCB = ( TCB_t * ) xTaskToNotify;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4331
00001996 E10004                  		MOV.L 10H[R0], [R0]
00001999                         L759:	; bb20.split
                                 ;    4332 
                                 ;    4333 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4333
00001999 FD6A0E                  		MVFC PSW, R14
0000199C FD67E1                  		REVL R14, R1
0000199F 64F1                    		AND #0FH, R1
000019A1 A081                    		MOV.L R1, 08H[R0]
000019A3 757005                  		MVTIPL #05H
000019A6                         L760:	; bb20.split1
                                 ;    4334 		{
                                 ;    4335 			eOriginalNotifyState = pxTCB->eNotifyState;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4335
000019A6 EC01                    		MOV.L [R0], R1
000019A8 E5101601                		MOV.L 58H[R1], 04H[R0]
000019AC                         L761:	; bb20.split2
                                 ;    4336 			pxTCB->eNotifyState = eNotified;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4336
000019AC EC01                    		MOV.L [R0], R1
000019AE 3E9602                  		MOV.L #00000002H, 58H[R1]
000019B1                         L762:	; bb20.split3
                                 ;    4337 
                                 ;    4338 			/* 'Giving' is equivalent to incrementing a count in a counting
                                 ;    4339 			semaphore. */
                                 ;    4340 			( pxTCB->ulNotifiedValue )++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4340
000019B1 EC01                    		MOV.L [R0], R1
000019B3 AD1A                    		MOV.L 54H[R1], R2
000019B5 6212                    		ADD #01H, R2
000019B7 A51A                    		MOV.L R2, 54H[R1]
000019B9                         L763:	; bb20.split4
                                 ;    4341 
                                 ;    4342 			/* If the task is in the blocked state specifically to wait for a
                                 ;    4343 			notification then unblock it now. */
                                 ;    4344 			if( eOriginalNotifyState == eWaitingNotification )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4344
000019B9 A809                    		MOV.L 04H[R0], R1
000019BB 6111                    		CMP #01H, R1
000019BD 21rr                    		BNE L775
000019BF                         L764:	; bb37
                                 ;    4345 			{
                                 ;    4346 				/* The task should not have been on an event list. */
                                 ;    4347 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4347
000019BF EC01                    		MOV.L [R0], R1
000019C1 AA91                    		MOV.L 28H[R1], R1
000019C3 6101                    		CMP #00H, R1
000019C5 10                   S  		BEQ L766
000019C6                         L765:	; bb38
000019C6 05rrrrrr             A  		BSR _vAssertCalled
000019CA                         L766:	; bb49
                                 ;    4348 
                                 ;    4349 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4349
000019CA FBE2rrrrrrrr            		MOV.L #__$uxSchedulerSuspended, R14
000019D0 ECEE                    		MOV.L [R14], R14
000019D2 610E                    		CMP #00H, R14
000019D4 EC01                    		MOV.L [R0], R1
000019D6 21rr                    		BNE L771
000019D8                         L767:	; bb50
                                 ;    4350 				{
                                 ;    4351 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4351
000019D8 6241                    		ADD #04H, R1
000019DA 05rrrrrr             A  		BSR _uxListRemove
000019DE                         L768:	; bb50.split
                                 ;    4352 					prvAddTaskToReadyList( pxTCB );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4352
000019DE EC01                    		MOV.L [R0], R1
000019E0 AA99                    		MOV.L 2CH[R1], R1
000019E2 FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
000019E8 0684E1                  		CMP [R14].L, R1
000019EB 25rr                    		BLEU L770
000019ED                         L769:	; bb55
000019ED EC01                    		MOV.L [R0], R1
000019EF FBE2rrrrrrrr            		MOV.L #__$uxTopReadyPriority, R14
000019F5 E11E0B                  		MOV.L 2CH[R1], [R14]
000019F8                         L770:	; bb66
000019F8 EC02                    		MOV.L [R0], R2
000019FA AAAB                    		MOV.L 2CH[R2], R3
000019FC 751314                  		MUL #14H, R3
000019FF FB12rrrrrrrr            		MOV.L #__$pxReadyTasksLists, R1
00001A05 4B31                    		ADD R3, R1
00001A07 6242                    		ADD #04H, R2
00001A09 05rrrrrr             A  		BSR _vListInsertEnd
00001A0D 2Err                 B  		BRA L772
00001A0F                         L771:	; bb73
                                 ;    4353 				}
                                 ;    4354 				else
                                 ;    4355 				{
                                 ;    4356 					/* The delayed and ready lists cannot be accessed, so hold
                                 ;    4357 					this task pending until the scheduler is resumed. */
                                 ;    4358 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4358
00001A0F EF12                    		MOV.L R1, R2
00001A11 712218                  		ADD #18H, R2
00001A14 FB12rrrrrrrr            		MOV.L #__$xPendingReadyList, R1
00001A1A 05rrrrrr             A  		BSR _vListInsertEnd
00001A1E                         L772:	; bb81
                                 ;    4359 				}
                                 ;    4360 
                                 ;    4361 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4361
00001A1E EC01                    		MOV.L [R0], R1
00001A20 AA99                    		MOV.L 2CH[R1], R1
00001A22 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00001A28 ECEE                    		MOV.L [R14], R14
00001A2A 0685E10B                		CMP 2CH[R14].L, R1
00001A2E 25rr                    		BLEU L775
00001A30                         L773:	; bb83
                                 ;    4362 				{
                                 ;    4363 					/* The notified task has a priority above the currently
                                 ;    4364 					executing task so a yield is required. */
                                 ;    4365 					if( pxHigherPriorityTaskWoken != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4365
00001A30 A889                    		MOV.L 0CH[R0], R1
00001A32 6101                    		CMP #00H, R1
00001A34 10                   S  		BEQ L775
00001A35                         L774:	; bb84
                                 ;    4366 					{
                                 ;    4367 						*pxHigherPriorityTaskWoken = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4367
00001A35 A889                    		MOV.L 0CH[R0], R1
00001A37 F81601                  		MOV.L #00000001H, [R1]
00001A3A                         L775:	; bb106
                                 ;    4368 					}
                                 ;    4369 				}
                                 ;    4370 				else
                                 ;    4371 				{
                                 ;    4372 					mtCOVERAGE_TEST_MARKER();
                                 ;    4373 				}
                                 ;    4374 			}
                                 ;    4375 		}
                                 ;    4376 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\tasks.c",4376
00001A3A A881                    		MOV.L 08H[R0], R1
00001A3C 6DC1                    		SHLL #1CH, R1
00001A3E 6841                    		SHLR #04H, R1
00001A40 FD6A0E                  		MVFC PSW, R14
00001A43 742EFFFFFFF0            		AND #0F0FFFFFFH, R14
00001A49 57E1                    		OR R14, R1
00001A4B FD6810                  		MVTC R1, PSW
00001A4E 6705                    		RTSD #14H
                                 ;    4377 	}
                                 ;    4378 
                                 ;    4379 #endif /* configUSE_TASK_NOTIFICATIONS */
                                 ;    4380 
                                 ;    4381 /*-----------------------------------------------------------*/
                                 ;    4382 
                                 ;    4383 
                                 ;    4384 #ifdef FREERTOS_MODULE_TEST
                                 ;    4385 	#include "tasks_test_access_functions.h"
                                 ;    4386 #endif
                                 ;    4387 
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 49444C45                		.byte	"IDLE"
00000004 00                      		.byte	00H
                                 		.SECTION	D,ROMDATA,ALIGN=4
00000000                         _pxCurrentTCB:
00000000 00000000                		.lword	00000000H
00000004                         __$uxTasksDeleted:
00000004 00000000                		.lword	00000000H
00000008                         __$uxCurrentNumberOfTasks:
00000008 00000000                		.lword	00000000H
0000000C                         __$xTickCount:
0000000C 00000000                		.lword	00000000H
00000010                         __$uxTopReadyPriority:
00000010 00000000                		.lword	00000000H
00000014                         __$xSchedulerRunning:
00000014 00000000                		.lword	00000000H
00000018                         __$uxPendedTicks:
00000018 00000000                		.lword	00000000H
0000001C                         __$xYieldPending:
0000001C 00000000                		.lword	00000000H
00000020                         __$xNumOfOverflows:
00000020 00000000                		.lword	00000000H
00000024                         __$uxTaskNumber:
00000024 00000000                		.lword	00000000H
00000028                         __$xNextTaskUnblockTime:
00000028 FFFFFFFF                		.lword	0FFFFFFFFH
0000002C                         __$uxSchedulerSuspended:
0000002C 00000000                		.lword	00000000H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         __$pxReadyTasksLists:
00000000(000000A0H)              		.blkl	40
000000A0                         __$xDelayedTaskList1:
000000A0(00000014H)              		.blkl	5
000000B4                         __$xDelayedTaskList2:
000000B4(00000014H)              		.blkl	5
000000C8                         __$pxDelayedTaskList:
000000C8(00000004H)              		.blkl	1
000000CC                         __$pxOverflowDelayedTaskList:
000000CC(00000004H)              		.blkl	1
000000D0                         __$xPendingReadyList:
000000D0(00000014H)              		.blkl	5
000000E4                         __$xTasksWaitingTermination:
000000E4(00000014H)              		.blkl	5
000000F8                         __$xSuspendedTaskList:
000000F8(00000014H)              		.blkl	5
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     08550   LINES

Section List

Attr         Size               Name
CODE     0000006736(00001A50H)  P
ROMDATA  0000000005(00000005H)  L
ROMDATA  0000000048(00000030H)  D
DATA     0000000268(0000010CH)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx4DB7\$ccrx\tasks.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\tasks.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\FreeRTOS\Source\tasks.obj
