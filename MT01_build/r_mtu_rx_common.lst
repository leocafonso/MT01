* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Mon Mar 20 17:54:37 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  20-Mar-2017 17:54:37
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=r_mtu_rx_common.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=r_mtu_rx_common.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;r_mtu_rx_common.c
                                 
                                 		.glb	_g_mtu_clock_divisors
                                 		.glb	_g_num_channels_in_use
                                 		.glb	_g_mtu_channel_mode
                                 		.glb	_g_mtu_channel_clr_src
                                 		.glb	_g_mtu_channel_repeats
                                 		.glb	_g_mtu_tgr_callbacks
                                 		.glb	_g_mtu_tgi_icu_en_flags
                                 		.glb	_g_mtu_cb_data
                                 		.glb	_g_chnl_clk_divs
                                 		.glb	_g_chnl_ext_clks
                                 		.glb	_g_chnl_clear_src
                                 		.glb	_g_mtu_tgi_icu_en_masks
                                 		.glb	_g_mtu_tstr_bits
                                 		.glb	_g_mtu_group_bits
                                 		.glb	_p_callback_mtu0
                                 		.glb	_mtu0_tmr_settings
                                 		.glb	_g_mtu0_handle
                                 		.glb	_g_mtu_handles
                                 		.glb	_R_MTU_GetVersion
                                 		.glb	_R_MTU_Control
                                 		.glb	_R_BSP_HardwareLock
                                 		.glb	_R_BSP_HardwareUnlock
                                 		.glb	_R_MTU_Close
                                 		.glb	_mtu_calc_clock_divisor
                                 		.glb	_mtu_calc_tgr_ticks
                                 		.glb	_mtu_channel_clear
                                 		.glb	_power_on_off
                                 		.glb	_mtu_interrupts_clear
                                 		.glb	_mtu_interrupts_check
                                 		.glb	_mtu_interrupts_enable
                                 		.glb	_mtu_interrupts_disable
                                 		.glb	_mtu_interrupts_group_enable
                                 		.glb	_mtu_interrupts_group_disable
                                 		.glb	_mtu_check_group
                                 		.glb	_R_BSP_RegisterProtectDisable
                                 		.glb	_R_BSP_RegisterProtectEnable
                                 		.glb	_mtu_tgia0_isr
                                 		.glb	_mtu_tgib0_isr
                                 		.glb	_mtu_tgic0_isr
                                 		.glb	_mtu_tgid0_isr
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _R_MTU_GetVersion:
                                 		.STACK	_R_MTU_GetVersion=12
                                 ;       1 /***********************************************************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No
                                 ;       4 * other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
                                 ;       5 * applicable laws, including copyright laws.
                                 ;       6 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
                                 ;       7 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY,
                                 ;       8 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM
                                 ;       9 * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
                                 ;      10 * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS
                                 ;      11 * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      12 * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of
                                 ;      13 * this software. By using this software, you agree to the additional terms and conditions found by accessing the
                                 ;      14 * following link:
                                 ;      15 * http://www.renesas.com/disclaimer
                                 ;      16 *
                                 ;      17 * Copyright (C) 2014 Renesas Electronics Corporation. All rights reserved.
                                 ;      18 ***********************************************************************************************************************/
                                 ;      19 /***********************************************************************************************************************
                                 ;      20 * File Name    : r_mtu_rx_common.c
                                 ;      21 * Device(s)    : RX Family
                                 ;      22 * Tool-Chain   : Renesas RX Standard Toolchain 1.02+
                                 ;      23 * OS           : None
                                 ;      24 * H/W Platform :
                                 ;      25 * Description  : Shared routines used by the the FIT MTU2a modules on RX devices.
                                 ;      26 ************************************************************************************************************************
                                 ;      27 * History : DD.MM.YYYY Version Description
                                 ;      28 *         : 30.09.2014  1.00   First Release
                                 ;      29 ***********************************************************************************************************************/
                                 ;      30 /***********************************************************************************************************************
                                 ;      31 Includes   <System Includes> , "Project Includes"
                                 ;      32 ***********************************************************************************************************************/
                                 ;      33 #include "platform.h"
                                 ;      34 #include "r_mtu_rx_if.h"
                                 ;      35 /* Internal definitions. */
                                 ;      36 #include "r_mtu_rx_private.h"
                                 ;      37 
                                 ;      38 /***********************************************************************************************************************
                                 ;      39 Typedef definitions
                                 ;      40 ***********************************************************************************************************************/
                                 ;      41 
                                 ;      42 /***********************************************************************************************************************
                                 ;      43 Macro definitions
                                 ;      44 ***********************************************************************************************************************/
                                 ;      45 
                                 ;      46 /***********************************************************************************************************************
                                 ;      47 Private global variables
                                 ;      48 ***********************************************************************************************************************/
                                 ;      49 /* Possible input clock divisors for internal clocking. Not all channels support all divisors. */
                                 ;      50 const uint32_t g_mtu_clock_divisors[MTU_NUM_CLK_DIVISORS] = { 1, 4, 16, 64, 256, 1024 };
                                 ;      51 volatile uint8_t g_num_channels_in_use = 0;  // Flag to tell whether any channel of the mtu is currently in use.
                                 ;      52 uint8_t g_mtu_channel_mode[MTU_CHANNEL_MAX] = {MTU_MODE_CLOSED}; // Channel mode or is available (0).
                                 ;      53 uint8_t g_mtu_channel_clr_src[MTU_CHANNEL_MAX] = {0}; // The selected timer clearing source.
                                 ;      54 uint8_t g_mtu_channel_repeats[MTU_CHANNEL_MAX] = {0}; // Flags for do repeat or just once.
                                 ;      55 uint8_t g_mtu_tgr_callbacks[MTU_CHANNEL_MAX][MTU_NUM_TIMERS]; // Flags for do callback or not
                                 ;      56 uint8_t g_mtu_tgi_icu_en_flags[MTU_CHANNEL_MAX][MTU_NUM_TGIS] = {0};
                                 ;      57 mtu_callback_data_t  g_mtu_cb_data[MTU_CHANNEL_MAX]; // Allocate callback data storage for all channels.
                                 ;      58 
                                 ;      59 /* Create table of available internal clock divisors for each channel, and their setting bits. */
                                 ;      60 const uint8_t g_chnl_clk_divs[MTU_CHANNEL_MAX][MTU_NUM_CLK_DIVISORS] =
                                 ;      61 {
                                 ;      62     MTU0_PCLK_DIVS,
                                 ;      63     MTU1_PCLK_DIVS,
                                 ;      64     MTU2_PCLK_DIVS,
                                 ;      65 #ifndef BSP_MCU_RX110
                                 ;      66     MTU3_PCLK_DIVS,
                                 ;      67     MTU4_PCLK_DIVS
                                 ;      68 #endif
                                 ;      69 };
                                 ;      70 
                                 ;      71 /* Create table of available external clock source for each channel, and their setting bits. */
                                 ;      72 const uint8_t g_chnl_ext_clks[MTU_CHANNEL_MAX][MTU_NUM_EXT_CLK_SRCS] =
                                 ;      73 {
                                 ;      74     MTU0_EXT_CLKS,
                                 ;      75     MTU1_EXT_CLKS,
                                 ;      76     MTU2_EXT_CLKS,
                                 ;      77 #ifndef BSP_MCU_RX110
                                 ;      78     MTU3_EXT_CLKS,
                                 ;      79     MTU4_EXT_CLKS
                                 ;      80 #endif
                                 ;      81 };
                                 ;      82 
                                 ;      83 /* Create table of available counter clearing sources for each channel, and their setting bits. */
                                 ;      84 const uint8_t g_chnl_clear_src[MTU_CHANNEL_MAX][MTU_NUM_CLR_SRCS] =
                                 ;      85 {
                                 ;      86     MTU0_CLR_SRC,
                                 ;      87     MTU1_CLR_SRC,
                                 ;      88     MTU2_CLR_SRC,
                                 ;      89 #ifndef BSP_MCU_RX110
                                 ;      90     MTU3_CLR_SRC,
                                 ;      91     MTU4_CLR_SRC
                                 ;      92 #endif
                                 ;      93 };
                                 ;      94 
                                 ;      95 /* Create table of TGI ICU interrupt enable bit masks for each channel. */
                                 ;      96 const uint8_t g_mtu_tgi_icu_en_masks[MTU_CHANNEL_MAX][MTU_NUM_TGIS] =
                                 ;      97 {
                                 ;      98     MTU0_TGI_EN,
                                 ;      99     MTU1_TGI_EN,
                                 ;     100     MTU2_TGI_EN,
                                 ;     101 #ifndef BSP_MCU_RX110
                                 ;     102     MTU3_TGI_EN,
                                 ;     103     MTU4_TGI_EN
                                 ;     104 #endif
                                 ;     105 };
                                 ;     106 
                                 ;     107 /* Create table of channel start register bits for each channel. */
                                 ;     108 const uint8_t g_mtu_tstr_bits[] =
                                 ;     109 {
                                 ;     110     (uint8_t)MTU_TSTR_CH0,
                                 ;     111     (uint8_t)MTU_TSTR_CH1,
                                 ;     112     (uint8_t)MTU_TSTR_CH2,
                                 ;     113 #ifndef BSP_MCU_RX110
                                 ;     114     (uint8_t)MTU_TSTR_CH3,
                                 ;     115     (uint8_t)MTU_TSTR_CH4
                                 ;     116 #endif
                                 ;     117 };
                                 ;     118 
                                 ;     119 /* Create table of channel start register bits for each channel. */
                                 ;     120 const uint8_t g_mtu_group_bits[] =
                                 ;     121 {
                                 ;     122      (uint8_t)MTU_GRP_CH0,
                                 ;     123      (uint8_t)MTU_GRP_CH1,
                                 ;     124      (uint8_t)MTU_GRP_CH2,
                                 ;     125 #ifndef BSP_MCU_RX110
                                 ;     126      (uint8_t)MTU_GRP_CH3,
                                 ;     127      (uint8_t)MTU_GRP_CH4,
                                 ;     128 #endif
                                 ;     129 };
                                 ;     130 
                                 ;     131 /* Static control structures for each channel */
                                 ;     132 #if MTU_CFG_USE_CH0 == 1
                                 ;     133 mtu_callback p_callback_mtu0;
                                 ;     134 mtu_timer_chnl_settings_t mtu0_tmr_settings;
                                 ;     135 const mtu_config_block_t g_mtu0_handle =
                                 ;     136 {
                                 ;     137     &p_callback_mtu0,       // pointer to callback function pointer.
                                 ;     138     &mtu0_tmr_settings,     // location of variable timer settings struct.
                                 ;     139     MTU0_REGS,              // Pointers to registers for this channel
                                 ;     140     0,                      // MTU channel number.
                                 ;     141     MTU_IR_PRIORITY_CHAN0,  // Interrupt priority level.
                                 ;     142     MTU_CFG_FILT_CHAN0      // Input capture filter clock setting.
                                 ;     143 };
                                 ;     144 #endif
                                 ;     145 
                                 ;     146 #if MTU_CFG_USE_CH1 == 1
                                 ;     147 mtu_callback p_callback_mtu1;
                                 ;     148 mtu_timer_chnl_settings_t mtu1_tmr_settings;
                                 ;     149 const mtu_config_block_t g_mtu1_handle =
                                 ;     150 {
                                 ;     151     &p_callback_mtu1,       // pointer to callback function pointer.
                                 ;     152     &mtu1_tmr_settings,     // location of variable timer settings struct.
                                 ;     153     MTU1_REGS,              // Pointers to registers for this channel
                                 ;     154     1,                      // MTU channel number.
                                 ;     155     MTU_IR_PRIORITY_CHAN1,  // Interrupt priority level.
                                 ;     156     MTU_CFG_FILT_CHAN1      // Input capture filter clock setting.
                                 ;     157 };
                                 ;     158 #endif
                                 ;     159 
                                 ;     160 #if MTU_CFG_USE_CH2 == 1
                                 ;     161 mtu_callback p_callback_mtu2;
                                 ;     162 mtu_timer_chnl_settings_t mtu2_tmr_settings;
                                 ;     163 const mtu_config_block_t g_mtu2_handle =
                                 ;     164 {
                                 ;     165     &p_callback_mtu2,       // pointer to callback function pointer.
                                 ;     166     &mtu2_tmr_settings,     // location of variable timer settings struct.
                                 ;     167     MTU2_REGS,              // Pointers to registers for this channel
                                 ;     168     2,                      // MTU channel number.
                                 ;     169     MTU_IR_PRIORITY_CHAN2,  // Interrupt priority level.
                                 ;     170     MTU_CFG_FILT_CHAN2      // Input capture filter clock setting.
                                 ;     171 };
                                 ;     172 #endif
                                 ;     173 
                                 ;     174 #if MTU_CFG_USE_CH3 == 1
                                 ;     175 mtu_callback p_callback_mtu3;
                                 ;     176 mtu_timer_chnl_settings_t mtu3_tmr_settings;
                                 ;     177 const mtu_config_block_t g_mtu3_handle =
                                 ;     178 {
                                 ;     179     &p_callback_mtu3,       // pointer to callback function pointer.
                                 ;     180     &mtu3_tmr_settings,     // location of variable timer settings struct.
                                 ;     181     MTU3_REGS,              // Pointers to registers for this channel
                                 ;     182     3,                      // MTU channel number.
                                 ;     183     MTU_IR_PRIORITY_CHAN3,  // Interrupt priority level.
                                 ;     184     MTU_CFG_FILT_CHAN3      // Input capture filter clock setting.
                                 ;     185 };
                                 ;     186 #endif
                                 ;     187 
                                 ;     188 #if MTU_CFG_USE_CH4 == 1
                                 ;     189 mtu_callback p_callback_mtu4;
                                 ;     190 mtu_timer_chnl_settings_t mtu4_tmr_settings;
                                 ;     191 const mtu_config_block_t g_mtu4_handle =
                                 ;     192 {
                                 ;     193     &p_callback_mtu4,       // pointer to callback function pointer.
                                 ;     194     &mtu4_tmr_settings,     // location of variable timer settings struct.
                                 ;     195     MTU4_REGS,              // Pointers to registers for this channel
                                 ;     196     4,                      // MTU channel number.
                                 ;     197     MTU_IR_PRIORITY_CHAN4,  // Interrupt priority level.
                                 ;     198     MTU_CFG_FILT_CHAN4      // Input capture filter clock setting.
                                 ;     199 };
                                 ;     200 #endif
                                 ;     201 
                                 ;     202 const mtu_handle_t g_mtu_handles[] =
                                 ;     203 {
                                 ;     204     #if MTU_CFG_USE_CH0 == 1
                                 ;     205     (mtu_handle_t) &g_mtu0_handle,
                                 ;     206     #else
                                 ;     207     NULL,
                                 ;     208     #endif
                                 ;     209     #if MTU_CFG_USE_CH1 == 1
                                 ;     210     (mtu_handle_t) &g_mtu1_handle,
                                 ;     211     #else
                                 ;     212     NULL,
                                 ;     213     #endif
                                 ;     214     #if MTU_CFG_USE_CH2 == 1
                                 ;     215     (mtu_handle_t) &g_mtu2_handle,
                                 ;     216     #else
                                 ;     217     NULL,
                                 ;     218     #endif
                                 ;     219     #if MTU_CFG_USE_CH3 == 1
                                 ;     220     (mtu_handle_t) &g_mtu3_handle,
                                 ;     221     #else
                                 ;     222     NULL,
                                 ;     223     #endif
                                 ;     224     #if MTU_CFG_USE_CH4 == 1
                                 ;     225     (mtu_handle_t) &g_mtu4_handle,
                                 ;     226     #else
                                 ;     227     NULL,
                                 ;     228     #endif
                                 ;     229 
                                 ;     230 };
                                 ;     231 
                                 ;     232 /***********************************************************************************************************************
                                 ;     233 Private local function declarations
                                 ;     234 ***********************************************************************************************************************/
                                 ;     235 void mtu_interrupts_enable(uint8_t channel);
                                 ;     236 void mtu_interrupts_disable(uint8_t channel);
                                 ;     237 void mtu_interrupts_clear(uint8_t channel);
                                 ;     238 uint8_t mtu_interrupts_check(uint8_t channel);
                                 ;     239 void mtu_interrupts_group_enable(uint8_t group);
                                 ;     240 void mtu_interrupts_group_disable(uint8_t group);
                                 ;     241 bool mtu_check_group(uint8_t group);
                                 ;     242 void power_on_off (uint8_t on_or_off);
                                 ;     243 bool mtu_calc_clock_divisor(uint8_t chan, uint8_t *div_idx, uint32_t frq_target);
                                 ;     244 uint16_t mtu_calc_tgr_ticks(uint16_t pclk_div, uint32_t frq_target );
                                 ;     245 static void mtu_isr_common(mtu_channel_t channel, mtu_timer_num_t tgr);
                                 ;     246 
                                 ;     247 
                                 ;     248 /***********************************************************************************************************************
                                 ;     249 * Function Name: R_MTU_GetVersion
                                 ;     250 * Description  : Returns the version of this module.
                                 ;     251 *                The version number is encoded where the top 2 bytes are the major version number and the bottom 2 bytes
                                 ;     252 *                are the minor version number. For example, Rev 4.25 would be 0x00040019.
                                 ;     253 *                Version number is defined in "r_mtu_timer_rx_private.h"
                                 ;     254 * Arguments    : none
                                 ;     255 * Return Value : Version Number
                                 ;     256 *  NOTE: This function is inlined using #pragma inline directive.
                                 ;     257 ***********************************************************************************************************************/
                                 ;     258 #pragma inline(R_MTU_GetVersion)
                                 ;     259 uint32_t R_MTU_GetVersion(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",259
00000000 6080                    		SUB #08H, R0
                                 ;     260 {
                                 ;     261     uint32_t version_number = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",261
00000002 F80600                  		MOV.L #00000000H, [R0]
00000005                         L11:	; entry.split
                                 ;     262     /* Bring in major version number. */
                                 ;     263     version_number = ((uint16_t)MTU_RX_VERSION_MAJOR) << 16;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",263
00000005 F80E000001              		MOV.L #00010000H, [R0]
0000000A                         L12:	; entry.split1
0000000A                         L13:	; entry.split2
                                 ;     264     /* Bring in minor version number. */
                                 ;     265     version_number |= (uint16_t)MTU_RX_VERSION_MINOR;
                                 ;     266     return version_number;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",266
0000000A EC01                    		MOV.L [R0], R1
0000000C A009                    		MOV.L R1, 04H[R0]
0000000E                         L14:	; entry.split3
                                 ;     267 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",267
0000000E 6702                    		RTSD #08H
00000010                         _R_MTU_Control:
                                 		.STACK	_R_MTU_Control=60
                                 ;     268 
                                 ;     269 /***********************************************************************************************************************
                                 ;     270 * Function Name: R_MTU_Control
                                 ;     271 * Description  : This function is responsible for handling special hardware or software operations for the MTU channel.
                                 ;     272 * Arguments    : channel-
                                 ;     273 *                   The channel number
                                 ;     274 *                cmd
                                 ;     275 *                   Enumerated command code
                                 ;     276 *                pcmd_data
                                 ;     277 *                   Pointer to the command-data structure parameter of type void that is used to reference the location
                                 ;     278 *                   of any data specific to the command that is needed for its completion.
                                 ;     279 * Return Value : MTU_SUCCESS-
                                 ;     280 *                   Command successfully completed.
                                 ;     281 *                MTU_TIMERS_ERR_CH_NOT_OPEN-
                                 ;     282 *                   The channel has not been opened.  Perform R_MTU_Open() first
                                 ;     283 *                MTU_TIMERS_ERR_BAD_CHAN-
                                 ;     284 *                   Channel number is invalid for part
                                 ;     285 *                MTU_TIMERS_ERR_UNKNOWN_CMD-
                                 ;     286 *                   Control command is not recognized.
                                 ;     287 *                MTU_TIMERS_ERR_NULL_PTR-
                                 ;     288 *                   pcmd_data  pointer or handle is NULL
                                 ;     289 *                MTU_TIMERS_ERR_INVALID_ARG-
                                 ;     290 *                   An element of the pcmd_data structure contains an invalid value.
                                 ;     291 *                MTU_TIMERS_ERR_LOCK-
                                 ;     292 *                      The lock could not be acquired. The channel is busy.
                                 ;     293 ***********************************************************************************************************************/
                                 ;     294 mtu_err_t  R_MTU_Control (mtu_channel_t channel,
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",294
00000010 7EA6                    		PUSH.L R6
00000012 7100CC                  		ADD #0FFFFFFCCH, R0
00000015 A301                    		MOV.L R1, 30H[R0]
00000017 A28A                    		MOV.L R2, 2CH[R0]
00000019 A283                    		MOV.L R3, 28H[R0]
                                 ;     295                           mtu_cmd_t     cmd,
                                 ;     296                           void          *pcmd_data)
                                 ;     297 {
                                 ;     298     mtu_capture_status_t * p_capture_data;
                                 ;     299     mtu_timer_status_t   * p_timer_data;
                                 ;     300     mtu_group_t    * p_group_data;
                                 ;     301     mtu_capture_set_edge_t  * p_cap_edge_data;
                                 ;     302     uint8_t temp_byte;
                                 ;     303 
                                 ;     304     /* Command function data structure definitions. One for each command in mtu_timer_cmd_t. */
                                 ;     305     #if MTU_CFG_REQUIRE_LOCK == 1
                                 ;     306     bool        lock_result = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",306
0000001B 3C8B00                  		MOV.B #00H, 1BH[R0]
0000001E                         L16:	; entry.split
                                 ;     307     #endif
                                 ;     308 
                                 ;     309     mtu_handle_t  my_handle;
                                 ;     310     mtu_timer_chnl_settings_t *pconfig; // Store a pointer to the user's config structure.
                                 ;     311 
                                 ;     312     #if MTU_CFG_PARAM_CHECKING_ENABLE == 1
                                 ;     313     if (MTU_CHANNEL_MAX <= channel)   // First check for channel number out of range
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",313
0000001E AB01                    		MOV.L 30H[R0], R1
00000020 6151                    		CMP #05H, R1
00000022 29rr                    		BLT L18
00000024                         L17:	; bb12
                                 ;     314     {
                                 ;     315         return MTU_ERR_BAD_CHAN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",315
00000024 3E0101                  		MOV.L #00000001H, 04H[R0]
00000027 38rrrr               W  		BRA L169
0000002A                         L18:	; bb17
                                 ;     316     }
                                 ;     317 
                                 ;     318     switch(cmd) /* Check for valid command and data. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",318
0000002A AA89                    		MOV.L 2CH[R0], R1
0000002C 6141                    		CMP #04H, R1
0000002E 23rr                    		BLTU L29
00000030                         L19:	; bb17
00000030 711EFC                  		ADD #0FFFFFFFCH, R1, R14
00000033 612E                    		CMP #02H, R14
00000035 23rr                    		BLTU L22
00000037                         L20:	; bb17
00000037 6161                    		CMP #06H, R1
00000039 20rr                    		BEQ L29
0000003B                         L21:	; bb17
0000003B 6171                    		CMP #07H, R1
0000003D 21rr                    		BNE L28
0000003F                         L22:	; bb21
                                 ;     319     {
                                 ;     320         case MTU_CMD_START:
                                 ;     321         case MTU_CMD_STOP:
                                 ;     322         case MTU_CMD_SAFE_STOP:
                                 ;     323         case MTU_CMD_RESTART:
                                 ;     324         case MTU_CMD_CLEAR_EVENTS:
                                 ;     325         break;
                                 ;     326 
                                 ;     327         case MTU_CMD_GET_STATUS:
                                 ;     328         case MTU_CMD_SYNCHRONIZE:
                                 ;     329         case MTU_CMD_SET_CAPT_EDGE:
                                 ;     330             if ((NULL == pcmd_data) || (FIT_NO_PTR == pcmd_data))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",330
0000003F AA81                    		MOV.L 28H[R0], R1
00000041 6101                    		CMP #00H, R1
00000043 20rr                    		BEQ L25
00000045 08                   S  		BRA L24
00000046                         L23:	; bb22
                                 ;     331             {
                                 ;     332                 return MTU_ERR_NULL_PTR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",332
00000046 3E0107                  		MOV.L #00000007H, 04H[R0]
00000049 38rrrr               W  		BRA L169
0000004C                         L24:	; bb27
0000004C AA81                    		MOV.L 28H[R0], R1
0000004E 740100000010            		CMP #10000000H, R1
00000054 18                   S  		BNE L26
00000055                         L25:	; bb31
00000055 F80601                  		MOV.L #00000001H, [R0]
00000058 08                   S  		BRA L27
00000059                         L26:	; bb32
00000059 F80600                  		MOV.L #00000000H, [R0]
0000005C                         L27:	; bb33
0000005C EC01                    		MOV.L [R0], R1
0000005E 6101                    		CMP #00H, R1
00000060 21rr                    		BNE L23
00000062 08                   S  		BRA L29
00000063                         L28:	; bb39
                                 ;     333             }
                                 ;     334         break;
                                 ;     335 
                                 ;     336         default:
                                 ;     337         {
                                 ;     338            /* Error, command not recognized. */
                                 ;     339            return MTU_ERR_UNKNOWN_CMD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",339
00000063 3E0104                  		MOV.L #00000004H, 04H[R0]
00000066 38rrrr               W  		BRA L169
00000069                         L29:	; bb42
                                 ;     340         }
                                 ;     341     }
                                 ;     342 
                                 ;     343     if (!g_mtu_channel_mode[channel])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",343
00000069 AB01                    		MOV.L 30H[R0], R1
0000006B FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_mode, R14
00000071 FECE1E                  		MOVU.B [R14,R1], R14
00000074 610E                    		CMP #00H, R14
00000076 18                   S  		BNE L31
00000077 2Err                 B  		BRA L32
00000079                         L30:	; bb43
                                 ;     344     {
                                 ;     345         return MTU_ERR_CH_NOT_OPENED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",345
00000079 3E0102                  		MOV.L #00000002H, 04H[R0]
0000007C 38rrrr               W  		BRA L169
0000007F                         L31:	; bb51
0000007F F80600                  		MOV.L #00000000H, [R0]
00000082 08                   S  		BRA L33
00000083                         L32:	; bb52
00000083 F80601                  		MOV.L #00000001H, [R0]
00000086                         L33:	; bb53
00000086 EC01                    		MOV.L [R0], R1
00000088 6101                    		CMP #00H, R1
0000008A 21rr                    		BNE L30
0000008C                         L34:	; bb57
                                 ;     346     }
                                 ;     347     #endif
                                 ;     348 
                                 ;     349     #if MTU_CFG_REQUIRE_LOCK == 1
                                 ;     350     /* Attempt to acquire lock for this MTU channel. Prevents reentrancy conflict. */
                                 ;     351     lock_result = R_BSP_HardwareLock((mcu_lock_t)(BSP_LOCK_MTU0 + channel));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",351
0000008C AB01                    		MOV.L 30H[R0], R1
0000008E 71112E                  		ADD #2EH, R1
00000091 05rrrrrr             A  		BSR _R_BSP_HardwareLock
00000095 8689                    		MOV.B R1, 1BH[R0]
00000097                         L35:	; bb57.split
                                 ;     352 
                                 ;     353     if(false == lock_result)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",353
00000097 B689                    		MOVU.B 1BH[R0], R1
00000099 6101                    		CMP #00H, R1
0000009B 18                   S  		BNE L37
0000009C                         L36:	; bb62
                                 ;     354     {
                                 ;     355         return MTU_ERR_LOCK; /* The control function is currently locked. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",355
0000009C 3E0108                  		MOV.L #00000008H, 04H[R0]
0000009F 38rrrr               W  		BRA L169
000000A2                         L37:	; bb69
                                 ;     356     }
                                 ;     357     #endif
                                 ;     358 
                                 ;     359     my_handle = g_mtu_handles[channel];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",359
000000A2 FBE2rrrrrrrr            		MOV.L #_g_mtu_handles, R14
000000A8 AB01                    		MOV.L 30H[R0], R1
000000AA FE61E1                  		MOV.L [R1,R14], R1
000000AD A189                    		MOV.L R1, 1CH[R0]
000000AF                         L38:	; bb69.split
                                 ;     360 
                                 ;     361     pconfig = my_handle->p_mtu_chnl_tmr_settings;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",361
000000AF A989                    		MOV.L 1CH[R0], R1
000000B1 E5100108                		MOV.L 04H[R1], 20H[R0]
000000B5                         L39:	; bb69.split1
                                 ;     362 
                                 ;     363     switch(cmd)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",363
000000B5 AA89                    		MOV.L 2CH[R0], R1
000000B7 6171                    		CMP #07H, R1
000000B9 25rr                  * 		BGTU L167
         38rrrr                  
000000BE                         L40:	; bb69.split1
000000BE FBE2rrrrrrrr            		MOV.L #L170, R14
000000C4 FE51EE                  		.swmov L170, R1, R14, R14
000000C7                         L171:
000000C7 7F4E                    		BRA.L R14
000000C9                         L41:	; bb78
                                 ;     364     {
                                 ;     365         case MTU_CMD_START:       // Activate clocking
                                 ;     366         {
                                 ;     367             if ((NULL != pcmd_data) && (FIT_NO_PTR != pcmd_data)) // A channel group specifier was provided
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",367
000000C9 AA81                    		MOV.L 28H[R0], R1
000000CB 6101                    		CMP #00H, R1
000000CD 21rr                    		BNE L58
000000CF 38rrrr               W  		BRA L60
000000D2                         L42:	; bb79
                                 ;     368             {
                                 ;     369                 p_group_data =  (mtu_group_t *)pcmd_data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",369
000000D2 E5000A04                		MOV.L 28H[R0], 10H[R0]
000000D6                         L43:	; bb79.split
                                 ;     370 
                                 ;     371                 temp_byte = (uint8_t) *p_group_data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",371
000000D6 A901                    		MOV.L 10H[R0], R1
000000D8 EC11                    		MOV.L [R1], R1
000000DA 8681                    		MOV.B R1, 1AH[R0]
000000DC                         L44:	; bb79.split2
                                 ;     372 
                                 ;     373                 if(!mtu_check_group(temp_byte) || (temp_byte & ~MTU_TSTR_MASK)) // Error in group parameter.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",373
000000DC B681                    		MOVU.B 1AH[R0], R1
000000DE 39rrrr               W  		BSR _mtu_check_group
000000E1 6101                    		CMP #00H, R1
000000E3 21rr                    		BNE L47
000000E5 2Err                 B  		BRA L48
000000E7                         L45:	; bb86
                                 ;     374                 {
                                 ;     375                     #if MTU_CFG_REQUIRE_LOCK == 1
                                 ;     376                     R_BSP_HardwareUnlock((mcu_lock_t)(BSP_LOCK_MTU0 + channel));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",376
000000E7 AB01                    		MOV.L 30H[R0], R1
000000E9 71112E                  		ADD #2EH, R1
000000EC 05rrrrrr             A  		BSR _R_BSP_HardwareUnlock
000000F0                         L46:	; bb86.split
                                 ;     377                     #endif
                                 ;     378                     return MTU_ERR_INVALID_ARG;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",378
000000F0 3E0105                  		MOV.L #00000005H, 04H[R0]
000000F3 38rrrr               W  		BRA L169
000000F6                         L47:	; bb96
000000F6 F80600                  		MOV.L #00000000H, [R0]
000000F9 08                   S  		BRA L49
000000FA                         L48:	; bb97
000000FA F80601                  		MOV.L #00000001H, [R0]
000000FD                         L49:	; bb98
000000FD EC01                    		MOV.L [R0], R1
000000FF 6101                    		CMP #00H, R1
00000101 18                   S  		BNE L51
00000102                         L50:	; bb101
00000102 754E38                  		MOV.L #00000038H, R14
00000105 FC310E1A                		TST 1AH[R0].UB, R14
00000109 10                   S  		BEQ L52
0000010A                         L51:	; bb107
0000010A F80601                  		MOV.L #00000001H, [R0]
0000010D 08                   S  		BRA L53
0000010E                         L52:	; bb108
0000010E F80600                  		MOV.L #00000000H, [R0]
00000111                         L53:	; bb109
00000111 EC01                    		MOV.L [R0], R1
00000113 6101                    		CMP #00H, R1
00000115 21rr                    		BNE L45
00000117                         L54:	; bb114
                                 ;     379                 }
                                 ;     380 
                                 ;     381                 mtu_interrupts_group_enable(temp_byte);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",381
00000117 B681                    		MOVU.B 1AH[R0], R1
00000119 39rrrr               W  		BSR _mtu_interrupts_group_enable
0000011C                         L55:	; bb114.split
                                 ;     382                 MTU.TSTR.BYTE = temp_byte;  //Set the start bits for the group.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",382
0000011C FBEE808608              		MOV.L #00088680H, R14
00000121 C10E1A                  		MOV.B 1AH[R0], [R14]
00000124 38rrrr               W  		BRA L167
00000127                         L56:	; bb117
                                 ;     383             }
                                 ;     384             else    // Just this channel.
                                 ;     385             {
                                 ;     386                 mtu_interrupts_enable(channel);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",386
00000127 590130                  		MOVU.B 30H[R0], R1
0000012A 39rrrr               W  		BSR _mtu_interrupts_enable
0000012D                         L57:	; bb117.split
                                 ;     387                 MTU.TSTR.BYTE |= g_mtu_tstr_bits[channel];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",387
0000012D AB01                    		MOV.L 30H[R0], R1
0000012F FBE2rrrrrrrr            		MOV.L #_g_mtu_tstr_bits, R14
00000135 FECE1E                  		MOVU.B [R14,R1], R14
00000138 FBFE808608              		MOV.L #00088680H, R15
0000013D 54FE                    		OR [R15].UB, R14
0000013F C3FE                    		MOV.B R14, [R15]
00000141 38rrrr               W  		BRA L167
00000144                         L58:	; bb131
00000144 AA81                    		MOV.L 28H[R0], R1
00000146 740100000010            		CMP #10000000H, R1
0000014C 10                   S  		BEQ L60
0000014D                         L59:	; bb135
0000014D F80601                  		MOV.L #00000001H, [R0]
00000150 08                   S  		BRA L61
00000151                         L60:	; bb136
00000151 F80600                  		MOV.L #00000000H, [R0]
00000154                         L61:	; bb137
00000154 EC01                    		MOV.L [R0], R1
00000156 6101                    		CMP #00H, R1
00000158 3Brrrr               W  		BNE L42
0000015B 2Err                 B  		BRA L56
0000015D                         L62:	; bb144
                                 ;     388             }
                                 ;     389         }
                                 ;     390         break;
                                 ;     391 
                                 ;     392         case MTU_CMD_STOP:       // Pause clocking
                                 ;     393         {
                                 ;     394             if ((NULL != pcmd_data) && (FIT_NO_PTR != pcmd_data)) // A channel group specifier was provided
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",394
0000015D AA81                    		MOV.L 28H[R0], R1
0000015F 6101                    		CMP #00H, R1
00000161 3Brrrr               W  		BNE L80
00000164 38rrrr               W  		BRA L82
00000167                         L63:	; bb145
                                 ;     395             {
                                 ;     396                 p_group_data =  (mtu_group_t *)pcmd_data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",396
00000167 E5000A04                		MOV.L 28H[R0], 10H[R0]
0000016B                         L64:	; bb145.split
                                 ;     397 
                                 ;     398                 temp_byte = (uint8_t) *p_group_data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",398
0000016B A901                    		MOV.L 10H[R0], R1
0000016D EC11                    		MOV.L [R1], R1
0000016F 8681                    		MOV.B R1, 1AH[R0]
00000171                         L65:	; bb145.split3
00000171 7541C7                  		MOV.L #000000C7H, R1
                                 ;     399                 temp_byte &= MTU_TSTR_MASK; // Protect reserved TSTR bits.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",399
00000174 51011A                  		AND 1AH[R0].UB, R1
00000177 8681                    		MOV.B R1, 1AH[R0]
00000179                         L66:	; bb145.split4
                                 ;     400 
                                 ;     401                 if(!mtu_check_group(temp_byte) || (temp_byte & ~MTU_TSTR_MASK)) // Error in group parameter.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",401
00000179 B681                    		MOVU.B 1AH[R0], R1
0000017B 39rrrr               W  		BSR _mtu_check_group
0000017E 6101                    		CMP #00H, R1
00000180 21rr                    		BNE L69
00000182 2Err                 B  		BRA L70
00000184                         L67:	; bb156
                                 ;     402                 {
                                 ;     403                     #if MTU_CFG_REQUIRE_LOCK == 1
                                 ;     404                     R_BSP_HardwareUnlock((mcu_lock_t)(BSP_LOCK_MTU0 + channel));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",404
00000184 AB01                    		MOV.L 30H[R0], R1
00000186 71112E                  		ADD #2EH, R1
00000189 05rrrrrr             A  		BSR _R_BSP_HardwareUnlock
0000018D                         L68:	; bb156.split
                                 ;     405                     #endif
                                 ;     406                     return MTU_ERR_INVALID_ARG;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",406
0000018D 3E0105                  		MOV.L #00000005H, 04H[R0]
00000190 38rrrr               W  		BRA L169
00000193                         L69:	; bb166
00000193 F80600                  		MOV.L #00000000H, [R0]
00000196 08                   S  		BRA L71
00000197                         L70:	; bb167
00000197 F80601                  		MOV.L #00000001H, [R0]
0000019A                         L71:	; bb168
0000019A EC01                    		MOV.L [R0], R1
0000019C 6101                    		CMP #00H, R1
0000019E 18                   S  		BNE L73
0000019F                         L72:	; bb171
0000019F 754E38                  		MOV.L #00000038H, R14
000001A2 FC310E1A                		TST 1AH[R0].UB, R14
000001A6 10                   S  		BEQ L74
000001A7                         L73:	; bb177
000001A7 F80601                  		MOV.L #00000001H, [R0]
000001AA 08                   S  		BRA L75
000001AB                         L74:	; bb178
000001AB F80600                  		MOV.L #00000000H, [R0]
000001AE                         L75:	; bb179
000001AE EC01                    		MOV.L [R0], R1
000001B0 6101                    		CMP #00H, R1
000001B2 21rr                    		BNE L67
000001B4                         L76:	; bb184
                                 ;     407                 }
                                 ;     408 
                                 ;     409                 mtu_interrupts_group_disable(temp_byte);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",409
000001B4 B681                    		MOVU.B 1AH[R0], R1
000001B6 39rrrr               W  		BSR _mtu_interrupts_group_disable
000001B9                         L77:	; bb184.split
                                 ;     410                 MTU.TSTR.BYTE &= (~temp_byte);  // clear the start bits for this group.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",410
000001B9 B681                    		MOVU.B 1AH[R0], R1
000001BB 7E01                    		NOT R1
000001BD FBEE808608              		MOV.L #00088680H, R14
000001C2 50E1                    		AND [R14].UB, R1
000001C4 C3E1                    		MOV.B R1, [R14]
000001C6 38rrrr               W  		BRA L167
000001C9                         L78:	; bb192
                                 ;     411             }
                                 ;     412             else    // Just this channel.
                                 ;     413             {
                                 ;     414                 mtu_interrupts_disable(channel);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",414
000001C9 590130                  		MOVU.B 30H[R0], R1
000001CC 39rrrr               W  		BSR _mtu_interrupts_disable
000001CF                         L79:	; bb192.split
                                 ;     415                 MTU.TSTR.BYTE &= (uint8_t)(~(g_mtu_tstr_bits[channel]));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",415
000001CF AB01                    		MOV.L 30H[R0], R1
000001D1 FBE2rrrrrrrr            		MOV.L #_g_mtu_tstr_bits, R14
000001D7 FECE1E                  		MOVU.B [R14,R1], R14
000001DA 7E0E                    		NOT R14
000001DC FBFE808608              		MOV.L #00088680H, R15
000001E1 50FE                    		AND [R15].UB, R14
000001E3 C3FE                    		MOV.B R14, [R15]
000001E5 38rrrr               W  		BRA L167
000001E8                         L80:	; bb208
000001E8 AA81                    		MOV.L 28H[R0], R1
000001EA 740100000010            		CMP #10000000H, R1
000001F0 10                   S  		BEQ L82
000001F1                         L81:	; bb212
000001F1 F80601                  		MOV.L #00000001H, [R0]
000001F4 08                   S  		BRA L83
000001F5                         L82:	; bb213
000001F5 F80600                  		MOV.L #00000000H, [R0]
000001F8                         L83:	; bb214
000001F8 EC01                    		MOV.L [R0], R1
000001FA 6101                    		CMP #00H, R1
000001FC 3Brrrr               W  		BNE L63
000001FF 2Err                 B  		BRA L78
00000201                         L84:	; bb220
                                 ;     416             }
                                 ;     417         }
                                 ;     418         break;
                                 ;     419 
                                 ;     420         case MTU_CMD_SAFE_STOP:   // Stop clocking and set outputs to safe state
                                 ;     421         {
                                 ;     422             // First stop the clocking.
                                 ;     423             MTU.TSTR.BYTE &= (uint8_t)(~(g_mtu_tstr_bits[channel]));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",423
00000201 AB01                    		MOV.L 30H[R0], R1
00000203 FBE2rrrrrrrr            		MOV.L #_g_mtu_tstr_bits, R14
00000209 FECE1E                  		MOVU.B [R14,R1], R14
0000020C 7E0E                    		NOT R14
0000020E FBFE808608              		MOV.L #00088680H, R15
00000213 50FE                    		AND [R15].UB, R14
00000215 C3FE                    		MOV.B R14, [R15]
00000217                         L85:	; bb220.split
                                 ;     424             // Now re-write the TIOR register to revert to 'initial' MTIOC output state.
                                 ;     425             if((0 != pconfig->timer_a.freq) && (MTU_ACTION_OUTPUT & pconfig->timer_a.actions.do_action))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",425
00000217 AA01                    		MOV.L 20H[R0], R1
00000219 A899                    		MOV.L 0CH[R1], R1
0000021B 6101                    		CMP #00H, R1
0000021D 21rr                    		BNE L87
0000021F 2Err                 B  		BRA L89
00000221                         L86:	; bb232
                                 ;     426             {
                                 ;     427                 *my_handle->regs.tiorh |= pconfig->timer_a.actions.output;  // Set bits in lower nibble
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",427
00000221 A989                    		MOV.L 1CH[R0], R1
00000223 A911                    		MOV.L 10H[R1], R1
00000225 AA02                    		MOV.L 20H[R0], R2
00000227 A92A                    		MOV.L 14H[R2], R2
00000229 5412                    		OR [R1].UB, R2
0000022B C312                    		MOV.B R2, [R1]
0000022D 2Err                 B  		BRA L91
0000022F                         L87:	; bb252
0000022F AA01                    		MOV.L 20H[R0], R1
00000231 A911                    		MOV.L 10H[R1], R1
00000233 7C01                    		BTST #00H, R1
00000235 10                   S  		BEQ L89
00000236                         L88:	; bb261
00000236 F80601                  		MOV.L #00000001H, [R0]
00000239 08                   S  		BRA L90
0000023A                         L89:	; bb262
0000023A F80600                  		MOV.L #00000000H, [R0]
0000023D                         L90:	; bb263
0000023D EC01                    		MOV.L [R0], R1
0000023F 6101                    		CMP #00H, R1
00000241 21rr                    		BNE L86
00000243                         L91:	; bb269
                                 ;     428             }
                                 ;     429             if((0 != pconfig->timer_b.freq) && (MTU_ACTION_OUTPUT & pconfig->timer_b.actions.do_action))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",429
00000243 AA01                    		MOV.L 20H[R0], R1
00000245 A991                    		MOV.L 18H[R1], R1
00000247 6101                    		CMP #00H, R1
00000249 21rr                    		BNE L93
0000024B 2Err                 B  		BRA L95
0000024D                         L92:	; bb270
                                 ;     430             {
                                 ;     431                 *my_handle->regs.tiorh |=  (pconfig->timer_b.actions.output << 4); // Move bits to upper nibble
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",431
0000024D AA01                    		MOV.L 20H[R0], R1
0000024F AA11                    		MOV.L 20H[R1], R1
00000251 6C41                    		SHLL #04H, R1
00000253 A98A                    		MOV.L 1CH[R0], R2
00000255 A922                    		MOV.L 10H[R2], R2
00000257 5421                    		OR [R2].UB, R1
00000259 C321                    		MOV.B R1, [R2]
0000025B 2Err                 B  		BRA L97
0000025D                         L93:	; bb291
0000025D AA01                    		MOV.L 20H[R0], R1
0000025F A999                    		MOV.L 1CH[R1], R1
00000261 7C01                    		BTST #00H, R1
00000263 10                   S  		BEQ L95
00000264                         L94:	; bb300
00000264 F80601                  		MOV.L #00000001H, [R0]
00000267 08                   S  		BRA L96
00000268                         L95:	; bb301
00000268 F80600                  		MOV.L #00000000H, [R0]
0000026B                         L96:	; bb302
0000026B EC01                    		MOV.L [R0], R1
0000026D 6101                    		CMP #00H, R1
0000026F 21rr                    		BNE L92
00000271                         L97:	; bb308
                                 ;     432             }
                                 ;     433             if((0 != pconfig->timer_c.freq) && (MTU_ACTION_OUTPUT & pconfig->timer_c.actions.do_action))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",433
00000271 AA01                    		MOV.L 20H[R0], R1
00000273 AA19                    		MOV.L 24H[R1], R1
00000275 6101                    		CMP #00H, R1
00000277 21rr                    		BNE L99
00000279 2Err                 B  		BRA L101
0000027B                         L98:	; bb309
                                 ;     434             {
                                 ;     435                 *my_handle->regs.tiorl |= pconfig->timer_c.actions.output;  // Set bits in lower nibble
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",435
0000027B A989                    		MOV.L 1CH[R0], R1
0000027D A919                    		MOV.L 14H[R1], R1
0000027F AA02                    		MOV.L 20H[R0], R2
00000281 AAAA                    		MOV.L 2CH[R2], R2
00000283 5412                    		OR [R1].UB, R2
00000285 C312                    		MOV.B R2, [R1]
00000287 2Err                 B  		BRA L103
00000289                         L99:	; bb329
00000289 AA01                    		MOV.L 20H[R0], R1
0000028B AA91                    		MOV.L 28H[R1], R1
0000028D 7C01                    		BTST #00H, R1
0000028F 10                   S  		BEQ L101
00000290                         L100:	; bb338
00000290 F80601                  		MOV.L #00000001H, [R0]
00000293 08                   S  		BRA L102
00000294                         L101:	; bb339
00000294 F80600                  		MOV.L #00000000H, [R0]
00000297                         L102:	; bb340
00000297 EC01                    		MOV.L [R0], R1
00000299 6101                    		CMP #00H, R1
0000029B 21rr                    		BNE L98
0000029D                         L103:	; bb346
                                 ;     436             }
                                 ;     437             if((0 != pconfig->timer_d.freq) && (MTU_ACTION_OUTPUT & pconfig->timer_d.actions.do_action))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",437
0000029D AA01                    		MOV.L 20H[R0], R1
0000029F AB11                    		MOV.L 30H[R1], R1
000002A1 6101                    		CMP #00H, R1
000002A3 21rr                    		BNE L105
000002A5 2Err                 B  		BRA L107
000002A7                         L104:	; bb347
                                 ;     438             {
                                 ;     439                 *my_handle->regs.tiorl |=  (pconfig->timer_d.actions.output << 4); // Move bits to upper nibble
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",439
000002A7 AA01                    		MOV.L 20H[R0], R1
000002A9 AB91                    		MOV.L 38H[R1], R1
000002AB 6C41                    		SHLL #04H, R1
000002AD A98A                    		MOV.L 1CH[R0], R2
000002AF A92A                    		MOV.L 14H[R2], R2
000002B1 5421                    		OR [R2].UB, R1
000002B3 C321                    		MOV.B R1, [R2]
000002B5 38rrrr               W  		BRA L167
000002B8                         L105:	; bb368
000002B8 AA01                    		MOV.L 20H[R0], R1
000002BA AB19                    		MOV.L 34H[R1], R1
000002BC 7C01                    		BTST #00H, R1
000002BE 10                   S  		BEQ L107
000002BF                         L106:	; bb377
000002BF F80601                  		MOV.L #00000001H, [R0]
000002C2 08                   S  		BRA L108
000002C3                         L107:	; bb378
000002C3 F80600                  		MOV.L #00000000H, [R0]
000002C6                         L108:	; bb379
000002C6 EC01                    		MOV.L [R0], R1
000002C8 6101                    		CMP #00H, R1
000002CA 21rr                    		BNE L104
000002CC 38rrrr               W  		BRA L167
000002CF                         L109:	; bb385
                                 ;     440             }
                                 ;     441 
                                 ;     442         }
                                 ;     443         break;
                                 ;     444 
                                 ;     445         case MTU_CMD_RESTART:      // Zero the counter then resume clocking
                                 ;     446         {
                                 ;     447             *my_handle->regs.tcnt = 0;                 // Clear the counter TCNT register.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",447
000002CF A989                    		MOV.L 1CH[R0], R1
000002D1 AA19                    		MOV.L 24H[R1], R1
000002D3 F81500                  		MOV.W #0000H, [R1]
000002D6                         L110:	; bb385.split
                                 ;     448             mtu_interrupts_enable(channel);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",448
000002D6 590130                  		MOVU.B 30H[R0], R1
000002D9 39rrrr               W  		BSR _mtu_interrupts_enable
000002DC                         L111:	; bb385.split5
                                 ;     449             MTU.TSTR.BYTE |= g_mtu_tstr_bits[channel]; // Start counting.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",449
000002DC AB01                    		MOV.L 30H[R0], R1
000002DE FBE2rrrrrrrr            		MOV.L #_g_mtu_tstr_bits, R14
000002E4 FECE1E                  		MOVU.B [R14,R1], R14
000002E7 FBFE808608              		MOV.L #00088680H, R15
000002EC 54FE                    		OR [R15].UB, R14
000002EE C3FE                    		MOV.B R14, [R15]
000002F0 38rrrr               W  		BRA L167
000002F3                         L112:	; bb401
                                 ;     450         }
                                 ;     451         break;
                                 ;     452 
                                 ;     453         case MTU_CMD_GET_STATUS:   // Retrieve the current status of the channel
                                 ;     454         {
                                 ;     455             if (MTU_MODE_COMPARE_MATCH == g_mtu_channel_mode[channel])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",455
000002F3 AB01                    		MOV.L 30H[R0], R1
000002F5 FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_mode, R14
000002FB FECE1E                  		MOVU.B [R14,R1], R14
000002FE 611E                    		CMP #01H, R14
00000300 21rr                    		BNE L116
00000302                         L113:	; bb402
                                 ;     456             {
                                 ;     457                 /* Copy void pcmd_data pointer over to a concrete type. */
                                 ;     458                 p_timer_data =  (mtu_timer_status_t *)pcmd_data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",458
00000302 E5000A03                		MOV.L 28H[R0], 0CH[R0]
00000306                         L114:	; bb402.split
                                 ;     459                 /* Return timer status to application */
                                 ;     460                 p_timer_data->timer_running = (bool)(MTU.TSTR.BYTE & g_mtu_tstr_bits[channel]); // Running status
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",460
00000306 A889                    		MOV.L 0CH[R0], R1
00000308 FBEE808608              		MOV.L #00088680H, R14
0000030D 58EE                    		MOVU.B [R14], R14
0000030F FBF2rrrrrrrr            		MOV.L #_g_mtu_tstr_bits, R15
00000315 06890F0C                		ADD 30H[R0].L, R15
00000319 50FE                    		AND [R15].UB, R14
0000031B 5BEE                    		MOVU.B R14, R14
0000031D 610E                    		CMP #00H, R14
0000031F FCD11104                		SCNE.B 04H[R1]
00000323                         L115:	; bb402.split6
                                 ;     461                 p_timer_data->timer_count = *my_handle->regs.tcnt;    // The current timer count value.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",461
00000323 A989                    		MOV.L 1CH[R0], R1
00000325 AA19                    		MOV.L 24H[R1], R1
00000327 A88A                    		MOV.L 0CH[R0], R2
00000329 5C1E                    		MOVU.W [R1], R14
0000032B E32E                    		MOV.L R14, [R2]
0000032D 38rrrr               W  		BRA L167
00000330                         L116:	; bb426
                                 ;     462             }
                                 ;     463             else if  (MTU_MODE_INPUT_CAPTURE == g_mtu_channel_mode[channel])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",463
00000330 AB01                    		MOV.L 30H[R0], R1
00000332 FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_mode, R14
00000338 FECE1E                  		MOVU.B [R14,R1], R14
0000033B 612E                    		CMP #02H, R14
0000033D 3Brrrr               W  		BNE L167
00000340                         L117:	; bb427
                                 ;     464             {
                                 ;     465                 /* Cast void pcmd_data pointer to a concrete type. */
                                 ;     466                 p_capture_data =  (mtu_capture_status_t *)pcmd_data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",466
00000340 E5000A02                		MOV.L 28H[R0], 08H[R0]
00000344                         L118:	; bb427.split
                                 ;     467 
                                 ;     468                 /* Return a snapshot of TGR capture interrupts that have fired. */
                                 ;     469                 p_capture_data->capture_flags = mtu_interrupts_check(channel);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",469
00000344 590130                  		MOVU.B 30H[R0], R1
00000347 A886                    		MOV.L 08H[R0], R6
00000349 39rrrr               W  		BSR _mtu_interrupts_check
0000034C 8561                    		MOV.B R1, 14H[R6]
0000034E                         L119:	; bb427.split7
                                 ;     470 
                                 ;     471                 p_capture_data->timer_count = *my_handle->regs.tcnt;    // The current timer count value.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",471
0000034E A989                    		MOV.L 1CH[R0], R1
00000350 AA19                    		MOV.L 24H[R1], R1
00000352 A882                    		MOV.L 08H[R0], R2
00000354 5C11                    		MOVU.W [R1], R1
00000356 A121                    		MOV.L R1, 10H[R2]
00000358                         L120:	; bb427.split8
                                 ;     472 
                                 ;     473                 /* Grab the TGR register values. */
                                 ;     474                 p_capture_data->capt_a_count = *my_handle->regs.tgra;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",474
00000358 A989                    		MOV.L 1CH[R0], R1
0000035A AA91                    		MOV.L 28H[R1], R1
0000035C A882                    		MOV.L 08H[R0], R2
0000035E 5C1E                    		MOVU.W [R1], R14
00000360 E32E                    		MOV.L R14, [R2]
00000362                         L121:	; bb427.split9
                                 ;     475                 p_capture_data->capt_b_count = *my_handle->regs.tgrb;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",475
00000362 A989                    		MOV.L 1CH[R0], R1
00000364 AA99                    		MOV.L 2CH[R1], R1
00000366 A882                    		MOV.L 08H[R0], R2
00000368 5C11                    		MOVU.W [R1], R1
0000036A A029                    		MOV.L R1, 04H[R2]
0000036C                         L122:	; bb427.split10
                                 ;     476                 /* Not all channels have TGRC and TGRD */
                                 ;     477                 if (NULL != my_handle->regs.tgrc)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",477
0000036C A989                    		MOV.L 1CH[R0], R1
0000036E AB11                    		MOV.L 30H[R1], R1
00000370 6101                    		CMP #00H, R1
00000372 A881                    		MOV.L 08H[R0], R1
00000374 10                   S  		BEQ L124
00000375                         L123:	; bb460
                                 ;     478                 {
                                 ;     479                     p_capture_data->capt_c_count = *my_handle->regs.tgrc;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",479
00000375 A98A                    		MOV.L 1CH[R0], R2
00000377 AB22                    		MOV.L 30H[R2], R2
00000379 5C22                    		MOVU.W [R2], R2
0000037B A092                    		MOV.L R2, 08H[R1]
0000037D 08                   S  		BRA L125
0000037E                         L124:	; bb469
                                 ;     480                 }
                                 ;     481                 else
                                 ;     482                 {
                                 ;     483                     p_capture_data->capt_c_count = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",483
0000037E 3E1200                  		MOV.L #00000000H, 08H[R1]
00000381                         L125:	; bb480
                                 ;     484                 }
                                 ;     485                 if (NULL != my_handle->regs.tgrd)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",485
00000381 A989                    		MOV.L 1CH[R0], R1
00000383 AB19                    		MOV.L 34H[R1], R1
00000385 6101                    		CMP #00H, R1
00000387 A881                    		MOV.L 08H[R0], R1
00000389 20rr                    		BEQ L127
0000038B                         L126:	; bb481
                                 ;     486                 {
                                 ;     487                     p_capture_data->capt_d_count = *my_handle->regs.tgrd;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",487
0000038B A98A                    		MOV.L 1CH[R0], R2
0000038D AB2A                    		MOV.L 34H[R2], R2
0000038F 5C22                    		MOVU.W [R2], R2
00000391 A09A                    		MOV.L R2, 0CH[R1]
00000393 38rrrr               W  		BRA L167
00000396                         L127:	; bb490
                                 ;     488                 }
                                 ;     489                 else
                                 ;     490                 {
                                 ;     491                     p_capture_data->capt_d_count = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",491
00000396 3E1300                  		MOV.L #00000000H, 0CH[R1]
00000399 38rrrr               W  		BRA L167
0000039C                         L128:	; bb517
                                 ;     492                 }
                                 ;     493             }
                                 ;     494         }
                                 ;     495         break;
                                 ;     496 
                                 ;     497         case MTU_CMD_CLEAR_EVENTS:      // Clears the interrupt flags for the channel
                                 ;     498         {
                                 ;     499             mtu_interrupts_clear(channel);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",499
0000039C 590130                  		MOVU.B 30H[R0], R1
0000039F 39rrrr               W  		BSR _mtu_interrupts_clear
000003A2 38rrrr               W  		BRA L167
000003A5                         L129:	; bb521
                                 ;     500         }
                                 ;     501         break;
                                 ;     502 
                                 ;     503         case MTU_CMD_SET_CAPT_EDGE:      // Set the detection edge polarity for input capture.
                                 ;     504         {
                                 ;     505             if  (MTU_MODE_INPUT_CAPTURE == g_mtu_channel_mode[channel])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",505
000003A5 AB01                    		MOV.L 30H[R0], R1
000003A7 FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_mode, R14
000003AD FECE1E                  		MOVU.B [R14,R1], R14
000003B0 612E                    		CMP #02H, R14
000003B2 3Brrrr               W  		BNE L155
000003B5                         L130:	; bb522
                                 ;     506             {
                                 ;     507                  /* Cast void pcmd_data pointer to a concrete type. */
                                 ;     508                 p_cap_edge_data =  (mtu_capture_set_edge_t *)pcmd_data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",508
000003B5 E5000A05                		MOV.L 28H[R0], 14H[R0]
000003B9                         L131:	; bb522.split
                                 ;     509 
                                 ;     510                 if ((MTU_CHANNEL_1 == channel) || (MTU_CHANNEL_2 == channel))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",510
000003B9 AB01                    		MOV.L 30H[R0], R1
000003BB 6111                    		CMP #01H, R1
000003BD 20rr                    		BEQ L140
000003BF 2Err                 B  		BRA L139
000003C1                         L132:	; bb527
                                 ;     511                 {
                                 ;     512                     if((MTU_CAP_SRC_C == p_cap_edge_data->capture_src) || (MTU_CAP_SRC_D == p_cap_edge_data->capture_src))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",512
000003C1 A909                    		MOV.L 14H[R0], R1
000003C3 EC1E                    		MOV.L [R1], R14
000003C5 612E                    		CMP #02H, R14
000003C7 20rr                    		BEQ L136
000003C9 2Err                 B  		BRA L135
000003CB                         L133:	; bb528
                                 ;     513                     {
                                 ;     514                         #if MTU_CFG_REQUIRE_LOCK == 1
                                 ;     515                         R_BSP_HardwareUnlock((mcu_lock_t)(BSP_LOCK_MTU0 + channel));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",515
000003CB AB01                    		MOV.L 30H[R0], R1
000003CD 71112E                  		ADD #2EH, R1
000003D0 05rrrrrr             A  		BSR _R_BSP_HardwareUnlock
000003D4                         L134:	; bb528.split
                                 ;     516                         #endif
                                 ;     517                         return MTU_ERR_INVALID_ARG; // Resource not present on these channels.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",517
000003D4 3E0105                  		MOV.L #00000005H, 04H[R0]
000003D7 38rrrr               W  		BRA L169
000003DA                         L135:	; bb538
000003DA A909                    		MOV.L 14H[R0], R1
000003DC EC1E                    		MOV.L [R1], R14
000003DE 613E                    		CMP #03H, R14
000003E0 18                   S  		BNE L137
000003E1                         L136:	; bb544
000003E1 F80601                  		MOV.L #00000001H, [R0]
000003E4 08                   S  		BRA L138
000003E5                         L137:	; bb545
000003E5 F80600                  		MOV.L #00000000H, [R0]
000003E8                         L138:	; bb546
000003E8 EC01                    		MOV.L [R0], R1
000003EA 6101                    		CMP #00H, R1
000003EC 21rr                    		BNE L133
000003EE 2Err                 B  		BRA L143
000003F0                         L139:	; bb555
000003F0 AB01                    		MOV.L 30H[R0], R1
000003F2 6121                    		CMP #02H, R1
000003F4 18                   S  		BNE L141
000003F5                         L140:	; bb559
000003F5 F80601                  		MOV.L #00000001H, [R0]
000003F8 08                   S  		BRA L142
000003F9                         L141:	; bb560
000003F9 F80600                  		MOV.L #00000000H, [R0]
000003FC                         L142:	; bb561
000003FC EC01                    		MOV.L [R0], R1
000003FE 6101                    		CMP #00H, R1
00000400 21rr                    		BNE L132
00000402                         L143:	; bb566
                                 ;     518                     }
                                 ;     519                 }
                                 ;     520                 switch (p_cap_edge_data->capture_src)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",520
00000402 A909                    		MOV.L 14H[R0], R1
00000404 EC1E                    		MOV.L [R1], R14
00000406 613E                    		CMP #03H, R14
00000408 20rr                    		BEQ L153
0000040A                         L144:	; bb566
0000040A 611E                    		CMP #01H, R14
0000040C 20rr                    		BEQ L149
0000040E                         L145:	; bb566
0000040E 612E                    		CMP #02H, R14
00000410 20rr                    		BEQ L151
00000412                         L146:	; bb566
00000412 610E                    		CMP #00H, R14
00000414 3Brrrr               W  		BNE L167
00000417                         L147:	; bb570
                                 ;     521                 {
                                 ;     522                     case MTU_CAP_SRC_A:
                                 ;     523                     {
                                 ;     524                         *my_handle->regs.tiorl &= 0xF0;                           // First clear the lower nibble.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",524
00000417 A989                    		MOV.L 1CH[R0], R1
00000419 A919                    		MOV.L 14H[R1], R1
0000041B 754EF0                  		MOV.L #000000F0H, R14
0000041E 501E                    		AND [R1].UB, R14
00000420 C31E                    		MOV.B R14, [R1]
00000422                         L148:	; bb570.split
                                 ;     525                         *my_handle->regs.tiorh |= p_cap_edge_data->capture_edge;  // Set bits in lower nibble
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",525
00000422 A989                    		MOV.L 1CH[R0], R1
00000424 A911                    		MOV.L 10H[R1], R1
00000426 A90A                    		MOV.L 14H[R0], R2
00000428 A82A                    		MOV.L 04H[R2], R2
0000042A 5412                    		OR [R1].UB, R2
0000042C C312                    		MOV.B R2, [R1]
0000042E 38rrrr               W  		BRA L167
00000431                         L149:	; bb590
                                 ;     526                     }
                                 ;     527                     break;
                                 ;     528                     case MTU_CAP_SRC_B:
                                 ;     529                     {
                                 ;     530                         *my_handle->regs.tiorl &= 0x0F;                                  // First clear the upper nibble.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",530
00000431 A989                    		MOV.L 1CH[R0], R1
00000433 A919                    		MOV.L 14H[R1], R1
00000435 581E                    		MOVU.B [R1], R14
00000437 64FE                    		AND #0FH, R14
00000439 C31E                    		MOV.B R14, [R1]
0000043B                         L150:	; bb590.split
                                 ;     531                         *my_handle->regs.tiorh |=  (p_cap_edge_data->capture_edge << 4); // Move bits to upper nibble
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",531
0000043B A909                    		MOV.L 14H[R0], R1
0000043D A819                    		MOV.L 04H[R1], R1
0000043F 6C41                    		SHLL #04H, R1
00000441 A98A                    		MOV.L 1CH[R0], R2
00000443 A922                    		MOV.L 10H[R2], R2
00000445 5421                    		OR [R2].UB, R1
00000447 C321                    		MOV.B R1, [R2]
00000449 38rrrr               W  		BRA L167
0000044C                         L151:	; bb611
                                 ;     532                     }
                                 ;     533                     break;
                                 ;     534                     case MTU_CAP_SRC_C:
                                 ;     535                     {
                                 ;     536                         *my_handle->regs.tiorl &= 0xF0;                           // First clear the lower nibble.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",536
0000044C A989                    		MOV.L 1CH[R0], R1
0000044E A919                    		MOV.L 14H[R1], R1
00000450 754EF0                  		MOV.L #000000F0H, R14
00000453 501E                    		AND [R1].UB, R14
00000455 C31E                    		MOV.B R14, [R1]
00000457                         L152:	; bb611.split
                                 ;     537                         *my_handle->regs.tiorl |= p_cap_edge_data->capture_edge;  // Set bits in lower nibble
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",537
00000457 A989                    		MOV.L 1CH[R0], R1
00000459 A919                    		MOV.L 14H[R1], R1
0000045B A90A                    		MOV.L 14H[R0], R2
0000045D A82A                    		MOV.L 04H[R2], R2
0000045F 5412                    		OR [R1].UB, R2
00000461 C312                    		MOV.B R2, [R1]
00000463 2Err                 B  		BRA L167
00000465                         L153:	; bb631
                                 ;     538                     }
                                 ;     539                     break;
                                 ;     540                     case MTU_CAP_SRC_D:
                                 ;     541                     {
                                 ;     542                         *my_handle->regs.tiorl &= 0x0F;                                   // First clear the upper nibble.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",542
00000465 A989                    		MOV.L 1CH[R0], R1
00000467 A919                    		MOV.L 14H[R1], R1
00000469 581E                    		MOVU.B [R1], R14
0000046B 64FE                    		AND #0FH, R14
0000046D C31E                    		MOV.B R14, [R1]
0000046F                         L154:	; bb631.split
                                 ;     543                         *my_handle->regs.tiorl |= (p_cap_edge_data->capture_edge << 4);   // Move bits to upper nibble
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",543
0000046F A909                    		MOV.L 14H[R0], R1
00000471 A819                    		MOV.L 04H[R1], R1
00000473 6C41                    		SHLL #04H, R1
00000475 A98A                    		MOV.L 1CH[R0], R2
00000477 A92A                    		MOV.L 14H[R2], R2
00000479 5421                    		OR [R2].UB, R1
0000047B C321                    		MOV.B R1, [R2]
0000047D 2Err                 B  		BRA L167
0000047F                         L155:	; bb653
                                 ;     544                     }
                                 ;     545                     break;
                                 ;     546                 }
                                 ;     547             }
                                 ;     548             else    // Command not valid for this mode.
                                 ;     549             {
                                 ;     550                 #if MTU_CFG_REQUIRE_LOCK == 1
                                 ;     551                 R_BSP_HardwareUnlock((mcu_lock_t)(BSP_LOCK_MTU0 + channel));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",551
0000047F AB01                    		MOV.L 30H[R0], R1
00000481 71112E                  		ADD #2EH, R1
00000484 05rrrrrr             A  		BSR _R_BSP_HardwareUnlock
00000488                         L156:	; bb653.split
                                 ;     552                 #endif
                                 ;     553                 return MTU_ERR_INVALID_ARG;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",553
00000488 3E0105                  		MOV.L #00000005H, 04H[R0]
0000048B 2Err                 B  		BRA L169
0000048D                         L157:	; bb666
                                 ;     554             }
                                 ;     555 
                                 ;     556         }
                                 ;     557         break;
                                 ;     558 
                                 ;     559         case MTU_CMD_SYNCHRONIZE:
                                 ;     560         {
                                 ;     561             /* Copy void pcmd_data pointer over to a concrete type. */
                                 ;     562             p_group_data =  (mtu_group_t *)pcmd_data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",562
0000048D E5000A04                		MOV.L 28H[R0], 10H[R0]
00000491                         L158:	; bb666.split
                                 ;     563 
                                 ;     564             temp_byte = (uint8_t) *p_group_data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",564
00000491 A901                    		MOV.L 10H[R0], R1
00000493 EC11                    		MOV.L [R1], R1
00000495 8681                    		MOV.B R1, 1AH[R0]
00000497                         L159:	; bb666.split11
00000497 7541C7                  		MOV.L #000000C7H, R1
                                 ;     565             temp_byte &= MTU_TSYR_MASK; // Protect reserved TSYR bits.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",565
0000049A 51011A                  		AND 1AH[R0].UB, R1
0000049D 8681                    		MOV.B R1, 1AH[R0]
0000049F                         L160:	; bb666.split12
                                 ;     566 
                                 ;     567             if(!mtu_check_group(temp_byte))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",567
0000049F B681                    		MOVU.B 1AH[R0], R1
000004A1 39rrrr               W  		BSR _mtu_check_group
000004A4 6101                    		CMP #00H, R1
000004A6 21rr                    		BNE L163
000004A8 2Err                 B  		BRA L164
000004AA                         L161:	; bb677
                                 ;     568             {
                                 ;     569                 #if MTU_CFG_REQUIRE_LOCK == 1
                                 ;     570                 R_BSP_HardwareUnlock((mcu_lock_t)(BSP_LOCK_MTU0 + channel));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",570
000004AA AB01                    		MOV.L 30H[R0], R1
000004AC 71112E                  		ADD #2EH, R1
000004AF 05rrrrrr             A  		BSR _R_BSP_HardwareUnlock
000004B3                         L162:	; bb677.split
                                 ;     571                 #endif
                                 ;     572                 return MTU_ERR_INVALID_ARG;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",572
000004B3 3E0105                  		MOV.L #00000005H, 04H[R0]
000004B6 2Err                 B  		BRA L169
000004B8                         L163:	; bb687
000004B8 F80600                  		MOV.L #00000000H, [R0]
000004BB 08                   S  		BRA L165
000004BC                         L164:	; bb688
000004BC F80601                  		MOV.L #00000001H, [R0]
000004BF                         L165:	; bb689
000004BF EC01                    		MOV.L [R0], R1
000004C1 6101                    		CMP #00H, R1
000004C3 21rr                    		BNE L161
000004C5                         L166:	; bb693
                                 ;     573             }
                                 ;     574 
                                 ;     575             MTU.TSYR.BYTE = temp_byte;  //Set the SYNCn 0-4 bits.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",575
000004C5 FBEE808608              		MOV.L #00088680H, R14
000004CA C50E1A01                		MOV.B 1AH[R0], 01H[R14]
000004CE                         L167:	; bb696
                                 ;     576         }
                                 ;     577         break;
                                 ;     578 
                                 ;     579         default:
                                 ;     580         {
                                 ;     581             //Nothing -- unreachable.
                                 ;     582         }
                                 ;     583     }
                                 ;     584 
                                 ;     585     #if MTU_CFG_REQUIRE_LOCK == 1
                                 ;     586     R_BSP_HardwareUnlock((mcu_lock_t)(BSP_LOCK_MTU0 + channel));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",586
000004CE AB01                    		MOV.L 30H[R0], R1
000004D0 71112E                  		ADD #2EH, R1
000004D3 05rrrrrr             A  		BSR _R_BSP_HardwareUnlock
000004D7                         L168:	; bb696.split
                                 ;     587     #endif
                                 ;     588 
                                 ;     589     return MTU_SUCCESS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",589
000004D7 3E0100                  		MOV.L #00000000H, 04H[R0]
000004DA                         L169:	; bb701
000004DA A809                    		MOV.L 04H[R0], R1
000004DC A209                    		MOV.L R1, 24H[R0]
                                 ;     590 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",590
000004DE 3F660E                  		RTSD #38H, R6-R6
000004E1                         _R_MTU_Close:
                                 		.STACK	_R_MTU_Close=20
                                 ;     591 /* end of function R_MTU_Control(). */
                                 ;     592 
                                 ;     593 
                                 ;     594 /***********************************************************************************************************************
                                 ;     595 * Function Name: R_MTU_Close
                                 ;     596 * Description  : Removes power to the MTU channel designated by the handle and disables the associated interrupts.
                                 ;     597 * Arguments    : : channel-
                                 ;     598 *                   The channel number
                                 ;     599 * Return Value : MTU_SUCCESS-
                                 ;     600 *                    Successful; channel closed
                                 ;     601 *                MTU_TIMERS_ERR_CH_NOT_OPEN-
                                 ;     602 *                    The channel has not been opened so closing has no effect.
                                 ;     603 *                MTU_TIMERS_ERR_BAD_CHAN-
                                 ;     604 *                    Channel number is invalid for part
                                 ;     605 ***********************************************************************************************************************/
                                 ;     606 mtu_err_t  R_MTU_Close(mtu_channel_t  channel)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",606
000004E1 7100F0                  		ADD #0FFFFFFF0H, R0
000004E4 A089                    		MOV.L R1, 0CH[R0]
                                 ;     607 {
                                 ;     608     #if MTU_CFG_PARAM_CHECKING_ENABLE == 1
                                 ;     609     if (MTU_CHANNEL_MAX <= channel)           // First check for channel number out of range
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",609
000004E6 6151                    		CMP #05H, R1
000004E8 29rr                    		BLT L174
000004EA                         L173:	; bb2
                                 ;     610     {
                                 ;     611         return MTU_ERR_BAD_CHAN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",611
000004EA 3E0101                  		MOV.L #00000001H, 04H[R0]
000004ED 38rrrr               W  		BRA L196
000004F0                         L174:	; bb8
                                 ;     612     }
                                 ;     613     #endif
                                 ;     614 
                                 ;     615     /* Check to see if the channel is currently initialized. */
                                 ;     616     if (!g_mtu_channel_mode[channel])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",616
000004F0 A889                    		MOV.L 0CH[R0], R1
000004F2 FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_mode, R14
000004F8 FECE1E                  		MOVU.B [R14,R1], R14
000004FB 610E                    		CMP #00H, R14
000004FD 18                   S  		BNE L176
000004FE 2Err                 B  		BRA L177
00000500                         L175:	; bb9
                                 ;     617     {
                                 ;     618         /* This channel is not open so need not be closed. */
                                 ;     619         return MTU_ERR_CH_NOT_OPENED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",619
00000500 3E0102                  		MOV.L #00000002H, 04H[R0]
00000503 38rrrr               W  		BRA L196
00000506                         L176:	; bb17
00000506 F80600                  		MOV.L #00000000H, [R0]
00000509 08                   S  		BRA L178
0000050A                         L177:	; bb18
0000050A F80601                  		MOV.L #00000001H, [R0]
0000050D                         L178:	; bb19
0000050D EC01                    		MOV.L [R0], R1
0000050F 6101                    		CMP #00H, R1
00000511 21rr                    		BNE L175
00000513                         L179:	; bb23
                                 ;     620     }
                                 ;     621 
                                 ;     622     /* Stop any current operation. */
                                 ;     623     R_MTU_Control((mtu_channel_t)channel, MTU_CMD_STOP, FIT_NO_PTR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",623
00000513 A889                    		MOV.L 0CH[R0], R1
00000515 FB3200000010            		MOV.L #10000000H, R3
0000051B 6612                    		MOV.L #00000001H, R2
0000051D 39rrrr               W  		BSR _R_MTU_Control
00000520                         L180:	; bb23.split
                                 ;     624 
                                 ;     625     mtu_interrupts_disable(channel);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",625
00000520 B301                    		MOVU.B 0CH[R0], R1
00000522 39rrrr               W  		BSR _mtu_interrupts_disable
00000525                         L181:	; bb23.split1
                                 ;     626 
                                 ;     627     g_mtu_channel_mode[channel] = MTU_MODE_CLOSED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",627
00000525 A889                    		MOV.L 0CH[R0], R1
00000527 FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_mode, R14
0000052D 660F                    		MOV.L #00000000H, R15
0000052F FE0E1F                  		MOV.B R15, [R14,R1]
00000532                         L182:	; bb23.split2
                                 ;     628     g_num_channels_in_use--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",628
00000532 FBE2rrrrrrrr            		MOV.L #_g_num_channels_in_use, R14
00000538 58EF                    		MOVU.B [R14], R15
0000053A 601F                    		SUB #01H, R15
0000053C C3EF                    		MOV.B R15, [R14]
0000053E                         L183:	; bb23.split3
                                 ;     629 
                                 ;     630     /* Shut down the MTU unit if this was the last channel in use. */
                                 ;     631     if (0 == g_num_channels_in_use)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",631
0000053E FBE2rrrrrrrr            		MOV.L #_g_num_channels_in_use, R14
00000544 58EE                    		MOVU.B [R14], R14
00000546 610E                    		CMP #00H, R14
00000548 18                   S  		BNE L185
00000549                         L184:	; bb33
00000549 6611                    		MOV.L #00000001H, R1
                                 ;     632     {
                                 ;     633             power_on_off(MTU_POWER_OFF);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",633
0000054B 39rrrr               W  		BSR _power_on_off
0000054E                         L185:	; bb39
                                 ;     634     }
                                 ;     635 
                                 ;     636     /* Clear all control flags arrays for this channel. */
                                 ;     637     g_mtu_channel_repeats[channel] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",637
0000054E A889                    		MOV.L 0CH[R0], R1
00000550 FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_repeats, R14
00000556 660F                    		MOV.L #00000000H, R15
00000558 FE0E1F                  		MOV.B R15, [R14,R1]
0000055B                         L186:	; bb39.split
                                 ;     638     g_mtu_channel_clr_src[channel] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",638
0000055B A889                    		MOV.L 0CH[R0], R1
0000055D FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_clr_src, R14
00000563 660F                    		MOV.L #00000000H, R15
00000565 FE0E1F                  		MOV.B R15, [R14,R1]
00000568                         L187:	; bb39.split4
                                 ;     639 
                                 ;     640     g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_A] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",640
00000568 A889                    		MOV.L 0CH[R0], R1
0000056A 6C21                    		SHLL #02H, R1
0000056C FBE2rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R14
00000572 660F                    		MOV.L #00000000H, R15
00000574 FE0E1F                  		MOV.B R15, [R14,R1]
00000577                         L188:	; bb39.split5
                                 ;     641     g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_B] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",641
00000577 A889                    		MOV.L 0CH[R0], R1
00000579 6C21                    		SHLL #02H, R1
0000057B FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R2
00000581 4B12                    		ADD R1, R2
00000583 3C2100                  		MOV.B #00H, 01H[R2]
00000586                         L189:	; bb39.split6
                                 ;     642     g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_C] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",642
00000586 A889                    		MOV.L 0CH[R0], R1
00000588 6C21                    		SHLL #02H, R1
0000058A FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R2
00000590 4B12                    		ADD R1, R2
00000592 3C2200                  		MOV.B #00H, 02H[R2]
00000595                         L190:	; bb39.split7
                                 ;     643     g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_D] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",643
00000595 A889                    		MOV.L 0CH[R0], R1
00000597 6C21                    		SHLL #02H, R1
00000599 FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R2
0000059F 4B12                    		ADD R1, R2
000005A1 3C2300                  		MOV.B #00H, 03H[R2]
000005A4                         L191:	; bb39.split8
                                 ;     644 
                                 ;     645     g_mtu_tgr_callbacks[channel][MTU_TIMER_A] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",645
000005A4 A889                    		MOV.L 0CH[R0], R1
000005A6 6C21                    		SHLL #02H, R1
000005A8 FBE2rrrrrrrr            		MOV.L #_g_mtu_tgr_callbacks, R14
000005AE 660F                    		MOV.L #00000000H, R15
000005B0 FE0E1F                  		MOV.B R15, [R14,R1]
000005B3                         L192:	; bb39.split9
                                 ;     646     g_mtu_tgr_callbacks[channel][MTU_TIMER_B] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",646
000005B3 A889                    		MOV.L 0CH[R0], R1
000005B5 6C21                    		SHLL #02H, R1
000005B7 FB22rrrrrrrr            		MOV.L #_g_mtu_tgr_callbacks, R2
000005BD 4B12                    		ADD R1, R2
000005BF 3C2100                  		MOV.B #00H, 01H[R2]
000005C2                         L193:	; bb39.split10
                                 ;     647     g_mtu_tgr_callbacks[channel][MTU_TIMER_C] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",647
000005C2 A889                    		MOV.L 0CH[R0], R1
000005C4 6C21                    		SHLL #02H, R1
000005C6 FB22rrrrrrrr            		MOV.L #_g_mtu_tgr_callbacks, R2
000005CC 4B12                    		ADD R1, R2
000005CE 3C2200                  		MOV.B #00H, 02H[R2]
000005D1                         L194:	; bb39.split11
                                 ;     648     g_mtu_tgr_callbacks[channel][MTU_TIMER_D] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",648
000005D1 A889                    		MOV.L 0CH[R0], R1
000005D3 6C21                    		SHLL #02H, R1
000005D5 FB22rrrrrrrr            		MOV.L #_g_mtu_tgr_callbacks, R2
000005DB 4B12                    		ADD R1, R2
000005DD 3C2300                  		MOV.B #00H, 03H[R2]
000005E0                         L195:	; bb39.split12
                                 ;     649 
                                 ;     650     return MTU_SUCCESS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",650
000005E0 3E0100                  		MOV.L #00000000H, 04H[R0]
000005E3                         L196:	; bb77
000005E3 A809                    		MOV.L 04H[R0], R1
000005E5 A081                    		MOV.L R1, 08H[R0]
                                 ;     651 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",651
000005E7 6704                    		RTSD #10H
000005E9                         _mtu_calc_clock_divisor:
                                 		.STACK	_mtu_calc_clock_divisor=28
                                 ;     652 /* end of function R_MTU_Close(). */
                                 ;     653 
                                 ;     654 /***********************************************************************************************************************
                                 ;     655 Private MTU function definitions
                                 ;     656 ***********************************************************************************************************************/
                                 ;     657 
                                 ;     658 /***********************************************************************************************************************
                                 ;     659 * Function Name: mtu_calc_input_clocks
                                 ;     660 * Description  : local helper function. Figures out the register settings for clocking divisor and TGR count.
                                 ;     661 * Arguments    : frq_target -
                                 ;     662 *                   The requested frequency.
                                 ;     663 * Return Value : none
                                 ;     664 ***********************************************************************************************************************/
                                 ;     665 bool mtu_calc_clock_divisor(uint8_t chan, uint8_t *div_idx, uint32_t frq_target )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",665
000005E9 7100E8                  		ADD #0FFFFFFE8H, R0
000005EC 8589                    		MOV.B R1, 17H[R0]
000005EE A102                    		MOV.L R2, 10H[R0]
000005F0 A08B                    		MOV.L R3, 0CH[R0]
                                 ;     666 {
                                 ;     667     uint32_t i;
                                 ;     668     bool result = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",668
000005F2 3C0500                  		MOV.B #00H, 05H[R0]
000005F5                         L198:	; entry.split
                                 ;     669     uint16_t pclk_div;
                                 ;     670     uint16_t tgr_try;
                                 ;     671 
                                 ;     672     if ((uint32_t)BSP_PCLKB_HZ >= frq_target) /* Requested frequency must not be higher than PCLK. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",672
000005F5 A889                    		MOV.L 0CH[R0], R1
000005F7 7401006CDC02            		CMP #02DC6C00H, R1
000005FD 24rr                    		BGTU L208
000005FF                         L199:	; bb8
                                 ;     673     {
                                 ;     674         /* Check the available dividers to see if we can match the frequency requested by the user. */
                                 ;     675         for (i = 0; i < MTU_NUM_CLK_DIVISORS; i++)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",675
000005FF F80600                  		MOV.L #00000000H, [R0]
00000602 2Err                 B  		BRA L207
00000604                         L200:	; bb10
                                 ;     676         {
                                 ;     677             /* First check to see if this channel supports this divisor. */
                                 ;     678             if (0xFF != g_chnl_clk_divs[chan][i]) // 0xFF means not available.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",678
00000604 B589                    		MOVU.B 17H[R0], R1
00000606 6361                    		MUL #06H, R1
00000608 FBE2rrrrrrrr            		MOV.L #_g_chnl_clk_divs, R14
0000060E 4B1E                    		ADD R1, R14
00000610 EC01                    		MOV.L [R0], R1
00000612 FECE1E                  		MOVU.B [R14,R1], R14
00000615 755EFF                  		CMP #0FFH, R14
00000618 20rr                    		BEQ L206
0000061A                         L201:	; bb11
                                 ;     679             {
                                 ;     680                 pclk_div = g_mtu_clock_divisors[i];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",680
0000061A FBE2rrrrrrrr            		MOV.L #_g_mtu_clock_divisors, R14
00000620 EC01                    		MOV.L [R0], R1
00000622 FE61E1                  		MOV.L [R1,R14], R1
00000625 9089                    		MOV.W R1, 06H[R0]
00000627                         L202:	; bb11.split
                                 ;     681 
                                 ;     682                 /* Determine minimum frequency this divider can hit. For example, if a PCLK/16 is used and PCLK is 48MHz, then
                                 ;     683                    the minimum frequency we can support is around 45.8Hz. This obtained by doing the following calculation:
                                 ;     684                    (PCLK / divider) / max_counter_value
                                 ;     685                    Example:
                                 ;     686                    (48,000,000 / 16) / 65,535 = 45.8 */
                                 ;     687 
                                 ;     688                 tgr_try = mtu_calc_tgr_ticks(pclk_div, frq_target);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",688
00000627 A88A                    		MOV.L 0CH[R0], R2
00000629 B889                    		MOVU.W 06H[R0], R1
0000062B 39rrrr               W  		BSR _mtu_calc_tgr_ticks
0000062E 9101                    		MOV.W R1, 08H[R0]
00000630                         L203:	; bb11.split1
                                 ;     689 
                                 ;     690                 if (tgr_try != 0)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",690
00000630 B901                    		MOVU.W 08H[R0], R1
00000632 6101                    		CMP #00H, R1
00000634 20rr                    		BEQ L206
00000636                         L204:	; bb20
                                 ;     691                 {
                                 ;     692                     /* We can use this divisor. Return clock divisor to be used. */
                                 ;     693                     *div_idx = i;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",693
00000636 EC01                    		MOV.L [R0], R1
00000638 A902                    		MOV.L 10H[R0], R2
0000063A C321                    		MOV.B R1, [R2]
0000063C                         L205:	; bb20.split
                                 ;     694 
                                 ;     695                     /* A valid divisor was found. */
                                 ;     696                     result = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",696
0000063C 3C0501                  		MOV.B #01H, 05H[R0]
0000063F 2Err                 B  		BRA L208
00000641                         L206:	; bb41
00000641 EC01                    		MOV.L [R0], R1
00000643 6211                    		ADD #01H, R1
00000645 E301                    		MOV.L R1, [R0]
00000647                         L207:	; bb44
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",675
00000647 EC01                    		MOV.L [R0], R1
00000649 6161                    		CMP #06H, R1
0000064B 23rr                    		BLTU L200
0000064D                         L208:	; bb55
                                 ;     697 
                                 ;     698                     /* No need to check other divisors. */
                                 ;     699                     break;
                                 ;     700                 }
                                 ;     701             } // 0xFF
                                 ;     702         } // for
                                 ;     703     }
                                 ;     704 
                                 ;     705     return result;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",705
0000064D C500050B                		MOV.B 05H[R0], 0BH[R0]
00000651 B289                    		MOVU.B 0BH[R0], R1
00000653                         L209:	; bb55.split
                                 ;     706 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",706
00000653 5B11                    		MOVU.B R1, R1
00000655 6706                    		RTSD #18H
00000657                         _mtu_calc_tgr_ticks:
                                 		.STACK	_mtu_calc_tgr_ticks=28
                                 ;     707 /* end of function mtu_calc_clock_divisor(). */
                                 ;     708 
                                 ;     709 /***********************************************************************************************************************
                                 ;     710 * Function Name: mtu_calc_tgr_ticks
                                 ;     711 * Description  : local helper function. Calculate the TGR tick count based on frequency target and fixed PCLK divisor.
                                 ;     712 * Arguments    : frq_target -
                                 ;     713 *                   The requested freq.
                                 ;     714 * Return Value : the TGR value on success, 0 on failure.
                                 ;     715 ***********************************************************************************************************************/
                                 ;     716 uint16_t mtu_calc_tgr_ticks(uint16_t pclk_div, uint32_t frq_target )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",716
00000657 7100E8                  		ADD #0FFFFFFE8H, R0
0000065A 9289                    		MOV.W R1, 16H[R0]
0000065C A102                    		MOV.L R2, 10H[R0]
                                 ;     717 {
                                 ;     718     uint16_t result = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",718
0000065E 3D0300                  		MOV.W #0000H, 06H[R0]
00000661                         L211:	; entry.split
00000661 FB12006CDC02            		MOV.L #02DC6C00H, R1
                                 ;     719     uint32_t clock_freq;
                                 ;     720 
                                 ;     721     clock_freq = BSP_PCLKB_HZ / pclk_div; /* Pre-scale the clock */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",721
00000667 06E109010B              		DIVU 16H[R0].UW, R1
0000066C A081                    		MOV.L R1, 08H[R0]
0000066E                         L212:	; entry.split1
                                 ;     722 
                                 ;     723     if ((frq_target > (clock_freq / MTU_MAX_TIMER_TICKS)) && (frq_target < clock_freq))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",723
0000066E A881                    		MOV.L 08H[R0], R1
00000670 FD7C91FFFF00            		DIVU #0FFFFH, R1
00000676 06850104                		CMP 10H[R0].L, R1
0000067A 23rr                    		BLTU L214
0000067C 2Err                 B  		BRA L216
0000067E                         L213:	; bb8
                                 ;     724     {
                                 ;     725         /* Figure out counter ticks needed for this frequency, and return it */
                                 ;     726         result = (uint16_t)((clock_freq/frq_target) -1 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",726
0000067E A881                    		MOV.L 08H[R0], R1
00000680 06A1090104              		DIVU 10H[R0].L, R1
00000685 6011                    		SUB #01H, R1
00000687 9089                    		MOV.W R1, 06H[R0]
00000689 2Err                 B  		BRA L218
0000068B                         L214:	; bb19
0000068B A901                    		MOV.L 10H[R0], R1
0000068D 06850102                		CMP 08H[R0].L, R1
00000691 22rr                    		BGEU L216
00000693                         L215:	; bb24
00000693 F80601                  		MOV.L #00000001H, [R0]
00000696 08                   S  		BRA L217
00000697                         L216:	; bb25
00000697 F80600                  		MOV.L #00000000H, [R0]
0000069A                         L217:	; bb26
0000069A EC01                    		MOV.L [R0], R1
0000069C 6101                    		CMP #00H, R1
0000069E 21rr                    		BNE L213
000006A0                         L218:	; bb30
                                 ;     727     }
                                 ;     728 
                                 ;     729     return result;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",729
000006A0 D5000307                		MOV.W 06H[R0], 0EH[R0]
000006A4 9989                    		MOV.W 0EH[R0], R1
000006A6                         L219:	; bb30.split
                                 ;     730 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",730
000006A6 5F11                    		MOVU.W R1, R1
000006A8 6706                    		RTSD #18H
000006AA                         _mtu_channel_clear:
                                 		.STACK	_mtu_channel_clear=12
                                 ;     731 /* end of function mtu_calc_tgr_ticks(). */
                                 ;     732 
                                 ;     733 /***********************************************************************************************************************
                                 ;     734 * Function Name: mtu_channel_clear
                                 ;     735 * Description  : Clears the registers and state variables of the given channel.
                                 ;     736 * Arguments    : channel -
                                 ;     737 *                 Which channel to clear.
                                 ;     738 * Return Value : none
                                 ;     739 ***********************************************************************************************************************/
                                 ;     740 void mtu_channel_clear(uint8_t channel)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",740
000006AA 6080                    		SUB #08H, R0
000006AC 8189                    		MOV.B R1, 07H[R0]
                                 ;     741 {
                                 ;     742     mtu_handle_t  my_handle = g_mtu_handles[channel];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",742
000006AE FBE2rrrrrrrr            		MOV.L #_g_mtu_handles, R14
000006B4 B189                    		MOVU.B 07H[R0], R1
000006B6 FE61E1                  		MOV.L [R1,R14], R1
000006B9 E301                    		MOV.L R1, [R0]
000006BB                         L221:	; entry.split
                                 ;     743 
                                 ;     744     /* Clear the software control flags */
                                 ;     745     g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_A] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",745
000006BB B189                    		MOVU.B 07H[R0], R1
000006BD 6C21                    		SHLL #02H, R1
000006BF FBE2rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R14
000006C5 660F                    		MOV.L #00000000H, R15
000006C7 FE0E1F                  		MOV.B R15, [R14,R1]
000006CA                         L222:	; entry.split1
                                 ;     746     g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_B] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",746
000006CA B189                    		MOVU.B 07H[R0], R1
000006CC 6C21                    		SHLL #02H, R1
000006CE FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R2
000006D4 4B12                    		ADD R1, R2
000006D6 3C2100                  		MOV.B #00H, 01H[R2]
000006D9                         L223:	; entry.split2
                                 ;     747     g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_C] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",747
000006D9 B189                    		MOVU.B 07H[R0], R1
000006DB 6C21                    		SHLL #02H, R1
000006DD FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R2
000006E3 4B12                    		ADD R1, R2
000006E5 3C2200                  		MOV.B #00H, 02H[R2]
000006E8                         L224:	; entry.split3
                                 ;     748     g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_D] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",748
000006E8 B189                    		MOVU.B 07H[R0], R1
000006EA 6C21                    		SHLL #02H, R1
000006EC FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R2
000006F2 4B12                    		ADD R1, R2
000006F4 3C2300                  		MOV.B #00H, 03H[R2]
000006F7                         L225:	; entry.split4
                                 ;     749     g_mtu_tgr_callbacks[channel][MTU_TIMER_A] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",749
000006F7 B189                    		MOVU.B 07H[R0], R1
000006F9 6C21                    		SHLL #02H, R1
000006FB FBE2rrrrrrrr            		MOV.L #_g_mtu_tgr_callbacks, R14
00000701 660F                    		MOV.L #00000000H, R15
00000703 FE0E1F                  		MOV.B R15, [R14,R1]
00000706                         L226:	; entry.split5
                                 ;     750     g_mtu_tgr_callbacks[channel][MTU_TIMER_B] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",750
00000706 B189                    		MOVU.B 07H[R0], R1
00000708 6C21                    		SHLL #02H, R1
0000070A FB22rrrrrrrr            		MOV.L #_g_mtu_tgr_callbacks, R2
00000710 4B12                    		ADD R1, R2
00000712 3C2100                  		MOV.B #00H, 01H[R2]
00000715                         L227:	; entry.split6
                                 ;     751     g_mtu_tgr_callbacks[channel][MTU_TIMER_C] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",751
00000715 B189                    		MOVU.B 07H[R0], R1
00000717 6C21                    		SHLL #02H, R1
00000719 FB22rrrrrrrr            		MOV.L #_g_mtu_tgr_callbacks, R2
0000071F 4B12                    		ADD R1, R2
00000721 3C2200                  		MOV.B #00H, 02H[R2]
00000724                         L228:	; entry.split7
                                 ;     752     g_mtu_tgr_callbacks[channel][MTU_TIMER_D] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",752
00000724 B189                    		MOVU.B 07H[R0], R1
00000726 6C21                    		SHLL #02H, R1
00000728 FB22rrrrrrrr            		MOV.L #_g_mtu_tgr_callbacks, R2
0000072E 4B12                    		ADD R1, R2
00000730 3C2300                  		MOV.B #00H, 03H[R2]
00000733                         L229:	; entry.split8
                                 ;     753 
                                 ;     754     /* Clear all relevant MTU registers. */
                                 ;     755     *my_handle->regs.tmdr = 0x00;       // Clear the mode register.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",755
00000733 EC01                    		MOV.L [R0], R1
00000735 A899                    		MOV.L 0CH[R1], R1
00000737 F81400                  		MOV.B #00H, [R1]
0000073A                         L230:	; entry.split9
                                 ;     756     *my_handle->regs.tiorh = 0x00;      // Clear TIORs to disable outputs.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",756
0000073A EC01                    		MOV.L [R0], R1
0000073C A911                    		MOV.L 10H[R1], R1
0000073E F81400                  		MOV.B #00H, [R1]
00000741                         L231:	; entry.split10
                                 ;     757 
                                 ;     758     if (NULL != my_handle->regs.tiorl)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",758
00000741 EC01                    		MOV.L [R0], R1
00000743 A919                    		MOV.L 14H[R1], R1
00000745 6101                    		CMP #00H, R1
00000747 10                   S  		BEQ L233
00000748                         L232:	; bb54
                                 ;     759     {
                                 ;     760         *my_handle->regs.tiorl = 0x00;  // Some channels do not have this.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",760
00000748 EC01                    		MOV.L [R0], R1
0000074A A919                    		MOV.L 14H[R1], R1
0000074C F81400                  		MOV.B #00H, [R1]
0000074F                         L233:	; bb65
                                 ;     761     }
                                 ;     762 
                                 ;     763     *my_handle->regs.tier = 0x00;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",763
0000074F EC01                    		MOV.L [R0], R1
00000751 A991                    		MOV.L 18H[R1], R1
00000753 F81400                  		MOV.B #00H, [R1]
00000756                         L234:	; bb65.split
                                 ;     764     *my_handle->regs.tcnt = 0x00;       // Clear the count in the TCNT register.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",764
00000756 EC01                    		MOV.L [R0], R1
00000758 AA19                    		MOV.L 24H[R1], R1
0000075A F81500                  		MOV.W #0000H, [R1]
0000075D                         L235:	; bb65.split11
                                 ;     765     *my_handle->regs.tgra = 0x00;       // Clear TGRs.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",765
0000075D EC01                    		MOV.L [R0], R1
0000075F AA91                    		MOV.L 28H[R1], R1
00000761 F81500                  		MOV.W #0000H, [R1]
00000764                         L236:	; bb65.split12
                                 ;     766     *my_handle->regs.tgrb = 0x00;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",766
00000764 EC01                    		MOV.L [R0], R1
00000766 AA99                    		MOV.L 2CH[R1], R1
00000768 F81500                  		MOV.W #0000H, [R1]
0000076B                         L237:	; bb65.split13
                                 ;     767 
                                 ;     768     if (NULL != my_handle->regs.tgrc)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",768
0000076B EC01                    		MOV.L [R0], R1
0000076D AB11                    		MOV.L 30H[R1], R1
0000076F 6101                    		CMP #00H, R1
00000771 10                   S  		BEQ L239
00000772                         L238:	; bb84
                                 ;     769     {
                                 ;     770         *my_handle->regs.tgrc = 0x00;   // Some channels do not have this.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",770
00000772 EC01                    		MOV.L [R0], R1
00000774 AB11                    		MOV.L 30H[R1], R1
00000776 F81500                  		MOV.W #0000H, [R1]
00000779                         L239:	; bb98
                                 ;     771     }
                                 ;     772 
                                 ;     773     if (NULL != my_handle->regs.tgrd)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",773
00000779 EC01                    		MOV.L [R0], R1
0000077B AB19                    		MOV.L 34H[R1], R1
0000077D 6101                    		CMP #00H, R1
0000077F 10                   S  		BEQ L241
00000780                         L240:	; bb99
                                 ;     774     {
                                 ;     775         *my_handle->regs.tgrd = 0x00;   // Some channels do not have this.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",775
00000780 EC01                    		MOV.L [R0], R1
00000782 AB19                    		MOV.L 34H[R1], R1
00000784 F81500                  		MOV.W #0000H, [R1]
00000787 6702                    		RTSD #08H
00000789                         L241:	; return
                                 ;     776     }
                                 ;     777 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",777
00000789 6702                    		RTSD #08H
0000078B                         _power_on_off:
                                 		.STACK	_power_on_off=8
                                 ;     778 /* End of function mtu_channel_clear(). */
                                 ;     779 
                                 ;     780 /***********************************************************************************************************************
                                 ;     781 * Function Name: power_on_off
                                 ;     782 * Description  : Switches power to an MTU channel.  Required by FIT spec.
                                 ;     783 * Arguments    : channel -
                                 ;     784 *                   Which channel to use.
                                 ;     785 *                on_or_off -
                                 ;     786 *                   What it says.
                                 ;     787 * Return Value : none
                                 ;     788 ***********************************************************************************************************************/
                                 ;     789 void power_on_off (uint8_t on_or_off)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",789
0000078B 6040                    		SUB #04H, R0
0000078D 8089                    		MOV.B R1, 03H[R0]
0000078F 6611                    		MOV.L #00000001H, R1
                                 ;     790 {
                                 ;     791     R_BSP_RegisterProtectDisable(BSP_REG_PROTECT_LPC_CGC_SWR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",791
00000791 05rrrrrr             A  		BSR _R_BSP_RegisterProtectDisable
00000795                         L243:	; entry.split
00000795 FBEE100008              		MOV.L #00080010H, R14
                                 ;     792 
                                 ;     793     MSTP(MTU) = on_or_off; // All channels are on the same module stop register.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",793
0000079A B089                    		MOVU.B 03H[R0], R1
0000079C ECEF                    		MOV.L [R14], R15
0000079E 7A9F                    		BCLR #09H, R15
000007A0 6C91                    		SHLL #09H, R1
000007A2 76210002                		AND #0200H, R1
000007A6 571F                    		OR R1, R15
000007A8 E3EF                    		MOV.L R15, [R14]
000007AA                         L244:	; entry.split1
000007AA 6611                    		MOV.L #00000001H, R1
                                 ;     794 
                                 ;     795     R_BSP_RegisterProtectEnable(BSP_REG_PROTECT_LPC_CGC_SWR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",795
000007AC 05rrrrrr             A  		BSR _R_BSP_RegisterProtectEnable
000007B0 6701                    		RTSD #04H
000007B2                         _mtu_interrupts_clear:
                                 		.STACK	_mtu_interrupts_clear=12
                                 ;     796 }
                                 ;     797 /* End of function power_on(). */
                                 ;     798 
                                 ;     799 /***********************************************************************************************************************
                                 ;     800 * Function Name: mtu_interrupts_clear
                                 ;     801 * Description  : Clears all pending MTU interrupts for the given channel.
                                 ;     802 * Arguments    : channel -
                                 ;     803 *                 Which channel to clear.
                                 ;     804 * Return Value : none
                                 ;     805 ***********************************************************************************************************************/
                                 ;     806 void mtu_interrupts_clear(uint8_t channel)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",806
000007B2 6080                    		SUB #08H, R0
000007B4 8189                    		MOV.B R1, 07H[R0]
                                 ;     807 {
                                 ;     808     mtu_handle_t       my_handle = g_mtu_handles[channel];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",808
000007B6 FBE2rrrrrrrr            		MOV.L #_g_mtu_handles, R14
000007BC B189                    		MOVU.B 07H[R0], R1
000007BE FE61E1                  		MOV.L [R1,R14], R1
000007C1 E301                    		MOV.L R1, [R0]
000007C3                         L246:	; entry.split
                                 ;     809     uint8_t i;
                                 ;     810 
                                 ;     811     for (i = 0; i < MTU_NUM_TGIS; i++)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",811
000007C3 3C0600                  		MOV.B #00H, 06H[R0]
000007C6 2Err                 B  		BRA L250
000007C8                         L247:	; bb7
                                 ;     812     {
                                 ;     813         if (MTU_NOT_SUPP != g_mtu_tgi_icu_en_masks[channel][i])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",813
000007C8 B189                    		MOVU.B 07H[R0], R1
000007CA 6C21                    		SHLL #02H, R1
000007CC FBE2rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R14
000007D2 4B1E                    		ADD R1, R14
000007D4 B181                    		MOVU.B 06H[R0], R1
000007D6 FECE1E                  		MOVU.B [R14,R1], R14
000007D9 755EFF                  		CMP #0FFH, R14
000007DC 20rr                    		BEQ L249
000007DE                         L248:	; bb8
                                 ;     814         {
                                 ;     815             *(my_handle->regs.ir + i) = 0x00; // Clear the interrupt request bit.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",815
000007DE EC01                    		MOV.L [R0], R1
000007E0 AC11                    		MOV.L 40H[R1], R1
000007E2 660E                    		MOV.L #00000000H, R14
000007E4 B182                    		MOVU.B 06H[R0], R2
000007E6 FE012E                  		MOV.B R14, [R1,R2]
000007E9                         L249:	; bb27
000007E9 B181                    		MOVU.B 06H[R0], R1
000007EB 6211                    		ADD #01H, R1
000007ED 8181                    		MOV.B R1, 06H[R0]
000007EF                         L250:	; bb30
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",811
000007EF B181                    		MOVU.B 06H[R0], R1
000007F1 6141                    		CMP #04H, R1
000007F3 29rr                    		BLT L247
000007F5                         L251:	; return
                                 ;     816         }
                                 ;     817     }
                                 ;     818 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",818
000007F5 6702                    		RTSD #08H
000007F7                         _mtu_interrupts_check:
                                 		.STACK	_mtu_interrupts_check=12
                                 ;     819 /* End of function mtu_interrupts_clear(). */
                                 ;     820 
                                 ;     821 /***********************************************************************************************************************
                                 ;     822 * Function Name: MTU_interrupts_check
                                 ;     823 * Description  : Checks all MTU TGR interrupts for the given channel. Used for polling type operation.
                                 ;     824 * Arguments    : channel -
                                 ;     825 *                 Which channel to check.
                                 ;     826 * Return Value : Zero if all interrupts clear, Bit pattern of any interrupts set.
                                 ;     827 ***********************************************************************************************************************/
                                 ;     828 uint8_t mtu_interrupts_check(uint8_t channel)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",828
000007F7 6080                    		SUB #08H, R0
000007F9 8189                    		MOV.B R1, 07H[R0]
                                 ;     829 {
                                 ;     830     mtu_handle_t       my_handle = g_mtu_handles[channel];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",830
000007FB FBE2rrrrrrrr            		MOV.L #_g_mtu_handles, R14
00000801 B189                    		MOVU.B 07H[R0], R1
00000803 FE61E1                  		MOV.L [R1,R14], R1
00000806 E301                    		MOV.L R1, [R0]
00000808                         L253:	; entry.split
                                 ;     831     uint8_t i;
                                 ;     832     uint8_t int_flags = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",832
00000808 3C0500                  		MOV.B #00H, 05H[R0]
0000080B                         L254:	; entry.split1
                                 ;     833 
                                 ;     834     for (i = 0; i < MTU_NUM_TGIS; i++)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",834
0000080B 3C0400                  		MOV.B #00H, 04H[R0]
0000080E 2Err                 B  		BRA L259
00000810                         L255:	; bb9
                                 ;     835     {
                                 ;     836         if (MTU_NOT_SUPP != g_mtu_tgi_icu_en_masks[channel][i])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",836
00000810 B189                    		MOVU.B 07H[R0], R1
00000812 6C21                    		SHLL #02H, R1
00000814 FBE2rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R14
0000081A 4B1E                    		ADD R1, R14
0000081C B101                    		MOVU.B 04H[R0], R1
0000081E FECE1E                  		MOVU.B [R14,R1], R14
00000821 755EFF                  		CMP #0FFH, R14
00000824 20rr                    		BEQ L258
00000826                         L256:	; bb11
                                 ;     837         {
                                 ;     838             if (*(my_handle->regs.ir + i)) // IR flag is set.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",838
00000826 EC01                    		MOV.L [R0], R1
00000828 AC11                    		MOV.L 40H[R1], R1
0000082A B102                    		MOVU.B 04H[R0], R2
0000082C FEC12E                  		MOVU.B [R1,R2], R14
0000082F 610E                    		CMP #00H, R14
00000831 20rr                    		BEQ L258
00000833                         L257:	; bb12
00000833 6611                    		MOV.L #00000001H, R1
                                 ;     839             {
                                 ;     840                 int_flags |= (1 << i); // Set a flag in the bit position corresponding to the TGR number.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",840
00000835 B102                    		MOVU.B 04H[R0], R2
00000837 FD6221                  		SHLL R2, R1
0000083A 550105                  		OR 05H[R0].UB, R1
0000083D 8109                    		MOV.B R1, 05H[R0]
0000083F                         L258:	; bb44
0000083F B101                    		MOVU.B 04H[R0], R1
00000841 6211                    		ADD #01H, R1
00000843 8101                    		MOV.B R1, 04H[R0]
00000845                         L259:	; bb47
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",834
00000845 B101                    		MOVU.B 04H[R0], R1
00000847 6141                    		CMP #04H, R1
00000849 29rr                    		BLT L255
0000084B                         L260:	; bb53
                                 ;     841             }
                                 ;     842         }
                                 ;     843     }
                                 ;     844 
                                 ;     845     return int_flags;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",845
0000084B C5000506                		MOV.B 05H[R0], 06H[R0]
0000084F B181                    		MOVU.B 06H[R0], R1
00000851                         L261:	; bb53.split
                                 ;     846 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",846
00000851 5B11                    		MOVU.B R1, R1
00000853 6702                    		RTSD #08H
00000855                         _mtu_interrupts_enable:
                                 		.STACK	_mtu_interrupts_enable=16
                                 ;     847 /* End of function mtu_interrupts_clear(). */
                                 ;     848 
                                 ;     849 /***********************************************************************************************************************
                                 ;     850 * Function Name: mtu_interrupts_enable
                                 ;     851 * Description  : Enable all MTU interrupts in ICU for the selected channel that are configured to be used.
                                 ;     852 * Arguments    : channel -
                                 ;     853 *                 Which channel to use.
                                 ;     854 * Return Value : none
                                 ;     855 ***********************************************************************************************************************/
                                 ;     856 void mtu_interrupts_enable(uint8_t channel)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",856
00000855 60C0                    		SUB #0CH, R0
00000857 8289                    		MOV.B R1, 0BH[R0]
                                 ;     857 {
                                 ;     858     mtu_handle_t       my_handle = g_mtu_handles[channel];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",858
00000859 FBE2rrrrrrrr            		MOV.L #_g_mtu_handles, R14
0000085F B289                    		MOVU.B 0BH[R0], R1
00000861 FE61E1                  		MOV.L [R1,R14], R1
00000864 A009                    		MOV.L R1, 04H[R0]
00000866                         L263:	; entry.split
                                 ;     859 
                                 ;     860     if ((MTU_NOT_SUPP != g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_A]) && (g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_A]))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",860
00000866 B289                    		MOVU.B 0BH[R0], R1
00000868 6C21                    		SHLL #02H, R1
0000086A FBE2rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R14
00000870 FECE1E                  		MOVU.B [R14,R1], R14
00000873 755EFF                  		CMP #0FFH, R14
00000876 21rr                    		BNE L265
00000878 2Err                 B  		BRA L267
0000087A                         L264:	; bb6
                                 ;     861     {
                                 ;     862         *my_handle->regs.ien_a |= g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_A];     // Set interrupt enable bit in ICU
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",862
0000087A B289                    		MOVU.B 0BH[R0], R1
0000087C 6C21                    		SHLL #02H, R1
0000087E FBE2rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R14
00000884 FECE1E                  		MOVU.B [R14,R1], R14
00000887 A809                    		MOV.L 04H[R0], R1
00000889 AC19                    		MOV.L 44H[R1], R1
0000088B 541E                    		OR [R1].UB, R14
0000088D C31E                    		MOV.B R14, [R1]
0000088F 2Err                 B  		BRA L269
00000891                         L265:	; bb31
00000891 B289                    		MOVU.B 0BH[R0], R1
00000893 6C21                    		SHLL #02H, R1
00000895 FBE2rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R14
0000089B FECE1E                  		MOVU.B [R14,R1], R14
0000089E 610E                    		CMP #00H, R14
000008A0 10                   S  		BEQ L267
000008A1                         L266:	; bb41
000008A1 F80601                  		MOV.L #00000001H, [R0]
000008A4 08                   S  		BRA L268
000008A5                         L267:	; bb42
000008A5 F80600                  		MOV.L #00000000H, [R0]
000008A8                         L268:	; bb43
000008A8 EC01                    		MOV.L [R0], R1
000008AA 6101                    		CMP #00H, R1
000008AC 21rr                    		BNE L264
000008AE                         L269:	; bb48
                                 ;     863     }
                                 ;     864     if ((MTU_NOT_SUPP != g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_B]) && (g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_B]))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",864
000008AE B289                    		MOVU.B 0BH[R0], R1
000008B0 6C21                    		SHLL #02H, R1
000008B2 FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
000008B8 4B12                    		ADD R1, R2
000008BA B029                    		MOVU.B 01H[R2], R1
000008BC 7551FF                  		CMP #0FFH, R1
000008BF 21rr                    		BNE L271
000008C1 2Err                 B  		BRA L273
000008C3                         L270:	; bb49
                                 ;     865     {
                                 ;     866         *my_handle->regs.ien_b |= g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_B];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",866
000008C3 B289                    		MOVU.B 0BH[R0], R1
000008C5 6C21                    		SHLL #02H, R1
000008C7 FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
000008CD 4B12                    		ADD R1, R2
000008CF B029                    		MOVU.B 01H[R2], R1
000008D1 A80A                    		MOV.L 04H[R0], R2
000008D3 ACA2                    		MOV.L 48H[R2], R2
000008D5 5421                    		OR [R2].UB, R1
000008D7 C321                    		MOV.B R1, [R2]
000008D9 2Err                 B  		BRA L275
000008DB                         L271:	; bb74
000008DB B289                    		MOVU.B 0BH[R0], R1
000008DD 6C21                    		SHLL #02H, R1
000008DF FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R2
000008E5 4B12                    		ADD R1, R2
000008E7 B029                    		MOVU.B 01H[R2], R1
000008E9 6101                    		CMP #00H, R1
000008EB 10                   S  		BEQ L273
000008EC                         L272:	; bb84
000008EC F80601                  		MOV.L #00000001H, [R0]
000008EF 08                   S  		BRA L274
000008F0                         L273:	; bb85
000008F0 F80600                  		MOV.L #00000000H, [R0]
000008F3                         L274:	; bb86
000008F3 EC01                    		MOV.L [R0], R1
000008F5 6101                    		CMP #00H, R1
000008F7 21rr                    		BNE L270
000008F9                         L275:	; bb92
                                 ;     867     }
                                 ;     868     if ((MTU_NOT_SUPP != g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_C]) && (g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_C]))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",868
000008F9 B289                    		MOVU.B 0BH[R0], R1
000008FB 6C21                    		SHLL #02H, R1
000008FD FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
00000903 4B12                    		ADD R1, R2
00000905 B0A1                    		MOVU.B 02H[R2], R1
00000907 7551FF                  		CMP #0FFH, R1
0000090A 21rr                    		BNE L277
0000090C 2Err                 B  		BRA L279
0000090E                         L276:	; bb93
                                 ;     869     {
                                 ;     870         *my_handle->regs.ien_c |= g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_C];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",870
0000090E B289                    		MOVU.B 0BH[R0], R1
00000910 6C21                    		SHLL #02H, R1
00000912 FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
00000918 4B12                    		ADD R1, R2
0000091A B0A1                    		MOVU.B 02H[R2], R1
0000091C A80A                    		MOV.L 04H[R0], R2
0000091E ACAA                    		MOV.L 4CH[R2], R2
00000920 5421                    		OR [R2].UB, R1
00000922 C321                    		MOV.B R1, [R2]
00000924 2Err                 B  		BRA L281
00000926                         L277:	; bb118
00000926 B289                    		MOVU.B 0BH[R0], R1
00000928 6C21                    		SHLL #02H, R1
0000092A FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R2
00000930 4B12                    		ADD R1, R2
00000932 B0A1                    		MOVU.B 02H[R2], R1
00000934 6101                    		CMP #00H, R1
00000936 10                   S  		BEQ L279
00000937                         L278:	; bb128
00000937 F80601                  		MOV.L #00000001H, [R0]
0000093A 08                   S  		BRA L280
0000093B                         L279:	; bb129
0000093B F80600                  		MOV.L #00000000H, [R0]
0000093E                         L280:	; bb130
0000093E EC01                    		MOV.L [R0], R1
00000940 6101                    		CMP #00H, R1
00000942 21rr                    		BNE L276
00000944                         L281:	; bb136
                                 ;     871     }
                                 ;     872     if ((MTU_NOT_SUPP != g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_D]) && (g_mtu_tgi_icu_en_flags[channel][MTU_TIMER_D]))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",872
00000944 B289                    		MOVU.B 0BH[R0], R1
00000946 6C21                    		SHLL #02H, R1
00000948 FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
0000094E 4B12                    		ADD R1, R2
00000950 B0A9                    		MOVU.B 03H[R2], R1
00000952 7551FF                  		CMP #0FFH, R1
00000955 21rr                    		BNE L283
00000957 2Err                 B  		BRA L285
00000959                         L282:	; bb137
                                 ;     873     {
                                 ;     874         *my_handle->regs.ien_d |= g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_D];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",874
00000959 B289                    		MOVU.B 0BH[R0], R1
0000095B 6C21                    		SHLL #02H, R1
0000095D FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
00000963 4B12                    		ADD R1, R2
00000965 B0A9                    		MOVU.B 03H[R2], R1
00000967 A80A                    		MOV.L 04H[R0], R2
00000969 AD22                    		MOV.L 50H[R2], R2
0000096B 5421                    		OR [R2].UB, R1
0000096D C321                    		MOV.B R1, [R2]
0000096F 6703                    		RTSD #0CH
00000971                         L283:	; bb162
00000971 B289                    		MOVU.B 0BH[R0], R1
00000973 6C21                    		SHLL #02H, R1
00000975 FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_flags, R2
0000097B 4B12                    		ADD R1, R2
0000097D B0A9                    		MOVU.B 03H[R2], R1
0000097F 6101                    		CMP #00H, R1
00000981 10                   S  		BEQ L285
00000982                         L284:	; bb172
00000982 F80601                  		MOV.L #00000001H, [R0]
00000985 08                   S  		BRA L286
00000986                         L285:	; bb173
00000986 F80600                  		MOV.L #00000000H, [R0]
00000989                         L286:	; bb174
00000989 EC01                    		MOV.L [R0], R1
0000098B 6101                    		CMP #00H, R1
0000098D 21rr                    		BNE L282
0000098F                         L287:	; return
                                 ;     875     }
                                 ;     876 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",876
0000098F 6703                    		RTSD #0CH
00000991                         _mtu_interrupts_disable:
                                 		.STACK	_mtu_interrupts_disable=12
                                 ;     877 /* End of function mtu_interrupts_enable(). */
                                 ;     878 
                                 ;     879 
                                 ;     880 /***********************************************************************************************************************
                                 ;     881 * Function Name: mtu_interrupts_disable
                                 ;     882 * Description  : Disable all MTU interrupts in ICU for the selected channel.
                                 ;     883 * Arguments    : channel -
                                 ;     884 *                 Which channel to use.
                                 ;     885 * Return Value : none
                                 ;     886 ***********************************************************************************************************************/
                                 ;     887 void mtu_interrupts_disable(uint8_t channel)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",887
00000991 6080                    		SUB #08H, R0
00000993 8189                    		MOV.B R1, 07H[R0]
                                 ;     888 {
                                 ;     889     mtu_handle_t       my_handle = g_mtu_handles[channel];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",889
00000995 FBE2rrrrrrrr            		MOV.L #_g_mtu_handles, R14
0000099B B189                    		MOVU.B 07H[R0], R1
0000099D FE61E1                  		MOV.L [R1,R14], R1
000009A0 E301                    		MOV.L R1, [R0]
000009A2                         L289:	; entry.split
                                 ;     890 
                                 ;     891     if (MTU_NOT_SUPP != g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_A])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",891
000009A2 B189                    		MOVU.B 07H[R0], R1
000009A4 6C21                    		SHLL #02H, R1
000009A6 FBE2rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R14
000009AC FECE1E                  		MOVU.B [R14,R1], R14
000009AF 755EFF                  		CMP #0FFH, R14
000009B2 20rr                    		BEQ L291
000009B4                         L290:	; bb6
                                 ;     892     {
                                 ;     893         *my_handle->regs.ien_a &= ~(g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_A]);  // Clear interrupt enable bit in ICU
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",893
000009B4 B189                    		MOVU.B 07H[R0], R1
000009B6 6C21                    		SHLL #02H, R1
000009B8 FBE2rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R14
000009BE FECE1E                  		MOVU.B [R14,R1], R14
000009C1 7E0E                    		NOT R14
000009C3 EC01                    		MOV.L [R0], R1
000009C5 AC19                    		MOV.L 44H[R1], R1
000009C7 501E                    		AND [R1].UB, R14
000009C9 C31E                    		MOV.B R14, [R1]
000009CB                         L291:	; bb32
                                 ;     894     }
                                 ;     895     if (MTU_NOT_SUPP != g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_B])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",895
000009CB B189                    		MOVU.B 07H[R0], R1
000009CD 6C21                    		SHLL #02H, R1
000009CF FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
000009D5 4B12                    		ADD R1, R2
000009D7 B029                    		MOVU.B 01H[R2], R1
000009D9 7551FF                  		CMP #0FFH, R1
000009DC 20rr                    		BEQ L293
000009DE                         L292:	; bb33
                                 ;     896     {
                                 ;     897         *my_handle->regs.ien_b &= ~(g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_B]);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",897
000009DE B189                    		MOVU.B 07H[R0], R1
000009E0 6C21                    		SHLL #02H, R1
000009E2 FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
000009E8 4B12                    		ADD R1, R2
000009EA B029                    		MOVU.B 01H[R2], R1
000009EC 7E01                    		NOT R1
000009EE EC02                    		MOV.L [R0], R2
000009F0 ACA2                    		MOV.L 48H[R2], R2
000009F2 5021                    		AND [R2].UB, R1
000009F4 C321                    		MOV.B R1, [R2]
000009F6                         L293:	; bb60
                                 ;     898     }
                                 ;     899     if (MTU_NOT_SUPP != g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_C])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",899
000009F6 B189                    		MOVU.B 07H[R0], R1
000009F8 6C21                    		SHLL #02H, R1
000009FA FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
00000A00 4B12                    		ADD R1, R2
00000A02 B0A1                    		MOVU.B 02H[R2], R1
00000A04 7551FF                  		CMP #0FFH, R1
00000A07 20rr                    		BEQ L295
00000A09                         L294:	; bb61
                                 ;     900     {
                                 ;     901         *my_handle->regs.ien_c &= ~(g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_C]);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",901
00000A09 B189                    		MOVU.B 07H[R0], R1
00000A0B 6C21                    		SHLL #02H, R1
00000A0D FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
00000A13 4B12                    		ADD R1, R2
00000A15 B0A1                    		MOVU.B 02H[R2], R1
00000A17 7E01                    		NOT R1
00000A19 EC02                    		MOV.L [R0], R2
00000A1B ACAA                    		MOV.L 4CH[R2], R2
00000A1D 5021                    		AND [R2].UB, R1
00000A1F C321                    		MOV.B R1, [R2]
00000A21                         L295:	; bb88
                                 ;     902     }
                                 ;     903     if (MTU_NOT_SUPP != g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_D])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",903
00000A21 B189                    		MOVU.B 07H[R0], R1
00000A23 6C21                    		SHLL #02H, R1
00000A25 FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
00000A2B 4B12                    		ADD R1, R2
00000A2D B0A9                    		MOVU.B 03H[R2], R1
00000A2F 7551FF                  		CMP #0FFH, R1
00000A32 20rr                    		BEQ L297
00000A34                         L296:	; bb89
                                 ;     904     {
                                 ;     905         *my_handle->regs.ien_d &= ~(g_mtu_tgi_icu_en_masks[channel][MTU_TIMER_D]);  // Clear interrupt enable bit in ICU
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",905
00000A34 B189                    		MOVU.B 07H[R0], R1
00000A36 6C21                    		SHLL #02H, R1
00000A38 FB22rrrrrrrr            		MOV.L #_g_mtu_tgi_icu_en_masks, R2
00000A3E 4B12                    		ADD R1, R2
00000A40 B0A9                    		MOVU.B 03H[R2], R1
00000A42 7E01                    		NOT R1
00000A44 EC02                    		MOV.L [R0], R2
00000A46 AD22                    		MOV.L 50H[R2], R2
00000A48 5021                    		AND [R2].UB, R1
00000A4A C321                    		MOV.B R1, [R2]
00000A4C 6702                    		RTSD #08H
00000A4E                         L297:	; return
                                 ;     906     }
                                 ;     907 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",907
00000A4E 6702                    		RTSD #08H
00000A50                         _mtu_interrupts_group_enable:
                                 		.STACK	_mtu_interrupts_group_enable=8
                                 ;     908 /* End of function mtu_interrupts_disable(). */
                                 ;     909 
                                 ;     910 /***********************************************************************************************************************
                                 ;     911 * Function Name: mtu_interrupts_group_enable
                                 ;     912 * Description  : Enable all MTU interrupts in ICU for the selected channels..
                                 ;     913 * Arguments    : channel -
                                 ;     914 *                 Which channel to use.
                                 ;     915 * Return Value : none
                                 ;     916 ***********************************************************************************************************************/
                                 ;     917 void mtu_interrupts_group_enable(uint8_t group)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",917
00000A50 6040                    		SUB #04H, R0
00000A52 8089                    		MOV.B R1, 03H[R0]
                                 ;     918 {
                                 ;     919     uint8_t i;
                                 ;     920 
                                 ;     921     for (i = 0; i < MTU_CHANNEL_MAX; i++)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",921
00000A54 3C0200                  		MOV.B #00H, 02H[R0]
00000A57 2Err                 B  		BRA L302
00000A59                         L299:	; bb3
                                 ;     922     {
                                 ;     923         if(g_mtu_group_bits[i] & group)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",923
00000A59 B081                    		MOVU.B 02H[R0], R1
00000A5B FBE2rrrrrrrr            		MOV.L #_g_mtu_group_bits, R14
00000A61 FECE1E                  		MOVU.B [R14,R1], R14
00000A64 510E03                  		AND 03H[R0].UB, R14
00000A67 5BEE                    		MOVU.B R14, R14
00000A69 610E                    		CMP #00H, R14
00000A6B 10                   S  		BEQ L301
00000A6C                         L300:	; bb4
                                 ;     924         {
                                 ;     925             mtu_interrupts_enable(i);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",925
00000A6C B081                    		MOVU.B 02H[R0], R1
00000A6E 39rrrr               W  		BSR _mtu_interrupts_enable
00000A71                         L301:	; bb15
00000A71 B081                    		MOVU.B 02H[R0], R1
00000A73 6211                    		ADD #01H, R1
00000A75 8081                    		MOV.B R1, 02H[R0]
00000A77                         L302:	; bb18
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",921
00000A77 B081                    		MOVU.B 02H[R0], R1
00000A79 6151                    		CMP #05H, R1
00000A7B 29rr                    		BLT L299
00000A7D                         L303:	; return
                                 ;     926         }
                                 ;     927     }
                                 ;     928 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",928
00000A7D 6701                    		RTSD #04H
00000A7F                         _mtu_interrupts_group_disable:
                                 		.STACK	_mtu_interrupts_group_disable=8
                                 ;     929 /* End of function mtu_interrupts_group_enable(). */
                                 ;     930 
                                 ;     931 /***********************************************************************************************************************
                                 ;     932 * Function Name: mtu_interrupts_group_disable
                                 ;     933 * Description  : Disable all MTU interrupts in ICU for the selected channels.
                                 ;     934 * Arguments    : group -
                                 ;     935 *                 Which channels to disable.
                                 ;     936 * Return Value : none
                                 ;     937 ***********************************************************************************************************************/
                                 ;     938 void mtu_interrupts_group_disable(uint8_t group)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",938
00000A7F 6040                    		SUB #04H, R0
00000A81 8089                    		MOV.B R1, 03H[R0]
                                 ;     939 {
                                 ;     940     uint8_t i;
                                 ;     941 
                                 ;     942     for (i = 0; i < MTU_CHANNEL_MAX; i++)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",942
00000A83 3C0200                  		MOV.B #00H, 02H[R0]
00000A86 2Err                 B  		BRA L308
00000A88                         L305:	; bb3
                                 ;     943     {
                                 ;     944         if(g_mtu_group_bits[i] & group)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",944
00000A88 B081                    		MOVU.B 02H[R0], R1
00000A8A FBE2rrrrrrrr            		MOV.L #_g_mtu_group_bits, R14
00000A90 FECE1E                  		MOVU.B [R14,R1], R14
00000A93 510E03                  		AND 03H[R0].UB, R14
00000A96 5BEE                    		MOVU.B R14, R14
00000A98 610E                    		CMP #00H, R14
00000A9A 10                   S  		BEQ L307
00000A9B                         L306:	; bb4
                                 ;     945         {
                                 ;     946             mtu_interrupts_disable(i);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",946
00000A9B B081                    		MOVU.B 02H[R0], R1
00000A9D 39rrrr               W  		BSR _mtu_interrupts_disable
00000AA0                         L307:	; bb15
00000AA0 B081                    		MOVU.B 02H[R0], R1
00000AA2 6211                    		ADD #01H, R1
00000AA4 8081                    		MOV.B R1, 02H[R0]
00000AA6                         L308:	; bb18
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",942
00000AA6 B081                    		MOVU.B 02H[R0], R1
00000AA8 6151                    		CMP #05H, R1
00000AAA 29rr                    		BLT L305
00000AAC                         L309:	; return
                                 ;     947         }
                                 ;     948     }
                                 ;     949 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",949
00000AAC 6701                    		RTSD #04H
00000AAE                         _mtu_check_group:
                                 		.STACK	_mtu_check_group=12
                                 ;     950 /* End of function mtu_interrupts_group_disable(). */
                                 ;     951 
                                 ;     952 /***********************************************************************************************************************
                                 ;     953 * Function Name: mtu_check_group
                                 ;     954 * Description  : Checks all MTU channels in the group for open status.
                                 ;     955 * Arguments    : group -
                                 ;     956 *                 Which channels to check.
                                 ;     957 * Return Value : true if all members of group are open, false if any member closed.
                                 ;     958 ***********************************************************************************************************************/
                                 ;     959 bool mtu_check_group(uint8_t group)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",959
00000AAE 6080                    		SUB #08H, R0
00000AB0 8189                    		MOV.B R1, 07H[R0]
                                 ;     960 {
                                 ;     961     uint8_t i;
                                 ;     962 
                                 ;     963     if (0 == group)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",963
00000AB2 B189                    		MOVU.B 07H[R0], R1
00000AB4 6101                    		CMP #00H, R1
00000AB6 18                   S  		BNE L312
00000AB7                         L311:	; bb3
                                 ;     964     {
                                 ;     965         return false; // Group cannot be empty.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",965
00000AB7 3C0400                  		MOV.B #00H, 04H[R0]
00000ABA 2Err                 B  		BRA L322
00000ABC                         L312:	; bb9
                                 ;     966     }
                                 ;     967 
                                 ;     968     for (i = 0; i < MTU_CHANNEL_MAX; i++)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",968
00000ABC 3C0500                  		MOV.B #00H, 05H[R0]
00000ABF 2Err                 B  		BRA L320
00000AC1                         L313:	; bb11
                                 ;     969     {
                                 ;     970         if(g_mtu_group_bits[i] & group)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",970
00000AC1 B109                    		MOVU.B 05H[R0], R1
00000AC3 FBE2rrrrrrrr            		MOV.L #_g_mtu_group_bits, R14
00000AC9 FECE1E                  		MOVU.B [R14,R1], R14
00000ACC 510E07                  		AND 07H[R0].UB, R14
00000ACF 5BEE                    		MOVU.B R14, R14
00000AD1 610E                    		CMP #00H, R14
00000AD3 20rr                    		BEQ L319
00000AD5                         L314:	; bb13
                                 ;     971         {
                                 ;     972             if(!g_mtu_channel_mode[i])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",972
00000AD5 B109                    		MOVU.B 05H[R0], R1
00000AD7 FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_mode, R14
00000ADD FECE1E                  		MOVU.B [R14,R1], R14
00000AE0 610E                    		CMP #00H, R14
00000AE2 18                   S  		BNE L316
00000AE3 08                   S  		BRA L317
00000AE4                         L315:	; bb14
                                 ;     973             {
                                 ;     974                 return false; // Error, channel is closed.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",974
00000AE4 3C0400                  		MOV.B #00H, 04H[R0]
00000AE7 2Err                 B  		BRA L322
00000AE9                         L316:	; bb23
00000AE9 F80600                  		MOV.L #00000000H, [R0]
00000AEC 08                   S  		BRA L318
00000AED                         L317:	; bb24
00000AED F80601                  		MOV.L #00000001H, [R0]
00000AF0                         L318:	; bb25
00000AF0 EC01                    		MOV.L [R0], R1
00000AF2 6101                    		CMP #00H, R1
00000AF4 21rr                    		BNE L315
00000AF6                         L319:	; bb41
00000AF6 B109                    		MOVU.B 05H[R0], R1
00000AF8 6211                    		ADD #01H, R1
00000AFA 8109                    		MOV.B R1, 05H[R0]
00000AFC                         L320:	; bb44
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",968
00000AFC B109                    		MOVU.B 05H[R0], R1
00000AFE 6151                    		CMP #05H, R1
00000B00 29rr                    		BLT L313
00000B02                         L321:	; bb50
                                 ;     975             }
                                 ;     976         }
                                 ;     977     }
                                 ;     978 
                                 ;     979     return true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",979
00000B02 3C0401                  		MOV.B #01H, 04H[R0]
00000B05                         L322:	; bb52
00000B05 C5000406                		MOV.B 04H[R0], 06H[R0]
                                 ;     980 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",980
00000B09 B181                    		MOVU.B 06H[R0], R1
00000B0B 6702                    		RTSD #08H
00000B0D                         __$mtu_isr_common:
                                 		.STACK	__$mtu_isr_common=16
                                 ;     981 /* End of function mtu_check_group(). */
                                 ;     982 
                                 ;     983 /***********************************************************************************************************************
                                 ;     984 * Function Name: mtu_isr_common
                                 ;     985 * Description  :  the common handler for all TGR interrupts.
                                 ;     986 *                 Checks whether the mtu repeats the cycle or needs to stop the timer now.
                                 ;     987 *                 Calls the user defined callback if enabled.
                                 ;     988 * Arguments : channel -
                                 ;     989 *                 Which channel to use.
                                 ;     990 *             tgr -
                                 ;     991 *                 Which TGR had the interrupt.
                                 ;     992 * Return Value : none
                                 ;     993 ***********************************************************************************************************************/
                                 ;     994 void mtu_isr_common(mtu_channel_t channel, mtu_timer_num_t tgr_num)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",994
00000B0D 60C0                    		SUB #0CH, R0
00000B0F A081                    		MOV.L R1, 08H[R0]
00000B11 A00A                    		MOV.L R2, 04H[R0]
                                 ;     995 {
                                 ;     996     /* See if we need to stop the timer now. Only the clear source TGR is allowed to control the oneshot mode. */
                                 ;     997     if ((0 == g_mtu_channel_repeats[channel]) && (tgr_num == g_mtu_channel_clr_src[channel]))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",997
00000B13 FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_repeats, R14
00000B19 A881                    		MOV.L 08H[R0], R1
00000B1B FECE1E                  		MOVU.B [R14,R1], R14
00000B1E 610E                    		CMP #00H, R14
00000B20 20rr                    		BEQ L325
00000B22 2Err                 B  		BRA L327
00000B24                         L324:	; bb3
                                 ;     998     {
                                 ;     999         R_MTU_Control(channel, MTU_CMD_STOP, FIT_NO_PTR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",999
00000B24 A881                    		MOV.L 08H[R0], R1
00000B26 FB3200000010            		MOV.L #10000000H, R3
00000B2C 6612                    		MOV.L #00000001H, R2
00000B2E 39rrrr               W  		BSR _R_MTU_Control
00000B31 2Err                 B  		BRA L329
00000B33                         L325:	; bb11
00000B33 A881                    		MOV.L 08H[R0], R1
00000B35 FBE2rrrrrrrr            		MOV.L #_g_mtu_channel_clr_src, R14
00000B3B FECE1E                  		MOVU.B [R14,R1], R14
00000B3E 06850E01                		CMP 04H[R0].L, R14
00000B42 18                   S  		BNE L327
00000B43                         L326:	; bb19
00000B43 F80601                  		MOV.L #00000001H, [R0]
00000B46 08                   S  		BRA L328
00000B47                         L327:	; bb20
00000B47 F80600                  		MOV.L #00000000H, [R0]
00000B4A                         L328:	; bb21
00000B4A EC01                    		MOV.L [R0], R1
00000B4C 6101                    		CMP #00H, R1
00000B4E 21rr                    		BNE L324
00000B50                         L329:	; bb26
                                 ;    1000     }
                                 ;    1001 
                                 ;    1002     /* Do the callback for this interrupt if it is enabled. */
                                 ;    1003     if (1 == g_mtu_tgr_callbacks[channel][tgr_num])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1003
00000B50 A881                    		MOV.L 08H[R0], R1
00000B52 6C21                    		SHLL #02H, R1
00000B54 FBE2rrrrrrrr            		MOV.L #_g_mtu_tgr_callbacks, R14
00000B5A 4B1E                    		ADD R1, R14
00000B5C A809                    		MOV.L 04H[R0], R1
00000B5E FECE1E                  		MOVU.B [R14,R1], R14
00000B61 611E                    		CMP #01H, R14
00000B63 21rr                    		BNE L334
00000B65                         L330:	; bb27
                                 ;    1004     {
                                 ;    1005         /* Store the event data. */
                                 ;    1006         g_mtu_cb_data[channel].channel = channel;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1006
00000B65 A881                    		MOV.L 08H[R0], R1
00000B67 EF1E                    		MOV.L R1, R14
00000B69 63CE                    		MUL #0CH, R14
00000B6B FBF2rrrrrrrr            		MOV.L #_g_mtu_cb_data, R15
00000B71 4BEF                    		ADD R14, R15
00000B73 E3F1                    		MOV.L R1, [R15]
00000B75                         L331:	; bb27.split
                                 ;    1007         g_mtu_cb_data[channel].timer_num = tgr_num;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1007
00000B75 A881                    		MOV.L 08H[R0], R1
00000B77 63C1                    		MUL #0CH, R1
00000B79 FB22rrrrrrrr            		MOV.L #_g_mtu_cb_data, R2
00000B7F 4B12                    		ADD R1, R2
00000B81 E5020101                		MOV.L 04H[R0], 04H[R2]
00000B85                         L332:	; bb27.split1
                                 ;    1008         /* Get the TGR value.
                                 ;    1009         * Contains the counter value at time of event when doing input capture operation.
                                 ;    1010         * Contains the TGR preset (compare value) when doing compare/match operation. */
                                 ;    1011         g_mtu_cb_data[channel].count = (uint32_t)(*(g_mtu_handles[channel]->regs.tgra + tgr_num));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1011
00000B85 A881                    		MOV.L 08H[R0], R1
00000B87 FBE2rrrrrrrr            		MOV.L #_g_mtu_handles, R14
00000B8D FE61E2                  		MOV.L [R1,R14], R2
00000B90 63C1                    		MUL #0CH, R1
00000B92 FB32rrrrrrrr            		MOV.L #_g_mtu_cb_data, R3
00000B98 4B13                    		ADD R1, R3
00000B9A AAA1                    		MOV.L 28H[R2], R1
00000B9C A80A                    		MOV.L 04H[R0], R2
00000B9E FED211                  		MOVU.W [R2,R1], R1
00000BA1 A0B1                    		MOV.L R1, 08H[R3]
00000BA3                         L333:	; bb27.split2
                                 ;    1012 
                                 ;    1013         /* Call the User defined callback function. */
                                 ;    1014         (*(g_mtu_handles[channel]->p_callback))((void*)&(g_mtu_cb_data[channel])); // Pass the event data.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1014
00000BA3 A882                    		MOV.L 08H[R0], R2
00000BA5 FBE2rrrrrrrr            		MOV.L #_g_mtu_handles, R14
00000BAB FE62EE                  		MOV.L [R2,R14], R14
00000BAE ECEE                    		MOV.L [R14], R14
00000BB0 ECEE                    		MOV.L [R14], R14
00000BB2 63C2                    		MUL #0CH, R2
00000BB4 FB12rrrrrrrr            		MOV.L #_g_mtu_cb_data, R1
00000BBA 4B21                    		ADD R2, R1
00000BBC 7F1E                    		JSR R14
00000BBE 6703                    		RTSD #0CH
00000BC0                         L334:	; return
                                 ;    1015     }
                                 ;    1016 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1016
00000BC0 6703                    		RTSD #0CH
00000BC2                         _mtu_tgia0_isr:
                                 		.STACK	_mtu_tgia0_isr=36
                                 		.RVECTOR	142,_mtu_tgia0_isr
                                 ;    1017 /* End of function mtu_isr_common(). */
                                 ;    1018 
                                 ;    1019 /***********************************************************************************************************************
                                 ;    1020 * Description  : MTU interrupt handler routines.
                                 ;    1021 ***********************************************************************************************************************/
                                 ;    1022 #if MTU_CFG_USE_CH0 == 1
                                 ;    1023     /* MTU0.TGRA input capture/compare match. */
                                 ;    1024     #pragma interrupt (mtu_tgia0_isr(vect = VECT(MTU0, TGIA0)))
                                 ;    1025     void mtu_tgia0_isr(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1025
00000BC2 6EEF                    		PUSHM R14-R15
00000BC4 6E15                    		PUSHM R1-R5
00000BC6 6601                    		MOV.L #00000000H, R1
                                 ;    1026     {
                                 ;    1027         /* Call the common handler for all TGR interrupts. */
                                 ;    1028         mtu_isr_common(MTU_CHANNEL_0, MTU_TIMER_A);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1028
00000BC8 EF12                    		MOV.L R1, R2
00000BCA 39rrrr               W  		BSR __$mtu_isr_common
00000BCD 6F15                    		POPM R1-R5
00000BCF 6FEF                    		POPM R14-R15
00000BD1 7F95                    		RTE
00000BD3                         _mtu_tgib0_isr:
                                 		.STACK	_mtu_tgib0_isr=36
                                 		.RVECTOR	143,_mtu_tgib0_isr
                                 ;    1029     }
                                 ;    1030 
                                 ;    1031     /* MTU0.TGRB input capture/compare match. */
                                 ;    1032     #pragma interrupt (mtu_tgib0_isr(vect = VECT(MTU0, TGIB0)))
                                 ;    1033     void mtu_tgib0_isr(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1033
00000BD3 6EEF                    		PUSHM R14-R15
00000BD5 6E15                    		PUSHM R1-R5
00000BD7 6612                    		MOV.L #00000001H, R2
00000BD9 6601                    		MOV.L #00000000H, R1
                                 ;    1034     {
                                 ;    1035         mtu_isr_common(MTU_CHANNEL_0, MTU_TIMER_B);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1035
00000BDB 39rrrr               W  		BSR __$mtu_isr_common
00000BDE 6F15                    		POPM R1-R5
00000BE0 6FEF                    		POPM R14-R15
00000BE2 7F95                    		RTE
00000BE4                         _mtu_tgic0_isr:
                                 		.STACK	_mtu_tgic0_isr=36
                                 		.RVECTOR	144,_mtu_tgic0_isr
                                 ;    1036     }
                                 ;    1037 
                                 ;    1038     /* MTU0.TGRC input capture/compare match. */
                                 ;    1039     #pragma interrupt (mtu_tgic0_isr(vect = VECT(MTU0, TGIC0)))
                                 ;    1040     void mtu_tgic0_isr(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1040
00000BE4 6EEF                    		PUSHM R14-R15
00000BE6 6E15                    		PUSHM R1-R5
00000BE8 6622                    		MOV.L #00000002H, R2
00000BEA 6601                    		MOV.L #00000000H, R1
                                 ;    1041     {
                                 ;    1042         mtu_isr_common(MTU_CHANNEL_0, MTU_TIMER_C);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1042
00000BEC 39rrrr               W  		BSR __$mtu_isr_common
00000BEF 6F15                    		POPM R1-R5
00000BF1 6FEF                    		POPM R14-R15
00000BF3 7F95                    		RTE
00000BF5                         _mtu_tgid0_isr:
                                 		.STACK	_mtu_tgid0_isr=36
                                 		.RVECTOR	145,_mtu_tgid0_isr
                                 ;    1043     }
                                 ;    1044 
                                 ;    1045     /* MTU0.TGRD input capture/compare match. */
                                 ;    1046     #pragma interrupt (mtu_tgid0_isr(vect = VECT(MTU0, TGID0)))
                                 ;    1047     void mtu_tgid0_isr(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1047
00000BF5 6EEF                    		PUSHM R14-R15
00000BF7 6E15                    		PUSHM R1-R5
00000BF9 6632                    		MOV.L #00000003H, R2
00000BFB 6601                    		MOV.L #00000000H, R1
                                 ;    1048     {
                                 ;    1049         mtu_isr_common(MTU_CHANNEL_0, MTU_TIMER_D);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_mtu_rx\src\r_mtu_rx_common.c",1049
00000BFD 39rrrr               W  		BSR __$mtu_isr_common
00000C00 6F15                    		POPM R1-R5
00000C02 6FEF                    		POPM R14-R15
00000C04 7F95                    		RTE
                                 ;    1050     }
                                 ;    1051 
                                 ;    1052     #ifndef BSP_MCU_RX63_ALL
                                 ;    1053         #if(0)
                                 ;    1054         /* MTU0.TCNT overflow. */
                                 ;    1055         #pragma interrupt (mtu_tciv0_isr(vect = VECT(MTU0, TCIV0)))
                                 ;    1056         void mtu_tciv0_isr(void)
                                 ;    1057         {
                                 ;    1058             //FUTURE: implement this handler.
                                 ;    1059         }
                                 ;    1060         #endif
                                 ;    1061     #endif
                                 ;    1062 #endif
                                 ;    1063 
                                 ;    1064 #if MTU_CFG_USE_CH1 == 1
                                 ;    1065     /* MTU1.TGRA input capture/compare match. */
                                 ;    1066     #pragma interrupt (mtu_tgia1_isr(vect = VECT(MTU1, TGIA1)))
                                 ;    1067     void mtu_tgia1_isr(void)
                                 ;    1068     {
                                 ;    1069         mtu_isr_common(MTU_CHANNEL_1, MTU_TIMER_A);
                                 ;    1070     }
                                 ;    1071 
                                 ;    1072     /* MTU1.TGRB input capture/compare match. */
                                 ;    1073     #pragma interrupt (mtu_tgib1_isr(vect = VECT(MTU1, TGIB1)))
                                 ;    1074     void mtu_tgib1_isr(void)
                                 ;    1075     {
                                 ;    1076         mtu_isr_common(MTU_CHANNEL_1, MTU_TIMER_B);
                                 ;    1077     }
                                 ;    1078 
                                 ;    1079     #ifndef BSP_MCU_RX63_ALL
                                 ;    1080         #if(0)
                                 ;    1081         /* MTU1.TCNT overflow. */
                                 ;    1082         #pragma interrupt (mtu_tciv1_isr(vect = VECT(MTU1, TCIV1)))
                                 ;    1083         void mtu_tciv1_isr(void)
                                 ;    1084         {
                                 ;    1085             //FUTURE: implement this handler.
                                 ;    1086         }
                                 ;    1087 
                                 ;    1088         /* MTU1.TCNT underflow. */
                                 ;    1089         #pragma interrupt (mtu_tciu1_isr(vect = VECT(MTU1, TCIU1)))
                                 ;    1090         void mtu_tciu1_isr(void)
                                 ;    1091         {
                                 ;    1092             //FUTURE: implement this handler.
                                 ;    1093         }
                                 ;    1094         #endif
                                 ;    1095     #endif
                                 ;    1096 #endif
                                 ;    1097 
                                 ;    1098 
                                 ;    1099 #ifdef BSP_MCU_RX63_ALL
                                 ;    1100     #if(0)
                                 ;    1101         #if (MTU_CFG_USE_CH0 == 1) || (MTU_CFG_USE_CH1 == 1)
                                 ;    1102         /* Shared group interrupt channels 0 and 1 overflow/underflow. */
                                 ;    1103         #pragma interrupt (mtu_tciv_0_1_isr(vect=VECT(ICU, GROUP1)))
                                 ;    1104         void mtu_tciv_0_1_isr(void)
                                 ;    1105         {
                                 ;    1106             //FUTURE: implement this handler.
                                 ;    1107         }
                                 ;    1108         #endif
                                 ;    1109     #endif
                                 ;    1110 #endif
                                 ;    1111 
                                 ;    1112 
                                 ;    1113 #if MTU_CFG_USE_CH2 == 1
                                 ;    1114     /* MTU2.TGRA input capture/compare match. */
                                 ;    1115     #pragma interrupt (mtu_tgia2_isr(vect = VECT(MTU2, TGIA2)))
                                 ;    1116     void mtu_tgia2_isr(void)
                                 ;    1117     {
                                 ;    1118         mtu_isr_common(MTU_CHANNEL_2, MTU_TIMER_A);
                                 ;    1119     }
                                 ;    1120 
                                 ;    1121     /* MTU2.TGRB input capture/compare match. */
                                 ;    1122     #pragma interrupt (mtu_tgib2_isr(vect = VECT(MTU2, TGIB2)))
                                 ;    1123     void mtu_tgib2_isr(void)
                                 ;    1124     {
                                 ;    1125         mtu_isr_common(MTU_CHANNEL_2, MTU_TIMER_B);
                                 ;    1126     }
                                 ;    1127 
                                 ;    1128     #ifndef BSP_MCU_RX63_ALL
                                 ;    1129         #if(0)
                                 ;    1130         /* MTU2.TCNT overflow. */
                                 ;    1131         #pragma interrupt (mtu_tciv2_isr(vect = VECT(MTU2, TCIV2)))
                                 ;    1132         void mtu_tciv2_isr(void)
                                 ;    1133         {
                                 ;    1134             //FUTURE: implement this handler.
                                 ;    1135         }
                                 ;    1136 
                                 ;    1137         /* MTU2.TCNT underflow. */
                                 ;    1138         #pragma interrupt (mtu_tciu2_isr(vect = VECT(MTU2, TCIU2)))
                                 ;    1139         void mtu_tciu2_isr(void)
                                 ;    1140         {
                                 ;    1141             //FUTURE: implement this handler.
                                 ;    1142         }
                                 ;    1143         #endif
                                 ;    1144     #endif
                                 ;    1145 #endif
                                 ;    1146 
                                 ;    1147 #if MTU_CFG_USE_CH3 == 1
                                 ;    1148     /* MTU3.TGRA input capture/compare match. */
                                 ;    1149     #pragma interrupt (mtu_tgia3_isr(vect = VECT(MTU3, TGIA3)))
                                 ;    1150     void mtu_tgia3_isr(void)
                                 ;    1151     {
                                 ;    1152         mtu_isr_common(MTU_CHANNEL_3, MTU_TIMER_A);
                                 ;    1153     }
                                 ;    1154 
                                 ;    1155     /* MTU3.TGRB input capture/compare match. */
                                 ;    1156     #pragma interrupt (mtu_tgib3_isr(vect = VECT(MTU3, TGIB3)))
                                 ;    1157     void mtu_tgib3_isr(void)
                                 ;    1158     {
                                 ;    1159         mtu_isr_common(MTU_CHANNEL_3, MTU_TIMER_B);
                                 ;    1160     }
                                 ;    1161 
                                 ;    1162     /* MTU3.TGRC input capture/compare match. */
                                 ;    1163     #pragma interrupt (mtu_tgic3_isr(vect = VECT(MTU3, TGIC3)))
                                 ;    1164     void mtu_tgic3_isr(void)
                                 ;    1165     {
                                 ;    1166         mtu_isr_common(MTU_CHANNEL_3, MTU_TIMER_C);
                                 ;    1167     }
                                 ;    1168 
                                 ;    1169     /* MTU3.TGRD input capture/compare match. */
                                 ;    1170     #pragma interrupt (mtu_tgid3_isr(vect = VECT(MTU3, TGID3)))
                                 ;    1171     void mtu_tgid3_isr(void)
                                 ;    1172     {
                                 ;    1173         mtu_isr_common(MTU_CHANNEL_3, MTU_TIMER_D);
                                 ;    1174     }
                                 ;    1175 
                                 ;    1176     #ifndef BSP_MCU_RX63_ALL
                                 ;    1177         #if(0)
                                 ;    1178             /* MTU3.TCNT overflow. */
                                 ;    1179             #pragma interrupt (mtu_tciv3_isr(vect = VECT(MTU3, TCIV3)))
                                 ;    1180             void mtu_tciv3_isr(void)
                                 ;    1181             {
                                 ;    1182                 //FUTURE: implement this handler.
                                 ;    1183             }
                                 ;    1184         #endif
                                 ;    1185     #endif
                                 ;    1186 #endif
                                 ;    1187 
                                 ;    1188 #ifdef BSP_MCU_RX63_ALL
                                 ;    1189     #if (MTU_CFG_USE_CH2 == 1) || (MTU_CFG_USE_CH3 == 1)
                                 ;    1190         #if(0)
                                 ;    1191             /* Shared group interrupt channels 2 and 3 overflow/underflow. */
                                 ;    1192             #pragma interrupt (mtu_tciv_2_3_isr(vect=VECT(ICU, GROUP2)))
                                 ;    1193             void mtu_tciv_2_3_isr(void)
                                 ;    1194             {
                                 ;    1195                 //FUTURE: implement this handler.
                                 ;    1196             }
                                 ;    1197         #endif
                                 ;    1198     #endif
                                 ;    1199 #endif
                                 ;    1200 
                                 ;    1201 #if MTU_CFG_USE_CH4 == 1
                                 ;    1202     /* MTU4.TGRA input capture/compare match. */
                                 ;    1203     #pragma interrupt (mtu_tgia4_isr(vect = VECT(MTU4, TGIA4)))
                                 ;    1204     void mtu_tgia4_isr(void)
                                 ;    1205     {
                                 ;    1206         mtu_isr_common(MTU_CHANNEL_4, MTU_TIMER_A);
                                 ;    1207     }
                                 ;    1208 
                                 ;    1209     /* MTU4.TGRB input capture/compare match. */
                                 ;    1210     #pragma interrupt (mtu_tgib4_isr(vect = VECT(MTU4, TGIB4)))
                                 ;    1211     void mtu_tgib4_isr(void)
                                 ;    1212     {
                                 ;    1213         mtu_isr_common(MTU_CHANNEL_4, MTU_TIMER_B);
                                 ;    1214     }
                                 ;    1215 
                                 ;    1216     /* MTU4.TGRC input capture/compare match. */
                                 ;    1217     #pragma interrupt (mtu_tgic4_isr(vect = VECT(MTU4, TGIC4)))
                                 ;    1218     void mtu_tgic4_isr(void)
                                 ;    1219     {
                                 ;    1220         mtu_isr_common(MTU_CHANNEL_4, MTU_TIMER_C);
                                 ;    1221     }
                                 ;    1222 
                                 ;    1223     /* MTU4.TGRD input capture/compare match. */
                                 ;    1224     #pragma interrupt (mtu_tgid4_isr(vect = VECT(MTU4, TGID4)))
                                 ;    1225     void mtu_tgid4_isr(void)
                                 ;    1226     {
                                 ;    1227         mtu_isr_common(MTU_CHANNEL_4, MTU_TIMER_D);
                                 ;    1228     }
                                 ;    1229     #if(0)
                                 ;    1230         /* MTU4.TCNT overflow/underflow. */
                                 ;    1231         #pragma interrupt (mtu_tciv4_isr(vect = VECT(MTU4, TCIV4)))
                                 ;    1232         void mtu_tciv4_isr(void)
                                 ;    1233         {
                                 ;    1234             //FUTURE: implement this handler.
                                 ;    1235         }
                                 ;    1236     #endif
                                 ;    1237 #endif
                                 		.SECTION	C,ROMDATA,ALIGN=4
00000000                         _g_mtu_clock_divisors:
00000000 01000000                		.lword	00000001H
00000004 04000000                		.lword	00000004H
00000008 10000000                		.lword	00000010H
0000000C 40000000                		.lword	00000040H
00000010 00010000                		.lword	00000100H
00000014 00040000                		.lword	00000400H
00000018                         _g_mtu0_handle:
00000018 rrrrrrrr                		.lword	_p_callback_mtu0
0000001C rrrrrrrr                		.lword	_mtu0_tmr_settings
00000020 00870800                		.lword	00088700H
00000024 01870800                		.lword	00088701H
00000028 02870800                		.lword	00088702H
0000002C 03870800                		.lword	00088703H
00000030 04870800                		.lword	00088704H
00000034 26870800                		.lword	00088726H
00000038 90860800                		.lword	00088690H
0000003C 06870800                		.lword	00088706H
00000040 08870800                		.lword	00088708H
00000044 0A870800                		.lword	0008870AH
00000048 0C870800                		.lword	0008870CH
0000004C 0E870800                		.lword	0008870EH
00000050 20870800                		.lword	00088720H
00000054 22870800                		.lword	00088722H
00000058 8E700800                		.lword	0008708EH
0000005C 11720800                		.lword	00087211H
00000060 11720800                		.lword	00087211H
00000064 12720800                		.lword	00087212H
00000068 12720800                		.lword	00087212H
0000006C 8E730800                		.lword	0008738EH
00000070 00                      		.byte	00H
00000071 03                      		.byte	03H
00000072 00                      		.byte	00H
00000073 00                      		.byte	0
00000074                         _g_mtu_handles:
00000074 rrrrrrrr                		.lword	_g_mtu0_handle
00000078 00000000                		.lword	00000000H
0000007C 00000000                		.lword	00000000H
00000080 00000000                		.lword	00000000H
00000084 00000000                		.lword	00000000H
                                 		.SECTION	C_1,ROMDATA
00000000                         _g_chnl_clk_divs:
00000000 00010203                		.byte	00H,01H,02H,03H,0FFH,0FFH
         FFFF                    
00000006 00010203                		.byte	00H,01H,02H,03H,06H,0FFH
         06FF                    
0000000C 00010203                		.byte	00H,01H,02H,03H,0FFH,07H
         FF07                    
00000012 00010203                		.byte	00H,01H,02H,03H,04H,05H
         0405                    
00000018 00010203                		.byte	00H,01H,02H,03H,04H,05H
         0405                    
0000001E                         _g_chnl_ext_clks:
0000001E 04050607                		.byte	04H,05H,06H,07H,0FFH
         FF                      
00000023 0405FFFF                		.byte	04H,05H,0FFH,0FFH,07H
         07                      
00000028 040506FF                		.byte	04H,05H,06H,0FFH,0FFH
         FF                      
0000002D 0607FFFF                		.byte	06H,07H,0FFH,0FFH,0FFH
         FF                      
00000032 0607FFFF                		.byte	06H,07H,0FFH,0FFH,0FFH
         FF                      
00000037                         _g_chnl_clear_src:
00000037 2040                    		.byte	" @"
00000039 A0C0                    		.byte	0A0H,0C0H
0000003B 60                      		.byte	"`"
0000003C 000000                  		.byte	00H,00H,00H
0000003F 2040                    		.byte	" @"
00000041 FFFF                    		.byte	0FFH,0FFH
00000043 60                      		.byte	"`"
00000044 000000                  		.byte	00H,00H,00H
00000047 2040                    		.byte	" @"
00000049 FFFF                    		.byte	0FFH,0FFH
0000004B 60                      		.byte	"`"
0000004C 000000                  		.byte	00H,00H,00H
0000004F 2040                    		.byte	" @"
00000051 A0C0                    		.byte	0A0H,0C0H
00000053 60                      		.byte	"`"
00000054 000000                  		.byte	00H,00H,00H
00000057 2040                    		.byte	" @"
00000059 A0C0                    		.byte	0A0H,0C0H
0000005B 60                      		.byte	"`"
0000005C 000000                  		.byte	00H,00H,00H
0000005F                         _g_mtu_tgi_icu_en_masks:
0000005F 40                      		.byte	"@"
00000060 800102                  		.byte	80H,01H,02H
00000063 10                      		.byte	10H
00000064 20                      		.byte	" "
00000065 FFFF                    		.byte	0FFH,0FFH
00000067 40                      		.byte	"@"
00000068 80FFFF                  		.byte	80H,0FFH,0FFH
0000006B 01020408                		.byte	01H,02H,04H,08H
0000006F 10                      		.byte	10H
00000070 2040                    		.byte	" @"
00000072 80                      		.byte	80H
00000073                         _g_mtu_tstr_bits:
00000073 010204                  		.byte	01H,02H,04H
00000076 40                      		.byte	"@"
00000077 80                      		.byte	80H
00000078                         _g_mtu_group_bits:
00000078 010204                  		.byte	01H,02H,04H
0000007B 40                      		.byte	"@"
0000007C 80                      		.byte	80H
                                 		.SECTION	D_1,ROMDATA
00000000                         _g_num_channels_in_use:
00000000 00                      		.byte	00H
00000001                         _g_mtu_channel_mode:
00000001 00                      		.byte	0
00000002 00                      		.byte	0
00000003 00                      		.byte	0
00000004 00                      		.byte	0
00000005 00                      		.byte	0
00000006                         _g_mtu_channel_clr_src:
00000006 00                      		.byte	0
00000007 00                      		.byte	0
00000008 00                      		.byte	0
00000009 00                      		.byte	0
0000000A 00                      		.byte	0
0000000B                         _g_mtu_channel_repeats:
0000000B 00                      		.byte	0
0000000C 00                      		.byte	0
0000000D 00                      		.byte	0
0000000E 00                      		.byte	0
0000000F 00                      		.byte	0
00000010                         _g_mtu_tgi_icu_en_flags:
00000010 00                      		.byte	0
00000011 00                      		.byte	0
00000012 00                      		.byte	0
00000013 00                      		.byte	0
00000014 00                      		.byte	0
00000015 00                      		.byte	0
00000016 00                      		.byte	0
00000017 00                      		.byte	0
00000018 00                      		.byte	0
00000019 00                      		.byte	0
0000001A 00                      		.byte	0
0000001B 00                      		.byte	0
0000001C 00                      		.byte	0
0000001D 00                      		.byte	0
0000001E 00                      		.byte	0
0000001F 00                      		.byte	0
00000020 00                      		.byte	0
00000021 00                      		.byte	0
00000022 00                      		.byte	0
00000023 00                      		.byte	0
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _g_mtu_cb_data:
00000000(0000003CH)              		.blkl	15
0000003C                         _p_callback_mtu0:
0000003C(00000004H)              		.blkl	1
00000040                         _mtu0_tmr_settings:
00000040(0000003CH)              		.blkl	15
                                 		.SECTION	B_1,DATA
00000000                         _g_mtu_tgr_callbacks:
00000000(00000014H)              		.blkb	20
                                 		.swsection	W,stuff
00000000                         L170:
00000000 rrrr                    		.switch		L41-L171
00000002 rrrr                    		.switch		L62-L171
00000004 rrrr                    		.switch		L84-L171
00000006 rrrr                    		.switch		L109-L171
00000008 rrrr                    		.switch		L157-L171
0000000A rrrr                    		.switch		L112-L171
0000000C rrrr                    		.switch		L128-L171
0000000E rrrr                    		.switch		L129-L171
                                 		.SECTION	W,ROMDATA,ALIGN=4
                                 		.SECTION	W_1,ROMDATA
                                 		.SECTION	W_2,ROMDATA,ALIGN=2
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     03294   LINES

Section List

Attr         Size               Name
CODE     0000003078(00000C06H)  P
ROMDATA  0000000136(00000088H)  C
ROMDATA  0000000125(0000007DH)  C_1
ROMDATA  0000000036(00000024H)  D_1
DATA     0000000124(0000007CH)  B
DATA     0000000020(00000014H)  B_1
ROMDATA  0000000000(00000000H)  W
ROMDATA  0000000000(00000000H)  W_1
ROMDATA  0000000016(00000010H)  W_2

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx4D06\$ccrx\r_mtu_rx_common.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\r_mtu_rx_common.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\r_mtu_rx\src\r_mtu_rx_common.obj
