* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Mar 14 14:02:32 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  14-Mar-2017 14:02:32
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=cycle_jogging.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=cycle_jogging.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;cycle_jogging.c
                                 
                                 		.glb	_status_code
                                 		.glb	_cm
                                 		.glb	_mr
                                 		.glb	_cm_jogging_cycle_start
                                 		.glb	_cm_get_units_mode
                                 		.glb	_cm_get_coord_system
                                 		.glb	_cm_get_distance_mode
                                 		.glb	_cm_get_feed_rate_mode
                                 		.glb	_cm_get_feed_rate
                                 		.glb	_cm_get_axis_jerk
                                 		.glb	_cm_set_units_mode
                                 		.glb	_cm_set_distance_mode
                                 		.glb	_cm_set_coord_system
                                 		.glb	_cm_set_feed_rate_mode
                                 		.glb	_cm_get_absolute_position
                                 		.glb	_cm_get_jogging_dest
                                 		.glb	_cm_jogging_callback
                                 		.glb	_cm_get_runtime_busy
                                 		.glb	_mp_flush_planner
                                 		.glb	_cm_request_cycle_start
                                 		.glb	_cm_straight_feed
                                 		.glb	_pow
                                 		.glb	_cm_set_axis_jerk
                                 		.glb	_cm_set_motion_mode
                                 		.glb	_cm_cycle_end
                                 		.glb	_printf
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _cm_jogging_cycle_start:
                                 		.STACK	_cm_jogging_cycle_start=8
                                 ;       1 /*
                                 ;       2  * cycle_jogging.c - jogging cycle extension to canonical_machine.c
                                 ;       3  *
                                 ;       4  * by Mike Estee - Other Machine Company
                                 ;       5  *
                                 ;       6  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       7  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       8  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;       9  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      10  *
                                 ;      11  * As a special exception, you may use this file as part of a software library without
                                 ;      12  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      13  * inline functions from this file, or you compile this file and link it with  other
                                 ;      14  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      15  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      16  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      17  * GNU General Public License.
                                 ;      18  *
                                 ;      19  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      20  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      21  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      22  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      23  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      24  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      25  */
                                 ;      26 
                                 ;      27 #include "tinyg.h"
                                 ;      28 #include "config.h"
                                 ;      29 #include "json_parser.h"
                                 ;      30 #include "text_parser.h"
                                 ;      31 #include "canonical_machine.h"
                                 ;      32 #include "planner.h"
                                 ;      33 #include "util.h"
                                 ;      34 
                                 ;      35 #ifdef __cplusplus
                                 ;      36 extern "C"{
                                 ;      37 #endif
                                 ;      38 
                                 ;      39 /**** Jogging singleton structure ****/
                                 ;      40 
                                 ;      41 struct jmJoggingSingleton {			// persistent jogging runtime variables
                                 ;      42 	// controls for jogging cycle
                                 ;      43 	int8_t axis;					// axis currently being jogged
                                 ;      44 	float dest_pos;					// distance relative to start position to travel
                                 ;      45 	float start_pos;
                                 ;      46 	float velocity_start;			// initial jog feed
                                 ;      47 	float velocity_max;
                                 ;      48 
                                 ;      49 	uint8_t (*func)(int8_t axis);	// binding for callback function state machine
                                 ;      50 
                                 ;      51 	// state saved from gcode model
                                 ;      52 	float saved_feed_rate;			// F setting
                                 ;      53 	uint8_t saved_units_mode;		// G20,G21 global setting
                                 ;      54 	uint8_t saved_coord_system;		// G54 - G59 setting
                                 ;      55 	uint8_t saved_distance_mode;	// G90,G91 global setting
                                 ;      56 	uint8_t saved_feed_rate_mode;   // G93,G94 global setting
                                 ;      57 	float saved_jerk;				// saved and restored for each axis homed
                                 ;      58 };
                                 ;      59 static struct jmJoggingSingleton jog;
                                 ;      60 
                                 ;      61 
                                 ;      62 /**** NOTE: global prototypes and other .h info is located in canonical_machine.h ****/
                                 ;      63 
                                 ;      64 static stat_t _set_jogging_func(uint8_t (*func)(int8_t axis));
                                 ;      65 static stat_t _jogging_axis_start(int8_t axis);
                                 ;      66 static stat_t _jogging_axis_jog(int8_t axis);
                                 ;      67 static stat_t _jogging_finalize_exit(int8_t axis);
                                 ;      68 
                                 ;      69 /*****************************************************************************
                                 ;      70  * cm_jogging_cycle_start()	- jogging cycle using soft limits
                                 ;      71  *
                                 ;      72  */
                                 ;      73 /*	--- Some further details ---
                                 ;      74  *
                                 ;      75  *	Note: When coding a cycle (like this one) you get to perform one queued
                                 ;      76  *	move per entry into the continuation, then you must exit.
                                 ;      77  *
                                 ;      78  *	Another Note: When coding a cycle (like this one) you must wait until
                                 ;      79  *	the last move has actually been queued (or has finished) before declaring
                                 ;      80  *	the cycle to be done. Otherwise there is a nasty race condition in the
                                 ;      81  *	tg_controller() that will accept the next command before the position of
                                 ;      82  *	the final move has been recorded in the Gcode model. That's what the call
                                 ;      83  *	to cm_isbusy() is about.
                                 ;      84  */
                                 ;      85 
                                 ;      86 static stat_t _set_jogging_func(uint8_t (*func)(int8_t axis));
                                 ;      87 static stat_t _jogging_axis_start(int8_t axis);
                                 ;      88 static stat_t _jogging_axis_jog(int8_t axis);
                                 ;      89 static stat_t _jogging_finalize_exit(int8_t axis);
                                 ;      90 
                                 ;      91 stat_t cm_jogging_cycle_start(uint8_t axis)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",91
00000000 6040                    		SUB #04H, R0
00000002 8089                    		MOV.B R1, 03H[R0]
                                 ;      92 {
                                 ;      93 	// save relevant non-axis parameters from Gcode model
                                 ;      94 	jog.saved_units_mode = cm_get_units_mode(ACTIVE_MODEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",94
00000004 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000000A EDE194                  		MOV.L 0250H[R14], R1
0000000D 05rrrrrr             A  		BSR _cm_get_units_mode
00000011 FB22rrrrrrrr            		MOV.L #__$jog, R2
00000017 8721                    		MOV.B R1, 1CH[R2]
00000019                         L14:	; entry.split
                                 ;      95 	jog.saved_coord_system = cm_get_coord_system(ACTIVE_MODEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",95
00000019 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000001F EDE194                  		MOV.L 0250H[R14], R1
00000022 05rrrrrr             A  		BSR _cm_get_coord_system
00000026 FB22rrrrrrrr            		MOV.L #__$jog, R2
0000002C 8729                    		MOV.B R1, 1DH[R2]
0000002E                         L15:	; entry.split1
                                 ;      96 	jog.saved_distance_mode = cm_get_distance_mode(ACTIVE_MODEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",96
0000002E FBE2rrrrrrrr            		MOV.L #_cm, R14
00000034 EDE194                  		MOV.L 0250H[R14], R1
00000037 05rrrrrr             A  		BSR _cm_get_distance_mode
0000003B FB22rrrrrrrr            		MOV.L #__$jog, R2
00000041 87A1                    		MOV.B R1, 1EH[R2]
00000043                         L16:	; entry.split2
                                 ;      97 	jog.saved_feed_rate_mode = cm_get_feed_rate_mode(ACTIVE_MODEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",97
00000043 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000049 EDE194                  		MOV.L 0250H[R14], R1
0000004C 05rrrrrr             A  		BSR _cm_get_feed_rate_mode
00000050 FB22rrrrrrrr            		MOV.L #__$jog, R2
00000056 87A9                    		MOV.B R1, 1FH[R2]
00000058                         L17:	; entry.split3
                                 ;      98 	jog.saved_feed_rate = cm_get_feed_rate(ACTIVE_MODEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",98
00000058 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000005E EDE194                  		MOV.L 0250H[R14], R1
00000061 05rrrrrr             A  		BSR _cm_get_feed_rate
00000065 FB22rrrrrrrr            		MOV.L #__$jog, R2
0000006B A1A1                    		MOV.L R1, 18H[R2]
0000006D                         L18:	; entry.split4
                                 ;      99 	jog.saved_jerk = cm_get_axis_jerk(axis);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",99
0000006D B089                    		MOVU.B 03H[R0], R1
0000006F 05rrrrrr             A  		BSR _cm_get_axis_jerk
00000073 FB22rrrrrrrr            		MOV.L #__$jog, R2
00000079 A221                    		MOV.L R1, 20H[R2]
0000007B                         L19:	; entry.split5
0000007B 6611                    		MOV.L #00000001H, R1
                                 ;     100 
                                 ;     101 	// set working values
                                 ;     102 	cm_set_units_mode(MILLIMETERS);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",102
0000007D 05rrrrrr             A  		BSR _cm_set_units_mode
00000081                         L20:	; entry.split6
00000081 6601                    		MOV.L #00000000H, R1
                                 ;     103 	cm_set_distance_mode(ABSOLUTE_MODE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",103
00000083 05rrrrrr             A  		BSR _cm_set_distance_mode
00000087                         L21:	; entry.split7
00000087 6601                    		MOV.L #00000000H, R1
                                 ;     104 	cm_set_coord_system(ABSOLUTE_COORDS);			// jogging is done in machine coordinates
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",104
00000089 05rrrrrr             A  		BSR _cm_set_coord_system
0000008D                         L22:	; entry.split8
0000008D 6611                    		MOV.L #00000001H, R1
                                 ;     105 	cm_set_feed_rate_mode(UNITS_PER_MINUTE_MODE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",105
0000008F 05rrrrrr             A  		BSR _cm_set_feed_rate_mode
00000093                         L23:	; entry.split9
                                 ;     106 
                                 ;     107 	jog.velocity_start = JOGGING_START_VELOCITY;	// see canonical_machine.h for #define
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",107
00000093 FBE2rrrrrrrr            		MOV.L #__$jog, R14
00000099 F9E20300002041          		MOV.L #41200000H, 0CH[R14]
000000A0                         L24:	; entry.split10
                                 ;     108 	jog.velocity_max = cm.a[axis].velocity_max;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",108
000000A0 B089                    		MOVU.B 03H[R0], R1
000000A2 751138                  		MUL #38H, R1
000000A5 FBE2rrrrrrrr            		MOV.L #_cm, R14
000000AB 4B1E                    		ADD R1, R14
000000AD FBF2rrrrrrrr            		MOV.L #__$jog, R15
000000B3 E5EF3504                		MOV.L 0D4H[R14], 10H[R15]
000000B7                         L25:	; entry.split11
                                 ;     109 
                                 ;     110 	jog.start_pos = cm_get_absolute_position(RUNTIME, axis);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",110
000000B7 B08A                    		MOVU.B 03H[R0], R2
000000B9 FB12rrrrrrrr            		MOV.L #_mr, R1
000000BF 72114001                		ADD #0140H, R1
000000C3 05rrrrrr             A  		BSR _cm_get_absolute_position
000000C7 FB22rrrrrrrr            		MOV.L #__$jog, R2
000000CD A0A1                    		MOV.L R1, 08H[R2]
000000CF                         L26:	; entry.split12
                                 ;     111 	jog.dest_pos = cm_get_jogging_dest();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",111
000000CF 05rrrrrr             A  		BSR _cm_get_jogging_dest
000000D3 FB22rrrrrrrr            		MOV.L #__$jog, R2
000000D9 A029                    		MOV.L R1, 04H[R2]
000000DB                         L27:	; entry.split13
                                 ;     112 
                                 ;     113 	jog.axis = axis;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",113
000000DB FBE2rrrrrrrr            		MOV.L #__$jog, R14
000000E1 C10E03                  		MOV.B 03H[R0], [R14]
000000E4                         L28:	; entry.split14
                                 ;     114 	jog.func = _jogging_axis_start; 				// bind initial processing function
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",114
000000E4 FB12rrrrrrrr            		MOV.L #__$jog, R1
000000EA FB22rrrrrrrr            		MOV.L #__$_jogging_axis_start, R2
000000F0 A11A                    		MOV.L R2, 14H[R1]
000000F2                         L29:	; entry.split15
                                 ;     115 
                                 ;     116 	cm.cycle_state = CYCLE_JOG;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",116
000000F2 FBE2rrrrrrrr            		MOV.L #_cm, R14
000000F8 FAE41E0204              		MOV.B #04H, 021EH[R14]
000000FD                         L30:	; entry.split16
                                 ;     117 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",117
000000FD 3C0200                  		MOV.B #00H, 02H[R0]
00000100 B081                    		MOVU.B 02H[R0], R1
00000102                         L31:	; entry.split17
                                 ;     118 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",118
00000102 5B11                    		MOVU.B R1, R1
00000104 6701                    		RTSD #04H
00000106                         _cm_jogging_callback:
                                 		.STACK	_cm_jogging_callback=8
                                 ;     119 
                                 ;     120 
                                 ;     121 /* Jogging axis moves - these execute in sequence for each axis
                                 ;     122  * cm_jogging_callback() 		- main loop callback for running the jogging cycle
                                 ;     123  *	_set_jogging_func()			- a convenience for setting the next dispatch vector and exiting
                                 ;     124  *	_jogging_axis_start()		- setup and start
                                 ;     125  *	_jogging_axis_jog()			- ramp the jog
                                 ;     126  *	_jogging_axis_move()		- move
                                 ;     127  *	_jogging_finalize_exit()	- back off the cleared limit switch
                                 ;     128  */
                                 ;     129 
                                 ;     130 stat_t cm_jogging_callback(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",130
00000106 6040                    		SUB #04H, R0
                                 ;     131 {
                                 ;     132 	if (cm.cycle_state != CYCLE_JOG) { return (STAT_NOOP); } 		// exit if not in a jogging cycle
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",132
00000108 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000010E 5AEE1E02                		MOVU.B 021EH[R14], R14
00000112 614E                    		CMP #04H, R14
00000114 10                   S  		BEQ L34
00000115                         L33:	; bb1
00000115 3C0203                  		MOV.B #03H, 02H[R0]
00000118 2Err                 B  		BRA L37
0000011A                         L34:	; bb8
                                 ;     133 	if (cm_get_runtime_busy() == true) { return (STAT_EAGAIN); }	// sync to planner move ends
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",133
0000011A 05rrrrrr             A  		BSR _cm_get_runtime_busy
0000011E 6111                    		CMP #01H, R1
00000120 18                   S  		BNE L36
00000121                         L35:	; bb9
00000121 3C0202                  		MOV.B #02H, 02H[R0]
00000124 2Err                 B  		BRA L37
00000126                         L36:	; bb16
                                 ;     134 	return (jog.func(jog.axis));									// execute the current homing move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",134
00000126 FB22rrrrrrrr            		MOV.L #__$jog, R2
0000012C CC21                    		MOV.B [R2], R1
0000012E A92A                    		MOV.L 14H[R2], R2
00000130 7F12                    		JSR R2
00000132 8081                    		MOV.B R1, 02H[R0]
00000134                         L37:	; bb21
00000134 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     135 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",135
00000138 B089                    		MOVU.B 03H[R0], R1
0000013A 6701                    		RTSD #04H
0000013C                         __$_set_jogging_func:
                                 		.STACK	__$_set_jogging_func=12
                                 ;     136 
                                 ;     137 static stat_t _set_jogging_func(stat_t (*func)(int8_t axis))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",137
0000013C 6080                    		SUB #08H, R0
0000013E A009                    		MOV.L R1, 04H[R0]
                                 ;     138 {
                                 ;     139 	jog.func = func;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",139
00000140 FB22rrrrrrrr            		MOV.L #__$jog, R2
00000146 A129                    		MOV.L R1, 14H[R2]
00000148                         L39:	; entry.split
                                 ;     140 	return (STAT_EAGAIN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",140
00000148 3C0302                  		MOV.B #02H, 03H[R0]
0000014B B089                    		MOVU.B 03H[R0], R1
0000014D                         L40:	; entry.split1
                                 ;     141 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",141
0000014D 5B11                    		MOVU.B R1, R1
0000014F 6702                    		RTSD #08H
00000151                         __$_jogging_axis_start:
                                 		.STACK	__$_jogging_axis_start=8
                                 ;     142 
                                 ;     143 static stat_t _jogging_axis_start(int8_t axis)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",143
00000151 6040                    		SUB #04H, R0
00000153 8089                    		MOV.B R1, 03H[R0]
                                 ;     144 {
                                 ;     145 	return (_set_jogging_func(_jogging_axis_jog));		// register the callback for the jog move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",145
00000155 FB12rrrrrrrr            		MOV.L #__$_jogging_axis_jog, R1
0000015B 39rrrr               W  		BSR __$_set_jogging_func
0000015E 8081                    		MOV.B R1, 02H[R0]
00000160 B081                    		MOVU.B 02H[R0], R1
00000162                         L42:	; entry.split
                                 ;     146 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",146
00000162 5B11                    		MOVU.B R1, R1
00000164 6701                    		RTSD #04H
00000166                         __$_jogging_axis_jog:
                                 		.STACK	__$_jogging_axis_jog=100
                                 ;     147 
                                 ;     148 static stat_t _jogging_axis_jog(int8_t axis)			// run the jog move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",148
00000166 7100A0                  		ADD #0FFFFFFA0H, R0
00000169 C7015F                  		MOV.B R1, 5FH[R0]
                                 ;     149 {
                                 ;     150 	float vect[] = {0,0,0,0,0,0};
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",150
0000016C FBE2rrrrrrrr            		MOV.L #_L10, R14
00000172 E4E003                  		MOV.L [R14], 0CH[R0]
00000175 E5E00104                		MOV.L 04H[R14], 10H[R0]
00000179 E5E00205                		MOV.L 08H[R14], 14H[R0]
0000017D E5E00306                		MOV.L 0CH[R14], 18H[R0]
00000181 E5E00407                		MOV.L 10H[R14], 1CH[R0]
00000185 E5E00508                		MOV.L 14H[R14], 20H[R0]
00000189                         L44:	; entry.split
                                 ;     151 	float flags[] = {false, false, false, false, false, false};
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",151
00000189 FBE2rrrrrrrr            		MOV.L #_L11, R14
0000018F E4E009                  		MOV.L [R14], 24H[R0]
00000192 E5E0010A                		MOV.L 04H[R14], 28H[R0]
00000196 E5E0020B                		MOV.L 08H[R14], 2CH[R0]
0000019A E5E0030C                		MOV.L 0CH[R14], 30H[R0]
0000019E E5E0040D                		MOV.L 10H[R14], 34H[R0]
000001A2 E5E0050E                		MOV.L 14H[R14], 38H[R0]
000001A6                         L45:	; entry.split1
                                 ;     152 	flags[axis] = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",152
000001A6 CD015F                  		MOV.B 5FH[R0], R1
000001A9 710E24                  		ADD #24H, R0, R14
000001AC FBF20000803F            		MOV.L #3F800000H, R15
000001B2 FE21EF                  		MOV.L R15, [R1,R14]
000001B5                         L46:	; entry.split2
                                 ;     153 
                                 ;     154 	float velocity = jog.velocity_start;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",154
000001B5 FBE2rrrrrrrr            		MOV.L #__$jog, R14
000001BB E5E0030F                		MOV.L 0CH[R14], 3CH[R0]
000001BF                         L47:	; entry.split3
                                 ;     155 	float direction = jog.start_pos <= jog.dest_pos ? 1. : -1.;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",155
000001BF FB12rrrrrrrr            		MOV.L #__$jog, R1
000001C5 A81A                    		MOV.L 04H[R1], R2
000001C7 FC851202                		FCMP 08H[R1].L, R2
000001CB 29rr                    		BLT L49
000001CD                         L48:	; bb
000001CD F902010000803F          		MOV.L #3F800000H, 04H[R0]
000001D4 08                   S  		BRA L50
000001D5                         L49:	; bb45
000001D5 F90201000080BF          		MOV.L #0BF800000H, 04H[R0]
000001DC                         L50:	; bb46
000001DC E5000110                		MOV.L 04H[R0], 40H[R0]
                                 ;     156 	float delta = abs(jog.dest_pos - jog.start_pos);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",156
000001E0 FB12rrrrrrrr            		MOV.L #__$jog, R1
000001E6 A81A                    		MOV.L 04H[R1], R2
000001E8 FC811202                		FSUB 08H[R1].L, R2
000001EC FC972E                  		FTOI R2, R14
000001EF 7E2E                    		ABS R14
000001F1 FC47E1                  		ITOF R14, R1
000001F4 A409                    		MOV.L R1, 44H[R0]
000001F6                         L51:	; bb46.split
                                 ;     157 
                                 ;     158 	cm.gm.feed_rate = velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",158
000001F6 FBE2rrrrrrrr            		MOV.L #_cm, R14
000001FC E50E0FA5                		MOV.L 3CH[R0], 0294H[R14]
00000200                         L52:	; bb46.split4
                                 ;     159 	mp_flush_planner();									// don't use cm_request_queue_flush() here
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",159
00000200 05rrrrrr             A  		BSR _mp_flush_planner
00000204                         L53:	; bb46.split5
                                 ;     160 	cm_request_cycle_start();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",160
00000204 05rrrrrr             A  		BSR _cm_request_cycle_start
00000208                         L54:	; bb46.split6
                                 ;     161 
                                 ;     162 #if 1
                                 ;     163 	float ramp_dist = 2.0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",163
00000208 F9021200000040          		MOV.L #40000000H, 48H[R0]
0000020F                         L55:	; bb46.split7
                                 ;     164 	float steps = 0.0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",164
0000020F 3E8300                  		MOV.L #00000000H, 4CH[R0]
00000212                         L56:	; bb46.split8
                                 ;     165 	float max_steps = 25;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",165
00000212 F902140000C841          		MOV.L #41C80000H, 50H[R0]
00000219                         L57:	; bb46.split9
                                 ;     166 	float offset = 0.01;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",166
00000219 F902150AD7233C          		MOV.L #3C23D70AH, 54H[R0]
00000220 38rrrr               W  		BRA L66
00000223                         L58:	; bb55
                                 ;     167 	while( delta>ramp_dist && offset < delta && steps < max_steps )
                                 ;     168 	{
                                 ;     169 		vect[axis] = jog.start_pos + offset * direction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",169
00000223 AD09                    		MOV.L 54H[R0], R1
00000225 FC8D0110                		FMUL 40H[R0].L, R1
00000229 FBE2rrrrrrrr            		MOV.L #__$jog, R14
0000022F FC89E102                		FADD 08H[R14].L, R1
00000233 710E0C                  		ADD #0CH, R0, R14
00000236 CD025F                  		MOV.B 5FH[R0], R2
00000239 FE22E1                  		MOV.L R1, [R2,R14]
0000023C                         L59:	; bb55.split
                                 ;     170 		cm.gm.feed_rate = velocity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",170
0000023C FBE2rrrrrrrr            		MOV.L #_cm, R14
00000242 E50E0FA5                		MOV.L 3CH[R0], 0294H[R14]
00000246                         L60:	; bb55.split10
00000246 710224                  		ADD #24H, R0, R2
00000249 71010C                  		ADD #0CH, R0, R1
                                 ;     171 		ritorno(cm_straight_feed(vect, flags));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",171
0000024C 05rrrrrr             A  		BSR _cm_straight_feed
00000250 FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000256 C3E1                    		MOV.B R1, [R14]
00000258 6101                    		CMP #00H, R1
0000025A 20rr                    		BEQ L62
0000025C                         L61:	; bb67
0000025C FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000262 C4E00B                  		MOV.B [R14], 0BH[R0]
00000265 38rrrr               W  		BRA L80
00000268                         L62:	; bb78
                                 ;     172 
                                 ;     173 		steps++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",173
00000268 AC89                    		MOV.L 4CH[R0], R1
0000026A FD72210000803F          		FADD #3F800000H, R1
00000271 A489                    		MOV.L R1, 4CH[R0]
00000273                         L63:	; bb78.split
                                 ;     174 		float scale = pow(10.0, steps/max_steps) / 10.0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",174
00000273 AC8A                    		MOV.L 4CH[R0], R2
00000275 FC910214                		FDIV 50H[R0].L, R2
00000279 FB1200002041            		MOV.L #41200000H, R1
0000027F 05rrrrrr             A  		BSR _pow
00000283 FD724100002041          		FDIV #41200000H, R1
0000028A A581                    		MOV.L R1, 58H[R0]
0000028C                         L64:	; bb78.split11
                                 ;     175 		velocity = jog.velocity_start + (jog.velocity_max - jog.velocity_start) * scale;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",175
0000028C FB12rrrrrrrr            		MOV.L #__$jog, R1
00000292 A89A                    		MOV.L 0CH[R1], R2
00000294 A911                    		MOV.L 10H[R1], R1
00000296 FC8321                  		FSUB R2, R1
00000299 FC8D0116                		FMUL 58H[R0].L, R1
0000029D FC8B12                  		FADD R1, R2
000002A0 A38A                    		MOV.L R2, 3CH[R0]
000002A2                         L65:	; bb78.split12
                                 ;     176 		offset += ramp_dist * steps/max_steps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",176
000002A2 AC81                    		MOV.L 48H[R0], R1
000002A4 FC8D0113                		FMUL 4CH[R0].L, R1
000002A8 FC910114                		FDIV 50H[R0].L, R1
000002AC FC890115                		FADD 54H[R0].L, R1
000002B0 A509                    		MOV.L R1, 54H[R0]
000002B2                         L66:	; bb100
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",167
000002B2 AC81                    		MOV.L 48H[R0], R1
000002B4 FC850111                		FCMP 44H[R0].L, R1
000002B8 26rr                    		BPZ L69
000002BA                         L67:	; bb105
000002BA AD09                    		MOV.L 54H[R0], R1
000002BC FC850111                		FCMP 44H[R0].L, R1
000002C0 26rr                    		BPZ L69
000002C2                         L68:	; bb110
000002C2 F80601                  		MOV.L #00000001H, [R0]
000002C5 08                   S  		BRA L70
000002C6                         L69:	; bb112
000002C6 F80600                  		MOV.L #00000000H, [R0]
000002C9                         L70:	; bb113
000002C9 EC01                    		MOV.L [R0], R1
000002CB 6101                    		CMP #00H, R1
000002CD 20rr                    		BEQ L73
000002CF                         L71:	; bb117
000002CF AC89                    		MOV.L 4CH[R0], R1
000002D1 FC850114                		FCMP 50H[R0].L, R1
000002D5 26rr                    		BPZ L73
000002D7                         L72:	; bb122
000002D7 F80601                  		MOV.L #00000001H, [R0]
000002DA 08                   S  		BRA L74
000002DB                         L73:	; bb123
000002DB F80600                  		MOV.L #00000000H, [R0]
000002DE                         L74:	; bb124
000002DE EC01                    		MOV.L [R0], R1
000002E0 6101                    		CMP #00H, R1
000002E2 3Brrrr               W  		BNE L58
000002E5                         L75:	; bb129
                                 ;     177 	}
                                 ;     178 #else
                                 ;     179     // use a really slow jerk so we ramp up speed
                                 ;     180     // FIXME: need asymmetric accel/deaccel jerk for this to work...
                                 ;     181 //	cm.a[axis].jerk_max = 25;
                                 ;     182 	cm_set_axis_jerk(axis, 25);
                                 ;     183     //cm.a[axis].jerk_accel = 10;
                                 ;     184     //cm.a[axis].jerk_deaccel = 900;
                                 ;     185 #endif
                                 ;     186 
                                 ;     187 	// final move
                                 ;     188 	cm.gm.feed_rate = jog.velocity_max;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",188
000002E5 FBE2rrrrrrrr            		MOV.L #_cm, R14
000002EB FBF2rrrrrrrr            		MOV.L #__$jog, R15
000002F1 E5FE04A5                		MOV.L 10H[R15], 0294H[R14]
000002F5                         L76:	; bb129.split
                                 ;     189 	vect[axis] = jog.dest_pos;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",189
000002F5 FB12rrrrrrrr            		MOV.L #__$jog, R1
000002FB A819                    		MOV.L 04H[R1], R1
000002FD 710E0C                  		ADD #0CH, R0, R14
00000300 CD025F                  		MOV.B 5FH[R0], R2
00000303 FE22E1                  		MOV.L R1, [R2,R14]
00000306                         L77:	; bb129.split13
00000306 710224                  		ADD #24H, R0, R2
00000309 71010C                  		ADD #0CH, R0, R1
                                 ;     190 	ritorno(cm_straight_feed(vect, flags));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",190
0000030C 05rrrrrr             A  		BSR _cm_straight_feed
00000310 FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000316 C3E1                    		MOV.B R1, [R14]
00000318 6101                    		CMP #00H, R1
0000031A 20rr                    		BEQ L79
0000031C                         L78:	; bb137
0000031C FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000322 C4E00B                  		MOV.B [R14], 0BH[R0]
00000325 2Err                 B  		BRA L80
00000327                         L79:	; bb148
                                 ;     191     return (_set_jogging_func(_jogging_finalize_exit));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",191
00000327 FB12rrrrrrrr            		MOV.L #__$_jogging_finalize_exit, R1
0000032D 39rrrr               W  		BSR __$_set_jogging_func
00000330 8289                    		MOV.B R1, 0BH[R0]
00000332                         L80:	; bb151
00000332 C5000B5E                		MOV.B 0BH[R0], 5EH[R0]
                                 ;     192 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",192
00000336 59015E                  		MOVU.B 5EH[R0], R1
00000339 6718                    		RTSD #60H
0000033B                         __$_jogging_finalize_exit:
                                 		.STACK	__$_jogging_finalize_exit=12
                                 ;     193 
                                 ;     194 
                                 ;     195 static stat_t _jogging_finalize_exit(int8_t axis)	// finish a jog
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",195
0000033B 6040                    		SUB #04H, R0
0000033D 8089                    		MOV.B R1, 03H[R0]
                                 ;     196 {
                                 ;     197 	mp_flush_planner(); 							// FIXME: not sure what to do on exit
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",197
0000033F 05rrrrrr             A  		BSR _mp_flush_planner
00000343                         L82:	; entry.split
                                 ;     198 	cm_set_axis_jerk(axis, jog.saved_jerk);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",198
00000343 FB12rrrrrrrr            		MOV.L #__$jog, R1
00000349 AA12                    		MOV.L 20H[R1], R2
0000034B B089                    		MOVU.B 03H[R0], R1
0000034D 05rrrrrr             A  		BSR _cm_set_axis_jerk
00000351                         L83:	; entry.split1
                                 ;     199 	cm_set_coord_system(jog.saved_coord_system);	// restore to work coordinate system
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",199
00000351 FB12rrrrrrrr            		MOV.L #__$jog, R1
00000357 B719                    		MOVU.B 1DH[R1], R1
00000359 05rrrrrr             A  		BSR _cm_set_coord_system
0000035D                         L84:	; entry.split2
                                 ;     200 	cm_set_units_mode(jog.saved_units_mode);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",200
0000035D FB12rrrrrrrr            		MOV.L #__$jog, R1
00000363 B711                    		MOVU.B 1CH[R1], R1
00000365 05rrrrrr             A  		BSR _cm_set_units_mode
00000369                         L85:	; entry.split3
                                 ;     201 	cm_set_distance_mode(jog.saved_distance_mode);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",201
00000369 FB12rrrrrrrr            		MOV.L #__$jog, R1
0000036F B791                    		MOVU.B 1EH[R1], R1
00000371 05rrrrrr             A  		BSR _cm_set_distance_mode
00000375                         L86:	; entry.split4
                                 ;     202 	cm_set_feed_rate_mode(jog.saved_feed_rate_mode);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",202
00000375 FB12rrrrrrrr            		MOV.L #__$jog, R1
0000037B B799                    		MOVU.B 1FH[R1], R1
0000037D 05rrrrrr             A  		BSR _cm_set_feed_rate_mode
00000381                         L87:	; entry.split5
                                 ;     203 	cm.gm.feed_rate = jog.saved_feed_rate;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",203
00000381 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000387 FBF2rrrrrrrr            		MOV.L #__$jog, R15
0000038D E5FE06A5                		MOV.L 18H[R15], 0294H[R14]
00000391                         L88:	; entry.split6
                                 ;     204 	cm_set_motion_mode(MODEL, MOTION_MODE_CANCEL_MOTION_MODE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",204
00000391 FB12rrrrrrrr            		MOV.L #_cm, R1
00000397 72115402                		ADD #0254H, R1
0000039B 6642                    		MOV.L #00000004H, R2
0000039D 05rrrrrr             A  		BSR _cm_set_motion_mode
000003A1                         L89:	; entry.split7
                                 ;     205 	cm_cycle_end();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",205
000003A1 05rrrrrr             A  		BSR _cm_cycle_end
000003A5                         L90:	; entry.split8
                                 ;     206 	cm.cycle_state = CYCLE_OFF;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",206
000003A5 FBE2rrrrrrrr            		MOV.L #_cm, R14
000003AB FAE41E0200              		MOV.B #00H, 021EH[R14]
000003B0                         L91:	; entry.split9
000003B0 6040                    		SUB #04H, R0
                                 ;     207 
                                 ;     208 	printf("{\"jog\":0}\n");
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",208
000003B2 FBE2rrrrrrrr            		MOV.L #_L12, R14
000003B8 E30E                    		MOV.L R14, [R0]
000003BA 05rrrrrr             A  		BSR _printf
000003BE 6240                    		ADD #04H, R0
000003C0                         L92:	; entry.split10
                                 ;     209 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",209
000003C0 3C0200                  		MOV.B #00H, 02H[R0]
000003C3 B081                    		MOVU.B 02H[R0], R1
000003C5                         L93:	; entry.split11
                                 ;     210 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\cycle_jogging.c",210
000003C5 5B11                    		MOVU.B R1, R1
000003C7 6701                    		RTSD #04H
                                 ;     211 
                                 ;     212 /*
                                 ;     213 static stat_t _jogging_error_exit(int8_t axis)
                                 ;     214 {
                                 ;     215 	// Generate the warning message. Since the error exit returns via the jogging callback
                                 ;     216 	// - and not the main controller - it requires its own display processing
                                 ;     217 //	nv_reset_nv_list();
                                 ;     218 	_jogging_finalize_exit(axis);					// clean up
                                 ;     219 	return (STAT_JOGGING_CYCLE_FAILED);				// jogging state
                                 ;     220 }
                                 ;     221 */
                                 ;     222 
                                 ;     223 #ifdef __cplusplus
                                 ;     224 }
                                 ;     225 #endif
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 00                      		.byte	0
00000001 00                      		.byte	0
00000002 00                      		.byte	0
00000003 00                      		.byte	0
00000004 00                      		.byte	0
00000005 00                      		.byte	0
00000006 00                      		.byte	0
00000007 00                      		.byte	0
00000008 00                      		.byte	0
00000009 00                      		.byte	0
0000000A 00                      		.byte	0
0000000B 00                      		.byte	0
0000000C 00                      		.byte	0
0000000D 00                      		.byte	0
0000000E 00                      		.byte	0
0000000F 00                      		.byte	0
00000010 00                      		.byte	0
00000011 00                      		.byte	0
00000012 00                      		.byte	0
00000013 00                      		.byte	0
00000014 00                      		.byte	0
00000015 00                      		.byte	0
00000016 00                      		.byte	0
00000017 00                      		.byte	0
00000018                         _L11:
00000018 00                      		.byte	0
00000019 00                      		.byte	0
0000001A 00                      		.byte	0
0000001B 00                      		.byte	0
0000001C 00                      		.byte	0
0000001D 00                      		.byte	0
0000001E 00                      		.byte	0
0000001F 00                      		.byte	0
00000020 00                      		.byte	0
00000021 00                      		.byte	0
00000022 00                      		.byte	0
00000023 00                      		.byte	0
00000024 00                      		.byte	0
00000025 00                      		.byte	0
00000026 00                      		.byte	0
00000027 00                      		.byte	0
00000028 00                      		.byte	0
00000029 00                      		.byte	0
0000002A 00                      		.byte	0
0000002B 00                      		.byte	0
0000002C 00                      		.byte	0
0000002D 00                      		.byte	0
0000002E 00                      		.byte	0
0000002F 00                      		.byte	0
00000030                         _L12:
00000030 7B                      		.byte	"{"
00000031 22                      		.byte	22H
00000032 6A6F67                  		.byte	"jog"
00000035 22                      		.byte	22H
00000036 3A307D                  		.byte	":0}"
00000039 0A00                    		.byte	0AH,00H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         __$jog:
00000000(00000024H)              		.blkl	9
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00771   LINES

Section List

Attr         Size               Name
CODE     0000000969(000003C9H)  P
ROMDATA  0000000059(0000003BH)  L
DATA     0000000036(00000024H)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx4DB7\$ccrx\cycle_jogging.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\cycle_jogging.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\src\cnc\cycle_jogging.obj
