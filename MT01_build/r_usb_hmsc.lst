* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Mar 14 17:28:24 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  14-Mar-2017 17:28:24
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=r_usb_hmsc.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=r_usb_hmsc.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;r_usb_hmsc.c
                                 
                                 		.glb	_usb_ghmsc_SmpAplProcess
                                 		.glb	_st_usb_fatfs
                                 		.glb	_usb_gBuf
                                 		.glb	_drivemountFlag
                                 		.glb	_xUsbMount
                                 		.glb	_usb_gapl_devicetpl
                                 		.glb	_usb_gvendor_smpl_eptbl
                                 		.glb	_tfat_ptr
                                 		.glb	_usb_cstd_IdleTaskStart
                                 		.glb	_usb_cstd_IdleTask
                                 		.glb	_hmsc_cstd_task_start
                                 		.glb	_usb_hmsc_task_start
                                 		.glb	_usb_apl_task_switch
                                 		.glb	_usb_hapl_task_start
                                 		.glb	_xQueueGenericCreate
                                 		.glb	_R_usb_cstd_GetUsbIpAdr
                                 		.glb	_R_usb_hstd_MgrOpen
                                 		.glb	_R_usb_hstd_HcdOpen
                                 		.glb	_R_usb_hmsc_hub_registration
                                 		.glb	_R_usb_hmsc_driver_start
                                 		.glb	_R_usb_cstd_UsbIpInit
                                 		.glb	_R_usb_cstd_SetTaskPri
                                 		.glb	_usb_hmsc_DummyFunction
                                 		.glb	_usb_hmsc_DriveOpen
                                 		.glb	_usb_hapl_registration
                                 		.glb	_usb_hmsc_apl_init
                                 		.glb	_R_usb_cstd_SndMsg
                                 		.glb	_R_usb_cstd_RelBlk
                                 		.glb	_R_usb_cstd_PgetBlk
                                 		.glb	_R_usb_hmsc_Initialized
                                 		.glb	_R_usb_hmsc_ClassCheck
                                 		.glb	_R_usb_hmsc_DriveClose
                                 		.glb	_R_usb_hstd_DriverRegistration
                                 		.glb	_usb_hmsc_StrgCommandResult
                                 		.glb	_usb_hmsc_SampleAplTask
                                 		.glb	_R_usb_hmsc_SetDevSts
                                 		.glb	_R_usb_cstd_RecMsg
                                 		.glb	_R_usb_hmsc_StrgDriveSearch
                                 		.glb	_f_mount
                                 		.glb	_vTaskDelay
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _usb_cstd_IdleTaskStart:
                                 		.STACK	_usb_cstd_IdleTaskStart=4
                                 ;       1 /*******************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * This software is supplied by Renesas Electronics Corporation and is only
                                 ;       4 * intended for use with Renesas products. No other uses are authorized. This
                                 ;       5 * software is owned by Renesas Electronics Corporation and is protected under
                                 ;       6 * all applicable laws, including copyright laws.
                                 ;       7 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
                                 ;       8 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT
                                 ;       9 * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
                                 ;      10 * AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.
                                 ;      11 * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
                                 ;      12 * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
                                 ;      13 * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR
                                 ;      14 * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE
                                 ;      15 * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      16 * Renesas reserves the right, without notice, to make changes to this software
                                 ;      17 * and to discontinue the availability of this software. By using this software,
                                 ;      18 * you agree to the additional terms and conditions found by accessing the
                                 ;      19 * following link:
                                 ;      20 * http://www.renesas.com/disclaimer
                                 ;      21 * Copyright (C) 2014 Renesas Electronics Corporation
                                 ;      22 * and Renesas Solutions Corp. All rights reserved.
                                 ;      23 *******************************************************************************/
                                 ;      24 /*******************************************************************************
                                 ;      25 * File Name    : r_usb_hmsc_sample.c
                                 ;      26 * Version      : 1.00
                                 ;      27 * Device(s)    : Renesas R5F564MxxDxx
                                 ;      28 * Tool-Chain   : Renesas e2 studio v3.0.1.7 or later
                                 ;      29 *              : C/C++ Compiler Package for RX Family V2.01.00 or later
                                 ;      30 * OS           : None
                                 ;      31 * H/W Platform : Renesas Starter Kit+ RX64M
                                 ;      32 * Description  : Sample code for driving the USB-BASIC-FW and HMSC
                                 ;      33 *******************************************************************************/
                                 ;      34 /*******************************************************************************
                                 ;      35 * History : DD.MM.YYYY Version Description
                                 ;      36 *         : 30.06.2014 1.00    First Release
                                 ;      37 *******************************************************************************/
                                 ;      38 
                                 ;      39 /******************************************************************************
                                 ;      40 Includes   <System Includes> , "Project Includes"
                                 ;      41 ******************************************************************************/
                                 ;      42 #include "r_usb_hmsc.h"         /* USB HMSC Sample Code Header */
                                 ;      43 #include "platform.h"
                                 ;      44 #include "r_usb_basic_if.h"
                                 ;      45 #include "r_usb_hmsc_if.h"
                                 ;      46 #include "ff.h"
                                 ;      47 
                                 ;      48 
                                 ;      49 #ifdef FREE_RTOS_PP
                                 ;      50 #include "FreeRTOS.h"
                                 ;      51 #include "task.h"
                                 ;      52 #endif
                                 ;      53 /*****************************************************************************
                                 ;      54 Macro definitions
                                 ;      55 ******************************************************************************/
                                 ;      56 #define USB_HOST_USBIP_NUM  USB_USBIP_0
                                 ;      57 
                                 ;      58 /******************************************************************************
                                 ;      59 Section    <Section Definition> , "Data Sections"
                                 ;      60 ******************************************************************************/
                                 ;      61 
                                 ;      62 /******************************************************************************
                                 ;      63 Private global variables and functions
                                 ;      64 ******************************************************************************/
                                 ;      65 uint16_t    usb_ghmsc_SmpAplProcess = USB_HMSC_WAIT;
                                 ;      66 extern FATFS  st_usb_fatfs;
                                 ;      67 uint8_t     usb_gBuf[512];
                                 ;      68 bool drivemountFlag = false;
                                 ;      69 SemaphoreHandle_t xUsbMount;
                                 ;      70 
                                 ;      71 
                                 ;      72 const uint16_t usb_gapl_devicetpl[] =
                                 ;      73 {
                                 ;      74     /* Number of tpl table */
                                 ;      75     4,
                                 ;      76     /* Reserved */
                                 ;      77     0,
                                 ;      78     /* Vendor ID  : no-check */
                                 ;      79     USB_NOVENDOR,
                                 ;      80     /* Product ID : no-check */
                                 ;      81     USB_NOPRODUCT,
                                 ;      82 };
                                 ;      83 
                                 ;      84 uint16_t usb_gvendor_smpl_eptbl[] =
                                 ;      85 {
                                 ;      86         USB_PIPE1,
                                 ;      87         USB_NONE | USB_BFREOFF | USB_DBLBON | USB_CNTMDON | USB_NONE | USB_NONE | USB_NONE,
                                 ;      88         USB_NONE,
                                 ;      89         USB_NONE,
                                 ;      90         USB_NONE,
                                 ;      91         USB_CUSE,
                                 ;      92         USB_PIPE1,
                                 ;      93         USB_NONE | USB_BFREOFF | USB_DBLBON | USB_CNTMDON | USB_NONE | USB_NONE | USB_NONE,
                                 ;      94         USB_NONE,
                                 ;      95         USB_NONE,
                                 ;      96         USB_NONE,
                                 ;      97         USB_CUSE,	/* Pipe end */
                                 ;      98         USB_PDTBLEND,
                                 ;      99 };
                                 ;     100 
                                 ;     101 void    usb_cstd_IdleTaskStart(void);
                                 ;     102 void    usb_cstd_IdleTask(USB_VP_INT stacd);
                                 ;     103 void    usb_hmsc_task_start(void);
                                 ;     104 void    usb_apl_task_switch(void);
                                 ;     105 void    usb_hapl_task_start(USB_UTR_t *ptr);
                                 ;     106 void    usb_hmsc_DummyFunction(USB_UTR_t *ptr, uint16_t data1, uint16_t data2);
                                 ;     107 void    usb_hmsc_DriveOpen(USB_UTR_t *ptr, uint16_t addr, uint16_t data2);
                                 ;     108 void    usb_hapl_registration(USB_UTR_t *ptr);
                                 ;     109 void    usb_hmsc_apl_init(USB_UTR_t *ptr);
                                 ;     110 void    usb_hmsc_StrgCommandResult(USB_UTR_t *mess, uint16_t data1, uint16_t data2);
                                 ;     111 void    usb_hmsc_SampleAplTask(void);
                                 ;     112 
                                 ;     113 /******************************************************************************
                                 ;     114 External variables and functions
                                 ;     115 ******************************************************************************/
                                 ;     116 extern USB_UTR_t    tfat_ptr;
                                 ;     117 
                                 ;     118 /*** File System Interface for HMSC ***/
                                 ;     119 extern void     R_usb_hmsc_DriveClose(USB_UTR_t *ptr, uint16_t addr, uint16_t data2);
                                 ;     120 /*****************************************************************************
                                 ;     121 Enumerated Types
                                 ;     122 ******************************************************************************/
                                 ;     123 
                                 ;     124 /******************************************************************************
                                 ;     125 Section    <Section Definition> , "Project Sections"
                                 ;     126 ******************************************************************************/
                                 ;     127 
                                 ;     128 /******************************************************************************
                                 ;     129 Function Name   : usb_cstd_IdleTaskStart
                                 ;     130 Description     : Idle Task Start process
                                 ;     131 Arguments       : none
                                 ;     132 Return value    : none
                                 ;     133 ******************************************************************************/
                                 ;     134 void usb_cstd_IdleTaskStart(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",134
00000000 02                      		RTS
00000001                         _usb_cstd_IdleTask:
                                 		.STACK	_usb_cstd_IdleTask=8
                                 ;     135 {
                                 ;     136 /* Condition compilation by the difference of the devices */
                                 ;     137 #if (USB_CPU_LPW_PP == USB_LPWR_USE_PP)
                                 ;     138     R_usb_cstd_SetTaskPri(USB_IDL_TSK, USB_PRI_6);
                                 ;     139     USB_SND_MSG(USB_IDL_MBX, 0);
                                 ;     140 #endif /* (USB_CPU_LPW_PP == USB_LPWR_USE_PP) */
                                 ;     141 }
                                 ;     142 /******************************************************************************
                                 ;     143 End of function usb_cstd_IdleTaskStart
                                 ;     144 ******************************************************************************/
                                 ;     145 
                                 ;     146 /******************************************************************************
                                 ;     147 Function Name   : usb_cstd_IdleTask
                                 ;     148 Description     : Call Idle Task (sleep sample)
                                 ;     149 Arguments       : USB_VP_INT stacd      : task start code(not use)
                                 ;     150 Return value    : none
                                 ;     151 ******************************************************************************/
                                 ;     152 void usb_cstd_IdleTask(USB_VP_INT stacd)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",152
00000001 6040                    		SUB #04H, R0
00000003 E301                    		MOV.L R1, [R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",154
00000005 6701                    		RTSD #04H
00000007                         _hmsc_cstd_task_start:
                                 		.STACK	_hmsc_cstd_task_start=4
                                 ;     153 {
                                 ;     154 }
                                 ;     155 /******************************************************************************
                                 ;     156 End of function usb_cstd_IdleTask
                                 ;     157 ******************************************************************************/
                                 ;     158 
                                 ;     159 /******************************************************************************
                                 ;     160 Function Name   : hmsc_cstd_task_start
                                 ;     161 Description     : Start task processing.
                                 ;     162 Arguments       : none
                                 ;     163 Return value    : none
                                 ;     164 ******************************************************************************/
                                 ;     165 void hmsc_cstd_task_start( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",165
00000007 6633                    		MOV.L #00000003H, R3
00000009 6602                    		MOV.L #00000000H, R2
0000000B 6611                    		MOV.L #00000001H, R1
                                 ;     166 {
                                 ;     167 	xUsbMount = xSemaphoreCreateBinary();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",167
0000000D 05rrrrrr             A  		BSR _xQueueGenericCreate
00000011 FBE2rrrrrrrr            		MOV.L #_xUsbMount, R14
00000017 E3E1                    		MOV.L R1, [R14]
00000019                         L14:	; entry.split
                                 ;     168 
                                 ;     169     /* Start the Idle task. */
                                 ;     170     usb_cstd_IdleTaskStart();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",170
00000019 39rrrr               W  		BSR _usb_cstd_IdleTaskStart
0000001C                         L15:	; entry.split1
                                 ;     171 
                                 ;     172     /* Start host-related USB drivers. */
                                 ;     173     usb_hmsc_task_start();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",173
0000001C 39rrrr               W  		BSR _usb_hmsc_task_start
0000001F                         L16:	; entry.split2
                                 ;     174 
                                 ;     175         
                                 ;     176     /* Task switching. */
                                 ;     177     usb_apl_task_switch ();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",177
0000001F 39rrrr               W  		BSR _usb_apl_task_switch
00000022 02                      		RTS
00000023                         _usb_hmsc_task_start:
                                 		.STACK	_usb_hmsc_task_start=56
                                 ;     178 }   /* eof usb_cstd_task_start() */
                                 ;     179 /******************************************************************************
                                 ;     180 Function Name   : usb_hmsc_task_start
                                 ;     181 Description     : Start task processing.
                                 ;     182 Arguments       : none
                                 ;     183 Return value    : none
                                 ;     184 ******************************************************************************/
                                 ;     185 void usb_hmsc_task_start(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",185
00000023 7EA6                    		PUSH.L R6
00000025 7100D0                  		ADD #0FFFFFFD0H, R0
00000028 EF01                    		MOV.L R0, R1
                                 ;     186 {
                                 ;     187     /* The USB Communication Structure allocation for this MSC. */
                                 ;     188     USB_UTR_t   utr;
                                 ;     189     /* Pointer to the USB Communication Structure above. */
                                 ;     190     USB_UTR_t*  ptr = &utr;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",190
0000002A A289                    		MOV.L R1, 2CH[R0]
0000002C                         L18:	; entry.split
                                 ;     191 
                                 ;     192     /* Determine which port is host. */
                                 ;     193     ptr->ip = USB_HOST_USBIP_NUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",193
0000002C AA89                    		MOV.L 2CH[R0], R1
0000002E 3D1600                  		MOV.W #0000H, 0CH[R1]
00000031                         L19:	; entry.split1
                                 ;     194 
                                 ;     195     /* If port is used, register the driver etc. */
                                 ;     196     if (USB_NOUSE_PP != ptr->ip )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",196
00000031 AA89                    		MOV.L 2CH[R0], R1
00000033 B991                    		MOVU.W 0CH[R1], R1
00000035 61A1                    		CMP #0AH, R1
00000037 20rr                    		BEQ L30
00000039                         L20:	; bb4
                                 ;     197     {
                                 ;     198         ptr->ipp = R_usb_cstd_GetUsbIpAdr( ptr->ip ); /* Get the USB IP base address. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",198
00000039 AA8E                    		MOV.L 2CH[R0], R6
0000003B B9E1                    		MOVU.W 0CH[R6], R1
0000003D 05rrrrrr             A  		BSR _R_usb_cstd_GetUsbIpAdr
00000041 A0E1                    		MOV.L R1, 08H[R6]
00000043                         L21:	; bb4.split
                                 ;     199 
                                 ;     200         tfat_ptr.ip     = ptr->ip;          /* Set up USB IP number for TFAT system. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",200
00000043 AA89                    		MOV.L 2CH[R0], R1
00000045 FBE2rrrrrrrr            		MOV.L #_tfat_ptr, R14
0000004B D51E0606                		MOV.W 0CH[R1], 0CH[R14]
0000004F                         L22:	; bb4.split2
                                 ;     201         tfat_ptr.ipp    = ptr->ipp;         /* Set up USB IP base address for TFAT. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",201
0000004F AA89                    		MOV.L 2CH[R0], R1
00000051 FBE2rrrrrrrr            		MOV.L #_tfat_ptr, R14
00000057 E51E0202                		MOV.L 08H[R1], 08H[R14]
0000005B                         L23:	; bb4.split3
                                 ;     202 
                                 ;     203         /* Set-up tasks and drivers to use the allocated Comm. structure (for MSC) above. */
                                 ;     204         R_usb_hstd_MgrOpen(ptr);            /* Manager open */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",204
0000005B AA89                    		MOV.L 2CH[R0], R1
0000005D 05rrrrrr             A  		BSR _R_usb_hstd_MgrOpen
00000061                         L24:	; bb4.split4
                                 ;     205         R_usb_hstd_HcdOpen(ptr);            /* Hcd open */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",205
00000061 AA89                    		MOV.L 2CH[R0], R1
00000063 05rrrrrr             A  		BSR _R_usb_hstd_HcdOpen
00000067                         L25:	; bb4.split5
                                 ;     206 
                                 ;     207         usb_hapl_registration( ptr );       /* Host application registration. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",207
00000067 AA89                    		MOV.L 2CH[R0], R1
00000069 39rrrr               W  		BSR _usb_hapl_registration
0000006C                         L26:	; bb4.split6
                                 ;     208         R_usb_hmsc_hub_registration(ptr);   /* Hub registration. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",208
0000006C AA89                    		MOV.L 2CH[R0], R1
0000006E 05rrrrrr             A  		BSR _R_usb_hmsc_hub_registration
00000072                         L27:	; bb4.split7
                                 ;     209         R_usb_hmsc_driver_start( ptr );     /* Host class driver. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",209
00000072 AA89                    		MOV.L 2CH[R0], R1
00000074 05rrrrrr             A  		BSR _R_usb_hmsc_driver_start
00000078                         L28:	; bb4.split8
                                 ;     210         usb_hapl_task_start( ptr );         /* Host application task. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",210
00000078 AA89                    		MOV.L 2CH[R0], R1
0000007A 39rrrr               W  		BSR _usb_hapl_task_start
0000007D                         L29:	; bb4.split9
                                 ;     211 
                                 ;     212         /* Finally, init the HW with the Comm. struct. */
                                 ;     213         R_usb_cstd_UsbIpInit( ptr, USB_HOST_PP );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",213
0000007D AA89                    		MOV.L 2CH[R0], R1
0000007F 6612                    		MOV.L #00000001H, R2
00000081 05rrrrrr             A  		BSR _R_usb_cstd_UsbIpInit
00000085 3F660D                  		RTSD #34H, R6-R6
00000088                         L30:	; return
                                 ;     214     }
                                 ;     215 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",215
00000088 3F660D                  		RTSD #34H, R6-R6
0000008B                         _usb_apl_task_switch:
                                 		.STACK	_usb_apl_task_switch=4
                                 ;     216 /******************************************************************************
                                 ;     217 End of function usb_hmsc_task_start
                                 ;     218 ******************************************************************************/
                                 ;     219 
                                 ;     220 /******************************************************************************
                                 ;     221 Function Name   : usb_apl_task_switch
                                 ;     222 Description     : Non-OS task switch loop.
                                 ;     223 Argument        : none
                                 ;     224 Return value    : none
                                 ;     225 ******************************************************************************/
                                 ;     226 void usb_apl_task_switch(void)
                                 ;     227 {
                                 ;     228 #ifdef FREE_RTOS_PP
                                 ;     229     usb_hmsc_SampleAplTask();                       /* HMSC Sample Task  */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",229
0000008B 39rrrr               W  		BSR _usb_hmsc_SampleAplTask
0000008E 02                      		RTS
0000008F                         _usb_hapl_task_start:
                                 		.STACK	_usb_hapl_task_start=8
                                 ;     230 #else
                                 ;     231     /* Scheduler */
                                 ;     232     R_usb_cstd_Scheduler();
                                 ;     233 
                                 ;     234     /* Check for any task processing requests flags. */
                                 ;     235     if( USB_FLGSET == R_usb_cstd_CheckSchedule() )
                                 ;     236     {
                                 ;     237         R_usb_hstd_HcdTask((USB_VP_INT)0);          /* HCD Task */
                                 ;     238         R_usb_hstd_MgrTask((USB_VP_INT)0);          /* MGR Task */
                                 ;     239         R_usb_hhub_Task((USB_VP_INT)0);             /* HUB Task */
                                 ;     240 
                                 ;     241         R_usb_hmsc_Task();                      /* HMSC Task */
                                 ;     242         R_usb_hmsc_StrgDriveTask();             /* HSTRG Task */
                                 ;     243         usb_hmsc_SampleAplTask();               /* HMSC Sample Task  */
                                 ;     244     }
                                 ;     245     else
                                 ;     246     {
                                 ;     247         /* Idle task - background "sleep". */
                                 ;     248         usb_cstd_IdleTask(0);
                                 ;     249     }
                                 ;     250 #endif /* FREE_RTOS_PP */
                                 ;     251 }
                                 ;     252 /******************************************************************************
                                 ;     253 End of function usb_apl_task_switch
                                 ;     254 ******************************************************************************/
                                 ;     255 
                                 ;     256 /******************************************************************************
                                 ;     257 Function Name   : usb_hapl_task_start
                                 ;     258 Description     : Start up host USB application task.
                                 ;     259 Arguments       : USB_UTR_t *ptr        : The app's USB Comm. Structure.
                                 ;     260 Return value    : none
                                 ;     261 ******************************************************************************/
                                 ;     262 void usb_hapl_task_start(USB_UTR_t *ptr)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",262
0000008F 6040                    		SUB #04H, R0
00000091 E301                    		MOV.L R1, [R0]
00000093 6642                    		MOV.L #00000004H, R2
00000095 6661                    		MOV.L #00000006H, R1
                                 ;     263 {
                                 ;     264     /* Set task priority of HMSC sample application. */
                                 ;     265     R_usb_cstd_SetTaskPri(USB_HMSCSMP_TSK, USB_PRI_4);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",265
00000097 05rrrrrr             A  		BSR _R_usb_cstd_SetTaskPri
0000009B                         L33:	; entry.split
                                 ;     266 
                                 ;     267     /* Clear application using fresh USB Comm. Structure. */
                                 ;     268     usb_hmsc_apl_init(ptr);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",268
0000009B EC01                    		MOV.L [R0], R1
0000009D 39rrrr               W  		BSR _usb_hmsc_apl_init
000000A0 6701                    		RTSD #04H
000000A2                         _usb_hmsc_DummyFunction:
                                 		.STACK	_usb_hmsc_DummyFunction=12
                                 ;     269 }
                                 ;     270 /******************************************************************************
                                 ;     271 End of function usb_hapl_task_start
                                 ;     272 ******************************************************************************/
                                 ;     273 
                                 ;     274 /******************************************************************************
                                 ;     275 Function Name   : usb_hmsc_DummyFunction
                                 ;     276 Description     : dummy function
                                 ;     277 Arguments       : USB_UTR_t *ptr		: The app's USB Comm. Structure.
                                 ;     278                 : uint16_t data1		: not use
                                 ;     279                 : uint16_t data2		: not use
                                 ;     280 Return value    : none
                                 ;     281 ******************************************************************************/
                                 ;     282 void usb_hmsc_DummyFunction(USB_UTR_t *ptr, uint16_t data1, uint16_t data2)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",282
000000A2 6080                    		SUB #08H, R0
000000A4 A009                    		MOV.L R1, 04H[R0]
000000A6 900A                    		MOV.W R2, 02H[R0]
000000A8 D303                    		MOV.W R3, [R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",284
000000AA 6702                    		RTSD #08H
000000AC                         _usb_hmsc_DriveOpen:
                                 		.STACK	_usb_hmsc_DriveOpen=24
                                 ;     283 {
                                 ;     284 }
                                 ;     285 /******************************************************************************
                                 ;     286 End of function usb_hmsc_DummyFunction
                                 ;     287 ******************************************************************************/
                                 ;     288 
                                 ;     289 /******************************************************************************
                                 ;     290 Function Name   : usb_hmsc_DriveOpen
                                 ;     291 Description     : HMSC drive open
                                 ;     292 Arguments       : uint16_t addr :
                                 ;     293                 : uint16_t data2 :
                                 ;     294 Return value    : none
                                 ;     295 ******************************************************************************/
                                 ;     296 void usb_hmsc_DriveOpen(USB_UTR_t *ptr, uint16_t addr, uint16_t data2)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",296
000000AC 7100EC                  		ADD #0FFFFFFECH, R0
000000AF A101                    		MOV.L R1, 10H[R0]
000000B1 918A                    		MOV.W R2, 0EH[R0]
000000B3 9183                    		MOV.W R3, 0CH[R0]
000000B5 EF02                    		MOV.L R0, R2
000000B7 6661                    		MOV.L #00000006H, R1
                                 ;     297 {
                                 ;     298 /* Condition compilation by the difference of the File system */
                                 ;     299     USB_MH_t            p_blf;
                                 ;     300     USB_ER_t            err;
                                 ;     301     USB_CLSINFO_t       *cp;
                                 ;     302 
                                 ;     303     /* Get mem pool blk */
                                 ;     304     if( R_USB_PGET_BLK(USB_HMSCSMP_MPL,&p_blf) == USB_E_OK )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",304
000000B9 05rrrrrr             A  		BSR _R_usb_cstd_PgetBlk
000000BD 6101                    		CMP #00H, R1
000000BF 21rr                    		BNE L45
000000C1                         L36:	; bb7
                                 ;     305     {
                                 ;     306         cp = (USB_CLSINFO_t*)p_blf;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",306
000000C1 E40002                  		MOV.L [R0], 08H[R0]
000000C4                         L37:	; bb7.split
                                 ;     307         cp->msginfo = USB_HMSC_DRIVE_OPEN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",307
000000C4 A881                    		MOV.L 08H[R0], R1
000000C6 F919020310              		MOV.W #1003H, 04H[R1]
000000CB                         L38:	; bb7.split1
                                 ;     308         cp->keyword = addr;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",308
000000CB 9989                    		MOV.W 0EH[R0], R1
000000CD A882                    		MOV.L 08H[R0], R2
000000CF 90A9                    		MOV.W R1, 06H[R2]
000000D1                         L39:	; bb7.split2
                                 ;     309 
                                 ;     310         cp->ip      = ptr->ip;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",310
000000D1 A901                    		MOV.L 10H[R0], R1
000000D3 A882                    		MOV.L 08H[R0], R2
000000D5 D5120606                		MOV.W 0CH[R1], 0CH[R2]
000000D9                         L40:	; bb7.split3
                                 ;     311         cp->ipp     = ptr->ipp;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",311
000000D9 A901                    		MOV.L 10H[R0], R1
000000DB A882                    		MOV.L 08H[R0], R2
000000DD E5120202                		MOV.L 08H[R1], 08H[R2]
000000E1                         L41:	; bb7.split4
                                 ;     312 
                                 ;     313         /* Send message */
                                 ;     314         err = R_USB_SND_MSG( USB_HMSCSMP_MBX, (USB_MSG_t*)p_blf );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",314
000000E1 EC02                    		MOV.L [R0], R2
000000E3 6661                    		MOV.L #00000006H, R1
000000E5 05rrrrrr             A  		BSR _R_usb_cstd_SndMsg
000000E9 A009                    		MOV.L R1, 04H[R0]
000000EB                         L42:	; bb7.split5
                                 ;     315 
                                 ;     316         if(err != USB_E_OK)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",316
000000EB A809                    		MOV.L 04H[R0], R1
000000ED 6101                    		CMP #00H, R1
000000EF 20rr                    		BEQ L46
000000F1                         L43:	; bb30
                                 ;     317         {
                                 ;     318             err = R_USB_REL_BLK(USB_HMSCSMP_MPL,(USB_MH_t)p_blf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",318
000000F1 EC02                    		MOV.L [R0], R2
000000F3 6661                    		MOV.L #00000006H, R1
000000F5 05rrrrrr             A  		BSR _R_usb_cstd_RelBlk
000000F9 A009                    		MOV.L R1, 04H[R0]
000000FB                         L44:	; bb35
                                 ;     319             USB_PRINTF0("### DriveOpen snd_msg error\n");
                                 ;     320             while( 1 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",320
000000FB 2Err                 B  		BRA L44
000000FD                         L45:	; bb43
                                 ;     321         }
                                 ;     322     }
                                 ;     323     else
                                 ;     324     {
                                 ;     325         USB_PRINTF0("### DriveOpen pget_blk error\n");
                                 ;     326         while( 1 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",326
000000FD 2Err                 B  		BRA L45
000000FF                         L46:	; return
                                 ;     327     }
                                 ;     328 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",328
000000FF 6705                    		RTSD #14H
00000101                         _usb_hapl_registration:
                                 		.STACK	_usb_hapl_registration=48
                                 ;     329 /******************************************************************************
                                 ;     330 End of function usb_hmsc_DriveOpen
                                 ;     331 ******************************************************************************/
                                 ;     332 
                                 ;     333 /******************************************************************************
                                 ;     334 Function Name   : usb_hapl_registration
                                 ;     335 Description     : Callback registration.
                                 ;     336 Arguments       : USB_UTR_t *ptr        : The app's USB Comm. Structure.
                                 ;     337 Return value    : none
                                 ;     338 ******************************************************************************/
                                 ;     339 void usb_hapl_registration(USB_UTR_t *ptr)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",339
00000101 7100D4                  		ADD #0FFFFFFD4H, R0
00000104 A281                    		MOV.L R1, 28H[R0]
                                 ;     340 {
                                 ;     341     USB_HCDREG_t    driver;
                                 ;     342 
                                 ;     343     /* Driver registration */
                                 ;     344     driver.ifclass    = (uint16_t)USB_IFCLS_MAS;            /* Use Interface class for MSC. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",344
00000106 3D0308                  		MOV.W #0008H, 06H[R0]
00000109                         L48:	; entry.split
                                 ;     345     driver.tpl        = (uint16_t*)&usb_gapl_devicetpl;     /* Target peripheral list. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",345
00000109 FB12rrrrrrrr            		MOV.L #_usb_gapl_devicetpl, R1
0000010F A081                    		MOV.L R1, 08H[R0]
00000111                         L49:	; entry.split1
                                 ;     346     driver.pipetbl    = (uint16_t*)&usb_gvendor_smpl_eptbl; /* Pipe def. table address. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",346
00000111 FB12rrrrrrrr            		MOV.L #_usb_gvendor_smpl_eptbl, R1
00000117 A089                    		MOV.L R1, 0CH[R0]
00000119                         L50:	; entry.split2
                                 ;     347     driver.classinit  = &R_usb_hmsc_Initialized;            /* Driver init. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",347
00000119 FB12rrrrrrrr            		MOV.L #_R_usb_hmsc_Initialized, R1
0000011F A101                    		MOV.L R1, 10H[R0]
00000121                         L51:	; entry.split3
                                 ;     348     driver.classcheck = &R_usb_hmsc_ClassCheck;             /* Driver check. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",348
00000121 FB12rrrrrrrr            		MOV.L #_R_usb_hmsc_ClassCheck, R1
00000127 A109                    		MOV.L R1, 14H[R0]
00000129                         L52:	; entry.split4
                                 ;     349     driver.devconfig  = &usb_hmsc_DriveOpen;                /* Callback when device is configured. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",349
00000129 FB12rrrrrrrr            		MOV.L #_usb_hmsc_DriveOpen, R1
0000012F A181                    		MOV.L R1, 18H[R0]
00000131                         L53:	; entry.split5
                                 ;     350     driver.devdetach  = &R_usb_hmsc_DriveClose;             /* Callback when device is detached. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",350
00000131 FB12rrrrrrrr            		MOV.L #_R_usb_hmsc_DriveClose, R1
00000137 A189                    		MOV.L R1, 1CH[R0]
00000139                         L54:	; entry.split6
                                 ;     351     driver.devsuspend = &usb_hmsc_DummyFunction;            /* Callback when device is suspended. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",351
00000139 FB12rrrrrrrr            		MOV.L #_usb_hmsc_DummyFunction, R1
0000013F A201                    		MOV.L R1, 20H[R0]
00000141                         L55:	; entry.split7
                                 ;     352     driver.devresume  = &usb_hmsc_DummyFunction;            /* Callback when device is resumed. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",352
00000141 FB12rrrrrrrr            		MOV.L #_usb_hmsc_DummyFunction, R1
00000147 A209                    		MOV.L R1, 24H[R0]
00000149                         L56:	; entry.split8
                                 ;     353 
                                 ;     354     /* Host MSC class driver registration. */
                                 ;     355     R_usb_hstd_DriverRegistration(ptr, &driver);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",355
00000149 AA81                    		MOV.L 28H[R0], R1
0000014B EF02                    		MOV.L R0, R2
0000014D 05rrrrrr             A  		BSR _R_usb_hstd_DriverRegistration
00000151 670B                    		RTSD #2CH
00000153                         _usb_hmsc_apl_init:
                                 		.STACK	_usb_hmsc_apl_init=8
                                 ;     356 }
                                 ;     357 /******************************************************************************
                                 ;     358 End of function usb_hapl_registration
                                 ;     359 ******************************************************************************/
                                 ;     360 
                                 ;     361 /******************************************************************************
                                 ;     362 Function Name   : usb_hmsc_apl_init
                                 ;     363 Description     : Clear application.
                                 ;     364 Arguments       : USB_UTR_t *ptr        : The app's USB Comm. Structure.
                                 ;     365 Return value    : none
                                 ;     366 ******************************************************************************/
                                 ;     367 void usb_hmsc_apl_init(USB_UTR_t *ptr)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",367
00000153 6040                    		SUB #04H, R0
00000155 E301                    		MOV.L R1, [R0]
                                 ;     368 {
                                 ;     369     /* Init this application's drive open sequence state. */
                                 ;     370     usb_ghmsc_SmpAplProcess = USB_HMSC_WAIT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",370
00000157 FBE2rrrrrrrr            		MOV.L #_usb_ghmsc_SmpAplProcess, R14
0000015D F8E90510                		MOV.W #1005H, [R14]
00000161 6701                    		RTSD #04H
00000163                         _usb_hmsc_StrgCommandResult:
                                 		.STACK	_usb_hmsc_StrgCommandResult=28
                                 ;     371 }
                                 ;     372 /******************************************************************************
                                 ;     373 End of function usb_hmsc_apl_init
                                 ;     374 ******************************************************************************/
                                 ;     375 
                                 ;     376 /******************************************************************************
                                 ;     377 Function Name   : usb_hmsc_StrgCommandResult
                                 ;     378 Description     : Callback function of storage drive search
                                 ;     379 Arguments       : USB_UTR_t *mess        : The app's USB Comm. Structure.
                                 ;     380 Return value    : none
                                 ;     381 ******************************************************************************/
                                 ;     382 void usb_hmsc_StrgCommandResult( USB_UTR_t *mess, uint16_t data1, uint16_t data2 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",382
00000163 7100E8                  		ADD #0FFFFFFE8H, R0
00000166 A109                    		MOV.L R1, 14H[R0]
00000168 920A                    		MOV.W R2, 12H[R0]
0000016A 9203                    		MOV.W R3, 10H[R0]
                                 ;     383 {
                                 ;     384     USB_ER_t        err;
                                 ;     385     USB_MH_t        p_blf;
                                 ;     386     USB_CLSINFO_t   *mes;
                                 ;     387     USB_CLSINFO_t   *cp;
                                 ;     388 
                                 ;     389     /* Switch action depending on message. */
                                 ;     390     mes = (USB_CLSINFO_t *)mess;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",390
0000016C E5000502                		MOV.L 14H[R0], 08H[R0]
00000170                         L59:	; entry.split
00000170 6612                    		MOV.L #00000001H, R2
00000172 6601                    		MOV.L #00000000H, R1
                                 ;     391 
                                 ;     392     /* Device status setting = attached. */
                                 ;     393     R_usb_hmsc_SetDevSts(0,(uint16_t)USB_HMSC_DEV_ATT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",393
00000174 05rrrrrr             A  		BSR _R_usb_hmsc_SetDevSts
00000178                         L60:	; entry.split1
00000178 710204                  		ADD #04H, R0, R2
0000017B 6661                    		MOV.L #00000006H, R1
                                 ;     394 
                                 ;     395     /* Application initialization sequence start. */
                                 ;     396 
                                 ;     397     /* Get mem pool blk */
                                 ;     398     if( R_USB_PGET_BLK(USB_HMSCSMP_MPL, &p_blf) == USB_E_OK )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",398
0000017D 05rrrrrr             A  		BSR _R_usb_cstd_PgetBlk
00000181 6101                    		CMP #00H, R1
00000183 21rr                    		BNE L69
00000185                         L61:	; bb9
                                 ;     399     {
                                 ;     400         /* Send message to myself: Drive mount. */
                                 ;     401         cp = (USB_CLSINFO_t*)p_blf;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",401
00000185 E5000103                		MOV.L 04H[R0], 0CH[R0]
00000189                         L62:	; bb9.split
                                 ;     402         cp->msginfo    = USB_HMSC_DRIVEMOUNT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",402
00000189 A889                    		MOV.L 0CH[R0], R1
0000018B F919020010              		MOV.W #1000H, 04H[R1]
00000190                         L63:	; bb9.split2
                                 ;     403         cp->keyword    = mes->keyword;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",403
00000190 A881                    		MOV.L 08H[R0], R1
00000192 A88A                    		MOV.L 0CH[R0], R2
00000194 D5120303                		MOV.W 06H[R1], 06H[R2]
00000198                         L64:	; bb9.split3
                                 ;     404         cp->result     = mes->result;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",404
00000198 A881                    		MOV.L 08H[R0], R1
0000019A A88A                    		MOV.L 0CH[R0], R2
0000019C D5120707                		MOV.W 0EH[R1], 0EH[R2]
000001A0                         L65:	; bb9.split4
                                 ;     405 
                                 ;     406         /* Send message */
                                 ;     407         err = R_USB_SND_MSG(USB_HMSCSMP_MBX, (USB_MSG_t*)p_blf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",407
000001A0 A80A                    		MOV.L 04H[R0], R2
000001A2 6661                    		MOV.L #00000006H, R1
000001A4 05rrrrrr             A  		BSR _R_usb_cstd_SndMsg
000001A8 E301                    		MOV.L R1, [R0]
000001AA                         L66:	; bb9.split5
                                 ;     408         if( err != USB_E_OK )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",408
000001AA EC01                    		MOV.L [R0], R1
000001AC 6101                    		CMP #00H, R1
000001AE 20rr                    		BEQ L70
000001B0                         L67:	; bb28
                                 ;     409         {
                                 ;     410             err = R_USB_REL_BLK(USB_HMSCSMP_MPL, (USB_MH_t)p_blf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",410
000001B0 A80A                    		MOV.L 04H[R0], R2
000001B2 6661                    		MOV.L #00000006H, R1
000001B4 05rrrrrr             A  		BSR _R_usb_cstd_RelBlk
000001B8 E301                    		MOV.L R1, [R0]
000001BA                         L68:	; bb33
                                 ;     411             USB_PRINTF0("### CommandResult snd_msg error\n");
                                 ;     412             while( 1 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",412
000001BA 2Err                 B  		BRA L68
000001BC                         L69:	; bb41
                                 ;     413         }
                                 ;     414     }
                                 ;     415     else
                                 ;     416     {
                                 ;     417         USB_PRINTF0("### CommandResult pget_blk error\n");
                                 ;     418         while( 1 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",418
000001BC 2Err                 B  		BRA L69
000001BE                         L70:	; return
                                 ;     419     }
                                 ;     420 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",420
000001BE 6706                    		RTSD #18H
000001C0                         _usb_hmsc_SampleAplTask:
                                 		.STACK	_usb_hmsc_SampleAplTask=20
                                 ;     421 /******************************************************************************
                                 ;     422 End of function usb_hmsc_StrgCommandResult
                                 ;     423 ******************************************************************************/
                                 ;     424 
                                 ;     425 /******************************************************************************
                                 ;     426 Function Name   : usb_hmsc_SampleAplTask
                                 ;     427 Description     : Sample application task for driving the USB-BASIC-FW and HMSC.
                                 ;     428                 : Received the detection message of the USB device, do sequence
                                 ;     429                 : for mount to the file system.
                                 ;     430 Argument        : none
                                 ;     431 Return value    : none
                                 ;     432 ******************************************************************************/
                                 ;     433 void usb_hmsc_SampleAplTask(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",433
000001C0 7100F0                  		ADD #0FFFFFFF0H, R0
000001C3 2Err                 B  		BRA L83
000001C5                         L72:	; bb12
                                 ;     434 {
                                 ;     435     USB_UTR_t       *mess;
                                 ;     436     USB_ER_t        err;
                                 ;     437     USB_CLSINFO_t   *mes;
                                 ;     438     uint16_t        addr;
                                 ;     439 
                                 ;     440 #ifdef FREE_RTOS_PP
                                 ;     441     for( ;; )
                                 ;     442     {
                                 ;     443 #endif
                                 ;     444     /* Check for incoming application messages. */
                                 ;     445     err = R_USB_TRCV_MSG(USB_HMSCSMP_MBX, (USB_MSG_t**)&mess, (USB_TM_t)5000);
                                 ;     446     if( err != USB_OK )
                                 ;     447     {
                                 ;     448 #ifdef FREE_RTOS_PP
                                 ;     449         continue;
                                 ;     450 #else
                                 ;     451         return;
                                 ;     452 #endif
                                 ;     453     }
                                 ;     454 
                                 ;     455     /* Switch action depending on message. */
                                 ;     456     mes = (USB_CLSINFO_t *)mess;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",456
000001C5 E40002                  		MOV.L [R0], 08H[R0]
000001C8                         L73:	; bb12.split
                                 ;     457     switch( mes->msginfo )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",457
000001C8 A881                    		MOV.L 08H[R0], R1
000001CA B891                    		MOVU.W 04H[R1], R1
000001CC 76010010                		CMP #1000H, R1
000001D0 20rr                    		BEQ L78
000001D2                         L74:	; bb12.split
000001D2 76010310                		CMP #1003H, R1
000001D6 21rr                    		BNE L81
000001D8                         L75:	; bb18
                                 ;     458     {
                                 ;     459     	/* Device detection */
                                 ;     460         case USB_HMSC_DRIVE_OPEN:
                                 ;     461             usb_ghmsc_SmpAplProcess = USB_HMSC_DRIVE_OPEN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",461
000001D8 FBE2rrrrrrrr            		MOV.L #_usb_ghmsc_SmpAplProcess, R14
000001DE F8E90310                		MOV.W #1003H, [R14]
000001E2                         L76:	; bb18.split
                                 ;     462 
                                 ;     463             /* Set device address. */
                                 ;     464             addr = mes->keyword;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",464
000001E2 A881                    		MOV.L 08H[R0], R1
000001E4 D5100307                		MOV.W 06H[R1], 0EH[R0]
000001E8                         L77:	; bb18.split1
                                 ;     465 
                                 ;     466             /* Storage drive search. */
                                 ;     467             R_usb_hmsc_StrgDriveSearch(mess, addr, (USB_CB_t)&usb_hmsc_StrgCommandResult);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",467
000001E8 B98A                    		MOVU.W 0EH[R0], R2
000001EA EC01                    		MOV.L [R0], R1
000001EC FB32rrrrrrrr            		MOV.L #_usb_hmsc_StrgCommandResult, R3
000001F2 05rrrrrr             A  		BSR _R_usb_hmsc_StrgDriveSearch
000001F6 2Err                 B  		BRA L81
000001F8                         L78:	; bb25
000001F8 6603                    		MOV.L #00000000H, R3
                                 ;     468             break;
                                 ;     469         
                                 ;     470             /* Mount to the file system */
                                 ;     471         case USB_HMSC_DRIVEMOUNT:
                                 ;     472         	/* File system media work area memory mount. */
                                 ;     473         	f_mount(&st_usb_fatfs,"",NULL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",473
000001FA FB22rrrrrrrr            		MOV.L #_L10, R2
00000200 FB12rrrrrrrr            		MOV.L #_st_usb_fatfs, R1
00000206 05rrrrrr             A  		BSR _f_mount
0000020A                         L79:	; bb25.split
                                 ;     474             /* Notify the task that the transmission is complete. */
                                 ;     475         //	xTaskNotifyGive( task_main_handle );
                                 ;     476         	drivemountFlag = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",476
0000020A FBE2rrrrrrrr            		MOV.L #_drivemountFlag, R14
00000210 F8E401                  		MOV.B #01H, [R14]
00000213                         L80:	; bb25.split2
                                 ;     477 //    		xSemaphoreGive( xUsbMount );
                                 ;     478 //        	if( res != TFAT_FR_OK )
                                 ;     479 //        	{
                                 ;     480 //        		USB_PRINTF1("R_tfat_f_mount error: %d\n", res);
                                 ;     481 //        	}
                                 ;     482         	/* Send message to myself: Wait. */
                                 ;     483         	usb_ghmsc_SmpAplProcess = USB_HMSC_WAIT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",483
00000213 FBE2rrrrrrrr            		MOV.L #_usb_ghmsc_SmpAplProcess, R14
00000219 F8E90510                		MOV.W #1005H, [R14]
0000021D                         L81:	; bb29
                                 ;     484         	break;
                                 ;     485 
                                 ;     486         case USB_HMSC_WAIT:
                                 ;     487         	break;
                                 ;     488 
                                 ;     489         default:
                                 ;     490         	break;
                                 ;     491     }
                                 ;     492 
                                 ;     493     /* Release message memory from pool. */
                                 ;     494     err = R_USB_REL_BLK(USB_HMSCSMP_MPL,(USB_MH_t)mess);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",494
0000021D EC02                    		MOV.L [R0], R2
0000021F 6661                    		MOV.L #00000006H, R1
00000221 05rrrrrr             A  		BSR _R_usb_cstd_RelBlk
00000225 A009                    		MOV.L R1, 04H[R0]
00000227                         L82:	; bb29.split3
00000227 66A1                    		MOV.L #0000000AH, R1
                                 ;     495     if( err != USB_E_OK )
                                 ;     496     {
                                 ;     497         USB_PRINTF0("### USB Hsmp Task rel_blk error\n");
                                 ;     498     }
                                 ;     499 #ifdef FREE_RTOS_PP
                                 ;     500     vTaskDelay(10);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",500
00000229 05rrrrrr             A  		BSR _vTaskDelay
0000022D                         L83:	; bb42.split
0000022D FB3A8813                		MOV.L #00001388H, R3
00000231 EF02                    		MOV.L R0, R2
00000233 6661                    		MOV.L #00000006H, R1
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",445
00000235 05rrrrrr             A  		BSR _R_usb_cstd_RecMsg
00000239 A009                    		MOV.L R1, 04H[R0]
0000023B                         L84:	; bb42.split4
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\config\r_usb_hmsc.c",446
0000023B A809                    		MOV.L 04H[R0], R1
0000023D 6101                    		CMP #00H, R1
0000023F 21rr                    		BNE L83
00000241 2Err                 B  		BRA L72
                                 ;     501     }
                                 ;     502 #endif
                                 ;     503 }
                                 ;     504 /******************************************************************************
                                 ;     505 End of function usb_hmsc_SampleAplTask
                                 ;     506 ******************************************************************************/
                                 ;     507 
                                 ;     508 /******************************************************************************
                                 ;     509 End of file
                                 ;     510 ******************************************************************************/
                                 		.SECTION	C_2,ROMDATA,ALIGN=2
00000000                         _usb_gapl_devicetpl:
00000000 0400                    		.word	0004H
00000002 0000                    		.word	0000H
00000004 FFFF                    		.word	0FFFFH
00000006 FFFF                    		.word	0FFFFH
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 00                      		.byte	0
                                 		.SECTION	D_2,ROMDATA,ALIGN=2
00000000                         _usb_ghmsc_SmpAplProcess:
00000000 0510                    		.word	1005H
00000002                         _usb_gvendor_smpl_eptbl:
00000002 0100                    		.word	0001H
00000004 0003                    		.word	0300H
00000006 0000                    		.word	0000H
00000008 0000                    		.word	0000H
0000000A 0000                    		.word	0000H
0000000C 0000                    		.word	0000H
0000000E 0100                    		.word	0001H
00000010 0003                    		.word	0300H
00000012 0000                    		.word	0000H
00000014 0000                    		.word	0000H
00000016 0000                    		.word	0000H
00000018 0000                    		.word	0000H
0000001A FFFF                    		.word	0FFFFH
                                 		.SECTION	D_1,ROMDATA
00000000                         _drivemountFlag:
00000000 00                      		.byte	00H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _xUsbMount:
00000000(00000004H)              		.blkl	1
                                 		.SECTION	B_1,DATA
00000000                         _usb_gBuf:
00000000(00000200H)              		.blkb	512
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00986   LINES

Section List

Attr         Size               Name
CODE     0000000579(00000243H)  P
ROMDATA  0000000008(00000008H)  C_2
ROMDATA  0000000001(00000001H)  L
ROMDATA  0000000028(0000001CH)  D_2
ROMDATA  0000000001(00000001H)  D_1
DATA     0000000004(00000004H)  B
DATA     0000000512(00000200H)  B_1

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx4D06\$ccrx\r_usb_hmsc.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\r_usb_hmsc.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\src\config\r_usb_hmsc.obj
