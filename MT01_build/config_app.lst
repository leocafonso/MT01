* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Mon Mar 20 17:54:04 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  20-Mar-2017 17:54:04
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=config_app.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=config_app.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;config_app.c
                                 
                                 		.glb	_nvl
                                 		.glb	_cs
                                 		.glb	_cm
                                 		.glb	_js
                                 		.glb	_txt
                                 		.glb	_st_cfg
                                 		.glb	_sw
                                 		.glb	_pwm
                                 		.glb	_sr
                                 		.glb	_qr
                                 		.glb	_cfg
                                 		.glb	_cfgArray
                                 		.glb	_hw_print_fb
                                 		.glb	_get_flt
                                 		.glb	_set_nul
                                 		.glb	_hw_print_fv
                                 		.glb	_hw_print_hp
                                 		.glb	_set_flt
                                 		.glb	_hw_print_hv
                                 		.glb	_hw_set_hv
                                 		.glb	_hw_print_id
                                 		.glb	_hw_get_id
                                 		.glb	_cm_print_line
                                 		.glb	_cm_get_mline
                                 		.glb	_set_int
                                 		.glb	_cm_get_line
                                 		.glb	_cm_print_vel
                                 		.glb	_cm_get_vel
                                 		.glb	_cm_print_feed
                                 		.glb	_cm_get_feed
                                 		.glb	_cm_print_stat
                                 		.glb	_cm_get_stat
                                 		.glb	_cm_print_macs
                                 		.glb	_cm_get_macs
                                 		.glb	_cm_print_cycs
                                 		.glb	_cm_get_cycs
                                 		.glb	_cm_print_mots
                                 		.glb	_cm_get_mots
                                 		.glb	_cm_print_hold
                                 		.glb	_cm_get_hold
                                 		.glb	_cm_print_unit
                                 		.glb	_cm_get_unit
                                 		.glb	_cm_print_coor
                                 		.glb	_cm_get_coor
                                 		.glb	_cm_print_momo
                                 		.glb	_cm_get_momo
                                 		.glb	_cm_print_plan
                                 		.glb	_cm_get_plan
                                 		.glb	_cm_print_path
                                 		.glb	_cm_get_path
                                 		.glb	_cm_print_dist
                                 		.glb	_cm_get_dist
                                 		.glb	_cm_print_frmo
                                 		.glb	_cm_get_frmo
                                 		.glb	_cm_print_tool
                                 		.glb	_cm_get_toolv
                                 		.glb	_cm_print_mpo
                                 		.glb	_cm_get_mpo
                                 		.glb	_cm_print_pos
                                 		.glb	_cm_get_pos
                                 		.glb	_cm_print_ofs
                                 		.glb	_cm_get_ofs
                                 		.glb	_cm_print_home
                                 		.glb	_cm_get_home
                                 		.glb	_cm_run_home
                                 		.glb	_get_ui8
                                 		.glb	_tx_print_nul
                                 		.glb	_get_nul
                                 		.glb	_cm_run_jogx
                                 		.glb	_cm_run_jogy
                                 		.glb	_cm_run_jogz
                                 		.glb	_cm_run_joga
                                 		.glb	_st_print_pwr
                                 		.glb	_st_get_pwr
                                 		.glb	_sr_print_sr
                                 		.glb	_sr_get
                                 		.glb	_sr_set
                                 		.glb	_qr_print_qr
                                 		.glb	_qr_get
                                 		.glb	_qr_print_qi
                                 		.glb	_qi_get
                                 		.glb	_qr_print_qo
                                 		.glb	_qo_get
                                 		.glb	_rpt_er
                                 		.glb	_cm_run_qf
                                 		.glb	_tx_print_int
                                 		.glb	_tx_print_str
                                 		.glb	_cm_clear
                                 		.glb	_help_test
                                 		.glb	_run_test
                                 		.glb	_help_config
                                 		.glb	_st_print_ma
                                 		.glb	_set_ui8
                                 		.glb	_st_print_sa
                                 		.glb	_st_set_sa
                                 		.glb	_st_print_tr
                                 		.glb	_st_set_tr
                                 		.glb	_st_print_mi
                                 		.glb	_st_set_mi
                                 		.glb	_st_print_po
                                 		.glb	_set_01
                                 		.glb	_st_print_pm
                                 		.glb	_st_set_pm
                                 		.glb	_cm_print_am
                                 		.glb	_cm_get_am
                                 		.glb	_cm_set_am
                                 		.glb	_cm_print_vm
                                 		.glb	_cm_print_fr
                                 		.glb	_cm_print_tn
                                 		.glb	_cm_print_tm
                                 		.glb	_cm_print_jm
                                 		.glb	_cm_set_xjm
                                 		.glb	_cm_print_jh
                                 		.glb	_cm_set_xjh
                                 		.glb	_cm_print_jd
                                 		.glb	_cm_print_sn
                                 		.glb	_sw_set_sw
                                 		.glb	_cm_print_sx
                                 		.glb	_cm_print_sv
                                 		.glb	_cm_print_lv
                                 		.glb	_cm_print_lb
                                 		.glb	_cm_print_zb
                                 		.glb	_cm_print_ra
                                 		.glb	_pwm_print_p1frq
                                 		.glb	_pwm_print_p1csl
                                 		.glb	_pwm_print_p1csh
                                 		.glb	_pwm_print_p1cpl
                                 		.glb	_pwm_print_p1cph
                                 		.glb	_pwm_print_p1wsl
                                 		.glb	_pwm_print_p1wsh
                                 		.glb	_pwm_print_p1wpl
                                 		.glb	_pwm_print_p1wph
                                 		.glb	_pwm_print_p1pof
                                 		.glb	_cm_print_cofs
                                 		.glb	_cm_print_cpos
                                 		.glb	_get_data
                                 		.glb	_set_data
                                 		.glb	_cm_print_ja
                                 		.glb	_cm_print_ct
                                 		.glb	_cm_print_sl
                                 		.glb	_sw_print_st
                                 		.glb	_sw_set_st
                                 		.glb	_st_print_mt
                                 		.glb	_st_set_mt
                                 		.glb	_st_set_me
                                 		.glb	_st_set_md
                                 		.glb	_js_print_ej
                                 		.glb	_js_print_jv
                                 		.glb	_json_set_jv
                                 		.glb	_js_print_js
                                 		.glb	_tx_print_tv
                                 		.glb	_qr_print_qv
                                 		.glb	_set_0123
                                 		.glb	_sr_print_sv
                                 		.glb	_set_012
                                 		.glb	_sr_print_si
                                 		.glb	_get_int
                                 		.glb	_sr_set_si
                                 		.glb	_cm_print_gpl
                                 		.glb	_cm_print_gun
                                 		.glb	_cm_print_gco
                                 		.glb	_cm_print_gpa
                                 		.glb	_cm_print_gdi
                                 		.glb	_gc_get_gc
                                 		.glb	_gc_run_gc
                                 		.glb	_cm_print_ma
                                 		.glb	_tx_print_ui8
                                 		.glb	_get_grp
                                 		.glb	_set_grp
                                 		.glb	_nv_index_max
                                 		.glb	_nv_index_is_single
                                 		.glb	_nv_index_is_group
                                 		.glb	_nv_index_lt_groups
                                 		.glb	_set_flu
                                 		.glb	_cm_get_units_mode
                                 		.glb	_preprocess_float
                                 		.glb	__FDclass
                                 		.glb	_nv_reset_nv_list
                                 		.glb	_nv_get_index
                                 		.glb	_nv_get_nvObj
                                 		.glb	_nv_print_list
                                 		.glb	_set_baud_callback
                                 		.glb	_cfg_print_ec
                                 		.glb	_cfg_print_ee
                                 		.glb	_cfg_print_ex
                                 		.glb	_text_print_ui8
                                 		.glb	_cfg_print_baud
                                 		.glb	_cfg_print_net
                                 		.glb	_cfg_print_rx
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _nv_index_max:
                                 		.STACK	_nv_index_max=8
                                 ;       1 /*
                                 ;       2  * config_app.c - application-specific part of configuration data
                                 ;       3  * This file is part of the TinyG2 project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2013 - 2015 Alden S. Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      13  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      14  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      15  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      16  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      17  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      18  */
                                 ;      19 /* This file contains application specific data for the config system:
                                 ;      20  *	- application-specific functions and function prototypes
                                 ;      21  *	- application-specific message and print format strings
                                 ;      22  *	- application-specific config array
                                 ;      23  *	- any other application-specific data or functions
                                 ;      24  *
                                 ;      25  * See config_app.h for a detailed description of config objects and the config table
                                 ;      26  */
                                 ;      27 
                                 ;      28 #include "tinyg.h"		// #1
                                 ;      29 #include "config.h"		// #2
                                 ;      30 #include "controller.h"
                                 ;      31 #include "canonical_machine.h"
                                 ;      32 #include "gcode_parser.h"
                                 ;      33 #include "json_parser.h"
                                 ;      34 #include "text_parser.h"
                                 ;      35 #include "settings.h"
                                 ;      36 #include "planner.h"
                                 ;      37 #include "stepper.h"
                                 ;      38 #include "switch.h"
                                 ;      39 #include "pwm.h"
                                 ;      40 #include "report.h"
                                 ;      41 #include "hardware.h"
                                 ;      42 #include "test.h"
                                 ;      43 #include "util.h"
                                 ;      44 #include "help.h"
                                 ;      45 #include "network.h"
                                 ;      46 #include "xio.h"
                                 ;      47 
                                 ;      48 #ifdef __cplusplus
                                 ;      49 extern "C"{
                                 ;      50 #endif
                                 ;      51 
                                 ;      52 /*** structures ***/
                                 ;      53 
                                 ;      54 cfgParameters_t cfg; 				// application specific configuration parameters
                                 ;      55 
                                 ;      56 /***********************************************************************************
                                 ;      57  **** application-specific internal functions **************************************
                                 ;      58  ***********************************************************************************/
                                 ;      59 // See config.cpp/.h for generic variables and functions that are not specific to
                                 ;      60 // TinyG or the motion control application domain
                                 ;      61 
                                 ;      62 // helpers (most helpers are defined immediately above their usage so they don't need prototypes here)
                                 ;      63 
                                 ;      64 static stat_t _do_motors(nvObj_t *nv);		// print parameters for all motor groups
                                 ;      65 static stat_t _do_axes(nvObj_t *nv);		// print parameters for all axis groups
                                 ;      66 static stat_t _do_offsets(nvObj_t *nv);		// print offset parameters for G54-G59,G92, G28, G30
                                 ;      67 static stat_t _do_all(nvObj_t *nv);			// print all parameters
                                 ;      68 
                                 ;      69 // communications settings and functions
                                 ;      70 
                                 ;      71 static stat_t set_ec(nvObj_t *nv);			// expand CRLF on TX output
                                 ;      72 static stat_t set_ee(nvObj_t *nv);			// enable character echo
                                 ;      73 static stat_t set_ex(nvObj_t *nv);			// enable XON/XOFF and RTS/CTS flow control
                                 ;      74 static stat_t get_rx(nvObj_t *nv);			// get bytes in RX buffer
                                 ;      75 //static stat_t run_sx(nvObj_t *nv);		// send XOFF, XON
                                 ;      76 
                                 ;      77 /***********************************************************************************
                                 ;      78  **** CONFIG TABLE  ****************************************************************
                                 ;      79  ***********************************************************************************
                                 ;      80  *
                                 ;      81  *	NOTES AND CAVEATS
                                 ;      82  *
                                 ;      83  *	- Token matching occurs from the most specific to the least specific. This means
                                 ;      84  *	  that if shorter tokens overlap longer ones the longer one must precede the
                                 ;      85  *	  shorter one. E.g. "gco" needs to come before "gc"
                                 ;      86  *
                                 ;      87  *	- Mark group strings for entries that have no group as nul -->  "".
                                 ;      88  *	  This is important for group expansion.
                                 ;      89  *
                                 ;      90  *	- Groups do not have groups. Neither do uber-groups, e.g.
                                 ;      91  *	  'x' is --> { "", "x",  	and 'm' is --> { "", "m",
                                 ;      92  *
                                 ;      93  *	- Be careful not to define groups longer than GROUP_LEN (3) and tokens longer
                                 ;      94  *	  than TOKEN_LEN (5). (See config.h for lengths). The combined group + token
                                 ;      95  *	  cannot exceed TOKEN_LEN. String functions working on the table assume these
                                 ;      96  *	  rules are followed and do not check lengths or perform other validation.
                                 ;      97  *
                                 ;      98  *	NOTE: If the count of lines in cfgArray exceeds 255 you need to change index_t
                                 ;      99  *	uint16_t in the config.h file.
                                 ;     100  */
                                 ;     101 
                                 ;     102 const cfgItem_t cfgArray[] PROGMEM = {
                                 ;     103 	// group token flags p, print_func,	 get_func,  set_func, target for get/set,   	default value
                                 ;     104 	{ "sys", "fb", _fipn,2, hw_print_fb, get_flt,   set_nul,  (float *)&cs.fw_build,   TINYG_FIRMWARE_BUILD }, // MUST BE FIRST!
                                 ;     105 	{ "sys", "fv", _fipn,3, hw_print_fv, get_flt,   set_nul,  (float *)&cs.fw_version, TINYG_FIRMWARE_VERSION },
                                 ;     106 	{ "sys", "hp", _fipn,0, hw_print_hp, get_flt,   set_flt,  (float *)&cs.hw_platform,TINYG_HARDWARE_PLATFORM },
                                 ;     107 	{ "sys", "hv", _fipn,0, hw_print_hv, get_flt,   hw_set_hv,(float *)&cs.hw_version, TINYG_HARDWARE_VERSION },
                                 ;     108 	{ "sys", "id", _fn,  0, hw_print_id, hw_get_id, set_nul,  (float *)&cs.null, 0 },  // device ID (ASCII signature)
                                 ;     109 
                                 ;     110 	// dynamic model attributes for reporting purposes (up front for speed)
                                 ;     111 	{ "",   "n",   _fi, 0, cm_print_line, cm_get_mline,set_int,(float *)&cm.gm.linenum,0 },		// Model line number
                                 ;     112 	{ "",   "line",_fi, 0, cm_print_line, cm_get_line, set_int,(float *)&cm.gm.linenum,0 },		// Active line number - model or runtime line number
                                 ;     113 	{ "",   "vel", _f0, 2, cm_print_vel,  cm_get_vel,  set_nul,(float *)&cs.null, 0 },			// current velocity
                                 ;     114 	{ "",   "feed",_f0, 2, cm_print_feed, cm_get_feed, set_nul,(float *)&cs.null, 0 },			// feed rate
                                 ;     115 	{ "",   "stat",_f0, 0, cm_print_stat, cm_get_stat, set_nul,(float *)&cs.null, 0 },			// combined machine state
                                 ;     116 	{ "",   "macs",_f0, 0, cm_print_macs, cm_get_macs, set_nul,(float *)&cs.null, 0 },			// raw machine state
                                 ;     117 	{ "",   "cycs",_f0, 0, cm_print_cycs, cm_get_cycs, set_nul,(float *)&cs.null, 0 },			// cycle state
                                 ;     118 	{ "",   "mots",_f0, 0, cm_print_mots, cm_get_mots, set_nul,(float *)&cs.null, 0 },			// motion state
                                 ;     119 	{ "",   "hold",_f0, 0, cm_print_hold, cm_get_hold, set_nul,(float *)&cs.null, 0 },			// feedhold state
                                 ;     120 	{ "",   "unit",_f0, 0, cm_print_unit, cm_get_unit, set_nul,(float *)&cs.null, 0 },			// units mode
                                 ;     121 	{ "",   "coor",_f0, 0, cm_print_coor, cm_get_coor, set_nul,(float *)&cs.null, 0 },			// coordinate system
                                 ;     122 	{ "",   "momo",_f0, 0, cm_print_momo, cm_get_momo, set_nul,(float *)&cs.null, 0 },			// motion mode
                                 ;     123 	{ "",   "plan",_f0, 0, cm_print_plan, cm_get_plan, set_nul,(float *)&cs.null, 0 },			// plane select
                                 ;     124 	{ "",   "path",_f0, 0, cm_print_path, cm_get_path, set_nul,(float *)&cs.null, 0 },			// path control mode
                                 ;     125 	{ "",   "dist",_f0, 0, cm_print_dist, cm_get_dist, set_nul,(float *)&cs.null, 0 },			// distance mode
                                 ;     126 	{ "",   "frmo",_f0, 0, cm_print_frmo, cm_get_frmo, set_nul,(float *)&cs.null, 0 },			// feed rate mode
                                 ;     127 	{ "",   "tool",_f0, 0, cm_print_tool, cm_get_toolv,set_nul,(float *)&cs.null, 0 },			// active tool
                                 ;     128 //	{ "",   "tick",_f0, 0, tx_print_int,  get_int,     set_int,(float *)&rtc.sys_ticks, 0 },	// tick count
                                 ;     129 
                                 ;     130 	{ "mpo","mpox",_f0, 3, cm_print_mpo, cm_get_mpo, set_nul,(float *)&cs.null, 0 },			// X machine position
                                 ;     131 	{ "mpo","mpoy",_f0, 3, cm_print_mpo, cm_get_mpo, set_nul,(float *)&cs.null, 0 },			// Y machine position
                                 ;     132 	{ "mpo","mpoz",_f0, 3, cm_print_mpo, cm_get_mpo, set_nul,(float *)&cs.null, 0 },			// Z machine position
                                 ;     133 	{ "mpo","mpoa",_f0, 3, cm_print_mpo, cm_get_mpo, set_nul,(float *)&cs.null, 0 },			// A machine position
                                 ;     134 	{ "mpo","mpob",_f0, 3, cm_print_mpo, cm_get_mpo, set_nul,(float *)&cs.null, 0 },			// B machine position
                                 ;     135 	{ "mpo","mpoc",_f0, 3, cm_print_mpo, cm_get_mpo, set_nul,(float *)&cs.null, 0 },			// C machine position
                                 ;     136 
                                 ;     137 	{ "pos","posx",_f0, 3, cm_print_pos, cm_get_pos, set_nul,(float *)&cs.null, 0 },			// X work position
                                 ;     138 	{ "pos","posy",_f0, 3, cm_print_pos, cm_get_pos, set_nul,(float *)&cs.null, 0 },			// Y work position
                                 ;     139 	{ "pos","posz",_f0, 3, cm_print_pos, cm_get_pos, set_nul,(float *)&cs.null, 0 },			// Z work position
                                 ;     140 	{ "pos","posa",_f0, 3, cm_print_pos, cm_get_pos, set_nul,(float *)&cs.null, 0 },			// A work position
                                 ;     141 	{ "pos","posb",_f0, 3, cm_print_pos, cm_get_pos, set_nul,(float *)&cs.null, 0 },			// B work position
                                 ;     142 	{ "pos","posc",_f0, 3, cm_print_pos, cm_get_pos, set_nul,(float *)&cs.null, 0 },			// C work position
                                 ;     143 
                                 ;     144 	{ "ofs","ofsx",_f0, 3, cm_print_ofs, cm_get_ofs, set_nul,(float *)&cs.null, 0 },			// X work offset
                                 ;     145 	{ "ofs","ofsy",_f0, 3, cm_print_ofs, cm_get_ofs, set_nul,(float *)&cs.null, 0 },			// Y work offset
                                 ;     146 	{ "ofs","ofsz",_f0, 3, cm_print_ofs, cm_get_ofs, set_nul,(float *)&cs.null, 0 },			// Z work offset
                                 ;     147 	{ "ofs","ofsa",_f0, 3, cm_print_ofs, cm_get_ofs, set_nul,(float *)&cs.null, 0 },			// A work offset
                                 ;     148 	{ "ofs","ofsb",_f0, 3, cm_print_ofs, cm_get_ofs, set_nul,(float *)&cs.null, 0 },			// B work offset
                                 ;     149 	{ "ofs","ofsc",_f0, 3, cm_print_ofs, cm_get_ofs, set_nul,(float *)&cs.null, 0 },			// C work offset
                                 ;     150 
                                 ;     151 	{ "hom","home",_f0, 0, cm_print_home, cm_get_home, cm_run_home,(float *)&cs.null, 0 },		// homing state, invoke homing cycle
                                 ;     152 	{ "hom","homx",_f0, 0, cm_print_pos, get_ui8, set_nul,(float *)&cm.homed[AXIS_X], false },	// X homed - Homing status group
                                 ;     153 	{ "hom","homy",_f0, 0, cm_print_pos, get_ui8, set_nul,(float *)&cm.homed[AXIS_Y], false },	// Y homed
                                 ;     154 	{ "hom","homz",_f0, 0, cm_print_pos, get_ui8, set_nul,(float *)&cm.homed[AXIS_Z], false },	// Z homed
                                 ;     155 	{ "hom","homa",_f0, 0, cm_print_pos, get_ui8, set_nul,(float *)&cm.homed[AXIS_A], false },	// A homed
                                 ;     156 	{ "hom","homb",_f0, 0, cm_print_pos, get_ui8, set_nul,(float *)&cm.homed[AXIS_B], false },	// B homed
                                 ;     157 	{ "hom","homc",_f0, 0, cm_print_pos, get_ui8, set_nul,(float *)&cm.homed[AXIS_C], false },	// C homed
                                 ;     158 
                                 ;     159 	{ "prb","prbe",_f0, 0, tx_print_nul, get_ui8, set_nul,(float *)&cm.probe_state, 0 },		// probing state
                                 ;     160 	{ "prb","prbx",_f0, 3, tx_print_nul, get_flt, set_nul,(float *)&cm.probe_results[AXIS_X], 0 },
                                 ;     161 	{ "prb","prby",_f0, 3, tx_print_nul, get_flt, set_nul,(float *)&cm.probe_results[AXIS_Y], 0 },
                                 ;     162 	{ "prb","prbz",_f0, 3, tx_print_nul, get_flt, set_nul,(float *)&cm.probe_results[AXIS_Z], 0 },
                                 ;     163 	{ "prb","prba",_f0, 3, tx_print_nul, get_flt, set_nul,(float *)&cm.probe_results[AXIS_A], 0 },
                                 ;     164 	{ "prb","prbb",_f0, 3, tx_print_nul, get_flt, set_nul,(float *)&cm.probe_results[AXIS_B], 0 },
                                 ;     165 	{ "prb","prbc",_f0, 3, tx_print_nul, get_flt, set_nul,(float *)&cm.probe_results[AXIS_C], 0 },
                                 ;     166 
                                 ;     167 	{ "jog","jogx",_f0, 0, tx_print_nul, get_nul, cm_run_jogx, (float *)&cm.jogging_dest, 0},
                                 ;     168 	{ "jog","jogy",_f0, 0, tx_print_nul, get_nul, cm_run_jogy, (float *)&cm.jogging_dest, 0},
                                 ;     169 	{ "jog","jogz",_f0, 0, tx_print_nul, get_nul, cm_run_jogz, (float *)&cm.jogging_dest, 0},
                                 ;     170 	{ "jog","joga",_f0, 0, tx_print_nul, get_nul, cm_run_joga, (float *)&cm.jogging_dest, 0},
                                 ;     171 //	{ "jog","jogb",_f0, 0, tx_print_nul, get_nul, cm_run_jogb, (float *)&cm.jogging_dest, 0},
                                 ;     172 //	{ "jog","jogc",_f0, 0, tx_print_nul, get_nul, cm_run_jogc, (float *)&cm.jogging_dest, 0},
                                 ;     173 
                                 ;     174 	{ "pwr","pwr1",_f0, 0, st_print_pwr, st_get_pwr, set_nul, (float *)&cs.null, 0},	// motor power enable readouts
                                 ;     175 	{ "pwr","pwr2",_f0, 0, st_print_pwr, st_get_pwr, set_nul, (float *)&cs.null, 0},
                                 ;     176 	{ "pwr","pwr3",_f0, 0, st_print_pwr, st_get_pwr, set_nul, (float *)&cs.null, 0},
                                 ;     177 	{ "pwr","pwr4",_f0, 0, st_print_pwr, st_get_pwr, set_nul, (float *)&cs.null, 0},
                                 ;     178 #if (MOTORS >= 5)
                                 ;     179 	{ "pwr","pwr5",_f0, 0, st_print_pwr, st_get_pwr, set_nul, (float *)&cs.null, 0},
                                 ;     180 #endif
                                 ;     181 #if (MOTORS >= 6)
                                 ;     182 	{ "pwr","pwr6",_f0, 0, st_print_pwr, st_get_pwr, set_nul, (float *)&cs.null, 0},
                                 ;     183 #endif
                                 ;     184 
                                 ;     185 	// Reports, tests, help, and messages
                                 ;     186 	{ "", "sr",  _f0, 0, sr_print_sr,  sr_get,  sr_set,   (float *)&cs.null, 0 },	// status report object
                                 ;     187 	{ "", "qr",  _f0, 0, qr_print_qr,  qr_get,  set_nul,  (float *)&cs.null, 0 },	// queue report - planner buffers available
                                 ;     188 	{ "", "qi",  _f0, 0, qr_print_qi,  qi_get,  set_nul,  (float *)&cs.null, 0 },	// queue report - buffers added to queue
                                 ;     189 	{ "", "qo",  _f0, 0, qr_print_qo,  qo_get,  set_nul,  (float *)&cs.null, 0 },	// queue report - buffers removed from queue
                                 ;     190 	{ "", "er",  _f0, 0, tx_print_nul, rpt_er,  set_nul,  (float *)&cs.null, 0 },	// invoke bogus exception report for testing
                                 ;     191 	{ "", "qf",  _f0, 0, tx_print_nul, get_nul, cm_run_qf,(float *)&cs.null, 0 },	// queue flush
                                 ;     192 	{ "", "rx",  _f0, 0, tx_print_int, get_rx,  set_nul,  (float *)&cs.null, 0 },	// space in RX buffer
                                 ;     193 	{ "", "msg", _f0, 0, tx_print_str, get_nul, set_nul,  (float *)&cs.null, 0 },	// string for generic messages
                                 ;     194 //	{ "", "clc", _f0, 0, tx_print_nul, st_clc,  st_clc,   (float *)&cs.null, 0 },	// clear diagnostic step counters
                                 ;     195 	{ "", "clear",_f0,0, tx_print_nul, cm_clear,cm_clear, (float *)&cs.null, 0 },	// GET a clear to clear soft alarm
                                 ;     196 //	{ "", "sx",  _f0, 0, tx_print_nul, run_sx,  run_sx ,  (float *)&cs.null, 0 },	// send XOFF, XON test
                                 ;     197 
                                 ;     198 	{ "", "test",_f0, 0, tx_print_nul, help_test, run_test, (float *)&cs.null,0 },	// run tests, print test help screen
                                 ;     199 //	{ "", "defa",_f0, 0, tx_print_nul, help_defa, set_defaults,(float *)&cs.null,0 },	// set/print defaults / help screen
                                 ;     200 //	RXMOD{ "", "boot",_f0, 0, tx_print_nul, help_boot_loader,hw_run_boot, (float *)&cs.null,0 },
                                 ;     201 
                                 ;     202 #ifdef __HELP_SCREENS
                                 ;     203 	{ "", "help",_f0, 0, tx_print_nul, help_config, set_nul, (float *)&cs.null,0 },  // prints config help screen
                                 ;     204 	{ "", "h",   _f0, 0, tx_print_nul, help_config, set_nul, (float *)&cs.null,0 },  // alias for "help"
                                 ;     205 #endif
                                 ;     206 
                                 ;     207 	// Motor parameters
                                 ;     208 	{ "1","1ma",_fip, 0, st_print_ma, get_ui8, set_ui8,   (float *)&st_cfg.mot[MOTOR_1].motor_map,	M1_MOTOR_MAP },
                                 ;     209 	{ "1","1sa",_fip, 3, st_print_sa, get_flt, st_set_sa, (float *)&st_cfg.mot[MOTOR_1].step_angle,	M1_STEP_ANGLE },
                                 ;     210 	{ "1","1tr",_fipc,4, st_print_tr, get_flt, st_set_tr, (float *)&st_cfg.mot[MOTOR_1].travel_rev,	M1_TRAVEL_PER_REV },
                                 ;     211 	{ "1","1mi",_fip, 0, st_print_mi, get_ui8, st_set_mi, (float *)&st_cfg.mot[MOTOR_1].microsteps,	M1_MICROSTEPS },
                                 ;     212 	{ "1","1po",_fip, 0, st_print_po, get_ui8, set_01,    (float *)&st_cfg.mot[MOTOR_1].polarity,	M1_POLARITY },
                                 ;     213 	{ "1","1pm",_fip, 0, st_print_pm, get_ui8, st_set_pm, (float *)&st_cfg.mot[MOTOR_1].power_mode,	M1_POWER_MODE },
                                 ;     214 #ifdef __ARM
                                 ;     215 	{ "1","1pl",_fip, 3, st_print_pl, get_flt, st_set_pl, (float *)&st_cfg.mot[MOTOR_1].power_level,M1_POWER_LEVEL },
                                 ;     216 #endif
                                 ;     217 #if (MOTORS >= 2)
                                 ;     218 	{ "2","2ma",_fip, 0, st_print_ma, get_ui8, set_ui8,   (float *)&st_cfg.mot[MOTOR_2].motor_map,	M2_MOTOR_MAP },
                                 ;     219 	{ "2","2sa",_fip, 3, st_print_sa, get_flt, st_set_sa, (float *)&st_cfg.mot[MOTOR_2].step_angle,	M2_STEP_ANGLE },
                                 ;     220 	{ "2","2tr",_fipc,4, st_print_tr, get_flt, st_set_tr, (float *)&st_cfg.mot[MOTOR_2].travel_rev,	M2_TRAVEL_PER_REV },
                                 ;     221 	{ "2","2mi",_fip, 0, st_print_mi, get_ui8, st_set_mi, (float *)&st_cfg.mot[MOTOR_2].microsteps,	M2_MICROSTEPS },
                                 ;     222 	{ "2","2po",_fip, 0, st_print_po, get_ui8, set_01,    (float *)&st_cfg.mot[MOTOR_2].polarity,	M2_POLARITY },
                                 ;     223 	{ "2","2pm",_fip, 0, st_print_pm, get_ui8, st_set_pm, (float *)&st_cfg.mot[MOTOR_2].power_mode,	M2_POWER_MODE },
                                 ;     224 #ifdef __ARM
                                 ;     225 	{ "2","2pl",_fip, 3, st_print_pl, get_flt, st_set_pl, (float *)&st_cfg.mot[MOTOR_2].power_level,M2_POWER_LEVEL},
                                 ;     226 #endif
                                 ;     227 #endif
                                 ;     228 #if (MOTORS >= 3)
                                 ;     229 	{ "3","3ma",_fip, 0, st_print_ma, get_ui8, set_ui8,   (float *)&st_cfg.mot[MOTOR_3].motor_map,	M3_MOTOR_MAP },
                                 ;     230 	{ "3","3sa",_fip, 3, st_print_sa, get_flt, st_set_sa, (float *)&st_cfg.mot[MOTOR_3].step_angle,	M3_STEP_ANGLE },
                                 ;     231 	{ "3","3tr",_fipc,4, st_print_tr, get_flt, st_set_tr, (float *)&st_cfg.mot[MOTOR_3].travel_rev,	M3_TRAVEL_PER_REV },
                                 ;     232 	{ "3","3mi",_fip, 0, st_print_mi, get_ui8, st_set_mi, (float *)&st_cfg.mot[MOTOR_3].microsteps,	M3_MICROSTEPS },
                                 ;     233 	{ "3","3po",_fip, 0, st_print_po, get_ui8, set_01,    (float *)&st_cfg.mot[MOTOR_3].polarity,	M3_POLARITY },
                                 ;     234 	{ "3","3pm",_fip, 0, st_print_pm, get_ui8, st_set_pm, (float *)&st_cfg.mot[MOTOR_3].power_mode,	M3_POWER_MODE },
                                 ;     235 #ifdef __ARM
                                 ;     236 	{ "3","3pl",_fip, 3, st_print_pl, get_flt, st_set_pl, (float *)&st_cfg.mot[MOTOR_3].power_level,M3_POWER_LEVEL },
                                 ;     237 #endif
                                 ;     238 #endif
                                 ;     239 #if (MOTORS >= 4)
                                 ;     240 	{ "4","4ma",_fip, 0, st_print_ma, get_ui8, set_ui8,   (float *)&st_cfg.mot[MOTOR_4].motor_map,	M4_MOTOR_MAP },
                                 ;     241 	{ "4","4sa",_fip, 3, st_print_sa, get_flt, st_set_sa, (float *)&st_cfg.mot[MOTOR_4].step_angle,	M4_STEP_ANGLE },
                                 ;     242 	{ "4","4tr",_fipc,4, st_print_tr, get_flt, st_set_tr, (float *)&st_cfg.mot[MOTOR_4].travel_rev,	M4_TRAVEL_PER_REV },
                                 ;     243 	{ "4","4mi",_fip, 0, st_print_mi, get_ui8, st_set_mi, (float *)&st_cfg.mot[MOTOR_4].microsteps,	M4_MICROSTEPS },
                                 ;     244 	{ "4","4po",_fip, 0, st_print_po, get_ui8, set_01,    (float *)&st_cfg.mot[MOTOR_4].polarity,	M4_POLARITY },
                                 ;     245 	{ "4","4pm",_fip, 0, st_print_pm, get_ui8, st_set_pm, (float *)&st_cfg.mot[MOTOR_4].power_mode,	M4_POWER_MODE },
                                 ;     246 #ifdef __ARM
                                 ;     247 	{ "4","4pl",_fip, 3, st_print_pl, get_flt, st_set_pl, (float *)&st_cfg.mot[MOTOR_4].power_level,M4_POWER_LEVEL },
                                 ;     248 #endif
                                 ;     249 #endif
                                 ;     250 #if (MOTORS >= 5)
                                 ;     251 	{ "5","5ma",_fip, 0, st_print_ma, get_ui8, set_ui8,   (float *)&st_cfg.mot[MOTOR_5].motor_map,	M5_MOTOR_MAP },
                                 ;     252 	{ "5","5sa",_fip, 3, st_print_sa, get_flt, st_set_sa, (float *)&st_cfg.mot[MOTOR_5].step_angle,	M5_STEP_ANGLE },
                                 ;     253 	{ "5","5tr",_fipc,4, st_print_tr, get_flt, st_set_tr, (float *)&st_cfg.mot[MOTOR_5].travel_rev,	M5_TRAVEL_PER_REV },
                                 ;     254 	{ "5","5mi",_fip, 0, st_print_mi, get_ui8, st_set_mi, (float *)&st_cfg.mot[MOTOR_5].microsteps,	M5_MICROSTEPS },
                                 ;     255 	{ "5","5po",_fip, 0, st_print_po, get_ui8, set_01,    (float *)&st_cfg.mot[MOTOR_5].polarity,	M5_POLARITY },
                                 ;     256 	{ "5","5pm",_fip, 0, st_print_pm, get_ui8, st_set_pm, (float *)&st_cfg.mot[MOTOR_5].power_mode,	M5_POWER_MODE },
                                 ;     257 #ifdef __ARM
                                 ;     258 	{ "5","5pl",_fip, 3, st_print_pl, get_flt, st_set_pl, (float *)&st_cfg.mot[MOTOR_5].power_level,M5_POWER_LEVEL },
                                 ;     259 #endif
                                 ;     260 #endif
                                 ;     261 #if (MOTORS >= 6)
                                 ;     262 	{ "6","6ma",_fip, 0, st_print_ma, get_ui8, set_ui8,   (float *)&st_cfg.mot[MOTOR_6].motor_map,	M6_MOTOR_MAP },
                                 ;     263 	{ "6","6sa",_fip, 3, st_print_sa, get_flt, st_set_sa, (float *)&st_cfg.mot[MOTOR_6].step_angle,	M6_STEP_ANGLE },
                                 ;     264 	{ "6","6tr",_fipc,4, st_print_tr, get_flt, st_set_tr, (float *)&st_cfg.mot[MOTOR_6].travel_rev,	M6_TRAVEL_PER_REV },
                                 ;     265 	{ "6","6mi",_fip, 0, st_print_mi, get_ui8, st_set_mi, (float *)&st_cfg.mot[MOTOR_6].microsteps,	M6_MICROSTEPS },
                                 ;     266 	{ "6","6po",_fip, 0, st_print_po, get_ui8, set_01,    (float *)&st_cfg.mot[MOTOR_6].polarity,	M6_POLARITY },
                                 ;     267 	{ "6","6pm",_fip, 0, st_print_pm, get_ui8, st_set_pm, (float *)&st_cfg.mot[MOTOR_6].power_mode,	M6_POWER_MODE },
                                 ;     268 #ifdef __ARM
                                 ;     269 	{ "6","6pl",_fip, 3, st_print_pl, get_flt, st_set_pl, (float *)&st_cfg.mot[MOTOR_6].power_level,M6_POWER_LEVEL },
                                 ;     270 #endif
                                 ;     271 #endif
                                 ;     272 	// Axis parameters
                                 ;     273 	{ "x","xam",_fip,  0, cm_print_am, cm_get_am, cm_set_am, (float *)&cm.a[AXIS_X].axis_mode,		X_AXIS_MODE },
                                 ;     274 	{ "x","xvm",_fipc, 0, cm_print_vm, get_flt,   set_flu,   (float *)&cm.a[AXIS_X].velocity_max,	X_VELOCITY_MAX },
                                 ;     275 	{ "x","xfr",_fipc, 0, cm_print_fr, get_flt,   set_flu,   (float *)&cm.a[AXIS_X].feedrate_max,	X_FEEDRATE_MAX },
                                 ;     276 	{ "x","xtn",_fipc, 3, cm_print_tn, get_flt,   set_flu,   (float *)&cm.a[AXIS_X].travel_min,		X_TRAVEL_MIN },
                                 ;     277 	{ "x","xtm",_fipc, 3, cm_print_tm, get_flt,   set_flu,   (float *)&cm.a[AXIS_X].travel_max,		X_TRAVEL_MAX },
                                 ;     278 	{ "x","xjm",_fipc, 0, cm_print_jm, get_flt,   cm_set_xjm,(float *)&cm.a[AXIS_X].jerk_max,		X_JERK_MAX },
                                 ;     279 	{ "x","xjh",_fipc, 0, cm_print_jh, get_flt,	  cm_set_xjh,(float *)&cm.a[AXIS_X].jerk_homing,	X_JERK_HOMING },
                                 ;     280 	{ "x","xjd",_fipc, 4, cm_print_jd, get_flt,   set_flu,   (float *)&cm.a[AXIS_X].junction_dev,	X_JUNCTION_DEVIATION },
                                 ;     281 	{ "x","xsn",_fip,  0, cm_print_sn, get_ui8,   sw_set_sw, (float *)&sw.mode[0],					X_SWITCH_MODE_MIN },
                                 ;     282 	{ "x","xsx",_fip,  0, cm_print_sx, get_ui8,   sw_set_sw, (float *)&sw.mode[1],					X_SWITCH_MODE_MAX },
                                 ;     283 //	{ "x","xsn",_fip,  0, cm_print_sn, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_X][SW_MIN].mode,	X_SWITCH_MODE_MIN },	// new style
                                 ;     284 //	{ "x","xsx",_fip,  0, cm_print_sx, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_X][SW_MAX].mode,	X_SWITCH_MODE_MAX },	// new style
                                 ;     285 	{ "x","xsv",_fipc, 0, cm_print_sv, get_flt,   set_flu,   (float *)&cm.a[AXIS_X].search_velocity,X_SEARCH_VELOCITY },
                                 ;     286 	{ "x","xlv",_fipc, 0, cm_print_lv, get_flt,   set_flu,   (float *)&cm.a[AXIS_X].latch_velocity,	X_LATCH_VELOCITY },
                                 ;     287 	{ "x","xlb",_fipc, 3, cm_print_lb, get_flt,   set_flu,   (float *)&cm.a[AXIS_X].latch_backoff,	X_LATCH_BACKOFF },
                                 ;     288 	{ "x","xzb",_fipc, 3, cm_print_zb, get_flt,   set_flu,   (float *)&cm.a[AXIS_X].zero_backoff,	X_ZERO_BACKOFF },
                                 ;     289 
                                 ;     290 	{ "y","yam",_fip,  0, cm_print_am, cm_get_am, cm_set_am, (float *)&cm.a[AXIS_Y].axis_mode,		Y_AXIS_MODE },
                                 ;     291 	{ "y","yvm",_fipc, 0, cm_print_vm, get_flt,   set_flu,   (float *)&cm.a[AXIS_Y].velocity_max,	Y_VELOCITY_MAX },
                                 ;     292 	{ "y","yfr",_fipc, 0, cm_print_fr, get_flt,   set_flu,   (float *)&cm.a[AXIS_Y].feedrate_max,	Y_FEEDRATE_MAX },
                                 ;     293 	{ "y","ytn",_fipc, 3, cm_print_tn, get_flt,   set_flu,   (float *)&cm.a[AXIS_Y].travel_min,		Y_TRAVEL_MIN },
                                 ;     294 	{ "y","ytm",_fipc, 3, cm_print_tm, get_flt,   set_flu,   (float *)&cm.a[AXIS_Y].travel_max,		Y_TRAVEL_MAX },
                                 ;     295 	{ "y","yjm",_fipc, 0, cm_print_jm, get_flt,	  cm_set_xjm,(float *)&cm.a[AXIS_Y].jerk_max,		Y_JERK_MAX },
                                 ;     296 	{ "y","yjh",_fipc, 0, cm_print_jh, get_flt,	  cm_set_xjh,(float *)&cm.a[AXIS_Y].jerk_homing,	Y_JERK_HOMING },
                                 ;     297 	{ "y","yjd",_fipc, 4, cm_print_jd, get_flt,   set_flu,   (float *)&cm.a[AXIS_Y].junction_dev,	Y_JUNCTION_DEVIATION },
                                 ;     298 	{ "y","ysn",_fip,  0, cm_print_sn, get_ui8,   sw_set_sw, (float *)&sw.mode[2],					Y_SWITCH_MODE_MIN },
                                 ;     299 	{ "y","ysx",_fip,  0, cm_print_sx, get_ui8,   sw_set_sw, (float *)&sw.mode[3],					Y_SWITCH_MODE_MAX },
                                 ;     300 //	{ "y","ysn",_fip,  0, cm_print_sn, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_Y][SW_MIN].mode,	Y_SWITCH_MODE_MIN },	// new style
                                 ;     301 //	{ "y","ysx",_fip,  0, cm_print_sx, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_Y][SW_MAX].mode,	Y_SWITCH_MODE_MAX },	// new style
                                 ;     302 	{ "y","ysv",_fipc, 0, cm_print_sv, get_flt,   set_flu,   (float *)&cm.a[AXIS_Y].search_velocity,Y_SEARCH_VELOCITY },
                                 ;     303 	{ "y","ylv",_fipc, 0, cm_print_lv, get_flt,   set_flu,   (float *)&cm.a[AXIS_Y].latch_velocity,	Y_LATCH_VELOCITY },
                                 ;     304 	{ "y","ylb",_fipc, 3, cm_print_lb, get_flt,   set_flu,   (float *)&cm.a[AXIS_Y].latch_backoff,	Y_LATCH_BACKOFF },
                                 ;     305 	{ "y","yzb",_fipc, 3, cm_print_zb, get_flt,   set_flu,   (float *)&cm.a[AXIS_Y].zero_backoff,	Y_ZERO_BACKOFF },
                                 ;     306 
                                 ;     307 	{ "z","zam",_fip,  0, cm_print_am, cm_get_am, cm_set_am, (float *)&cm.a[AXIS_Z].axis_mode,		Z_AXIS_MODE },
                                 ;     308 	{ "z","zvm",_fipc, 0, cm_print_vm, get_flt,   set_flu,   (float *)&cm.a[AXIS_Z].velocity_max,	Z_VELOCITY_MAX },
                                 ;     309 	{ "z","zfr",_fipc, 0, cm_print_fr, get_flt,   set_flu,   (float *)&cm.a[AXIS_Z].feedrate_max,	Z_FEEDRATE_MAX },
                                 ;     310 	{ "z","ztn",_fipc, 3, cm_print_tn, get_flt,   set_flu,   (float *)&cm.a[AXIS_Z].travel_min,		Z_TRAVEL_MIN },
                                 ;     311 	{ "z","ztm",_fipc, 3, cm_print_tm, get_flt,   set_flu,   (float *)&cm.a[AXIS_Z].travel_max,		Z_TRAVEL_MAX },
                                 ;     312 	{ "z","zjm",_fipc, 0, cm_print_jm, get_flt,	  cm_set_xjm,(float *)&cm.a[AXIS_Z].jerk_max,		Z_JERK_MAX },
                                 ;     313 	{ "z","zjh",_fipc, 0, cm_print_jh, get_flt,	  cm_set_xjh,(float *)&cm.a[AXIS_Z].jerk_homing, 	Z_JERK_HOMING },
                                 ;     314 	{ "z","zjd",_fipc, 4, cm_print_jd, get_flt,   set_flu,   (float *)&cm.a[AXIS_Z].junction_dev,	Z_JUNCTION_DEVIATION },
                                 ;     315 	{ "z","zsn",_fip,  0, cm_print_sn, get_ui8,   sw_set_sw, (float *)&sw.mode[4],					Z_SWITCH_MODE_MIN },
                                 ;     316 	{ "z","zsx",_fip,  0, cm_print_sx, get_ui8,   sw_set_sw, (float *)&sw.mode[5],					Z_SWITCH_MODE_MAX },
                                 ;     317 //	{ "z","zsn",_fip,  0, cm_print_sn, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_Z][SW_MIN].mode,	Z_SWITCH_MODE_MIN },	// new style
                                 ;     318 //	{ "z","zsx",_fip,  0, cm_print_sx, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_Z][SW_MAX].mode,	Z_SWITCH_MODE_MAX },	// new style
                                 ;     319 	{ "z","zsv",_fipc, 0, cm_print_sv, get_flt,   set_flu,   (float *)&cm.a[AXIS_Z].search_velocity,Z_SEARCH_VELOCITY },
                                 ;     320 	{ "z","zlv",_fipc, 0, cm_print_lv, get_flt,   set_flu,   (float *)&cm.a[AXIS_Z].latch_velocity,	Z_LATCH_VELOCITY },
                                 ;     321 	{ "z","zlb",_fipc, 3, cm_print_lb, get_flt,   set_flu,   (float *)&cm.a[AXIS_Z].latch_backoff,	Z_LATCH_BACKOFF },
                                 ;     322 	{ "z","zzb",_fipc, 3, cm_print_zb, get_flt,   set_flu,   (float *)&cm.a[AXIS_Z].zero_backoff,	Z_ZERO_BACKOFF },
                                 ;     323 
                                 ;     324 	{ "a","aam",_fip,  0, cm_print_am, cm_get_am, cm_set_am, (float *)&cm.a[AXIS_A].axis_mode,		A_AXIS_MODE },
                                 ;     325 	{ "a","avm",_fip,  0, cm_print_vm, get_flt,   set_flt,   (float *)&cm.a[AXIS_A].velocity_max,	A_VELOCITY_MAX },
                                 ;     326 	{ "a","afr",_fip,  0, cm_print_fr, get_flt,   set_flt,   (float *)&cm.a[AXIS_A].feedrate_max,	A_FEEDRATE_MAX },
                                 ;     327 	{ "a","atn",_fip,  3, cm_print_tn, get_flt,   set_flu,   (float *)&cm.a[AXIS_A].travel_min,		A_TRAVEL_MIN },
                                 ;     328 	{ "a","atm",_fip,  3, cm_print_tm, get_flt,   set_flt,   (float *)&cm.a[AXIS_A].travel_max,		A_TRAVEL_MAX },
                                 ;     329 	{ "a","ajm",_fip,  0, cm_print_jm, get_flt,	  cm_set_xjm,(float *)&cm.a[AXIS_A].jerk_max,		A_JERK_MAX },
                                 ;     330 	{ "a","ajh",_fip,  0, cm_print_jh, get_flt,	  cm_set_xjh,(float *)&cm.a[AXIS_A].jerk_homing, 	A_JERK_HOMING },
                                 ;     331 	{ "a","ajd",_fip,  4, cm_print_jd, get_flt,   set_flt,   (float *)&cm.a[AXIS_A].junction_dev,	A_JUNCTION_DEVIATION },
                                 ;     332 	{ "a","ara",_fipc, 3, cm_print_ra, get_flt,   set_flt,   (float *)&cm.a[AXIS_A].radius,			A_RADIUS},
                                 ;     333 	{ "a","asn",_fip,  0, cm_print_sn, get_ui8,   sw_set_sw, (float *)&sw.mode[6],					A_SWITCH_MODE_MIN },
                                 ;     334 	{ "a","asx",_fip,  0, cm_print_sx, get_ui8,   sw_set_sw, (float *)&sw.mode[7],					A_SWITCH_MODE_MAX },
                                 ;     335 //	{ "a","asn",_fip,  0, cm_print_sn, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_A][SW_MIN].mode,	A_SWITCH_MODE_MIN },	// new style
                                 ;     336 //	{ "a","asx",_fip,  0, cm_print_sx, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_A][SW_MAX].mode,	A_SWITCH_MODE_MAX },	// new style
                                 ;     337 	{ "a","asv",_fip,  0, cm_print_sv, get_flt,   set_flt,   (float *)&cm.a[AXIS_A].search_velocity,A_SEARCH_VELOCITY },
                                 ;     338 	{ "a","alv",_fip,  0, cm_print_lv, get_flt,   set_flt,   (float *)&cm.a[AXIS_A].latch_velocity,	A_LATCH_VELOCITY },
                                 ;     339 	{ "a","alb",_fip,  3, cm_print_lb, get_flt,   set_flt,   (float *)&cm.a[AXIS_A].latch_backoff,	A_LATCH_BACKOFF },
                                 ;     340 	{ "a","azb",_fip,  3, cm_print_zb, get_flt,   set_flt,   (float *)&cm.a[AXIS_A].zero_backoff,	A_ZERO_BACKOFF },
                                 ;     341 
                                 ;     342 	{ "b","bam",_fip,  0, cm_print_am, cm_get_am, cm_set_am, (float *)&cm.a[AXIS_B].axis_mode,		B_AXIS_MODE },
                                 ;     343 	{ "b","bvm",_fip,  0, cm_print_vm, get_flt,   set_flt,   (float *)&cm.a[AXIS_B].velocity_max,	B_VELOCITY_MAX },
                                 ;     344 	{ "b","bfr",_fip,  0, cm_print_fr, get_flt,   set_flt,   (float *)&cm.a[AXIS_B].feedrate_max,	B_FEEDRATE_MAX },
                                 ;     345 	{ "b","btn",_fip,  3, cm_print_tn, get_flt,   set_flu,   (float *)&cm.a[AXIS_B].travel_min,		B_TRAVEL_MIN },
                                 ;     346 	{ "b","btm",_fip,  3, cm_print_tm, get_flt,   set_flt,   (float *)&cm.a[AXIS_B].travel_max,		B_TRAVEL_MAX },
                                 ;     347 	{ "b","bjm",_fip,  0, cm_print_jm, get_flt,	  cm_set_xjm,(float *)&cm.a[AXIS_B].jerk_max,		B_JERK_MAX },
                                 ;     348 	{ "b","bjd",_fip,  0, cm_print_jd, get_flt,   set_flt,   (float *)&cm.a[AXIS_B].junction_dev,	B_JUNCTION_DEVIATION },
                                 ;     349 	{ "b","bra",_fipc, 3, cm_print_ra, get_flt,   set_flt,   (float *)&cm.a[AXIS_B].radius,			B_RADIUS },
                                 ;     350 #ifdef __ARM	// B axis extended parameters
                                 ;     351 	{ "b","asn",_fip,  0, cm_print_sn, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_B][SW_MIN].mode,	B_SWITCH_MODE_MIN },
                                 ;     352 	{ "b","asx",_fip,  0, cm_print_sx, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_B][SW_MAX].mode,	B_SWITCH_MODE_MAX },
                                 ;     353 	{ "b","bsv",_fip,  0, cm_print_sv, get_flt,   set_flt,   (float *)&cm.a[AXIS_B].search_velocity,B_SEARCH_VELOCITY },
                                 ;     354 	{ "b","blv",_fip,  0, cm_print_lv, get_flt,   set_flt,   (float *)&cm.a[AXIS_B].latch_velocity,	B_LATCH_VELOCITY },
                                 ;     355 	{ "b","blb",_fip,  3, cm_print_lb, get_flt,   set_flt,   (float *)&cm.a[AXIS_B].latch_backoff,	B_LATCH_BACKOFF },
                                 ;     356 	{ "b","bzb",_fip,  3, cm_print_zb, get_flt,   set_flt,   (float *)&cm.a[AXIS_B].zero_backoff,	B_ZERO_BACKOFF },
                                 ;     357 	{ "b","bjh",_fip,  0, cm_print_jh, get_flt,	  cm_set_xjh,(float *)&cm.a[AXIS_B].jerk_homing,	B_JERK_HOMING },
                                 ;     358 #endif
                                 ;     359 
                                 ;     360 	{ "c","cam",_fip,  0, cm_print_am, cm_get_am, cm_set_am, (float *)&cm.a[AXIS_C].axis_mode,		C_AXIS_MODE },
                                 ;     361 	{ "c","cvm",_fip,  0, cm_print_vm, get_flt,   set_flt,   (float *)&cm.a[AXIS_C].velocity_max,	C_VELOCITY_MAX },
                                 ;     362 	{ "c","cfr",_fip,  0, cm_print_fr, get_flt,   set_flt,   (float *)&cm.a[AXIS_C].feedrate_max,	C_FEEDRATE_MAX },
                                 ;     363 	{ "c","ctn",_fip,  3, cm_print_tn, get_flt,   set_flu,   (float *)&cm.a[AXIS_C].travel_min,		C_TRAVEL_MIN },
                                 ;     364 	{ "c","ctm",_fip,  3, cm_print_tm, get_flt,   set_flt,   (float *)&cm.a[AXIS_C].travel_max,		C_TRAVEL_MAX },
                                 ;     365 	{ "c","cjm",_fip,  0, cm_print_jm, get_flt,	  cm_set_xjm,(float *)&cm.a[AXIS_C].jerk_max,		C_JERK_MAX },
                                 ;     366 	{ "c","cjd",_fip,  0, cm_print_jd, get_flt,   set_flt,   (float *)&cm.a[AXIS_C].junction_dev,	C_JUNCTION_DEVIATION },
                                 ;     367 	{ "c","cra",_fipc, 3, cm_print_ra, get_flt,   set_flt,   (float *)&cm.a[AXIS_C].radius,			C_RADIUS },
                                 ;     368 #ifdef __ARM	// C axis extended parameters
                                 ;     369 	{ "c","csn",_fip,  0, cm_print_sn, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_C][SW_MIN].mode,	C_SWITCH_MODE_MIN },
                                 ;     370 	{ "c","csx",_fip,  0, cm_print_sx, get_ui8,   sw_set_sw, (float *)&sw.s[AXIS_C][SW_MAX].mode,	C_SWITCH_MODE_MAX },
                                 ;     371 	{ "c","csv",_fip,  0, cm_print_sv, get_flt,   set_flt,   (float *)&cm.a[AXIS_C].search_velocity,C_SEARCH_VELOCITY },
                                 ;     372 	{ "c","clv",_fip,  0, cm_print_lv, get_flt,   set_flt,   (float *)&cm.a[AXIS_C].latch_velocity,	C_LATCH_VELOCITY },
                                 ;     373 	{ "c","clb",_fip,  3, cm_print_lb, get_flt,   set_flt,   (float *)&cm.a[AXIS_C].latch_backoff,	C_LATCH_BACKOFF },
                                 ;     374 	{ "c","czb",_fip,  3, cm_print_zb, get_flt,   set_flt,   (float *)&cm.a[AXIS_C].zero_backoff,	C_ZERO_BACKOFF },
                                 ;     375 	{ "c","cjh",_fip,  0, cm_print_jh, get_flt,	  cm_set_xjh,(float *)&cm.a[AXIS_C].jerk_homing, 	C_JERK_HOMING },
                                 ;     376 #endif
                                 ;     377 
                                 ;     378 	// PWM settings
                                 ;     379 	{ "p1","p1frq",_fip, 0, pwm_print_p1frq, get_flt, set_flt,(float *)&pwm.c[PWM_1].frequency,		P1_PWM_FREQUENCY },
                                 ;     380 	{ "p1","p1csl",_fip, 0, pwm_print_p1csl, get_flt, set_flt,(float *)&pwm.c[PWM_1].cw_speed_lo,	P1_CW_SPEED_LO },
                                 ;     381 	{ "p1","p1csh",_fip, 0, pwm_print_p1csh, get_flt, set_flt,(float *)&pwm.c[PWM_1].cw_speed_hi,	P1_CW_SPEED_HI },
                                 ;     382 	{ "p1","p1cpl",_fip, 3, pwm_print_p1cpl, get_flt, set_flt,(float *)&pwm.c[PWM_1].cw_phase_lo,	P1_CW_PHASE_LO },
                                 ;     383 	{ "p1","p1cph",_fip, 3, pwm_print_p1cph, get_flt, set_flt,(float *)&pwm.c[PWM_1].cw_phase_hi,	P1_CW_PHASE_HI },
                                 ;     384 	{ "p1","p1wsl",_fip, 0, pwm_print_p1wsl, get_flt, set_flt,(float *)&pwm.c[PWM_1].ccw_speed_lo,	P1_CCW_SPEED_LO },
                                 ;     385 	{ "p1","p1wsh",_fip, 0, pwm_print_p1wsh, get_flt, set_flt,(float *)&pwm.c[PWM_1].ccw_speed_hi,	P1_CCW_SPEED_HI },
                                 ;     386 	{ "p1","p1wpl",_fip, 3, pwm_print_p1wpl, get_flt, set_flt,(float *)&pwm.c[PWM_1].ccw_phase_lo,	P1_CCW_PHASE_LO },
                                 ;     387 	{ "p1","p1wph",_fip, 3, pwm_print_p1wph, get_flt, set_flt,(float *)&pwm.c[PWM_1].ccw_phase_hi,	P1_CCW_PHASE_HI },
                                 ;     388 	{ "p1","p1pof",_fip, 3, pwm_print_p1pof, get_flt, set_flt,(float *)&pwm.c[PWM_1].phase_off,		P1_PWM_PHASE_OFF },
                                 ;     389 
                                 ;     390 	// Coordinate system offsets (G54-G59 and G92)
                                 ;     391 	{ "g54","g54x",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G54][AXIS_X], G54_X_OFFSET },
                                 ;     392 	{ "g54","g54y",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G54][AXIS_Y], G54_Y_OFFSET },
                                 ;     393 	{ "g54","g54z",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G54][AXIS_Z], G54_Z_OFFSET },
                                 ;     394 	{ "g54","g54a",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G54][AXIS_A], G54_A_OFFSET },
                                 ;     395 	{ "g54","g54b",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G54][AXIS_B], G54_B_OFFSET },
                                 ;     396 	{ "g54","g54c",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G54][AXIS_C], G54_C_OFFSET },
                                 ;     397 
                                 ;     398 	{ "g55","g55x",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G55][AXIS_X], G55_X_OFFSET },
                                 ;     399 	{ "g55","g55y",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G55][AXIS_Y], G55_Y_OFFSET },
                                 ;     400 	{ "g55","g55z",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G55][AXIS_Z], G55_Z_OFFSET },
                                 ;     401 	{ "g55","g55a",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G55][AXIS_A], G55_A_OFFSET },
                                 ;     402 	{ "g55","g55b",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G55][AXIS_B], G55_B_OFFSET },
                                 ;     403 	{ "g55","g55c",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G55][AXIS_C], G55_C_OFFSET },
                                 ;     404 
                                 ;     405 	{ "g56","g56x",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G56][AXIS_X], G56_X_OFFSET },
                                 ;     406 	{ "g56","g56y",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G56][AXIS_Y], G56_Y_OFFSET },
                                 ;     407 	{ "g56","g56z",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G56][AXIS_Z], G56_Z_OFFSET },
                                 ;     408 	{ "g56","g56a",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G56][AXIS_A], G56_A_OFFSET },
                                 ;     409 	{ "g56","g56b",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G56][AXIS_B], G56_B_OFFSET },
                                 ;     410 	{ "g56","g56c",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G56][AXIS_C], G56_C_OFFSET },
                                 ;     411 
                                 ;     412 	{ "g57","g57x",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G57][AXIS_X], G57_X_OFFSET },
                                 ;     413 	{ "g57","g57y",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G57][AXIS_Y], G57_Y_OFFSET },
                                 ;     414 	{ "g57","g57z",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G57][AXIS_Z], G57_Z_OFFSET },
                                 ;     415 	{ "g57","g57a",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G57][AXIS_A], G57_A_OFFSET },
                                 ;     416 	{ "g57","g57b",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G57][AXIS_B], G57_B_OFFSET },
                                 ;     417 	{ "g57","g57c",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G57][AXIS_C], G57_C_OFFSET },
                                 ;     418 
                                 ;     419 	{ "g58","g58x",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G58][AXIS_X], G58_X_OFFSET },
                                 ;     420 	{ "g58","g58y",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G58][AXIS_Y], G58_Y_OFFSET },
                                 ;     421 	{ "g58","g58z",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G58][AXIS_Z], G58_Z_OFFSET },
                                 ;     422 	{ "g58","g58a",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G58][AXIS_A], G58_A_OFFSET },
                                 ;     423 	{ "g58","g58b",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G58][AXIS_B], G58_B_OFFSET },
                                 ;     424 	{ "g58","g58c",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G58][AXIS_C], G58_C_OFFSET },
                                 ;     425 
                                 ;     426 	{ "g59","g59x",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G59][AXIS_X], G59_X_OFFSET },
                                 ;     427 	{ "g59","g59y",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G59][AXIS_Y], G59_Y_OFFSET },
                                 ;     428 	{ "g59","g59z",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G59][AXIS_Z], G59_Z_OFFSET },
                                 ;     429 	{ "g59","g59a",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G59][AXIS_A], G59_A_OFFSET },
                                 ;     430 	{ "g59","g59b",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G59][AXIS_B], G59_B_OFFSET },
                                 ;     431 	{ "g59","g59c",_fipc, 3, cm_print_cofs, get_flt, set_flu,(float *)&cm.offset[G59][AXIS_C], G59_C_OFFSET },
                                 ;     432 
                                 ;     433 	{ "g92","g92x",_fi, 3, cm_print_cofs, get_flt, set_nul,(float *)&cm.gmx.origin_offset[AXIS_X], 0 },// G92 handled differently
                                 ;     434 	{ "g92","g92y",_fi, 3, cm_print_cofs, get_flt, set_nul,(float *)&cm.gmx.origin_offset[AXIS_Y], 0 },
                                 ;     435 	{ "g92","g92z",_fi, 3, cm_print_cofs, get_flt, set_nul,(float *)&cm.gmx.origin_offset[AXIS_Z], 0 },
                                 ;     436 	{ "g92","g92a",_fi, 3, cm_print_cofs, get_flt, set_nul,(float *)&cm.gmx.origin_offset[AXIS_A], 0 },
                                 ;     437 	{ "g92","g92b",_fi, 3, cm_print_cofs, get_flt, set_nul,(float *)&cm.gmx.origin_offset[AXIS_B], 0 },
                                 ;     438 	{ "g92","g92c",_fi, 3, cm_print_cofs, get_flt, set_nul,(float *)&cm.gmx.origin_offset[AXIS_C], 0 },
                                 ;     439 
                                 ;     440 	// Coordinate positions (G28, G30)
                                 ;     441 	{ "g28","g28x",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g28_position[AXIS_X], 0 },// g28 handled differently
                                 ;     442 	{ "g28","g28y",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g28_position[AXIS_Y], 0 },
                                 ;     443 	{ "g28","g28z",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g28_position[AXIS_Z], 0 },
                                 ;     444 	{ "g28","g28a",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g28_position[AXIS_A], 0 },
                                 ;     445 	{ "g28","g28b",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g28_position[AXIS_B], 0 },
                                 ;     446 	{ "g28","g28c",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g28_position[AXIS_C], 0 },
                                 ;     447 
                                 ;     448 	{ "g30","g30x",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g30_position[AXIS_X], 0 },// g30 handled differently
                                 ;     449 	{ "g30","g30y",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g30_position[AXIS_Y], 0 },
                                 ;     450 	{ "g30","g30z",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g30_position[AXIS_Z], 0 },
                                 ;     451 	{ "g30","g30a",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g30_position[AXIS_A], 0 },
                                 ;     452 	{ "g30","g30b",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g30_position[AXIS_B], 0 },
                                 ;     453 	{ "g30","g30c",_fi, 3, cm_print_cpos, get_flt, set_nul,(float *)&cm.gmx.g30_position[AXIS_C], 0 },
                                 ;     454 
                                 ;     455 	// this is a 128bit UUID for identifying a previously committed job state
                                 ;     456 	{ "jid","jida",_f0, 0, tx_print_nul, get_data, set_data, (float *)&cs.job_id[0], 0},
                                 ;     457 	{ "jid","jidb",_f0, 0, tx_print_nul, get_data, set_data, (float *)&cs.job_id[1], 0},
                                 ;     458 	{ "jid","jidc",_f0, 0, tx_print_nul, get_data, set_data, (float *)&cs.job_id[2], 0},
                                 ;     459 	{ "jid","jidd",_f0, 0, tx_print_nul, get_data, set_data, (float *)&cs.job_id[3], 0},
                                 ;     460 
                                 ;     461 	// System parameters
                                 ;     462 	{ "sys","ja",  _fipnc,0, cm_print_ja,  get_flt,   set_flu,    (float *)&cm.junction_acceleration,JUNCTION_ACCELERATION },
                                 ;     463 	{ "sys","ct",  _fipnc,4, cm_print_ct,  get_flt,   set_flu,    (float *)&cm.chordal_tolerance,	CHORDAL_TOLERANCE },
                                 ;     464 	{ "sys","sl",  _fipn, 0, cm_print_sl,  get_ui8,   set_ui8,    (float *)&cm.soft_limit_enable,	SOFT_LIMIT_ENABLE },
                                 ;     465 	{ "sys","st",  _fipn, 0, sw_print_st,  get_ui8,   sw_set_st,  (float *)&sw.switch_type,			SWITCH_TYPE },
                                 ;     466 	{ "sys","mt",  _fipn, 2, st_print_mt,  get_flt,   st_set_mt,  (float *)&st_cfg.motor_power_timeout,MOTOR_IDLE_TIMEOUT},
                                 ;     467 	{ "",   "me",  _f0,   0, tx_print_str, st_set_me, st_set_me,  (float *)&cs.null, 0 },
                                 ;     468 	{ "",   "md",  _f0,   0, tx_print_str, st_set_md, st_set_md,  (float *)&cs.null, 0 },
                                 ;     469 
                                 ;     470 	{ "sys","ej",  _fipn, 0, js_print_ej,  get_ui8,   set_01,     (float *)&cfg.comm_mode,			COMM_MODE },
                                 ;     471 	{ "sys","jv",  _fipn, 0, js_print_jv,  get_ui8,   json_set_jv,(float *)&js.json_verbosity,		JSON_VERBOSITY },
                                 ;     472 	{ "sys","js",  _fipn, 0, js_print_js,  get_ui8,   set_01,     (float *)&js.json_syntax, 		JSON_SYNTAX_MODE },
                                 ;     473 	{ "sys","tv",  _fipn, 0, tx_print_tv,  get_ui8,   set_01,     (float *)&txt.text_verbosity,		TEXT_VERBOSITY },
                                 ;     474 	{ "sys","qv",  _fipn, 0, qr_print_qv,  get_ui8,   set_0123,   (float *)&qr.queue_report_verbosity,QUEUE_REPORT_VERBOSITY },
                                 ;     475 	{ "sys","sv",  _fipn, 0, sr_print_sv,  get_ui8,   set_012,    (float *)&sr.status_report_verbosity,STATUS_REPORT_VERBOSITY },
                                 ;     476 	{ "sys","si",  _fipn, 0, sr_print_si,  get_int,   sr_set_si,  (float *)&sr.status_report_interval,STATUS_REPORT_INTERVAL_MS },
                                 ;     477 //	{ "sys","spi", _fipn, 0, xio_print_spi,get_ui8,   xio_set_spi,(float *)&xio.spi_state,			0 },
                                 ;     478 
                                 ;     479 	{ "sys","ec",  _fipn, 0, cfg_print_ec,  get_ui8,   set_ec,     (float *)&cfg.enable_cr,			COM_EXPAND_CR },
                                 ;     480 	{ "sys","ee",  _fipn, 0, cfg_print_ee,  get_ui8,   set_ee,     (float *)&cfg.enable_echo,		COM_ENABLE_ECHO },
                                 ;     481 	{ "sys","ex",  _fipn, 0, cfg_print_ex,  get_ui8,   set_ex,     (float *)&cfg.enable_flow_control,COM_ENABLE_FLOW_CONTROL },
                                 ;     482 	// RXMOD{ "sys","baud",_fn,   0, cfg_print_baud,get_ui8,   set_baud,   (float *)&cfg.usb_baud_rate,		XIO_BAUD_115200 },
                                 ;     483 	// RXMOD{ "sys","net", _fipn, 0, cfg_print_net, get_ui8,   set_ui8,    (float *)&cs.network_mode,		NETWORK_MODE },
                                 ;     484 
                                 ;     485 	// switch state readouts
                                 ;     486 /*
                                 ;     487 	{ "ss","ss0",  _f0, 0, print_ss, get_ui8, set_nul, (float *)&sw.state[0], 0 },
                                 ;     488 	{ "ss","ss1",  _f0, 0, print_ss, get_ui8, set_nul, (float *)&sw.state[1], 0 },
                                 ;     489 	{ "ss","ss2",  _f0, 0, print_ss, get_ui8, set_nul, (float *)&sw.state[2], 0 },
                                 ;     490 	{ "ss","ss3",  _f0, 0, print_ss, get_ui8, set_nul, (float *)&sw.state[3], 0 },
                                 ;     491 	{ "ss","ss4",  _f0, 0, print_ss, get_ui8, set_nul, (float *)&sw.state[4], 0 },
                                 ;     492 	{ "ss","ss5",  _f0, 0, print_ss, get_ui8, set_nul, (float *)&sw.state[5], 0 },
                                 ;     493 	{ "ss","ss6",  _f0, 0, print_ss, get_ui8, set_nul, (float *)&sw.state[6], 0 },
                                 ;     494 	{ "ss","ss7",  _f0, 0, print_ss, get_ui8, set_nul, (float *)&sw.state[7], 0 },
                                 ;     495 */
                                 ;     496 	// NOTE: The ordering within the gcode defaults is important for token resolution
                                 ;     497 	{ "sys","gpl", _fipn, 0, cm_print_gpl, get_ui8, set_012, (float *)&cm.select_plane,	GCODE_DEFAULT_PLANE },
                                 ;     498 	{ "sys","gun", _fipn, 0, cm_print_gun, get_ui8, set_01,  (float *)&cm.units_mode,	GCODE_DEFAULT_UNITS },
                                 ;     499 	{ "sys","gco", _fipn, 0, cm_print_gco, get_ui8, set_ui8, (float *)&cm.coord_system,	GCODE_DEFAULT_COORD_SYSTEM },
                                 ;     500 	{ "sys","gpa", _fipn, 0, cm_print_gpa, get_ui8, set_012, (float *)&cm.path_control,	GCODE_DEFAULT_PATH_CONTROL },
                                 ;     501 	{ "sys","gdi", _fipn, 0, cm_print_gdi, get_ui8, set_01,  (float *)&cm.distance_mode,GCODE_DEFAULT_DISTANCE_MODE },
                                 ;     502 	{ "",   "gc",  _f0,   0, tx_print_nul, gc_get_gc, gc_run_gc,(float *)&cs.null, 0 }, // gcode block - must be last in this group
                                 ;     503 
                                 ;     504 	// "hidden" parameters (not in system group)
                                 ;     505 //	{ "",   "ms",  _fip, 0, cm_print_ms,  get_flt, set_flt, (float *)&cm.estd_segment_usec,	NOM_SEGMENT_USEC },
                                 ;     506 //	{ "",   "ml",  _fipc,4, cm_print_ml,  get_flt, set_flu, (float *)&cm.min_segment_len,	MIN_LINE_LENGTH },
                                 ;     507 	{ "",   "ma",  _fipc,4, cm_print_ma,  get_flt, set_flu, (float *)&cm.arc_segment_len,	ARC_SEGMENT_LENGTH },
                                 ;     508 	{ "",   "fd",  _fip, 0, tx_print_ui8, get_ui8, set_01,  (float *)&js.json_footer_depth,	JSON_FOOTER_DEPTH },
                                 ;     509 
                                 ;     510 	// User defined data groups
                                 ;     511 	{ "uda","uda0", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_a[0], USER_DATA_A0 },
                                 ;     512 	{ "uda","uda1", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_a[1], USER_DATA_A1 },
                                 ;     513 	{ "uda","uda2", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_a[2], USER_DATA_A2 },
                                 ;     514 	{ "uda","uda3", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_a[3], USER_DATA_A3 },
                                 ;     515 
                                 ;     516 	{ "udb","udb0", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_b[0], USER_DATA_B0 },
                                 ;     517 	{ "udb","udb1", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_b[1], USER_DATA_B1 },
                                 ;     518 	{ "udb","udb2", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_b[2], USER_DATA_B2 },
                                 ;     519 	{ "udb","udb3", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_b[3], USER_DATA_B3 },
                                 ;     520 
                                 ;     521 	{ "udc","udc0", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_c[0], USER_DATA_C0 },
                                 ;     522 	{ "udc","udc1", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_c[1], USER_DATA_C1 },
                                 ;     523 	{ "udc","udc2", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_c[2], USER_DATA_C2 },
                                 ;     524 	{ "udc","udc3", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_c[3], USER_DATA_C3 },
                                 ;     525 
                                 ;     526 	{ "udd","udd0", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_d[0], USER_DATA_D0 },
                                 ;     527 	{ "udd","udd1", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_d[1], USER_DATA_D1 },
                                 ;     528 	{ "udd","udd2", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_d[2], USER_DATA_D2 },
                                 ;     529 	{ "udd","udd3", _fip, 0, tx_print_int, get_data, set_data,(float *)&cfg.user_data_d[3], USER_DATA_D3 },
                                 ;     530 
                                 ;     531 	// Diagnostic parameters
                                 ;     532 #ifdef __DIAGNOSTIC_PARAMETERS
                                 ;     533 	{ "_te","_tex",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target[AXIS_X], 0 },			// X target endpoint
                                 ;     534 	{ "_te","_tey",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target[AXIS_Y], 0 },
                                 ;     535 	{ "_te","_tez",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target[AXIS_Z], 0 },
                                 ;     536 	{ "_te","_tea",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target[AXIS_A], 0 },
                                 ;     537 	{ "_te","_teb",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target[AXIS_B], 0 },
                                 ;     538 	{ "_te","_tec",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target[AXIS_C], 0 },
                                 ;     539 
                                 ;     540 	{ "_tr","_trx",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.gm.target[AXIS_X], 0 },			// X target runtime
                                 ;     541 	{ "_tr","_try",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.gm.target[AXIS_Y], 0 },
                                 ;     542 	{ "_tr","_trz",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.gm.target[AXIS_Z], 0 },
                                 ;     543 	{ "_tr","_tra",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.gm.target[AXIS_A], 0 },
                                 ;     544 	{ "_tr","_trb",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.gm.target[AXIS_B], 0 },
                                 ;     545 	{ "_tr","_trc",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.gm.target[AXIS_C], 0 },
                                 ;     546 
                                 ;     547 #if (MOTORS >= 1)
                                 ;     548 	{ "_ts","_ts1",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target_steps[MOTOR_1], 0 },		// Motor 1 target steps
                                 ;     549 	{ "_ps","_ps1",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.position_steps[MOTOR_1], 0 },	// Motor 1 position steps
                                 ;     550 	{ "_cs","_cs1",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.commanded_steps[MOTOR_1], 0 },	// Motor 1 commanded steps (delayed steps)
                                 ;     551 	{ "_es","_es1",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.encoder_steps[MOTOR_1], 0 },	// Motor 1 encoder steps
                                 ;     552 	{ "_xs","_xs1",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&st_pre.mot[MOTOR_1].corrected_steps, 0 }, // Motor 1 correction steps applied
                                 ;     553 	{ "_fe","_fe1",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.following_error[MOTOR_1], 0 },	// Motor 1 following error in steps
                                 ;     554 #endif
                                 ;     555 #if (MOTORS >= 2)
                                 ;     556 	{ "_ts","_ts2",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target_steps[MOTOR_2], 0 },
                                 ;     557 	{ "_ps","_ps2",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.position_steps[MOTOR_2], 0 },
                                 ;     558 	{ "_cs","_cs2",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.commanded_steps[MOTOR_2], 0 },
                                 ;     559 	{ "_es","_es2",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.encoder_steps[MOTOR_2], 0 },
                                 ;     560 	{ "_xs","_xs2",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&st_pre.mot[MOTOR_2].corrected_steps, 0 },
                                 ;     561 	{ "_fe","_fe2",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.following_error[MOTOR_2], 0 },
                                 ;     562 #endif
                                 ;     563 #if (MOTORS >= 3)
                                 ;     564 	{ "_ts","_ts3",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target_steps[MOTOR_3], 0 },
                                 ;     565 	{ "_ps","_ps3",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.position_steps[MOTOR_3], 0 },
                                 ;     566 	{ "_cs","_cs3",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.commanded_steps[MOTOR_3], 0 },
                                 ;     567 	{ "_es","_es3",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.encoder_steps[MOTOR_3], 0 },
                                 ;     568 	{ "_xs","_xs3",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&st_pre.mot[MOTOR_3].corrected_steps, 0 },
                                 ;     569 	{ "_fe","_fe3",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.following_error[MOTOR_3], 0 },
                                 ;     570 #endif
                                 ;     571 #if (MOTORS >= 4)
                                 ;     572 	{ "_ts","_ts4",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target_steps[MOTOR_4], 0 },
                                 ;     573 	{ "_ps","_ps4",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.position_steps[MOTOR_4], 0 },
                                 ;     574 	{ "_cs","_cs4",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.commanded_steps[MOTOR_4], 0 },
                                 ;     575 	{ "_es","_es4",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.encoder_steps[MOTOR_4], 0 },
                                 ;     576 	{ "_xs","_xs4",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&st_pre.mot[MOTOR_4].corrected_steps, 0 },
                                 ;     577 	{ "_fe","_fe4",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.following_error[MOTOR_4], 0 },
                                 ;     578 #endif
                                 ;     579 #if (MOTORS >= 5)
                                 ;     580 	{ "_ts","_ts5",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target_steps[MOTOR_5], 0 },
                                 ;     581 	{ "_ps","_ps5",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.position_steps[MOTOR_5], 0 },
                                 ;     582 	{ "_cs","_cs5",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.commanded_steps[MOTOR_5], 0 },
                                 ;     583 	{ "_es","_es5",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.encoder_steps[MOTOR_5], 0 },
                                 ;     584 	{ "_xs","_xs6",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&st_pre.mot[MOTOR_6].corrected_steps, 0 },
                                 ;     585 	{ "_fe","_fe5",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.following_error[MOTOR_5], 0 },
                                 ;     586 #endif
                                 ;     587 #if (MOTORS >= 6)
                                 ;     588 	{ "_ts","_ts6",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.target_steps[MOTOR_6], 0 },
                                 ;     589 	{ "_ps","_ps6",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.position_steps[MOTOR_6], 0 },
                                 ;     590 	{ "_cs","_cs6",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.commanded_steps[MOTOR_6], 0 },
                                 ;     591 	{ "_es","_es6",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.encoder_steps[MOTOR_6], 0 },
                                 ;     592 	{ "_xs","_xs5",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&st_pre.mot[MOTOR_5].corrected_steps, 0 },
                                 ;     593 	{ "_fe","_fe6",_f0, 2, tx_print_flt, get_flt, set_nul,(float *)&mr.following_error[MOTOR_6], 0 },
                                 ;     594 #endif
                                 ;     595 	{ "",   "_dam",_f0, 0, tx_print_nul, cm_dam,  cm_dam, (float *)&cs.null, 0 },	// dump active model
                                 ;     596 #endif	//  __DIAGNOSTIC_PARAMETERS
                                 ;     597 
                                 ;     598 	// Persistence for status report - must be in sequence
                                 ;     599 	// *** Count must agree with NV_STATUS_REPORT_LEN in config.h ***
                                 ;     600 	{ "","se00",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[0],0 },
                                 ;     601 	{ "","se01",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[1],0 },
                                 ;     602 	{ "","se02",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[2],0 },
                                 ;     603 	{ "","se03",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[3],0 },
                                 ;     604 	{ "","se04",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[4],0 },
                                 ;     605 	{ "","se05",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[5],0 },
                                 ;     606 	{ "","se06",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[6],0 },
                                 ;     607 	{ "","se07",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[7],0 },
                                 ;     608 	{ "","se08",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[8],0 },
                                 ;     609 	{ "","se09",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[9],0 },
                                 ;     610 	{ "","se10",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[10],0 },
                                 ;     611 	{ "","se11",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[11],0 },
                                 ;     612 	{ "","se12",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[12],0 },
                                 ;     613 	{ "","se13",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[13],0 },
                                 ;     614 	{ "","se14",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[14],0 },
                                 ;     615 	{ "","se15",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[15],0 },
                                 ;     616 	{ "","se16",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[16],0 },
                                 ;     617 	{ "","se17",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[17],0 },
                                 ;     618 	{ "","se18",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[18],0 },
                                 ;     619 	{ "","se19",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[19],0 },
                                 ;     620 	{ "","se20",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[20],0 },
                                 ;     621 	{ "","se21",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[21],0 },
                                 ;     622 	{ "","se22",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[22],0 },
                                 ;     623 	{ "","se23",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[23],0 },
                                 ;     624 	{ "","se24",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[24],0 },
                                 ;     625 	{ "","se25",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[25],0 },
                                 ;     626 	{ "","se26",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[26],0 },
                                 ;     627 	{ "","se27",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[27],0 },
                                 ;     628 	{ "","se28",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[28],0 },
                                 ;     629 	{ "","se29",_fp, 0, tx_print_nul, get_int, set_int,(float *)&sr.status_report_list[29],0 },
                                 ;     630 // Count is 30, since se00 counts as one.
                                 ;     631 
                                 ;     632 	// Group lookups - must follow the single-valued entries for proper sub-string matching
                                 ;     633 	// *** Must agree with NV_COUNT_GROUPS below ***
                                 ;     634 	// *** START COUNTING FROM HERE ***
                                 ;     635 	{ "","sys",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// system group
                                 ;     636 	{ "","p1", _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// PWM 1 group
                                 ;     637 
                                 ;     638 	{ "","1",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// motor groups
                                 ;     639 	{ "","2",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     640 	{ "","3",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     641 	{ "","4",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     642 #if (MOTORS >= 5)
                                 ;     643 	{ "","5",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     644 #endif
                                 ;     645 #if (MOTORS >= 6)
                                 ;     646 	{ "","6",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     647 #endif
                                 ;     648 
                                 ;     649 	{ "","x",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// axis groups
                                 ;     650 	{ "","y",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     651 	{ "","z",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     652 	{ "","a",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     653 	{ "","b",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     654 	{ "","c",  _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     655 
                                 ;     656 //	{ "","ss", _f0, 0, tx_print_nul, get_grp, set_nul,(float *)&cs.null,0 },	// switch states
                                 ;     657 	{ "","g54",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// coord offset groups
                                 ;     658 	{ "","g55",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     659 	{ "","g56",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     660 	{ "","g57",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     661 	{ "","g58",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     662 	{ "","g59",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },
                                 ;     663 	{ "","g92",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// origin offsets
                                 ;     664 	{ "","g28",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// g28 home position
                                 ;     665 	{ "","g30",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// g30 home position
                                 ;     666 
                                 ;     667 	{ "","mpo",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// machine position group
                                 ;     668 	{ "","pos",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// work position group
                                 ;     669 	{ "","ofs",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// work offset group
                                 ;     670 	{ "","hom",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// axis homing state group
                                 ;     671 	{ "","prb",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// probing state group
                                 ;     672 	{ "","pwr",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// motor power enagled group
                                 ;     673 	{ "","jog",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// axis jogging state group
                                 ;     674 	{ "","jid",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// job ID group
                                 ;     675 
                                 ;     676 	{ "","uda", _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// user data group
                                 ;     677 	{ "","udb", _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// user data group
                                 ;     678 	{ "","udc", _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// user data group
                                 ;     679 	{ "","udd", _f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// user data group
                                 ;     680 
                                 ;     681 #ifdef __DIAGNOSTIC_PARAMETERS
                                 ;     682 	{ "","_te",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// target axis endpoint group
                                 ;     683 	{ "","_tr",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// target axis runtime group
                                 ;     684 	{ "","_ts",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// target motor steps group
                                 ;     685 	{ "","_ps",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// position motor steps group
                                 ;     686 	{ "","_cs",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// commanded motor steps group
                                 ;     687 	{ "","_es",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// encoder steps group
                                 ;     688 	{ "","_xs",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// correction steps group
                                 ;     689 	{ "","_fe",_f0, 0, tx_print_nul, get_grp, set_grp,(float *)&cs.null,0 },	// following error group
                                 ;     690 #endif
                                 ;     691 
                                 ;     692 	// Uber-group (groups of groups, for text-mode displays only)
                                 ;     693 	// *** Must agree with NV_COUNT_UBER_GROUPS below ****
                                 ;     694 	{ "", "m", _f0, 0, tx_print_nul, _do_motors, set_nul,(float *)&cs.null,0 },
                                 ;     695 	{ "", "q", _f0, 0, tx_print_nul, _do_axes,   set_nul,(float *)&cs.null,0 },
                                 ;     696 	{ "", "o", _f0, 0, tx_print_nul, _do_offsets,set_nul,(float *)&cs.null,0 },
                                 ;     697 	{ "", "$", _f0, 0, tx_print_nul, _do_all,    set_nul,(float *)&cs.null,0 }
                                 ;     698 };
                                 ;     699 
                                 ;     700 /***** Make sure these defines line up with any changes in the above table *****/
                                 ;     701 
                                 ;     702 #define NV_COUNT_UBER_GROUPS 	4 		// count of uber-groups, above
                                 ;     703 #define STANDARD_GROUPS 		33		// count of standard groups, excluding diagnostic parameter groups
                                 ;     704 
                                 ;     705 #if (MOTORS >= 5)
                                 ;     706 #define MOTOR_GROUP_5			1
                                 ;     707 #else
                                 ;     708 #define MOTOR_GROUP_5			0
                                 ;     709 #endif
                                 ;     710 
                                 ;     711 #if (MOTORS >= 6)
                                 ;     712 #define MOTOR_GROUP_6			1
                                 ;     713 #else
                                 ;     714 #define MOTOR_GROUP_6			0
                                 ;     715 #endif
                                 ;     716 
                                 ;     717 #ifdef __DIAGNOSTIC_PARAMETERS
                                 ;     718 #define DIAGNOSTIC_GROUPS 		8		// count of diagnostic groups only
                                 ;     719 #else
                                 ;     720 #define DIAGNOSTIC_GROUPS 		0
                                 ;     721 #endif
                                 ;     722 #define NV_COUNT_GROUPS 		(STANDARD_GROUPS + MOTOR_GROUP_5 + MOTOR_GROUP_6 + DIAGNOSTIC_GROUPS)
                                 ;     723 
                                 ;     724 /* <DO NOT MESS WITH THESE DEFINES> */
                                 ;     725 #define NV_INDEX_MAX (sizeof cfgArray / sizeof(cfgItem_t))
                                 ;     726 #define NV_INDEX_END_SINGLES		(NV_INDEX_MAX - NV_COUNT_UBER_GROUPS - NV_COUNT_GROUPS - NV_STATUS_REPORT_LEN)
                                 ;     727 #define NV_INDEX_START_GROUPS		(NV_INDEX_MAX - NV_COUNT_UBER_GROUPS - NV_COUNT_GROUPS)
                                 ;     728 #define NV_INDEX_START_UBER_GROUPS (NV_INDEX_MAX - NV_COUNT_UBER_GROUPS)
                                 ;     729 /* </DO NOT MESS WITH THESE DEFINES> */
                                 ;     730 
                                 ;     731 index_t	nv_index_max() { return ( NV_INDEX_MAX );}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",731
00000000 6040                    		SUB #04H, R0
00000002 F909015B01              		MOV.W #015BH, 02H[R0]
00000007 B809                    		MOVU.W 02H[R0], R1
00000009 6701                    		RTSD #04H
0000000B                         _nv_index_is_single:
                                 		.STACK	_nv_index_is_single=12
                                 ;     732 uint8_t nv_index_is_single(index_t index) { return ((index <= NV_INDEX_END_SINGLES) ? true : false);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",732
0000000B 6080                    		SUB #08H, R0
0000000D 9089                    		MOV.W R1, 06H[R0]
0000000F 76011901                		CMP #0119H, R1
00000013 24rr                    		BGTU L19
00000015                         L18:	; bb
00000015 F80601                  		MOV.L #00000001H, [R0]
00000018 08                   S  		BRA L20
00000019                         L19:	; bb6
00000019 F80600                  		MOV.L #00000000H, [R0]
0000001C                         L20:	; bb7
0000001C EC01                    		MOV.L [R0], R1
0000001E 8109                    		MOV.B R1, 05H[R0]
00000020 B109                    		MOVU.B 05H[R0], R1
00000022 6702                    		RTSD #08H
00000024                         _nv_index_is_group:
                                 		.STACK	_nv_index_is_group=12
                                 ;     733 uint8_t nv_index_is_group(index_t index) { return (((index >= NV_INDEX_START_GROUPS) && (index < NV_INDEX_START_UBER_GROUPS)) ? true : false);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",733
00000024 6080                    		SUB #08H, R0
00000026 9089                    		MOV.W R1, 06H[R0]
00000028 76013601                		CMP #0136H, R1
0000002C 23rr                    		BLTU L24
0000002E                         L22:	; bb
0000002E B889                    		MOVU.W 06H[R0], R1
00000030 76015601                		CMP #0156H, R1
00000034 24rr                    		BGTU L24
00000036                         L23:	; bb10
00000036 F80601                  		MOV.L #00000001H, [R0]
00000039 08                   S  		BRA L25
0000003A                         L24:	; bb11
0000003A F80600                  		MOV.L #00000000H, [R0]
0000003D                         L25:	; bb12
0000003D EC01                    		MOV.L [R0], R1
0000003F 6101                    		CMP #00H, R1
00000041 10                   S  		BEQ L27
00000042                         L26:	; bb15
00000042 F80601                  		MOV.L #00000001H, [R0]
00000045 08                   S  		BRA L28
00000046                         L27:	; bb16
00000046 F80600                  		MOV.L #00000000H, [R0]
00000049                         L28:	; bb17
00000049 EC01                    		MOV.L [R0], R1
0000004B 8109                    		MOV.B R1, 05H[R0]
0000004D B109                    		MOVU.B 05H[R0], R1
0000004F 6702                    		RTSD #08H
00000051                         _nv_index_lt_groups:
                                 		.STACK	_nv_index_lt_groups=12
                                 ;     734 uint8_t nv_index_lt_groups(index_t index) { return ((index <= NV_INDEX_START_GROUPS) ? true : false);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",734
00000051 6080                    		SUB #08H, R0
00000053 9089                    		MOV.W R1, 06H[R0]
00000055 76013601                		CMP #0136H, R1
00000059 24rr                    		BGTU L31
0000005B                         L30:	; bb
0000005B F80601                  		MOV.L #00000001H, [R0]
0000005E 08                   S  		BRA L32
0000005F                         L31:	; bb6
0000005F F80600                  		MOV.L #00000000H, [R0]
00000062                         L32:	; bb7
00000062 EC01                    		MOV.L [R0], R1
00000064 8109                    		MOV.B R1, 05H[R0]
00000066 B109                    		MOVU.B 05H[R0], R1
00000068 6702                    		RTSD #08H
0000006A                         _set_flu:
                                 		.STACK	_set_flu=12
                                 ;     735 
                                 ;     736 /***** APPLICATION SPECIFIC CONFIGS AND EXTENSIONS TO GENERIC FUNCTIONS *****/
                                 ;     737 
                                 ;     738 /*
                                 ;     739  * set_flu() - set floating point number with G20/G21 units conversion
                                 ;     740  *
                                 ;     741  * The number 'setted' will have been delivered in external units (inches or mm).
                                 ;     742  * It is written to the target memory location in internal canonical units (mm).
                                 ;     743  * The original nv->value is also changed so persistence works correctly.
                                 ;     744  * Displays should convert back from internal canonical form to external form.
                                 ;     745  */
                                 ;     746 
                                 ;     747 stat_t set_flu(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",747
0000006A 6080                    		SUB #08H, R0
0000006C A009                    		MOV.L R1, 04H[R0]
                                 ;     748 {
                                 ;     749 	if (cm_get_units_mode(MODEL) == INCHES) {		// if in inches...
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",749
0000006E FB12rrrrrrrr            		MOV.L #_cm, R1
00000074 72115402                		ADD #0254H, R1
00000078 05rrrrrr             A  		BSR _cm_get_units_mode
0000007C 6101                    		CMP #00H, R1
0000007E 21rr                    		BNE L35
00000080                         L34:	; bb2
                                 ;     750 		nv->value *= MM_PER_INCH;					// convert to canonical millimeter units
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",750
00000080 A809                    		MOV.L 04H[R0], R1
00000082 A912                    		MOV.L 10H[R1], R2
00000084 FD72323333CB41          		FMUL #41CB3333H, R2
0000008B A112                    		MOV.L R2, 10H[R1]
0000008D                         L35:	; bb11
                                 ;     751 	}
                                 ;     752 	*((float *)GET_TABLE_WORD(target)) = nv->value;	// write value as millimeters or degrees
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",752
0000008D A809                    		MOV.L 04H[R0], R1
0000008F B912                    		MOVU.W 08H[R1], R2
00000091 6C52                    		SHLL #05H, R2
00000093 FB32rrrrrrrr            		MOV.L #_cfgArray, R3
00000099 4B23                    		ADD R2, R3
0000009B A9B2                    		MOV.L 18H[R3], R2
0000009D E11204                  		MOV.L 10H[R1], [R2]
000000A0                         L36:	; bb11.split
                                 ;     753 	nv->precision = GET_TABLE_WORD(precision);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",753
000000A0 A809                    		MOV.L 04H[R0], R1
000000A2 B912                    		MOVU.W 08H[R1], R2
000000A4 6C52                    		SHLL #05H, R2
000000A6 FBE2rrrrrrrr            		MOV.L #_cfgArray, R14
000000AC 4B2E                    		ADD R2, R14
000000AE C5E10B0C                		MOV.B 0BH[R14], 0CH[R1]
000000B2                         L37:	; bb11.split1
                                 ;     754 	nv->valuetype = TYPE_FLOAT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",754
000000B2 A809                    		MOV.L 04H[R0], R1
000000B4 3C1B04                  		MOV.B #04H, 0BH[R1]
000000B7                         L38:	; bb11.split2
                                 ;     755 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",755
000000B7 3C0300                  		MOV.B #00H, 03H[R0]
000000BA B089                    		MOVU.B 03H[R0], R1
000000BC                         L39:	; bb11.split3
                                 ;     756 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",756
000000BC 5B11                    		MOVU.B R1, R1
000000BE 6702                    		RTSD #08H
000000C0                         _preprocess_float:
                                 		.STACK	_preprocess_float=12
                                 ;     757 
                                 ;     758 /*
                                 ;     759  * preprocess_float() - pre-process floating point number for units display
                                 ;     760  */
                                 ;     761 
                                 ;     762 void preprocess_float(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",762
000000C0 6080                    		SUB #08H, R0
000000C2 A009                    		MOV.L R1, 04H[R0]
                                 ;     763 {
                                 ;     764 	if (isnan((double)nv->value) || isinf((double)nv->value)) return; // illegal float values
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",764
000000C4 A911                    		MOV.L 10H[R1], R1
000000C6 05rrrrrr             A  		BSR __FDclass
000000CA E301                    		MOV.L R1, [R0]
000000CC 6121                    		CMP #02H, R1
000000CE 20rr                    		BEQ L42
000000D0                         L41:	; bb26
000000D0 A809                    		MOV.L 04H[R0], R1
000000D2 A911                    		MOV.L 10H[R1], R1
000000D4 05rrrrrr             A  		BSR __FDclass
000000D8 E301                    		MOV.L R1, [R0]
000000DA 6111                    		CMP #01H, R1
000000DC 18                   S  		BNE L43
000000DD                         L42:	; bb48
000000DD F80601                  		MOV.L #00000001H, [R0]
000000E0 08                   S  		BRA L44
000000E1                         L43:	; bb49
000000E1 F80600                  		MOV.L #00000000H, [R0]
000000E4                         L44:	; bb50
000000E4 EC01                    		MOV.L [R0], R1
000000E6 6101                    		CMP #00H, R1
000000E8 21rr                    		BNE L48
000000EA                         L45:	; bb55
                                 ;     765 	if (GET_TABLE_BYTE(flags) & F_CONVERT) {		// unit conversion required?
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",765
000000EA A809                    		MOV.L 04H[R0], R1
000000EC B911                    		MOVU.W 08H[R1], R1
000000EE 6C51                    		SHLL #05H, R1
000000F0 FBE2rrrrrrrr            		MOV.L #_cfgArray, R14
000000F6 4B1E                    		ADD R1, R14
000000F8 F5E30A                  		BTST #03H, 0AH[R14].B
000000FB 20rr                    		BEQ L48
000000FD                         L46:	; bb57
                                 ;     766 		if (cm_get_units_mode(MODEL) == INCHES) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",766
000000FD FB12rrrrrrrr            		MOV.L #_cm, R1
00000103 72115402                		ADD #0254H, R1
00000107 05rrrrrr             A  		BSR _cm_get_units_mode
0000010B 6101                    		CMP #00H, R1
0000010D 21rr                    		BNE L48
0000010F                         L47:	; bb58
                                 ;     767 			nv->value *= INCHES_PER_MM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",767
0000010F A809                    		MOV.L 04H[R0], R1
00000111 A912                    		MOV.L 10H[R1], R2
00000113 FD72328542213D          		FMUL #3D214285H, R2
0000011A A112                    		MOV.L R2, 10H[R1]
0000011C 6702                    		RTSD #08H
0000011E                         L48:	; return
                                 ;     768 		}
                                 ;     769 	}
                                 ;     770 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",770
0000011E 6702                    		RTSD #08H
00000120                         __$_do_group_list:
                                 		.STACK	__$_do_group_list=20
                                 ;     771 
                                 ;     772 /**** TinyG UberGroup Operations ****************************************************
                                 ;     773  * Uber groups are groups of groups organized for convenience:
                                 ;     774  *	- motors		- group of all motor groups
                                 ;     775  *	- axes			- group of all axis groups
                                 ;     776  *	- offsets		- group of all offsets and stored positions
                                 ;     777  *	- all			- group of all groups
                                 ;     778  *
                                 ;     779  * _do_group_list()	- get and print all groups in the list (iteration)
                                 ;     780  * _do_motors()		- get and print motor uber group 1-N
                                 ;     781  * _do_axes()		- get and print axis uber group XYZABC
                                 ;     782  * _do_offsets()	- get and print offset uber group G54-G59, G28, G30, G92
                                 ;     783  * _do_all()		- get and print all groups uber group
                                 ;     784  */
                                 ;     785 
                                 ;     786 static stat_t _do_group_list(nvObj_t *nv, char list[][TOKEN_LEN+1]) // helper to print multiple groups in a list
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",786
00000120 7EA6                    		PUSH.L R6
00000122 60C0                    		SUB #0CH, R0
00000124 A081                    		MOV.L R1, 08H[R0]
00000126 A00A                    		MOV.L R2, 04H[R0]
                                 ;     787 {
                                 ;     788 	for (uint8_t i=0; i < NV_MAX_OBJECTS; i++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",788
00000128 3C0200                  		MOV.B #00H, 02H[R0]
0000012B 2Err                 B  		BRA L58
0000012D                         L50:	; bb4
                                 ;     789 		if (list[i][0] == NUL)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",789
0000012D B081                    		MOVU.B 02H[R0], R1
0000012F 6361                    		MUL #06H, R1
00000131 A80A                    		MOV.L 04H[R0], R2
00000133 FEC21E                  		MOVU.B [R2,R1], R14
00000136 610E                    		CMP #00H, R14
00000138 18                   S  		BNE L52
00000139                         L51:	; bb5
                                 ;     790             return (STAT_COMPLETE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",790
00000139 3C0104                  		MOV.B #04H, 01H[R0]
0000013C 2Err                 B  		BRA L60
0000013E                         L52:	; bb17
                                 ;     791 
                                 ;     792 		nv_reset_nv_list();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",792
0000013E 05rrrrrr             A  		BSR _nv_reset_nv_list
00000142                         L53:	; bb17.split
                                 ;     793 		nv = nv_body;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",793
00000142 FB12rrrrrrrr            		MOV.L #_nvl, R1
00000148 711128                  		ADD #28H, R1
0000014B A081                    		MOV.L R1, 08H[R0]
0000014D                         L54:	; bb17.split1
                                 ;     794 		strncpy(nv->token, list[i], TOKEN_LEN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",794
0000014D A884                    		MOV.L 08H[R0], R4
0000014F 714118                  		ADD #18H, R4, R1
00000152 B082                    		MOVU.B 02H[R0], R2
00000154 6362                    		MUL #06H, R2
00000156 06890201                		ADD 04H[R0].L, R2
0000015A 6653                    		MOV.L #00000005H, R3
0000015C 7F87                    		SMOVU
0000015E 71441D                  		ADD #1DH, R4
00000161 EF41                    		MOV.L R4, R1
00000163 4331                    		SUB R3, R1
00000165 6602                    		MOV.L #00000000H, R2
00000167 7F88                    		SSTR.B
00000169                         L55:	; bb17.split2
                                 ;     795 		nv->index = nv_get_index((const char_t *)"", nv->token);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",795
00000169 A886                    		MOV.L 08H[R0], R6
0000016B 716218                  		ADD #18H, R6, R2
0000016E FB12rrrrrrrr            		MOV.L #_L10, R1
00000174 05rrrrrr             A  		BSR _nv_get_index
00000178 9161                    		MOV.W R1, 08H[R6]
0000017A                         L56:	; bb17.split3
                                 ;     796 //		nv->valuetype = TYPE_PARENT;
                                 ;     797 		nv_get_nvObj(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",797
0000017A A881                    		MOV.L 08H[R0], R1
0000017C 05rrrrrr             A  		BSR _nv_get_nvObj
00000180                         L57:	; bb17.split4
00000180 6623                    		MOV.L #00000002H, R3
00000182 6632                    		MOV.L #00000003H, R2
00000184 6601                    		MOV.L #00000000H, R1
                                 ;     798 		nv_print_list(STAT_OK, TEXT_MULTILINE_FORMATTED, JSON_RESPONSE_FORMAT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",798
00000186 05rrrrrr             A  		BSR _nv_print_list
0000018A B081                    		MOVU.B 02H[R0], R1
0000018C 6211                    		ADD #01H, R1
0000018E 8081                    		MOV.B R1, 02H[R0]
00000190                         L58:	; bb36
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",788
00000190 B081                    		MOVU.B 02H[R0], R1
00000192 75511D                  		CMP #1DH, R1
00000195 29rr                    		BLT L50
00000197                         L59:	; bb42
                                 ;     799 	}
                                 ;     800 	return (STAT_COMPLETE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",800
00000197 3C0104                  		MOV.B #04H, 01H[R0]
0000019A                         L60:	; bb44
0000019A C5000103                		MOV.B 01H[R0], 03H[R0]
                                 ;     801 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",801
0000019E B089                    		MOVU.B 03H[R0], R1
000001A0 3F6604                  		RTSD #10H, R6-R6
000001A3                         __$_do_motors:
                                 		.STACK	__$_do_motors=40
                                 ;     802 
                                 ;     803 static stat_t _do_motors(nvObj_t *nv)	// print parameters for all motor groups
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",803
000001A3 7100DC                  		ADD #0FFFFFFDCH, R0
000001A6 A201                    		MOV.L R1, 20H[R0]
000001A8 75431E                  		MOV.L #0000001EH, R3
                                 ;     804 {
                                 ;     805 #if MOTORS == 2
                                 ;     806 	char list[][TOKEN_LEN+1] = {"1","2",""}; // must have a terminating element
                                 ;     807 #endif
                                 ;     808 #if MOTORS == 3
                                 ;     809 	char list[][TOKEN_LEN+1] = {"1","2","3",""}; // must have a terminating element
                                 ;     810 #endif
                                 ;     811 #if MOTORS == 4
                                 ;     812 	char list[][TOKEN_LEN+1] = {"1","2","3","4",""}; // must have a terminating element
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",812
000001AB FB22rrrrrrrr            		MOV.L #_L11, R2
000001B1 710101                  		ADD #01H, R0, R1
000001B4 7F8F                    		SMOVF
000001B6                         L62:	; entry.split
                                 ;     813 #endif
                                 ;     814 #if MOTORS == 5
                                 ;     815 	char list[][TOKEN_LEN+1] = {"1","2","3","4","5",""}; // must have a terminating element
                                 ;     816 #endif
                                 ;     817 #if MOTORS == 6
                                 ;     818 	char list[][TOKEN_LEN+1] = {"1","2","3","4","5","6",""}; // must have a terminating element
                                 ;     819 #endif
                                 ;     820 	return (_do_group_list(nv, list));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",820
000001B6 AA01                    		MOV.L 20H[R0], R1
000001B8 710201                  		ADD #01H, R0, R2
000001BB 39rrrr               W  		BSR __$_do_group_list
000001BE 8789                    		MOV.B R1, 1FH[R0]
000001C0 B789                    		MOVU.B 1FH[R0], R1
000001C2                         L63:	; entry.split1
                                 ;     821 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",821
000001C2 5B11                    		MOVU.B R1, R1
000001C4 6709                    		RTSD #24H
000001C6                         __$_do_axes:
                                 		.STACK	__$_do_axes=52
                                 ;     822 
                                 ;     823 static stat_t _do_axes(nvObj_t *nv)	// print parameters for all axis groups
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",823
000001C6 7100D0                  		ADD #0FFFFFFD0H, R0
000001C9 A289                    		MOV.L R1, 2CH[R0]
000001CB 75432A                  		MOV.L #0000002AH, R3
                                 ;     824 {
                                 ;     825 	char list[][TOKEN_LEN+1] = {"x","y","z","a","b","c",""}; // must have a terminating element
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",825
000001CE FB22rrrrrrrr            		MOV.L #_L12, R2
000001D4 710101                  		ADD #01H, R0, R1
000001D7 7F8F                    		SMOVF
000001D9                         L65:	; entry.split
                                 ;     826 	return (_do_group_list(nv, list));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",826
000001D9 AA89                    		MOV.L 2CH[R0], R1
000001DB 710201                  		ADD #01H, R0, R2
000001DE 39rrrr               W  		BSR __$_do_group_list
000001E1 C7012B                  		MOV.B R1, 2BH[R0]
000001E4 59012B                  		MOVU.B 2BH[R0], R1
000001E7                         L66:	; entry.split1
                                 ;     827 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",827
000001E7 5B11                    		MOVU.B R1, R1
000001E9 670C                    		RTSD #30H
000001EB                         __$_do_offsets:
                                 		.STACK	__$_do_offsets=72
                                 ;     828 
                                 ;     829 static stat_t _do_offsets(nvObj_t *nv)	// print offset parameters for G54-G59,G92, G28, G30
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",829
000001EB 7100BC                  		ADD #0FFFFFFBCH, R0
000001EE A401                    		MOV.L R1, 40H[R0]
000001F0 75433C                  		MOV.L #0000003CH, R3
                                 ;     830 {
                                 ;     831 	char list[][TOKEN_LEN+1] = {"g54","g55","g56","g57","g58","g59","g92","g28","g30",""}; // must have a terminating element
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",831
000001F3 FB22rrrrrrrr            		MOV.L #_L13, R2
000001F9 710103                  		ADD #03H, R0, R1
000001FC 7F8F                    		SMOVF
000001FE                         L68:	; entry.split
                                 ;     832 	return (_do_group_list(nv, list));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",832
000001FE AC01                    		MOV.L 40H[R0], R1
00000200 710203                  		ADD #03H, R0, R2
00000203 39rrrr               W  		BSR __$_do_group_list
00000206 C7013F                  		MOV.B R1, 3FH[R0]
00000209 59013F                  		MOVU.B 3FH[R0], R1
0000020C                         L69:	; entry.split1
                                 ;     833 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",833
0000020C 5B11                    		MOVU.B R1, R1
0000020E 6711                    		RTSD #44H
00000210                         __$_do_all:
                                 		.STACK	__$_do_all=12
                                 ;     834 
                                 ;     835 static stat_t _do_all(nvObj_t *nv)	// print all parameters
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",835
00000210 6080                    		SUB #08H, R0
00000212 A009                    		MOV.L R1, 04H[R0]
                                 ;     836 {
                                 ;     837 	strcpy(nv->token,"sys");			// print system group
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",837
00000214 FBE2rrrrrrrr            		MOV.L #_L14, R14
0000021A E4E106                  		MOV.L [R14], 18H[R1]
0000021D                         L71:	; entry.split
                                 ;     838 	get_grp(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",838
0000021D A809                    		MOV.L 04H[R0], R1
0000021F 05rrrrrr             A  		BSR _get_grp
00000223                         L72:	; entry.split1
00000223 6623                    		MOV.L #00000002H, R3
00000225 6632                    		MOV.L #00000003H, R2
00000227 6601                    		MOV.L #00000000H, R1
                                 ;     839 	nv_print_list(STAT_OK, TEXT_MULTILINE_FORMATTED, JSON_RESPONSE_FORMAT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",839
00000229 05rrrrrr             A  		BSR _nv_print_list
0000022D                         L73:	; entry.split2
                                 ;     840 
                                 ;     841 	_do_motors(nv);					// print all motor groups
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",841
0000022D A809                    		MOV.L 04H[R0], R1
0000022F 39rrrr               W  		BSR __$_do_motors
00000232                         L74:	; entry.split3
                                 ;     842 	_do_axes(nv);						// print all axis groups
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",842
00000232 A809                    		MOV.L 04H[R0], R1
00000234 39rrrr               W  		BSR __$_do_axes
00000237                         L75:	; entry.split4
                                 ;     843 
                                 ;     844 	strcpy(nv->token,"p1");			// print PWM group
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",844
00000237 A809                    		MOV.L 04H[R0], R1
00000239 711118                  		ADD #18H, R1
0000023C 6633                    		MOV.L #00000003H, R3
0000023E FB22rrrrrrrr            		MOV.L #_L15, R2
00000244 7F87                    		SMOVU
00000246                         L76:	; entry.split5
                                 ;     845 	get_grp(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",845
00000246 A809                    		MOV.L 04H[R0], R1
00000248 05rrrrrr             A  		BSR _get_grp
0000024C                         L77:	; entry.split6
0000024C 6623                    		MOV.L #00000002H, R3
0000024E 6632                    		MOV.L #00000003H, R2
00000250 6601                    		MOV.L #00000000H, R1
                                 ;     846 	nv_print_list(STAT_OK, TEXT_MULTILINE_FORMATTED, JSON_RESPONSE_FORMAT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",846
00000252 05rrrrrr             A  		BSR _nv_print_list
00000256                         L78:	; entry.split7
                                 ;     847 
                                 ;     848 	return (_do_offsets(nv));			// print all offsets
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",848
00000256 A809                    		MOV.L 04H[R0], R1
00000258 39rrrr               W  		BSR __$_do_offsets
0000025B 8089                    		MOV.B R1, 03H[R0]
0000025D B089                    		MOVU.B 03H[R0], R1
0000025F                         L79:	; entry.split8
                                 ;     849 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",849
0000025F 5B11                    		MOVU.B R1, R1
00000261 6702                    		RTSD #08H
00000263                         __$_set_comm_helper:
                                 		.STACK	__$_set_comm_helper=20
                                 ;     850 
                                 ;     851 /***********************************************************************************
                                 ;     852  * CONFIGURATION AND INTERFACE FUNCTIONS
                                 ;     853  * Functions to get and set variables from the cfgArray table
                                 ;     854  * Most of these can be found in their respective modules.
                                 ;     855  ***********************************************************************************/
                                 ;     856 
                                 ;     857 /**** COMMUNICATIONS FUNCTIONS ******************************************************
                                 ;     858  * set_ec() - enable CRLF on TX
                                 ;     859  * set_ee() - enable character echo
                                 ;     860  * set_ex() - enable XON/XOFF or RTS/CTS flow control
                                 ;     861  * set_baud() - set USB baud rate
                                 ;     862  * get_rx()	- get bytes available in RX buffer
                                 ;     863  *
                                 ;     864  *	The above assume USB is the std device
                                 ;     865  */
                                 ;     866 
                                 ;     867 static stat_t _set_comm_helper(nvObj_t *nv, uint32_t yes, uint32_t no)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",867
00000263 7100F0                  		ADD #0FFFFFFF0H, R0
00000266 A089                    		MOV.L R1, 0CH[R0]
00000268 A082                    		MOV.L R2, 08H[R0]
0000026A A00B                    		MOV.L R3, 04H[R0]
0000026C                         L81:	; entry.split
                                 ;     868 {
                                 ;     869 	if (fp_NOT_ZERO(nv->value)) {
                                 ;     870 //RXMOD		(void)xio_ctrl(XIO_DEV_USB, yes);
                                 ;     871 	} else {
                                 ;     872 //RXMOD			(void)xio_ctrl(XIO_DEV_USB, no);
                                 ;     873 	}
                                 ;     874 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",874
0000026C 3C0300                  		MOV.B #00H, 03H[R0]
0000026F B089                    		MOVU.B 03H[R0], R1
00000271                         L82:	; entry.split1
                                 ;     875 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",875
00000271 5B11                    		MOVU.B R1, R1
00000273 6704                    		RTSD #10H
00000275                         __$set_ec:
                                 		.STACK	__$set_ec=12
                                 ;     876 
                                 ;     877 static stat_t set_ec(nvObj_t *nv) 				// expand CR to CRLF on TX
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",877
00000275 6080                    		SUB #08H, R0
00000277 A009                    		MOV.L R1, 04H[R0]
00000279 FBE20000803F            		MOV.L #3F800000H, R14
                                 ;     878 {
                                 ;     879 	if (nv->value > true)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",879
0000027F FC851E04                		FCMP 10H[R1].L, R14
00000283 26rr                    		BPZ L85
00000285                         L84:	; bb2
                                 ;     880         return (STAT_INPUT_VALUE_RANGE_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",880
00000285 3C026E                  		MOV.B #6EH, 02H[R0]
00000288 2Err                 B  		BRA L89
0000028A                         L85:	; bb9
                                 ;     881 	cfg.enable_cr = (uint8_t)nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",881
0000028A A809                    		MOV.L 04H[R0], R1
0000028C A911                    		MOV.L 10H[R1], R1
0000028E FD72110000004F          		FCMP #4F000000H, R1
00000295 29rr                    		BLT L87
00000297                         L86:	; bb9
00000297 FD7221000080CF          		FADD #0CF800000H, R1
0000029E                         L87:	; bb9
0000029E FC9711                  		FTOI R1, R1
000002A1 FB22rrrrrrrr            		MOV.L #_cfg, R2
000002A7 80A9                    		MOV.B R1, 03H[R2]
000002A9                         L88:	; bb9.split
                                 ;     882 	return(_set_comm_helper(nv, XIO_CRLF, XIO_NOCRLF));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",882
000002A9 A809                    		MOV.L 04H[R0], R1
000002AB 754380                  		MOV.L #00000080H, R3
000002AE 754240                  		MOV.L #00000040H, R2
000002B1 39rrrr               W  		BSR __$_set_comm_helper
000002B4 8081                    		MOV.B R1, 02H[R0]
000002B6                         L89:	; bb17
000002B6 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     883 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",883
000002BA B089                    		MOVU.B 03H[R0], R1
000002BC 6702                    		RTSD #08H
000002BE                         __$set_ee:
                                 		.STACK	__$set_ee=12
                                 ;     884 
                                 ;     885 static stat_t set_ee(nvObj_t *nv) 				// enable character echo
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",885
000002BE 6080                    		SUB #08H, R0
000002C0 A009                    		MOV.L R1, 04H[R0]
000002C2 FBE20000803F            		MOV.L #3F800000H, R14
                                 ;     886 {
                                 ;     887 	if (nv->value > true)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",887
000002C8 FC851E04                		FCMP 10H[R1].L, R14
000002CC 26rr                    		BPZ L92
000002CE                         L91:	; bb2
                                 ;     888         return (STAT_INPUT_VALUE_RANGE_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",888
000002CE 3C026E                  		MOV.B #6EH, 02H[R0]
000002D1 2Err                 B  		BRA L96
000002D3                         L92:	; bb9
                                 ;     889 	cfg.enable_echo = (uint8_t)nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",889
000002D3 A809                    		MOV.L 04H[R0], R1
000002D5 A911                    		MOV.L 10H[R1], R1
000002D7 FD72110000004F          		FCMP #4F000000H, R1
000002DE 29rr                    		BLT L94
000002E0                         L93:	; bb9
000002E0 FD7221000080CF          		FADD #0CF800000H, R1
000002E7                         L94:	; bb9
000002E7 FC9711                  		FTOI R1, R1
000002EA FB22rrrrrrrr            		MOV.L #_cfg, R2
000002F0 8121                    		MOV.B R1, 04H[R2]
000002F2                         L95:	; bb9.split
                                 ;     890 	return(_set_comm_helper(nv, XIO_ECHO, XIO_NOECHO));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",890
000002F2 A809                    		MOV.L 04H[R0], R1
000002F4 754320                  		MOV.L #00000020H, R3
000002F7 754210                  		MOV.L #00000010H, R2
000002FA 39rrrr               W  		BSR __$_set_comm_helper
000002FD 8081                    		MOV.B R1, 02H[R0]
000002FF                         L96:	; bb17
000002FF C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     891 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",891
00000303 B089                    		MOVU.B 03H[R0], R1
00000305 6702                    		RTSD #08H
00000307                         __$set_ex:
                                 		.STACK	__$set_ex=12
                                 ;     892 
                                 ;     893 static stat_t set_ex(nvObj_t *nv)				// enable XON/XOFF or RTS/CTS flow control
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",893
00000307 6080                    		SUB #08H, R0
00000309 A009                    		MOV.L R1, 04H[R0]
0000030B FBE200000040            		MOV.L #40000000H, R14
                                 ;     894 {
                                 ;     895 	if (nv->value > FLOW_CONTROL_RTS)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",895
00000311 FC851E04                		FCMP 10H[R1].L, R14
00000315 26rr                    		BPZ L99
00000317                         L98:	; bb2
                                 ;     896         return (STAT_INPUT_VALUE_RANGE_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",896
00000317 3C026E                  		MOV.B #6EH, 02H[R0]
0000031A 2Err                 B  		BRA L103
0000031C                         L99:	; bb9
                                 ;     897 	cfg.enable_flow_control = (uint8_t)nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",897
0000031C A809                    		MOV.L 04H[R0], R1
0000031E A911                    		MOV.L 10H[R1], R1
00000320 FD72110000004F          		FCMP #4F000000H, R1
00000327 29rr                    		BLT L101
00000329                         L100:	; bb9
00000329 FD7221000080CF          		FADD #0CF800000H, R1
00000330                         L101:	; bb9
00000330 FC9711                  		FTOI R1, R1
00000333 FB22rrrrrrrr            		MOV.L #_cfg, R2
00000339 8129                    		MOV.B R1, 05H[R2]
0000033B                         L102:	; bb9.split
                                 ;     898 	return(_set_comm_helper(nv, XIO_XOFF, XIO_NOXOFF));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",898
0000033B A809                    		MOV.L 04H[R0], R1
0000033D 6683                    		MOV.L #00000008H, R3
0000033F 6642                    		MOV.L #00000004H, R2
00000341 39rrrr               W  		BSR __$_set_comm_helper
00000344 8081                    		MOV.B R1, 02H[R0]
00000346                         L103:	; bb17
00000346 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     899 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",899
0000034A B089                    		MOVU.B 03H[R0], R1
0000034C 6702                    		RTSD #08H
0000034E                         __$get_rx:
                                 		.STACK	__$get_rx=12
                                 ;     900 
                                 ;     901 static stat_t get_rx(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",901
0000034E 6080                    		SUB #08H, R0
00000350 A009                    		MOV.L R1, 04H[R0]
                                 ;     902 {
                                 ;     903 #ifdef __AVR
                                 ;     904 	nv->value = (float)xio_get_usb_rx_free();
                                 ;     905 	nv->valuetype = TYPE_INTEGER;
                                 ;     906 	return (STAT_OK);
                                 ;     907 #endif
                                 ;     908 #ifdef __ARM
                                 ;     909 	nv->value = (float)254;				// ARM always says the serial buffer is available (max)
                                 ;     910 	nv->valuetype = TYPE_INTEGER;
                                 ;     911 	return (STAT_OK);
                                 ;     912 #endif
                                 ;     913 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",913
00000352 3C0300                  		MOV.B #00H, 03H[R0]
00000355 B089                    		MOVU.B 03H[R0], R1
00000357                         L105:	; entry.split
                                 ;     914 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",914
00000357 5B11                    		MOVU.B R1, R1
00000359 6702                    		RTSD #08H
0000035B                         _set_baud_callback:
                                 		.STACK	_set_baud_callback=8
                                 ;     915 
                                 ;     916 /* run_sx()	- send XOFF, XON --- test only
                                 ;     917 static stat_t run_sx(nvObj_t *nv)
                                 ;     918 {
                                 ;     919 	xio_putc(XIO_DEV_USB, XOFF);
                                 ;     920 	xio_putc(XIO_DEV_USB, XON);
                                 ;     921 	return (STAT_OK);
                                 ;     922 }
                                 ;     923 */
                                 ;     924 
                                 ;     925 /*
                                 ;     926  * set_baud() - set USB baud rate
                                 ;     927  *
                                 ;     928  *	See xio_usart.h for valid values. Works as a callback.
                                 ;     929  *	The initial routine changes the baud config setting and sets a flag
                                 ;     930  *	Then it posts a user message indicating the new baud rate
                                 ;     931  *	Then it waits for the TX buffer to empty (so the message is sent)
                                 ;     932  *	Then it performs the callback to apply the new baud rate
                                 ;     933  */
                                 ;     934 
                                 ;     935 stat_t set_baud_callback(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",935
0000035B 6040                    		SUB #04H, R0
                                 ;     936 {
                                 ;     937 	if (cfg.usb_baud_flag == false)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",937
0000035D FB12rrrrrrrr            		MOV.L #_cfg, R1
00000363 B199                    		MOVU.B 07H[R1], R1
00000365 6101                    		CMP #00H, R1
00000367 18                   S  		BNE L108
00000368                         L107:	; bb1
                                 ;     938         return(STAT_NOOP);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",938
00000368 3C0203                  		MOV.B #03H, 02H[R0]
0000036B 2Err                 B  		BRA L110
0000036D                         L108:	; bb7
                                 ;     939 	cfg.usb_baud_flag = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",939
0000036D FB12rrrrrrrr            		MOV.L #_cfg, R1
00000373 3C1700                  		MOV.B #00H, 07H[R1]
00000376                         L109:	; bb7.split
                                 ;     940 	//RXMOD		xio_set_baud(XIO_DEV_USB, cfg.usb_baud_rate);
                                 ;     941 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",941
00000376 3C0200                  		MOV.B #00H, 02H[R0]
00000379                         L110:	; bb9
00000379 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     942 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",942
0000037D B089                    		MOVU.B 03H[R0], R1
0000037F 6701                    		RTSD #04H
00000381                         _cfg_print_ec:
                                 		.STACK	_cfg_print_ec=8
                                 ;     943 
                                 ;     944 /***********************************************************************************
                                 ;     945  * TEXT MODE SUPPORT
                                 ;     946  * Functions to print variables from the cfgArray table
                                 ;     947  ***********************************************************************************/
                                 ;     948 
                                 ;     949 #ifdef __TEXT_MODE
                                 ;     950 
                                 ;     951 //static const char fmt_ic[] PROGMEM = "[ic]  ignore CR or LF on RX%8d [0=off,1=CR,2=LF]\n";
                                 ;     952 static const char fmt_ec[] PROGMEM = "[ec]  expand LF to CRLF on TX%6d [0=off,1=on]\n";
                                 ;     953 static const char fmt_ee[] PROGMEM = "[ee]  enable echo%18d [0=off,1=on]\n";
                                 ;     954 static const char fmt_ex[] PROGMEM = "[ex]  enable flow control%10d [0=off,1=XON/XOFF, 2=RTS/CTS]\n";
                                 ;     955 static const char fmt_baud[] PROGMEM = "[baud] USB baud rate%15d [1=9600,2=19200,3=38400,4=57600,5=115200,6=230400]\n";
                                 ;     956 static const char fmt_net[] PROGMEM = "[net] network mode%17d [0=master]\n";
                                 ;     957 static const char fmt_rx[] PROGMEM = "rx:%d\n";
                                 ;     958 
                                 ;     959 void cfg_print_ec(nvObj_t *nv) { text_print_ui8(nv, fmt_ec);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",959
00000381 6040                    		SUB #04H, R0
00000383 E301                    		MOV.L R1, [R0]
00000385 FB22rrrrrrrr            		MOV.L #__$fmt_ec, R2
0000038B 05rrrrrr             A  		BSR _text_print_ui8
0000038F 6701                    		RTSD #04H
00000391                         _cfg_print_ee:
                                 		.STACK	_cfg_print_ee=8
                                 ;     960 void cfg_print_ee(nvObj_t *nv) { text_print_ui8(nv, fmt_ee);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",960
00000391 6040                    		SUB #04H, R0
00000393 E301                    		MOV.L R1, [R0]
00000395 FB22rrrrrrrr            		MOV.L #__$fmt_ee, R2
0000039B 05rrrrrr             A  		BSR _text_print_ui8
0000039F 6701                    		RTSD #04H
000003A1                         _cfg_print_ex:
                                 		.STACK	_cfg_print_ex=8
                                 ;     961 void cfg_print_ex(nvObj_t *nv) { text_print_ui8(nv, fmt_ex);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",961
000003A1 6040                    		SUB #04H, R0
000003A3 E301                    		MOV.L R1, [R0]
000003A5 FB22rrrrrrrr            		MOV.L #__$fmt_ex, R2
000003AB 05rrrrrr             A  		BSR _text_print_ui8
000003AF 6701                    		RTSD #04H
000003B1                         _cfg_print_baud:
                                 		.STACK	_cfg_print_baud=8
                                 ;     962 void cfg_print_baud(nvObj_t *nv) { text_print_ui8(nv, fmt_baud);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",962
000003B1 6040                    		SUB #04H, R0
000003B3 E301                    		MOV.L R1, [R0]
000003B5 FB22rrrrrrrr            		MOV.L #__$fmt_baud, R2
000003BB 05rrrrrr             A  		BSR _text_print_ui8
000003BF 6701                    		RTSD #04H
000003C1                         _cfg_print_net:
                                 		.STACK	_cfg_print_net=8
                                 ;     963 void cfg_print_net(nvObj_t *nv) { text_print_ui8(nv, fmt_net);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",963
000003C1 6040                    		SUB #04H, R0
000003C3 E301                    		MOV.L R1, [R0]
000003C5 FB22rrrrrrrr            		MOV.L #__$fmt_net, R2
000003CB 05rrrrrr             A  		BSR _text_print_ui8
000003CF 6701                    		RTSD #04H
000003D1                         _cfg_print_rx:
                                 		.STACK	_cfg_print_rx=8
                                 ;     964 void cfg_print_rx(nvObj_t *nv) { text_print_ui8(nv, fmt_rx);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\config_app.c",964
000003D1 6040                    		SUB #04H, R0
000003D3 E301                    		MOV.L R1, [R0]
000003D5 FB22rrrrrrrr            		MOV.L #__$fmt_rx, R2
000003DB 05rrrrrr             A  		BSR _text_print_ui8
000003DF 6701                    		RTSD #04H
                                 ;     965 
                                 ;     966 #endif // __TEXT_MODE
                                 ;     967 
                                 ;     968 #ifdef __cplusplus
                                 ;     969 }
                                 ;     970 #endif
                                 		.SECTION	C,ROMDATA,ALIGN=4
00000000                         _cfgArray:
00000000 737973                  		.byte	"sys"
00000003 00                      		.byte	00H
00000004 6662                    		.byte	"fb"
00000006 00000000                		.byte	00H,00H,00H,00H
0000000A 07                      		.byte	07H
0000000B 02                      		.byte	02H
0000000C rrrrrrrr                		.lword	_hw_print_fb
00000010 rrrrrrrr                		.lword	_get_flt
00000014 rrrrrrrr                		.lword	_set_nul
00000018 rrrrrrrr                		.lword	(_cs) + 8
0000001C 5218DC43                		.lword	43DC1852H	; float 440.19
00000020 737973                  		.byte	"sys"
00000023 00                      		.byte	00H
00000024 6676                    		.byte	"fv"
00000026 00000000                		.byte	00H,00H,00H,00H
0000002A 07                      		.byte	07H
0000002B 03                      		.byte	03H
0000002C rrrrrrrr                		.lword	_hw_print_fv
00000030 rrrrrrrr                		.lword	_get_flt
00000034 rrrrrrrr                		.lword	_set_nul
00000038 rrrrrrrr                		.lword	(_cs) + 12
0000003C EC51783F                		.lword	3F7851ECH	; float 0.97
00000040 737973                  		.byte	"sys"
00000043 00                      		.byte	00H
00000044 6870                    		.byte	"hp"
00000046 00000000                		.byte	00H,00H,00H,00H
0000004A 07                      		.byte	07H
0000004B 00                      		.byte	00H
0000004C rrrrrrrr                		.lword	_hw_print_hp
00000050 rrrrrrrr                		.lword	_get_flt
00000054 rrrrrrrr                		.lword	_set_flt
00000058 rrrrrrrr                		.lword	(_cs) + 16
0000005C 0000803F                		.lword	3F800000H	; float 1
00000060 737973                  		.byte	"sys"
00000063 00                      		.byte	00H
00000064 6876                    		.byte	"hv"
00000066 00000000                		.byte	00H,00H,00H,00H
0000006A 07                      		.byte	07H
0000006B 00                      		.byte	00H
0000006C rrrrrrrr                		.lword	_hw_print_hv
00000070 rrrrrrrr                		.lword	_get_flt
00000074 rrrrrrrr                		.lword	_hw_set_hv
00000078 rrrrrrrr                		.lword	(_cs) + 20
0000007C 00000041                		.lword	41000000H	; float 8
00000080 737973                  		.byte	"sys"
00000083 00                      		.byte	00H
00000084 6964                    		.byte	"id"
00000086 00000000                		.byte	00H,00H,00H,00H
0000008A 04                      		.byte	04H
0000008B 00                      		.byte	00H
0000008C rrrrrrrr                		.lword	_hw_print_id
00000090 rrrrrrrr                		.lword	_hw_get_id
00000094 rrrrrrrr                		.lword	_set_nul
00000098 rrrrrrrr                		.lword	(_cs) + 4
0000009C 00000000                		.lword	00000000H
000000A0 00                      		.byte	0
000000A1 00                      		.byte	0
000000A2 00                      		.byte	0
000000A3 00                      		.byte	0
000000A4 6E                      		.byte	"n"
000000A5 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
000000AA 01                      		.byte	01H
000000AB 00                      		.byte	00H
000000AC rrrrrrrr                		.lword	_cm_print_line
000000B0 rrrrrrrr                		.lword	_cm_get_mline
000000B4 rrrrrrrr                		.lword	_set_int
000000B8 rrrrrrrr                		.lword	(_cm) + (00000254H)
000000BC 00000000                		.lword	00000000H
000000C0 00                      		.byte	0
000000C1 00                      		.byte	0
000000C2 00                      		.byte	0
000000C3 00                      		.byte	0
000000C4 6C696E65                		.byte	"line"
000000C8 0000                    		.byte	00H,00H
000000CA 01                      		.byte	01H
000000CB 00                      		.byte	00H
000000CC rrrrrrrr                		.lword	_cm_print_line
000000D0 rrrrrrrr                		.lword	_cm_get_line
000000D4 rrrrrrrr                		.lword	_set_int
000000D8 rrrrrrrr                		.lword	(_cm) + (00000254H)
000000DC 00000000                		.lword	00000000H
000000E0 00                      		.byte	0
000000E1 00                      		.byte	0
000000E2 00                      		.byte	0
000000E3 00                      		.byte	0
000000E4 76656C                  		.byte	"vel"
000000E7 000000                  		.byte	00H,00H,00H
000000EA 00                      		.byte	00H
000000EB 02                      		.byte	02H
000000EC rrrrrrrr                		.lword	_cm_print_vel
000000F0 rrrrrrrr                		.lword	_cm_get_vel
000000F4 rrrrrrrr                		.lword	_set_nul
000000F8 rrrrrrrr                		.lword	(_cs) + 4
000000FC 00000000                		.lword	00000000H
00000100 00                      		.byte	0
00000101 00                      		.byte	0
00000102 00                      		.byte	0
00000103 00                      		.byte	0
00000104 66656564                		.byte	"feed"
00000108 0000                    		.byte	00H,00H
0000010A 00                      		.byte	00H
0000010B 02                      		.byte	02H
0000010C rrrrrrrr                		.lword	_cm_print_feed
00000110 rrrrrrrr                		.lword	_cm_get_feed
00000114 rrrrrrrr                		.lword	_set_nul
00000118 rrrrrrrr                		.lword	(_cs) + 4
0000011C 00000000                		.lword	00000000H
00000120 00                      		.byte	0
00000121 00                      		.byte	0
00000122 00                      		.byte	0
00000123 00                      		.byte	0
00000124 73746174                		.byte	"stat"
00000128 0000                    		.byte	00H,00H
0000012A 00                      		.byte	00H
0000012B 00                      		.byte	00H
0000012C rrrrrrrr                		.lword	_cm_print_stat
00000130 rrrrrrrr                		.lword	_cm_get_stat
00000134 rrrrrrrr                		.lword	_set_nul
00000138 rrrrrrrr                		.lword	(_cs) + 4
0000013C 00000000                		.lword	00000000H
00000140 00                      		.byte	0
00000141 00                      		.byte	0
00000142 00                      		.byte	0
00000143 00                      		.byte	0
00000144 6D616373                		.byte	"macs"
00000148 0000                    		.byte	00H,00H
0000014A 00                      		.byte	00H
0000014B 00                      		.byte	00H
0000014C rrrrrrrr                		.lword	_cm_print_macs
00000150 rrrrrrrr                		.lword	_cm_get_macs
00000154 rrrrrrrr                		.lword	_set_nul
00000158 rrrrrrrr                		.lword	(_cs) + 4
0000015C 00000000                		.lword	00000000H
00000160 00                      		.byte	0
00000161 00                      		.byte	0
00000162 00                      		.byte	0
00000163 00                      		.byte	0
00000164 63796373                		.byte	"cycs"
00000168 0000                    		.byte	00H,00H
0000016A 00                      		.byte	00H
0000016B 00                      		.byte	00H
0000016C rrrrrrrr                		.lword	_cm_print_cycs
00000170 rrrrrrrr                		.lword	_cm_get_cycs
00000174 rrrrrrrr                		.lword	_set_nul
00000178 rrrrrrrr                		.lword	(_cs) + 4
0000017C 00000000                		.lword	00000000H
00000180 00                      		.byte	0
00000181 00                      		.byte	0
00000182 00                      		.byte	0
00000183 00                      		.byte	0
00000184 6D6F7473                		.byte	"mots"
00000188 0000                    		.byte	00H,00H
0000018A 00                      		.byte	00H
0000018B 00                      		.byte	00H
0000018C rrrrrrrr                		.lword	_cm_print_mots
00000190 rrrrrrrr                		.lword	_cm_get_mots
00000194 rrrrrrrr                		.lword	_set_nul
00000198 rrrrrrrr                		.lword	(_cs) + 4
0000019C 00000000                		.lword	00000000H
000001A0 00                      		.byte	0
000001A1 00                      		.byte	0
000001A2 00                      		.byte	0
000001A3 00                      		.byte	0
000001A4 686F6C64                		.byte	"hold"
000001A8 0000                    		.byte	00H,00H
000001AA 00                      		.byte	00H
000001AB 00                      		.byte	00H
000001AC rrrrrrrr                		.lword	_cm_print_hold
000001B0 rrrrrrrr                		.lword	_cm_get_hold
000001B4 rrrrrrrr                		.lword	_set_nul
000001B8 rrrrrrrr                		.lword	(_cs) + 4
000001BC 00000000                		.lword	00000000H
000001C0 00                      		.byte	0
000001C1 00                      		.byte	0
000001C2 00                      		.byte	0
000001C3 00                      		.byte	0
000001C4 756E6974                		.byte	"unit"
000001C8 0000                    		.byte	00H,00H
000001CA 00                      		.byte	00H
000001CB 00                      		.byte	00H
000001CC rrrrrrrr                		.lword	_cm_print_unit
000001D0 rrrrrrrr                		.lword	_cm_get_unit
000001D4 rrrrrrrr                		.lword	_set_nul
000001D8 rrrrrrrr                		.lword	(_cs) + 4
000001DC 00000000                		.lword	00000000H
000001E0 00                      		.byte	0
000001E1 00                      		.byte	0
000001E2 00                      		.byte	0
000001E3 00                      		.byte	0
000001E4 636F6F72                		.byte	"coor"
000001E8 0000                    		.byte	00H,00H
000001EA 00                      		.byte	00H
000001EB 00                      		.byte	00H
000001EC rrrrrrrr                		.lword	_cm_print_coor
000001F0 rrrrrrrr                		.lword	_cm_get_coor
000001F4 rrrrrrrr                		.lword	_set_nul
000001F8 rrrrrrrr                		.lword	(_cs) + 4
000001FC 00000000                		.lword	00000000H
00000200 00                      		.byte	0
00000201 00                      		.byte	0
00000202 00                      		.byte	0
00000203 00                      		.byte	0
00000204 6D6F6D6F                		.byte	"momo"
00000208 0000                    		.byte	00H,00H
0000020A 00                      		.byte	00H
0000020B 00                      		.byte	00H
0000020C rrrrrrrr                		.lword	_cm_print_momo
00000210 rrrrrrrr                		.lword	_cm_get_momo
00000214 rrrrrrrr                		.lword	_set_nul
00000218 rrrrrrrr                		.lword	(_cs) + 4
0000021C 00000000                		.lword	00000000H
00000220 00                      		.byte	0
00000221 00                      		.byte	0
00000222 00                      		.byte	0
00000223 00                      		.byte	0
00000224 706C616E                		.byte	"plan"
00000228 0000                    		.byte	00H,00H
0000022A 00                      		.byte	00H
0000022B 00                      		.byte	00H
0000022C rrrrrrrr                		.lword	_cm_print_plan
00000230 rrrrrrrr                		.lword	_cm_get_plan
00000234 rrrrrrrr                		.lword	_set_nul
00000238 rrrrrrrr                		.lword	(_cs) + 4
0000023C 00000000                		.lword	00000000H
00000240 00                      		.byte	0
00000241 00                      		.byte	0
00000242 00                      		.byte	0
00000243 00                      		.byte	0
00000244 70617468                		.byte	"path"
00000248 0000                    		.byte	00H,00H
0000024A 00                      		.byte	00H
0000024B 00                      		.byte	00H
0000024C rrrrrrrr                		.lword	_cm_print_path
00000250 rrrrrrrr                		.lword	_cm_get_path
00000254 rrrrrrrr                		.lword	_set_nul
00000258 rrrrrrrr                		.lword	(_cs) + 4
0000025C 00000000                		.lword	00000000H
00000260 00                      		.byte	0
00000261 00                      		.byte	0
00000262 00                      		.byte	0
00000263 00                      		.byte	0
00000264 64697374                		.byte	"dist"
00000268 0000                    		.byte	00H,00H
0000026A 00                      		.byte	00H
0000026B 00                      		.byte	00H
0000026C rrrrrrrr                		.lword	_cm_print_dist
00000270 rrrrrrrr                		.lword	_cm_get_dist
00000274 rrrrrrrr                		.lword	_set_nul
00000278 rrrrrrrr                		.lword	(_cs) + 4
0000027C 00000000                		.lword	00000000H
00000280 00                      		.byte	0
00000281 00                      		.byte	0
00000282 00                      		.byte	0
00000283 00                      		.byte	0
00000284 66726D6F                		.byte	"frmo"
00000288 0000                    		.byte	00H,00H
0000028A 00                      		.byte	00H
0000028B 00                      		.byte	00H
0000028C rrrrrrrr                		.lword	_cm_print_frmo
00000290 rrrrrrrr                		.lword	_cm_get_frmo
00000294 rrrrrrrr                		.lword	_set_nul
00000298 rrrrrrrr                		.lword	(_cs) + 4
0000029C 00000000                		.lword	00000000H
000002A0 00                      		.byte	0
000002A1 00                      		.byte	0
000002A2 00                      		.byte	0
000002A3 00                      		.byte	0
000002A4 746F6F6C                		.byte	"tool"
000002A8 0000                    		.byte	00H,00H
000002AA 00                      		.byte	00H
000002AB 00                      		.byte	00H
000002AC rrrrrrrr                		.lword	_cm_print_tool
000002B0 rrrrrrrr                		.lword	_cm_get_toolv
000002B4 rrrrrrrr                		.lword	_set_nul
000002B8 rrrrrrrr                		.lword	(_cs) + 4
000002BC 00000000                		.lword	00000000H
000002C0 6D706F                  		.byte	"mpo"
000002C3 00                      		.byte	00H
000002C4 6D706F78                		.byte	"mpox"
000002C8 0000                    		.byte	00H,00H
000002CA 00                      		.byte	00H
000002CB 03                      		.byte	03H
000002CC rrrrrrrr                		.lword	_cm_print_mpo
000002D0 rrrrrrrr                		.lword	_cm_get_mpo
000002D4 rrrrrrrr                		.lword	_set_nul
000002D8 rrrrrrrr                		.lword	(_cs) + 4
000002DC 00000000                		.lword	00000000H
000002E0 6D706F                  		.byte	"mpo"
000002E3 00                      		.byte	00H
000002E4 6D706F79                		.byte	"mpoy"
000002E8 0000                    		.byte	00H,00H
000002EA 00                      		.byte	00H
000002EB 03                      		.byte	03H
000002EC rrrrrrrr                		.lword	_cm_print_mpo
000002F0 rrrrrrrr                		.lword	_cm_get_mpo
000002F4 rrrrrrrr                		.lword	_set_nul
000002F8 rrrrrrrr                		.lword	(_cs) + 4
000002FC 00000000                		.lword	00000000H
00000300 6D706F                  		.byte	"mpo"
00000303 00                      		.byte	00H
00000304 6D706F7A                		.byte	"mpoz"
00000308 0000                    		.byte	00H,00H
0000030A 00                      		.byte	00H
0000030B 03                      		.byte	03H
0000030C rrrrrrrr                		.lword	_cm_print_mpo
00000310 rrrrrrrr                		.lword	_cm_get_mpo
00000314 rrrrrrrr                		.lword	_set_nul
00000318 rrrrrrrr                		.lword	(_cs) + 4
0000031C 00000000                		.lword	00000000H
00000320 6D706F                  		.byte	"mpo"
00000323 00                      		.byte	00H
00000324 6D706F61                		.byte	"mpoa"
00000328 0000                    		.byte	00H,00H
0000032A 00                      		.byte	00H
0000032B 03                      		.byte	03H
0000032C rrrrrrrr                		.lword	_cm_print_mpo
00000330 rrrrrrrr                		.lword	_cm_get_mpo
00000334 rrrrrrrr                		.lword	_set_nul
00000338 rrrrrrrr                		.lword	(_cs) + 4
0000033C 00000000                		.lword	00000000H
00000340 6D706F                  		.byte	"mpo"
00000343 00                      		.byte	00H
00000344 6D706F62                		.byte	"mpob"
00000348 0000                    		.byte	00H,00H
0000034A 00                      		.byte	00H
0000034B 03                      		.byte	03H
0000034C rrrrrrrr                		.lword	_cm_print_mpo
00000350 rrrrrrrr                		.lword	_cm_get_mpo
00000354 rrrrrrrr                		.lword	_set_nul
00000358 rrrrrrrr                		.lword	(_cs) + 4
0000035C 00000000                		.lword	00000000H
00000360 6D706F                  		.byte	"mpo"
00000363 00                      		.byte	00H
00000364 6D706F63                		.byte	"mpoc"
00000368 0000                    		.byte	00H,00H
0000036A 00                      		.byte	00H
0000036B 03                      		.byte	03H
0000036C rrrrrrrr                		.lword	_cm_print_mpo
00000370 rrrrrrrr                		.lword	_cm_get_mpo
00000374 rrrrrrrr                		.lword	_set_nul
00000378 rrrrrrrr                		.lword	(_cs) + 4
0000037C 00000000                		.lword	00000000H
00000380 706F73                  		.byte	"pos"
00000383 00                      		.byte	00H
00000384 706F7378                		.byte	"posx"
00000388 0000                    		.byte	00H,00H
0000038A 00                      		.byte	00H
0000038B 03                      		.byte	03H
0000038C rrrrrrrr                		.lword	_cm_print_pos
00000390 rrrrrrrr                		.lword	_cm_get_pos
00000394 rrrrrrrr                		.lword	_set_nul
00000398 rrrrrrrr                		.lword	(_cs) + 4
0000039C 00000000                		.lword	00000000H
000003A0 706F73                  		.byte	"pos"
000003A3 00                      		.byte	00H
000003A4 706F7379                		.byte	"posy"
000003A8 0000                    		.byte	00H,00H
000003AA 00                      		.byte	00H
000003AB 03                      		.byte	03H
000003AC rrrrrrrr                		.lword	_cm_print_pos
000003B0 rrrrrrrr                		.lword	_cm_get_pos
000003B4 rrrrrrrr                		.lword	_set_nul
000003B8 rrrrrrrr                		.lword	(_cs) + 4
000003BC 00000000                		.lword	00000000H
000003C0 706F73                  		.byte	"pos"
000003C3 00                      		.byte	00H
000003C4 706F737A                		.byte	"posz"
000003C8 0000                    		.byte	00H,00H
000003CA 00                      		.byte	00H
000003CB 03                      		.byte	03H
000003CC rrrrrrrr                		.lword	_cm_print_pos
000003D0 rrrrrrrr                		.lword	_cm_get_pos
000003D4 rrrrrrrr                		.lword	_set_nul
000003D8 rrrrrrrr                		.lword	(_cs) + 4
000003DC 00000000                		.lword	00000000H
000003E0 706F73                  		.byte	"pos"
000003E3 00                      		.byte	00H
000003E4 706F7361                		.byte	"posa"
000003E8 0000                    		.byte	00H,00H
000003EA 00                      		.byte	00H
000003EB 03                      		.byte	03H
000003EC rrrrrrrr                		.lword	_cm_print_pos
000003F0 rrrrrrrr                		.lword	_cm_get_pos
000003F4 rrrrrrrr                		.lword	_set_nul
000003F8 rrrrrrrr                		.lword	(_cs) + 4
000003FC 00000000                		.lword	00000000H
00000400 706F73                  		.byte	"pos"
00000403 00                      		.byte	00H
00000404 706F7362                		.byte	"posb"
00000408 0000                    		.byte	00H,00H
0000040A 00                      		.byte	00H
0000040B 03                      		.byte	03H
0000040C rrrrrrrr                		.lword	_cm_print_pos
00000410 rrrrrrrr                		.lword	_cm_get_pos
00000414 rrrrrrrr                		.lword	_set_nul
00000418 rrrrrrrr                		.lword	(_cs) + 4
0000041C 00000000                		.lword	00000000H
00000420 706F73                  		.byte	"pos"
00000423 00                      		.byte	00H
00000424 706F7363                		.byte	"posc"
00000428 0000                    		.byte	00H,00H
0000042A 00                      		.byte	00H
0000042B 03                      		.byte	03H
0000042C rrrrrrrr                		.lword	_cm_print_pos
00000430 rrrrrrrr                		.lword	_cm_get_pos
00000434 rrrrrrrr                		.lword	_set_nul
00000438 rrrrrrrr                		.lword	(_cs) + 4
0000043C 00000000                		.lword	00000000H
00000440 6F6673                  		.byte	"ofs"
00000443 00                      		.byte	00H
00000444 6F667378                		.byte	"ofsx"
00000448 0000                    		.byte	00H,00H
0000044A 00                      		.byte	00H
0000044B 03                      		.byte	03H
0000044C rrrrrrrr                		.lword	_cm_print_ofs
00000450 rrrrrrrr                		.lword	_cm_get_ofs
00000454 rrrrrrrr                		.lword	_set_nul
00000458 rrrrrrrr                		.lword	(_cs) + 4
0000045C 00000000                		.lword	00000000H
00000460 6F6673                  		.byte	"ofs"
00000463 00                      		.byte	00H
00000464 6F667379                		.byte	"ofsy"
00000468 0000                    		.byte	00H,00H
0000046A 00                      		.byte	00H
0000046B 03                      		.byte	03H
0000046C rrrrrrrr                		.lword	_cm_print_ofs
00000470 rrrrrrrr                		.lword	_cm_get_ofs
00000474 rrrrrrrr                		.lword	_set_nul
00000478 rrrrrrrr                		.lword	(_cs) + 4
0000047C 00000000                		.lword	00000000H
00000480 6F6673                  		.byte	"ofs"
00000483 00                      		.byte	00H
00000484 6F66737A                		.byte	"ofsz"
00000488 0000                    		.byte	00H,00H
0000048A 00                      		.byte	00H
0000048B 03                      		.byte	03H
0000048C rrrrrrrr                		.lword	_cm_print_ofs
00000490 rrrrrrrr                		.lword	_cm_get_ofs
00000494 rrrrrrrr                		.lword	_set_nul
00000498 rrrrrrrr                		.lword	(_cs) + 4
0000049C 00000000                		.lword	00000000H
000004A0 6F6673                  		.byte	"ofs"
000004A3 00                      		.byte	00H
000004A4 6F667361                		.byte	"ofsa"
000004A8 0000                    		.byte	00H,00H
000004AA 00                      		.byte	00H
000004AB 03                      		.byte	03H
000004AC rrrrrrrr                		.lword	_cm_print_ofs
000004B0 rrrrrrrr                		.lword	_cm_get_ofs
000004B4 rrrrrrrr                		.lword	_set_nul
000004B8 rrrrrrrr                		.lword	(_cs) + 4
000004BC 00000000                		.lword	00000000H
000004C0 6F6673                  		.byte	"ofs"
000004C3 00                      		.byte	00H
000004C4 6F667362                		.byte	"ofsb"
000004C8 0000                    		.byte	00H,00H
000004CA 00                      		.byte	00H
000004CB 03                      		.byte	03H
000004CC rrrrrrrr                		.lword	_cm_print_ofs
000004D0 rrrrrrrr                		.lword	_cm_get_ofs
000004D4 rrrrrrrr                		.lword	_set_nul
000004D8 rrrrrrrr                		.lword	(_cs) + 4
000004DC 00000000                		.lword	00000000H
000004E0 6F6673                  		.byte	"ofs"
000004E3 00                      		.byte	00H
000004E4 6F667363                		.byte	"ofsc"
000004E8 0000                    		.byte	00H,00H
000004EA 00                      		.byte	00H
000004EB 03                      		.byte	03H
000004EC rrrrrrrr                		.lword	_cm_print_ofs
000004F0 rrrrrrrr                		.lword	_cm_get_ofs
000004F4 rrrrrrrr                		.lword	_set_nul
000004F8 rrrrrrrr                		.lword	(_cs) + 4
000004FC 00000000                		.lword	00000000H
00000500 686F6D                  		.byte	"hom"
00000503 00                      		.byte	00H
00000504 686F6D65                		.byte	"home"
00000508 0000                    		.byte	00H,00H
0000050A 00                      		.byte	00H
0000050B 00                      		.byte	00H
0000050C rrrrrrrr                		.lword	_cm_print_home
00000510 rrrrrrrr                		.lword	_cm_get_home
00000514 rrrrrrrr                		.lword	_cm_run_home
00000518 rrrrrrrr                		.lword	(_cs) + 4
0000051C 00000000                		.lword	00000000H
00000520 686F6D                  		.byte	"hom"
00000523 00                      		.byte	00H
00000524 686F6D78                		.byte	"homx"
00000528 0000                    		.byte	00H,00H
0000052A 00                      		.byte	00H
0000052B 00                      		.byte	00H
0000052C rrrrrrrr                		.lword	_cm_print_pos
00000530 rrrrrrrr                		.lword	_get_ui8
00000534 rrrrrrrr                		.lword	_set_nul
00000538 rrrrrrrr                		.lword	(_cm) + (00000222H)
0000053C 00000000                		.lword	00000000H
00000540 686F6D                  		.byte	"hom"
00000543 00                      		.byte	00H
00000544 686F6D79                		.byte	"homy"
00000548 0000                    		.byte	00H,00H
0000054A 00                      		.byte	00H
0000054B 00                      		.byte	00H
0000054C rrrrrrrr                		.lword	_cm_print_pos
00000550 rrrrrrrr                		.lword	_get_ui8
00000554 rrrrrrrr                		.lword	_set_nul
00000558 rrrrrrrr                		.lword	(_cm) + (00000223H)
0000055C 00000000                		.lword	00000000H
00000560 686F6D                  		.byte	"hom"
00000563 00                      		.byte	00H
00000564 686F6D7A                		.byte	"homz"
00000568 0000                    		.byte	00H,00H
0000056A 00                      		.byte	00H
0000056B 00                      		.byte	00H
0000056C rrrrrrrr                		.lword	_cm_print_pos
00000570 rrrrrrrr                		.lword	_get_ui8
00000574 rrrrrrrr                		.lword	_set_nul
00000578 rrrrrrrr                		.lword	(_cm) + (00000224H)
0000057C 00000000                		.lword	00000000H
00000580 686F6D                  		.byte	"hom"
00000583 00                      		.byte	00H
00000584 686F6D61                		.byte	"homa"
00000588 0000                    		.byte	00H,00H
0000058A 00                      		.byte	00H
0000058B 00                      		.byte	00H
0000058C rrrrrrrr                		.lword	_cm_print_pos
00000590 rrrrrrrr                		.lword	_get_ui8
00000594 rrrrrrrr                		.lword	_set_nul
00000598 rrrrrrrr                		.lword	(_cm) + (00000225H)
0000059C 00000000                		.lword	00000000H
000005A0 686F6D                  		.byte	"hom"
000005A3 00                      		.byte	00H
000005A4 686F6D62                		.byte	"homb"
000005A8 0000                    		.byte	00H,00H
000005AA 00                      		.byte	00H
000005AB 00                      		.byte	00H
000005AC rrrrrrrr                		.lword	_cm_print_pos
000005B0 rrrrrrrr                		.lword	_get_ui8
000005B4 rrrrrrrr                		.lword	_set_nul
000005B8 rrrrrrrr                		.lword	(_cm) + (00000226H)
000005BC 00000000                		.lword	00000000H
000005C0 686F6D                  		.byte	"hom"
000005C3 00                      		.byte	00H
000005C4 686F6D63                		.byte	"homc"
000005C8 0000                    		.byte	00H,00H
000005CA 00                      		.byte	00H
000005CB 00                      		.byte	00H
000005CC rrrrrrrr                		.lword	_cm_print_pos
000005D0 rrrrrrrr                		.lword	_get_ui8
000005D4 rrrrrrrr                		.lword	_set_nul
000005D8 rrrrrrrr                		.lword	(_cm) + (00000227H)
000005DC 00000000                		.lword	00000000H
000005E0 707262                  		.byte	"prb"
000005E3 00                      		.byte	00H
000005E4 70726265                		.byte	"prbe"
000005E8 0000                    		.byte	00H,00H
000005EA 00                      		.byte	00H
000005EB 00                      		.byte	00H
000005EC rrrrrrrr                		.lword	_tx_print_nul
000005F0 rrrrrrrr                		.lword	_get_ui8
000005F4 rrrrrrrr                		.lword	_set_nul
000005F8 rrrrrrrr                		.lword	(_cm) + (00000228H)
000005FC 00000000                		.lword	00000000H
00000600 707262                  		.byte	"prb"
00000603 00                      		.byte	00H
00000604 70726278                		.byte	"prbx"
00000608 0000                    		.byte	00H,00H
0000060A 00                      		.byte	00H
0000060B 03                      		.byte	03H
0000060C rrrrrrrr                		.lword	_tx_print_nul
00000610 rrrrrrrr                		.lword	_get_flt
00000614 rrrrrrrr                		.lword	_set_nul
00000618 rrrrrrrr                		.lword	(_cm) + 556
0000061C 00000000                		.lword	00000000H
00000620 707262                  		.byte	"prb"
00000623 00                      		.byte	00H
00000624 70726279                		.byte	"prby"
00000628 0000                    		.byte	00H,00H
0000062A 00                      		.byte	00H
0000062B 03                      		.byte	03H
0000062C rrrrrrrr                		.lword	_tx_print_nul
00000630 rrrrrrrr                		.lword	_get_flt
00000634 rrrrrrrr                		.lword	_set_nul
00000638 rrrrrrrr                		.lword	(_cm) + 560
0000063C 00000000                		.lword	00000000H
00000640 707262                  		.byte	"prb"
00000643 00                      		.byte	00H
00000644 7072627A                		.byte	"prbz"
00000648 0000                    		.byte	00H,00H
0000064A 00                      		.byte	00H
0000064B 03                      		.byte	03H
0000064C rrrrrrrr                		.lword	_tx_print_nul
00000650 rrrrrrrr                		.lword	_get_flt
00000654 rrrrrrrr                		.lword	_set_nul
00000658 rrrrrrrr                		.lword	(_cm) + 564
0000065C 00000000                		.lword	00000000H
00000660 707262                  		.byte	"prb"
00000663 00                      		.byte	00H
00000664 70726261                		.byte	"prba"
00000668 0000                    		.byte	00H,00H
0000066A 00                      		.byte	00H
0000066B 03                      		.byte	03H
0000066C rrrrrrrr                		.lword	_tx_print_nul
00000670 rrrrrrrr                		.lword	_get_flt
00000674 rrrrrrrr                		.lword	_set_nul
00000678 rrrrrrrr                		.lword	(_cm) + 568
0000067C 00000000                		.lword	00000000H
00000680 707262                  		.byte	"prb"
00000683 00                      		.byte	00H
00000684 70726262                		.byte	"prbb"
00000688 0000                    		.byte	00H,00H
0000068A 00                      		.byte	00H
0000068B 03                      		.byte	03H
0000068C rrrrrrrr                		.lword	_tx_print_nul
00000690 rrrrrrrr                		.lword	_get_flt
00000694 rrrrrrrr                		.lword	_set_nul
00000698 rrrrrrrr                		.lword	(_cm) + 572
0000069C 00000000                		.lword	00000000H
000006A0 707262                  		.byte	"prb"
000006A3 00                      		.byte	00H
000006A4 70726263                		.byte	"prbc"
000006A8 0000                    		.byte	00H,00H
000006AA 00                      		.byte	00H
000006AB 03                      		.byte	03H
000006AC rrrrrrrr                		.lword	_tx_print_nul
000006B0 rrrrrrrr                		.lword	_get_flt
000006B4 rrrrrrrr                		.lword	_set_nul
000006B8 rrrrrrrr                		.lword	(_cm) + 576
000006BC 00000000                		.lword	00000000H
000006C0 6A6F67                  		.byte	"jog"
000006C3 00                      		.byte	00H
000006C4 6A6F6778                		.byte	"jogx"
000006C8 0000                    		.byte	00H,00H
000006CA 00                      		.byte	00H
000006CB 00                      		.byte	00H
000006CC rrrrrrrr                		.lword	_tx_print_nul
000006D0 rrrrrrrr                		.lword	_get_nul
000006D4 rrrrrrrr                		.lword	_cm_run_jogx
000006D8 rrrrrrrr                		.lword	(_cm) + 588
000006DC 00000000                		.lword	00000000H
000006E0 6A6F67                  		.byte	"jog"
000006E3 00                      		.byte	00H
000006E4 6A6F6779                		.byte	"jogy"
000006E8 0000                    		.byte	00H,00H
000006EA 00                      		.byte	00H
000006EB 00                      		.byte	00H
000006EC rrrrrrrr                		.lword	_tx_print_nul
000006F0 rrrrrrrr                		.lword	_get_nul
000006F4 rrrrrrrr                		.lword	_cm_run_jogy
000006F8 rrrrrrrr                		.lword	(_cm) + 588
000006FC 00000000                		.lword	00000000H
00000700 6A6F67                  		.byte	"jog"
00000703 00                      		.byte	00H
00000704 6A6F677A                		.byte	"jogz"
00000708 0000                    		.byte	00H,00H
0000070A 00                      		.byte	00H
0000070B 00                      		.byte	00H
0000070C rrrrrrrr                		.lword	_tx_print_nul
00000710 rrrrrrrr                		.lword	_get_nul
00000714 rrrrrrrr                		.lword	_cm_run_jogz
00000718 rrrrrrrr                		.lword	(_cm) + 588
0000071C 00000000                		.lword	00000000H
00000720 6A6F67                  		.byte	"jog"
00000723 00                      		.byte	00H
00000724 6A6F6761                		.byte	"joga"
00000728 0000                    		.byte	00H,00H
0000072A 00                      		.byte	00H
0000072B 00                      		.byte	00H
0000072C rrrrrrrr                		.lword	_tx_print_nul
00000730 rrrrrrrr                		.lword	_get_nul
00000734 rrrrrrrr                		.lword	_cm_run_joga
00000738 rrrrrrrr                		.lword	(_cm) + 588
0000073C 00000000                		.lword	00000000H
00000740 707772                  		.byte	"pwr"
00000743 00                      		.byte	00H
00000744 70777231                		.byte	"pwr1"
00000748 0000                    		.byte	00H,00H
0000074A 00                      		.byte	00H
0000074B 00                      		.byte	00H
0000074C rrrrrrrr                		.lword	_st_print_pwr
00000750 rrrrrrrr                		.lword	_st_get_pwr
00000754 rrrrrrrr                		.lword	_set_nul
00000758 rrrrrrrr                		.lword	(_cs) + 4
0000075C 00000000                		.lword	00000000H
00000760 707772                  		.byte	"pwr"
00000763 00                      		.byte	00H
00000764 70777232                		.byte	"pwr2"
00000768 0000                    		.byte	00H,00H
0000076A 00                      		.byte	00H
0000076B 00                      		.byte	00H
0000076C rrrrrrrr                		.lword	_st_print_pwr
00000770 rrrrrrrr                		.lword	_st_get_pwr
00000774 rrrrrrrr                		.lword	_set_nul
00000778 rrrrrrrr                		.lword	(_cs) + 4
0000077C 00000000                		.lword	00000000H
00000780 707772                  		.byte	"pwr"
00000783 00                      		.byte	00H
00000784 70777233                		.byte	"pwr3"
00000788 0000                    		.byte	00H,00H
0000078A 00                      		.byte	00H
0000078B 00                      		.byte	00H
0000078C rrrrrrrr                		.lword	_st_print_pwr
00000790 rrrrrrrr                		.lword	_st_get_pwr
00000794 rrrrrrrr                		.lword	_set_nul
00000798 rrrrrrrr                		.lword	(_cs) + 4
0000079C 00000000                		.lword	00000000H
000007A0 707772                  		.byte	"pwr"
000007A3 00                      		.byte	00H
000007A4 70777234                		.byte	"pwr4"
000007A8 0000                    		.byte	00H,00H
000007AA 00                      		.byte	00H
000007AB 00                      		.byte	00H
000007AC rrrrrrrr                		.lword	_st_print_pwr
000007B0 rrrrrrrr                		.lword	_st_get_pwr
000007B4 rrrrrrrr                		.lword	_set_nul
000007B8 rrrrrrrr                		.lword	(_cs) + 4
000007BC 00000000                		.lword	00000000H
000007C0 00                      		.byte	0
000007C1 00                      		.byte	0
000007C2 00                      		.byte	0
000007C3 00                      		.byte	0
000007C4 7372                    		.byte	"sr"
000007C6 00000000                		.byte	00H,00H,00H,00H
000007CA 00                      		.byte	00H
000007CB 00                      		.byte	00H
000007CC rrrrrrrr                		.lword	_sr_print_sr
000007D0 rrrrrrrr                		.lword	_sr_get
000007D4 rrrrrrrr                		.lword	_sr_set
000007D8 rrrrrrrr                		.lword	(_cs) + 4
000007DC 00000000                		.lword	00000000H
000007E0 00                      		.byte	0
000007E1 00                      		.byte	0
000007E2 00                      		.byte	0
000007E3 00                      		.byte	0
000007E4 7172                    		.byte	"qr"
000007E6 00000000                		.byte	00H,00H,00H,00H
000007EA 00                      		.byte	00H
000007EB 00                      		.byte	00H
000007EC rrrrrrrr                		.lword	_qr_print_qr
000007F0 rrrrrrrr                		.lword	_qr_get
000007F4 rrrrrrrr                		.lword	_set_nul
000007F8 rrrrrrrr                		.lword	(_cs) + 4
000007FC 00000000                		.lword	00000000H
00000800 00                      		.byte	0
00000801 00                      		.byte	0
00000802 00                      		.byte	0
00000803 00                      		.byte	0
00000804 7169                    		.byte	"qi"
00000806 00000000                		.byte	00H,00H,00H,00H
0000080A 00                      		.byte	00H
0000080B 00                      		.byte	00H
0000080C rrrrrrrr                		.lword	_qr_print_qi
00000810 rrrrrrrr                		.lword	_qi_get
00000814 rrrrrrrr                		.lword	_set_nul
00000818 rrrrrrrr                		.lword	(_cs) + 4
0000081C 00000000                		.lword	00000000H
00000820 00                      		.byte	0
00000821 00                      		.byte	0
00000822 00                      		.byte	0
00000823 00                      		.byte	0
00000824 716F                    		.byte	"qo"
00000826 00000000                		.byte	00H,00H,00H,00H
0000082A 00                      		.byte	00H
0000082B 00                      		.byte	00H
0000082C rrrrrrrr                		.lword	_qr_print_qo
00000830 rrrrrrrr                		.lword	_qo_get
00000834 rrrrrrrr                		.lword	_set_nul
00000838 rrrrrrrr                		.lword	(_cs) + 4
0000083C 00000000                		.lword	00000000H
00000840 00                      		.byte	0
00000841 00                      		.byte	0
00000842 00                      		.byte	0
00000843 00                      		.byte	0
00000844 6572                    		.byte	"er"
00000846 00000000                		.byte	00H,00H,00H,00H
0000084A 00                      		.byte	00H
0000084B 00                      		.byte	00H
0000084C rrrrrrrr                		.lword	_tx_print_nul
00000850 rrrrrrrr                		.lword	_rpt_er
00000854 rrrrrrrr                		.lword	_set_nul
00000858 rrrrrrrr                		.lword	(_cs) + 4
0000085C 00000000                		.lword	00000000H
00000860 00                      		.byte	0
00000861 00                      		.byte	0
00000862 00                      		.byte	0
00000863 00                      		.byte	0
00000864 7166                    		.byte	"qf"
00000866 00000000                		.byte	00H,00H,00H,00H
0000086A 00                      		.byte	00H
0000086B 00                      		.byte	00H
0000086C rrrrrrrr                		.lword	_tx_print_nul
00000870 rrrrrrrr                		.lword	_get_nul
00000874 rrrrrrrr                		.lword	_cm_run_qf
00000878 rrrrrrrr                		.lword	(_cs) + 4
0000087C 00000000                		.lword	00000000H
00000880 00                      		.byte	0
00000881 00                      		.byte	0
00000882 00                      		.byte	0
00000883 00                      		.byte	0
00000884 7278                    		.byte	"rx"
00000886 00000000                		.byte	00H,00H,00H,00H
0000088A 00                      		.byte	00H
0000088B 00                      		.byte	00H
0000088C rrrrrrrr                		.lword	_tx_print_int
00000890 rrrrrrrr                		.lword	__$get_rx
00000894 rrrrrrrr                		.lword	_set_nul
00000898 rrrrrrrr                		.lword	(_cs) + 4
0000089C 00000000                		.lword	00000000H
000008A0 00                      		.byte	0
000008A1 00                      		.byte	0
000008A2 00                      		.byte	0
000008A3 00                      		.byte	0
000008A4 6D7367                  		.byte	"msg"
000008A7 000000                  		.byte	00H,00H,00H
000008AA 00                      		.byte	00H
000008AB 00                      		.byte	00H
000008AC rrrrrrrr                		.lword	_tx_print_str
000008B0 rrrrrrrr                		.lword	_get_nul
000008B4 rrrrrrrr                		.lword	_set_nul
000008B8 rrrrrrrr                		.lword	(_cs) + 4
000008BC 00000000                		.lword	00000000H
000008C0 00                      		.byte	0
000008C1 00                      		.byte	0
000008C2 00                      		.byte	0
000008C3 00                      		.byte	0
000008C4 636C6561                		.byte	"clear"
         72                      
000008C9 00                      		.byte	00H
000008CA 00                      		.byte	00H
000008CB 00                      		.byte	00H
000008CC rrrrrrrr                		.lword	_tx_print_nul
000008D0 rrrrrrrr                		.lword	_cm_clear
000008D4 rrrrrrrr                		.lword	_cm_clear
000008D8 rrrrrrrr                		.lword	(_cs) + 4
000008DC 00000000                		.lword	00000000H
000008E0 00                      		.byte	0
000008E1 00                      		.byte	0
000008E2 00                      		.byte	0
000008E3 00                      		.byte	0
000008E4 74657374                		.byte	"test"
000008E8 0000                    		.byte	00H,00H
000008EA 00                      		.byte	00H
000008EB 00                      		.byte	00H
000008EC rrrrrrrr                		.lword	_tx_print_nul
000008F0 rrrrrrrr                		.lword	_help_test
000008F4 rrrrrrrr                		.lword	_run_test
000008F8 rrrrrrrr                		.lword	(_cs) + 4
000008FC 00000000                		.lword	00000000H
00000900 00                      		.byte	0
00000901 00                      		.byte	0
00000902 00                      		.byte	0
00000903 00                      		.byte	0
00000904 68656C70                		.byte	"help"
00000908 0000                    		.byte	00H,00H
0000090A 00                      		.byte	00H
0000090B 00                      		.byte	00H
0000090C rrrrrrrr                		.lword	_tx_print_nul
00000910 rrrrrrrr                		.lword	_help_config
00000914 rrrrrrrr                		.lword	_set_nul
00000918 rrrrrrrr                		.lword	(_cs) + 4
0000091C 00000000                		.lword	00000000H
00000920 00                      		.byte	0
00000921 00                      		.byte	0
00000922 00                      		.byte	0
00000923 00                      		.byte	0
00000924 68                      		.byte	"h"
00000925 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000092A 00                      		.byte	00H
0000092B 00                      		.byte	00H
0000092C rrrrrrrr                		.lword	_tx_print_nul
00000930 rrrrrrrr                		.lword	_help_config
00000934 rrrrrrrr                		.lword	_set_nul
00000938 rrrrrrrr                		.lword	(_cs) + 4
0000093C 00000000                		.lword	00000000H
00000940 31                      		.byte	"1"
00000941 000000                  		.byte	00H,00H,00H
00000944 316D61                  		.byte	"1ma"
00000947 000000                  		.byte	00H,00H,00H
0000094A 03                      		.byte	03H
0000094B 00                      		.byte	00H
0000094C rrrrrrrr                		.lword	_st_print_ma
00000950 rrrrrrrr                		.lword	_get_ui8
00000954 rrrrrrrr                		.lword	_set_ui8
00000958 rrrrrrrr                		.lword	(_st_cfg) + (00000004H)
0000095C 00000040                		.lword	40000000H	; float 2
00000960 31                      		.byte	"1"
00000961 000000                  		.byte	00H,00H,00H
00000964 317361                  		.byte	"1sa"
00000967 000000                  		.byte	00H,00H,00H
0000096A 03                      		.byte	03H
0000096B 03                      		.byte	03H
0000096C rrrrrrrr                		.lword	_st_print_sa
00000970 rrrrrrrr                		.lword	_get_flt
00000974 rrrrrrrr                		.lword	_st_set_sa
00000978 rrrrrrrr                		.lword	(_st_cfg) + 20
0000097C 6666E63F                		.lword	3FE66666H	; float 1.8
00000980 31                      		.byte	"1"
00000981 000000                  		.byte	00H,00H,00H
00000984 317472                  		.byte	"1tr"
00000987 000000                  		.byte	00H,00H,00H
0000098A 0B                      		.byte	0BH
0000098B 04                      		.byte	04H
0000098C rrrrrrrr                		.lword	_st_print_tr
00000990 rrrrrrrr                		.lword	_get_flt
00000994 rrrrrrrr                		.lword	_st_set_tr
00000998 rrrrrrrr                		.lword	(_st_cfg) + 24
0000099C 00004040                		.lword	40400000H	; float 3
000009A0 31                      		.byte	"1"
000009A1 000000                  		.byte	00H,00H,00H
000009A4 316D69                  		.byte	"1mi"
000009A7 000000                  		.byte	00H,00H,00H
000009AA 03                      		.byte	03H
000009AB 00                      		.byte	00H
000009AC rrrrrrrr                		.lword	_st_print_mi
000009B0 rrrrrrrr                		.lword	_get_ui8
000009B4 rrrrrrrr                		.lword	_st_set_mi
000009B8 rrrrrrrr                		.lword	(_st_cfg) + (00000008H)
000009BC 00008042                		.lword	42800000H	; float 64
000009C0 31                      		.byte	"1"
000009C1 000000                  		.byte	00H,00H,00H
000009C4 31706F                  		.byte	"1po"
000009C7 000000                  		.byte	00H,00H,00H
000009CA 03                      		.byte	03H
000009CB 00                      		.byte	00H
000009CC rrrrrrrr                		.lword	_st_print_po
000009D0 rrrrrrrr                		.lword	_get_ui8
000009D4 rrrrrrrr                		.lword	_set_01
000009D8 rrrrrrrr                		.lword	(_st_cfg) + (0000000CH)
000009DC 00000000                		.lword	00000000H
000009E0 31                      		.byte	"1"
000009E1 000000                  		.byte	00H,00H,00H
000009E4 31706D                  		.byte	"1pm"
000009E7 000000                  		.byte	00H,00H,00H
000009EA 03                      		.byte	03H
000009EB 00                      		.byte	00H
000009EC rrrrrrrr                		.lword	_st_print_pm
000009F0 rrrrrrrr                		.lword	_get_ui8
000009F4 rrrrrrrr                		.lword	_st_set_pm
000009F8 rrrrrrrr                		.lword	(_st_cfg) + (0000000DH)
000009FC 00000040                		.lword	40000000H	; float 2
00000A00 32                      		.byte	"2"
00000A01 000000                  		.byte	00H,00H,00H
00000A04 326D61                  		.byte	"2ma"
00000A07 000000                  		.byte	00H,00H,00H
00000A0A 03                      		.byte	03H
00000A0B 00                      		.byte	00H
00000A0C rrrrrrrr                		.lword	_st_print_ma
00000A10 rrrrrrrr                		.lword	_get_ui8
00000A14 rrrrrrrr                		.lword	_set_ui8
00000A18 rrrrrrrr                		.lword	(_st_cfg) + (00000028H)
00000A1C 0000803F                		.lword	3F800000H	; float 1
00000A20 32                      		.byte	"2"
00000A21 000000                  		.byte	00H,00H,00H
00000A24 327361                  		.byte	"2sa"
00000A27 000000                  		.byte	00H,00H,00H
00000A2A 03                      		.byte	03H
00000A2B 03                      		.byte	03H
00000A2C rrrrrrrr                		.lword	_st_print_sa
00000A30 rrrrrrrr                		.lword	_get_flt
00000A34 rrrrrrrr                		.lword	_st_set_sa
00000A38 rrrrrrrr                		.lword	(_st_cfg) + 56
00000A3C 6666E63F                		.lword	3FE66666H	; float 1.8
00000A40 32                      		.byte	"2"
00000A41 000000                  		.byte	00H,00H,00H
00000A44 327472                  		.byte	"2tr"
00000A47 000000                  		.byte	00H,00H,00H
00000A4A 0B                      		.byte	0BH
00000A4B 04                      		.byte	04H
00000A4C rrrrrrrr                		.lword	_st_print_tr
00000A50 rrrrrrrr                		.lword	_get_flt
00000A54 rrrrrrrr                		.lword	_st_set_tr
00000A58 rrrrrrrr                		.lword	(_st_cfg) + 60
00000A5C E4CB9642                		.lword	4296CBE4H	; float 75.3982
00000A60 32                      		.byte	"2"
00000A61 000000                  		.byte	00H,00H,00H
00000A64 326D69                  		.byte	"2mi"
00000A67 000000                  		.byte	00H,00H,00H
00000A6A 03                      		.byte	03H
00000A6B 00                      		.byte	00H
00000A6C rrrrrrrr                		.lword	_st_print_mi
00000A70 rrrrrrrr                		.lword	_get_ui8
00000A74 rrrrrrrr                		.lword	_st_set_mi
00000A78 rrrrrrrr                		.lword	(_st_cfg) + (0000002CH)
00000A7C 00008042                		.lword	42800000H	; float 64
00000A80 32                      		.byte	"2"
00000A81 000000                  		.byte	00H,00H,00H
00000A84 32706F                  		.byte	"2po"
00000A87 000000                  		.byte	00H,00H,00H
00000A8A 03                      		.byte	03H
00000A8B 00                      		.byte	00H
00000A8C rrrrrrrr                		.lword	_st_print_po
00000A90 rrrrrrrr                		.lword	_get_ui8
00000A94 rrrrrrrr                		.lword	_set_01
00000A98 rrrrrrrr                		.lword	(_st_cfg) + (00000030H)
00000A9C 00000000                		.lword	00000000H
00000AA0 32                      		.byte	"2"
00000AA1 000000                  		.byte	00H,00H,00H
00000AA4 32706D                  		.byte	"2pm"
00000AA7 000000                  		.byte	00H,00H,00H
00000AAA 03                      		.byte	03H
00000AAB 00                      		.byte	00H
00000AAC rrrrrrrr                		.lword	_st_print_pm
00000AB0 rrrrrrrr                		.lword	_get_ui8
00000AB4 rrrrrrrr                		.lword	_st_set_pm
00000AB8 rrrrrrrr                		.lword	(_st_cfg) + (00000031H)
00000ABC 00000040                		.lword	40000000H	; float 2
00000AC0 33                      		.byte	"3"
00000AC1 000000                  		.byte	00H,00H,00H
00000AC4 336D61                  		.byte	"3ma"
00000AC7 000000                  		.byte	00H,00H,00H
00000ACA 03                      		.byte	03H
00000ACB 00                      		.byte	00H
00000ACC rrrrrrrr                		.lword	_st_print_ma
00000AD0 rrrrrrrr                		.lword	_get_ui8
00000AD4 rrrrrrrr                		.lword	_set_ui8
00000AD8 rrrrrrrr                		.lword	(_st_cfg) + (0000004CH)
00000ADC 00000000                		.lword	00000000H
00000AE0 33                      		.byte	"3"
00000AE1 000000                  		.byte	00H,00H,00H
00000AE4 337361                  		.byte	"3sa"
00000AE7 000000                  		.byte	00H,00H,00H
00000AEA 03                      		.byte	03H
00000AEB 03                      		.byte	03H
00000AEC rrrrrrrr                		.lword	_st_print_sa
00000AF0 rrrrrrrr                		.lword	_get_flt
00000AF4 rrrrrrrr                		.lword	_st_set_sa
00000AF8 rrrrrrrr                		.lword	(_st_cfg) + 92
00000AFC 6666E63F                		.lword	3FE66666H	; float 1.8
00000B00 33                      		.byte	"3"
00000B01 000000                  		.byte	00H,00H,00H
00000B04 337472                  		.byte	"3tr"
00000B07 000000                  		.byte	00H,00H,00H
00000B0A 0B                      		.byte	0BH
00000B0B 04                      		.byte	04H
00000B0C rrrrrrrr                		.lword	_st_print_tr
00000B10 rrrrrrrr                		.lword	_get_flt
00000B14 rrrrrrrr                		.lword	_st_set_tr
00000B18 rrrrrrrr                		.lword	(_st_cfg) + 96
00000B1C E4CB9642                		.lword	4296CBE4H	; float 75.3982
00000B20 33                      		.byte	"3"
00000B21 000000                  		.byte	00H,00H,00H
00000B24 336D69                  		.byte	"3mi"
00000B27 000000                  		.byte	00H,00H,00H
00000B2A 03                      		.byte	03H
00000B2B 00                      		.byte	00H
00000B2C rrrrrrrr                		.lword	_st_print_mi
00000B30 rrrrrrrr                		.lword	_get_ui8
00000B34 rrrrrrrr                		.lword	_st_set_mi
00000B38 rrrrrrrr                		.lword	(_st_cfg) + (00000050H)
00000B3C 00008042                		.lword	42800000H	; float 64
00000B40 33                      		.byte	"3"
00000B41 000000                  		.byte	00H,00H,00H
00000B44 33706F                  		.byte	"3po"
00000B47 000000                  		.byte	00H,00H,00H
00000B4A 03                      		.byte	03H
00000B4B 00                      		.byte	00H
00000B4C rrrrrrrr                		.lword	_st_print_po
00000B50 rrrrrrrr                		.lword	_get_ui8
00000B54 rrrrrrrr                		.lword	_set_01
00000B58 rrrrrrrr                		.lword	(_st_cfg) + (00000054H)
00000B5C 0000803F                		.lword	3F800000H	; float 1
00000B60 33                      		.byte	"3"
00000B61 000000                  		.byte	00H,00H,00H
00000B64 33706D                  		.byte	"3pm"
00000B67 000000                  		.byte	00H,00H,00H
00000B6A 03                      		.byte	03H
00000B6B 00                      		.byte	00H
00000B6C rrrrrrrr                		.lword	_st_print_pm
00000B70 rrrrrrrr                		.lword	_get_ui8
00000B74 rrrrrrrr                		.lword	_st_set_pm
00000B78 rrrrrrrr                		.lword	(_st_cfg) + (00000055H)
00000B7C 00000040                		.lword	40000000H	; float 2
00000B80 34                      		.byte	"4"
00000B81 000000                  		.byte	00H,00H,00H
00000B84 346D61                  		.byte	"4ma"
00000B87 000000                  		.byte	00H,00H,00H
00000B8A 03                      		.byte	03H
00000B8B 00                      		.byte	00H
00000B8C rrrrrrrr                		.lword	_st_print_ma
00000B90 rrrrrrrr                		.lword	_get_ui8
00000B94 rrrrrrrr                		.lword	_set_ui8
00000B98 rrrrrrrr                		.lword	(_st_cfg) + (00000070H)
00000B9C 00000000                		.lword	00000000H
00000BA0 34                      		.byte	"4"
00000BA1 000000                  		.byte	00H,00H,00H
00000BA4 347361                  		.byte	"4sa"
00000BA7 000000                  		.byte	00H,00H,00H
00000BAA 03                      		.byte	03H
00000BAB 03                      		.byte	03H
00000BAC rrrrrrrr                		.lword	_st_print_sa
00000BB0 rrrrrrrr                		.lword	_get_flt
00000BB4 rrrrrrrr                		.lword	_st_set_sa
00000BB8 rrrrrrrr                		.lword	(_st_cfg) + 128
00000BBC 6666E63F                		.lword	3FE66666H	; float 1.8
00000BC0 34                      		.byte	"4"
00000BC1 000000                  		.byte	00H,00H,00H
00000BC4 347472                  		.byte	"4tr"
00000BC7 000000                  		.byte	00H,00H,00H
00000BCA 0B                      		.byte	0BH
00000BCB 04                      		.byte	04H
00000BCC rrrrrrrr                		.lword	_st_print_tr
00000BD0 rrrrrrrr                		.lword	_get_flt
00000BD4 rrrrrrrr                		.lword	_st_set_tr
00000BD8 rrrrrrrr                		.lword	(_st_cfg) + 132
00000BDC E4CB9642                		.lword	4296CBE4H	; float 75.3982
00000BE0 34                      		.byte	"4"
00000BE1 000000                  		.byte	00H,00H,00H
00000BE4 346D69                  		.byte	"4mi"
00000BE7 000000                  		.byte	00H,00H,00H
00000BEA 03                      		.byte	03H
00000BEB 00                      		.byte	00H
00000BEC rrrrrrrr                		.lword	_st_print_mi
00000BF0 rrrrrrrr                		.lword	_get_ui8
00000BF4 rrrrrrrr                		.lword	_st_set_mi
00000BF8 rrrrrrrr                		.lword	(_st_cfg) + (00000074H)
00000BFC 00008042                		.lword	42800000H	; float 64
00000C00 34                      		.byte	"4"
00000C01 000000                  		.byte	00H,00H,00H
00000C04 34706F                  		.byte	"4po"
00000C07 000000                  		.byte	00H,00H,00H
00000C0A 03                      		.byte	03H
00000C0B 00                      		.byte	00H
00000C0C rrrrrrrr                		.lword	_st_print_po
00000C10 rrrrrrrr                		.lword	_get_ui8
00000C14 rrrrrrrr                		.lword	_set_01
00000C18 rrrrrrrr                		.lword	(_st_cfg) + (00000078H)
00000C1C 00000000                		.lword	00000000H
00000C20 34                      		.byte	"4"
00000C21 000000                  		.byte	00H,00H,00H
00000C24 34706D                  		.byte	"4pm"
00000C27 000000                  		.byte	00H,00H,00H
00000C2A 03                      		.byte	03H
00000C2B 00                      		.byte	00H
00000C2C rrrrrrrr                		.lword	_st_print_pm
00000C30 rrrrrrrr                		.lword	_get_ui8
00000C34 rrrrrrrr                		.lword	_st_set_pm
00000C38 rrrrrrrr                		.lword	(_st_cfg) + (00000079H)
00000C3C 00000040                		.lword	40000000H	; float 2
00000C40 78                      		.byte	"x"
00000C41 000000                  		.byte	00H,00H,00H
00000C44 78616D                  		.byte	"xam"
00000C47 000000                  		.byte	00H,00H,00H
00000C4A 03                      		.byte	03H
00000C4B 00                      		.byte	00H
00000C4C rrrrrrrr                		.lword	_cm_print_am
00000C50 rrrrrrrr                		.lword	_cm_get_am
00000C54 rrrrrrrr                		.lword	_cm_set_am
00000C58 rrrrrrrr                		.lword	(_cm) + (000000CCH)
00000C5C 0000803F                		.lword	3F800000H	; float 1
00000C60 78                      		.byte	"x"
00000C61 000000                  		.byte	00H,00H,00H
00000C64 78766D                  		.byte	"xvm"
00000C67 000000                  		.byte	00H,00H,00H
00000C6A 0B                      		.byte	0BH
00000C6B 00                      		.byte	00H
00000C6C rrrrrrrr                		.lword	_cm_print_vm
00000C70 rrrrrrrr                		.lword	_get_flt
00000C74 rrrrrrrr                		.lword	_set_flu
00000C78 rrrrrrrr                		.lword	(_cm) + 212
00000C7C 00401C46                		.lword	461C4000H	; float 10000
00000C80 78                      		.byte	"x"
00000C81 000000                  		.byte	00H,00H,00H
00000C84 786672                  		.byte	"xfr"
00000C87 000000                  		.byte	00H,00H,00H
00000C8A 0B                      		.byte	0BH
00000C8B 00                      		.byte	00H
00000C8C rrrrrrrr                		.lword	_cm_print_fr
00000C90 rrrrrrrr                		.lword	_get_flt
00000C94 rrrrrrrr                		.lword	_set_flu
00000C98 rrrrrrrr                		.lword	(_cm) + 208
00000C9C 00401C46                		.lword	461C4000H	; float 10000
00000CA0 78                      		.byte	"x"
00000CA1 000000                  		.byte	00H,00H,00H
00000CA4 78746E                  		.byte	"xtn"
00000CA7 000000                  		.byte	00H,00H,00H
00000CAA 0B                      		.byte	0BH
00000CAB 03                      		.byte	03H
00000CAC rrrrrrrr                		.lword	_cm_print_tn
00000CB0 rrrrrrrr                		.lword	_get_flt
00000CB4 rrrrrrrr                		.lword	_set_flu
00000CB8 rrrrrrrr                		.lword	(_cm) + 220
00000CBC 00000000                		.lword	00000000H
00000CC0 78                      		.byte	"x"
00000CC1 000000                  		.byte	00H,00H,00H
00000CC4 78746D                  		.byte	"xtm"
00000CC7 000000                  		.byte	00H,00H,00H
00000CCA 0B                      		.byte	0BH
00000CCB 03                      		.byte	03H
00000CCC rrrrrrrr                		.lword	_cm_print_tm
00000CD0 rrrrrrrr                		.lword	_get_flt
00000CD4 rrrrrrrr                		.lword	_set_flu
00000CD8 rrrrrrrr                		.lword	(_cm) + 216
00000CDC 00803B45                		.lword	453B8000H	; float 3000
00000CE0 78                      		.byte	"x"
00000CE1 000000                  		.byte	00H,00H,00H
00000CE4 786A6D                  		.byte	"xjm"
00000CE7 000000                  		.byte	00H,00H,00H
00000CEA 0B                      		.byte	0BH
00000CEB 00                      		.byte	00H
00000CEC rrrrrrrr                		.lword	_cm_print_jm
00000CF0 rrrrrrrr                		.lword	_get_flt
00000CF4 rrrrrrrr                		.lword	_cm_set_xjm
00000CF8 rrrrrrrr                		.lword	(_cm) + 224
00000CFC 0000C843                		.lword	43C80000H	; float 400
00000D00 78                      		.byte	"x"
00000D01 000000                  		.byte	00H,00H,00H
00000D04 786A68                  		.byte	"xjh"
00000D07 000000                  		.byte	00H,00H,00H
00000D0A 0B                      		.byte	0BH
00000D0B 00                      		.byte	00H
00000D0C rrrrrrrr                		.lword	_cm_print_jh
00000D10 rrrrrrrr                		.lword	_get_flt
00000D14 rrrrrrrr                		.lword	_cm_set_xjh
00000D18 rrrrrrrr                		.lword	(_cm) + 228
00000D1C 0000C843                		.lword	43C80000H	; float 400
00000D20 78                      		.byte	"x"
00000D21 000000                  		.byte	00H,00H,00H
00000D24 786A64                  		.byte	"xjd"
00000D27 000000                  		.byte	00H,00H,00H
00000D2A 0B                      		.byte	0BH
00000D2B 04                      		.byte	04H
00000D2C rrrrrrrr                		.lword	_cm_print_jd
00000D30 rrrrrrrr                		.lword	_get_flt
00000D34 rrrrrrrr                		.lword	_set_flu
00000D38 rrrrrrrr                		.lword	(_cm) + 236
00000D3C CDCC4C3E                		.lword	3E4CCCCDH	; float 0.2
00000D40 78                      		.byte	"x"
00000D41 000000                  		.byte	00H,00H,00H
00000D44 78736E                  		.byte	"xsn"
00000D47 000000                  		.byte	00H,00H,00H
00000D4A 03                      		.byte	03H
00000D4B 00                      		.byte	00H
00000D4C rrrrrrrr                		.lword	_cm_print_sn
00000D50 rrrrrrrr                		.lword	_get_ui8
00000D54 rrrrrrrr                		.lword	_sw_set_sw
00000D58 rrrrrrrr                		.lword	(_sw) + (0000000BH)
00000D5C 0000803F                		.lword	3F800000H	; float 1
00000D60 78                      		.byte	"x"
00000D61 000000                  		.byte	00H,00H,00H
00000D64 787378                  		.byte	"xsx"
00000D67 000000                  		.byte	00H,00H,00H
00000D6A 03                      		.byte	03H
00000D6B 00                      		.byte	00H
00000D6C rrrrrrrr                		.lword	_cm_print_sx
00000D70 rrrrrrrr                		.lword	_get_ui8
00000D74 rrrrrrrr                		.lword	_sw_set_sw
00000D78 rrrrrrrr                		.lword	(_sw) + (0000000CH)
00000D7C 00000000                		.lword	00000000H
00000D80 78                      		.byte	"x"
00000D81 000000                  		.byte	00H,00H,00H
00000D84 787376                  		.byte	"xsv"
00000D87 000000                  		.byte	00H,00H,00H
00000D8A 0B                      		.byte	0BH
00000D8B 00                      		.byte	00H
00000D8C rrrrrrrr                		.lword	_cm_print_sv
00000D90 rrrrrrrr                		.lword	_get_flt
00000D94 rrrrrrrr                		.lword	_set_flu
00000D98 rrrrrrrr                		.lword	(_cm) + 244
00000D9C 00803B45                		.lword	453B8000H	; float 3000
00000DA0 78                      		.byte	"x"
00000DA1 000000                  		.byte	00H,00H,00H
00000DA4 786C76                  		.byte	"xlv"
00000DA7 000000                  		.byte	00H,00H,00H
00000DAA 0B                      		.byte	0BH
00000DAB 00                      		.byte	00H
00000DAC rrrrrrrr                		.lword	_cm_print_lv
00000DB0 rrrrrrrr                		.lword	_get_flt
00000DB4 rrrrrrrr                		.lword	_set_flu
00000DB8 rrrrrrrr                		.lword	(_cm) + 248
00000DBC 0000C842                		.lword	42C80000H	; float 100
00000DC0 78                      		.byte	"x"
00000DC1 000000                  		.byte	00H,00H,00H
00000DC4 786C62                  		.byte	"xlb"
00000DC7 000000                  		.byte	00H,00H,00H
00000DCA 0B                      		.byte	0BH
00000DCB 03                      		.byte	03H
00000DCC rrrrrrrr                		.lword	_cm_print_lb
00000DD0 rrrrrrrr                		.lword	_get_flt
00000DD4 rrrrrrrr                		.lword	_set_flu
00000DD8 rrrrrrrr                		.lword	(_cm) + 252
00000DDC 00002041                		.lword	41200000H	; float 10
00000DE0 78                      		.byte	"x"
00000DE1 000000                  		.byte	00H,00H,00H
00000DE4 787A62                  		.byte	"xzb"
00000DE7 000000                  		.byte	00H,00H,00H
00000DEA 0B                      		.byte	0BH
00000DEB 03                      		.byte	03H
00000DEC rrrrrrrr                		.lword	_cm_print_zb
00000DF0 rrrrrrrr                		.lword	_get_flt
00000DF4 rrrrrrrr                		.lword	_set_flu
00000DF8 rrrrrrrr                		.lword	(_cm) + 256
00000DFC 00000040                		.lword	40000000H	; float 2
00000E00 79                      		.byte	"y"
00000E01 000000                  		.byte	00H,00H,00H
00000E04 79616D                  		.byte	"yam"
00000E07 000000                  		.byte	00H,00H,00H
00000E0A 03                      		.byte	03H
00000E0B 00                      		.byte	00H
00000E0C rrrrrrrr                		.lword	_cm_print_am
00000E10 rrrrrrrr                		.lword	_cm_get_am
00000E14 rrrrrrrr                		.lword	_cm_set_am
00000E18 rrrrrrrr                		.lword	(_cm) + (00000104H)
00000E1C 0000803F                		.lword	3F800000H	; float 1
00000E20 79                      		.byte	"y"
00000E21 000000                  		.byte	00H,00H,00H
00000E24 79766D                  		.byte	"yvm"
00000E27 000000                  		.byte	00H,00H,00H
00000E2A 0B                      		.byte	0BH
00000E2B 00                      		.byte	00H
00000E2C rrrrrrrr                		.lword	_cm_print_vm
00000E30 rrrrrrrr                		.lword	_get_flt
00000E34 rrrrrrrr                		.lword	_set_flu
00000E38 rrrrrrrr                		.lword	(_cm) + 268
00000E3C 00401C46                		.lword	461C4000H	; float 10000
00000E40 79                      		.byte	"y"
00000E41 000000                  		.byte	00H,00H,00H
00000E44 796672                  		.byte	"yfr"
00000E47 000000                  		.byte	00H,00H,00H
00000E4A 0B                      		.byte	0BH
00000E4B 00                      		.byte	00H
00000E4C rrrrrrrr                		.lword	_cm_print_fr
00000E50 rrrrrrrr                		.lword	_get_flt
00000E54 rrrrrrrr                		.lword	_set_flu
00000E58 rrrrrrrr                		.lword	(_cm) + 264
00000E5C 00401C46                		.lword	461C4000H	; float 10000
00000E60 79                      		.byte	"y"
00000E61 000000                  		.byte	00H,00H,00H
00000E64 79746E                  		.byte	"ytn"
00000E67 000000                  		.byte	00H,00H,00H
00000E6A 0B                      		.byte	0BH
00000E6B 03                      		.byte	03H
00000E6C rrrrrrrr                		.lword	_cm_print_tn
00000E70 rrrrrrrr                		.lword	_get_flt
00000E74 rrrrrrrr                		.lword	_set_flu
00000E78 rrrrrrrr                		.lword	(_cm) + 276
00000E7C 00000000                		.lword	00000000H
00000E80 79                      		.byte	"y"
00000E81 000000                  		.byte	00H,00H,00H
00000E84 79746D                  		.byte	"ytm"
00000E87 000000                  		.byte	00H,00H,00H
00000E8A 0B                      		.byte	0BH
00000E8B 03                      		.byte	03H
00000E8C rrrrrrrr                		.lword	_cm_print_tm
00000E90 rrrrrrrr                		.lword	_get_flt
00000E94 rrrrrrrr                		.lword	_set_flu
00000E98 rrrrrrrr                		.lword	(_cm) + 272
00000E9C 0080BB44                		.lword	44BB8000H	; float 1500
00000EA0 79                      		.byte	"y"
00000EA1 000000                  		.byte	00H,00H,00H
00000EA4 796A6D                  		.byte	"yjm"
00000EA7 000000                  		.byte	00H,00H,00H
00000EAA 0B                      		.byte	0BH
00000EAB 00                      		.byte	00H
00000EAC rrrrrrrr                		.lword	_cm_print_jm
00000EB0 rrrrrrrr                		.lword	_get_flt
00000EB4 rrrrrrrr                		.lword	_cm_set_xjm
00000EB8 rrrrrrrr                		.lword	(_cm) + 280
00000EBC 0000C843                		.lword	43C80000H	; float 400
00000EC0 79                      		.byte	"y"
00000EC1 000000                  		.byte	00H,00H,00H
00000EC4 796A68                  		.byte	"yjh"
00000EC7 000000                  		.byte	00H,00H,00H
00000ECA 0B                      		.byte	0BH
00000ECB 00                      		.byte	00H
00000ECC rrrrrrrr                		.lword	_cm_print_jh
00000ED0 rrrrrrrr                		.lword	_get_flt
00000ED4 rrrrrrrr                		.lword	_cm_set_xjh
00000ED8 rrrrrrrr                		.lword	(_cm) + 284
00000EDC 0000C843                		.lword	43C80000H	; float 400
00000EE0 79                      		.byte	"y"
00000EE1 000000                  		.byte	00H,00H,00H
00000EE4 796A64                  		.byte	"yjd"
00000EE7 000000                  		.byte	00H,00H,00H
00000EEA 0B                      		.byte	0BH
00000EEB 04                      		.byte	04H
00000EEC rrrrrrrr                		.lword	_cm_print_jd
00000EF0 rrrrrrrr                		.lword	_get_flt
00000EF4 rrrrrrrr                		.lword	_set_flu
00000EF8 rrrrrrrr                		.lword	(_cm) + 292
00000EFC CDCC4C3E                		.lword	3E4CCCCDH	; float 0.2
00000F00 79                      		.byte	"y"
00000F01 000000                  		.byte	00H,00H,00H
00000F04 79736E                  		.byte	"ysn"
00000F07 000000                  		.byte	00H,00H,00H
00000F0A 03                      		.byte	03H
00000F0B 00                      		.byte	00H
00000F0C rrrrrrrr                		.lword	_cm_print_sn
00000F10 rrrrrrrr                		.lword	_get_ui8
00000F14 rrrrrrrr                		.lword	_sw_set_sw
00000F18 rrrrrrrr                		.lword	(_sw) + (0000000DH)
00000F1C 0000803F                		.lword	3F800000H	; float 1
00000F20 79                      		.byte	"y"
00000F21 000000                  		.byte	00H,00H,00H
00000F24 797378                  		.byte	"ysx"
00000F27 000000                  		.byte	00H,00H,00H
00000F2A 03                      		.byte	03H
00000F2B 00                      		.byte	00H
00000F2C rrrrrrrr                		.lword	_cm_print_sx
00000F30 rrrrrrrr                		.lword	_get_ui8
00000F34 rrrrrrrr                		.lword	_sw_set_sw
00000F38 rrrrrrrr                		.lword	(_sw) + (0000000EH)
00000F3C 00000000                		.lword	00000000H
00000F40 79                      		.byte	"y"
00000F41 000000                  		.byte	00H,00H,00H
00000F44 797376                  		.byte	"ysv"
00000F47 000000                  		.byte	00H,00H,00H
00000F4A 0B                      		.byte	0BH
00000F4B 00                      		.byte	00H
00000F4C rrrrrrrr                		.lword	_cm_print_sv
00000F50 rrrrrrrr                		.lword	_get_flt
00000F54 rrrrrrrr                		.lword	_set_flu
00000F58 rrrrrrrr                		.lword	(_cm) + 300
00000F5C 00803B45                		.lword	453B8000H	; float 3000
00000F60 79                      		.byte	"y"
00000F61 000000                  		.byte	00H,00H,00H
00000F64 796C76                  		.byte	"ylv"
00000F67 000000                  		.byte	00H,00H,00H
00000F6A 0B                      		.byte	0BH
00000F6B 00                      		.byte	00H
00000F6C rrrrrrrr                		.lword	_cm_print_lv
00000F70 rrrrrrrr                		.lword	_get_flt
00000F74 rrrrrrrr                		.lword	_set_flu
00000F78 rrrrrrrr                		.lword	(_cm) + 304
00000F7C 0000C842                		.lword	42C80000H	; float 100
00000F80 79                      		.byte	"y"
00000F81 000000                  		.byte	00H,00H,00H
00000F84 796C62                  		.byte	"ylb"
00000F87 000000                  		.byte	00H,00H,00H
00000F8A 0B                      		.byte	0BH
00000F8B 03                      		.byte	03H
00000F8C rrrrrrrr                		.lword	_cm_print_lb
00000F90 rrrrrrrr                		.lword	_get_flt
00000F94 rrrrrrrr                		.lword	_set_flu
00000F98 rrrrrrrr                		.lword	(_cm) + 308
00000F9C 00002041                		.lword	41200000H	; float 10
00000FA0 79                      		.byte	"y"
00000FA1 000000                  		.byte	00H,00H,00H
00000FA4 797A62                  		.byte	"yzb"
00000FA7 000000                  		.byte	00H,00H,00H
00000FAA 0B                      		.byte	0BH
00000FAB 03                      		.byte	03H
00000FAC rrrrrrrr                		.lword	_cm_print_zb
00000FB0 rrrrrrrr                		.lword	_get_flt
00000FB4 rrrrrrrr                		.lword	_set_flu
00000FB8 rrrrrrrr                		.lword	(_cm) + 312
00000FBC 00000040                		.lword	40000000H	; float 2
00000FC0 7A                      		.byte	"z"
00000FC1 000000                  		.byte	00H,00H,00H
00000FC4 7A616D                  		.byte	"zam"
00000FC7 000000                  		.byte	00H,00H,00H
00000FCA 03                      		.byte	03H
00000FCB 00                      		.byte	00H
00000FCC rrrrrrrr                		.lword	_cm_print_am
00000FD0 rrrrrrrr                		.lword	_cm_get_am
00000FD4 rrrrrrrr                		.lword	_cm_set_am
00000FD8 rrrrrrrr                		.lword	(_cm) + (0000013CH)
00000FDC 0000803F                		.lword	3F800000H	; float 1
00000FE0 7A                      		.byte	"z"
00000FE1 000000                  		.byte	00H,00H,00H
00000FE4 7A766D                  		.byte	"zvm"
00000FE7 000000                  		.byte	00H,00H,00H
00000FEA 0B                      		.byte	0BH
00000FEB 00                      		.byte	00H
00000FEC rrrrrrrr                		.lword	_cm_print_vm
00000FF0 rrrrrrrr                		.lword	_get_flt
00000FF4 rrrrrrrr                		.lword	_set_flu
00000FF8 rrrrrrrr                		.lword	(_cm) + 324
00000FFC 00006144                		.lword	44610000H	; float 900
00001000 7A                      		.byte	"z"
00001001 000000                  		.byte	00H,00H,00H
00001004 7A6672                  		.byte	"zfr"
00001007 000000                  		.byte	00H,00H,00H
0000100A 0B                      		.byte	0BH
0000100B 00                      		.byte	00H
0000100C rrrrrrrr                		.lword	_cm_print_fr
00001010 rrrrrrrr                		.lword	_get_flt
00001014 rrrrrrrr                		.lword	_set_flu
00001018 rrrrrrrr                		.lword	(_cm) + 320
0000101C 00006144                		.lword	44610000H	; float 900
00001020 7A                      		.byte	"z"
00001021 000000                  		.byte	00H,00H,00H
00001024 7A746E                  		.byte	"ztn"
00001027 000000                  		.byte	00H,00H,00H
0000102A 0B                      		.byte	0BH
0000102B 03                      		.byte	03H
0000102C rrrrrrrr                		.lword	_cm_print_tn
00001030 rrrrrrrr                		.lword	_get_flt
00001034 rrrrrrrr                		.lword	_set_flu
00001038 rrrrrrrr                		.lword	(_cm) + 332
0000103C 0000F0C2                		.lword	0C2F00000H	; float -120
00001040 7A                      		.byte	"z"
00001041 000000                  		.byte	00H,00H,00H
00001044 7A746D                  		.byte	"ztm"
00001047 000000                  		.byte	00H,00H,00H
0000104A 0B                      		.byte	0BH
0000104B 03                      		.byte	03H
0000104C rrrrrrrr                		.lword	_cm_print_tm
00001050 rrrrrrrr                		.lword	_get_flt
00001054 rrrrrrrr                		.lword	_set_flu
00001058 rrrrrrrr                		.lword	(_cm) + 328
0000105C 00000000                		.lword	00000000H
00001060 7A                      		.byte	"z"
00001061 000000                  		.byte	00H,00H,00H
00001064 7A6A6D                  		.byte	"zjm"
00001067 000000                  		.byte	00H,00H,00H
0000106A 0B                      		.byte	0BH
0000106B 00                      		.byte	00H
0000106C rrrrrrrr                		.lword	_cm_print_jm
00001070 rrrrrrrr                		.lword	_get_flt
00001074 rrrrrrrr                		.lword	_cm_set_xjm
00001078 rrrrrrrr                		.lword	(_cm) + 336
0000107C 0080BB45                		.lword	45BB8000H	; float 6000
00001080 7A                      		.byte	"z"
00001081 000000                  		.byte	00H,00H,00H
00001084 7A6A68                  		.byte	"zjh"
00001087 000000                  		.byte	00H,00H,00H
0000108A 0B                      		.byte	0BH
0000108B 00                      		.byte	00H
0000108C rrrrrrrr                		.lword	_cm_print_jh
00001090 rrrrrrrr                		.lword	_get_flt
00001094 rrrrrrrr                		.lword	_cm_set_xjh
00001098 rrrrrrrr                		.lword	(_cm) + 340
0000109C 0080BB45                		.lword	45BB8000H	; float 6000
000010A0 7A                      		.byte	"z"
000010A1 000000                  		.byte	00H,00H,00H
000010A4 7A6A64                  		.byte	"zjd"
000010A7 000000                  		.byte	00H,00H,00H
000010AA 0B                      		.byte	0BH
000010AB 04                      		.byte	04H
000010AC rrrrrrrr                		.lword	_cm_print_jd
000010B0 rrrrrrrr                		.lword	_get_flt
000010B4 rrrrrrrr                		.lword	_set_flu
000010B8 rrrrrrrr                		.lword	(_cm) + 348
000010BC CDCC4C3E                		.lword	3E4CCCCDH	; float 0.2
000010C0 7A                      		.byte	"z"
000010C1 000000                  		.byte	00H,00H,00H
000010C4 7A736E                  		.byte	"zsn"
000010C7 000000                  		.byte	00H,00H,00H
000010CA 03                      		.byte	03H
000010CB 00                      		.byte	00H
000010CC rrrrrrrr                		.lword	_cm_print_sn
000010D0 rrrrrrrr                		.lword	_get_ui8
000010D4 rrrrrrrr                		.lword	_sw_set_sw
000010D8 rrrrrrrr                		.lword	(_sw) + (0000000FH)
000010DC 00000000                		.lword	00000000H
000010E0 7A                      		.byte	"z"
000010E1 000000                  		.byte	00H,00H,00H
000010E4 7A7378                  		.byte	"zsx"
000010E7 000000                  		.byte	00H,00H,00H
000010EA 03                      		.byte	03H
000010EB 00                      		.byte	00H
000010EC rrrrrrrr                		.lword	_cm_print_sx
000010F0 rrrrrrrr                		.lword	_get_ui8
000010F4 rrrrrrrr                		.lword	_sw_set_sw
000010F8 rrrrrrrr                		.lword	(_sw) + (00000010H)
000010FC 0000803F                		.lword	3F800000H	; float 1
00001100 7A                      		.byte	"z"
00001101 000000                  		.byte	00H,00H,00H
00001104 7A7376                  		.byte	"zsv"
00001107 000000                  		.byte	00H,00H,00H
0000110A 0B                      		.byte	0BH
0000110B 00                      		.byte	00H
0000110C rrrrrrrr                		.lword	_cm_print_sv
00001110 rrrrrrrr                		.lword	_get_flt
00001114 rrrrrrrr                		.lword	_set_flu
00001118 rrrrrrrr                		.lword	(_cm) + 356
0000111C 00006144                		.lword	44610000H	; float 900
00001120 7A                      		.byte	"z"
00001121 000000                  		.byte	00H,00H,00H
00001124 7A6C76                  		.byte	"zlv"
00001127 000000                  		.byte	00H,00H,00H
0000112A 0B                      		.byte	0BH
0000112B 00                      		.byte	00H
0000112C rrrrrrrr                		.lword	_cm_print_lv
00001130 rrrrrrrr                		.lword	_get_flt
00001134 rrrrrrrr                		.lword	_set_flu
00001138 rrrrrrrr                		.lword	(_cm) + 360
0000113C 0000C842                		.lword	42C80000H	; float 100
00001140 7A                      		.byte	"z"
00001141 000000                  		.byte	00H,00H,00H
00001144 7A6C62                  		.byte	"zlb"
00001147 000000                  		.byte	00H,00H,00H
0000114A 0B                      		.byte	0BH
0000114B 03                      		.byte	03H
0000114C rrrrrrrr                		.lword	_cm_print_lb
00001150 rrrrrrrr                		.lword	_get_flt
00001154 rrrrrrrr                		.lword	_set_flu
00001158 rrrrrrrr                		.lword	(_cm) + 364
0000115C 00002041                		.lword	41200000H	; float 10
00001160 7A                      		.byte	"z"
00001161 000000                  		.byte	00H,00H,00H
00001164 7A7A62                  		.byte	"zzb"
00001167 000000                  		.byte	00H,00H,00H
0000116A 0B                      		.byte	0BH
0000116B 03                      		.byte	03H
0000116C rrrrrrrr                		.lword	_cm_print_zb
00001170 rrrrrrrr                		.lword	_get_flt
00001174 rrrrrrrr                		.lword	_set_flu
00001178 rrrrrrrr                		.lword	(_cm) + 368
0000117C 00004040                		.lword	40400000H	; float 3
00001180 61                      		.byte	"a"
00001181 000000                  		.byte	00H,00H,00H
00001184 61616D                  		.byte	"aam"
00001187 000000                  		.byte	00H,00H,00H
0000118A 03                      		.byte	03H
0000118B 00                      		.byte	00H
0000118C rrrrrrrr                		.lword	_cm_print_am
00001190 rrrrrrrr                		.lword	_cm_get_am
00001194 rrrrrrrr                		.lword	_cm_set_am
00001198 rrrrrrrr                		.lword	(_cm) + (00000174H)
0000119C 00004040                		.lword	40400000H	; float 3
000011A0 61                      		.byte	"a"
000011A1 000000                  		.byte	00H,00H,00H
000011A4 61766D                  		.byte	"avm"
000011A7 000000                  		.byte	00H,00H,00H
000011AA 03                      		.byte	03H
000011AB 00                      		.byte	00H
000011AC rrrrrrrr                		.lword	_cm_print_vm
000011B0 rrrrrrrr                		.lword	_get_flt
000011B4 rrrrrrrr                		.lword	_set_flt
000011B8 rrrrrrrr                		.lword	(_cm) + 380
000011BC 0080CA46                		.lword	46CA8000H	; float 25920
000011C0 61                      		.byte	"a"
000011C1 000000                  		.byte	00H,00H,00H
000011C4 616672                  		.byte	"afr"
000011C7 000000                  		.byte	00H,00H,00H
000011CA 03                      		.byte	03H
000011CB 00                      		.byte	00H
000011CC rrrrrrrr                		.lword	_cm_print_fr
000011D0 rrrrrrrr                		.lword	_get_flt
000011D4 rrrrrrrr                		.lword	_set_flt
000011D8 rrrrrrrr                		.lword	(_cm) + 376
000011DC 00804A46                		.lword	464A8000H	; float 12960
000011E0 61                      		.byte	"a"
000011E1 000000                  		.byte	00H,00H,00H
000011E4 61746E                  		.byte	"atn"
000011E7 000000                  		.byte	00H,00H,00H
000011EA 03                      		.byte	03H
000011EB 03                      		.byte	03H
000011EC rrrrrrrr                		.lword	_cm_print_tn
000011F0 rrrrrrrr                		.lword	_get_flt
000011F4 rrrrrrrr                		.lword	_set_flu
000011F8 rrrrrrrr                		.lword	(_cm) + 388
000011FC 000080BF                		.lword	0BF800000H	; float -1
00001200 61                      		.byte	"a"
00001201 000000                  		.byte	00H,00H,00H
00001204 61746D                  		.byte	"atm"
00001207 000000                  		.byte	00H,00H,00H
0000120A 03                      		.byte	03H
0000120B 03                      		.byte	03H
0000120C rrrrrrrr                		.lword	_cm_print_tm
00001210 rrrrrrrr                		.lword	_get_flt
00001214 rrrrrrrr                		.lword	_set_flt
00001218 rrrrrrrr                		.lword	(_cm) + 384
0000121C 000080BF                		.lword	0BF800000H	; float -1
00001220 61                      		.byte	"a"
00001221 000000                  		.byte	00H,00H,00H
00001224 616A6D                  		.byte	"ajm"
00001227 000000                  		.byte	00H,00H,00H
0000122A 03                      		.byte	03H
0000122B 00                      		.byte	00H
0000122C rrrrrrrr                		.lword	_cm_print_jm
00001230 rrrrrrrr                		.lword	_get_flt
00001234 rrrrrrrr                		.lword	_cm_set_xjm
00001238 rrrrrrrr                		.lword	(_cm) + 392
0000123C 00349E48                		.lword	489E3400H	; float 324000
00001240 61                      		.byte	"a"
00001241 000000                  		.byte	00H,00H,00H
00001244 616A68                  		.byte	"ajh"
00001247 000000                  		.byte	00H,00H,00H
0000124A 03                      		.byte	03H
0000124B 00                      		.byte	00H
0000124C rrrrrrrr                		.lword	_cm_print_jh
00001250 rrrrrrrr                		.lword	_get_flt
00001254 rrrrrrrr                		.lword	_cm_set_xjh
00001258 rrrrrrrr                		.lword	(_cm) + 396
0000125C 00349E48                		.lword	489E3400H	; float 324000
00001260 61                      		.byte	"a"
00001261 000000                  		.byte	00H,00H,00H
00001264 616A64                  		.byte	"ajd"
00001267 000000                  		.byte	00H,00H,00H
0000126A 03                      		.byte	03H
0000126B 04                      		.byte	04H
0000126C rrrrrrrr                		.lword	_cm_print_jd
00001270 rrrrrrrr                		.lword	_get_flt
00001274 rrrrrrrr                		.lword	_set_flt
00001278 rrrrrrrr                		.lword	(_cm) + 404
0000127C CDCCCC3D                		.lword	3DCCCCCDH	; float 0.1
00001280 61                      		.byte	"a"
00001281 000000                  		.byte	00H,00H,00H
00001284 617261                  		.byte	"ara"
00001287 000000                  		.byte	00H,00H,00H
0000128A 0B                      		.byte	0BH
0000128B 03                      		.byte	03H
0000128C rrrrrrrr                		.lword	_cm_print_ra
00001290 rrrrrrrr                		.lword	_get_flt
00001294 rrrrrrrr                		.lword	_set_flt
00001298 rrrrrrrr                		.lword	(_cm) + 408
0000129C DFC3A940                		.lword	40A9C3DFH	; float 5.30516
000012A0 61                      		.byte	"a"
000012A1 000000                  		.byte	00H,00H,00H
000012A4 61736E                  		.byte	"asn"
000012A7 000000                  		.byte	00H,00H,00H
000012AA 03                      		.byte	03H
000012AB 00                      		.byte	00H
000012AC rrrrrrrr                		.lword	_cm_print_sn
000012B0 rrrrrrrr                		.lword	_get_ui8
000012B4 rrrrrrrr                		.lword	_sw_set_sw
000012B8 rrrrrrrr                		.lword	(_sw) + (00000011H)
000012BC 0000803F                		.lword	3F800000H	; float 1
000012C0 61                      		.byte	"a"
000012C1 000000                  		.byte	00H,00H,00H
000012C4 617378                  		.byte	"asx"
000012C7 000000                  		.byte	00H,00H,00H
000012CA 03                      		.byte	03H
000012CB 00                      		.byte	00H
000012CC rrrrrrrr                		.lword	_cm_print_sx
000012D0 rrrrrrrr                		.lword	_get_ui8
000012D4 rrrrrrrr                		.lword	_sw_set_sw
000012D8 rrrrrrrr                		.lword	(_sw) + (00000012H)
000012DC 00000000                		.lword	00000000H
000012E0 61                      		.byte	"a"
000012E1 000000                  		.byte	00H,00H,00H
000012E4 617376                  		.byte	"asv"
000012E7 000000                  		.byte	00H,00H,00H
000012EA 03                      		.byte	03H
000012EB 00                      		.byte	00H
000012EC rrrrrrrr                		.lword	_cm_print_sv
000012F0 rrrrrrrr                		.lword	_get_flt
000012F4 rrrrrrrr                		.lword	_set_flt
000012F8 rrrrrrrr                		.lword	(_cm) + 412
000012FC 0000FA44                		.lword	44FA0000H	; float 2000
00001300 61                      		.byte	"a"
00001301 000000                  		.byte	00H,00H,00H
00001304 616C76                  		.byte	"alv"
00001307 000000                  		.byte	00H,00H,00H
0000130A 03                      		.byte	03H
0000130B 00                      		.byte	00H
0000130C rrrrrrrr                		.lword	_cm_print_lv
00001310 rrrrrrrr                		.lword	_get_flt
00001314 rrrrrrrr                		.lword	_set_flt
00001318 rrrrrrrr                		.lword	(_cm) + 416
0000131C 0000FA44                		.lword	44FA0000H	; float 2000
00001320 61                      		.byte	"a"
00001321 000000                  		.byte	00H,00H,00H
00001324 616C62                  		.byte	"alb"
00001327 000000                  		.byte	00H,00H,00H
0000132A 03                      		.byte	03H
0000132B 03                      		.byte	03H
0000132C rrrrrrrr                		.lword	_cm_print_lb
00001330 rrrrrrrr                		.lword	_get_flt
00001334 rrrrrrrr                		.lword	_set_flt
00001338 rrrrrrrr                		.lword	(_cm) + 420
0000133C 0000A040                		.lword	40A00000H	; float 5
00001340 61                      		.byte	"a"
00001341 000000                  		.byte	00H,00H,00H
00001344 617A62                  		.byte	"azb"
00001347 000000                  		.byte	00H,00H,00H
0000134A 03                      		.byte	03H
0000134B 03                      		.byte	03H
0000134C rrrrrrrr                		.lword	_cm_print_zb
00001350 rrrrrrrr                		.lword	_get_flt
00001354 rrrrrrrr                		.lword	_set_flt
00001358 rrrrrrrr                		.lword	(_cm) + 424
0000135C 00000040                		.lword	40000000H	; float 2
00001360 62                      		.byte	"b"
00001361 000000                  		.byte	00H,00H,00H
00001364 62616D                  		.byte	"bam"
00001367 000000                  		.byte	00H,00H,00H
0000136A 03                      		.byte	03H
0000136B 00                      		.byte	00H
0000136C rrrrrrrr                		.lword	_cm_print_am
00001370 rrrrrrrr                		.lword	_cm_get_am
00001374 rrrrrrrr                		.lword	_cm_set_am
00001378 rrrrrrrr                		.lword	(_cm) + (000001ACH)
0000137C 00000000                		.lword	00000000H
00001380 62                      		.byte	"b"
00001381 000000                  		.byte	00H,00H,00H
00001384 62766D                  		.byte	"bvm"
00001387 000000                  		.byte	00H,00H,00H
0000138A 03                      		.byte	03H
0000138B 00                      		.byte	00H
0000138C rrrrrrrr                		.lword	_cm_print_vm
00001390 rrrrrrrr                		.lword	_get_flt
00001394 rrrrrrrr                		.lword	_set_flt
00001398 rrrrrrrr                		.lword	(_cm) + 436
0000139C 00006145                		.lword	45610000H	; float 3600
000013A0 62                      		.byte	"b"
000013A1 000000                  		.byte	00H,00H,00H
000013A4 626672                  		.byte	"bfr"
000013A7 000000                  		.byte	00H,00H,00H
000013AA 03                      		.byte	03H
000013AB 00                      		.byte	00H
000013AC rrrrrrrr                		.lword	_cm_print_fr
000013B0 rrrrrrrr                		.lword	_get_flt
000013B4 rrrrrrrr                		.lword	_set_flt
000013B8 rrrrrrrr                		.lword	(_cm) + 432
000013BC 00006145                		.lword	45610000H	; float 3600
000013C0 62                      		.byte	"b"
000013C1 000000                  		.byte	00H,00H,00H
000013C4 62746E                  		.byte	"btn"
000013C7 000000                  		.byte	00H,00H,00H
000013CA 03                      		.byte	03H
000013CB 03                      		.byte	03H
000013CC rrrrrrrr                		.lword	_cm_print_tn
000013D0 rrrrrrrr                		.lword	_get_flt
000013D4 rrrrrrrr                		.lword	_set_flu
000013D8 rrrrrrrr                		.lword	(_cm) + 444
000013DC 000080BF                		.lword	0BF800000H	; float -1
000013E0 62                      		.byte	"b"
000013E1 000000                  		.byte	00H,00H,00H
000013E4 62746D                  		.byte	"btm"
000013E7 000000                  		.byte	00H,00H,00H
000013EA 03                      		.byte	03H
000013EB 03                      		.byte	03H
000013EC rrrrrrrr                		.lword	_cm_print_tm
000013F0 rrrrrrrr                		.lword	_get_flt
000013F4 rrrrrrrr                		.lword	_set_flt
000013F8 rrrrrrrr                		.lword	(_cm) + 440
000013FC 000080BF                		.lword	0BF800000H	; float -1
00001400 62                      		.byte	"b"
00001401 000000                  		.byte	00H,00H,00H
00001404 626A6D                  		.byte	"bjm"
00001407 000000                  		.byte	00H,00H,00H
0000140A 03                      		.byte	03H
0000140B 00                      		.byte	00H
0000140C rrrrrrrr                		.lword	_cm_print_jm
00001410 rrrrrrrr                		.lword	_get_flt
00001414 rrrrrrrr                		.lword	_cm_set_xjm
00001418 rrrrrrrr                		.lword	(_cm) + 448
0000141C 0000A041                		.lword	41A00000H	; float 20
00001420 62                      		.byte	"b"
00001421 000000                  		.byte	00H,00H,00H
00001424 626A64                  		.byte	"bjd"
00001427 000000                  		.byte	00H,00H,00H
0000142A 03                      		.byte	03H
0000142B 00                      		.byte	00H
0000142C rrrrrrrr                		.lword	_cm_print_jd
00001430 rrrrrrrr                		.lword	_get_flt
00001434 rrrrrrrr                		.lword	_set_flt
00001438 rrrrrrrr                		.lword	(_cm) + 460
0000143C CDCC4C3E                		.lword	3E4CCCCDH	; float 0.2
00001440 62                      		.byte	"b"
00001441 000000                  		.byte	00H,00H,00H
00001444 627261                  		.byte	"bra"
00001447 000000                  		.byte	00H,00H,00H
0000144A 0B                      		.byte	0BH
0000144B 03                      		.byte	03H
0000144C rrrrrrrr                		.lword	_cm_print_ra
00001450 rrrrrrrr                		.lword	_get_flt
00001454 rrrrrrrr                		.lword	_set_flt
00001458 rrrrrrrr                		.lword	(_cm) + 464
0000145C 0000803F                		.lword	3F800000H	; float 1
00001460 63                      		.byte	"c"
00001461 000000                  		.byte	00H,00H,00H
00001464 63616D                  		.byte	"cam"
00001467 000000                  		.byte	00H,00H,00H
0000146A 03                      		.byte	03H
0000146B 00                      		.byte	00H
0000146C rrrrrrrr                		.lword	_cm_print_am
00001470 rrrrrrrr                		.lword	_cm_get_am
00001474 rrrrrrrr                		.lword	_cm_set_am
00001478 rrrrrrrr                		.lword	(_cm) + (000001E4H)
0000147C 00000000                		.lword	00000000H
00001480 63                      		.byte	"c"
00001481 000000                  		.byte	00H,00H,00H
00001484 63766D                  		.byte	"cvm"
00001487 000000                  		.byte	00H,00H,00H
0000148A 03                      		.byte	03H
0000148B 00                      		.byte	00H
0000148C rrrrrrrr                		.lword	_cm_print_vm
00001490 rrrrrrrr                		.lword	_get_flt
00001494 rrrrrrrr                		.lword	_set_flt
00001498 rrrrrrrr                		.lword	(_cm) + 492
0000149C 00006145                		.lword	45610000H	; float 3600
000014A0 63                      		.byte	"c"
000014A1 000000                  		.byte	00H,00H,00H
000014A4 636672                  		.byte	"cfr"
000014A7 000000                  		.byte	00H,00H,00H
000014AA 03                      		.byte	03H
000014AB 00                      		.byte	00H
000014AC rrrrrrrr                		.lword	_cm_print_fr
000014B0 rrrrrrrr                		.lword	_get_flt
000014B4 rrrrrrrr                		.lword	_set_flt
000014B8 rrrrrrrr                		.lword	(_cm) + 488
000014BC 00006145                		.lword	45610000H	; float 3600
000014C0 63                      		.byte	"c"
000014C1 000000                  		.byte	00H,00H,00H
000014C4 63746E                  		.byte	"ctn"
000014C7 000000                  		.byte	00H,00H,00H
000014CA 03                      		.byte	03H
000014CB 03                      		.byte	03H
000014CC rrrrrrrr                		.lword	_cm_print_tn
000014D0 rrrrrrrr                		.lword	_get_flt
000014D4 rrrrrrrr                		.lword	_set_flu
000014D8 rrrrrrrr                		.lword	(_cm) + 500
000014DC 000080BF                		.lword	0BF800000H	; float -1
000014E0 63                      		.byte	"c"
000014E1 000000                  		.byte	00H,00H,00H
000014E4 63746D                  		.byte	"ctm"
000014E7 000000                  		.byte	00H,00H,00H
000014EA 03                      		.byte	03H
000014EB 03                      		.byte	03H
000014EC rrrrrrrr                		.lword	_cm_print_tm
000014F0 rrrrrrrr                		.lword	_get_flt
000014F4 rrrrrrrr                		.lword	_set_flt
000014F8 rrrrrrrr                		.lword	(_cm) + 496
000014FC 000080BF                		.lword	0BF800000H	; float -1
00001500 63                      		.byte	"c"
00001501 000000                  		.byte	00H,00H,00H
00001504 636A6D                  		.byte	"cjm"
00001507 000000                  		.byte	00H,00H,00H
0000150A 03                      		.byte	03H
0000150B 00                      		.byte	00H
0000150C rrrrrrrr                		.lword	_cm_print_jm
00001510 rrrrrrrr                		.lword	_get_flt
00001514 rrrrrrrr                		.lword	_cm_set_xjm
00001518 rrrrrrrr                		.lword	(_cm) + 504
0000151C 0000A041                		.lword	41A00000H	; float 20
00001520 63                      		.byte	"c"
00001521 000000                  		.byte	00H,00H,00H
00001524 636A64                  		.byte	"cjd"
00001527 000000                  		.byte	00H,00H,00H
0000152A 03                      		.byte	03H
0000152B 00                      		.byte	00H
0000152C rrrrrrrr                		.lword	_cm_print_jd
00001530 rrrrrrrr                		.lword	_get_flt
00001534 rrrrrrrr                		.lword	_set_flt
00001538 rrrrrrrr                		.lword	(_cm) + 516
0000153C CDCC4C3E                		.lword	3E4CCCCDH	; float 0.2
00001540 63                      		.byte	"c"
00001541 000000                  		.byte	00H,00H,00H
00001544 637261                  		.byte	"cra"
00001547 000000                  		.byte	00H,00H,00H
0000154A 0B                      		.byte	0BH
0000154B 03                      		.byte	03H
0000154C rrrrrrrr                		.lword	_cm_print_ra
00001550 rrrrrrrr                		.lword	_get_flt
00001554 rrrrrrrr                		.lword	_set_flt
00001558 rrrrrrrr                		.lword	(_cm) + 520
0000155C 0000803F                		.lword	3F800000H	; float 1
00001560 7031                    		.byte	"p1"
00001562 0000                    		.byte	00H,00H
00001564 70316672                		.byte	"p1frq"
         71                      
00001569 00                      		.byte	00H
0000156A 03                      		.byte	03H
0000156B 00                      		.byte	00H
0000156C rrrrrrrr                		.lword	_pwm_print_p1frq
00001570 rrrrrrrr                		.lword	_get_flt
00001574 rrrrrrrr                		.lword	_set_flt
00001578 rrrrrrrr                		.lword	_pwm
0000157C 0000C842                		.lword	42C80000H	; float 100
00001580 7031                    		.byte	"p1"
00001582 0000                    		.byte	00H,00H
00001584 70316373                		.byte	"p1csl"
         6C                      
00001589 00                      		.byte	00H
0000158A 03                      		.byte	03H
0000158B 00                      		.byte	00H
0000158C rrrrrrrr                		.lword	_pwm_print_p1csl
00001590 rrrrrrrr                		.lword	_get_flt
00001594 rrrrrrrr                		.lword	_set_flt
00001598 rrrrrrrr                		.lword	(_pwm) + 4
0000159C 00007A44                		.lword	447A0000H	; float 1000
000015A0 7031                    		.byte	"p1"
000015A2 0000                    		.byte	00H,00H
000015A4 70316373                		.byte	"p1csh"
         68                      
000015A9 00                      		.byte	00H
000015AA 03                      		.byte	03H
000015AB 00                      		.byte	00H
000015AC rrrrrrrr                		.lword	_pwm_print_p1csh
000015B0 rrrrrrrr                		.lword	_get_flt
000015B4 rrrrrrrr                		.lword	_set_flt
000015B8 rrrrrrrr                		.lword	(_pwm) + 8
000015BC 0000FA44                		.lword	44FA0000H	; float 2000
000015C0 7031                    		.byte	"p1"
000015C2 0000                    		.byte	00H,00H
000015C4 70316370                		.byte	"p1cpl"
         6C                      
000015C9 00                      		.byte	00H
000015CA 03                      		.byte	03H
000015CB 03                      		.byte	03H
000015CC rrrrrrrr                		.lword	_pwm_print_p1cpl
000015D0 rrrrrrrr                		.lword	_get_flt
000015D4 rrrrrrrr                		.lword	_set_flt
000015D8 rrrrrrrr                		.lword	(_pwm) + 12
000015DC 0000003E                		.lword	3E000000H	; float 0.125
000015E0 7031                    		.byte	"p1"
000015E2 0000                    		.byte	00H,00H
000015E4 70316370                		.byte	"p1cph"
         68                      
000015E9 00                      		.byte	00H
000015EA 03                      		.byte	03H
000015EB 03                      		.byte	03H
000015EC rrrrrrrr                		.lword	_pwm_print_p1cph
000015F0 rrrrrrrr                		.lword	_get_flt
000015F4 rrrrrrrr                		.lword	_set_flt
000015F8 rrrrrrrr                		.lword	(_pwm) + 16
000015FC CDCC4C3E                		.lword	3E4CCCCDH	; float 0.2
00001600 7031                    		.byte	"p1"
00001602 0000                    		.byte	00H,00H
00001604 70317773                		.byte	"p1wsl"
         6C                      
00001609 00                      		.byte	00H
0000160A 03                      		.byte	03H
0000160B 00                      		.byte	00H
0000160C rrrrrrrr                		.lword	_pwm_print_p1wsl
00001610 rrrrrrrr                		.lword	_get_flt
00001614 rrrrrrrr                		.lword	_set_flt
00001618 rrrrrrrr                		.lword	(_pwm) + 20
0000161C 00007A44                		.lword	447A0000H	; float 1000
00001620 7031                    		.byte	"p1"
00001622 0000                    		.byte	00H,00H
00001624 70317773                		.byte	"p1wsh"
         68                      
00001629 00                      		.byte	00H
0000162A 03                      		.byte	03H
0000162B 00                      		.byte	00H
0000162C rrrrrrrr                		.lword	_pwm_print_p1wsh
00001630 rrrrrrrr                		.lword	_get_flt
00001634 rrrrrrrr                		.lword	_set_flt
00001638 rrrrrrrr                		.lword	(_pwm) + 24
0000163C 0000FA44                		.lword	44FA0000H	; float 2000
00001640 7031                    		.byte	"p1"
00001642 0000                    		.byte	00H,00H
00001644 70317770                		.byte	"p1wpl"
         6C                      
00001649 00                      		.byte	00H
0000164A 03                      		.byte	03H
0000164B 03                      		.byte	03H
0000164C rrrrrrrr                		.lword	_pwm_print_p1wpl
00001650 rrrrrrrr                		.lword	_get_flt
00001654 rrrrrrrr                		.lword	_set_flt
00001658 rrrrrrrr                		.lword	(_pwm) + 28
0000165C 0000003E                		.lword	3E000000H	; float 0.125
00001660 7031                    		.byte	"p1"
00001662 0000                    		.byte	00H,00H
00001664 70317770                		.byte	"p1wph"
         68                      
00001669 00                      		.byte	00H
0000166A 03                      		.byte	03H
0000166B 03                      		.byte	03H
0000166C rrrrrrrr                		.lword	_pwm_print_p1wph
00001670 rrrrrrrr                		.lword	_get_flt
00001674 rrrrrrrr                		.lword	_set_flt
00001678 rrrrrrrr                		.lword	(_pwm) + 32
0000167C CDCC4C3E                		.lword	3E4CCCCDH	; float 0.2
00001680 7031                    		.byte	"p1"
00001682 0000                    		.byte	00H,00H
00001684 7031706F                		.byte	"p1pof"
         66                      
00001689 00                      		.byte	00H
0000168A 03                      		.byte	03H
0000168B 03                      		.byte	03H
0000168C rrrrrrrr                		.lword	_pwm_print_p1pof
00001690 rrrrrrrr                		.lword	_get_flt
00001694 rrrrrrrr                		.lword	_set_flt
00001698 rrrrrrrr                		.lword	(_pwm) + 36
0000169C CDCCCC3D                		.lword	3DCCCCCDH	; float 0.1
000016A0 673534                  		.byte	"g54"
000016A3 00                      		.byte	00H
000016A4 67353478                		.byte	"g54x"
000016A8 0000                    		.byte	00H,00H
000016AA 0B                      		.byte	0BH
000016AB 03                      		.byte	03H
000016AC rrrrrrrr                		.lword	_cm_print_cofs
000016B0 rrrrrrrr                		.lword	_get_flt
000016B4 rrrrrrrr                		.lword	_set_flu
000016B8 rrrrrrrr                		.lword	(_cm) + 60
000016BC 00000000                		.lword	00000000H
000016C0 673534                  		.byte	"g54"
000016C3 00                      		.byte	00H
000016C4 67353479                		.byte	"g54y"
000016C8 0000                    		.byte	00H,00H
000016CA 0B                      		.byte	0BH
000016CB 03                      		.byte	03H
000016CC rrrrrrrr                		.lword	_cm_print_cofs
000016D0 rrrrrrrr                		.lword	_get_flt
000016D4 rrrrrrrr                		.lword	_set_flu
000016D8 rrrrrrrr                		.lword	(_cm) + 64
000016DC 00000000                		.lword	00000000H
000016E0 673534                  		.byte	"g54"
000016E3 00                      		.byte	00H
000016E4 6735347A                		.byte	"g54z"
000016E8 0000                    		.byte	00H,00H
000016EA 0B                      		.byte	0BH
000016EB 03                      		.byte	03H
000016EC rrrrrrrr                		.lword	_cm_print_cofs
000016F0 rrrrrrrr                		.lword	_get_flt
000016F4 rrrrrrrr                		.lword	_set_flu
000016F8 rrrrrrrr                		.lword	(_cm) + 68
000016FC 00000000                		.lword	00000000H
00001700 673534                  		.byte	"g54"
00001703 00                      		.byte	00H
00001704 67353461                		.byte	"g54a"
00001708 0000                    		.byte	00H,00H
0000170A 0B                      		.byte	0BH
0000170B 03                      		.byte	03H
0000170C rrrrrrrr                		.lword	_cm_print_cofs
00001710 rrrrrrrr                		.lword	_get_flt
00001714 rrrrrrrr                		.lword	_set_flu
00001718 rrrrrrrr                		.lword	(_cm) + 72
0000171C 00000000                		.lword	00000000H
00001720 673534                  		.byte	"g54"
00001723 00                      		.byte	00H
00001724 67353462                		.byte	"g54b"
00001728 0000                    		.byte	00H,00H
0000172A 0B                      		.byte	0BH
0000172B 03                      		.byte	03H
0000172C rrrrrrrr                		.lword	_cm_print_cofs
00001730 rrrrrrrr                		.lword	_get_flt
00001734 rrrrrrrr                		.lword	_set_flu
00001738 rrrrrrrr                		.lword	(_cm) + 76
0000173C 00000000                		.lword	00000000H
00001740 673534                  		.byte	"g54"
00001743 00                      		.byte	00H
00001744 67353463                		.byte	"g54c"
00001748 0000                    		.byte	00H,00H
0000174A 0B                      		.byte	0BH
0000174B 03                      		.byte	03H
0000174C rrrrrrrr                		.lword	_cm_print_cofs
00001750 rrrrrrrr                		.lword	_get_flt
00001754 rrrrrrrr                		.lword	_set_flu
00001758 rrrrrrrr                		.lword	(_cm) + 80
0000175C 00000000                		.lword	00000000H
00001760 673535                  		.byte	"g55"
00001763 00                      		.byte	00H
00001764 67353578                		.byte	"g55x"
00001768 0000                    		.byte	00H,00H
0000176A 0B                      		.byte	0BH
0000176B 03                      		.byte	03H
0000176C rrrrrrrr                		.lword	_cm_print_cofs
00001770 rrrrrrrr                		.lword	_get_flt
00001774 rrrrrrrr                		.lword	_set_flu
00001778 rrrrrrrr                		.lword	(_cm) + 84
0000177C 0080BB44                		.lword	44BB8000H	; float 1500
00001780 673535                  		.byte	"g55"
00001783 00                      		.byte	00H
00001784 67353579                		.byte	"g55y"
00001788 0000                    		.byte	00H,00H
0000178A 0B                      		.byte	0BH
0000178B 03                      		.byte	03H
0000178C rrrrrrrr                		.lword	_cm_print_cofs
00001790 rrrrrrrr                		.lword	_get_flt
00001794 rrrrrrrr                		.lword	_set_flu
00001798 rrrrrrrr                		.lword	(_cm) + 88
0000179C 00803B44                		.lword	443B8000H	; float 750
000017A0 673535                  		.byte	"g55"
000017A3 00                      		.byte	00H
000017A4 6735357A                		.byte	"g55z"
000017A8 0000                    		.byte	00H,00H
000017AA 0B                      		.byte	0BH
000017AB 03                      		.byte	03H
000017AC rrrrrrrr                		.lword	_cm_print_cofs
000017B0 rrrrrrrr                		.lword	_get_flt
000017B4 rrrrrrrr                		.lword	_set_flu
000017B8 rrrrrrrr                		.lword	(_cm) + 92
000017BC 00000000                		.lword	00000000H
000017C0 673535                  		.byte	"g55"
000017C3 00                      		.byte	00H
000017C4 67353561                		.byte	"g55a"
000017C8 0000                    		.byte	00H,00H
000017CA 0B                      		.byte	0BH
000017CB 03                      		.byte	03H
000017CC rrrrrrrr                		.lword	_cm_print_cofs
000017D0 rrrrrrrr                		.lword	_get_flt
000017D4 rrrrrrrr                		.lword	_set_flu
000017D8 rrrrrrrr                		.lword	(_cm) + 96
000017DC 00000000                		.lword	00000000H
000017E0 673535                  		.byte	"g55"
000017E3 00                      		.byte	00H
000017E4 67353562                		.byte	"g55b"
000017E8 0000                    		.byte	00H,00H
000017EA 0B                      		.byte	0BH
000017EB 03                      		.byte	03H
000017EC rrrrrrrr                		.lword	_cm_print_cofs
000017F0 rrrrrrrr                		.lword	_get_flt
000017F4 rrrrrrrr                		.lword	_set_flu
000017F8 rrrrrrrr                		.lword	(_cm) + 100
000017FC 00000000                		.lword	00000000H
00001800 673535                  		.byte	"g55"
00001803 00                      		.byte	00H
00001804 67353563                		.byte	"g55c"
00001808 0000                    		.byte	00H,00H
0000180A 0B                      		.byte	0BH
0000180B 03                      		.byte	03H
0000180C rrrrrrrr                		.lword	_cm_print_cofs
00001810 rrrrrrrr                		.lword	_get_flt
00001814 rrrrrrrr                		.lword	_set_flu
00001818 rrrrrrrr                		.lword	(_cm) + 104
0000181C 00000000                		.lword	00000000H
00001820 673536                  		.byte	"g56"
00001823 00                      		.byte	00H
00001824 67353678                		.byte	"g56x"
00001828 0000                    		.byte	00H,00H
0000182A 0B                      		.byte	0BH
0000182B 03                      		.byte	03H
0000182C rrrrrrrr                		.lword	_cm_print_cofs
00001830 rrrrrrrr                		.lword	_get_flt
00001834 rrrrrrrr                		.lword	_set_flu
00001838 rrrrrrrr                		.lword	(_cm) + 108
0000183C 00000000                		.lword	00000000H
00001840 673536                  		.byte	"g56"
00001843 00                      		.byte	00H
00001844 67353679                		.byte	"g56y"
00001848 0000                    		.byte	00H,00H
0000184A 0B                      		.byte	0BH
0000184B 03                      		.byte	03H
0000184C rrrrrrrr                		.lword	_cm_print_cofs
00001850 rrrrrrrr                		.lword	_get_flt
00001854 rrrrrrrr                		.lword	_set_flu
00001858 rrrrrrrr                		.lword	(_cm) + 112
0000185C 00000000                		.lword	00000000H
00001860 673536                  		.byte	"g56"
00001863 00                      		.byte	00H
00001864 6735367A                		.byte	"g56z"
00001868 0000                    		.byte	00H,00H
0000186A 0B                      		.byte	0BH
0000186B 03                      		.byte	03H
0000186C rrrrrrrr                		.lword	_cm_print_cofs
00001870 rrrrrrrr                		.lword	_get_flt
00001874 rrrrrrrr                		.lword	_set_flu
00001878 rrrrrrrr                		.lword	(_cm) + 116
0000187C 00000000                		.lword	00000000H
00001880 673536                  		.byte	"g56"
00001883 00                      		.byte	00H
00001884 67353661                		.byte	"g56a"
00001888 0000                    		.byte	00H,00H
0000188A 0B                      		.byte	0BH
0000188B 03                      		.byte	03H
0000188C rrrrrrrr                		.lword	_cm_print_cofs
00001890 rrrrrrrr                		.lword	_get_flt
00001894 rrrrrrrr                		.lword	_set_flu
00001898 rrrrrrrr                		.lword	(_cm) + 120
0000189C 00000000                		.lword	00000000H
000018A0 673536                  		.byte	"g56"
000018A3 00                      		.byte	00H
000018A4 67353662                		.byte	"g56b"
000018A8 0000                    		.byte	00H,00H
000018AA 0B                      		.byte	0BH
000018AB 03                      		.byte	03H
000018AC rrrrrrrr                		.lword	_cm_print_cofs
000018B0 rrrrrrrr                		.lword	_get_flt
000018B4 rrrrrrrr                		.lword	_set_flu
000018B8 rrrrrrrr                		.lword	(_cm) + 124
000018BC 00000000                		.lword	00000000H
000018C0 673536                  		.byte	"g56"
000018C3 00                      		.byte	00H
000018C4 67353663                		.byte	"g56c"
000018C8 0000                    		.byte	00H,00H
000018CA 0B                      		.byte	0BH
000018CB 03                      		.byte	03H
000018CC rrrrrrrr                		.lword	_cm_print_cofs
000018D0 rrrrrrrr                		.lword	_get_flt
000018D4 rrrrrrrr                		.lword	_set_flu
000018D8 rrrrrrrr                		.lword	(_cm) + 128
000018DC 00000000                		.lword	00000000H
000018E0 673537                  		.byte	"g57"
000018E3 00                      		.byte	00H
000018E4 67353778                		.byte	"g57x"
000018E8 0000                    		.byte	00H,00H
000018EA 0B                      		.byte	0BH
000018EB 03                      		.byte	03H
000018EC rrrrrrrr                		.lword	_cm_print_cofs
000018F0 rrrrrrrr                		.lword	_get_flt
000018F4 rrrrrrrr                		.lword	_set_flu
000018F8 rrrrrrrr                		.lword	(_cm) + 132
000018FC 00000000                		.lword	00000000H
00001900 673537                  		.byte	"g57"
00001903 00                      		.byte	00H
00001904 67353779                		.byte	"g57y"
00001908 0000                    		.byte	00H,00H
0000190A 0B                      		.byte	0BH
0000190B 03                      		.byte	03H
0000190C rrrrrrrr                		.lword	_cm_print_cofs
00001910 rrrrrrrr                		.lword	_get_flt
00001914 rrrrrrrr                		.lword	_set_flu
00001918 rrrrrrrr                		.lword	(_cm) + 136
0000191C 00000000                		.lword	00000000H
00001920 673537                  		.byte	"g57"
00001923 00                      		.byte	00H
00001924 6735377A                		.byte	"g57z"
00001928 0000                    		.byte	00H,00H
0000192A 0B                      		.byte	0BH
0000192B 03                      		.byte	03H
0000192C rrrrrrrr                		.lword	_cm_print_cofs
00001930 rrrrrrrr                		.lword	_get_flt
00001934 rrrrrrrr                		.lword	_set_flu
00001938 rrrrrrrr                		.lword	(_cm) + 140
0000193C 00000000                		.lword	00000000H
00001940 673537                  		.byte	"g57"
00001943 00                      		.byte	00H
00001944 67353761                		.byte	"g57a"
00001948 0000                    		.byte	00H,00H
0000194A 0B                      		.byte	0BH
0000194B 03                      		.byte	03H
0000194C rrrrrrrr                		.lword	_cm_print_cofs
00001950 rrrrrrrr                		.lword	_get_flt
00001954 rrrrrrrr                		.lword	_set_flu
00001958 rrrrrrrr                		.lword	(_cm) + 144
0000195C 00000000                		.lword	00000000H
00001960 673537                  		.byte	"g57"
00001963 00                      		.byte	00H
00001964 67353762                		.byte	"g57b"
00001968 0000                    		.byte	00H,00H
0000196A 0B                      		.byte	0BH
0000196B 03                      		.byte	03H
0000196C rrrrrrrr                		.lword	_cm_print_cofs
00001970 rrrrrrrr                		.lword	_get_flt
00001974 rrrrrrrr                		.lword	_set_flu
00001978 rrrrrrrr                		.lword	(_cm) + 148
0000197C 00000000                		.lword	00000000H
00001980 673537                  		.byte	"g57"
00001983 00                      		.byte	00H
00001984 67353763                		.byte	"g57c"
00001988 0000                    		.byte	00H,00H
0000198A 0B                      		.byte	0BH
0000198B 03                      		.byte	03H
0000198C rrrrrrrr                		.lword	_cm_print_cofs
00001990 rrrrrrrr                		.lword	_get_flt
00001994 rrrrrrrr                		.lword	_set_flu
00001998 rrrrrrrr                		.lword	(_cm) + 152
0000199C 00000000                		.lword	00000000H
000019A0 673538                  		.byte	"g58"
000019A3 00                      		.byte	00H
000019A4 67353878                		.byte	"g58x"
000019A8 0000                    		.byte	00H,00H
000019AA 0B                      		.byte	0BH
000019AB 03                      		.byte	03H
000019AC rrrrrrrr                		.lword	_cm_print_cofs
000019B0 rrrrrrrr                		.lword	_get_flt
000019B4 rrrrrrrr                		.lword	_set_flu
000019B8 rrrrrrrr                		.lword	(_cm) + 156
000019BC 00000000                		.lword	00000000H
000019C0 673538                  		.byte	"g58"
000019C3 00                      		.byte	00H
000019C4 67353879                		.byte	"g58y"
000019C8 0000                    		.byte	00H,00H
000019CA 0B                      		.byte	0BH
000019CB 03                      		.byte	03H
000019CC rrrrrrrr                		.lword	_cm_print_cofs
000019D0 rrrrrrrr                		.lword	_get_flt
000019D4 rrrrrrrr                		.lword	_set_flu
000019D8 rrrrrrrr                		.lword	(_cm) + 160
000019DC 00000000                		.lword	00000000H
000019E0 673538                  		.byte	"g58"
000019E3 00                      		.byte	00H
000019E4 6735387A                		.byte	"g58z"
000019E8 0000                    		.byte	00H,00H
000019EA 0B                      		.byte	0BH
000019EB 03                      		.byte	03H
000019EC rrrrrrrr                		.lword	_cm_print_cofs
000019F0 rrrrrrrr                		.lword	_get_flt
000019F4 rrrrrrrr                		.lword	_set_flu
000019F8 rrrrrrrr                		.lword	(_cm) + 164
000019FC 00000000                		.lword	00000000H
00001A00 673538                  		.byte	"g58"
00001A03 00                      		.byte	00H
00001A04 67353861                		.byte	"g58a"
00001A08 0000                    		.byte	00H,00H
00001A0A 0B                      		.byte	0BH
00001A0B 03                      		.byte	03H
00001A0C rrrrrrrr                		.lword	_cm_print_cofs
00001A10 rrrrrrrr                		.lword	_get_flt
00001A14 rrrrrrrr                		.lword	_set_flu
00001A18 rrrrrrrr                		.lword	(_cm) + 168
00001A1C 00000000                		.lword	00000000H
00001A20 673538                  		.byte	"g58"
00001A23 00                      		.byte	00H
00001A24 67353862                		.byte	"g58b"
00001A28 0000                    		.byte	00H,00H
00001A2A 0B                      		.byte	0BH
00001A2B 03                      		.byte	03H
00001A2C rrrrrrrr                		.lword	_cm_print_cofs
00001A30 rrrrrrrr                		.lword	_get_flt
00001A34 rrrrrrrr                		.lword	_set_flu
00001A38 rrrrrrrr                		.lword	(_cm) + 172
00001A3C 00000000                		.lword	00000000H
00001A40 673538                  		.byte	"g58"
00001A43 00                      		.byte	00H
00001A44 67353863                		.byte	"g58c"
00001A48 0000                    		.byte	00H,00H
00001A4A 0B                      		.byte	0BH
00001A4B 03                      		.byte	03H
00001A4C rrrrrrrr                		.lword	_cm_print_cofs
00001A50 rrrrrrrr                		.lword	_get_flt
00001A54 rrrrrrrr                		.lword	_set_flu
00001A58 rrrrrrrr                		.lword	(_cm) + 176
00001A5C 00000000                		.lword	00000000H
00001A60 673539                  		.byte	"g59"
00001A63 00                      		.byte	00H
00001A64 67353978                		.byte	"g59x"
00001A68 0000                    		.byte	00H,00H
00001A6A 0B                      		.byte	0BH
00001A6B 03                      		.byte	03H
00001A6C rrrrrrrr                		.lword	_cm_print_cofs
00001A70 rrrrrrrr                		.lword	_get_flt
00001A74 rrrrrrrr                		.lword	_set_flu
00001A78 rrrrrrrr                		.lword	(_cm) + 180
00001A7C 00000000                		.lword	00000000H
00001A80 673539                  		.byte	"g59"
00001A83 00                      		.byte	00H
00001A84 67353979                		.byte	"g59y"
00001A88 0000                    		.byte	00H,00H
00001A8A 0B                      		.byte	0BH
00001A8B 03                      		.byte	03H
00001A8C rrrrrrrr                		.lword	_cm_print_cofs
00001A90 rrrrrrrr                		.lword	_get_flt
00001A94 rrrrrrrr                		.lword	_set_flu
00001A98 rrrrrrrr                		.lword	(_cm) + 184
00001A9C 00000000                		.lword	00000000H
00001AA0 673539                  		.byte	"g59"
00001AA3 00                      		.byte	00H
00001AA4 6735397A                		.byte	"g59z"
00001AA8 0000                    		.byte	00H,00H
00001AAA 0B                      		.byte	0BH
00001AAB 03                      		.byte	03H
00001AAC rrrrrrrr                		.lword	_cm_print_cofs
00001AB0 rrrrrrrr                		.lword	_get_flt
00001AB4 rrrrrrrr                		.lword	_set_flu
00001AB8 rrrrrrrr                		.lword	(_cm) + 188
00001ABC 00000000                		.lword	00000000H
00001AC0 673539                  		.byte	"g59"
00001AC3 00                      		.byte	00H
00001AC4 67353961                		.byte	"g59a"
00001AC8 0000                    		.byte	00H,00H
00001ACA 0B                      		.byte	0BH
00001ACB 03                      		.byte	03H
00001ACC rrrrrrrr                		.lword	_cm_print_cofs
00001AD0 rrrrrrrr                		.lword	_get_flt
00001AD4 rrrrrrrr                		.lword	_set_flu
00001AD8 rrrrrrrr                		.lword	(_cm) + 192
00001ADC 00000000                		.lword	00000000H
00001AE0 673539                  		.byte	"g59"
00001AE3 00                      		.byte	00H
00001AE4 67353962                		.byte	"g59b"
00001AE8 0000                    		.byte	00H,00H
00001AEA 0B                      		.byte	0BH
00001AEB 03                      		.byte	03H
00001AEC rrrrrrrr                		.lword	_cm_print_cofs
00001AF0 rrrrrrrr                		.lword	_get_flt
00001AF4 rrrrrrrr                		.lword	_set_flu
00001AF8 rrrrrrrr                		.lword	(_cm) + 196
00001AFC 00000000                		.lword	00000000H
00001B00 673539                  		.byte	"g59"
00001B03 00                      		.byte	00H
00001B04 67353963                		.byte	"g59c"
00001B08 0000                    		.byte	00H,00H
00001B0A 0B                      		.byte	0BH
00001B0B 03                      		.byte	03H
00001B0C rrrrrrrr                		.lword	_cm_print_cofs
00001B10 rrrrrrrr                		.lword	_get_flt
00001B14 rrrrrrrr                		.lword	_set_flu
00001B18 rrrrrrrr                		.lword	(_cm) + 200
00001B1C 00000000                		.lword	00000000H
00001B20 673932                  		.byte	"g92"
00001B23 00                      		.byte	00H
00001B24 67393278                		.byte	"g92x"
00001B28 0000                    		.byte	00H,00H
00001B2A 01                      		.byte	01H
00001B2B 03                      		.byte	03H
00001B2C rrrrrrrr                		.lword	_cm_print_cofs
00001B30 rrrrrrrr                		.lword	_get_flt
00001B34 rrrrrrrr                		.lword	_set_nul
00001B38 rrrrrrrr                		.lword	(_cm) + 716
00001B3C 00000000                		.lword	00000000H
00001B40 673932                  		.byte	"g92"
00001B43 00                      		.byte	00H
00001B44 67393279                		.byte	"g92y"
00001B48 0000                    		.byte	00H,00H
00001B4A 01                      		.byte	01H
00001B4B 03                      		.byte	03H
00001B4C rrrrrrrr                		.lword	_cm_print_cofs
00001B50 rrrrrrrr                		.lword	_get_flt
00001B54 rrrrrrrr                		.lword	_set_nul
00001B58 rrrrrrrr                		.lword	(_cm) + 720
00001B5C 00000000                		.lword	00000000H
00001B60 673932                  		.byte	"g92"
00001B63 00                      		.byte	00H
00001B64 6739327A                		.byte	"g92z"
00001B68 0000                    		.byte	00H,00H
00001B6A 01                      		.byte	01H
00001B6B 03                      		.byte	03H
00001B6C rrrrrrrr                		.lword	_cm_print_cofs
00001B70 rrrrrrrr                		.lword	_get_flt
00001B74 rrrrrrrr                		.lword	_set_nul
00001B78 rrrrrrrr                		.lword	(_cm) + 724
00001B7C 00000000                		.lword	00000000H
00001B80 673932                  		.byte	"g92"
00001B83 00                      		.byte	00H
00001B84 67393261                		.byte	"g92a"
00001B88 0000                    		.byte	00H,00H
00001B8A 01                      		.byte	01H
00001B8B 03                      		.byte	03H
00001B8C rrrrrrrr                		.lword	_cm_print_cofs
00001B90 rrrrrrrr                		.lword	_get_flt
00001B94 rrrrrrrr                		.lword	_set_nul
00001B98 rrrrrrrr                		.lword	(_cm) + 728
00001B9C 00000000                		.lword	00000000H
00001BA0 673932                  		.byte	"g92"
00001BA3 00                      		.byte	00H
00001BA4 67393262                		.byte	"g92b"
00001BA8 0000                    		.byte	00H,00H
00001BAA 01                      		.byte	01H
00001BAB 03                      		.byte	03H
00001BAC rrrrrrrr                		.lword	_cm_print_cofs
00001BB0 rrrrrrrr                		.lword	_get_flt
00001BB4 rrrrrrrr                		.lword	_set_nul
00001BB8 rrrrrrrr                		.lword	(_cm) + 732
00001BBC 00000000                		.lword	00000000H
00001BC0 673932                  		.byte	"g92"
00001BC3 00                      		.byte	00H
00001BC4 67393263                		.byte	"g92c"
00001BC8 0000                    		.byte	00H,00H
00001BCA 01                      		.byte	01H
00001BCB 03                      		.byte	03H
00001BCC rrrrrrrr                		.lword	_cm_print_cofs
00001BD0 rrrrrrrr                		.lword	_get_flt
00001BD4 rrrrrrrr                		.lword	_set_nul
00001BD8 rrrrrrrr                		.lword	(_cm) + 736
00001BDC 00000000                		.lword	00000000H
00001BE0 673238                  		.byte	"g28"
00001BE3 00                      		.byte	00H
00001BE4 67323878                		.byte	"g28x"
00001BE8 0000                    		.byte	00H,00H
00001BEA 01                      		.byte	01H
00001BEB 03                      		.byte	03H
00001BEC rrrrrrrr                		.lword	_cm_print_cpos
00001BF0 rrrrrrrr                		.lword	_get_flt
00001BF4 rrrrrrrr                		.lword	_set_nul
00001BF8 rrrrrrrr                		.lword	(_cm) + 740
00001BFC 00000000                		.lword	00000000H
00001C00 673238                  		.byte	"g28"
00001C03 00                      		.byte	00H
00001C04 67323879                		.byte	"g28y"
00001C08 0000                    		.byte	00H,00H
00001C0A 01                      		.byte	01H
00001C0B 03                      		.byte	03H
00001C0C rrrrrrrr                		.lword	_cm_print_cpos
00001C10 rrrrrrrr                		.lword	_get_flt
00001C14 rrrrrrrr                		.lword	_set_nul
00001C18 rrrrrrrr                		.lword	(_cm) + 744
00001C1C 00000000                		.lword	00000000H
00001C20 673238                  		.byte	"g28"
00001C23 00                      		.byte	00H
00001C24 6732387A                		.byte	"g28z"
00001C28 0000                    		.byte	00H,00H
00001C2A 01                      		.byte	01H
00001C2B 03                      		.byte	03H
00001C2C rrrrrrrr                		.lword	_cm_print_cpos
00001C30 rrrrrrrr                		.lword	_get_flt
00001C34 rrrrrrrr                		.lword	_set_nul
00001C38 rrrrrrrr                		.lword	(_cm) + 748
00001C3C 00000000                		.lword	00000000H
00001C40 673238                  		.byte	"g28"
00001C43 00                      		.byte	00H
00001C44 67323861                		.byte	"g28a"
00001C48 0000                    		.byte	00H,00H
00001C4A 01                      		.byte	01H
00001C4B 03                      		.byte	03H
00001C4C rrrrrrrr                		.lword	_cm_print_cpos
00001C50 rrrrrrrr                		.lword	_get_flt
00001C54 rrrrrrrr                		.lword	_set_nul
00001C58 rrrrrrrr                		.lword	(_cm) + 752
00001C5C 00000000                		.lword	00000000H
00001C60 673238                  		.byte	"g28"
00001C63 00                      		.byte	00H
00001C64 67323862                		.byte	"g28b"
00001C68 0000                    		.byte	00H,00H
00001C6A 01                      		.byte	01H
00001C6B 03                      		.byte	03H
00001C6C rrrrrrrr                		.lword	_cm_print_cpos
00001C70 rrrrrrrr                		.lword	_get_flt
00001C74 rrrrrrrr                		.lword	_set_nul
00001C78 rrrrrrrr                		.lword	(_cm) + 756
00001C7C 00000000                		.lword	00000000H
00001C80 673238                  		.byte	"g28"
00001C83 00                      		.byte	00H
00001C84 67323863                		.byte	"g28c"
00001C88 0000                    		.byte	00H,00H
00001C8A 01                      		.byte	01H
00001C8B 03                      		.byte	03H
00001C8C rrrrrrrr                		.lword	_cm_print_cpos
00001C90 rrrrrrrr                		.lword	_get_flt
00001C94 rrrrrrrr                		.lword	_set_nul
00001C98 rrrrrrrr                		.lword	(_cm) + 760
00001C9C 00000000                		.lword	00000000H
00001CA0 673330                  		.byte	"g30"
00001CA3 00                      		.byte	00H
00001CA4 67333078                		.byte	"g30x"
00001CA8 0000                    		.byte	00H,00H
00001CAA 01                      		.byte	01H
00001CAB 03                      		.byte	03H
00001CAC rrrrrrrr                		.lword	_cm_print_cpos
00001CB0 rrrrrrrr                		.lword	_get_flt
00001CB4 rrrrrrrr                		.lword	_set_nul
00001CB8 rrrrrrrr                		.lword	(_cm) + 764
00001CBC 00000000                		.lword	00000000H
00001CC0 673330                  		.byte	"g30"
00001CC3 00                      		.byte	00H
00001CC4 67333079                		.byte	"g30y"
00001CC8 0000                    		.byte	00H,00H
00001CCA 01                      		.byte	01H
00001CCB 03                      		.byte	03H
00001CCC rrrrrrrr                		.lword	_cm_print_cpos
00001CD0 rrrrrrrr                		.lword	_get_flt
00001CD4 rrrrrrrr                		.lword	_set_nul
00001CD8 rrrrrrrr                		.lword	(_cm) + 768
00001CDC 00000000                		.lword	00000000H
00001CE0 673330                  		.byte	"g30"
00001CE3 00                      		.byte	00H
00001CE4 6733307A                		.byte	"g30z"
00001CE8 0000                    		.byte	00H,00H
00001CEA 01                      		.byte	01H
00001CEB 03                      		.byte	03H
00001CEC rrrrrrrr                		.lword	_cm_print_cpos
00001CF0 rrrrrrrr                		.lword	_get_flt
00001CF4 rrrrrrrr                		.lword	_set_nul
00001CF8 rrrrrrrr                		.lword	(_cm) + 772
00001CFC 00000000                		.lword	00000000H
00001D00 673330                  		.byte	"g30"
00001D03 00                      		.byte	00H
00001D04 67333061                		.byte	"g30a"
00001D08 0000                    		.byte	00H,00H
00001D0A 01                      		.byte	01H
00001D0B 03                      		.byte	03H
00001D0C rrrrrrrr                		.lword	_cm_print_cpos
00001D10 rrrrrrrr                		.lword	_get_flt
00001D14 rrrrrrrr                		.lword	_set_nul
00001D18 rrrrrrrr                		.lword	(_cm) + 776
00001D1C 00000000                		.lword	00000000H
00001D20 673330                  		.byte	"g30"
00001D23 00                      		.byte	00H
00001D24 67333062                		.byte	"g30b"
00001D28 0000                    		.byte	00H,00H
00001D2A 01                      		.byte	01H
00001D2B 03                      		.byte	03H
00001D2C rrrrrrrr                		.lword	_cm_print_cpos
00001D30 rrrrrrrr                		.lword	_get_flt
00001D34 rrrrrrrr                		.lword	_set_nul
00001D38 rrrrrrrr                		.lword	(_cm) + 780
00001D3C 00000000                		.lword	00000000H
00001D40 673330                  		.byte	"g30"
00001D43 00                      		.byte	00H
00001D44 67333063                		.byte	"g30c"
00001D48 0000                    		.byte	00H,00H
00001D4A 01                      		.byte	01H
00001D4B 03                      		.byte	03H
00001D4C rrrrrrrr                		.lword	_cm_print_cpos
00001D50 rrrrrrrr                		.lword	_get_flt
00001D54 rrrrrrrr                		.lword	_set_nul
00001D58 rrrrrrrr                		.lword	(_cm) + 784
00001D5C 00000000                		.lword	00000000H
00001D60 6A6964                  		.byte	"jid"
00001D63 00                      		.byte	00H
00001D64 6A696461                		.byte	"jida"
00001D68 0000                    		.byte	00H,00H
00001D6A 00                      		.byte	00H
00001D6B 00                      		.byte	00H
00001D6C rrrrrrrr                		.lword	_tx_print_nul
00001D70 rrrrrrrr                		.lword	_get_data
00001D74 rrrrrrrr                		.lword	_set_data
00001D78 rrrrrrrr                		.lword	(_cs) + (00000030H)
00001D7C 00000000                		.lword	00000000H
00001D80 6A6964                  		.byte	"jid"
00001D83 00                      		.byte	00H
00001D84 6A696462                		.byte	"jidb"
00001D88 0000                    		.byte	00H,00H
00001D8A 00                      		.byte	00H
00001D8B 00                      		.byte	00H
00001D8C rrrrrrrr                		.lword	_tx_print_nul
00001D90 rrrrrrrr                		.lword	_get_data
00001D94 rrrrrrrr                		.lword	_set_data
00001D98 rrrrrrrr                		.lword	(_cs) + (00000034H)
00001D9C 00000000                		.lword	00000000H
00001DA0 6A6964                  		.byte	"jid"
00001DA3 00                      		.byte	00H
00001DA4 6A696463                		.byte	"jidc"
00001DA8 0000                    		.byte	00H,00H
00001DAA 00                      		.byte	00H
00001DAB 00                      		.byte	00H
00001DAC rrrrrrrr                		.lword	_tx_print_nul
00001DB0 rrrrrrrr                		.lword	_get_data
00001DB4 rrrrrrrr                		.lword	_set_data
00001DB8 rrrrrrrr                		.lword	(_cs) + (00000038H)
00001DBC 00000000                		.lword	00000000H
00001DC0 6A6964                  		.byte	"jid"
00001DC3 00                      		.byte	00H
00001DC4 6A696464                		.byte	"jidd"
00001DC8 0000                    		.byte	00H,00H
00001DCA 00                      		.byte	00H
00001DCB 00                      		.byte	00H
00001DCC rrrrrrrr                		.lword	_tx_print_nul
00001DD0 rrrrrrrr                		.lword	_get_data
00001DD4 rrrrrrrr                		.lword	_set_data
00001DD8 rrrrrrrr                		.lword	(_cs) + (0000003CH)
00001DDC 00000000                		.lword	00000000H
00001DE0 737973                  		.byte	"sys"
00001DE3 00                      		.byte	00H
00001DE4 6A61                    		.byte	"ja"
00001DE6 00000000                		.byte	00H,00H,00H,00H
00001DEA 0F                      		.byte	0FH
00001DEB 00                      		.byte	00H
00001DEC rrrrrrrr                		.lword	_cm_print_ja
00001DF0 rrrrrrrr                		.lword	_get_flt
00001DF4 rrrrrrrr                		.lword	_set_flu
00001DF8 rrrrrrrr                		.lword	(_cm) + 4
00001DFC 00401C48                		.lword	481C4000H	; float 160000
00001E00 737973                  		.byte	"sys"
00001E03 00                      		.byte	00H
00001E04 6374                    		.byte	"ct"
00001E06 00000000                		.byte	00H,00H,00H,00H
00001E0A 0F                      		.byte	0FH
00001E0B 04                      		.byte	04H
00001E0C rrrrrrrr                		.lword	_cm_print_ct
00001E10 rrrrrrrr                		.lword	_get_flt
00001E14 rrrrrrrr                		.lword	_set_flu
00001E18 rrrrrrrr                		.lword	(_cm) + 8
00001E1C 0AD7233C                		.lword	3C23D70AH	; float 0.01
00001E20 737973                  		.byte	"sys"
00001E23 00                      		.byte	00H
00001E24 736C                    		.byte	"sl"
00001E26 00000000                		.byte	00H,00H,00H,00H
00001E2A 07                      		.byte	07H
00001E2B 00                      		.byte	00H
00001E2C rrrrrrrr                		.lword	_cm_print_sl
00001E30 rrrrrrrr                		.lword	_get_ui8
00001E34 rrrrrrrr                		.lword	_set_ui8
00001E38 rrrrrrrr                		.lword	(_cm) + (0000000CH)
00001E3C 00000000                		.lword	00000000H
00001E40 737973                  		.byte	"sys"
00001E43 00                      		.byte	00H
00001E44 7374                    		.byte	"st"
00001E46 00000000                		.byte	00H,00H,00H,00H
00001E4A 07                      		.byte	07H
00001E4B 00                      		.byte	00H
00001E4C rrrrrrrr                		.lword	_sw_print_st
00001E50 rrrrrrrr                		.lword	_get_ui8
00001E54 rrrrrrrr                		.lword	_sw_set_st
00001E58 rrrrrrrr                		.lword	_sw
00001E5C 0000803F                		.lword	3F800000H	; float 1
00001E60 737973                  		.byte	"sys"
00001E63 00                      		.byte	00H
00001E64 6D74                    		.byte	"mt"
00001E66 00000000                		.byte	00H,00H,00H,00H
00001E6A 07                      		.byte	07H
00001E6B 02                      		.byte	02H
00001E6C rrrrrrrr                		.lword	_st_print_mt
00001E70 rrrrrrrr                		.lword	_get_flt
00001E74 rrrrrrrr                		.lword	_st_set_mt
00001E78 rrrrrrrr                		.lword	_st_cfg
00001E7C 00000040                		.lword	40000000H	; float 2
00001E80 00                      		.byte	0
00001E81 00                      		.byte	0
00001E82 00                      		.byte	0
00001E83 00                      		.byte	0
00001E84 6D65                    		.byte	"me"
00001E86 00000000                		.byte	00H,00H,00H,00H
00001E8A 00                      		.byte	00H
00001E8B 00                      		.byte	00H
00001E8C rrrrrrrr                		.lword	_tx_print_str
00001E90 rrrrrrrr                		.lword	_st_set_me
00001E94 rrrrrrrr                		.lword	_st_set_me
00001E98 rrrrrrrr                		.lword	(_cs) + 4
00001E9C 00000000                		.lword	00000000H
00001EA0 00                      		.byte	0
00001EA1 00                      		.byte	0
00001EA2 00                      		.byte	0
00001EA3 00                      		.byte	0
00001EA4 6D64                    		.byte	"md"
00001EA6 00000000                		.byte	00H,00H,00H,00H
00001EAA 00                      		.byte	00H
00001EAB 00                      		.byte	00H
00001EAC rrrrrrrr                		.lword	_tx_print_str
00001EB0 rrrrrrrr                		.lword	_st_set_md
00001EB4 rrrrrrrr                		.lword	_st_set_md
00001EB8 rrrrrrrr                		.lword	(_cs) + 4
00001EBC 00000000                		.lword	00000000H
00001EC0 737973                  		.byte	"sys"
00001EC3 00                      		.byte	00H
00001EC4 656A                    		.byte	"ej"
00001EC6 00000000                		.byte	00H,00H,00H,00H
00001ECA 07                      		.byte	07H
00001ECB 00                      		.byte	00H
00001ECC rrrrrrrr                		.lword	_js_print_ej
00001ED0 rrrrrrrr                		.lword	_get_ui8
00001ED4 rrrrrrrr                		.lword	_set_01
00001ED8 rrrrrrrr                		.lword	(_cfg) + (00000002H)
00001EDC 00000000                		.lword	00000000H
00001EE0 737973                  		.byte	"sys"
00001EE3 00                      		.byte	00H
00001EE4 6A76                    		.byte	"jv"
00001EE6 00000000                		.byte	00H,00H,00H,00H
00001EEA 07                      		.byte	07H
00001EEB 00                      		.byte	00H
00001EEC rrrrrrrr                		.lword	_js_print_jv
00001EF0 rrrrrrrr                		.lword	_get_ui8
00001EF4 rrrrrrrr                		.lword	_json_set_jv
00001EF8 rrrrrrrr                		.lword	_js
00001EFC 0000A040                		.lword	40A00000H	; float 5
00001F00 737973                  		.byte	"sys"
00001F03 00                      		.byte	00H
00001F04 6A73                    		.byte	"js"
00001F06 00000000                		.byte	00H,00H,00H,00H
00001F0A 07                      		.byte	07H
00001F0B 00                      		.byte	00H
00001F0C rrrrrrrr                		.lword	_js_print_js
00001F10 rrrrrrrr                		.lword	_get_ui8
00001F14 rrrrrrrr                		.lword	_set_01
00001F18 rrrrrrrr                		.lword	(_js) + (00000002H)
00001F1C 0000803F                		.lword	3F800000H	; float 1
00001F20 737973                  		.byte	"sys"
00001F23 00                      		.byte	00H
00001F24 7476                    		.byte	"tv"
00001F26 00000000                		.byte	00H,00H,00H,00H
00001F2A 07                      		.byte	07H
00001F2B 00                      		.byte	00H
00001F2C rrrrrrrr                		.lword	_tx_print_tv
00001F30 rrrrrrrr                		.lword	_get_ui8
00001F34 rrrrrrrr                		.lword	_set_01
00001F38 rrrrrrrr                		.lword	(_txt) + (00000081H)
00001F3C 00000000                		.lword	00000000H
00001F40 737973                  		.byte	"sys"
00001F43 00                      		.byte	00H
00001F44 7176                    		.byte	"qv"
00001F46 00000000                		.byte	00H,00H,00H,00H
00001F4A 07                      		.byte	07H
00001F4B 00                      		.byte	00H
00001F4C rrrrrrrr                		.lword	_qr_print_qv
00001F50 rrrrrrrr                		.lword	_get_ui8
00001F54 rrrrrrrr                		.lword	_set_0123
00001F58 rrrrrrrr                		.lword	_qr
00001F5C 00000000                		.lword	00000000H
00001F60 737973                  		.byte	"sys"
00001F63 00                      		.byte	00H
00001F64 7376                    		.byte	"sv"
00001F66 00000000                		.byte	00H,00H,00H,00H
00001F6A 07                      		.byte	07H
00001F6B 00                      		.byte	00H
00001F6C rrrrrrrr                		.lword	_sr_print_sv
00001F70 rrrrrrrr                		.lword	_get_ui8
00001F74 rrrrrrrr                		.lword	_set_012
00001F78 rrrrrrrr                		.lword	_sr
00001F7C 00000000                		.lword	00000000H
00001F80 737973                  		.byte	"sys"
00001F83 00                      		.byte	00H
00001F84 7369                    		.byte	"si"
00001F86 00000000                		.byte	00H,00H,00H,00H
00001F8A 07                      		.byte	07H
00001F8B 00                      		.byte	00H
00001F8C rrrrrrrr                		.lword	_sr_print_si
00001F90 rrrrrrrr                		.lword	_get_int
00001F94 rrrrrrrr                		.lword	_sr_set_si
00001F98 rrrrrrrr                		.lword	(_sr) + (00000004H)
00001F9C 0000FA43                		.lword	43FA0000H	; float 500
00001FA0 737973                  		.byte	"sys"
00001FA3 00                      		.byte	00H
00001FA4 6563                    		.byte	"ec"
00001FA6 00000000                		.byte	00H,00H,00H,00H
00001FAA 07                      		.byte	07H
00001FAB 00                      		.byte	00H
00001FAC rrrrrrrr                		.lword	_cfg_print_ec
00001FB0 rrrrrrrr                		.lword	_get_ui8
00001FB4 rrrrrrrr                		.lword	__$set_ec
00001FB8 rrrrrrrr                		.lword	(_cfg) + (00000003H)
00001FBC 00000000                		.lword	00000000H
00001FC0 737973                  		.byte	"sys"
00001FC3 00                      		.byte	00H
00001FC4 6565                    		.byte	"ee"
00001FC6 00000000                		.byte	00H,00H,00H,00H
00001FCA 07                      		.byte	07H
00001FCB 00                      		.byte	00H
00001FCC rrrrrrrr                		.lword	_cfg_print_ee
00001FD0 rrrrrrrr                		.lword	_get_ui8
00001FD4 rrrrrrrr                		.lword	__$set_ee
00001FD8 rrrrrrrr                		.lword	(_cfg) + (00000004H)
00001FDC 00000000                		.lword	00000000H
00001FE0 737973                  		.byte	"sys"
00001FE3 00                      		.byte	00H
00001FE4 6578                    		.byte	"ex"
00001FE6 00000000                		.byte	00H,00H,00H,00H
00001FEA 07                      		.byte	07H
00001FEB 00                      		.byte	00H
00001FEC rrrrrrrr                		.lword	_cfg_print_ex
00001FF0 rrrrrrrr                		.lword	_get_ui8
00001FF4 rrrrrrrr                		.lword	__$set_ex
00001FF8 rrrrrrrr                		.lword	(_cfg) + (00000005H)
00001FFC 0000803F                		.lword	3F800000H	; float 1
00002000 737973                  		.byte	"sys"
00002003 00                      		.byte	00H
00002004 67706C                  		.byte	"gpl"
00002007 000000                  		.byte	00H,00H,00H
0000200A 07                      		.byte	07H
0000200B 00                      		.byte	00H
0000200C rrrrrrrr                		.lword	_cm_print_gpl
00002010 rrrrrrrr                		.lword	_get_ui8
00002014 rrrrrrrr                		.lword	_set_012
00002018 rrrrrrrr                		.lword	(_cm) + (0000001DH)
0000201C 00000000                		.lword	00000000H
00002020 737973                  		.byte	"sys"
00002023 00                      		.byte	00H
00002024 67756E                  		.byte	"gun"
00002027 000000                  		.byte	00H,00H,00H
0000202A 07                      		.byte	07H
0000202B 00                      		.byte	00H
0000202C rrrrrrrr                		.lword	_cm_print_gun
00002030 rrrrrrrr                		.lword	_get_ui8
00002034 rrrrrrrr                		.lword	_set_01
00002038 rrrrrrrr                		.lword	(_cm) + (0000001EH)
0000203C 0000803F                		.lword	3F800000H	; float 1
00002040 737973                  		.byte	"sys"
00002043 00                      		.byte	00H
00002044 67636F                  		.byte	"gco"
00002047 000000                  		.byte	00H,00H,00H
0000204A 07                      		.byte	07H
0000204B 00                      		.byte	00H
0000204C rrrrrrrr                		.lword	_cm_print_gco
00002050 rrrrrrrr                		.lword	_get_ui8
00002054 rrrrrrrr                		.lword	_set_ui8
00002058 rrrrrrrr                		.lword	(_cm) + (0000001CH)
0000205C 0000803F                		.lword	3F800000H	; float 1
00002060 737973                  		.byte	"sys"
00002063 00                      		.byte	00H
00002064 677061                  		.byte	"gpa"
00002067 000000                  		.byte	00H,00H,00H
0000206A 07                      		.byte	07H
0000206B 00                      		.byte	00H
0000206C rrrrrrrr                		.lword	_cm_print_gpa
00002070 rrrrrrrr                		.lword	_get_ui8
00002074 rrrrrrrr                		.lword	_set_012
00002078 rrrrrrrr                		.lword	(_cm) + (0000001FH)
0000207C 00000040                		.lword	40000000H	; float 2
00002080 737973                  		.byte	"sys"
00002083 00                      		.byte	00H
00002084 676469                  		.byte	"gdi"
00002087 000000                  		.byte	00H,00H,00H
0000208A 07                      		.byte	07H
0000208B 00                      		.byte	00H
0000208C rrrrrrrr                		.lword	_cm_print_gdi
00002090 rrrrrrrr                		.lword	_get_ui8
00002094 rrrrrrrr                		.lword	_set_01
00002098 rrrrrrrr                		.lword	(_cm) + (00000020H)
0000209C 00000000                		.lword	00000000H
000020A0 00                      		.byte	0
000020A1 00                      		.byte	0
000020A2 00                      		.byte	0
000020A3 00                      		.byte	0
000020A4 6763                    		.byte	"gc"
000020A6 00000000                		.byte	00H,00H,00H,00H
000020AA 00                      		.byte	00H
000020AB 00                      		.byte	00H
000020AC rrrrrrrr                		.lword	_tx_print_nul
000020B0 rrrrrrrr                		.lword	_gc_get_gc
000020B4 rrrrrrrr                		.lword	_gc_run_gc
000020B8 rrrrrrrr                		.lword	(_cs) + 4
000020BC 00000000                		.lword	00000000H
000020C0 00                      		.byte	0
000020C1 00                      		.byte	0
000020C2 00                      		.byte	0
000020C3 00                      		.byte	0
000020C4 6D61                    		.byte	"ma"
000020C6 00000000                		.byte	00H,00H,00H,00H
000020CA 0B                      		.byte	0BH
000020CB 04                      		.byte	04H
000020CC rrrrrrrr                		.lword	_cm_print_ma
000020D0 rrrrrrrr                		.lword	_get_flt
000020D4 rrrrrrrr                		.lword	_set_flu
000020D8 rrrrrrrr                		.lword	(_cm) + 20
000020DC CDCCCC3D                		.lword	3DCCCCCDH	; float 0.1
000020E0 00                      		.byte	0
000020E1 00                      		.byte	0
000020E2 00                      		.byte	0
000020E3 00                      		.byte	0
000020E4 6664                    		.byte	"fd"
000020E6 00000000                		.byte	00H,00H,00H,00H
000020EA 03                      		.byte	03H
000020EB 00                      		.byte	00H
000020EC rrrrrrrr                		.lword	_tx_print_ui8
000020F0 rrrrrrrr                		.lword	_get_ui8
000020F4 rrrrrrrr                		.lword	_set_01
000020F8 rrrrrrrr                		.lword	(_js) + (00000001H)
000020FC 00000000                		.lword	00000000H
00002100 756461                  		.byte	"uda"
00002103 00                      		.byte	00H
00002104 75646130                		.byte	"uda0"
00002108 0000                    		.byte	00H,00H
0000210A 03                      		.byte	03H
0000210B 00                      		.byte	00H
0000210C rrrrrrrr                		.lword	_tx_print_int
00002110 rrrrrrrr                		.lword	_get_data
00002114 rrrrrrrr                		.lword	_set_data
00002118 rrrrrrrr                		.lword	(_cfg) + (00000008H)
0000211C 00000000                		.lword	00000000H
00002120 756461                  		.byte	"uda"
00002123 00                      		.byte	00H
00002124 75646131                		.byte	"uda1"
00002128 0000                    		.byte	00H,00H
0000212A 03                      		.byte	03H
0000212B 00                      		.byte	00H
0000212C rrrrrrrr                		.lword	_tx_print_int
00002130 rrrrrrrr                		.lword	_get_data
00002134 rrrrrrrr                		.lword	_set_data
00002138 rrrrrrrr                		.lword	(_cfg) + (0000000CH)
0000213C 00000000                		.lword	00000000H
00002140 756461                  		.byte	"uda"
00002143 00                      		.byte	00H
00002144 75646132                		.byte	"uda2"
00002148 0000                    		.byte	00H,00H
0000214A 03                      		.byte	03H
0000214B 00                      		.byte	00H
0000214C rrrrrrrr                		.lword	_tx_print_int
00002150 rrrrrrrr                		.lword	_get_data
00002154 rrrrrrrr                		.lword	_set_data
00002158 rrrrrrrr                		.lword	(_cfg) + (00000010H)
0000215C 00000000                		.lword	00000000H
00002160 756461                  		.byte	"uda"
00002163 00                      		.byte	00H
00002164 75646133                		.byte	"uda3"
00002168 0000                    		.byte	00H,00H
0000216A 03                      		.byte	03H
0000216B 00                      		.byte	00H
0000216C rrrrrrrr                		.lword	_tx_print_int
00002170 rrrrrrrr                		.lword	_get_data
00002174 rrrrrrrr                		.lword	_set_data
00002178 rrrrrrrr                		.lword	(_cfg) + (00000014H)
0000217C 00000000                		.lword	00000000H
00002180 756462                  		.byte	"udb"
00002183 00                      		.byte	00H
00002184 75646230                		.byte	"udb0"
00002188 0000                    		.byte	00H,00H
0000218A 03                      		.byte	03H
0000218B 00                      		.byte	00H
0000218C rrrrrrrr                		.lword	_tx_print_int
00002190 rrrrrrrr                		.lword	_get_data
00002194 rrrrrrrr                		.lword	_set_data
00002198 rrrrrrrr                		.lword	(_cfg) + (00000018H)
0000219C 00000000                		.lword	00000000H
000021A0 756462                  		.byte	"udb"
000021A3 00                      		.byte	00H
000021A4 75646231                		.byte	"udb1"
000021A8 0000                    		.byte	00H,00H
000021AA 03                      		.byte	03H
000021AB 00                      		.byte	00H
000021AC rrrrrrrr                		.lword	_tx_print_int
000021B0 rrrrrrrr                		.lword	_get_data
000021B4 rrrrrrrr                		.lword	_set_data
000021B8 rrrrrrrr                		.lword	(_cfg) + (0000001CH)
000021BC 00000000                		.lword	00000000H
000021C0 756462                  		.byte	"udb"
000021C3 00                      		.byte	00H
000021C4 75646232                		.byte	"udb2"
000021C8 0000                    		.byte	00H,00H
000021CA 03                      		.byte	03H
000021CB 00                      		.byte	00H
000021CC rrrrrrrr                		.lword	_tx_print_int
000021D0 rrrrrrrr                		.lword	_get_data
000021D4 rrrrrrrr                		.lword	_set_data
000021D8 rrrrrrrr                		.lword	(_cfg) + (00000020H)
000021DC 00000000                		.lword	00000000H
000021E0 756462                  		.byte	"udb"
000021E3 00                      		.byte	00H
000021E4 75646233                		.byte	"udb3"
000021E8 0000                    		.byte	00H,00H
000021EA 03                      		.byte	03H
000021EB 00                      		.byte	00H
000021EC rrrrrrrr                		.lword	_tx_print_int
000021F0 rrrrrrrr                		.lword	_get_data
000021F4 rrrrrrrr                		.lword	_set_data
000021F8 rrrrrrrr                		.lword	(_cfg) + (00000024H)
000021FC 00000000                		.lword	00000000H
00002200 756463                  		.byte	"udc"
00002203 00                      		.byte	00H
00002204 75646330                		.byte	"udc0"
00002208 0000                    		.byte	00H,00H
0000220A 03                      		.byte	03H
0000220B 00                      		.byte	00H
0000220C rrrrrrrr                		.lword	_tx_print_int
00002210 rrrrrrrr                		.lword	_get_data
00002214 rrrrrrrr                		.lword	_set_data
00002218 rrrrrrrr                		.lword	(_cfg) + (00000028H)
0000221C 00000000                		.lword	00000000H
00002220 756463                  		.byte	"udc"
00002223 00                      		.byte	00H
00002224 75646331                		.byte	"udc1"
00002228 0000                    		.byte	00H,00H
0000222A 03                      		.byte	03H
0000222B 00                      		.byte	00H
0000222C rrrrrrrr                		.lword	_tx_print_int
00002230 rrrrrrrr                		.lword	_get_data
00002234 rrrrrrrr                		.lword	_set_data
00002238 rrrrrrrr                		.lword	(_cfg) + (0000002CH)
0000223C 00000000                		.lword	00000000H
00002240 756463                  		.byte	"udc"
00002243 00                      		.byte	00H
00002244 75646332                		.byte	"udc2"
00002248 0000                    		.byte	00H,00H
0000224A 03                      		.byte	03H
0000224B 00                      		.byte	00H
0000224C rrrrrrrr                		.lword	_tx_print_int
00002250 rrrrrrrr                		.lword	_get_data
00002254 rrrrrrrr                		.lword	_set_data
00002258 rrrrrrrr                		.lword	(_cfg) + (00000030H)
0000225C 00000000                		.lword	00000000H
00002260 756463                  		.byte	"udc"
00002263 00                      		.byte	00H
00002264 75646333                		.byte	"udc3"
00002268 0000                    		.byte	00H,00H
0000226A 03                      		.byte	03H
0000226B 00                      		.byte	00H
0000226C rrrrrrrr                		.lword	_tx_print_int
00002270 rrrrrrrr                		.lword	_get_data
00002274 rrrrrrrr                		.lword	_set_data
00002278 rrrrrrrr                		.lword	(_cfg) + (00000034H)
0000227C 00000000                		.lword	00000000H
00002280 756464                  		.byte	"udd"
00002283 00                      		.byte	00H
00002284 75646430                		.byte	"udd0"
00002288 0000                    		.byte	00H,00H
0000228A 03                      		.byte	03H
0000228B 00                      		.byte	00H
0000228C rrrrrrrr                		.lword	_tx_print_int
00002290 rrrrrrrr                		.lword	_get_data
00002294 rrrrrrrr                		.lword	_set_data
00002298 rrrrrrrr                		.lword	(_cfg) + (00000038H)
0000229C 00000000                		.lword	00000000H
000022A0 756464                  		.byte	"udd"
000022A3 00                      		.byte	00H
000022A4 75646431                		.byte	"udd1"
000022A8 0000                    		.byte	00H,00H
000022AA 03                      		.byte	03H
000022AB 00                      		.byte	00H
000022AC rrrrrrrr                		.lword	_tx_print_int
000022B0 rrrrrrrr                		.lword	_get_data
000022B4 rrrrrrrr                		.lword	_set_data
000022B8 rrrrrrrr                		.lword	(_cfg) + (0000003CH)
000022BC 00000000                		.lword	00000000H
000022C0 756464                  		.byte	"udd"
000022C3 00                      		.byte	00H
000022C4 75646432                		.byte	"udd2"
000022C8 0000                    		.byte	00H,00H
000022CA 03                      		.byte	03H
000022CB 00                      		.byte	00H
000022CC rrrrrrrr                		.lword	_tx_print_int
000022D0 rrrrrrrr                		.lword	_get_data
000022D4 rrrrrrrr                		.lword	_set_data
000022D8 rrrrrrrr                		.lword	(_cfg) + (00000040H)
000022DC 00000000                		.lword	00000000H
000022E0 756464                  		.byte	"udd"
000022E3 00                      		.byte	00H
000022E4 75646433                		.byte	"udd3"
000022E8 0000                    		.byte	00H,00H
000022EA 03                      		.byte	03H
000022EB 00                      		.byte	00H
000022EC rrrrrrrr                		.lword	_tx_print_int
000022F0 rrrrrrrr                		.lword	_get_data
000022F4 rrrrrrrr                		.lword	_set_data
000022F8 rrrrrrrr                		.lword	(_cfg) + (00000044H)
000022FC 00000000                		.lword	00000000H
00002300 00                      		.byte	0
00002301 00                      		.byte	0
00002302 00                      		.byte	0
00002303 00                      		.byte	0
00002304 73653030                		.byte	"se00"
00002308 0000                    		.byte	00H,00H
0000230A 02                      		.byte	02H
0000230B 00                      		.byte	00H
0000230C rrrrrrrr                		.lword	_tx_print_nul
00002310 rrrrrrrr                		.lword	_get_int
00002314 rrrrrrrr                		.lword	_set_int
00002318 rrrrrrrr                		.lword	(_sr) + (00000012H)
0000231C 00000000                		.lword	00000000H
00002320 00                      		.byte	0
00002321 00                      		.byte	0
00002322 00                      		.byte	0
00002323 00                      		.byte	0
00002324 73653031                		.byte	"se01"
00002328 0000                    		.byte	00H,00H
0000232A 02                      		.byte	02H
0000232B 00                      		.byte	00H
0000232C rrrrrrrr                		.lword	_tx_print_nul
00002330 rrrrrrrr                		.lword	_get_int
00002334 rrrrrrrr                		.lword	_set_int
00002338 rrrrrrrr                		.lword	(_sr) + (00000014H)
0000233C 00000000                		.lword	00000000H
00002340 00                      		.byte	0
00002341 00                      		.byte	0
00002342 00                      		.byte	0
00002343 00                      		.byte	0
00002344 73653032                		.byte	"se02"
00002348 0000                    		.byte	00H,00H
0000234A 02                      		.byte	02H
0000234B 00                      		.byte	00H
0000234C rrrrrrrr                		.lword	_tx_print_nul
00002350 rrrrrrrr                		.lword	_get_int
00002354 rrrrrrrr                		.lword	_set_int
00002358 rrrrrrrr                		.lword	(_sr) + (00000016H)
0000235C 00000000                		.lword	00000000H
00002360 00                      		.byte	0
00002361 00                      		.byte	0
00002362 00                      		.byte	0
00002363 00                      		.byte	0
00002364 73653033                		.byte	"se03"
00002368 0000                    		.byte	00H,00H
0000236A 02                      		.byte	02H
0000236B 00                      		.byte	00H
0000236C rrrrrrrr                		.lword	_tx_print_nul
00002370 rrrrrrrr                		.lword	_get_int
00002374 rrrrrrrr                		.lword	_set_int
00002378 rrrrrrrr                		.lword	(_sr) + (00000018H)
0000237C 00000000                		.lword	00000000H
00002380 00                      		.byte	0
00002381 00                      		.byte	0
00002382 00                      		.byte	0
00002383 00                      		.byte	0
00002384 73653034                		.byte	"se04"
00002388 0000                    		.byte	00H,00H
0000238A 02                      		.byte	02H
0000238B 00                      		.byte	00H
0000238C rrrrrrrr                		.lword	_tx_print_nul
00002390 rrrrrrrr                		.lword	_get_int
00002394 rrrrrrrr                		.lword	_set_int
00002398 rrrrrrrr                		.lword	(_sr) + (0000001AH)
0000239C 00000000                		.lword	00000000H
000023A0 00                      		.byte	0
000023A1 00                      		.byte	0
000023A2 00                      		.byte	0
000023A3 00                      		.byte	0
000023A4 73653035                		.byte	"se05"
000023A8 0000                    		.byte	00H,00H
000023AA 02                      		.byte	02H
000023AB 00                      		.byte	00H
000023AC rrrrrrrr                		.lword	_tx_print_nul
000023B0 rrrrrrrr                		.lword	_get_int
000023B4 rrrrrrrr                		.lword	_set_int
000023B8 rrrrrrrr                		.lword	(_sr) + (0000001CH)
000023BC 00000000                		.lword	00000000H
000023C0 00                      		.byte	0
000023C1 00                      		.byte	0
000023C2 00                      		.byte	0
000023C3 00                      		.byte	0
000023C4 73653036                		.byte	"se06"
000023C8 0000                    		.byte	00H,00H
000023CA 02                      		.byte	02H
000023CB 00                      		.byte	00H
000023CC rrrrrrrr                		.lword	_tx_print_nul
000023D0 rrrrrrrr                		.lword	_get_int
000023D4 rrrrrrrr                		.lword	_set_int
000023D8 rrrrrrrr                		.lword	(_sr) + (0000001EH)
000023DC 00000000                		.lword	00000000H
000023E0 00                      		.byte	0
000023E1 00                      		.byte	0
000023E2 00                      		.byte	0
000023E3 00                      		.byte	0
000023E4 73653037                		.byte	"se07"
000023E8 0000                    		.byte	00H,00H
000023EA 02                      		.byte	02H
000023EB 00                      		.byte	00H
000023EC rrrrrrrr                		.lword	_tx_print_nul
000023F0 rrrrrrrr                		.lword	_get_int
000023F4 rrrrrrrr                		.lword	_set_int
000023F8 rrrrrrrr                		.lword	(_sr) + (00000020H)
000023FC 00000000                		.lword	00000000H
00002400 00                      		.byte	0
00002401 00                      		.byte	0
00002402 00                      		.byte	0
00002403 00                      		.byte	0
00002404 73653038                		.byte	"se08"
00002408 0000                    		.byte	00H,00H
0000240A 02                      		.byte	02H
0000240B 00                      		.byte	00H
0000240C rrrrrrrr                		.lword	_tx_print_nul
00002410 rrrrrrrr                		.lword	_get_int
00002414 rrrrrrrr                		.lword	_set_int
00002418 rrrrrrrr                		.lword	(_sr) + (00000022H)
0000241C 00000000                		.lword	00000000H
00002420 00                      		.byte	0
00002421 00                      		.byte	0
00002422 00                      		.byte	0
00002423 00                      		.byte	0
00002424 73653039                		.byte	"se09"
00002428 0000                    		.byte	00H,00H
0000242A 02                      		.byte	02H
0000242B 00                      		.byte	00H
0000242C rrrrrrrr                		.lword	_tx_print_nul
00002430 rrrrrrrr                		.lword	_get_int
00002434 rrrrrrrr                		.lword	_set_int
00002438 rrrrrrrr                		.lword	(_sr) + (00000024H)
0000243C 00000000                		.lword	00000000H
00002440 00                      		.byte	0
00002441 00                      		.byte	0
00002442 00                      		.byte	0
00002443 00                      		.byte	0
00002444 73653130                		.byte	"se10"
00002448 0000                    		.byte	00H,00H
0000244A 02                      		.byte	02H
0000244B 00                      		.byte	00H
0000244C rrrrrrrr                		.lword	_tx_print_nul
00002450 rrrrrrrr                		.lword	_get_int
00002454 rrrrrrrr                		.lword	_set_int
00002458 rrrrrrrr                		.lword	(_sr) + (00000026H)
0000245C 00000000                		.lword	00000000H
00002460 00                      		.byte	0
00002461 00                      		.byte	0
00002462 00                      		.byte	0
00002463 00                      		.byte	0
00002464 73653131                		.byte	"se11"
00002468 0000                    		.byte	00H,00H
0000246A 02                      		.byte	02H
0000246B 00                      		.byte	00H
0000246C rrrrrrrr                		.lword	_tx_print_nul
00002470 rrrrrrrr                		.lword	_get_int
00002474 rrrrrrrr                		.lword	_set_int
00002478 rrrrrrrr                		.lword	(_sr) + (00000028H)
0000247C 00000000                		.lword	00000000H
00002480 00                      		.byte	0
00002481 00                      		.byte	0
00002482 00                      		.byte	0
00002483 00                      		.byte	0
00002484 73653132                		.byte	"se12"
00002488 0000                    		.byte	00H,00H
0000248A 02                      		.byte	02H
0000248B 00                      		.byte	00H
0000248C rrrrrrrr                		.lword	_tx_print_nul
00002490 rrrrrrrr                		.lword	_get_int
00002494 rrrrrrrr                		.lword	_set_int
00002498 rrrrrrrr                		.lword	(_sr) + (0000002AH)
0000249C 00000000                		.lword	00000000H
000024A0 00                      		.byte	0
000024A1 00                      		.byte	0
000024A2 00                      		.byte	0
000024A3 00                      		.byte	0
000024A4 73653133                		.byte	"se13"
000024A8 0000                    		.byte	00H,00H
000024AA 02                      		.byte	02H
000024AB 00                      		.byte	00H
000024AC rrrrrrrr                		.lword	_tx_print_nul
000024B0 rrrrrrrr                		.lword	_get_int
000024B4 rrrrrrrr                		.lword	_set_int
000024B8 rrrrrrrr                		.lword	(_sr) + (0000002CH)
000024BC 00000000                		.lword	00000000H
000024C0 00                      		.byte	0
000024C1 00                      		.byte	0
000024C2 00                      		.byte	0
000024C3 00                      		.byte	0
000024C4 73653134                		.byte	"se14"
000024C8 0000                    		.byte	00H,00H
000024CA 02                      		.byte	02H
000024CB 00                      		.byte	00H
000024CC rrrrrrrr                		.lword	_tx_print_nul
000024D0 rrrrrrrr                		.lword	_get_int
000024D4 rrrrrrrr                		.lword	_set_int
000024D8 rrrrrrrr                		.lword	(_sr) + (0000002EH)
000024DC 00000000                		.lword	00000000H
000024E0 00                      		.byte	0
000024E1 00                      		.byte	0
000024E2 00                      		.byte	0
000024E3 00                      		.byte	0
000024E4 73653135                		.byte	"se15"
000024E8 0000                    		.byte	00H,00H
000024EA 02                      		.byte	02H
000024EB 00                      		.byte	00H
000024EC rrrrrrrr                		.lword	_tx_print_nul
000024F0 rrrrrrrr                		.lword	_get_int
000024F4 rrrrrrrr                		.lword	_set_int
000024F8 rrrrrrrr                		.lword	(_sr) + (00000030H)
000024FC 00000000                		.lword	00000000H
00002500 00                      		.byte	0
00002501 00                      		.byte	0
00002502 00                      		.byte	0
00002503 00                      		.byte	0
00002504 73653136                		.byte	"se16"
00002508 0000                    		.byte	00H,00H
0000250A 02                      		.byte	02H
0000250B 00                      		.byte	00H
0000250C rrrrrrrr                		.lword	_tx_print_nul
00002510 rrrrrrrr                		.lword	_get_int
00002514 rrrrrrrr                		.lword	_set_int
00002518 rrrrrrrr                		.lword	(_sr) + (00000032H)
0000251C 00000000                		.lword	00000000H
00002520 00                      		.byte	0
00002521 00                      		.byte	0
00002522 00                      		.byte	0
00002523 00                      		.byte	0
00002524 73653137                		.byte	"se17"
00002528 0000                    		.byte	00H,00H
0000252A 02                      		.byte	02H
0000252B 00                      		.byte	00H
0000252C rrrrrrrr                		.lword	_tx_print_nul
00002530 rrrrrrrr                		.lword	_get_int
00002534 rrrrrrrr                		.lword	_set_int
00002538 rrrrrrrr                		.lword	(_sr) + (00000034H)
0000253C 00000000                		.lword	00000000H
00002540 00                      		.byte	0
00002541 00                      		.byte	0
00002542 00                      		.byte	0
00002543 00                      		.byte	0
00002544 73653138                		.byte	"se18"
00002548 0000                    		.byte	00H,00H
0000254A 02                      		.byte	02H
0000254B 00                      		.byte	00H
0000254C rrrrrrrr                		.lword	_tx_print_nul
00002550 rrrrrrrr                		.lword	_get_int
00002554 rrrrrrrr                		.lword	_set_int
00002558 rrrrrrrr                		.lword	(_sr) + (00000036H)
0000255C 00000000                		.lword	00000000H
00002560 00                      		.byte	0
00002561 00                      		.byte	0
00002562 00                      		.byte	0
00002563 00                      		.byte	0
00002564 73653139                		.byte	"se19"
00002568 0000                    		.byte	00H,00H
0000256A 02                      		.byte	02H
0000256B 00                      		.byte	00H
0000256C rrrrrrrr                		.lword	_tx_print_nul
00002570 rrrrrrrr                		.lword	_get_int
00002574 rrrrrrrr                		.lword	_set_int
00002578 rrrrrrrr                		.lword	(_sr) + (00000038H)
0000257C 00000000                		.lword	00000000H
00002580 00                      		.byte	0
00002581 00                      		.byte	0
00002582 00                      		.byte	0
00002583 00                      		.byte	0
00002584 73653230                		.byte	"se20"
00002588 0000                    		.byte	00H,00H
0000258A 02                      		.byte	02H
0000258B 00                      		.byte	00H
0000258C rrrrrrrr                		.lword	_tx_print_nul
00002590 rrrrrrrr                		.lword	_get_int
00002594 rrrrrrrr                		.lword	_set_int
00002598 rrrrrrrr                		.lword	(_sr) + (0000003AH)
0000259C 00000000                		.lword	00000000H
000025A0 00                      		.byte	0
000025A1 00                      		.byte	0
000025A2 00                      		.byte	0
000025A3 00                      		.byte	0
000025A4 73653231                		.byte	"se21"
000025A8 0000                    		.byte	00H,00H
000025AA 02                      		.byte	02H
000025AB 00                      		.byte	00H
000025AC rrrrrrrr                		.lword	_tx_print_nul
000025B0 rrrrrrrr                		.lword	_get_int
000025B4 rrrrrrrr                		.lword	_set_int
000025B8 rrrrrrrr                		.lword	(_sr) + (0000003CH)
000025BC 00000000                		.lword	00000000H
000025C0 00                      		.byte	0
000025C1 00                      		.byte	0
000025C2 00                      		.byte	0
000025C3 00                      		.byte	0
000025C4 73653232                		.byte	"se22"
000025C8 0000                    		.byte	00H,00H
000025CA 02                      		.byte	02H
000025CB 00                      		.byte	00H
000025CC rrrrrrrr                		.lword	_tx_print_nul
000025D0 rrrrrrrr                		.lword	_get_int
000025D4 rrrrrrrr                		.lword	_set_int
000025D8 rrrrrrrr                		.lword	(_sr) + (0000003EH)
000025DC 00000000                		.lword	00000000H
000025E0 00                      		.byte	0
000025E1 00                      		.byte	0
000025E2 00                      		.byte	0
000025E3 00                      		.byte	0
000025E4 73653233                		.byte	"se23"
000025E8 0000                    		.byte	00H,00H
000025EA 02                      		.byte	02H
000025EB 00                      		.byte	00H
000025EC rrrrrrrr                		.lword	_tx_print_nul
000025F0 rrrrrrrr                		.lword	_get_int
000025F4 rrrrrrrr                		.lword	_set_int
000025F8 rrrrrrrr                		.lword	(_sr) + (00000040H)
000025FC 00000000                		.lword	00000000H
00002600 00                      		.byte	0
00002601 00                      		.byte	0
00002602 00                      		.byte	0
00002603 00                      		.byte	0
00002604 73653234                		.byte	"se24"
00002608 0000                    		.byte	00H,00H
0000260A 02                      		.byte	02H
0000260B 00                      		.byte	00H
0000260C rrrrrrrr                		.lword	_tx_print_nul
00002610 rrrrrrrr                		.lword	_get_int
00002614 rrrrrrrr                		.lword	_set_int
00002618 rrrrrrrr                		.lword	(_sr) + (00000042H)
0000261C 00000000                		.lword	00000000H
00002620 00                      		.byte	0
00002621 00                      		.byte	0
00002622 00                      		.byte	0
00002623 00                      		.byte	0
00002624 73653235                		.byte	"se25"
00002628 0000                    		.byte	00H,00H
0000262A 02                      		.byte	02H
0000262B 00                      		.byte	00H
0000262C rrrrrrrr                		.lword	_tx_print_nul
00002630 rrrrrrrr                		.lword	_get_int
00002634 rrrrrrrr                		.lword	_set_int
00002638 rrrrrrrr                		.lword	(_sr) + (00000044H)
0000263C 00000000                		.lword	00000000H
00002640 00                      		.byte	0
00002641 00                      		.byte	0
00002642 00                      		.byte	0
00002643 00                      		.byte	0
00002644 73653236                		.byte	"se26"
00002648 0000                    		.byte	00H,00H
0000264A 02                      		.byte	02H
0000264B 00                      		.byte	00H
0000264C rrrrrrrr                		.lword	_tx_print_nul
00002650 rrrrrrrr                		.lword	_get_int
00002654 rrrrrrrr                		.lword	_set_int
00002658 rrrrrrrr                		.lword	(_sr) + (00000046H)
0000265C 00000000                		.lword	00000000H
00002660 00                      		.byte	0
00002661 00                      		.byte	0
00002662 00                      		.byte	0
00002663 00                      		.byte	0
00002664 73653237                		.byte	"se27"
00002668 0000                    		.byte	00H,00H
0000266A 02                      		.byte	02H
0000266B 00                      		.byte	00H
0000266C rrrrrrrr                		.lword	_tx_print_nul
00002670 rrrrrrrr                		.lword	_get_int
00002674 rrrrrrrr                		.lword	_set_int
00002678 rrrrrrrr                		.lword	(_sr) + (00000048H)
0000267C 00000000                		.lword	00000000H
00002680 00                      		.byte	0
00002681 00                      		.byte	0
00002682 00                      		.byte	0
00002683 00                      		.byte	0
00002684 73653238                		.byte	"se28"
00002688 0000                    		.byte	00H,00H
0000268A 02                      		.byte	02H
0000268B 00                      		.byte	00H
0000268C rrrrrrrr                		.lword	_tx_print_nul
00002690 rrrrrrrr                		.lword	_get_int
00002694 rrrrrrrr                		.lword	_set_int
00002698 rrrrrrrr                		.lword	(_sr) + (0000004AH)
0000269C 00000000                		.lword	00000000H
000026A0 00                      		.byte	0
000026A1 00                      		.byte	0
000026A2 00                      		.byte	0
000026A3 00                      		.byte	0
000026A4 73653239                		.byte	"se29"
000026A8 0000                    		.byte	00H,00H
000026AA 02                      		.byte	02H
000026AB 00                      		.byte	00H
000026AC rrrrrrrr                		.lword	_tx_print_nul
000026B0 rrrrrrrr                		.lword	_get_int
000026B4 rrrrrrrr                		.lword	_set_int
000026B8 rrrrrrrr                		.lword	(_sr) + (0000004CH)
000026BC 00000000                		.lword	00000000H
000026C0 00                      		.byte	0
000026C1 00                      		.byte	0
000026C2 00                      		.byte	0
000026C3 00                      		.byte	0
000026C4 737973                  		.byte	"sys"
000026C7 000000                  		.byte	00H,00H,00H
000026CA 00                      		.byte	00H
000026CB 00                      		.byte	00H
000026CC rrrrrrrr                		.lword	_tx_print_nul
000026D0 rrrrrrrr                		.lword	_get_grp
000026D4 rrrrrrrr                		.lword	_set_grp
000026D8 rrrrrrrr                		.lword	(_cs) + 4
000026DC 00000000                		.lword	00000000H
000026E0 00                      		.byte	0
000026E1 00                      		.byte	0
000026E2 00                      		.byte	0
000026E3 00                      		.byte	0
000026E4 7031                    		.byte	"p1"
000026E6 00000000                		.byte	00H,00H,00H,00H
000026EA 00                      		.byte	00H
000026EB 00                      		.byte	00H
000026EC rrrrrrrr                		.lword	_tx_print_nul
000026F0 rrrrrrrr                		.lword	_get_grp
000026F4 rrrrrrrr                		.lword	_set_grp
000026F8 rrrrrrrr                		.lword	(_cs) + 4
000026FC 00000000                		.lword	00000000H
00002700 00                      		.byte	0
00002701 00                      		.byte	0
00002702 00                      		.byte	0
00002703 00                      		.byte	0
00002704 31                      		.byte	"1"
00002705 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000270A 00                      		.byte	00H
0000270B 00                      		.byte	00H
0000270C rrrrrrrr                		.lword	_tx_print_nul
00002710 rrrrrrrr                		.lword	_get_grp
00002714 rrrrrrrr                		.lword	_set_grp
00002718 rrrrrrrr                		.lword	(_cs) + 4
0000271C 00000000                		.lword	00000000H
00002720 00                      		.byte	0
00002721 00                      		.byte	0
00002722 00                      		.byte	0
00002723 00                      		.byte	0
00002724 32                      		.byte	"2"
00002725 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000272A 00                      		.byte	00H
0000272B 00                      		.byte	00H
0000272C rrrrrrrr                		.lword	_tx_print_nul
00002730 rrrrrrrr                		.lword	_get_grp
00002734 rrrrrrrr                		.lword	_set_grp
00002738 rrrrrrrr                		.lword	(_cs) + 4
0000273C 00000000                		.lword	00000000H
00002740 00                      		.byte	0
00002741 00                      		.byte	0
00002742 00                      		.byte	0
00002743 00                      		.byte	0
00002744 33                      		.byte	"3"
00002745 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000274A 00                      		.byte	00H
0000274B 00                      		.byte	00H
0000274C rrrrrrrr                		.lword	_tx_print_nul
00002750 rrrrrrrr                		.lword	_get_grp
00002754 rrrrrrrr                		.lword	_set_grp
00002758 rrrrrrrr                		.lword	(_cs) + 4
0000275C 00000000                		.lword	00000000H
00002760 00                      		.byte	0
00002761 00                      		.byte	0
00002762 00                      		.byte	0
00002763 00                      		.byte	0
00002764 34                      		.byte	"4"
00002765 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000276A 00                      		.byte	00H
0000276B 00                      		.byte	00H
0000276C rrrrrrrr                		.lword	_tx_print_nul
00002770 rrrrrrrr                		.lword	_get_grp
00002774 rrrrrrrr                		.lword	_set_grp
00002778 rrrrrrrr                		.lword	(_cs) + 4
0000277C 00000000                		.lword	00000000H
00002780 00                      		.byte	0
00002781 00                      		.byte	0
00002782 00                      		.byte	0
00002783 00                      		.byte	0
00002784 78                      		.byte	"x"
00002785 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000278A 00                      		.byte	00H
0000278B 00                      		.byte	00H
0000278C rrrrrrrr                		.lword	_tx_print_nul
00002790 rrrrrrrr                		.lword	_get_grp
00002794 rrrrrrrr                		.lword	_set_grp
00002798 rrrrrrrr                		.lword	(_cs) + 4
0000279C 00000000                		.lword	00000000H
000027A0 00                      		.byte	0
000027A1 00                      		.byte	0
000027A2 00                      		.byte	0
000027A3 00                      		.byte	0
000027A4 79                      		.byte	"y"
000027A5 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
000027AA 00                      		.byte	00H
000027AB 00                      		.byte	00H
000027AC rrrrrrrr                		.lword	_tx_print_nul
000027B0 rrrrrrrr                		.lword	_get_grp
000027B4 rrrrrrrr                		.lword	_set_grp
000027B8 rrrrrrrr                		.lword	(_cs) + 4
000027BC 00000000                		.lword	00000000H
000027C0 00                      		.byte	0
000027C1 00                      		.byte	0
000027C2 00                      		.byte	0
000027C3 00                      		.byte	0
000027C4 7A                      		.byte	"z"
000027C5 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
000027CA 00                      		.byte	00H
000027CB 00                      		.byte	00H
000027CC rrrrrrrr                		.lword	_tx_print_nul
000027D0 rrrrrrrr                		.lword	_get_grp
000027D4 rrrrrrrr                		.lword	_set_grp
000027D8 rrrrrrrr                		.lword	(_cs) + 4
000027DC 00000000                		.lword	00000000H
000027E0 00                      		.byte	0
000027E1 00                      		.byte	0
000027E2 00                      		.byte	0
000027E3 00                      		.byte	0
000027E4 61                      		.byte	"a"
000027E5 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
000027EA 00                      		.byte	00H
000027EB 00                      		.byte	00H
000027EC rrrrrrrr                		.lword	_tx_print_nul
000027F0 rrrrrrrr                		.lword	_get_grp
000027F4 rrrrrrrr                		.lword	_set_grp
000027F8 rrrrrrrr                		.lword	(_cs) + 4
000027FC 00000000                		.lword	00000000H
00002800 00                      		.byte	0
00002801 00                      		.byte	0
00002802 00                      		.byte	0
00002803 00                      		.byte	0
00002804 62                      		.byte	"b"
00002805 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000280A 00                      		.byte	00H
0000280B 00                      		.byte	00H
0000280C rrrrrrrr                		.lword	_tx_print_nul
00002810 rrrrrrrr                		.lword	_get_grp
00002814 rrrrrrrr                		.lword	_set_grp
00002818 rrrrrrrr                		.lword	(_cs) + 4
0000281C 00000000                		.lword	00000000H
00002820 00                      		.byte	0
00002821 00                      		.byte	0
00002822 00                      		.byte	0
00002823 00                      		.byte	0
00002824 63                      		.byte	"c"
00002825 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000282A 00                      		.byte	00H
0000282B 00                      		.byte	00H
0000282C rrrrrrrr                		.lword	_tx_print_nul
00002830 rrrrrrrr                		.lword	_get_grp
00002834 rrrrrrrr                		.lword	_set_grp
00002838 rrrrrrrr                		.lword	(_cs) + 4
0000283C 00000000                		.lword	00000000H
00002840 00                      		.byte	0
00002841 00                      		.byte	0
00002842 00                      		.byte	0
00002843 00                      		.byte	0
00002844 673534                  		.byte	"g54"
00002847 000000                  		.byte	00H,00H,00H
0000284A 00                      		.byte	00H
0000284B 00                      		.byte	00H
0000284C rrrrrrrr                		.lword	_tx_print_nul
00002850 rrrrrrrr                		.lword	_get_grp
00002854 rrrrrrrr                		.lword	_set_grp
00002858 rrrrrrrr                		.lword	(_cs) + 4
0000285C 00000000                		.lword	00000000H
00002860 00                      		.byte	0
00002861 00                      		.byte	0
00002862 00                      		.byte	0
00002863 00                      		.byte	0
00002864 673535                  		.byte	"g55"
00002867 000000                  		.byte	00H,00H,00H
0000286A 00                      		.byte	00H
0000286B 00                      		.byte	00H
0000286C rrrrrrrr                		.lword	_tx_print_nul
00002870 rrrrrrrr                		.lword	_get_grp
00002874 rrrrrrrr                		.lword	_set_grp
00002878 rrrrrrrr                		.lword	(_cs) + 4
0000287C 00000000                		.lword	00000000H
00002880 00                      		.byte	0
00002881 00                      		.byte	0
00002882 00                      		.byte	0
00002883 00                      		.byte	0
00002884 673536                  		.byte	"g56"
00002887 000000                  		.byte	00H,00H,00H
0000288A 00                      		.byte	00H
0000288B 00                      		.byte	00H
0000288C rrrrrrrr                		.lword	_tx_print_nul
00002890 rrrrrrrr                		.lword	_get_grp
00002894 rrrrrrrr                		.lword	_set_grp
00002898 rrrrrrrr                		.lword	(_cs) + 4
0000289C 00000000                		.lword	00000000H
000028A0 00                      		.byte	0
000028A1 00                      		.byte	0
000028A2 00                      		.byte	0
000028A3 00                      		.byte	0
000028A4 673537                  		.byte	"g57"
000028A7 000000                  		.byte	00H,00H,00H
000028AA 00                      		.byte	00H
000028AB 00                      		.byte	00H
000028AC rrrrrrrr                		.lword	_tx_print_nul
000028B0 rrrrrrrr                		.lword	_get_grp
000028B4 rrrrrrrr                		.lword	_set_grp
000028B8 rrrrrrrr                		.lword	(_cs) + 4
000028BC 00000000                		.lword	00000000H
000028C0 00                      		.byte	0
000028C1 00                      		.byte	0
000028C2 00                      		.byte	0
000028C3 00                      		.byte	0
000028C4 673538                  		.byte	"g58"
000028C7 000000                  		.byte	00H,00H,00H
000028CA 00                      		.byte	00H
000028CB 00                      		.byte	00H
000028CC rrrrrrrr                		.lword	_tx_print_nul
000028D0 rrrrrrrr                		.lword	_get_grp
000028D4 rrrrrrrr                		.lword	_set_grp
000028D8 rrrrrrrr                		.lword	(_cs) + 4
000028DC 00000000                		.lword	00000000H
000028E0 00                      		.byte	0
000028E1 00                      		.byte	0
000028E2 00                      		.byte	0
000028E3 00                      		.byte	0
000028E4 673539                  		.byte	"g59"
000028E7 000000                  		.byte	00H,00H,00H
000028EA 00                      		.byte	00H
000028EB 00                      		.byte	00H
000028EC rrrrrrrr                		.lword	_tx_print_nul
000028F0 rrrrrrrr                		.lword	_get_grp
000028F4 rrrrrrrr                		.lword	_set_grp
000028F8 rrrrrrrr                		.lword	(_cs) + 4
000028FC 00000000                		.lword	00000000H
00002900 00                      		.byte	0
00002901 00                      		.byte	0
00002902 00                      		.byte	0
00002903 00                      		.byte	0
00002904 673932                  		.byte	"g92"
00002907 000000                  		.byte	00H,00H,00H
0000290A 00                      		.byte	00H
0000290B 00                      		.byte	00H
0000290C rrrrrrrr                		.lword	_tx_print_nul
00002910 rrrrrrrr                		.lword	_get_grp
00002914 rrrrrrrr                		.lword	_set_grp
00002918 rrrrrrrr                		.lword	(_cs) + 4
0000291C 00000000                		.lword	00000000H
00002920 00                      		.byte	0
00002921 00                      		.byte	0
00002922 00                      		.byte	0
00002923 00                      		.byte	0
00002924 673238                  		.byte	"g28"
00002927 000000                  		.byte	00H,00H,00H
0000292A 00                      		.byte	00H
0000292B 00                      		.byte	00H
0000292C rrrrrrrr                		.lword	_tx_print_nul
00002930 rrrrrrrr                		.lword	_get_grp
00002934 rrrrrrrr                		.lword	_set_grp
00002938 rrrrrrrr                		.lword	(_cs) + 4
0000293C 00000000                		.lword	00000000H
00002940 00                      		.byte	0
00002941 00                      		.byte	0
00002942 00                      		.byte	0
00002943 00                      		.byte	0
00002944 673330                  		.byte	"g30"
00002947 000000                  		.byte	00H,00H,00H
0000294A 00                      		.byte	00H
0000294B 00                      		.byte	00H
0000294C rrrrrrrr                		.lword	_tx_print_nul
00002950 rrrrrrrr                		.lword	_get_grp
00002954 rrrrrrrr                		.lword	_set_grp
00002958 rrrrrrrr                		.lword	(_cs) + 4
0000295C 00000000                		.lword	00000000H
00002960 00                      		.byte	0
00002961 00                      		.byte	0
00002962 00                      		.byte	0
00002963 00                      		.byte	0
00002964 6D706F                  		.byte	"mpo"
00002967 000000                  		.byte	00H,00H,00H
0000296A 00                      		.byte	00H
0000296B 00                      		.byte	00H
0000296C rrrrrrrr                		.lword	_tx_print_nul
00002970 rrrrrrrr                		.lword	_get_grp
00002974 rrrrrrrr                		.lword	_set_grp
00002978 rrrrrrrr                		.lword	(_cs) + 4
0000297C 00000000                		.lword	00000000H
00002980 00                      		.byte	0
00002981 00                      		.byte	0
00002982 00                      		.byte	0
00002983 00                      		.byte	0
00002984 706F73                  		.byte	"pos"
00002987 000000                  		.byte	00H,00H,00H
0000298A 00                      		.byte	00H
0000298B 00                      		.byte	00H
0000298C rrrrrrrr                		.lword	_tx_print_nul
00002990 rrrrrrrr                		.lword	_get_grp
00002994 rrrrrrrr                		.lword	_set_grp
00002998 rrrrrrrr                		.lword	(_cs) + 4
0000299C 00000000                		.lword	00000000H
000029A0 00                      		.byte	0
000029A1 00                      		.byte	0
000029A2 00                      		.byte	0
000029A3 00                      		.byte	0
000029A4 6F6673                  		.byte	"ofs"
000029A7 000000                  		.byte	00H,00H,00H
000029AA 00                      		.byte	00H
000029AB 00                      		.byte	00H
000029AC rrrrrrrr                		.lword	_tx_print_nul
000029B0 rrrrrrrr                		.lword	_get_grp
000029B4 rrrrrrrr                		.lword	_set_grp
000029B8 rrrrrrrr                		.lword	(_cs) + 4
000029BC 00000000                		.lword	00000000H
000029C0 00                      		.byte	0
000029C1 00                      		.byte	0
000029C2 00                      		.byte	0
000029C3 00                      		.byte	0
000029C4 686F6D                  		.byte	"hom"
000029C7 000000                  		.byte	00H,00H,00H
000029CA 00                      		.byte	00H
000029CB 00                      		.byte	00H
000029CC rrrrrrrr                		.lword	_tx_print_nul
000029D0 rrrrrrrr                		.lword	_get_grp
000029D4 rrrrrrrr                		.lword	_set_grp
000029D8 rrrrrrrr                		.lword	(_cs) + 4
000029DC 00000000                		.lword	00000000H
000029E0 00                      		.byte	0
000029E1 00                      		.byte	0
000029E2 00                      		.byte	0
000029E3 00                      		.byte	0
000029E4 707262                  		.byte	"prb"
000029E7 000000                  		.byte	00H,00H,00H
000029EA 00                      		.byte	00H
000029EB 00                      		.byte	00H
000029EC rrrrrrrr                		.lword	_tx_print_nul
000029F0 rrrrrrrr                		.lword	_get_grp
000029F4 rrrrrrrr                		.lword	_set_grp
000029F8 rrrrrrrr                		.lword	(_cs) + 4
000029FC 00000000                		.lword	00000000H
00002A00 00                      		.byte	0
00002A01 00                      		.byte	0
00002A02 00                      		.byte	0
00002A03 00                      		.byte	0
00002A04 707772                  		.byte	"pwr"
00002A07 000000                  		.byte	00H,00H,00H
00002A0A 00                      		.byte	00H
00002A0B 00                      		.byte	00H
00002A0C rrrrrrrr                		.lword	_tx_print_nul
00002A10 rrrrrrrr                		.lword	_get_grp
00002A14 rrrrrrrr                		.lword	_set_grp
00002A18 rrrrrrrr                		.lword	(_cs) + 4
00002A1C 00000000                		.lword	00000000H
00002A20 00                      		.byte	0
00002A21 00                      		.byte	0
00002A22 00                      		.byte	0
00002A23 00                      		.byte	0
00002A24 6A6F67                  		.byte	"jog"
00002A27 000000                  		.byte	00H,00H,00H
00002A2A 00                      		.byte	00H
00002A2B 00                      		.byte	00H
00002A2C rrrrrrrr                		.lword	_tx_print_nul
00002A30 rrrrrrrr                		.lword	_get_grp
00002A34 rrrrrrrr                		.lword	_set_grp
00002A38 rrrrrrrr                		.lword	(_cs) + 4
00002A3C 00000000                		.lword	00000000H
00002A40 00                      		.byte	0
00002A41 00                      		.byte	0
00002A42 00                      		.byte	0
00002A43 00                      		.byte	0
00002A44 6A6964                  		.byte	"jid"
00002A47 000000                  		.byte	00H,00H,00H
00002A4A 00                      		.byte	00H
00002A4B 00                      		.byte	00H
00002A4C rrrrrrrr                		.lword	_tx_print_nul
00002A50 rrrrrrrr                		.lword	_get_grp
00002A54 rrrrrrrr                		.lword	_set_grp
00002A58 rrrrrrrr                		.lword	(_cs) + 4
00002A5C 00000000                		.lword	00000000H
00002A60 00                      		.byte	0
00002A61 00                      		.byte	0
00002A62 00                      		.byte	0
00002A63 00                      		.byte	0
00002A64 756461                  		.byte	"uda"
00002A67 000000                  		.byte	00H,00H,00H
00002A6A 00                      		.byte	00H
00002A6B 00                      		.byte	00H
00002A6C rrrrrrrr                		.lword	_tx_print_nul
00002A70 rrrrrrrr                		.lword	_get_grp
00002A74 rrrrrrrr                		.lword	_set_grp
00002A78 rrrrrrrr                		.lword	(_cs) + 4
00002A7C 00000000                		.lword	00000000H
00002A80 00                      		.byte	0
00002A81 00                      		.byte	0
00002A82 00                      		.byte	0
00002A83 00                      		.byte	0
00002A84 756462                  		.byte	"udb"
00002A87 000000                  		.byte	00H,00H,00H
00002A8A 00                      		.byte	00H
00002A8B 00                      		.byte	00H
00002A8C rrrrrrrr                		.lword	_tx_print_nul
00002A90 rrrrrrrr                		.lword	_get_grp
00002A94 rrrrrrrr                		.lword	_set_grp
00002A98 rrrrrrrr                		.lword	(_cs) + 4
00002A9C 00000000                		.lword	00000000H
00002AA0 00                      		.byte	0
00002AA1 00                      		.byte	0
00002AA2 00                      		.byte	0
00002AA3 00                      		.byte	0
00002AA4 756463                  		.byte	"udc"
00002AA7 000000                  		.byte	00H,00H,00H
00002AAA 00                      		.byte	00H
00002AAB 00                      		.byte	00H
00002AAC rrrrrrrr                		.lword	_tx_print_nul
00002AB0 rrrrrrrr                		.lword	_get_grp
00002AB4 rrrrrrrr                		.lword	_set_grp
00002AB8 rrrrrrrr                		.lword	(_cs) + 4
00002ABC 00000000                		.lword	00000000H
00002AC0 00                      		.byte	0
00002AC1 00                      		.byte	0
00002AC2 00                      		.byte	0
00002AC3 00                      		.byte	0
00002AC4 756464                  		.byte	"udd"
00002AC7 000000                  		.byte	00H,00H,00H
00002ACA 00                      		.byte	00H
00002ACB 00                      		.byte	00H
00002ACC rrrrrrrr                		.lword	_tx_print_nul
00002AD0 rrrrrrrr                		.lword	_get_grp
00002AD4 rrrrrrrr                		.lword	_set_grp
00002AD8 rrrrrrrr                		.lword	(_cs) + 4
00002ADC 00000000                		.lword	00000000H
00002AE0 00                      		.byte	0
00002AE1 00                      		.byte	0
00002AE2 00                      		.byte	0
00002AE3 00                      		.byte	0
00002AE4 6D                      		.byte	"m"
00002AE5 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00002AEA 00                      		.byte	00H
00002AEB 00                      		.byte	00H
00002AEC rrrrrrrr                		.lword	_tx_print_nul
00002AF0 rrrrrrrr                		.lword	__$_do_motors
00002AF4 rrrrrrrr                		.lword	_set_nul
00002AF8 rrrrrrrr                		.lword	(_cs) + 4
00002AFC 00000000                		.lword	00000000H
00002B00 00                      		.byte	0
00002B01 00                      		.byte	0
00002B02 00                      		.byte	0
00002B03 00                      		.byte	0
00002B04 71                      		.byte	"q"
00002B05 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00002B0A 00                      		.byte	00H
00002B0B 00                      		.byte	00H
00002B0C rrrrrrrr                		.lword	_tx_print_nul
00002B10 rrrrrrrr                		.lword	__$_do_axes
00002B14 rrrrrrrr                		.lword	_set_nul
00002B18 rrrrrrrr                		.lword	(_cs) + 4
00002B1C 00000000                		.lword	00000000H
00002B20 00                      		.byte	0
00002B21 00                      		.byte	0
00002B22 00                      		.byte	0
00002B23 00                      		.byte	0
00002B24 6F                      		.byte	"o"
00002B25 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00002B2A 00                      		.byte	00H
00002B2B 00                      		.byte	00H
00002B2C rrrrrrrr                		.lword	_tx_print_nul
00002B30 rrrrrrrr                		.lword	__$_do_offsets
00002B34 rrrrrrrr                		.lword	_set_nul
00002B38 rrrrrrrr                		.lword	(_cs) + 4
00002B3C 00000000                		.lword	00000000H
00002B40 00                      		.byte	0
00002B41 00                      		.byte	0
00002B42 00                      		.byte	0
00002B43 00                      		.byte	0
00002B44 24                      		.byte	"$"
00002B45 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00002B4A 00                      		.byte	00H
00002B4B 00                      		.byte	00H
00002B4C rrrrrrrr                		.lword	_tx_print_nul
00002B50 rrrrrrrr                		.lword	__$_do_all
00002B54 rrrrrrrr                		.lword	_set_nul
00002B58 rrrrrrrr                		.lword	(_cs) + 4
00002B5C 00000000                		.lword	00000000H
                                 		.SECTION	C_1,ROMDATA
00000000                         __$fmt_ec:
00000000 5B65635D                		.byte	"[ec]  expand LF to CRLF on TX%6d [0=off,1=on]"
         20206578                
         70616E64                
         204C4620                
         746F2043                
         524C4620                
         6F6E2054                
         58253664                
         205B303D                
         6F66662C                
         313D6F6E                
         5D                      
0000002D 0A00                    		.byte	0AH,00H
0000002F                         __$fmt_ee:
0000002F 5B65655D                		.byte	"[ee]  enable echo%18d [0=off,1=on]"
         2020656E                
         61626C65                
         20656368                
         6F253138                
         64205B30                
         3D6F6666                
         2C313D6F                
         6E5D                    
00000051 0A00                    		.byte	0AH,00H
00000053                         __$fmt_ex:
00000053 5B65785D                		.byte	"[ex]  enable flow control%10d [0=off,1=XON/XOFF, 2=RTS/CTS]"
         2020656E                
         61626C65                
         20666C6F                
         7720636F                
         6E74726F                
         6C253130                
         64205B30                
         3D6F6666                
         2C313D58                
         4F4E2F58                
         4F46462C                
         20323D52                
         54532F43                
         54535D                  
0000008E 0A00                    		.byte	0AH,00H
00000090                         __$fmt_baud:
00000090 5B626175                		.byte	"[baud] USB baud rate%15d [1=9600,2=19200,3=38400,4=57600,5=115200,6=230400]"
         645D2055                
         53422062                
         61756420                
         72617465                
         25313564                
         205B313D                
         39363030                
         2C323D31                
         39323030                
         2C333D33                
         38343030                
         2C343D35                
         37363030                
         2C353D31                
         31353230                
         302C363D                
         32333034                
         30305D                  
000000DB 0A00                    		.byte	0AH,00H
000000DD                         __$fmt_net:
000000DD 5B6E6574                		.byte	"[net] network mode%17d [0=master]"
         5D206E65                
         74776F72                
         6B206D6F                
         64652531                
         3764205B                
         303D6D61                
         73746572                
         5D                      
000000FE 0A00                    		.byte	0AH,00H
00000100                         __$fmt_rx:
00000100 72783A25                		.byte	"rx:%d"
         64                      
00000105 0A00                    		.byte	0AH,00H
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 00                      		.byte	0
00000001                         _L11:
00000001 31                      		.byte	"1"
00000002 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00000007 32                      		.byte	"2"
00000008 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000000D 33                      		.byte	"3"
0000000E 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00000013 34                      		.byte	"4"
00000014 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00000019 00                      		.byte	0
0000001A 00                      		.byte	0
0000001B 00                      		.byte	0
0000001C 00                      		.byte	0
0000001D 00                      		.byte	0
0000001E 00                      		.byte	0
0000001F                         _L12:
0000001F 78                      		.byte	"x"
00000020 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00000025 79                      		.byte	"y"
00000026 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000002B 7A                      		.byte	"z"
0000002C 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00000031 61                      		.byte	"a"
00000032 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00000037 62                      		.byte	"b"
00000038 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
0000003D 63                      		.byte	"c"
0000003E 00000000                		.byte	00H,00H,00H,00H,00H
         00                      
00000043 00                      		.byte	0
00000044 00                      		.byte	0
00000045 00                      		.byte	0
00000046 00                      		.byte	0
00000047 00                      		.byte	0
00000048 00                      		.byte	0
00000049                         _L13:
00000049 673534                  		.byte	"g54"
0000004C 000000                  		.byte	00H,00H,00H
0000004F 673535                  		.byte	"g55"
00000052 000000                  		.byte	00H,00H,00H
00000055 673536                  		.byte	"g56"
00000058 000000                  		.byte	00H,00H,00H
0000005B 673537                  		.byte	"g57"
0000005E 000000                  		.byte	00H,00H,00H
00000061 673538                  		.byte	"g58"
00000064 000000                  		.byte	00H,00H,00H
00000067 673539                  		.byte	"g59"
0000006A 000000                  		.byte	00H,00H,00H
0000006D 673932                  		.byte	"g92"
00000070 000000                  		.byte	00H,00H,00H
00000073 673238                  		.byte	"g28"
00000076 000000                  		.byte	00H,00H,00H
00000079 673330                  		.byte	"g30"
0000007C 000000                  		.byte	00H,00H,00H
0000007F 00                      		.byte	0
00000080 00                      		.byte	0
00000081 00                      		.byte	0
00000082 00                      		.byte	0
00000083 00                      		.byte	0
00000084 00                      		.byte	0
00000085                         _L14:
00000085 737973                  		.byte	"sys"
00000088 00                      		.byte	00H
00000089                         _L15:
00000089 7031                    		.byte	"p1"
0000008B 00                      		.byte	00H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _cfg:
00000000(0000004CH)              		.blkl	19
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     05871   LINES

Section List

Attr         Size               Name
CODE     0000000993(000003E1H)  P
ROMDATA  0000011104(00002B60H)  C
ROMDATA  0000000263(00000107H)  C_1
ROMDATA  0000000140(0000008CH)  L
DATA     0000000076(0000004CH)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\config_app.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\config_app.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\src\cnc\config_app.obj
