* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Mon Mar 20 17:54:15 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  20-Mar-2017 17:54:15
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=u8g_delay.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=u8g_delay.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;u8g_delay.c
                                 
                                 		.glb	_u8g_Delay
                                 		.glb	_R_BSP_SoftwareDelay
                                 		.glb	_u8g_MicroDelay
                                 		.glb	_u8g_10MicroDelay
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _u8g_Delay:
                                 		.STACK	_u8g_Delay=8
                                 ;       1 /*
                                 ;       2 
                                 ;       3   u8g_delay.c
                                 ;       4 
                                 ;       5   Universal 8bit Graphics Library
                                 ;       6   
                                 ;       7   Copyright (c) 2011, olikraus@gmail.com
                                 ;       8   All rights reserved.
                                 ;       9 
                                 ;      10   Redistribution and use in source and binary forms, with or without modification, 
                                 ;      11   are permitted provided that the following conditions are met:
                                 ;      12 
                                 ;      13   * Redistributions of source code must retain the above copyright notice, this list 
                                 ;      14     of conditions and the following disclaimer.
                                 ;      15     
                                 ;      16   * Redistributions in binary form must reproduce the above copyright notice, this 
                                 ;      17     list of conditions and the following disclaimer in the documentation and/or other 
                                 ;      18     materials provided with the distribution.
                                 ;      19 
                                 ;      20   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
                                 ;      21   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
                                 ;      22   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
                                 ;      23   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
                                 ;      24   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
                                 ;      25   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
                                 ;      26   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
                                 ;      27   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
                                 ;      28   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
                                 ;      29   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
                                 ;      30   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
                                 ;      31   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
                                 ;      32   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
                                 ;      33 
                                 ;      34 
                                 ;      35   void u8g_Delay(uint16_t val)		Delay by "val" milliseconds
                                 ;      36   void u8g_MicroDelay(void)		Delay be one microsecond
                                 ;      37   void u8g_10MicroDelay(void)	Delay by 10 microseconds
                                 ;      38 
                                 ;      39   
                                 ;      40 */
                                 ;      41 
                                 ;      42 
                                 ;      43 #include "u8g.h"
                                 ;      44 
                                 ;      45 /*==== Part 1: Derive suitable delay procedure ====*/
                                 ;      46 
                                 ;      47 #if defined(ARDUINO)
                                 ;      48 
                                 ;      49 #  if ARDUINO < 100 
                                 ;      50 #    include <WProgram.h> 
                                 ;      51 #  else 
                                 ;      52 #    include <Arduino.h> 
                                 ;      53 #  endif
                                 ;      54 
                                 ;      55 #  if defined(__AVR__)
                                 ;      56 #    define USE_AVR_DELAY
                                 ;      57 #  elif defined(__PIC32MX)
                                 ;      58 #    define USE_PIC32_DELAY
                                 ;      59 #  elif defined(__arm__)		/* Arduino Due & Teensy */
                                 ;      60 #    define USE_ARDUINO_DELAY
                                 ;      61 #  else
                                 ;      62 #    define USE_ARDUINO_DELAY
                                 ;      63 #  endif
                                 ;      64 #elif defined(_GNU_SOURCE)
                                 ;      65 #  define USE_LINUX_DELAY
                                 ;      66 #elif defined(__MSP430__)
                                 ;      67 #  define USE_MSP430_DELAY
                                 ;      68 #elif defined(U8G_RASPBERRY_PI)
                                 ;      69 #  define USE_RASPBERRYPI_DELAY
                                 ;      70 #elif defined(__AVR__)
                                 ;      71 #  define USE_AVR_DELAY
                                 ;      72 #elif defined(__18CXX)
                                 ;      73 #  define USE_PIC18_DELAY
                                 ;      74 #elif defined(U8G_CYPRESS_PSOC5)
                                 ;      75 #define USE_PSOC5_DELAY
                                 ;      76 #elif defined(__RX)
                                 ;      77 #define USE_RX_DELAY
                                 ;      78 #elif defined(__arm__)
                                 ;      79 /* do not define anything, all procedures are expected to be defined outside u8glib */
                                 ;      80 
                                 ;      81 /*
                                 ;      82 void u8g_Delay(uint16_t val);
                                 ;      83 void u8g_MicroDelay(void);
                                 ;      84 void u8g_10MicroDelay(void);
                                 ;      85 */
                                 ;      86 
                                 ;      87 #else
                                 ;      88 #  define USE_DUMMY_DELAY
                                 ;      89 #endif
                                 ;      90 
                                 ;      91 
                                 ;      92 
                                 ;      93 /*==== Part 2: Definition of the delay procedures ====*/
                                 ;      94 
                                 ;      95 /*== Raspberry Pi Delay ==*/
                                 ;      96 #if defined (USE_RASPBERRYPI_DELAY)
                                 ;      97 #include <wiringPi.h>
                                 ;      98 //#include "/usr/local/include/wiringPi.h"
                                 ;      99 void u8g_Delay(uint16_t val) {
                                 ;     100    //delay(val);
                                 ;     101    //usleep((uint32_t)val*(uint32_t)1000);
                                 ;     102    delayMicroseconds((uint32_t)val*(uint32_t)1000);
                                 ;     103 }
                                 ;     104 void u8g_MicroDelay(void)
                                 ;     105 {
                                 ;     106    usleep(1);
                                 ;     107 }
                                 ;     108 void u8g_10MicroDelay(void)
                                 ;     109 {
                                 ;     110    usleep(10);
                                 ;     111 }
                                 ;     112 #endif
                                 ;     113 
                                 ;     114 #if defined(USE_LINUX_DELAY)
                                 ;     115 void u8g_Delay(uint16_t val) {
                                 ;     116    //delay(val);
                                 ;     117    usleep((uint32_t)val*(uint32_t)1000);
                                 ;     118 }
                                 ;     119 void u8g_MicroDelay(void)
                                 ;     120 {
                                 ;     121    usleep(1);
                                 ;     122 }
                                 ;     123 void u8g_10MicroDelay(void)
                                 ;     124 {
                                 ;     125    usleep(10);
                                 ;     126 }
                                 ;     127 #endif
                                 ;     128 
                                 ;     129 
                                 ;     130 
                                 ;     131 /*== AVR Delay ==*/
                                 ;     132 
                                 ;     133 #if defined(USE_AVR_DELAY)
                                 ;     134 #include <avr/interrupt.h>
                                 ;     135 #include <avr/io.h>
                                 ;     136 #include <util/delay.h>
                                 ;     137 
                                 ;     138 /*
                                 ;     139   Delay by the provided number of milliseconds.
                                 ;     140   Thus, a 16 bit value will allow a delay of 0..65 seconds
                                 ;     141   Makes use of the _delay_loop_2
                                 ;     142   
                                 ;     143   _delay_loop_2 will do a delay of n * 4 prozessor cycles.
                                 ;     144   with f = F_CPU cycles per second,
                                 ;     145   n = f / (1000 * 4 )
                                 ;     146   with f = 16000000 the result is 4000
                                 ;     147   with f = 1000000 the result is 250
                                 ;     148   
                                 ;     149   the millisec loop, gcc requires the following overhead:
                                 ;     150   - movev 1
                                 ;     151   - subwi 2x2
                                 ;     152   - bne i 2
                                 ;     153   ==> 7 cycles
                                 ;     154   ==> must be devided by 4, rounded up 7/4 = 2
                                 ;     155 */
                                 ;     156 void u8g_Delay(uint16_t val)
                                 ;     157 {
                                 ;     158   /* old version did a call to the arduino lib: delay(val); */
                                 ;     159   while( val != 0 )
                                 ;     160   {
                                 ;     161     _delay_loop_2( (F_CPU / 4000 ) -2);
                                 ;     162     val--;
                                 ;     163   }
                                 ;     164 }
                                 ;     165 
                                 ;     166 /* delay by one micro second */
                                 ;     167 void u8g_MicroDelay(void)
                                 ;     168 {
                                 ;     169 #if (F_CPU / 4000000 ) > 0 
                                 ;     170   _delay_loop_2( (F_CPU / 4000000 ) );
                                 ;     171 #endif
                                 ;     172 }
                                 ;     173 
                                 ;     174 /* delay by 10 micro seconds */
                                 ;     175 void u8g_10MicroDelay(void)
                                 ;     176 {
                                 ;     177 #if (F_CPU / 400000 ) > 0 
                                 ;     178   _delay_loop_2( (F_CPU / 400000 ) );
                                 ;     179 #endif
                                 ;     180 }
                                 ;     181 
                                 ;     182 #endif 
                                 ;     183 
                                 ;     184 
                                 ;     185 /*== Delay for PIC18 (not tested) ==*/
                                 ;     186 
                                 ;     187 #if defined(USE_PIC18_DELAY)
                                 ;     188 #include <delays.h>
                                 ;     189 #define GetSystemClock()		(64000000ul)      // Hz
                                 ;     190 #define GetInstructionClock()	(GetSystemClock()/4)
                                 ;     191 
                                 ;     192 void u8g_Delay(uint16_t val)
                                 ;     193 {/*
                                 ;     194 	unsigned int _iTemp = (val);
                                 ;     195 	while(_iTemp--)		
                                 ;     196 		Delay1KTCYx((GetInstructionClock()+999999)/1000000);
                                 ;     197 		*/
                                 ;     198 }
                                 ;     199 void u8g_MicroDelay(void)
                                 ;     200 {
                                 ;     201   /* not implemented */
                                 ;     202 }
                                 ;     203 void u8g_10MicroDelay(void)
                                 ;     204 {
                                 ;     205   /* not implemented */
                                 ;     206 }
                                 ;     207 #endif
                                 ;     208 
                                 ;     209 
                                 ;     210 /*== Arduino Delay ==*/
                                 ;     211 #if defined(USE_ARDUINO_DELAY)
                                 ;     212 void u8g_Delay(uint16_t val)
                                 ;     213 {
                                 ;     214 #if defined(__arm__)
                                 ;     215 	delayMicroseconds((uint32_t)val*(uint32_t)1000);
                                 ;     216 #else
                                 ;     217 	delay(val);
                                 ;     218 #endif
                                 ;     219 }
                                 ;     220 void u8g_MicroDelay(void)
                                 ;     221 {
                                 ;     222 	delayMicroseconds(1);
                                 ;     223 }
                                 ;     224 void u8g_10MicroDelay(void)
                                 ;     225 {
                                 ;     226 	delayMicroseconds(10);
                                 ;     227 }
                                 ;     228 #endif
                                 ;     229 
                                 ;     230 #if defined(USE_PIC32_DELAY)
                                 ;     231 /* 
                                 ;     232   Assume chipkit here with F_CPU correctly defined
                                 ;     233   The problem was, that u8g_Delay() is called within the constructor.
                                 ;     234   It seems that the chipkit is not fully setup at this time, so a
                                 ;     235   call to delay() will not work. So here is my own implementation.
                                 ;     236 
                                 ;     237 */
                                 ;     238 #define CPU_COUNTS_PER_SECOND (F_CPU/2UL)
                                 ;     239 #define TICKS_PER_MILLISECOND  (CPU_COUNTS_PER_SECOND/1000UL)
                                 ;     240 #include "plib.h"
                                 ;     241 void u8g_Delay(uint16_t val)
                                 ;     242 {
                                 ;     243 	uint32_t d;
                                 ;     244 	uint32_t s;
                                 ;     245 	d = val;
                                 ;     246 	d *= TICKS_PER_MILLISECOND;
                                 ;     247 	s = ReadCoreTimer();
                                 ;     248 	while ( (uint32_t)(ReadCoreTimer() - s) < d )
                                 ;     249 		;
                                 ;     250 } 
                                 ;     251 
                                 ;     252 void u8g_MicroDelay(void)
                                 ;     253 {
                                 ;     254 	uint32_t d;
                                 ;     255 	uint32_t s;
                                 ;     256 	d = TICKS_PER_MILLISECOND/1000;
                                 ;     257 	s = ReadCoreTimer();
                                 ;     258 	while ( (uint32_t)(ReadCoreTimer() - s) < d )
                                 ;     259 		;
                                 ;     260 } 
                                 ;     261 
                                 ;     262 void u8g_10MicroDelay(void)
                                 ;     263 {
                                 ;     264 	uint32_t d;
                                 ;     265 	uint32_t s;
                                 ;     266 	d = TICKS_PER_MILLISECOND/100;
                                 ;     267 	s = ReadCoreTimer();
                                 ;     268 	while ( (uint32_t)(ReadCoreTimer() - s) < d )
                                 ;     269 		;
                                 ;     270 } 
                                 ;     271 
                                 ;     272 #endif
                                 ;     273 
                                 ;     274 #if defined(USE_MSP430_DELAY)
                                 ;     275 #include <msp430.h>
                                 ;     276 
                                 ;     277 #ifndef F_CPU
                                 ;     278 #define F_CPU 1000000UL
                                 ;     279 #endif
                                 ;     280 
                                 ;     281 
                                 ;     282 void u8g_Delay(uint16_t val)
                                 ;     283 {
                                 ;     284   int t;
                                 ;     285   for (t=0; t < val; t++)
                                 ;     286   {
                                 ;     287     __delay_cycles(F_CPU/1000UL);
                                 ;     288   }
                                 ;     289 }
                                 ;     290 void u8g_MicroDelay(void)
                                 ;     291 {
                                 ;     292   __delay_cycles(F_CPU/1000000UL);
                                 ;     293 }
                                 ;     294 
                                 ;     295 void u8g_10MicroDelay(void)
                                 ;     296 {
                                 ;     297   __delay_cycles(F_CPU/100000UL);
                                 ;     298 }
                                 ;     299 #endif
                                 ;     300 #if defined USE_PSOC5_DELAY
                                 ;     301   #include <project.h>
                                 ;     302   void u8g_Delay(uint16_t val)  {CyDelay(val);};
                                 ;     303   void u8g_MicroDelay(void)     {CyDelay(1);};
                                 ;     304   void u8g_10MicroDelay(void)   {CyDelay(10);};  
                                 ;     305 #endif
                                 ;     306 
                                 ;     307 #if defined USE_RX_DELAY
                                 ;     308   #include "platform.h"
                                 ;     309   void u8g_Delay(uint16_t val)  {R_BSP_SoftwareDelay(1,BSP_DELAY_MILLISECS);};
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_delay.c",309
00000000 6040                    		SUB #04H, R0
00000002 9009                    		MOV.W R1, 02H[R0]
00000004 FB2AE803                		MOV.L #000003E8H, R2
00000008 6611                    		MOV.L #00000001H, R1
0000000A 05rrrrrr             A  		BSR _R_BSP_SoftwareDelay
0000000E 6701                    		RTSD #04H
00000010                         _u8g_MicroDelay:
                                 		.STACK	_u8g_MicroDelay=4
                                 ;     310   void u8g_MicroDelay(void)     {R_BSP_SoftwareDelay(1,BSP_DELAY_MICROSECS);};
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_delay.c",310
00000010 FB2E40420F              		MOV.L #000F4240H, R2
00000015 6611                    		MOV.L #00000001H, R1
00000017 05rrrrrr             A  		BSR _R_BSP_SoftwareDelay
0000001B 02                      		RTS
0000001C                         _u8g_10MicroDelay:
                                 		.STACK	_u8g_10MicroDelay=4
                                 ;     311   void u8g_10MicroDelay(void)   {R_BSP_SoftwareDelay(10,BSP_DELAY_MICROSECS);};
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_delay.c",311
0000001C FB2E40420F              		MOV.L #000F4240H, R2
00000021 66A1                    		MOV.L #0000000AH, R1
00000023 05rrrrrr             A  		BSR _R_BSP_SoftwareDelay
00000027 02                      		RTS
                                 ;     312 #endif
                                 ;     313 
                                 ;     314 
                                 ;     315 /*== Any other systems: Dummy Delay ==*/
                                 ;     316 #if defined(USE_DUMMY_DELAY)
                                 ;     317 void u8g_Delay(uint16_t val)
                                 ;     318 {
                                 ;     319 	/* do not know how to delay... */
                                 ;     320 }
                                 ;     321 void u8g_MicroDelay(void)
                                 ;     322 {
                                 ;     323 }
                                 ;     324 void u8g_10MicroDelay(void)
                                 ;     325 {
                                 ;     326 }
                                 ;     327 #endif
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00381   LINES

Section List

Attr         Size               Name
CODE     0000000040(00000028H)  P

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx4DB7\$ccrx\u8g_delay.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\u8g_delay.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\src\Display\u8g_delay.obj
