* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Mon Mar 20 17:12:18 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  20-Mar-2017 17:12:17
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=r_bsp_common.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=r_bsp_common.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;r_bsp_common.c
                                 
                                 		.glb	_R_BSP_GetVersion
                                 		.glb	_R_BSP_SoftwareDelay
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _R_BSP_GetVersion:
                                 		.STACK	_R_BSP_GetVersion=8
                                 ;       1 /***********************************************************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No
                                 ;       4 * other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
                                 ;       5 * applicable laws, including copyright laws.
                                 ;       6 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
                                 ;       7 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY,
                                 ;       8 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM
                                 ;       9 * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
                                 ;      10 * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS
                                 ;      11 * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      12 * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of
                                 ;      13 * this software. By using this software, you agree to the additional terms and conditions found by accessing the
                                 ;      14 * following link:
                                 ;      15 * http://www.renesas.com/disclaimer
                                 ;      16 *
                                 ;      17 * Copyright (C) 2013 Renesas Electronics Corporation. All rights reserved.
                                 ;      18 ***********************************************************************************************************************/
                                 ;      19 /***********************************************************************************************************************
                                 ;      20 * File Name    : r_bsp_common.c
                                 ;      21 * Description  : Implements functions that apply to all r_bsp boards and MCUs.
                                 ;      22 ***********************************************************************************************************************/
                                 ;      23 /**********************************************************************************************************************
                                 ;      24 * History : DD.MM.YYYY Version  Description
                                 ;      25 *         : 06.05.2013 1.00     First Release
                                 ;      26 *         * 26.03.2014 1.10     Added R_BSP_SoftwareDelay() function
                                 ;      27 *         : 03.09.2014 1.20     Corrected R_BSP_SoftwareDelay() timing when using an RX64M
                                 ;      28 ***********************************************************************************************************************/
                                 ;      29 
                                 ;      30 /***********************************************************************************************************************
                                 ;      31 Includes   <System Includes> , "Project Includes"
                                 ;      32 ***********************************************************************************************************************/
                                 ;      33 /* Get information about current board and MCU. */
                                 ;      34 #include "platform.h"
                                 ;      35 
                                 ;      36 /***********************************************************************************************************************
                                 ;      37 Macro definitions
                                 ;      38 ***********************************************************************************************************************/
                                 ;      39 #define OVERHEAD_LOOP_COUNT        4	  // overhead of 20 cycles or 4 loops to call/return from delayWait() function.
                                 ;      40 #define CPU_CYCLES_PER_LOOP        5	  // known number (5) of CPU cycles required to execute the delayWait() loop
                                 ;      41 #define CPU_CYCLES_PER_LOOP_RX64M  4      // known number (4) of CPU cycles required to execute the delayWait() loop on
                                 ;      42                                           // an RX64M.
                                 ;      43 #define CGC_LOCO				   0      // SCKCR3 register setting for LOCO
                                 ;      44 /***********************************************************************************************************************
                                 ;      45 Typedef definitions
                                 ;      46 ***********************************************************************************************************************/
                                 ;      47 
                                 ;      48 /***********************************************************************************************************************
                                 ;      49 Exported global variables (to be accessed by other files)
                                 ;      50 ***********************************************************************************************************************/
                                 ;      51 
                                 ;      52 /***********************************************************************************************************************
                                 ;      53 Private global variables and functions
                                 ;      54 ***********************************************************************************************************************/
                                 ;      55 
                                 ;      56 /***********************************************************************************************************************
                                 ;      57 * Function Name: R_BSP_GetVersion
                                 ;      58 * Description  : Returns the current version of this module. The version number is encoded where the top 2 bytes are the
                                 ;      59 *                major version number and the bottom 2 bytes are the minor version number. For example, Version 4.25
                                 ;      60 *                would be returned as 0x00040019.
                                 ;      61 * Arguments    : none
                                 ;      62 * Return Value : Version of this module.
                                 ;      63 ***********************************************************************************************************************/
                                 ;      64 #pragma inline(R_BSP_GetVersion)
                                 ;      65 uint32_t R_BSP_GetVersion (void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",65
00000000 6040                    		SUB #04H, R0
                                 ;      66 {
                                 ;      67     /* These version macros are defined in platform.h. */
                                 ;      68     return ((((uint32_t)R_BSP_VERSION_MAJOR) << 16) | (uint32_t)R_BSP_VERSION_MINOR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",68
00000002 F80E500002              		MOV.L #00020050H, [R0]
00000007 FB1E500002              		MOV.L #00020050H, R1
0000000C                         L11:	; entry.split
                                 ;      69 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",69
0000000C 6701                    		RTSD #04H
0000000E                         _R_BSP_SoftwareDelay:
                                 		.STACK	_R_BSP_SoftwareDelay=48
                                 ;      70 
                                 ;      71 
                                 ;      72 /***********************************************************************************************************************
                                 ;      73 * Function Name: delayWait
                                 ;      74 * Description  : This asm loop executes a known number (5) of CPU cycles. If a value of '4' is passed
                                 ;      75 *                in as an argument, then this function would consume 20 CPU cycles before returning.
                                 ;      76 * Arguments    : loop_cnt - A single 32-bit value is provided as the number of loops to execute.
                                 ;      77 *              :
                                 ;      78 * Return Value : None
                                 ;      79 ***********************************************************************************************************************/
                                 ;      80 #pragma inline_asm delayWait
                                 ;      81 static void delayWait (unsigned long loop_cnt)
                                 ;      82 {
                                 ;      83     BRA ?+
                                 ;      84     NOP
                                 ;      85     ?:
                                 ;      86     NOP
                                 ;      87     SUB #01H, R1
                                 ;      88     BNE ?-
                                 ;      89 }
                                 ;      90 
                                 ;      91 /***********************************************************************************************************************
                                 ;      92 * Function Name: R_BSP_SoftwareDelay
                                 ;      93 * Description  : Delay the specified duration in units and return.
                                 ;      94 * Arguments    : uint32_t count  - the number of 'units' to delay
                                 ;      95 *              : bsp_delay_units_t units - the 'base' for the units specified. Valid values are:
                                 ;      96 *                BSP_DELAY_MICROSECS,  BSP_DELAY_MILLISECS, BSP_DELAY_SECS.
                                 ;      97 *                Accuracy is very good at millisecond and second level, less so at microsecond level simply due to the
                                 ;      98 *                overhead associated with implementing the call.
                                 ;      99 *                Note that there is an additional overhead of 20 cycles for the actual delayWait() function call and
                                 ;     100 *                return.
                                 ;     101 *
                                 ;     102 * Return Value : true if delay executed.
                                 ;     103 *                false if delay/units combination resulted in overflow/underflow
                                 ;     104 ***********************************************************************************************************************/
                                 ;     105 bool R_BSP_SoftwareDelay(uint32_t delay, bsp_delay_units_t units)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",105
0000000E 7100D4                  		ADD #0FFFFFFD4H, R0
00000011 A281                    		MOV.L R1, 28H[R0]
00000013 A20A                    		MOV.L R2, 24H[R0]
                                 ;     106 {
                                 ;     107     uint64_t loop_cnt;
                                 ;     108     uint64_t subValue = OVERHEAD_LOOP_COUNT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",108
00000015 3E0500                  		MOV.L #00000000H, 14H[R0]
00000018 3E0404                  		MOV.L #00000004H, 10H[R0]
0000001B                         L13:	; entry.split
                                 ;     109     uint64_t iclkRate = BSP_ICLK_HZ;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",109
0000001B 3E0700                  		MOV.L #00000000H, 1CH[R0]
0000001E F9020600D8B805          		MOV.L #05B8D800H, 18H[R0]
00000025                         L14:	; entry.split1
00000025 FBEE260008              		MOV.L #00080026H, R14
                                 ;     110 
                                 ;     111     // It would be nice if we could always look at BSP_ICLK_HZ to determine our iclk rate, that defines what the
                                 ;     112     // user has configured for the clock rate. However this function is also called from clock_source_select()
                                 ;     113     // as part of the reset startup. At that point the MCU is not yet running at the user configured
                                 ;     114     // clock rate, it is running off the LOCO. If the SCKCR3 register indicates that we are running
                                 ;     115     // off the LOCO we will use BSP_LOCO_HZ as the value for the Iclock rate. Otherwise we will use
                                 ;     116     // BSP_ICLK_HZ. Additionally not All MCU's call R_BSP_SoftwareDelay() as part of their startup clock
                                 ;     117     // setup. Specifically the BSP_MCU_RX62_ALL and BSP_MCU_RX61_ALL parts. For those parts we therefore know
                                 ;     118     // that using BSP_ICLK_HZ is valid.
                                 ;     119 #if (!defined(BSP_MCU_RX62_ALL) && !defined(BSP_MCU_RX61_ALL))
                                 ;     120     if (SYSTEM.SCKCR3.BIT.CKSEL == CGC_LOCO)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",120
0000002A DCEE                    		MOV.W [R14], R14
0000002C 688E                    		SHLR #08H, R14
0000002E FD74CE07                		TST #07H, R14
00000032 18                   S  		BNE L16
00000033                         L15:	; bb6
                                 ;     121     {
                                 ;     122     	iclkRate = BSP_LOCO_HZ;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",122
00000033 3E0700                  		MOV.L #00000000H, 1CH[R0]
00000036 F90E0648E801            		MOV.L #0001E848H, 18H[R0]
0000003C                         L16:	; bb13
                                 ;     123     }
                                 ;     124 #endif
                                 ;     125 
                                 ;     126 #ifndef BSP_MCU_RX64M
                                 ;     127     // Calculate the number of loops, accounting for the overhead of 20 cycles (4 loops at 5 cycles/loop)
                                 ;     128     loop_cnt = (((uint64_t)delay * iclkRate) / (CPU_CYCLES_PER_LOOP * units)) - subValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",128
0000003C AA82                    		MOV.L 28H[R0], R2
0000003E EF24                    		MOV.L R2, R4
00000040 06A1070406              		EMULU 18H[R0].L, R4
00000045 068D0207                		MUL 1CH[R0].L, R2
00000049 4B52                    		ADD R5, R2
0000004B AA0B                    		MOV.L 24H[R0], R3
0000004D 6353                    		MUL #05H, R3
0000004F FDBF3E                  		SHAR #1FH, R3, R14
00000052 EF41                    		MOV.L R4, R1
00000054 EFE4                    		MOV.L R14, R4
00000056 05rrrrrr             A  		BSR __COM_DIV64u
0000005A 06810104                		SUB 10H[R0].L, R1
0000005E 06A1000205              		SBB 14H[R0].L, R2
00000063 A08A                    		MOV.L R2, 0CH[R0]
00000065 A081                    		MOV.L R1, 08H[R0]
00000067                         L17:	; bb13.split
                                 ;     129 #else
                                 ;     130     // Calculate the number of loops, accounting for the overhead of 20 cycles (4 loops at 5 cycles/loop)
                                 ;     131     loop_cnt = (((uint64_t)delay * iclkRate) / (CPU_CYCLES_PER_LOOP_RX64M * units)) - subValue;
                                 ;     132 #endif
                                 ;     133 
                                 ;     134 #ifdef BSP_CFG_PARAM_CHECKING_ENABLE
                                 ;     135     // Make sure the request is valid and did not result in an overflow
                                 ;     136     if ((loop_cnt > 0xFFFFFFFF) || (loop_cnt == 0) || ((units != BSP_DELAY_MICROSECS) && (units != BSP_DELAY_MILLISECS) && (units != BSP_DELAY_SECS)))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",136
00000067 A889                    		MOV.L 0CH[R0], R1
00000069 6101                    		CMP #00H, R1
0000006B 21rr                    		BNE L20
0000006D 08                   S  		BRA L19
0000006E                         L18:	; bb25
                                 ;     137             return(false);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",137
0000006E 3C0700                  		MOV.B #00H, 07H[R0]
00000071 2Err                 B  		BRA L37
00000073                         L19:	; bb30
00000073 A881                    		MOV.L 08H[R0], R1
00000075 06950103                		OR 0CH[R0].L, R1
00000079 6101                    		CMP #00H, R1
0000007B 18                   S  		BNE L21
0000007C                         L20:	; bb34
0000007C F80601                  		MOV.L #00000001H, [R0]
0000007F 08                   S  		BRA L22
00000080                         L21:	; bb35
00000080 F80600                  		MOV.L #00000000H, [R0]
00000083                         L22:	; bb36
00000083 EC01                    		MOV.L [R0], R1
00000085 6101                    		CMP #00H, R1
00000087 21rr                    		BNE L32
00000089                         L23:	; bb40
00000089 AA09                    		MOV.L 24H[R0], R1
0000008B 770140420F              		CMP #000F4240H, R1
00000090 20rr                    		BEQ L26
00000092                         L24:	; bb44
00000092 AA09                    		MOV.L 24H[R0], R1
00000094 7601E803                		CMP #03E8H, R1
00000098 10                   S  		BEQ L26
00000099                         L25:	; bb48
00000099 F80601                  		MOV.L #00000001H, [R0]
0000009C 08                   S  		BRA L27
0000009D                         L26:	; bb49
0000009D F80600                  		MOV.L #00000000H, [R0]
000000A0                         L27:	; bb50
000000A0 EC01                    		MOV.L [R0], R1
000000A2 6101                    		CMP #00H, R1
000000A4 10                   S  		BEQ L30
000000A5                         L28:	; bb54
000000A5 AA09                    		MOV.L 24H[R0], R1
000000A7 6111                    		CMP #01H, R1
000000A9 10                   S  		BEQ L30
000000AA                         L29:	; bb58
000000AA F80601                  		MOV.L #00000001H, [R0]
000000AD 08                   S  		BRA L31
000000AE                         L30:	; bb59
000000AE F80600                  		MOV.L #00000000H, [R0]
000000B1                         L31:	; bb60
000000B1 EC01                    		MOV.L [R0], R1
000000B3 6101                    		CMP #00H, R1
000000B5 10                   S  		BEQ L33
000000B6                         L32:	; bb64
000000B6 F80601                  		MOV.L #00000001H, [R0]
000000B9 08                   S  		BRA L34
000000BA                         L33:	; bb65
000000BA F80600                  		MOV.L #00000000H, [R0]
000000BD                         L34:	; bb66
000000BD EC01                    		MOV.L [R0], R1
000000BF 6101                    		CMP #00H, R1
000000C1 21rr                    		BNE L18
000000C3                         L35:	; bb71
                                 ;     138 #endif
                                 ;     139     delayWait((uint32_t)loop_cnt);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",139
000000C3 A881                    		MOV.L 08H[R0], R1
                                 		._LINE_TOP  inline_asm
000000C5 2Err                 B      BRA ..tl0001
000000C7 03                          NOP
000000C8                             ..tl0001:
000000C8 03                          NOP
000000C9 6011                        SUB #01H, R1
000000CB 21rr                        BNE ..tl0001
                                 		._LINE_END  inline_asm
000000CD                         L36:	; bb71.split
                                 ;     140 
                                 ;     141     return(true);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",141
000000CD 3C0701                  		MOV.B #01H, 07H[R0]
000000D0                         L37:	; bb75
000000D0 C5000723                		MOV.B 07H[R0], 23H[R0]
                                 ;     142 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_bsp\mcu\all\r_bsp_common.c",142
000000D4 590123                  		MOVU.B 23H[R0], R1
000000D7 670B                    		RTSD #2CH
                                 ;     143 
                                 ;     144 
                                 ;     145 
                                 		.glb	__COM_DIV64u
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00308   LINES

Section List

Attr         Size               Name
CODE     0000000217(000000D9H)  P

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\r_bsp_common.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\r_bsp_common.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\r_bsp\mcu\all\r_bsp_common.obj
