* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Mon Mar 20 17:54:37 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  20-Mar-2017 17:54:37
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=r_s12ad_rx.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=r_s12ad_rx.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;r_s12ad_rx.c
                                 
                                 		.glb	_g_dcb
                                 		.glb	_dreg_ptrs
                                 		.glb	_R_ADC_Open
                                 		.glb	_adc_open
                                 		.glb	_R_ADC_Control
                                 		.glb	_adc_control
                                 		.glb	_adc_enable_s12adi0
                                 		.glb	_R_ADC_Read
                                 		.glb	_R_ADC_ReadAll
                                 		.glb	_R_ADC_Close
                                 		.glb	_R_BSP_RegisterProtectDisable
                                 		.glb	_R_BSP_RegisterProtectEnable
                                 		.glb	_R_ADC_GetVersion
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _R_ADC_Open:
                                 		.STACK	_R_ADC_Open=20
                                 ;       1 /***********************************************************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No 
                                 ;       4 * other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all 
                                 ;       5 * applicable laws, including copyright laws. 
                                 ;       6 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
                                 ;       7 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, 
                                 ;       8 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM 
                                 ;       9 * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES 
                                 ;      10 * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS 
                                 ;      11 * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      12 * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of 
                                 ;      13 * this software. By using this software, you agree to the additional terms and conditions found by accessing the 
                                 ;      14 * following link:
                                 ;      15 * http://www.renesas.com/disclaimer 
                                 ;      16 *
                                 ;      17 * Copyright (C) 2014 Renesas Electronics Corporation. All rights reserved.
                                 ;      18 ***********************************************************************************************************************/
                                 ;      19 /***********************************************************************************************************************
                                 ;      20 * File Name    : r_s12ad_rx.c
                                 ;      21 * Description  : Primary source code for 12-bit A/D Converter driver.
                                 ;      22 ***********************************************************************************************************************/
                                 ;      23 /**********************************************************************************************************************
                                 ;      24 * History : DD.MM.YYYY Version Description           
                                 ;      25 *           22.07.2013 1.00    Initial Release.
                                 ;      26 *           21.04.2014 1.20    Updated for RX210 advanced features; RX110/63x support.
                                 ;      27 ***********************************************************************************************************************/
                                 ;      28 
                                 ;      29 /***********************************************************************************************************************
                                 ;      30 Includes   <System Includes> , "Project Includes"
                                 ;      31 ***********************************************************************************************************************/
                                 ;      32 /* Includes board and MCU related header files. */
                                 ;      33 #include "platform.h"
                                 ;      34 /* Public interface header file for this package. */
                                 ;      35 #include "r_s12ad_rx_if.h"
                                 ;      36 /* Configuration for this package. */
                                 ;      37 #include "r_s12ad_rx_config.h"
                                 ;      38 /* Private header file for this package. */
                                 ;      39 #include "r_s12ad_rx_private.h"
                                 ;      40 
                                 ;      41 /***********************************************************************************************************************
                                 ;      42 Macro definitions
                                 ;      43 ***********************************************************************************************************************/
                                 ;      44 
                                 ;      45 /***********************************************************************************************************************
                                 ;      46 Typedef definitions
                                 ;      47 ***********************************************************************************************************************/
                                 ;      48  
                                 ;      49 /***********************************************************************************************************************
                                 ;      50 Private global variables and functions
                                 ;      51 ***********************************************************************************************************************/
                                 ;      52 void adc_enable_s12adi0(void);
                                 ;      53 
                                 ;      54 extern adc_err_t adc_open(adc_mode_t const       mode,
                                 ;      55                           adc_cfg_t * const      p_cfg,
                                 ;      56                           void         (* const  p_callback)(void *p_args));
                                 ;      57 extern adc_err_t adc_control(adc_cmd_t const     cmd,
                                 ;      58                              void * const        p_args);
                                 ;      59 
                                 ;      60 /* In RAM */
                                 ;      61 adc_ctrl_t g_dcb = { ADC_MODE_MAX, false, NULL};
                                 ;      62 
                                 ;      63 /* In ROM */
                                 ;      64 extern volatile __evenaccess uint16_t * const  dreg_ptrs[];
                                 ;      65 
                                 ;      66 /******************************************************************************
                                 ;      67 * Function Name: R_ADC_Open
                                 ;      68 * Description  : This function applies power to the A/D peripheral, sets the
                                 ;      69 *                operational mode, trigger sources, interrupt priority, and
                                 ;      70 *                configurations common to all channels and sensors. If interrupt
                                 ;      71 *                priority is non-zero, the function takes a callback function
                                 ;      72 *                pointer for notifying the user at interrupt level whenever a
                                 ;      73 *                scan has completed.
                                 ;      74 *
                                 ;      75 * Arguments    : mode-
                                 ;      76 *                    Operational mode (see enumeration below)
                                 ;      77 *                p_cfg-
                                 ;      78 *                    Pointer to configuration structure (see below)
                                 ;      79 *                p_callback-
                                 ;      80 *                    Optional pointer to function called from interrupt when
                                 ;      81 *                    a scan completes
                                 ;      82 * Return Value : ADC_SUCCESS-
                                 ;      83 *                    Successful
                                 ;      84 *                ADC_ERR_AD_LOCKED-
                                 ;      85 *                    Open() call is in progress elsewhere
                                 ;      86 *                ADC_ERR_AD_NOT_CLOSED-
                                 ;      87 *                    Peripheral is still running in another mode; Perform
                                 ;      88 *                    R_ADC_Close() first
                                 ;      89 *                ADC_ERR_INVALID_ARG-
                                 ;      90 *                    mode or element of p_cfg structure has invalid value.
                                 ;      91 *                ADC_ERR_ILLEGAL_ARG-
                                 ;      92 *                    an argument is illegal based upon mode
                                 ;      93 *                ADC_ERR_MISSING_PTR-
                                 ;      94 *                    p_cfg pointer is FIT_NO_PTR/NULL
                                 ;      95 *******************************************************************************/
                                 ;      96 adc_err_t R_ADC_Open(adc_mode_t const       mode,
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",96
00000000 7100F0                  		ADD #0FFFFFFF0H, R0
00000003 A089                    		MOV.L R1, 0CH[R0]
00000005 A082                    		MOV.L R2, 08H[R0]
00000007 A00B                    		MOV.L R3, 04H[R0]
                                 ;      97                      adc_cfg_t * const      p_cfg,
                                 ;      98                      void         (* const  p_callback)(void *p_args))
                                 ;      99 {
                                 ;     100 //adc_err_t err=ADC_SUCCESS;
                                 ;     101 
                                 ;     102     return adc_open(mode, p_cfg, p_callback);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",102
00000009 A882                    		MOV.L 08H[R0], R2
0000000B A889                    		MOV.L 0CH[R0], R1
0000000D 05rrrrrr             A  		BSR _adc_open
00000011 E301                    		MOV.L R1, [R0]
00000013                         L11:	; entry.split
                                 ;     103 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",103
00000013 6704                    		RTSD #10H
00000015                         _R_ADC_Control:
                                 		.STACK	_R_ADC_Control=16
                                 ;     104 
                                 ;     105 
                                 ;     106 /******************************************************************************
                                 ;     107 * Function Name: R_ADC_Control
                                 ;     108 * Description  : This function provides commands for enabling channels and
                                 ;     109 *                sensors and for runtime operations. These include enabling/
                                 ;     110 *                disabling trigger sources and interrupts, initiating a
                                 ;     111 *                software trigger, and checking for scan completion.
                                 ;     112 *
                                 ;     113 * NOTE: Enabling a channel or a sensor, or setting the sample state count reg
                                 ;     114 *       cannot be done while the ADSCR.ADST bit is set (conversion in progress).
                                 ;     115 *       Because these commands should only be called once during initialization
                                 ;     116 *       before triggers are enabled, this should not be an issue. Registers
                                 ;     117 *       with this restriction include ADANSA, ADANSB, ADADS, ADADC, ADSSTR,
                                 ;     118 *       ADEXICR, and some bits in ADSCR and TSCR.
                                 ;     119 *       No runtime operational sequence checking of any kind is performed.
                                 ;     120 *
                                 ;     121 * Arguments    : cmd-
                                 ;     122 *                    Command to run
                                 ;     123 *                p_args-
                                 ;     124 *                    Pointer to optional configuration structure
                                 ;     125 * Return Value : ADC_SUCCESS-
                                 ;     126 *                    Successful
                                 ;     127 *                ADC_ERR_MISSING_PTR-
                                 ;     128 *                    p_args pointer is FIT_NO_PTR/NULL when required as an argument
                                 ;     129 *                ADC_ERR_INVALID_ARG-
                                 ;     130 *                    cmd or element of p_args structure has invalid value.
                                 ;     131 *                ADC_ERR_ILLEGAL_CMD-
                                 ;     132 *                    cmd is illegal based upon mode
                                 ;     133 *                ADC_ERR_SCAN_NOT_DONE-
                                 ;     134 *                    The requested scan has not completed
                                 ;     135 *                ADC_ERR_UNKNOWN
                                 ;     136 *                    Did not receive expected hardware response
                                 ;     137 *******************************************************************************/
                                 ;     138 adc_err_t R_ADC_Control(adc_cmd_t const     cmd,
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",138
00000015 60C0                    		SUB #0CH, R0
00000017 A081                    		MOV.L R1, 08H[R0]
00000019 A00A                    		MOV.L R2, 04H[R0]
                                 ;     139                         void * const        p_args)
                                 ;     140 {
                                 ;     141 //adc_err_t       err=ADC_SUCCESS;
                                 ;     142 
                                 ;     143     return adc_control(cmd, p_args);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",143
0000001B A881                    		MOV.L 08H[R0], R1
0000001D 05rrrrrr             A  		BSR _adc_control
00000021 E301                    		MOV.L R1, [R0]
00000023                         L13:	; entry.split
                                 ;     144 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",144
00000023 6703                    		RTSD #0CH
00000025                         _adc_enable_s12adi0:
                                 		.STACK	_adc_enable_s12adi0=4
                                 ;     145 
                                 ;     146 
                                 ;     147 /******************************************************************************
                                 ;     148 * Function Name: adc_enable_s12adi0
                                 ;     149 * Description  : This function clears the S12ADI0 interrupt flag and enables
                                 ;     150 *                interrupts in the peripheral (for IR flag usage). If priority
                                 ;     151 *                is not 0, interrupts are enabled in the ICU.
                                 ;     152 *                NOTE: This has nothing to do with enabling triggers.
                                 ;     153 * Arguments    : none
                                 ;     154 * Return Value : none
                                 ;     155 *******************************************************************************/
                                 ;     156 void adc_enable_s12adi0(void)
                                 ;     157 {
                                 ;     158 
                                 ;     159     IR(S12AD,S12ADI0) = 0;                  // clear flag
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",159
00000025 FBEE667008              		MOV.L #00087066H, R14
0000002A F0E8                    		BCLR #00H, [R14].B
0000002C                         L15:	; entry.split
0000002C FBEE009008              		MOV.L #00089000H, R14
                                 ;     160     S12AD.ADCSR.BIT.ADIE = 1;               // enable in peripheral
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",160
00000031 F0E4                    		BSET #04H, [R14].B
00000033                         L16:	; entry.split1
                                 ;     161     if (ICU.IPR[IPR_S12AD_S12ADI0].BYTE != 0)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",161
00000033 FBEE667008              		MOV.L #00087066H, R14
00000038 5AEE0003                		MOVU.B 0300H[R14], R14
0000003C 610E                    		CMP #00H, R14
0000003E 20rr                    		BEQ L18
00000040                         L17:	; bb6
                                 ;     162     {
                                 ;     163         IEN(S12AD,S12ADI0) = 1;             // enable in ICU
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",163
00000040 FBEE667008              		MOV.L #00087066H, R14
00000045 F2E6A601                		BSET #06H, 01A6H[R14].B
00000049 02                      		RTS
0000004A                         L18:	; return
                                 ;     164     }
                                 ;     165 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",165
0000004A 02                      		RTS
0000004B                         __$adc_s12adi0_isr:
                                 		.STACK	__$adc_s12adi0_isr=40
                                 		.RVECTOR	102,__$adc_s12adi0_isr
                                 ;     166 
                                 ;     167 
                                 ;     168 /*****************************************************************************
                                 ;     169 * Function Name: adc_s12adi0_isr
                                 ;     170 * Description  : Interrupt handler for normal/Group A/double trigger
                                 ;     171 *                scan complete.
                                 ;     172 * Arguments    : none
                                 ;     173 * Return Value : none
                                 ;     174 ******************************************************************************/
                                 ;     175 #pragma interrupt adc_s12adi0_isr(vect=VECT(S12AD,S12ADI0))
                                 ;     176 //#pragma interrupt adc_s12adi0_isr(vect=VECT(S12AD,S12ADI0), enable) // FOR TESTING ONLY!
                                 ;     177 static void adc_s12adi0_isr(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",177
0000004B 6EEF                    		PUSHM R14-R15
0000004D 6E15                    		PUSHM R1-R5
0000004F 6040                    		SUB #04H, R0
                                 ;     178 {
                                 ;     179 adc_cb_evt_t    event=ADC_EVT_SCAN_COMPLETE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",179
00000051 F80600                  		MOV.L #00000000H, [R0]
00000054                         L20:	; entry.split
                                 ;     180 
                                 ;     181     // presence of callback function verified in Open()
                                 ;     182     g_dcb.callback(&event);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",182
00000054 FB12rrrrrrrr            		MOV.L #_g_dcb, R1
0000005A A892                    		MOV.L 08H[R1], R2
0000005C EF01                    		MOV.L R0, R1
0000005E 7F12                    		JSR R2
00000060 6240                    		ADD #04H, R0
00000062 6F15                    		POPM R1-R5
00000064 6FEF                    		POPM R14-R15
00000066 7F95                    		RTE
00000068                         _R_ADC_Read:
                                 		.STACK	_R_ADC_Read=24
                                 ;     183 }
                                 ;     184 
                                 ;     185 
                                 ;     186 #ifndef BSP_MCU_RX63_ALL
                                 ;     187 /*****************************************************************************
                                 ;     188 * Function Name: adc_gbadi_isr
                                 ;     189 * Description  : Interrupt handler for Group B scan complete.
                                 ;     190 * Arguments    : none
                                 ;     191 * Return Value : none
                                 ;     192 ******************************************************************************/
                                 ;     193 #pragma interrupt adc_gbadi_isr(vect=VECT(S12AD,GBADI))
                                 ;     194 //#pragma interrupt adc_gbadi_isr(vect=VECT(S12AD,GBADI),enable)  // FOR TESTING ONLY!
                                 ;     195 static void adc_gbadi_isr(void)
                                 ;     196 {
                                 ;     197 adc_cb_evt_t    event=ADC_EVT_SCAN_COMPLETE_GROUPB;
                                 ;     198 
                                 ;     199     // presence of callback function verified in Open()
                                 ;     200     g_dcb.callback(&event);
                                 ;     201 }
                                 ;     202 #endif
                                 ;     203 
                                 ;     204 
                                 ;     205 /******************************************************************************
                                 ;     206 * Function Name: R_ADC_Read
                                 ;     207 * Description  : This function reads conversion results from a single channel,
                                 ;     208 *                sensor, or the double trigger register.
                                 ;     209 * Arguments    : reg_id-
                                 ;     210 *                    Id for the register to read (see enum below)
                                 ;     211 *                p_data-
                                 ;     212 *                    Pointer to variable to load value into.
                                 ;     213 * Return Value : ADC_SUCCESS-
                                 ;     214 *                    Successful
                                 ;     215 *                ADC_ERR_INVALID_ARG-
                                 ;     216 *                    reg_id contains an invalid value.
                                 ;     217 *                ADC_ERR_MISSING _PTR-
                                 ;     218 *                    p_data is FIT_NO_PTR/NULL
                                 ;     219 *******************************************************************************/
                                 ;     220 adc_err_t R_ADC_Read(adc_reg_t const    reg_id,
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",220
00000068 7100EC                  		ADD #0FFFFFFECH, R0
0000006B A101                    		MOV.L R1, 10H[R0]
0000006D A08A                    		MOV.L R2, 0CH[R0]
                                 ;     221                      uint16_t * const   p_data)
                                 ;     222 {
                                 ;     223 #if ADC_CFG_PARAM_CHECKING_ENABLE == 1
                                 ;     224     if ((p_data == NULL) || (p_data == FIT_NO_PTR))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",224
0000006F 6102                    		CMP #00H, R2
00000071 20rr                    		BEQ L24
00000073 08                   S  		BRA L23
00000074                         L22:	; bb3
                                 ;     225     {
                                 ;     226         return ADC_ERR_MISSING_PTR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",226
00000074 3E0103                  		MOV.L #00000003H, 04H[R0]
00000077 2Err                 B  		BRA L35
00000079                         L23:	; bb8
00000079 A889                    		MOV.L 0CH[R0], R1
0000007B 740100000010            		CMP #10000000H, R1
00000081 18                   S  		BNE L25
00000082                         L24:	; bb13
00000082 F80601                  		MOV.L #00000001H, [R0]
00000085 08                   S  		BRA L26
00000086                         L25:	; bb14
00000086 F80600                  		MOV.L #00000000H, [R0]
00000089                         L26:	; bb15
00000089 EC01                    		MOV.L [R0], R1
0000008B 6101                    		CMP #00H, R1
0000008D 21rr                    		BNE L22
0000008F                         L27:	; bb20
                                 ;     227     }
                                 ;     228     if ((reg_id >= ADC_REG_MAX)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",228
0000008F A901                    		MOV.L 10H[R0], R1
00000091 755116                  		CMP #16H, R1
00000094 2Arr                    		BGT L30
00000096 08                   S  		BRA L29
00000097                         L28:	; bb21
                                 ;     229      || (dreg_ptrs[reg_id] == NULL))
                                 ;     230     {
                                 ;     231         return ADC_ERR_INVALID_ARG;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",231
00000097 3E0104                  		MOV.L #00000004H, 04H[R0]
0000009A 2Err                 B  		BRA L35
0000009C                         L29:	; bb26
0000009C FBE2rrrrrrrr            		MOV.L #_dreg_ptrs, R14
000000A2 A901                    		MOV.L 10H[R0], R1
000000A4 FE61EE                  		MOV.L [R1,R14], R14
000000A7 610E                    		CMP #00H, R14
000000A9 18                   S  		BNE L31
000000AA                         L30:	; bb32
000000AA F80601                  		MOV.L #00000001H, [R0]
000000AD 08                   S  		BRA L32
000000AE                         L31:	; bb33
000000AE F80600                  		MOV.L #00000000H, [R0]
000000B1                         L32:	; bb34
000000B1 EC01                    		MOV.L [R0], R1
000000B3 6101                    		CMP #00H, R1
000000B5 21rr                    		BNE L28
000000B7                         L33:	; bb39
                                 ;     232     }
                                 ;     233     // Do not check if corresponding channel/sensor is enabled
                                 ;     234 #endif
                                 ;     235 
                                 ;     236     *p_data = *dreg_ptrs[reg_id];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",236
000000B7 FBE2rrrrrrrr            		MOV.L #_dreg_ptrs, R14
000000BD A901                    		MOV.L 10H[R0], R1
000000BF FE61EE                  		MOV.L [R1,R14], R14
000000C2 A889                    		MOV.L 0CH[R0], R1
000000C4 D0E1                    		MOV.W [R14], [R1]
000000C6                         L34:	; bb39.split
                                 ;     237 
                                 ;     238     return ADC_SUCCESS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",238
000000C6 3E0100                  		MOV.L #00000000H, 04H[R0]
000000C9                         L35:	; bb46
000000C9 A809                    		MOV.L 04H[R0], R1
000000CB A081                    		MOV.L R1, 08H[R0]
                                 ;     239 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",239
000000CD 6705                    		RTSD #14H
000000CF                         _R_ADC_ReadAll:
                                 		.STACK	_R_ADC_ReadAll=20
                                 ;     240 
                                 ;     241 
                                 ;     242 /******************************************************************************
                                 ;     243 * Function Name: R_ADC_ReadAll
                                 ;     244 * Description  : This function reads conversion results from all potential
                                 ;     245 *                sources, enabled or not.
                                 ;     246 * Arguments    : p_data-
                                 ;     247 *                    Pointer to structure to load register values into.
                                 ;     248 * Return Value : ADC_SUCCESS-
                                 ;     249 *                    Successful
                                 ;     250 *                ADC_ERR_MISSING _PTR-
                                 ;     251 *                    p_data is FIT_NO_PTR/NULL
                                 ;     252 *******************************************************************************/
                                 ;     253 adc_err_t R_ADC_ReadAll(adc_data_t * const  p_all_data)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",253
000000CF 7100F0                  		ADD #0FFFFFFF0H, R0
000000D2 A089                    		MOV.L R1, 0CH[R0]
                                 ;     254 {
                                 ;     255 #if ADC_CFG_PARAM_CHECKING_ENABLE == 1
                                 ;     256     if ((p_all_data == NULL) || (p_all_data == FIT_NO_PTR))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",256
000000D4 6101                    		CMP #00H, R1
000000D6 20rr                    		BEQ L39
000000D8 08                   S  		BRA L38
000000D9                         L37:	; bb2
                                 ;     257     {
                                 ;     258         return ADC_ERR_MISSING_PTR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",258
000000D9 3E0103                  		MOV.L #00000003H, 04H[R0]
000000DC 38rrrr               W  		BRA L64
000000DF                         L38:	; bb7
000000DF A889                    		MOV.L 0CH[R0], R1
000000E1 740100000010            		CMP #10000000H, R1
000000E7 18                   S  		BNE L40
000000E8                         L39:	; bb12
000000E8 F80601                  		MOV.L #00000001H, [R0]
000000EB 08                   S  		BRA L41
000000EC                         L40:	; bb13
000000EC F80600                  		MOV.L #00000000H, [R0]
000000EF                         L41:	; bb14
000000EF EC01                    		MOV.L [R0], R1
000000F1 6101                    		CMP #00H, R1
000000F3 21rr                    		BNE L37
000000F5                         L42:	; bb18
                                 ;     259     }
                                 ;     260 #endif
                                 ;     261 
                                 ;     262     p_all_data->chan[ADC_REG_CH0] = S12AD.ADDR0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",262
000000F5 A889                    		MOV.L 0CH[R0], R1
000000F7 FBEE209008              		MOV.L #00089020H, R14
000000FC D0E1                    		MOV.W [R14], [R1]
000000FE                         L43:	; bb18.split
                                 ;     263     p_all_data->chan[ADC_REG_CH1] = S12AD.ADDR1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",263
000000FE A889                    		MOV.L 0CH[R0], R1
00000100 FBEE209008              		MOV.L #00089020H, R14
00000105 D5E10101                		MOV.W 02H[R14], 02H[R1]
00000109                         L44:	; bb18.split1
                                 ;     264     p_all_data->chan[ADC_REG_CH2] = S12AD.ADDR2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",264
00000109 A889                    		MOV.L 0CH[R0], R1
0000010B FBEE209008              		MOV.L #00089020H, R14
00000110 D5E10202                		MOV.W 04H[R14], 04H[R1]
00000114                         L45:	; bb18.split2
                                 ;     265     p_all_data->chan[ADC_REG_CH3] = S12AD.ADDR3;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",265
00000114 A889                    		MOV.L 0CH[R0], R1
00000116 FBEE209008              		MOV.L #00089020H, R14
0000011B D5E10303                		MOV.W 06H[R14], 06H[R1]
0000011F                         L46:	; bb18.split3
                                 ;     266     p_all_data->chan[ADC_REG_CH4] = S12AD.ADDR4;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",266
0000011F A889                    		MOV.L 0CH[R0], R1
00000121 FBEE209008              		MOV.L #00089020H, R14
00000126 D5E10404                		MOV.W 08H[R14], 08H[R1]
0000012A                         L47:	; bb18.split4
                                 ;     267     p_all_data->chan[ADC_REG_CH6] = S12AD.ADDR6;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",267
0000012A A889                    		MOV.L 0CH[R0], R1
0000012C FBEE209008              		MOV.L #00089020H, R14
00000131 D5E10606                		MOV.W 0CH[R14], 0CH[R1]
00000135                         L48:	; bb18.split5
                                 ;     268     p_all_data->chan[ADC_REG_CH8] = S12AD.ADDR8;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",268
00000135 A889                    		MOV.L 0CH[R0], R1
00000137 FBEE209008              		MOV.L #00089020H, R14
0000013C D5E10808                		MOV.W 10H[R14], 10H[R1]
00000140                         L49:	; bb18.split6
                                 ;     269     p_all_data->chan[ADC_REG_CH9] = S12AD.ADDR9;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",269
00000140 A889                    		MOV.L 0CH[R0], R1
00000142 FBEE209008              		MOV.L #00089020H, R14
00000147 D5E10909                		MOV.W 12H[R14], 12H[R1]
0000014B                         L50:	; bb18.split7
                                 ;     270     p_all_data->chan[ADC_REG_CH10] = S12AD.ADDR10;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",270
0000014B A889                    		MOV.L 0CH[R0], R1
0000014D FBEE209008              		MOV.L #00089020H, R14
00000152 D5E10A0A                		MOV.W 14H[R14], 14H[R1]
00000156                         L51:	; bb18.split8
                                 ;     271     p_all_data->chan[ADC_REG_CH11] = S12AD.ADDR11;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",271
00000156 A889                    		MOV.L 0CH[R0], R1
00000158 FBEE209008              		MOV.L #00089020H, R14
0000015D D5E10B0B                		MOV.W 16H[R14], 16H[R1]
00000161                         L52:	; bb18.split9
                                 ;     272     p_all_data->chan[ADC_REG_CH12] = S12AD.ADDR12;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",272
00000161 A889                    		MOV.L 0CH[R0], R1
00000163 FBEE209008              		MOV.L #00089020H, R14
00000168 D5E10C0C                		MOV.W 18H[R14], 18H[R1]
0000016C                         L53:	; bb18.split10
                                 ;     273     p_all_data->chan[ADC_REG_CH13] = S12AD.ADDR13;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",273
0000016C A889                    		MOV.L 0CH[R0], R1
0000016E FBEE209008              		MOV.L #00089020H, R14
00000173 D5E10D0D                		MOV.W 1AH[R14], 1AH[R1]
00000177                         L54:	; bb18.split11
                                 ;     274     p_all_data->chan[ADC_REG_CH14] = S12AD.ADDR14;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",274
00000177 A889                    		MOV.L 0CH[R0], R1
00000179 FBEE209008              		MOV.L #00089020H, R14
0000017E D5E10E0E                		MOV.W 1CH[R14], 1CH[R1]
00000182                         L55:	; bb18.split12
                                 ;     275     p_all_data->chan[ADC_REG_CH15] = S12AD.ADDR15;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",275
00000182 A889                    		MOV.L 0CH[R0], R1
00000184 FBEE209008              		MOV.L #00089020H, R14
00000189 D5E10F0F                		MOV.W 1EH[R14], 1EH[R1]
0000018D                         L56:	; bb18.split13
                                 ;     276 
                                 ;     277 #if (!defined(BSP_MCU_RX110) && !defined(BSP_MCU_RX111))
                                 ;     278     p_all_data->chan[ADC_REG_CH5] = S12AD.ADDR5;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",278
0000018D A889                    		MOV.L 0CH[R0], R1
0000018F FBEE209008              		MOV.L #00089020H, R14
00000194 D5E10505                		MOV.W 0AH[R14], 0AH[R1]
00000198                         L57:	; bb18.split14
                                 ;     279     p_all_data->chan[ADC_REG_CH7] = S12AD.ADDR7;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",279
00000198 A889                    		MOV.L 0CH[R0], R1
0000019A FBEE209008              		MOV.L #00089020H, R14
0000019F D5E10707                		MOV.W 0EH[R14], 0EH[R1]
000001A3                         L58:	; bb18.split15
                                 ;     280 #endif
                                 ;     281 #ifdef BSP_MCU_RX63_ALL
                                 ;     282     p_all_data->chan[ADC_REG_CH16] = S12AD.ADDR16;    
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",282
000001A3 A889                    		MOV.L 0CH[R0], R1
000001A5 FBEE209008              		MOV.L #00089020H, R14
000001AA D5E11010                		MOV.W 20H[R14], 20H[R1]
000001AE                         L59:	; bb18.split16
                                 ;     283     p_all_data->chan[ADC_REG_CH17] = S12AD.ADDR17;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",283
000001AE A889                    		MOV.L 0CH[R0], R1
000001B0 FBEE209008              		MOV.L #00089020H, R14
000001B5 D5E11111                		MOV.W 22H[R14], 22H[R1]
000001B9                         L60:	; bb18.split17
                                 ;     284     p_all_data->chan[ADC_REG_CH18] = S12AD.ADDR18;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",284
000001B9 A889                    		MOV.L 0CH[R0], R1
000001BB FBEE209008              		MOV.L #00089020H, R14
000001C0 D5E11212                		MOV.W 24H[R14], 24H[R1]
000001C4                         L61:	; bb18.split18
                                 ;     285     p_all_data->chan[ADC_REG_CH19] = S12AD.ADDR19;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",285
000001C4 A889                    		MOV.L 0CH[R0], R1
000001C6 FBEE209008              		MOV.L #00089020H, R14
000001CB D5E11313                		MOV.W 26H[R14], 26H[R1]
000001CF                         L62:	; bb18.split19
                                 ;     286     p_all_data->chan[ADC_REG_CH20] = S12AD.ADDR20;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",286
000001CF A889                    		MOV.L 0CH[R0], R1
000001D1 FBEE209008              		MOV.L #00089020H, R14
000001D6 D5E11414                		MOV.W 28H[R14], 28H[R1]
000001DA                         L63:	; bb18.split20
                                 ;     287 #endif
                                 ;     288 
                                 ;     289 #ifndef BSP_MCU_RX63_ALL
                                 ;     290     p_all_data->dbltrig = S12AD.ADDBLDR;
                                 ;     291 #endif
                                 ;     292 #ifdef BSP_MCU_RX210
                                 ;     293     p_all_data->self_diag = S12AD.ADRD.WORD;
                                 ;     294 #endif
                                 ;     295     
                                 ;     296     return ADC_SUCCESS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",296
000001DA 3E0100                  		MOV.L #00000000H, 04H[R0]
000001DD                         L64:	; bb126
000001DD A809                    		MOV.L 04H[R0], R1
000001DF A081                    		MOV.L R1, 08H[R0]
                                 ;     297 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",297
000001E1 6704                    		RTSD #10H
000001E3                         _R_ADC_Close:
                                 		.STACK	_R_ADC_Close=4
                                 ;     298 
                                 ;     299 
                                 ;     300 /******************************************************************************
                                 ;     301 * Function Name: R_ADC_Close
                                 ;     302 * Description  : This function ends any scan in progress, disables interrupts,
                                 ;     303 *                and removes power to the A/D peripheral.
                                 ;     304 * Arguments    : none
                                 ;     305 * Return Value : none
                                 ;     306 *******************************************************************************/
                                 ;     307 void   R_ADC_Close(void)
                                 ;     308 {
                                 ;     309 
                                 ;     310     /* Stop triggers & conversions, and disable peripheral interrupts */
                                 ;     311     IEN(S12AD,S12ADI0) = 0;         // disable interrupts in ICU
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",311
000001E3 FBEE667008              		MOV.L #00087066H, R14
000001E8 F2EEA601                		BCLR #06H, 01A6H[R14].B
000001EC                         L66:	; entry.split
                                 ;     312     IR(S12AD,S12ADI0) = 0;          // clear interrupt flag
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",312
000001EC FBEE667008              		MOV.L #00087066H, R14
000001F1 F0E8                    		BCLR #00H, [R14].B
000001F3                         L67:	; entry.split1
000001F3 FBEE009008              		MOV.L #00089000H, R14
                                 ;     313 #ifdef BSP_MCU_RX63_ALL
                                 ;     314     S12AD.ADCSR.BYTE = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",314
000001F8 F8E400                  		MOV.B #00H, [R14]
000001FB                         L68:	; entry.split2
000001FB 6611                    		MOV.L #00000001H, R1
                                 ;     315 #else
                                 ;     316     IEN(S12AD,GBADI) = 0;           // disable interrupts in ICU
                                 ;     317     IR(S12AD,GBADI) = 0;            // clear interrupt flag
                                 ;     318     S12AD.ADCSR.WORD = 0;
                                 ;     319 #endif
                                 ;     320 
                                 ;     321     /* Power down peripheral */
                                 ;     322     R_BSP_RegisterProtectDisable(BSP_REG_PROTECT_LPC_CGC_SWR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",322
000001FD 05rrrrrr             A  		BSR _R_BSP_RegisterProtectDisable
00000201                         L69:	; entry.split3
00000201 FBEE00C508              		MOV.L #0008C500H, R14
                                 ;     323 #ifndef BSP_MCU_RX11_ALL             // RX63x, RX210
                                 ;     324     TEMPS.TSCR.BYTE = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",324
00000206 F8E400                  		MOV.B #00H, [R14]
00000209                         L70:	; entry.split4
                                 ;     325     MSTP(TEMPS) = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",325
00000209 FB1E100008              		MOV.L #00080010H, R1
0000020E A81A                    		MOV.L 04H[R1], R2
00000210 7882                    		BSET #08H, R2
00000212 A01A                    		MOV.L R2, 04H[R1]
00000214                         L71:	; entry.split5
                                 ;     326 #endif
                                 ;     327     MSTP(S12AD) = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",327
00000214 FBEE100008              		MOV.L #00080010H, R14
00000219 ECEF                    		MOV.L [R14], R15
0000021B 791F                    		BSET #11H, R15
0000021D E3EF                    		MOV.L R15, [R14]
0000021F                         L72:	; entry.split6
0000021F 6611                    		MOV.L #00000001H, R1
                                 ;     328     R_BSP_RegisterProtectEnable(BSP_REG_PROTECT_LPC_CGC_SWR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",328
00000221 05rrrrrr             A  		BSR _R_BSP_RegisterProtectEnable
00000225                         L73:	; entry.split7
                                 ;     329 
                                 ;     330     /* Show driver as closed */
                                 ;     331     g_dcb.opened = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",331
00000225 FB12rrrrrrrr            		MOV.L #_g_dcb, R1
0000022B 3C1400                  		MOV.B #00H, 04H[R1]
0000022E                         L74:	; entry.split8
                                 ;     332 
                                 ;     333     return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",333
0000022E 02                      		RTS
0000022F                         _R_ADC_GetVersion:
                                 		.STACK	_R_ADC_GetVersion=12
                                 ;     334 }
                                 ;     335 
                                 ;     336 
                                 ;     337 /*****************************************************************************
                                 ;     338 * Function Name: R_ADC_GetVersion
                                 ;     339 * Description  : Returns the version of this module. The version number is
                                 ;     340 *                encoded such that the top two bytes are the major version
                                 ;     341 *                number and the bottom two bytes are the minor version number.
                                 ;     342 * Arguments    : none
                                 ;     343 * Return Value : version number
                                 ;     344 ******************************************************************************/
                                 ;     345 #pragma inline(R_ADC_GetVersion)
                                 ;     346 uint32_t  R_ADC_GetVersion(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",346
0000022F 6080                    		SUB #08H, R0
                                 ;     347 {
                                 ;     348 uint32_t const version = (ADC_VERSION_MAJOR << 16) | ADC_VERSION_MINOR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",348
00000231 F80E1E0001              		MOV.L #0001001EH, [R0]
00000236                         L76:	; entry.split
                                 ;     349 
                                 ;     350     return version;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",350
00000236 EC01                    		MOV.L [R0], R1
00000238 A009                    		MOV.L R1, 04H[R0]
0000023A                         L77:	; entry.split1
                                 ;     351 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_s12ad_rx\src\r_s12ad_rx.c",351
0000023A 6702                    		RTSD #08H
                                 		.SECTION	D,ROMDATA,ALIGN=4
00000000                         _g_dcb:
00000000 06000000                		.lword	00000006H
00000004 00                      		.byte	00H
00000005 00                      		.byte	0
00000006 00                      		.byte	0
00000007 00                      		.byte	0
00000008 00000000                		.lword	00000000H
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00732   LINES

Section List

Attr         Size               Name
CODE     0000000572(0000023CH)  P
ROMDATA  0000000012(0000000CH)  D

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\r_s12ad_rx.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\r_s12ad_rx.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\r_s12ad_rx\src\r_s12ad_rx.obj
