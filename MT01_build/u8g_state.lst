* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Mon Mar 20 17:11:56 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  20-Mar-2017 17:11:56
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=u8g_state.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=u8g_state.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;u8g_state.c
                                 
                                 		.glb	_u8g_state_dummy_cb
                                 		.glb	_u8g_SetHardwareBackup
                                 		.glb	_u8g_backup_spi
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _u8g_state_dummy_cb:
                                 		.STACK	_u8g_state_dummy_cb=8
                                 ;       1 /*
                                 ;       2 
                                 ;       3   u8g_state.c
                                 ;       4   
                                 ;       5   backup and restore hardware state
                                 ;       6 
                                 ;       7   Universal 8bit Graphics Library
                                 ;       8   
                                 ;       9   Copyright (c) 2011, olikraus@gmail.com
                                 ;      10   All rights reserved.
                                 ;      11 
                                 ;      12   Redistribution and use in source and binary forms, with or without modification, 
                                 ;      13   are permitted provided that the following conditions are met:
                                 ;      14 
                                 ;      15   * Redistributions of source code must retain the above copyright notice, this list 
                                 ;      16     of conditions and the following disclaimer.
                                 ;      17     
                                 ;      18   * Redistributions in binary form must reproduce the above copyright notice, this 
                                 ;      19     list of conditions and the following disclaimer in the documentation and/or other 
                                 ;      20     materials provided with the distribution.
                                 ;      21 
                                 ;      22   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
                                 ;      23   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
                                 ;      24   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
                                 ;      25   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
                                 ;      26   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
                                 ;      27   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
                                 ;      28   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
                                 ;      29   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
                                 ;      30   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
                                 ;      31   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
                                 ;      32   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
                                 ;      33   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
                                 ;      34   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
                                 ;      35   
                                 ;      36 
                                 ;      37   state callback: backup env U8G_STATE_MSG_BACKUP_ENV
                                 ;      38   device callback: DEV_MSG_INIT
                                 ;      39   state callback: backup u8g U8G_STATE_MSG_BACKUP_U8G
                                 ;      40   state callback: restore env U8G_STATE_MSG_RESTORE_ENV
                                 ;      41 
                                 ;      42   state callback: backup env U8G_STATE_MSG_BACKUP_ENV
                                 ;      43   state callback: retore u8g U8G_STATE_MSG_RESTORE_U8G
                                 ;      44   DEV_MSG_PAGE_FIRST or DEV_MSG_PAGE_NEXT
                                 ;      45   state callback: restore env U8G_STATE_MSG_RESTORE_ENV
                                 ;      46 
                                 ;      47 */
                                 ;      48 
                                 ;      49 #include <stddef.h>
                                 ;      50 #include "u8g.h"
                                 ;      51 
                                 ;      52 void u8g_state_dummy_cb(uint8_t msg)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_state.c",52
00000000 6040                    		SUB #04H, R0
00000002 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_state.c",55
00000004 6701                    		RTSD #04H
00000006                         _u8g_SetHardwareBackup:
                                 		.STACK	_u8g_SetHardwareBackup=12
                                 ;      53 {
                                 ;      54   /* the dummy procedure does nothing */
                                 ;      55 }
                                 ;      56 
                                 ;      57 void u8g_SetHardwareBackup(u8g_t *u8g, u8g_state_cb backup_cb)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_state.c",57
00000006 6080                    		SUB #08H, R0
00000008 A009                    		MOV.L R1, 04H[R0]
0000000A E302                    		MOV.L R2, [R0]
                                 ;      58 {
                                 ;      59   u8g->state_cb = backup_cb;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_state.c",59
0000000C A809                    		MOV.L 04H[R0], R1
0000000E A41A                    		MOV.L R2, 44H[R1]
00000010                         L12:	; entry.split
                                 ;      60   /* in most cases the init message was already sent, so this will backup the */
                                 ;      61   /* current u8g state */
                                 ;      62   backup_cb(U8G_STATE_MSG_BACKUP_U8G);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_state.c",62
00000010 EC02                    		MOV.L [R0], R2
00000012 6631                    		MOV.L #00000003H, R1
00000014 7F12                    		JSR R2
00000016 6702                    		RTSD #08H
00000018                         _u8g_backup_spi:
                                 		.STACK	_u8g_backup_spi=8
                                 ;      63 }
                                 ;      64 
                                 ;      65 
                                 ;      66 /*===============================================================*/
                                 ;      67 /* register variable for restoring interrupt state */
                                 ;      68 
                                 ;      69 #if defined(__AVR__)
                                 ;      70 uint8_t global_SREG_backup;
                                 ;      71 #endif
                                 ;      72 
                                 ;      73 
                                 ;      74 
                                 ;      75 /*===============================================================*/
                                 ;      76 /* AVR */
                                 ;      77 
                                 ;      78 #if defined(__AVR__)
                                 ;      79 #define U8G_ATMEGA_HW_SPI
                                 ;      80 
                                 ;      81 /* remove the definition for attiny */
                                 ;      82 #if __AVR_ARCH__ == 2
                                 ;      83 #undef U8G_ATMEGA_HW_SPI
                                 ;      84 #endif
                                 ;      85 #if __AVR_ARCH__ == 25
                                 ;      86 #undef U8G_ATMEGA_HW_SPI
                                 ;      87 #endif
                                 ;      88 #endif
                                 ;      89 
                                 ;      90 #if defined(U8G_ATMEGA_HW_SPI)
                                 ;      91 #include <avr/interrupt.h>
                                 ;      92 static uint8_t u8g_state_avr_spi_memory[2];
                                 ;      93 
                                 ;      94 void u8g_backup_spi(uint8_t msg)
                                 ;      95 {
                                 ;      96   if ( U8G_STATE_MSG_IS_BACKUP(msg) )
                                 ;      97   {
                                 ;      98     u8g_state_avr_spi_memory[U8G_STATE_MSG_GET_IDX(msg)] = SPCR;
                                 ;      99   }
                                 ;     100   else
                                 ;     101   {
                                 ;     102     uint8_t tmp = SREG;
                                 ;     103     cli();
                                 ;     104     SPCR = 0;
                                 ;     105     SPCR = u8g_state_avr_spi_memory[U8G_STATE_MSG_GET_IDX(msg)];
                                 ;     106     SREG = tmp;
                                 ;     107   }
                                 ;     108 }
                                 ;     109 
                                 ;     110 #elif defined (U8G_RASPBERRY_PI)
                                 ;     111 
                                 ;     112 #include <stdio.h>
                                 ;     113 
                                 ;     114 void u8g_backup_spi(uint8_t msg) {
                                 ;     115   printf("u8g_backup_spi %d\r\n",msg);
                                 ;     116 }
                                 ;     117 
                                 ;     118 #elif defined(ARDUINO) && defined(__SAM3X8E__)		// Arduino Due, maybe we should better check for __SAM3X8E__
                                 ;     119 
                                 ;     120 #include "sam.h"
                                 ;     121 
                                 ;     122 struct sam_backup_struct
                                 ;     123 {
                                 ;     124   uint32_t mr;
                                 ;     125   uint32_t sr;
                                 ;     126   uint32_t csr[4];  
                                 ;     127 } sam_backup[2];
                                 ;     128 
                                 ;     129 void u8g_backup_spi(uint8_t msg)
                                 ;     130 {
                                 ;     131   uint8_t idx = U8G_STATE_MSG_GET_IDX(msg);
                                 ;     132   if ( U8G_STATE_MSG_IS_BACKUP(msg) )
                                 ;     133   {
                                 ;     134     sam_backup[idx].mr = SPI0->SPI_MR;
                                 ;     135     sam_backup[idx].sr = SPI0->SPI_SR;
                                 ;     136     sam_backup[idx].csr[0] = SPI0->SPI_CSR[0];
                                 ;     137     sam_backup[idx].csr[1] = SPI0->SPI_CSR[1];
                                 ;     138     sam_backup[idx].csr[2] = SPI0->SPI_CSR[2];
                                 ;     139     sam_backup[idx].csr[3] = SPI0->SPI_CSR[3];
                                 ;     140   }
                                 ;     141   else
                                 ;     142   {
                                 ;     143     SPI0->SPI_MR = sam_backup[idx].mr;
                                 ;     144     SPI0->SPI_CSR[0] = sam_backup[idx].csr[0];
                                 ;     145     SPI0->SPI_CSR[1] = sam_backup[idx].csr[1];
                                 ;     146     SPI0->SPI_CSR[2] = sam_backup[idx].csr[2];
                                 ;     147     SPI0->SPI_CSR[3] = sam_backup[idx].csr[3];
                                 ;     148   }
                                 ;     149 }
                                 ;     150 
                                 ;     151 #else
                                 ;     152 
                                 ;     153 void u8g_backup_spi(uint8_t msg)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_state.c",153
00000018 6040                    		SUB #04H, R0
0000001A 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_state.c",155
0000001C 6701                    		RTSD #04H
                                 ;     154 {
                                 ;     155 }
                                 ;     156 
                                 ;     157 #endif
                                 ;     158 
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00217   LINES

Section List

Attr         Size               Name
CODE     0000000030(0000001EH)  P

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx305E\$ccrx\u8g_state.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\u8g_state.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\src\Display\u8g_state.obj
