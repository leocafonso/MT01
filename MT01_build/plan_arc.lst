* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Mar 14 14:02:36 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  14-Mar-2017 14:02:36
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=plan_arc.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=plan_arc.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;plan_arc.c
                                 
                                 		.glb	_status_code
                                 		.glb	_cm
                                 		.glb	_arc
                                 		.glb	_cm_arc_init
                                 		.glb	_cm_arc_feed
                                 		.glb	_cm_set_model_target
                                 		.glb	_cm_set_work_offsets
                                 		.glb	_floor
                                 		.glb	_cm_cycle_start
                                 		.glb	_cm_finalize_move
                                 		.glb	_cm_arc_callback
                                 		.glb	_mp_get_planner_buffers_available
                                 		.glb	_sin
                                 		.glb	_cos
                                 		.glb	_mp_aline
                                 		.glb	_cm_abort_arc
                                 		.glb	_hypotf
                                 		.glb	_atan2
                                 		.glb	_sqrt
                                 		.glb	_min3
                                 		.glb	_fmaxf
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _cm_arc_init:
                                 		.STACK	_cm_arc_init=4
                                 ;       1 /*
                                 ;       2  * plan_arc.c - arc planning and motion execution
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      13  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      14  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      15  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      16  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      17  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      18  */
                                 ;      19 /* This module actually contains some parts that belong ion the canonical machine,
                                 ;      20  * and other parts that belong at the motion planner level, but the whole thing is
                                 ;      21  * treated as if it were part of the motion planner.
                                 ;      22  */
                                 ;      23 
                                 ;      24 #include "tinyg.h"
                                 ;      25 #include "config.h"
                                 ;      26 #include "canonical_machine.h"
                                 ;      27 #include "plan_arc.h"
                                 ;      28 #include "planner.h"
                                 ;      29 #include "util.h"
                                 ;      30 
                                 ;      31 // Allocate arc planner singleton structure
                                 ;      32 
                                 ;      33 arc_t arc;
                                 ;      34 
                                 ;      35 // Local functions
                                 ;      36 static stat_t _compute_arc(void);
                                 ;      37 static stat_t _compute_arc_offsets_from_radius(void);
                                 ;      38 static void _estimate_arc_time(void);
                                 ;      39 //static stat_t _test_arc_soft_limits(void);
                                 ;      40 
                                 ;      41 /*****************************************************************************
                                 ;      42  * Canonical Machining arc functions (arc prep for planning and runtime)
                                 ;      43  *
                                 ;      44  * cm_arc_init()	 - initialize arcs
                                 ;      45  * cm_arc_feed() 	 - canonical machine entry point for arc
                                 ;      46  * cm_arc_callback() - mail-loop callback for arc generation
                                 ;      47  * cm_abort_arc()	 - stop an arc in process
                                 ;      48  */
                                 ;      49 
                                 ;      50 /*
                                 ;      51  * cm_arc_init() - initialize arc structures
                                 ;      52  */
                                 ;      53 void cm_arc_init()
                                 ;      54 {
                                 ;      55 	arc.magic_start = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",55
00000000 FBE2rrrrrrrr            		MOV.L #_arc, R14
00000006 F8E9EF12                		MOV.W #12EFH, [R14]
0000000A                         L11:	; entry.split
                                 ;      56 	arc.magic_end = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",56
0000000A FBE2rrrrrrrr            		MOV.L #_arc, R14
00000010 F9E964EF12              		MOV.W #12EFH, 0C8H[R14]
00000015 02                      		RTS
00000016                         _cm_arc_feed:
                                 		.STACK	_cm_arc_feed=52
                                 ;      57 }
                                 ;      58 
                                 ;      59 /*
                                 ;      60  * cm_arc_feed() - canonical machine entry point for arc
                                 ;      61  *
                                 ;      62  * Generates an arc by queuing line segments to the move buffer. The arc is
                                 ;      63  * approximated by generating a large number of tiny, linear arc_segments.
                                 ;      64  */
                                 ;      65 stat_t cm_arc_feed(float target[], float flags[],       // arc endpoints
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",65
00000016 7EA6                    		PUSH.L R6
00000018 7100D4                  		ADD #0FFFFFFD4H, R0
0000001B A281                    		MOV.L R1, 28H[R0]
0000001D A20A                    		MOV.L R2, 24H[R0]
0000001F A203                    		MOV.L R3, 20H[R0]
00000021 A18C                    		MOV.L R4, 1CH[R0]
00000023 E5000D06                		MOV.L 34H[R0], 18H[R0]
00000027 E5000E05                		MOV.L 38H[R0], 14H[R0]
0000002B C5003C13                		MOV.B 3CH[R0], 13H[R0]
                                 ;      66 				   float i, float j, float k,           // raw arc offsets
                                 ;      67 				   float radius,                        // non-zero radius implies radius mode
                                 ;      68 				   uint8_t motion_mode)                 // defined motion mode
                                 ;      69 {
                                 ;      70 	////////////////////////////////////////////////////
                                 ;      71 	// Set axis plane and trap arc specification errors
                                 ;      72 
                                 ;      73 	// trap missing feed rate
                                 ;      74 	if ((cm.gm.feed_rate_mode != INVERSE_TIME_MODE) && (fp_ZERO(cm.gm.feed_rate))) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",74
0000002F FBE2rrrrrrrr            		MOV.L #_cm, R14
00000035 5AEEA002                		MOVU.B 02A0H[R14], R14
00000039 610E                    		CMP #00H, R14
0000003B 18                   S  		BNE L14
0000003C 2Err                 B  		BRA L16
0000003E                         L13:	; bb15
                                 ;      75     	return (STAT_GCODE_FEEDRATE_NOT_SPECIFIED);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",75
0000003E 3C0A8E                  		MOV.B #8EH, 0AH[R0]
00000041 38rrrr               W  		BRA L119
00000044                         L14:	; bb21
00000044 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000004A EDEEA5                  		MOV.L 0294H[R14], R14
0000004D 7BFE                    		BCLR #1FH, R14
0000004F FD721EBD378635          		FCMP #358637BDH, R14
00000056 26rr                    		BPZ L16
00000058                         L15:	; bb26
00000058 3E0101                  		MOV.L #00000001H, 04H[R0]
0000005B 08                   S  		BRA L17
0000005C                         L16:	; bb27
0000005C 3E0100                  		MOV.L #00000000H, 04H[R0]
0000005F                         L17:	; bb28
0000005F A809                    		MOV.L 04H[R0], R1
00000061 6101                    		CMP #00H, R1
00000063 21rr                    		BNE L13
00000065                         L18:	; bb32
                                 ;      76 	}
                                 ;      77 
                                 ;      78     // set radius mode flag and do simple test(s)
                                 ;      79 	bool radius_f = fp_NOT_ZERO(cm.gf.arc_radius);			    // set true if radius arc
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",79
00000065 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000006B EDEEF7                  		MOV.L 03DCH[R14], R14
0000006E 7BFE                    		BCLR #1FH, R14
00000070 FBF2BD378635            		MOV.L #358637BDH, R15
00000076 FC87EF                  		FCMP R14, R15
00000079 FCD1070B                		SCN.B 0BH[R0]
0000007D                         L19:	; bb32.split
                                 ;      80     if ((radius_f) && (cm.gn.arc_radius < MIN_ARC_RADIUS)) {    // radius value must be + and > minimum radius
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",80
0000007D B289                    		MOVU.B 0BH[R0], R1
0000007F 6101                    		CMP #00H, R1
00000081 18                   S  		BNE L21
00000082 2Err                 B  		BRA L23
00000084                         L20:	; bb41
                                 ;      81         return (STAT_ARC_RADIUS_OUT_OF_TOLERANCE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",81
00000084 3C0A9E                  		MOV.B #9EH, 0AH[R0]
00000087 38rrrr               W  		BRA L119
0000008A                         L21:	; bb47
0000008A FBE2rrrrrrrr            		MOV.L #_cm, R14
00000090 EDEEDF                  		MOV.L 037CH[R14], R14
00000093 FD721ECDCCCC3D          		FCMP #3DCCCCCDH, R14
0000009A 26rr                    		BPZ L23
0000009C                         L22:	; bb51
0000009C 3E0101                  		MOV.L #00000001H, 04H[R0]
0000009F 08                   S  		BRA L24
000000A0                         L23:	; bb52
000000A0 3E0100                  		MOV.L #00000000H, 04H[R0]
000000A3                         L24:	; bb53
000000A3 A809                    		MOV.L 04H[R0], R1
000000A5 6101                    		CMP #00H, R1
000000A7 21rr                    		BNE L20
000000A9                         L25:	; bb58
                                 ;      82     }
                                 ;      83 
                                 ;      84     // setup some flags
                                 ;      85 	bool target_x = fp_NOT_ZERO(flags[AXIS_X]);	                // set true if X axis has been specified
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",85
000000A9 AA09                    		MOV.L 24H[R0], R1
000000AB EC1E                    		MOV.L [R1], R14
000000AD 7BFE                    		BCLR #1FH, R14
000000AF FBF2BD378635            		MOV.L #358637BDH, R15
000000B5 FC87EF                  		FCMP R14, R15
000000B8 FCD1070C                		SCN.B 0CH[R0]
000000BC                         L26:	; bb58.split
                                 ;      86 	bool target_y = fp_NOT_ZERO(flags[AXIS_Y]);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",86
000000BC AA09                    		MOV.L 24H[R0], R1
000000BE A819                    		MOV.L 04H[R1], R1
000000C0 7BF1                    		BCLR #1FH, R1
000000C2 FBE2BD378635            		MOV.L #358637BDH, R14
000000C8 FC871E                  		FCMP R1, R14
000000CB FCD1070D                		SCN.B 0DH[R0]
000000CF                         L27:	; bb58.split1
                                 ;      87 	bool target_z = fp_NOT_ZERO(flags[AXIS_Z]);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",87
000000CF AA09                    		MOV.L 24H[R0], R1
000000D1 A891                    		MOV.L 08H[R1], R1
000000D3 7BF1                    		BCLR #1FH, R1
000000D5 FBE2BD378635            		MOV.L #358637BDH, R14
000000DB FC871E                  		FCMP R1, R14
000000DE FCD1070E                		SCN.B 0EH[R0]
000000E2                         L28:	; bb58.split2
                                 ;      88 
                                 ;      89     bool offset_i = fp_NOT_ZERO(cm.gf.arc_offset[0]);	        // set true if offset I has been specified
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",89
000000E2 FBE2rrrrrrrr            		MOV.L #_cm, R14
000000E8 EDEEF8                  		MOV.L 03E0H[R14], R14
000000EB 7BFE                    		BCLR #1FH, R14
000000ED FBF2BD378635            		MOV.L #358637BDH, R15
000000F3 FC87EF                  		FCMP R14, R15
000000F6 FCD1070F                		SCN.B 0FH[R0]
000000FA                         L29:	; bb58.split3
                                 ;      90     bool offset_j = fp_NOT_ZERO(cm.gf.arc_offset[1]);           // J
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",90
000000FA FBE2rrrrrrrr            		MOV.L #_cm, R14
00000100 EDEEF9                  		MOV.L 03E4H[R14], R14
00000103 7BFE                    		BCLR #1FH, R14
00000105 FBF2BD378635            		MOV.L #358637BDH, R15
0000010B FC87EF                  		FCMP R14, R15
0000010E FCD10710                		SCN.B 10H[R0]
00000112                         L30:	; bb58.split4
                                 ;      91     bool offset_k = fp_NOT_ZERO(cm.gf.arc_offset[2]);           // K
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",91
00000112 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000118 EDEEFA                  		MOV.L 03E8H[R14], R14
0000011B 7BFE                    		BCLR #1FH, R14
0000011D FBF2BD378635            		MOV.L #358637BDH, R15
00000123 FC87EF                  		FCMP R14, R15
00000126 FCD10711                		SCN.B 11H[R0]
0000012A                         L31:	; bb58.split5
                                 ;      92 
                                 ;      93 	// Set the arc plane for the current G17/G18/G19 setting and test arc specification
                                 ;      94 	// Plane axis 0 and 1 are the arc plane, the linear axis is normal to the arc plane.
                                 ;      95 	if (cm.gm.select_plane == CANON_PLANE_XY) {	// G17 - the vast majority of arcs are in the G17 (XY) plane
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",95
0000012A FBE2rrrrrrrr            		MOV.L #_cm, R14
00000130 5AEEA102                		MOVU.B 02A1H[R14], R14
00000134 610E                    		CMP #00H, R14
00000136 21rr                    		BNE L47
00000138                         L32:	; bb108
                                 ;      96     	arc.plane_axis_0 = AXIS_X;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",96
00000138 FBE2rrrrrrrr            		MOV.L #_arc, R14
0000013E F9E44C00                		MOV.B #00H, 4CH[R14]
00000142                         L33:	; bb108.split
                                 ;      97     	arc.plane_axis_1 = AXIS_Y;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",97
00000142 FBE2rrrrrrrr            		MOV.L #_arc, R14
00000148 F9E44D01                		MOV.B #01H, 4DH[R14]
0000014C                         L34:	; bb108.split6
                                 ;      98     	arc.linear_axis  = AXIS_Z;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",98
0000014C FBE2rrrrrrrr            		MOV.L #_arc, R14
00000152 F9E44E02                		MOV.B #02H, 4EH[R14]
00000156                         L35:	; bb108.split7
                                 ;      99         if (radius_f) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",99
00000156 B289                    		MOVU.B 0BH[R0], R1
00000158 6101                    		CMP #00H, R1
0000015A 20rr                    		BEQ L45
0000015C                         L36:	; bb111
                                 ;     100             if (!(target_x || target_y)) {                      // must have at least one endpoint specified
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",100
0000015C B301                    		MOVU.B 0CH[R0], R1
0000015E 6101                    		CMP #00H, R1
00000160 21rr                    		BNE L39
00000162 08                   S  		BRA L38
00000163                         L37:	; bb112
                                 ;     101         	    return (STAT_ARC_AXIS_MISSING_FOR_SELECTED_PLANE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",101
00000163 3C0A9C                  		MOV.B #9CH, 0AH[R0]
00000166 38rrrr               W  		BRA L119
00000169                         L38:	; bb118
00000169 B309                    		MOVU.B 0DH[R0], R1
0000016B 6101                    		CMP #00H, R1
0000016D 10                   S  		BEQ L40
0000016E                         L39:	; bb123
0000016E 3E0101                  		MOV.L #00000001H, 04H[R0]
00000171 08                   S  		BRA L41
00000172                         L40:	; bb124
00000172 3E0100                  		MOV.L #00000000H, 04H[R0]
00000175                         L41:	; bb125
00000175 A809                    		MOV.L 04H[R0], R1
00000177 6101                    		CMP #00H, R1
00000179 10                   S  		BEQ L43
0000017A                         L42:	; bb129
0000017A 3E0100                  		MOV.L #00000000H, 04H[R0]
0000017D 08                   S  		BRA L44
0000017E                         L43:	; bb130
0000017E 3E0101                  		MOV.L #00000001H, 04H[R0]
00000181                         L44:	; bb131
00000181 A809                    		MOV.L 04H[R0], R1
00000183 6101                    		CMP #00H, R1
00000185 21rr                    		BNE L37
00000187 38rrrr               W  		BRA L79
0000018A                         L45:	; bb137
                                 ;     102             }
                                 ;     103         } else { // center format arc tests
                                 ;     104             if (offset_k) { // it's OK to be missing either or both i and j, but error if k is present
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",104
0000018A B409                    		MOVU.B 11H[R0], R1
0000018C 6101                    		CMP #00H, R1
0000018E 3Arrrr               W  		BEQ L79
00000191                         L46:	; bb138
                                 ;     105         	    return (STAT_ARC_SPECIFICATION_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",105
00000191 3C0A9B                  		MOV.B #9BH, 0AH[R0]
00000194 38rrrr               W  		BRA L119
00000197                         L47:	; bb153
                                 ;     106             }
                                 ;     107         }
                                 ;     108 
                                 ;     109     } else if (cm.gm.select_plane == CANON_PLANE_XZ) {	// G18
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",109
00000197 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000019D 5AEEA102                		MOVU.B 02A1H[R14], R14
000001A1 611E                    		CMP #01H, R14
000001A3 21rr                    		BNE L63
000001A5                         L48:	; bb154
                                 ;     110     	arc.plane_axis_0 = AXIS_X;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",110
000001A5 FBE2rrrrrrrr            		MOV.L #_arc, R14
000001AB F9E44C00                		MOV.B #00H, 4CH[R14]
000001AF                         L49:	; bb154.split
                                 ;     111     	arc.plane_axis_1 = AXIS_Z;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",111
000001AF FBE2rrrrrrrr            		MOV.L #_arc, R14
000001B5 F9E44D02                		MOV.B #02H, 4DH[R14]
000001B9                         L50:	; bb154.split8
                                 ;     112     	arc.linear_axis  = AXIS_Y;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",112
000001B9 FBE2rrrrrrrr            		MOV.L #_arc, R14
000001BF F9E44E01                		MOV.B #01H, 4EH[R14]
000001C3                         L51:	; bb154.split9
                                 ;     113         if (radius_f) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",113
000001C3 B289                    		MOVU.B 0BH[R0], R1
000001C5 6101                    		CMP #00H, R1
000001C7 20rr                    		BEQ L61
000001C9                         L52:	; bb157
                                 ;     114             if (!(target_x || target_z))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",114
000001C9 B301                    		MOVU.B 0CH[R0], R1
000001CB 6101                    		CMP #00H, R1
000001CD 21rr                    		BNE L55
000001CF 08                   S  		BRA L54
000001D0                         L53:	; bb158
                                 ;     115                 return (STAT_ARC_AXIS_MISSING_FOR_SELECTED_PLANE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",115
000001D0 3C0A9C                  		MOV.B #9CH, 0AH[R0]
000001D3 38rrrr               W  		BRA L119
000001D6                         L54:	; bb164
000001D6 B381                    		MOVU.B 0EH[R0], R1
000001D8 6101                    		CMP #00H, R1
000001DA 10                   S  		BEQ L56
000001DB                         L55:	; bb169
000001DB 3E0101                  		MOV.L #00000001H, 04H[R0]
000001DE 08                   S  		BRA L57
000001DF                         L56:	; bb170
000001DF 3E0100                  		MOV.L #00000000H, 04H[R0]
000001E2                         L57:	; bb171
000001E2 A809                    		MOV.L 04H[R0], R1
000001E4 6101                    		CMP #00H, R1
000001E6 10                   S  		BEQ L59
000001E7                         L58:	; bb175
000001E7 3E0100                  		MOV.L #00000000H, 04H[R0]
000001EA 08                   S  		BRA L60
000001EB                         L59:	; bb176
000001EB 3E0101                  		MOV.L #00000001H, 04H[R0]
000001EE                         L60:	; bb177
000001EE A809                    		MOV.L 04H[R0], R1
000001F0 6101                    		CMP #00H, R1
000001F2 21rr                    		BNE L53
000001F4 2Err                 B  		BRA L79
000001F6                         L61:	; bb183
                                 ;     116         } else {
                                 ;     117             if (offset_j)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",117
000001F6 B401                    		MOVU.B 10H[R0], R1
000001F8 6101                    		CMP #00H, R1
000001FA 20rr                    		BEQ L79
000001FC                         L62:	; bb184
                                 ;     118                 return (STAT_ARC_SPECIFICATION_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",118
000001FC 3C0A9B                  		MOV.B #9BH, 0AH[R0]
000001FF 38rrrr               W  		BRA L119
00000202                         L63:	; bb199
                                 ;     119         }
                                 ;     120 
                                 ;     121     } else if (cm.gm.select_plane == CANON_PLANE_YZ) {	// G19
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",121
00000202 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000208 5AEEA102                		MOVU.B 02A1H[R14], R14
0000020C 612E                    		CMP #02H, R14
0000020E 21rr                    		BNE L79
00000210                         L64:	; bb200
                                 ;     122     	arc.plane_axis_0 = AXIS_Y;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",122
00000210 FBE2rrrrrrrr            		MOV.L #_arc, R14
00000216 F9E44C01                		MOV.B #01H, 4CH[R14]
0000021A                         L65:	; bb200.split
                                 ;     123     	arc.plane_axis_1 = AXIS_Z;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",123
0000021A FBE2rrrrrrrr            		MOV.L #_arc, R14
00000220 F9E44D02                		MOV.B #02H, 4DH[R14]
00000224                         L66:	; bb200.split10
                                 ;     124     	arc.linear_axis  = AXIS_X;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",124
00000224 FBE2rrrrrrrr            		MOV.L #_arc, R14
0000022A F9E44E00                		MOV.B #00H, 4EH[R14]
0000022E                         L67:	; bb200.split11
                                 ;     125         if (radius_f) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",125
0000022E B289                    		MOVU.B 0BH[R0], R1
00000230 6101                    		CMP #00H, R1
00000232 20rr                    		BEQ L77
00000234                         L68:	; bb203
                                 ;     126             if (!(target_y || target_z))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",126
00000234 B309                    		MOVU.B 0DH[R0], R1
00000236 6101                    		CMP #00H, R1
00000238 21rr                    		BNE L71
0000023A 08                   S  		BRA L70
0000023B                         L69:	; bb204
                                 ;     127                 return (STAT_ARC_AXIS_MISSING_FOR_SELECTED_PLANE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",127
0000023B 3C0A9C                  		MOV.B #9CH, 0AH[R0]
0000023E 38rrrr               W  		BRA L119
00000241                         L70:	; bb210
00000241 B381                    		MOVU.B 0EH[R0], R1
00000243 6101                    		CMP #00H, R1
00000245 10                   S  		BEQ L72
00000246                         L71:	; bb215
00000246 3E0101                  		MOV.L #00000001H, 04H[R0]
00000249 08                   S  		BRA L73
0000024A                         L72:	; bb216
0000024A 3E0100                  		MOV.L #00000000H, 04H[R0]
0000024D                         L73:	; bb217
0000024D A809                    		MOV.L 04H[R0], R1
0000024F 6101                    		CMP #00H, R1
00000251 10                   S  		BEQ L75
00000252                         L74:	; bb221
00000252 3E0100                  		MOV.L #00000000H, 04H[R0]
00000255 08                   S  		BRA L76
00000256                         L75:	; bb222
00000256 3E0101                  		MOV.L #00000001H, 04H[R0]
00000259                         L76:	; bb223
00000259 A809                    		MOV.L 04H[R0], R1
0000025B 6101                    		CMP #00H, R1
0000025D 21rr                    		BNE L69
0000025F 2Err                 B  		BRA L79
00000261                         L77:	; bb229
                                 ;     128         } else {
                                 ;     129             if (offset_i)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",129
00000261 B389                    		MOVU.B 0FH[R0], R1
00000263 6101                    		CMP #00H, R1
00000265 10                   S  		BEQ L79
00000266                         L78:	; bb230
                                 ;     130                 return (STAT_ARC_SPECIFICATION_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",130
00000266 3C0A9B                  		MOV.B #9BH, 0AH[R0]
00000269 38rrrr               W  		BRA L119
0000026C                         L79:	; bb261
                                 ;     131         }
                                 ;     132 	}
                                 ;     133 
                                 ;     134 	// set values in the Gcode model state & copy it (linenum was already captured)
                                 ;     135 	cm_set_model_target(target, flags);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",135
0000026C AA0A                    		MOV.L 24H[R0], R2
0000026E AA81                    		MOV.L 28H[R0], R1
00000270 05rrrrrr             A  		BSR _cm_set_model_target
00000274                         L80:	; bb261.split
                                 ;     136 
                                 ;     137     // in radius mode it's an error for start == end
                                 ;     138     if(radius_f) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",138
00000274 B289                    		MOVU.B 0BH[R0], R1
00000276 6101                    		CMP #00H, R1
00000278 20rr                    		BEQ L91
0000027A                         L81:	; bb266
                                 ;     139         if ((fp_EQ(cm.gmx.position[AXIS_X], cm.gm.target[AXIS_X])) &&
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",139
0000027A FBE2rrrrrrrr            		MOV.L #_cm, R14
00000280 EDEFAD                  		MOV.L 02B4H[R14], R15
00000283 FC81EF97                		FSUB 025CH[R14].L, R15
00000287 7BFF                    		BCLR #1FH, R15
00000289 FD721FBD378635          		FCMP #358637BDH, R15
00000290 27rr                    		BN L83
00000292 2Err                 B  		BRA L85
00000294                         L82:	; bb267
                                 ;     140             (fp_EQ(cm.gmx.position[AXIS_Y], cm.gm.target[AXIS_Y])) &&
                                 ;     141             (fp_EQ(cm.gmx.position[AXIS_Z], cm.gm.target[AXIS_Z]))) {
                                 ;     142             return (STAT_ARC_ENDPOINT_IS_STARTING_POINT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",142
00000294 3C0A9F                  		MOV.B #9FH, 0AH[R0]
00000297 38rrrr               W  		BRA L119
0000029A                         L83:	; bb275
0000029A FBE2rrrrrrrr            		MOV.L #_cm, R14
000002A0 EDEFAE                  		MOV.L 02B8H[R14], R15
000002A3 FC81EF98                		FSUB 0260H[R14].L, R15
000002A7 7BFF                    		BCLR #1FH, R15
000002A9 FD721FBD378635          		FCMP #358637BDH, R15
000002B0 26rr                    		BPZ L85
000002B2                         L84:	; bb282
000002B2 3E0101                  		MOV.L #00000001H, 04H[R0]
000002B5 08                   S  		BRA L86
000002B6                         L85:	; bb283
000002B6 3E0100                  		MOV.L #00000000H, 04H[R0]
000002B9                         L86:	; bb284
000002B9 A809                    		MOV.L 04H[R0], R1
000002BB 6101                    		CMP #00H, R1
000002BD 20rr                    		BEQ L89
000002BF                         L87:	; bb288
000002BF FBE2rrrrrrrr            		MOV.L #_cm, R14
000002C5 EDEFAF                  		MOV.L 02BCH[R14], R15
000002C8 FC81EF99                		FSUB 0264H[R14].L, R15
000002CC 7BFF                    		BCLR #1FH, R15
000002CE FD721FBD378635          		FCMP #358637BDH, R15
000002D5 26rr                    		BPZ L89
000002D7                         L88:	; bb295
000002D7 3E0101                  		MOV.L #00000001H, 04H[R0]
000002DA 08                   S  		BRA L90
000002DB                         L89:	; bb296
000002DB 3E0100                  		MOV.L #00000000H, 04H[R0]
000002DE                         L90:	; bb297
000002DE A809                    		MOV.L 04H[R0], R1
000002E0 6101                    		CMP #00H, R1
000002E2 21rr                    		BNE L82
000002E4                         L91:	; bb308
                                 ;     143         }
                                 ;     144     }
                                 ;     145 
                                 ;     146     // now get down to the rest of the work setting up the arc for execution
                                 ;     147 	cm.gm.motion_mode = motion_mode;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",147
000002E4 FBE2rrrrrrrr            		MOV.L #_cm, R14
000002EA C90E135802              		MOV.B 13H[R0], 0258H[R14]
000002EF                         L92:	; bb308.split
                                 ;     148 	cm_set_work_offsets(&cm.gm);					// capture the fully resolved offsets to gm
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",148
000002EF FB12rrrrrrrr            		MOV.L #_cm, R1
000002F5 72115402                		ADD #0254H, R1
000002F9 05rrrrrr             A  		BSR _cm_set_work_offsets
000002FD                         L93:	; bb308.split12
                                 ;     149 	memcpy(&arc.gm, &cm.gm, sizeof(GCodeState_t));	// copy GCode context to arc singleton - some will be overwritten to run segments
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",149
000002FD FB22rrrrrrrr            		MOV.L #_cm, R2
00000303 72225402                		ADD #0254H, R2
00000307 FB12rrrrrrrr            		MOV.L #_arc, R1
0000030D 71116C                  		ADD #6CH, R1
00000310 75435C                  		MOV.L #0000005CH, R3
00000313 7F8F                    		SMOVF
00000315                         L94:	; bb308.split13
                                 ;     150 	copy_vector(arc.position, cm.gmx.position);		// set initial arc position from gcode model
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",150
00000315 FB22rrrrrrrr            		MOV.L #_cm, R2
0000031B 7222B402                		ADD #02B4H, R2
0000031F FB12rrrrrrrr            		MOV.L #_arc, R1
00000325 6241                    		ADD #04H, R1
00000327 754318                  		MOV.L #00000018H, R3
0000032A 7F8F                    		SMOVF
0000032C                         L95:	; bb308.split14
                                 ;     151 
                                 ;     152 	arc.radius = _to_millimeters(radius);			// set arc radius or zero
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",152
0000032C FBE2rrrrrrrr            		MOV.L #_cm, R14
00000332 5AEEA202                		MOVU.B 02A2H[R14], R14
00000336 610E                    		CMP #00H, R14
00000338 A909                    		MOV.L 14H[R0], R1
0000033A 21rr                    		BNE L97
0000033C                         L96:	; bb314
0000033C FD72313333CB41          		FMUL #41CB3333H, R1
00000343 E301                    		MOV.L R1, [R0]
00000345 08                   S  		BRA L98
00000346                         L97:	; bb317
00000346 E301                    		MOV.L R1, [R0]
00000348                         L98:	; bb320
00000348 FBE2rrrrrrrr            		MOV.L #_arc, R14
0000034E E40E0D                  		MOV.L [R0], 34H[R14]
                                 ;     153 
                                 ;     154 	arc.offset[0] = _to_millimeters(i);				// copy offsets with conversion to canonical form (mm)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",154
00000351 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000357 5AEEA202                		MOVU.B 02A2H[R14], R14
0000035B 610E                    		CMP #00H, R14
0000035D AA01                    		MOV.L 20H[R0], R1
0000035F 21rr                    		BNE L100
00000361                         L99:	; bb327
00000361 FD72313333CB41          		FMUL #41CB3333H, R1
00000368 E301                    		MOV.L R1, [R0]
0000036A 08                   S  		BRA L101
0000036B                         L100:	; bb330
0000036B E301                    		MOV.L R1, [R0]
0000036D                         L101:	; bb332
0000036D FBE2rrrrrrrr            		MOV.L #_arc, R14
00000373 E40E07                  		MOV.L [R0], 1CH[R14]
                                 ;     155 	arc.offset[1] = _to_millimeters(j);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",155
00000376 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000037C 5AEEA202                		MOVU.B 02A2H[R14], R14
00000380 610E                    		CMP #00H, R14
00000382 A989                    		MOV.L 1CH[R0], R1
00000384 21rr                    		BNE L103
00000386                         L102:	; bb339
00000386 FD72313333CB41          		FMUL #41CB3333H, R1
0000038D E301                    		MOV.L R1, [R0]
0000038F 08                   S  		BRA L104
00000390                         L103:	; bb342
00000390 E301                    		MOV.L R1, [R0]
00000392                         L104:	; bb344
00000392 FBE2rrrrrrrr            		MOV.L #_arc, R14
00000398 E40E08                  		MOV.L [R0], 20H[R14]
                                 ;     156 	arc.offset[2] = _to_millimeters(k);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",156
0000039B FBE2rrrrrrrr            		MOV.L #_cm, R14
000003A1 5AEEA202                		MOVU.B 02A2H[R14], R14
000003A5 610E                    		CMP #00H, R14
000003A7 A981                    		MOV.L 18H[R0], R1
000003A9 21rr                    		BNE L106
000003AB                         L105:	; bb351
000003AB FD72313333CB41          		FMUL #41CB3333H, R1
000003B2 E301                    		MOV.L R1, [R0]
000003B4 08                   S  		BRA L107
000003B5                         L106:	; bb354
000003B5 E301                    		MOV.L R1, [R0]
000003B7                         L107:	; bb356
000003B7 FB62rrrrrrrr            		MOV.L #_arc, R6
000003BD E40609                  		MOV.L [R0], 24H[R6]
                                 ;     157 
                                 ;     158 	arc.rotations = floor(fabs(cm.gn.parameter));   // P must be a positive integer - force it if not
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",158
000003C0 FBE2rrrrrrrr            		MOV.L #_cm, R14
000003C6 EDE1DE                  		MOV.L 0378H[R14], R1
000003C9 7BF1                    		BCLR #1FH, R1
000003CB 05rrrrrr             A  		BSR _floor
000003CF FD72110000004F          		FCMP #4F000000H, R1
000003D6 29rr                    		BLT L109
000003D8                         L108:	; bb356
000003D8 FD7221000080CF          		FADD #0CF800000H, R1
000003DF                         L109:	; bb356
000003DF FC9711                  		FTOI R1, R1
000003E2 A4E1                    		MOV.L R1, 48H[R6]
000003E4                         L110:	; bb356.split
                                 ;     159 
                                 ;     160 	// determine if this is a full circle arc. Evaluates true if no target is set
                                 ;     161 	arc.full_circle = (fp_ZERO(flags[arc.plane_axis_0]) & fp_ZERO(flags[arc.plane_axis_1]));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",161
000003E4 FBE2rrrrrrrr            		MOV.L #_arc, R14
000003EA 59EF4C                  		MOVU.B 4CH[R14], R15
000003ED AA09                    		MOV.L 24H[R0], R1
000003EF FE6F1F                  		MOV.L [R15,R1], R15
000003F2 7BFF                    		BCLR #1FH, R15
000003F4 FD721FBD378635          		FCMP #358637BDH, R15
000003FB FCDBF7                  		SCN.L R15
000003FE 59E54D                  		MOVU.B 4DH[R14], R5
00000401 FE6515                  		MOV.L [R5,R1], R5
00000404 7BF5                    		BCLR #1FH, R5
00000406 FD7215BD378635          		FCMP #358637BDH, R5
0000040D FCDB57                  		SCN.L R5
00000410 535F                    		AND R5, R15
00000412 C7EF44                  		MOV.B R15, 44H[R14]
00000415                         L111:	; bb356.split15
                                 ;     162 
                                 ;     163 	// compute arc runtime values
                                 ;     164 	ritorno(_compute_arc());
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",164
00000415 39rrrr               W  		BSR __$_compute_arc
00000418 FBE2rrrrrrrr            		MOV.L #_status_code, R14
0000041E C3E1                    		MOV.B R1, [R14]
00000420 6101                    		CMP #00H, R1
00000422 20rr                    		BEQ L113
00000424                         L112:	; bb382
00000424 FBE2rrrrrrrr            		MOV.L #_status_code, R14
0000042A C4E00A                  		MOV.B [R14], 0AH[R0]
0000042D 2Err                 B  		BRA L119
0000042F                         L113:	; bb392
                                 ;     165 
                                 ;     166 	if (fp_ZERO(arc.length)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",166
0000042F FB12rrrrrrrr            		MOV.L #_arc, R1
00000435 AA91                    		MOV.L 28H[R1], R1
00000437 7BF1                    		BCLR #1FH, R1
00000439 FD7211BD378635          		FCMP #358637BDH, R1
00000440 26rr                    		BPZ L115
00000442                         L114:	; bb393
                                 ;     167         return (STAT_MINIMUM_LENGTH_MOVE);          // trap zero length arcs that _compute_arc can throw
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",167
00000442 3C0AC9                  		MOV.B #0C9H, 0AH[R0]
00000445 2Err                 B  		BRA L119
00000447                         L115:	; bb400
                                 ;     168     }
                                 ;     169 
                                 ;     170 /*	// test arc soft limits
                                 ;     171 	stat_t status = _test_arc_soft_limits();
                                 ;     172 	if (status != STAT_OK) {
                                 ;     173     	cm.gm.motion_mode = MOTION_MODE_CANCEL_MOTION_MODE;
                                 ;     174     	copy_vector(cm.gm.target, cm.gmx.position);		// reset model position
                                 ;     175     	return (cm_soft_alarm(status));
                                 ;     176 	}
                                 ;     177 */
                                 ;     178 	cm_cycle_start();						// if not already started
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",178
00000447 05rrrrrr             A  		BSR _cm_cycle_start
0000044B                         L116:	; bb400.split
                                 ;     179 	arc.run_state = MOVE_RUN;				// enable arc to be run from the callback
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",179
0000044B FB12rrrrrrrr            		MOV.L #_arc, R1
00000451 3C1202                  		MOV.B #02H, 02H[R1]
00000454                         L117:	; bb400.split16
                                 ;     180 	cm_finalize_move();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",180
00000454 05rrrrrr             A  		BSR _cm_finalize_move
00000458                         L118:	; bb400.split17
                                 ;     181 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",181
00000458 3C0A00                  		MOV.B #00H, 0AH[R0]
0000045B                         L119:	; bb402
0000045B C5000A12                		MOV.B 0AH[R0], 12H[R0]
                                 ;     182 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",182
0000045F B481                    		MOVU.B 12H[R0], R1
00000461 3F660C                  		RTSD #30H, R6-R6
00000464                         _cm_arc_callback:
                                 		.STACK	_cm_arc_callback=20
                                 ;     183 
                                 ;     184 /*
                                 ;     185  * cm_arc_callback() - generate an arc
                                 ;     186  *
                                 ;     187  *	cm_arc_callback() is called from the controller main loop. Each time it's called it
                                 ;     188  *	queues as many arc segments (lines) as it can before it blocks, then returns.
                                 ;     189  *
                                 ;     190  *  Parts of this routine were originally sourced from the grbl project.
                                 ;     191  */
                                 ;     192 
                                 ;     193 stat_t cm_arc_callback()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",193
00000464 6E68                    		PUSHM R6-R8
00000466 6040                    		SUB #04H, R0
                                 ;     194 {
                                 ;     195 	if (arc.run_state == MOVE_OFF)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",195
00000468 FB12rrrrrrrr            		MOV.L #_arc, R1
0000046E B091                    		MOVU.B 02H[R1], R1
00000470 6101                    		CMP #00H, R1
00000472 18                   S  		BNE L122
00000473                         L121:	; bb1
                                 ;     196         return (STAT_NOOP);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",196
00000473 3C0203                  		MOV.B #03H, 02H[R0]
00000476 38rrrr               W  		BRA L134
00000479                         L122:	; bb8
                                 ;     197 
                                 ;     198 	if (mp_get_planner_buffers_available() < PLANNER_BUFFER_HEADROOM)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",198
00000479 05rrrrrr             A  		BSR _mp_get_planner_buffers_available
0000047D 6131                    		CMP #03H, R1
0000047F 2Arr                    		BGT L124
00000481                         L123:	; bb9
                                 ;     199         return (STAT_EAGAIN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",199
00000481 3C0202                  		MOV.B #02H, 02H[R0]
00000484 38rrrr               W  		BRA L134
00000487                         L124:	; bb16
                                 ;     200 
                                 ;     201 	arc.theta += arc.arc_segment_theta;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",201
00000487 FB12rrrrrrrr            		MOV.L #_arc, R1
0000048D AA9A                    		MOV.L 2CH[R1], R2
0000048F FC891217                		FADD 5CH[R1].L, R2
00000493 A29A                    		MOV.L R2, 2CH[R1]
00000495                         L125:	; bb16.split
                                 ;     202 	arc.gm.target[arc.plane_axis_0] = arc.center_0 + sin(arc.theta) * arc.radius;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",202
00000495 FB62rrrrrrrr            		MOV.L #_arc, R6
0000049B AAE9                    		MOV.L 2CH[R6], R1
0000049D AE6F                    		MOV.L 64H[R6], R7
0000049F 59684C                  		MOVU.B 4CH[R6], R8
000004A2 05rrrrrr             A  		BSR _sin
000004A6 FC8D610D                		FMUL 34H[R6].L, R1
000004AA 6C28                    		SHLL #02H, R8
000004AC 4B86                    		ADD R8, R6
000004AE FC8B17                  		FADD R1, R7
000004B1 A76F                    		MOV.L R7, 74H[R6]
000004B3                         L126:	; bb16.split1
                                 ;     203 	arc.gm.target[arc.plane_axis_1] = arc.center_1 + cos(arc.theta) * arc.radius;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",203
000004B3 FB62rrrrrrrr            		MOV.L #_arc, R6
000004B9 AAE9                    		MOV.L 2CH[R6], R1
000004BB AEE7                    		MOV.L 68H[R6], R7
000004BD 59684D                  		MOVU.B 4DH[R6], R8
000004C0 05rrrrrr             A  		BSR _cos
000004C4 FC8D610D                		FMUL 34H[R6].L, R1
000004C8 6C28                    		SHLL #02H, R8
000004CA 4B86                    		ADD R8, R6
000004CC FC8B17                  		FADD R1, R7
000004CF A76F                    		MOV.L R7, 74H[R6]
000004D1                         L127:	; bb16.split2
                                 ;     204 	arc.gm.target[arc.linear_axis] += arc.arc_segment_linear_travel;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",204
000004D1 FBE2rrrrrrrr            		MOV.L #_arc, R14
000004D7 59E14E                  		MOVU.B 4EH[R14], R1
000004DA 6C21                    		SHLL #02H, R1
000004DC 4BE1                    		ADD R14, R1
000004DE AF1A                    		MOV.L 74H[R1], R2
000004E0 FC89E218                		FADD 60H[R14].L, R2
000004E4 A71A                    		MOV.L R2, 74H[R1]
000004E6                         L128:	; bb16.split3
                                 ;     205 	mp_aline(&arc.gm);								// run the line
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",205
000004E6 FB12rrrrrrrr            		MOV.L #_arc, R1
000004EC 71116C                  		ADD #6CH, R1
000004EF 05rrrrrr             A  		BSR _mp_aline
000004F3                         L129:	; bb16.split4
                                 ;     206 	copy_vector(arc.position, arc.gm.target);		// update arc current position
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",206
000004F3 FB12rrrrrrrr            		MOV.L #_arc, R1
000004F9 711274                  		ADD #74H, R1, R2
000004FC 6241                    		ADD #04H, R1
000004FE 754318                  		MOV.L #00000018H, R3
00000501 7F8F                    		SMOVF
00000503                         L130:	; bb16.split5
                                 ;     207 
                                 ;     208 	if (--arc.arc_segment_count > 0)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",208
00000503 FB12rrrrrrrr            		MOV.L #_arc, R1
00000509 AD92                    		MOV.L 58H[R1], R2
0000050B 6012                    		SUB #01H, R2
0000050D A592                    		MOV.L R2, 58H[R1]
0000050F 6102                    		CMP #00H, R2
00000511 2Brr                    		BLE L132
00000513                         L131:	; bb47
                                 ;     209         return (STAT_EAGAIN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",209
00000513 3C0202                  		MOV.B #02H, 02H[R0]
00000516 2Err                 B  		BRA L134
00000518                         L132:	; bb55
                                 ;     210 	arc.run_state = MOVE_OFF;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",210
00000518 FB12rrrrrrrr            		MOV.L #_arc, R1
0000051E 3C1200                  		MOV.B #00H, 02H[R1]
00000521                         L133:	; bb55.split
                                 ;     211 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",211
00000521 3C0200                  		MOV.B #00H, 02H[R0]
00000524                         L134:	; bb57
00000524 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     212 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",212
00000528 B089                    		MOVU.B 03H[R0], R1
0000052A 3F6804                  		RTSD #10H, R6-R8
0000052D                         _cm_abort_arc:
                                 		.STACK	_cm_abort_arc=4
                                 ;     213 
                                 ;     214 /*
                                 ;     215  * cm_abort_arc() - stop arc movement without maintaining position
                                 ;     216  *
                                 ;     217  *	OK to call if no arc is running
                                 ;     218  */
                                 ;     219 
                                 ;     220 void cm_abort_arc()
                                 ;     221 {
                                 ;     222 	arc.run_state = MOVE_OFF;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",222
0000052D FB12rrrrrrrr            		MOV.L #_arc, R1
00000533 3C1200                  		MOV.B #00H, 02H[R1]
00000536 02                      		RTS
00000537                         __$_compute_arc:
                                 		.STACK	__$_compute_arc=52
                                 ;     223 }
                                 ;     224 
                                 ;     225 /*
                                 ;     226  * _compute_arc() - compute arc from I and J (arc center point)
                                 ;     227  *
                                 ;     228  *	The theta calculation sets up an clockwise or counterclockwise arc from the current
                                 ;     229  *	position to the target position around the center designated by the offset vector.
                                 ;     230  *	All theta-values measured in radians of deviance from the positive y-axis.
                                 ;     231  *
                                 ;     232  *                      | <- theta == 0
                                 ;     233  *                    * * *
                                 ;     234  *                  *       *
                                 ;     235  *                *           *
                                 ;     236  *                *     O ----T   <- theta_end (e.g. 90 degrees: theta_end == PI/2)
                                 ;     237  *                *   /
                                 ;     238  *                  C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
                                 ;     239  *
                                 ;     240  *  Parts of this routine were originally sourced from the grbl project.
                                 ;     241  */
                                 ;     242 
                                 ;     243 static stat_t _compute_arc()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",243
00000537 6E67                    		PUSHM R6-R7
00000539 7100D8                  		ADD #0FFFFFFD8H, R0
                                 ;     244 {
                                 ;     245 	// Compute radius. A non-zero radius value indicates a radius arc
                                 ;     246     if (fp_NOT_ZERO(arc.radius)) {                  // indicates a radius arc
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",246
0000053C FB12rrrrrrrr            		MOV.L #_arc, R1
00000542 AB19                    		MOV.L 34H[R1], R1
00000544 7BF1                    		BCLR #1FH, R1
00000546 FBE2BD378635            		MOV.L #358637BDH, R14
0000054C FC871E                  		FCMP R1, R14
0000054F 26rr                    		BPZ L138
00000551                         L137:	; bb8
                                 ;     247         _compute_arc_offsets_from_radius();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",247
00000551 39rrrr               W  		BSR __$_compute_arc_offsets_from_radius
00000554 2Err                 B  		BRA L139
00000556                         L138:	; bb10
                                 ;     248     } else {                                        // compute start radius
                                 ;     249         arc.radius = hypotf(-arc.offset[arc.plane_axis_0], -arc.offset[arc.plane_axis_1]);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",249
00000556 FB62rrrrrrrr            		MOV.L #_arc, R6
0000055C 596E4D                  		MOVU.B 4DH[R6], R14
0000055F 596F4C                  		MOVU.B 4CH[R6], R15
00000562 71651C                  		ADD #1CH, R6, R5
00000565 FE6E52                  		MOV.L [R14,R5], R2
00000568 FE6F51                  		MOV.L [R15,R5], R1
0000056B FDFFF2                  		BNOT #1FH, R2
0000056E FDFFF1                  		BNOT #1FH, R1
00000571 05rrrrrr             A  		BSR _hypotf
00000575 A369                    		MOV.L R1, 34H[R6]
00000577                         L139:	; bb26
                                 ;     250     }
                                 ;     251 
                                 ;     252     // Test arc specification for correctness according to:
                                 ;     253     // http://linuxcnc.org/docs/html/gcode/gcode.html#sec:G2-G3-Arc
                                 ;     254     // "It is an error if: when the arc is projected on the selected plane, the distance from
                                 ;     255     //  the current point to the center differs from the distance from the end point to the
                                 ;     256     //  center by more than (.05 inch/.5 mm) OR ((.0005 inch/.005mm) AND .1% of radius)."
                                 ;     257 
                                 ;     258     // Compute end radius from the center of circle (offsets) to target endpoint
                                 ;     259     float end_0 = arc.gm.target[arc.plane_axis_0] - arc.position[arc.plane_axis_0] - arc.offset[arc.plane_axis_0];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",259
00000577 FB12rrrrrrrr            		MOV.L #_arc, R1
0000057D 591E4C                  		MOVU.B 4CH[R1], R14
00000580 6C2E                    		SHLL #02H, R14
00000582 4BE1                    		ADD R14, R1
00000584 AF1A                    		MOV.L 74H[R1], R2
00000586 FC811201                		FSUB 04H[R1].L, R2
0000058A FC811207                		FSUB 1CH[R1].L, R2
0000058E A082                    		MOV.L R2, 08H[R0]
00000590                         L140:	; bb26.split
                                 ;     260     float end_1 = arc.gm.target[arc.plane_axis_1] - arc.position[arc.plane_axis_1] - arc.offset[arc.plane_axis_1];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",260
00000590 FB12rrrrrrrr            		MOV.L #_arc, R1
00000596 591E4D                  		MOVU.B 4DH[R1], R14
00000599 6C2E                    		SHLL #02H, R14
0000059B 4BE1                    		ADD R14, R1
0000059D AF1A                    		MOV.L 74H[R1], R2
0000059F FC811201                		FSUB 04H[R1].L, R2
000005A3 FC811207                		FSUB 1CH[R1].L, R2
000005A7 A08A                    		MOV.L R2, 0CH[R0]
000005A9                         L141:	; bb26.split1
                                 ;     261     float err = fabs(hypotf(end_0, end_1) - arc.radius);   // end radius - start radius
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",261
000005A9 A88A                    		MOV.L 0CH[R0], R2
000005AB A881                    		MOV.L 08H[R0], R1
000005AD 05rrrrrr             A  		BSR _hypotf
000005B1 FBE2rrrrrrrr            		MOV.L #_arc, R14
000005B7 FC81E10D                		FSUB 34H[R14].L, R1
000005BB 7BF1                    		BCLR #1FH, R1
000005BD A101                    		MOV.L R1, 10H[R0]
000005BF                         L142:	; bb26.split2
000005BF FBE20000803F            		MOV.L #3F800000H, R14
                                 ;     262     if ( (err > ARC_RADIUS_ERROR_MAX) ||
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",262
000005C5 FC850E04                		FCMP 10H[R0].L, R14
000005C9 27rr                    		BN L149
000005CB 08                   S  		BRA L144
000005CC                         L143:	; bb62
                                 ;     263         ((err > ARC_RADIUS_ERROR_MIN) && (err > arc.radius * ARC_RADIUS_TOLERANCE)) ) {
                                 ;     264 //        return (STAT_ARC_HAS_IMPOSSIBLE_CENTER_POINT);
                                 ;     265         return (STAT_ARC_SPECIFICATION_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",265
000005CC 3C079B                  		MOV.B #9BH, 07H[R0]
000005CF 38rrrr               W  		BRA L194
000005D2                         L144:	; bb67
000005D2 FBE20AD7A33B            		MOV.L #3BA3D70AH, R14
000005D8 FC850E04                		FCMP 10H[R0].L, R14
000005DC 26rr                    		BPZ L147
000005DE                         L145:	; bb71
000005DE FB12rrrrrrrr            		MOV.L #_arc, R1
000005E4 AB19                    		MOV.L 34H[R1], R1
000005E6 FD72316F12833A          		FMUL #3A83126FH, R1
000005ED FC850104                		FCMP 10H[R0].L, R1
000005F1 26rr                    		BPZ L147
000005F3                         L146:	; bb77
000005F3 F80601                  		MOV.L #00000001H, [R0]
000005F6 08                   S  		BRA L148
000005F7                         L147:	; bb78
000005F7 F80600                  		MOV.L #00000000H, [R0]
000005FA                         L148:	; bb79
000005FA EC01                    		MOV.L [R0], R1
000005FC 6101                    		CMP #00H, R1
000005FE 10                   S  		BEQ L150
000005FF                         L149:	; bb83
000005FF F80601                  		MOV.L #00000001H, [R0]
00000602 08                   S  		BRA L151
00000603                         L150:	; bb84
00000603 F80600                  		MOV.L #00000000H, [R0]
00000606                         L151:	; bb85
00000606 EC01                    		MOV.L [R0], R1
00000608 6101                    		CMP #00H, R1
0000060A 21rr                    		BNE L143
0000060C                         L152:	; bb90
                                 ;     266     }
                                 ;     267 
                                 ;     268 	// Calculate the theta (angle) of the current point (position)
                                 ;     269 	// arc.theta is angular starting point for the arc (also needed later for calculating center point)
                                 ;     270     arc.theta = atan2(-arc.offset[arc.plane_axis_0], -arc.offset[arc.plane_axis_1]);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",270
0000060C FB62rrrrrrrr            		MOV.L #_arc, R6
00000612 596E4D                  		MOVU.B 4DH[R6], R14
00000615 596F4C                  		MOVU.B 4CH[R6], R15
00000618 71651C                  		ADD #1CH, R6, R5
0000061B FE6E52                  		MOV.L [R14,R5], R2
0000061E FE6F51                  		MOV.L [R15,R5], R1
00000621 FDFFF2                  		BNOT #1FH, R2
00000624 FDFFF1                  		BNOT #1FH, R1
00000627 05rrrrrr             A  		BSR _atan2
0000062B A2E9                    		MOV.L R1, 2CH[R6]
0000062D                         L153:	; bb90.split
                                 ;     271 
                                 ;     272     // g18_correction is used to invert G18 XZ plane arcs for proper CW orientation
                                 ;     273     float g18_correction = (cm.gm.select_plane == CANON_PLANE_XZ) ? -1 : 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",273
0000062D FBE2rrrrrrrr            		MOV.L #_cm, R14
00000633 5AEEA102                		MOVU.B 02A1H[R14], R14
00000637 611E                    		CMP #01H, R14
00000639 18                   S  		BNE L155
0000063A                         L154:	; bb106
0000063A F806FF                  		MOV.L #0FFFFFFFFH, [R0]
0000063D 08                   S  		BRA L156
0000063E                         L155:	; bb107
0000063E F80601                  		MOV.L #00000001H, [R0]
00000641                         L156:	; bb108
00000641 06A01101                		ITOF [R0].L, R1
00000645 A109                    		MOV.L R1, 14H[R0]
                                 ;     274 
                                 ;     275 	if (arc.full_circle) {                                  // if full circle you can skip the stuff in the else clause
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",275
00000647 FBE2rrrrrrrr            		MOV.L #_arc, R14
0000064D 59EE44                  		MOVU.B 44H[R14], R14
00000650 610E                    		CMP #00H, R14
00000652 20rr                    		BEQ L163
00000654                         L157:	; bb113
                                 ;     276     	arc.angular_travel = 0;                             // angular travel always starts as zero for full circles
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",276
00000654 FB12rrrrrrrr            		MOV.L #_arc, R1
0000065A 3E1E00                  		MOV.L #00000000H, 38H[R1]
0000065D                         L158:	; bb113.split
                                 ;     277     	if (fp_ZERO(arc.rotations)) {                       // handle the valid case of a full circle arc w/P=0
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",277
0000065D FB12rrrrrrrr            		MOV.L #_arc, R1
00000663 AC91                    		MOV.L 48H[R1], R1
00000665 7DF1                    		BTST #1FH, R1
00000667 20rr                    		BEQ L160
00000669                         L159:	; bb113.split
00000669 FD811E                  		SHLR #01H, R1, R14
0000066C 6411                    		AND #01H, R1
0000066E 57E1                    		OR R14, R1
00000670 FC471E                  		ITOF R1, R14
00000673 FC8BEE                  		FADD R14, R14
00000676 08                   S  		BRA L161
00000677                         L160:	; bb113.split
00000677 FC471E                  		ITOF R1, R14
0000067A                         L161:	; bb113.split
0000067A 7BFE                    		BCLR #1FH, R14
0000067C FD721EBD378635          		FCMP #358637BDH, R14
00000683 27rr                  * 		BPZ L171
         38rrrr                  
00000688                         L162:	; bb115
                                 ;     278             arc.rotations = 1.0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",278
00000688 FB12rrrrrrrr            		MOV.L #_arc, R1
0000068E 3E9201                  		MOV.L #00000001H, 48H[R1]
00000691 38rrrr               W  		BRA L171
00000694                         L163:	; bb123
                                 ;     279         }
                                 ;     280     } else {                                                // ... it's not a full circle
                                 ;     281         arc.theta_end = atan2(end_0, end_1);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",281
00000694 A88A                    		MOV.L 0CH[R0], R2
00000696 A881                    		MOV.L 08H[R0], R1
00000698 05rrrrrr             A  		BSR _atan2
0000069C FB22rrrrrrrr            		MOV.L #_arc, R2
000006A2 A321                    		MOV.L R1, 30H[R2]
000006A4                         L164:	; bb123.split
                                 ;     282 
                                 ;     283         // Compute the angular travel
                                 ;     284         if (fp_EQ(arc.theta_end, arc.theta)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",284
000006A4 FB12rrrrrrrr            		MOV.L #_arc, R1
000006AA AB12                    		MOV.L 30H[R1], R2
000006AC FC81120B                		FSUB 2CH[R1].L, R2
000006B0 7BF2                    		BCLR #1FH, R2
000006B2 FD7212BD378635          		FCMP #358637BDH, R2
000006B9 26rr                    		BPZ L166
000006BB                         L165:	; bb128
                                 ;     285 	        arc.angular_travel = 0;                         // very large radii arcs can have zero angular travel (thanks PartKam)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",285
000006BB FB12rrrrrrrr            		MOV.L #_arc, R1
000006C1 3E1E00                  		MOV.L #00000000H, 38H[R1]
000006C4 2Err                 B  		BRA L171
000006C6                         L166:	; bb130
                                 ;     286         } else {
                                 ;     287 	        if (arc.theta_end < arc.theta) {                // make the difference positive so we have clockwise travel
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",287
000006C6 FB12rrrrrrrr            		MOV.L #_arc, R1
000006CC AB12                    		MOV.L 30H[R1], R2
000006CE FC85120B                		FCMP 2CH[R1].L, R2
000006D2 26rr                    		BPZ L168
000006D4                         L167:	; bb131
                                 ;     288                 arc.theta_end += (2*M_PI * g18_correction);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",288
000006D4 A909                    		MOV.L 14H[R0], R1
000006D6 FD7231DB0FC940          		FMUL #40C90FDBH, R1
000006DD FB22rrrrrrrr            		MOV.L #_arc, R2
000006E3 FC89210C                		FADD 30H[R2].L, R1
000006E7 A321                    		MOV.L R1, 30H[R2]
000006E9                         L168:	; bb141
                                 ;     289             }
                                 ;     290 	        arc.angular_travel = arc.theta_end - arc.theta; // compute positive angular travel
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",290
000006E9 FB12rrrrrrrr            		MOV.L #_arc, R1
000006EF AB12                    		MOV.L 30H[R1], R2
000006F1 FC81120B                		FSUB 2CH[R1].L, R2
000006F5 A392                    		MOV.L R2, 38H[R1]
000006F7                         L169:	; bb141.split
                                 ;     291     	    if (cm.gm.motion_mode == MOTION_MODE_CCW_ARC) { // reverse travel direction if it's CCW arc
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",291
000006F7 FBE2rrrrrrrr            		MOV.L #_cm, R14
000006FD 5AEE5802                		MOVU.B 0258H[R14], R14
00000701 613E                    		CMP #03H, R14
00000703 21rr                    		BNE L171
00000705                         L170:	; bb146
                                 ;     292                 arc.angular_travel -= (2*M_PI * g18_correction);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",292
00000705 A909                    		MOV.L 14H[R0], R1
00000707 FD7231DB0FC9C0          		FMUL #0C0C90FDBH, R1
0000070E FB22rrrrrrrr            		MOV.L #_arc, R2
00000714 FC89210E                		FADD 38H[R2].L, R1
00000718 A3A1                    		MOV.L R1, 38H[R2]
0000071A                         L171:	; bb171
                                 ;     293             }
                                 ;     294         }
                                 ;     295 	}
                                 ;     296 
                                 ;     297     // Add in travel for rotations
                                 ;     298     if (cm.gm.motion_mode == MOTION_MODE_CW_ARC) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",298
0000071A FB12rrrrrrrr            		MOV.L #_arc, R1
00000720 AC92                    		MOV.L 48H[R1], R2
00000722 7DF2                    		BTST #1FH, R2
00000724 20rr                    		BEQ L173
00000726                         L172:	; bb171
00000726 FD812E                  		SHLR #01H, R2, R14
00000729 6412                    		AND #01H, R2
0000072B 57E2                    		OR R14, R2
0000072D FC472E                  		ITOF R2, R14
00000730 FC8BEE                  		FADD R14, R14
00000733 08                   S  		BRA L174
00000734                         L173:	; bb171
00000734 FC472E                  		ITOF R2, R14
00000737                         L174:	; bb171
00000737 FD723EDB0FC940          		FMUL #40C90FDBH, R14
0000073E FC8D0E05                		FMUL 14H[R0].L, R14
00000742 FBF2rrrrrrrr            		MOV.L #_cm, R15
00000748 5AFF5802                		MOVU.B 0258H[R15], R15
0000074C 612F                    		CMP #02H, R15
0000074E AB91                    		MOV.L 38H[R1], R1
00000750 21rr                    		BNE L176
00000752                         L175:	; bb172
                                 ;     299         arc.angular_travel += (2*M_PI * arc.rotations * g18_correction);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",299
00000752 FC8BE1                  		FADD R14, R1
00000755 FBE2rrrrrrrr            		MOV.L #_arc, R14
0000075B E7E10E                  		MOV.L R1, 38H[R14]
0000075E 2Err                 B  		BRA L177
00000760                         L176:	; bb180
                                 ;     300     } else {
                                 ;     301         arc.angular_travel -= (2*M_PI * arc.rotations * g18_correction);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",301
00000760 FC83E1                  		FSUB R14, R1
00000763 FB22rrrrrrrr            		MOV.L #_arc, R2
00000769 A3A1                    		MOV.L R1, 38H[R2]
0000076B                         L177:	; bb193
                                 ;     302     }
                                 ;     303 
                                 ;     304 	// Calculate travel in the depth axis of the helix and compute the time it should take to perform the move
                                 ;     305 	// arc.length is the total mm of travel of the helix (or just a planar arc)
                                 ;     306 	arc.linear_travel = arc.gm.target[arc.linear_axis] - arc.position[arc.linear_axis];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",306
0000076B FB12rrrrrrrr            		MOV.L #_arc, R1
00000771 59124E                  		MOVU.B 4EH[R1], R2
00000774 6C22                    		SHLL #02H, R2
00000776 4B12                    		ADD R1, R2
00000778 AF2B                    		MOV.L 74H[R2], R3
0000077A FC812301                		FSUB 04H[R2].L, R3
0000077E A39B                    		MOV.L R3, 3CH[R1]
00000780                         L178:	; bb193.split
                                 ;     307 	arc.planar_travel = arc.angular_travel * arc.radius;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",307
00000780 FB12rrrrrrrr            		MOV.L #_arc, R1
00000786 AB92                    		MOV.L 38H[R1], R2
00000788 FC8D120D                		FMUL 34H[R1].L, R2
0000078C A412                    		MOV.L R2, 40H[R1]
0000078E                         L179:	; bb193.split3
                                 ;     308 	arc.length = hypotf(arc.planar_travel, arc.linear_travel);  // NB: hypot is insensitive to +/- signs
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",308
0000078E FB62rrrrrrrr            		MOV.L #_arc, R6
00000794 ABEA                    		MOV.L 3CH[R6], R2
00000796 AC61                    		MOV.L 40H[R6], R1
00000798 05rrrrrr             A  		BSR _hypotf
0000079C A2E1                    		MOV.L R1, 28H[R6]
0000079E                         L180:	; bb193.split4
                                 ;     309 	_estimate_arc_time();	// get an estimate of execution time to inform arc_segment calculation
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",309
0000079E 39rrrr               W  		BSR __$_estimate_arc_time
000007A1                         L181:	; bb193.split5
                                 ;     310 
                                 ;     311 	// Find the minimum number of arc_segments that meets these constraints...
                                 ;     312 	float arc_segments_for_chordal_accuracy = arc.length / sqrt(4*cm.chordal_tolerance * (2 * arc.radius - cm.chordal_tolerance));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",312
000007A1 FB12rrrrrrrr            		MOV.L #_cm, R1
000007A7 A891                    		MOV.L 08H[R1], R1
000007A9 FB22rrrrrrrr            		MOV.L #_arc, R2
000007AF AB2B                    		MOV.L 34H[R2], R3
000007B1 AAA6                    		MOV.L 28H[R2], R6
000007B3 FC8B33                  		FADD R3, R3
000007B6 FC8313                  		FSUB R1, R3
000007B9 FD723100008040          		FMUL #40800000H, R1
000007C0 FC8F31                  		FMUL R3, R1
000007C3 05rrrrrr             A  		BSR _sqrt
000007C7 FC9316                  		FDIV R1, R6
000007CA A186                    		MOV.L R6, 18H[R0]
000007CC                         L182:	; bb193.split6
                                 ;     313 	float arc_segments_for_minimum_distance = arc.length / cm.arc_segment_len;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",313
000007CC FB12rrrrrrrr            		MOV.L #_arc, R1
000007D2 AA91                    		MOV.L 28H[R1], R1
000007D4 FBE2rrrrrrrr            		MOV.L #_cm, R14
000007DA FC91E105                		FDIV 14H[R14].L, R1
000007DE A189                    		MOV.L R1, 1CH[R0]
000007E0                         L183:	; bb193.split7
                                 ;     314 	float arc_segments_for_minimum_time = arc.arc_time * MICROSECONDS_PER_MINUTE / MIN_ARC_SEGMENT_USEC;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",314
000007E0 FB12rrrrrrrr            		MOV.L #_arc, R1
000007E6 AD11                    		MOV.L 50H[R1], R1
000007E8 FD7231C0E1644C          		FMUL #4C64E1C0H, R1
000007EF FD724100401C46          		FDIV #461C4000H, R1
000007F6 A201                    		MOV.L R1, 20H[R0]
000007F8                         L184:	; bb193.split8
                                 ;     315 
                                 ;     316 	arc.arc_segments = floor(min3(arc_segments_for_chordal_accuracy,
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",316
000007F8 AA03                    		MOV.L 20H[R0], R3
000007FA A98A                    		MOV.L 1CH[R0], R2
000007FC A981                    		MOV.L 18H[R0], R1
000007FE 05rrrrrr             A  		BSR _min3
00000802 05rrrrrr             A  		BSR _floor
00000806 FB22rrrrrrrr            		MOV.L #_arc, R2
0000080C A529                    		MOV.L R1, 54H[R2]
0000080E                         L185:	; bb193.split9
                                 ;     317 							      arc_segments_for_minimum_distance,
                                 ;     318 							      arc_segments_for_minimum_time));
                                 ;     319 
                                 ;     320 	arc.arc_segments = fmaxf(arc.arc_segments, 1);            //...but is at least 1 arc_segment
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",320
0000080E FB62rrrrrrrr            		MOV.L #_arc, R6
00000814 AD69                    		MOV.L 54H[R6], R1
00000816 FB220000803F            		MOV.L #3F800000H, R2
0000081C 05rrrrrr             A  		BSR _fmaxf
00000820 A569                    		MOV.L R1, 54H[R6]
00000822                         L186:	; bb193.split10
                                 ;     321  	arc.gm.move_time = arc.arc_time / arc.arc_segments;     // gcode state struct gets arc_segment_time, not arc time
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",321
00000822 FB12rrrrrrrr            		MOV.L #_arc, R1
00000828 AD12                    		MOV.L 50H[R1], R2
0000082A FC911215                		FDIV 54H[R1].L, R2
0000082E E71229                  		MOV.L R2, 0A4H[R1]
00000831                         L187:	; bb193.split11
                                 ;     322 	arc.arc_segment_count = (int32_t)arc.arc_segments;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",322
00000831 FB12rrrrrrrr            		MOV.L #_arc, R1
00000837 FC951215                		FTOI 54H[R1].L, R2
0000083B A592                    		MOV.L R2, 58H[R1]
0000083D                         L188:	; bb193.split12
                                 ;     323 	arc.arc_segment_theta = arc.angular_travel / arc.arc_segments;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",323
0000083D FB12rrrrrrrr            		MOV.L #_arc, R1
00000843 AB92                    		MOV.L 38H[R1], R2
00000845 FC911215                		FDIV 54H[R1].L, R2
00000849 A59A                    		MOV.L R2, 5CH[R1]
0000084B                         L189:	; bb193.split13
                                 ;     324 	arc.arc_segment_linear_travel = arc.linear_travel / arc.arc_segments;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",324
0000084B FB12rrrrrrrr            		MOV.L #_arc, R1
00000851 AB9A                    		MOV.L 3CH[R1], R2
00000853 FC911215                		FDIV 54H[R1].L, R2
00000857 A612                    		MOV.L R2, 60H[R1]
00000859                         L190:	; bb193.split14
                                 ;     325     arc.center_0 = arc.position[arc.plane_axis_0] - sin(arc.theta) * arc.radius;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",325
00000859 FB62rrrrrrrr            		MOV.L #_arc, R6
0000085F 59624C                  		MOVU.B 4CH[R6], R2
00000862 6C22                    		SHLL #02H, R2
00000864 AAE9                    		MOV.L 2CH[R6], R1
00000866 4B62                    		ADD R6, R2
00000868 A82F                    		MOV.L 04H[R2], R7
0000086A 05rrrrrr             A  		BSR _sin
0000086E FC8D610D                		FMUL 34H[R6].L, R1
00000872 FC8317                  		FSUB R1, R7
00000875 A66F                    		MOV.L R7, 64H[R6]
00000877                         L191:	; bb193.split15
                                 ;     326     arc.center_1 = arc.position[arc.plane_axis_1] - cos(arc.theta) * arc.radius;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",326
00000877 FB62rrrrrrrr            		MOV.L #_arc, R6
0000087D 59624D                  		MOVU.B 4DH[R6], R2
00000880 6C22                    		SHLL #02H, R2
00000882 AAE9                    		MOV.L 2CH[R6], R1
00000884 4B62                    		ADD R6, R2
00000886 A82F                    		MOV.L 04H[R2], R7
00000888 05rrrrrr             A  		BSR _cos
0000088C FC8D610D                		FMUL 34H[R6].L, R1
00000890 FC8317                  		FSUB R1, R7
00000893 A6E7                    		MOV.L R7, 68H[R6]
00000895                         L192:	; bb193.split16
                                 ;     327 	arc.gm.target[arc.linear_axis] = arc.position[arc.linear_axis];	// initialize the linear target
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",327
00000895 FBE2rrrrrrrr            		MOV.L #_arc, R14
0000089B 59EF4E                  		MOVU.B 4EH[R14], R15
0000089E 6C2F                    		SHLL #02H, R15
000008A0 4BFE                    		ADD R15, R14
000008A2 E5EE011D                		MOV.L 04H[R14], 74H[R14]
000008A6                         L193:	; bb193.split17
                                 ;     328 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",328
000008A6 3C0700                  		MOV.B #00H, 07H[R0]
000008A9                         L194:	; bb269
000008A9 C5000727                		MOV.B 07H[R0], 27H[R0]
                                 ;     329 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",329
000008AD 590127                  		MOVU.B 27H[R0], R1
000008B0 3F670C                  		RTSD #30H, R6-R7
000008B3                         __$_compute_arc_offsets_from_radius:
                                 		.STACK	__$_compute_arc_offsets_from_radius=32
                                 ;     330 
                                 ;     331 /*
                                 ;     332  * _compute_arc_offsets_from_radius() - compute arc center (offset) from radius.
                                 ;     333  *
                                 ;     334  *  Needs to calculate the center of the circle that has the designated radius and
                                 ;     335  *	passes through both the current position and the target position
                                 ;     336  *
                                 ;     337  *	This method calculates the following set of equations where:
                                 ;     338  *	`  [x,y] is the vector from current to target position,
                                 ;     339  *		d == magnitude of that vector,
                                 ;     340  *		h == hypotenuse of the triangle formed by the radius of the circle,
                                 ;     341  *			 the distance to the center of the travel vector.
                                 ;     342  *
                                 ;     343  *	A vector perpendicular to the travel vector [-y,x] is scaled to the length
                                 ;     344  *	of h [-y/d*h, x/d*h] and added to the center of the travel vector [x/2,y/2]
                                 ;     345  *	to form the new point [i,j] at [x/2-y/d*h, y/2+x/d*h] which will be the
                                 ;     346  *	center of the arc.
                                 ;     347  *
                                 ;     348  *		d^2 == x^2 + y^2
                                 ;     349  *		h^2 == r^2 - (d/2)^2
                                 ;     350  *		i == x/2 - y/d*h
                                 ;     351  *		j == y/2 + x/d*h
                                 ;     352  *                                        O <- [i,j]
                                 ;     353  *                                     -  |
                                 ;     354  *                           r      -     |
                                 ;     355  *                               -        |
                                 ;     356  *                            -           | h
                                 ;     357  *                         -              |
                                 ;     358  *           [0,0] ->  C -----------------+--------------- T  <- [x,y]
                                 ;     359  *                     | <------ d/2 ---->|
                                 ;     360  *
                                 ;     361  *		C - Current position
                                 ;     362  *		T - Target position
                                 ;     363  *		O - center of circle that pass through both C and T
                                 ;     364  *		d - distance from C to T
                                 ;     365  *		r - designated radius
                                 ;     366  *		h - distance from center of CT to O
                                 ;     367  *
                                 ;     368  *	Expanding the equations:
                                 ;     369  *		d -> sqrt(x^2 + y^2)
                                 ;     370  *		h -> sqrt(4 * r^2 - x^2 - y^2)/2
                                 ;     371  *		i -> (x - (y * sqrt(4 * r^2 - x^2 - y^2)) / sqrt(x^2 + y^2)) / 2
                                 ;     372  *		j -> (y + (x * sqrt(4 * r^2 - x^2 - y^2)) / sqrt(x^2 + y^2)) / 2
                                 ;     373  *
                                 ;     374  *	Which can be written:
                                 ;     375  *		i -> (x - (y * sqrt(4 * r^2 - x^2 - y^2))/sqrt(x^2 + y^2))/2
                                 ;     376  *		j -> (y + (x * sqrt(4 * r^2 - x^2 - y^2))/sqrt(x^2 + y^2))/2
                                 ;     377  *
                                 ;     378  *	Which we for size and speed reasons optimize to:
                                 ;     379  *		h_x2_div_d = sqrt(4 * r^2 - x^2 - y^2)/sqrt(x^2 + y^2)
                                 ;     380  *		i = (x - (y * h_x2_div_d))/2
                                 ;     381  *		j = (y + (x * h_x2_div_d))/2
                                 ;     382  *
                                 ;     383  * ----Computing clockwise vs counter-clockwise motion ----
                                 ;     384  *
                                 ;     385  *	The counter clockwise circle lies to the left of the target direction.
                                 ;     386  *	When offset is positive the left hand circle will be generated -
                                 ;     387  *	when it is negative the right hand circle is generated.
                                 ;     388  *
                                 ;     389  *                                   T  <-- Target position
                                 ;     390  *
                                 ;     391  *                                   ^
                                 ;     392  *      Clockwise circles with       |     Clockwise circles with
                                 ;     393  *		this center will have        |     this center will have
                                 ;     394  *      > 180 deg of angular travel  |     < 180 deg of angular travel,
                                 ;     395  *                        \          |      which is a good thing!
                                 ;     396  *                         \         |         /
                                 ;     397  *  center of arc when  ->  x <----- | -----> x <- center of arc when
                                 ;     398  *  h_x2_div_d is positive           |             h_x2_div_d is negative
                                 ;     399  *                                   |
                                 ;     400  *                                   C  <-- Current position
                                 ;     401  *
                                 ;     402  *
                                 ;     403  *	Assumes arc singleton has been pre-loaded with target and position.
                                 ;     404  *	Parts of this routine were originally sourced from the grbl project.
                                 ;     405  */
                                 ;     406 static stat_t _compute_arc_offsets_from_radius()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",406
000008B3 7EA6                    		PUSH.L R6
000008B5 7100E8                  		ADD #0FFFFFFE8H, R0
                                 ;     407 {
                                 ;     408 	// Calculate the change in position along each selected axis
                                 ;     409 	float x = cm.gm.target[arc.plane_axis_0] - cm.gmx.position[arc.plane_axis_0];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",409
000008B8 FBE2rrrrrrrr            		MOV.L #_arc, R14
000008BE 59EE4C                  		MOVU.B 4CH[R14], R14
000008C1 6C2E                    		SHLL #02H, R14
000008C3 FBF2rrrrrrrr            		MOV.L #_cm, R15
000008C9 4BEF                    		ADD R14, R15
000008CB EDF197                  		MOV.L 025CH[R15], R1
000008CE FC81F1AD                		FSUB 02B4H[R15].L, R1
000008D2 A009                    		MOV.L R1, 04H[R0]
000008D4                         L196:	; entry.split
                                 ;     410 	float y = cm.gm.target[arc.plane_axis_1] - cm.gmx.position[arc.plane_axis_1];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",410
000008D4 FBE2rrrrrrrr            		MOV.L #_arc, R14
000008DA 59EE4D                  		MOVU.B 4DH[R14], R14
000008DD 6C2E                    		SHLL #02H, R14
000008DF FBF2rrrrrrrr            		MOV.L #_cm, R15
000008E5 4BEF                    		ADD R14, R15
000008E7 EDF197                  		MOV.L 025CH[R15], R1
000008EA FC81F1AD                		FSUB 02B4H[R15].L, R1
000008EE A081                    		MOV.L R1, 08H[R0]
000008F0                         L197:	; entry.split1
                                 ;     411 
                                 ;     412 	// *** From Forrest Green - Other Machine Co, 3/27/14
                                 ;     413 	// If the distance between endpoints is greater than the arc diameter, disc
                                 ;     414 	// will be negative indicating that the arc is offset into the complex plane
                                 ;     415 	// beyond the reach of any real CNC. However, numerical errors can flip the
                                 ;     416 	// sign of disc as it approaches zero (which happens as the arc angle approaches
                                 ;     417 	// 180 degrees). To avoid mishandling these arcs we use the closest real
                                 ;     418 	// solution (which will be 0 when disc <= 0). This risks obscuring g-code errors
                                 ;     419 	// where the radius is actually too small (they will be treated as half circles),
                                 ;     420 	// but ensures that all valid arcs end up reasonably close to their intended
                                 ;     421 	// paths regardless of any numerical issues.
                                 ;     422 	float disc = 4 * square(arc.radius) - (square(x) + square(y));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",422
000008F0 A809                    		MOV.L 04H[R0], R1
000008F2 FC8F11                  		FMUL R1, R1
000008F5 A882                    		MOV.L 08H[R0], R2
000008F7 FC8F22                  		FMUL R2, R2
000008FA FC8B21                  		FADD R2, R1
000008FD FB22rrrrrrrr            		MOV.L #_arc, R2
00000903 AB2A                    		MOV.L 34H[R2], R2
00000905 FC8F22                  		FMUL R2, R2
00000908 FD723200008040          		FMUL #40800000H, R2
0000090F FC8312                  		FSUB R1, R2
00000912 A08A                    		MOV.L R2, 0CH[R0]
00000914                         L198:	; entry.split2
00000914 660E                    		MOV.L #00000000H, R14
                                 ;     423 
                                 ;     424 	// h_x2_div_d == -(h * 2 / d)
                                 ;     425 	float h_x2_div_d = (disc > 0) ? -sqrt(disc) / hypotf(x,y) : 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",425
00000916 FC850E03                		FCMP 0CH[R0].L, R14
0000091A 26rr                    		BPZ L200
0000091C                         L199:	; bb
0000091C A889                    		MOV.L 0CH[R0], R1
0000091E 05rrrrrr             A  		BSR _sqrt
00000922 EF16                    		MOV.L R1, R6
00000924 A882                    		MOV.L 08H[R0], R2
00000926 A809                    		MOV.L 04H[R0], R1
00000928 05rrrrrr             A  		BSR _hypotf
0000092C FDFFF6                  		BNOT #1FH, R6
0000092F FC9316                  		FDIV R1, R6
00000932 E306                    		MOV.L R6, [R0]
00000934 08                   S  		BRA L201
00000935                         L200:	; bb45
00000935 F80600                  		MOV.L #00000000H, [R0]
00000938                         L201:	; bb46
00000938 E40004                  		MOV.L [R0], 10H[R0]
                                 ;     426 
                                 ;     427 	// Invert the sign of h_x2_div_d if circle is counter clockwise (see header notes)
                                 ;     428 	if (cm.gm.motion_mode == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",428
0000093B FBE2rrrrrrrr            		MOV.L #_cm, R14
00000941 5AEE5802                		MOVU.B 0258H[R14], R14
00000945 613E                    		CMP #03H, R14
00000947 18                   S  		BNE L203
00000948                         L202:	; bb49
00000948 A901                    		MOV.L 10H[R0], R1
0000094A FDFFF1                  		BNOT #1FH, R1
0000094D A101                    		MOV.L R1, 10H[R0]
0000094F                         L203:	; bb58
                                 ;     429 
                                 ;     430 	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
                                 ;     431 	// of travel" (go figure!), even though it is advised against ever generating
                                 ;     432 	// such circles in a single line of g-code. By inverting the sign of
                                 ;     433 	// h_x2_div_d the center of the circles is placed on the opposite side of
                                 ;     434 	// the line of travel and thus we get the unadvisably long arcs as prescribed.
                                 ;     435 	if (arc.radius < 0) { h_x2_div_d = -h_x2_div_d; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",435
0000094F FB12rrrrrrrr            		MOV.L #_arc, R1
00000955 AB19                    		MOV.L 34H[R1], R1
00000957 FD721100000000          		FCMP #00000000H, R1
0000095E 26rr                    		BPZ L205
00000960                         L204:	; bb59
00000960 A901                    		MOV.L 10H[R0], R1
00000962 FDFFF1                  		BNOT #1FH, R1
00000965 A101                    		MOV.L R1, 10H[R0]
00000967                         L205:	; bb66
                                 ;     436 
                                 ;     437 	// Complete the operation by calculating the actual center of the arc
                                 ;     438 	arc.offset[arc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",438
00000967 FB12rrrrrrrr            		MOV.L #_arc, R1
0000096D 591E4C                  		MOVU.B 4CH[R1], R14
00000970 6C2E                    		SHLL #02H, R14
00000972 4BE1                    		ADD R14, R1
00000974 A882                    		MOV.L 08H[R0], R2
00000976 FC8D0204                		FMUL 10H[R0].L, R2
0000097A A80B                    		MOV.L 04H[R0], R3
0000097C FC8323                  		FSUB R2, R3
0000097F FD724300000040          		FDIV #40000000H, R3
00000986 A19B                    		MOV.L R3, 1CH[R1]
00000988                         L206:	; bb66.split
                                 ;     439 	arc.offset[arc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",439
00000988 FB12rrrrrrrr            		MOV.L #_arc, R1
0000098E 591E4D                  		MOVU.B 4DH[R1], R14
00000991 6C2E                    		SHLL #02H, R14
00000993 4BE1                    		ADD R14, R1
00000995 A80A                    		MOV.L 04H[R0], R2
00000997 FC8D0204                		FMUL 10H[R0].L, R2
0000099B FC890202                		FADD 08H[R0].L, R2
0000099F FD724200000040          		FDIV #40000000H, R2
000009A6 A19A                    		MOV.L R2, 1CH[R1]
000009A8                         L207:	; bb66.split3
                                 ;     440 	arc.offset[arc.linear_axis] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",440
000009A8 FB12rrrrrrrr            		MOV.L #_arc, R1
000009AE 591E4E                  		MOVU.B 4EH[R1], R14
000009B1 6C2E                    		SHLL #02H, R14
000009B3 4BE1                    		ADD R14, R1
000009B5 3E1700                  		MOV.L #00000000H, 1CH[R1]
000009B8                         L208:	; bb66.split4
                                 ;     441 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",441
000009B8 3C8700                  		MOV.B #00H, 17H[R0]
000009BB B589                    		MOVU.B 17H[R0], R1
000009BD                         L209:	; bb66.split5
                                 ;     442 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",442
000009BD 5B11                    		MOVU.B R1, R1
000009BF 3F6607                  		RTSD #1CH, R6-R6
000009C2                         __$_estimate_arc_time:
                                 		.STACK	__$_estimate_arc_time=8
                                 ;     443 
                                 ;     444 /*
                                 ;     445  * _estimate_arc_time ()
                                 ;     446  *
                                 ;     447  *	Returns a naiive estimate of arc execution time to inform segment calculation.
                                 ;     448  *	The arc time is computed not to exceed the time taken in the slowest dimension
                                 ;     449  *	in the arc plane or in linear travel. Maximum feed rates are compared in each
                                 ;     450  *	dimension, but the comparison assumes that the arc will have at least one segment
                                 ;     451  *	where the unit vector is 1 in that dimension. This is not true for any arbitrary arc,
                                 ;     452  *	with the result that the time returned may be less than optimal.
                                 ;     453  */
                                 ;     454 static void _estimate_arc_time ()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",454
000009C2 7EA6                    		PUSH.L R6
                                 ;     455 {
                                 ;     456 	// Determine move time at requested feed rate
                                 ;     457 	if (cm.gm.feed_rate_mode == INVERSE_TIME_MODE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",457
000009C4 FBE2rrrrrrrr            		MOV.L #_cm, R14
000009CA 5AEEA002                		MOVU.B 02A0H[R14], R14
000009CE 610E                    		CMP #00H, R14
000009D0 21rr                    		BNE L214
000009D2                         L211:	; bb1
                                 ;     458 		arc.arc_time = cm.gm.feed_rate;	                // inverse feed rate has been normalized to minutes
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",458
000009D2 FBE2rrrrrrrr            		MOV.L #_arc, R14
000009D8 FBF2rrrrrrrr            		MOV.L #_cm, R15
000009DE E5FEA514                		MOV.L 0294H[R15], 50H[R14]
000009E2                         L212:	; bb1.split
                                 ;     459 		cm.gm.feed_rate = 0;                            // reset feed rate so next block requires an explicit feed rate setting
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",459
000009E2 FBE2rrrrrrrr            		MOV.L #_cm, R14
000009E8 F9E6A500                		MOV.L #00000000H, 0294H[R14]
000009EC                         L213:	; bb1.split1
                                 ;     460 		cm.gm.feed_rate_mode = UNITS_PER_MINUTE_MODE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",460
000009EC FBE2rrrrrrrr            		MOV.L #_cm, R14
000009F2 FAE4A00201              		MOV.B #01H, 02A0H[R14]
000009F7 2Err                 B  		BRA L215
000009F9                         L214:	; bb2
                                 ;     461 	} else {
                                 ;     462 		arc.arc_time = arc.length / cm.gm.feed_rate;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",462
000009F9 FB12rrrrrrrr            		MOV.L #_arc, R1
000009FF AA92                    		MOV.L 28H[R1], R2
00000A01 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000A07 FC91E2A5                		FDIV 0294H[R14].L, R2
00000A0B A512                    		MOV.L R2, 50H[R1]
00000A0D                         L215:	; bb10
                                 ;     463 	}
                                 ;     464 
                                 ;     465 	// Downgrade the time if there is a rate-limiting axis
                                 ;     466 	arc.arc_time = fmaxf(arc.arc_time, arc.planar_travel/cm.a[arc.plane_axis_0].feedrate_max);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",466
00000A0D FB62rrrrrrrr            		MOV.L #_arc, R6
00000A13 596E4C                  		MOVU.B 4CH[R6], R14
00000A16 751E38                  		MUL #38H, R14
00000A19 FBF2rrrrrrrr            		MOV.L #_cm, R15
00000A1F 4BEF                    		ADD R14, R15
00000A21 AC62                    		MOV.L 40H[R6], R2
00000A23 FC91F234                		FDIV 0D0H[R15].L, R2
00000A27 AD61                    		MOV.L 50H[R6], R1
00000A29 05rrrrrr             A  		BSR _fmaxf
00000A2D A561                    		MOV.L R1, 50H[R6]
00000A2F                         L216:	; bb10.split
                                 ;     467 	arc.arc_time = fmaxf(arc.arc_time, arc.planar_travel/cm.a[arc.plane_axis_1].feedrate_max);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",467
00000A2F FB62rrrrrrrr            		MOV.L #_arc, R6
00000A35 596E4D                  		MOVU.B 4DH[R6], R14
00000A38 751E38                  		MUL #38H, R14
00000A3B FBF2rrrrrrrr            		MOV.L #_cm, R15
00000A41 4BEF                    		ADD R14, R15
00000A43 AC62                    		MOV.L 40H[R6], R2
00000A45 FC91F234                		FDIV 0D0H[R15].L, R2
00000A49 AD61                    		MOV.L 50H[R6], R1
00000A4B 05rrrrrr             A  		BSR _fmaxf
00000A4F A561                    		MOV.L R1, 50H[R6]
00000A51                         L217:	; bb10.split2
                                 ;     468 	if (fabs(arc.linear_travel) > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",468
00000A51 FB12rrrrrrrr            		MOV.L #_arc, R1
00000A57 AB99                    		MOV.L 3CH[R1], R1
00000A59 7BF1                    		BCLR #1FH, R1
00000A5B 660E                    		MOV.L #00000000H, R14
00000A5D FC871E                  		FCMP R1, R14
00000A60 26rr                    		BPZ L219
00000A62                         L218:	; bb30
                                 ;     469 		arc.arc_time = fmaxf(arc.arc_time, fabs(arc.linear_travel/cm.a[arc.linear_axis].feedrate_max));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",469
00000A62 FB62rrrrrrrr            		MOV.L #_arc, R6
00000A68 596E4E                  		MOVU.B 4EH[R6], R14
00000A6B 751E38                  		MUL #38H, R14
00000A6E FBF2rrrrrrrr            		MOV.L #_cm, R15
00000A74 4BEF                    		ADD R14, R15
00000A76 ABEA                    		MOV.L 3CH[R6], R2
00000A78 FC91F234                		FDIV 0D0H[R15].L, R2
00000A7C AD61                    		MOV.L 50H[R6], R1
00000A7E 7BF2                    		BCLR #1FH, R2
00000A80 05rrrrrr             A  		BSR _fmaxf
00000A84 A561                    		MOV.L R1, 50H[R6]
00000A86 3F6601                  		RTSD #04H, R6-R6
00000A89                         L219:	; return
                                 ;     470 	}
                                 ;     471 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\plan_arc.c",471
00000A89 3F6601                  		RTSD #04H, R6-R6
                                 ;     472 
                                 ;     473 /*
                                 ;     474  * _test_arc_soft_limits() - return error status if soft limit is exceeded
                                 ;     475  *
                                 ;     476  *	Test if arc extends beyond arc plane boundaries set in soft limits.
                                 ;     477  *
                                 ;     478  *	The arc starting position (P) and target (T) define 2 points that divide the
                                 ;     479  *	arc plane into 9 rectangles. The center of the arc is (C). P and T define the
                                 ;     480  *	endpoints of two possible arcs; one that is less than or equal to 180 degrees (acute)
                                 ;     481  *	and one that is greater than 180 degrees (obtuse), depending on the location of (C).
                                 ;     482  *
                                 ;     483  *	-------------------------------  plane boundaries in X and Y
                                 ;     484  *  |         |         |         |
                                 ;     485  *  |    1    |    2    |    3    |
                                 ;     486  *  |                   |         |
                                 ;     487  *	--------- P -------------------
                                 ;     488  *  |                   |         |
                                 ;     489  *  |    4    |    5    |    6    |
                                 ;     490  *  |         |                   |
                                 ;     491  *	------------------- T ---------
                                 ;     492  *  |        C|                   |  C shows one of many possible center locations
                                 ;     493  *  |    7    |    8    |    9    |
                                 ;     494  *  |         |         |         |
                                 ;     495  *	-------------------------------
                                 ;     496  *
                                 ;     497  *	C will fall along a diagonal bisecting 7, 5 and 3, but there is some tolerance in the
                                 ;     498  *	circle algorithm that allows C to deviate from the centerline slightly. As the centerline
                                 ;     499  *	approaches the line connecting S and T the acute arcs will be "above" S and T in sections
                                 ;     500  *	5 or 3, and the obtuse arcs will be "below" in sections 5 or 7. But it's simpler, because
                                 ;     501  *	we know that the arc is > 180 degrees (obtuse) if the angular travel value is > pi.
                                 ;     502  *
                                 ;     503  *	The example below only tests the X axis (0 plane axis), but testing the other axes is similar
                                 ;     504  *
                                 ;     505  *	  (1) If Cx <= Px and arc is acute; no test is needed
                                 ;     506  *
                                 ;     507  *	  (2) If Cx <= Px and arc is obtuse; test if the radius is greater than
                                 ;     508  *			the distance from Cx to the negative X boundary
                                 ;     509  *
                                 ;     510  *	  (3) If Px < Cx < Tx and arc is acute; test if the radius is greater than
                                 ;     511  *			the distance from Cx to the positive X boundary
                                 ;     512  *
                                 ;     513  *	  (4) If Px < Cx < Tx and arc is obtuse; test if the radius is greater than
                                 ;     514  *			the distance from Cx to the positive X boundary
                                 ;     515  *
                                 ;     516  *	The arc plane is defined by 0 and 1 depending on G17/G18/G19 plane selected,
                                 ;     517  *	corresponding to arc planes XY, XZ, YZ, respectively.
                                 ;     518  *
                                 ;     519  *	Must be called with all the following set in the arc struct
                                 ;     520  *	  -	arc starting position (arc.position)
                                 ;     521  *	  - arc ending position (arc.gm.target)
                                 ;     522  *	  - arc center (arc.center_0, arc.center_1)
                                 ;     523  *	  - arc.radius (arc.radius)
                                 ;     524  *	  - arc angular travel in radians (arc.angular_travel)
                                 ;     525  *	  - max and min travel in axis 0 and axis 1 (in cm struct)
                                 ;     526  */
                                 ;     527 /* UNUSED
                                 ;     528 static stat_t _test_arc_soft_limit_plane_axis(float center, uint8_t plane_axis)
                                 ;     529 {
                                 ;     530 	if (center <= arc.position[plane_axis]) {
                                 ;     531 		if (arc.angular_travel < M_PI) {							// case (1)
                                 ;     532 			return (STAT_OK);
                                 ;     533 		}
                                 ;     534 		if ((center - arc.radius) < cm.a[plane_axis].travel_min) {	// case (2)
                                 ;     535 			return (STAT_SOFT_LIMIT_EXCEEDED);
                                 ;     536 		}
                                 ;     537 	}
                                 ;     538 	if ((center + arc.radius) > cm.a[plane_axis].travel_max) {		// cases (3) and (4)
                                 ;     539 		return (STAT_SOFT_LIMIT_EXCEEDED);
                                 ;     540 	}
                                 ;     541 	return(STAT_OK);
                                 ;     542 }
                                 ;     543 
                                 ;     544 static stat_t _test_arc_soft_limits()
                                 ;     545 {
                                 ;     546 	if (cm.soft_limit_enable == true) {
                                 ;     547 
                                 ;     548 		// Test if target falls outside boundaries. This is a 3 dimensional test
                                 ;     549 		// so it also checks the linear axis of the arc (helix axis)
                                 ;     550 		ritorno(cm_test_soft_limits(arc.gm.target));
                                 ;     551 
                                 ;     552 		// test arc extents
                                 ;     553 		ritorno(_test_arc_soft_limit_plane_axis(arc.center_0, arc.plane_axis_0));
                                 ;     554 		ritorno(_test_arc_soft_limit_plane_axis(arc.center_1, arc.plane_axis_1));
                                 ;     555 	}
                                 ;     556 	return(STAT_OK);
                                 ;     557 }
                                 ;     558 
                                 ;     559 */
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _arc:
00000000(000000CCH)              		.blkl	51
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     01809   LINES

Section List

Attr         Size               Name
CODE     0000002700(00000A8CH)  P
DATA     0000000204(000000CCH)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx305E\$ccrx\plan_arc.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\plan_arc.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\src\cnc\plan_arc.obj
