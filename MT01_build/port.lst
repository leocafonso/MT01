* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Mar 14 17:29:07 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  14-Mar-2017 17:29:07
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=port.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=port.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;port.c
                                 
                                 		.glb	_vSoftwareInterruptEntry
                                 		.glb	_p_vSoftwareInterruptEntry
                                 		.glb	_pxCurrentTCB
                                 		.glb	_pxPortInitialiseStack
                                 		.glb	_xPortStartScheduler
                                 		.glb	_vApplicationSetupTimerInterrupt
                                 		.glb	_vTickISR
                                 		.glb	_vSoftwareInterruptISR
                                 		.glb	_xTaskIncrementTick
                                 		.glb	_vPortEndScheduler
                                 		.glb	_vAssertCalled
                                 		.glb	_vTaskSwitchContext
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _pxPortInitialiseStack:
                                 		.STACK	_pxPortInitialiseStack=20
                                 ;       1 /*
                                 ;       2     FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
                                 ;       3     All rights reserved
                                 ;       4 
                                 ;       5     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
                                 ;       6 
                                 ;       7     This file is part of the FreeRTOS distribution.
                                 ;       8 
                                 ;       9     FreeRTOS is free software; you can redistribute it and/or modify it under
                                 ;      10     the terms of the GNU General Public License (version 2) as published by the
                                 ;      11     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
                                 ;      12 
                                 ;      13     ***************************************************************************
                                 ;      14     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
                                 ;      15     >>!   distribute a combined work that includes FreeRTOS without being   !<<
                                 ;      16     >>!   obliged to provide the source code for proprietary components     !<<
                                 ;      17     >>!   outside of the FreeRTOS kernel.                                   !<<
                                 ;      18     ***************************************************************************
                                 ;      19 
                                 ;      20     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
                                 ;      21     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                                 ;      22     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
                                 ;      23     link: http://www.freertos.org/a00114.html
                                 ;      24 
                                 ;      25     ***************************************************************************
                                 ;      26      *                                                                       *
                                 ;      27      *    FreeRTOS provides completely free yet professionally developed,    *
                                 ;      28      *    robust, strictly quality controlled, supported, and cross          *
                                 ;      29      *    platform software that is more than just the market leader, it     *
                                 ;      30      *    is the industry's de facto standard.                               *
                                 ;      31      *                                                                       *
                                 ;      32      *    Help yourself get started quickly while simultaneously helping     *
                                 ;      33      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
                                 ;      34      *    tutorial book, reference manual, or both:                          *
                                 ;      35      *    http://www.FreeRTOS.org/Documentation                              *
                                 ;      36      *                                                                       *
                                 ;      37     ***************************************************************************
                                 ;      38 
                                 ;      39     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
                                 ;      40     the FAQ page "My application does not run, what could be wrong?".  Have you
                                 ;      41     defined configASSERT()?
                                 ;      42 
                                 ;      43     http://www.FreeRTOS.org/support - In return for receiving this top quality
                                 ;      44     embedded software for free we request you assist our global community by
                                 ;      45     participating in the support forum.
                                 ;      46 
                                 ;      47     http://www.FreeRTOS.org/training - Investing in training allows your team to
                                 ;      48     be as productive as possible as early as possible.  Now you can receive
                                 ;      49     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
                                 ;      50     Ltd, and the world's leading authority on the world's leading RTOS.
                                 ;      51 
                                 ;      52     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
                                 ;      53     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
                                 ;      54     compatible FAT file system, and our tiny thread aware UDP/IP stack.
                                 ;      55 
                                 ;      56     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
                                 ;      57     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
                                 ;      58 
                                 ;      59     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
                                 ;      60     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
                                 ;      61     licenses offer ticketed support, indemnification and commercial middleware.
                                 ;      62 
                                 ;      63     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
                                 ;      64     engineered and independently SIL3 certified version for use in safety and
                                 ;      65     mission critical applications that require provable dependability.
                                 ;      66 
                                 ;      67     1 tab == 4 spaces!
                                 ;      68 */
                                 ;      69 
                                 ;      70 /*-----------------------------------------------------------
                                 ;      71  * Implementation of functions defined in portable.h for the RX600 port.
                                 ;      72  *----------------------------------------------------------*/
                                 ;      73 
                                 ;      74 /* Scheduler includes. */
                                 ;      75 #include "FreeRTOS.h"
                                 ;      76 #include "task.h"
                                 ;      77 
                                 ;      78 /* Library includes. */
                                 ;      79 #include "string.h"
                                 ;      80 
                                 ;      81 /* Hardware specifics. */
                                 ;      82 #include "iodefine.h"
                                 ;      83 
                                 ;      84 /*-----------------------------------------------------------*/
                                 ;      85 
                                 ;      86 /* Tasks should start with interrupts enabled and in Supervisor mode, therefore
                                 ;      87 PSW is set with U and I set, and PM and IPL clear. */
                                 ;      88 #define portINITIAL_PSW     ( ( StackType_t ) 0x00030000 )
                                 ;      89 #define portINITIAL_FPSW    ( ( StackType_t ) 0x00000100 )
                                 ;      90 
                                 ;      91 /*-----------------------------------------------------------*/
                                 ;      92 
                                 ;      93 /* The following lines are to ensure vSoftwareInterruptEntry can be referenced,
                                 ;      94  and therefore installed in the vector table, when the FreeRTOS code is built
                                 ;      95 as a library. */
                                 ;      96 extern BaseType_t vSoftwareInterruptEntry;
                                 ;      97 const BaseType_t * p_vSoftwareInterruptEntry = &vSoftwareInterruptEntry;
                                 ;      98 
                                 ;      99 /*-----------------------------------------------------------*/
                                 ;     100 
                                 ;     101 /*
                                 ;     102  * Function to start the first task executing - written in asm code as direct
                                 ;     103  * access to registers is required.
                                 ;     104  */
                                 ;     105 static void prvStartFirstTask( void );
                                 ;     106 
                                 ;     107 /*
                                 ;     108  * Software interrupt handler.  Performs the actual context switch (saving and
                                 ;     109  * restoring of registers).  Written in asm code as direct register access is
                                 ;     110  * required.
                                 ;     111  */
                                 ;     112 static void prvYieldHandler( void );
                                 ;     113 
                                 ;     114 /*
                                 ;     115  * The entry point for the software interrupt handler.  This is the function
                                 ;     116  * that calls the inline asm function prvYieldHandler().  It is installed in
                                 ;     117  * the vector table, but the code that installs it is in prvYieldHandler rather
                                 ;     118  * than using a #pragma.
                                 ;     119  */
                                 ;     120 void vSoftwareInterruptISR( void );
                                 ;     121 
                                 ;     122 /*-----------------------------------------------------------*/
                                 ;     123 
                                 ;     124 /* This is accessed by the inline assembler functions so is file scope for
                                 ;     125 convenience. */
                                 ;     126 extern void *pxCurrentTCB;
                                 ;     127 extern void vTaskSwitchContext( void );
                                 ;     128 
                                 ;     129 /*-----------------------------------------------------------*/
                                 ;     130 
                                 ;     131 /*
                                 ;     132  * See header file for description.
                                 ;     133  */
                                 ;     134 StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",134
00000000 7100F0                  		ADD #0FFFFFFF0H, R0
00000003 A089                    		MOV.L R1, 0CH[R0]
00000005 A082                    		MOV.L R2, 08H[R0]
00000007 A00B                    		MOV.L R3, 04H[R0]
                                 ;     135 {
                                 ;     136 	/* R0 is not included as it is the stack pointer. */
                                 ;     137 
                                 ;     138 	*pxTopOfStack = 0x00;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",138
00000009 A889                    		MOV.L 0CH[R0], R1
0000000B F81600                  		MOV.L #00000000H, [R1]
0000000E                         L11:	; entry.split
                                 ;     139 	pxTopOfStack--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",139
0000000E A889                    		MOV.L 0CH[R0], R1
00000010 6041                    		SUB #04H, R1
00000012 A089                    		MOV.L R1, 0CH[R0]
00000014                         L12:	; entry.split1
                                 ;     140  	*pxTopOfStack = portINITIAL_PSW;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",140
00000014 A889                    		MOV.L 0CH[R0], R1
00000016 F81E000003              		MOV.L #00030000H, [R1]
0000001B                         L13:	; entry.split2
                                 ;     141 	pxTopOfStack--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",141
0000001B A889                    		MOV.L 0CH[R0], R1
0000001D 6041                    		SUB #04H, R1
0000001F A089                    		MOV.L R1, 0CH[R0]
00000021                         L14:	; entry.split3
                                 ;     142 	*pxTopOfStack = ( StackType_t ) pxCode;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",142
00000021 A881                    		MOV.L 08H[R0], R1
00000023 A88A                    		MOV.L 0CH[R0], R2
00000025 E321                    		MOV.L R1, [R2]
00000027                         L15:	; entry.split4
                                 ;     143 
                                 ;     144 	/* When debugging it can be useful if every register is set to a known
                                 ;     145 	value.  Otherwise code space can be saved by just setting the registers
                                 ;     146 	that need to be set. */
                                 ;     147 	#ifdef USE_FULL_REGISTER_INITIALISATION
                                 ;     148 	{
                                 ;     149 		pxTopOfStack--;
                                 ;     150 		*pxTopOfStack = 0xffffffff;	/* r15. */
                                 ;     151 		pxTopOfStack--;
                                 ;     152 		*pxTopOfStack = 0xeeeeeeee;
                                 ;     153 		pxTopOfStack--;
                                 ;     154 		*pxTopOfStack = 0xdddddddd;
                                 ;     155 		pxTopOfStack--;
                                 ;     156 		*pxTopOfStack = 0xcccccccc;
                                 ;     157 		pxTopOfStack--;
                                 ;     158 		*pxTopOfStack = 0xbbbbbbbb;
                                 ;     159 		pxTopOfStack--;
                                 ;     160 		*pxTopOfStack = 0xaaaaaaaa;
                                 ;     161 		pxTopOfStack--;
                                 ;     162 		*pxTopOfStack = 0x99999999;
                                 ;     163 		pxTopOfStack--;
                                 ;     164 		*pxTopOfStack = 0x88888888;
                                 ;     165 		pxTopOfStack--;
                                 ;     166 		*pxTopOfStack = 0x77777777;
                                 ;     167 		pxTopOfStack--;
                                 ;     168 		*pxTopOfStack = 0x66666666;
                                 ;     169 		pxTopOfStack--;
                                 ;     170 		*pxTopOfStack = 0x55555555;
                                 ;     171 		pxTopOfStack--;
                                 ;     172 		*pxTopOfStack = 0x44444444;
                                 ;     173 		pxTopOfStack--;
                                 ;     174 		*pxTopOfStack = 0x33333333;
                                 ;     175 		pxTopOfStack--;
                                 ;     176 		*pxTopOfStack = 0x22222222;
                                 ;     177 		pxTopOfStack--;
                                 ;     178 	}
                                 ;     179 	#else
                                 ;     180 	{
                                 ;     181 		pxTopOfStack -= 15;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",181
00000027 A889                    		MOV.L 0CH[R0], R1
00000029 7111C4                  		ADD #0FFFFFFC4H, R1
0000002C A089                    		MOV.L R1, 0CH[R0]
0000002E                         L16:	; entry.split5
                                 ;     182 	}
                                 ;     183 	#endif
                                 ;     184 
                                 ;     185 	*pxTopOfStack = ( StackType_t ) pvParameters; /* R1 */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",185
0000002E A809                    		MOV.L 04H[R0], R1
00000030 A88A                    		MOV.L 0CH[R0], R2
00000032 E321                    		MOV.L R1, [R2]
00000034                         L17:	; entry.split6
                                 ;     186 	pxTopOfStack--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",186
00000034 A889                    		MOV.L 0CH[R0], R1
00000036 6041                    		SUB #04H, R1
00000038 A089                    		MOV.L R1, 0CH[R0]
0000003A                         L18:	; entry.split7
                                 ;     187 	*pxTopOfStack = portINITIAL_FPSW;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",187
0000003A A889                    		MOV.L 0CH[R0], R1
0000003C F81A0001                		MOV.L #00000100H, [R1]
00000040                         L19:	; entry.split8
                                 ;     188 	pxTopOfStack--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",188
00000040 A889                    		MOV.L 0CH[R0], R1
00000042 6041                    		SUB #04H, R1
00000044 A089                    		MOV.L R1, 0CH[R0]
00000046                         L20:	; entry.split9
                                 ;     189 	*pxTopOfStack = 0x12345678; /* Accumulator. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",189
00000046 A889                    		MOV.L 0CH[R0], R1
00000048 F81278563412            		MOV.L #12345678H, [R1]
0000004E                         L21:	; entry.split10
                                 ;     190 	pxTopOfStack--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",190
0000004E A889                    		MOV.L 0CH[R0], R1
00000050 6041                    		SUB #04H, R1
00000052 A089                    		MOV.L R1, 0CH[R0]
00000054                         L22:	; entry.split11
                                 ;     191 	*pxTopOfStack = 0x87654321; /* Accumulator. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",191
00000054 A889                    		MOV.L 0CH[R0], R1
00000056 F81221436587            		MOV.L #87654321H, [R1]
0000005C                         L23:	; entry.split12
                                 ;     192 
                                 ;     193 	return pxTopOfStack;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",193
0000005C A889                    		MOV.L 0CH[R0], R1
0000005E E301                    		MOV.L R1, [R0]
00000060                         L24:	; entry.split13
                                 ;     194 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",194
00000060 6704                    		RTSD #10H
00000062                         _xPortStartScheduler:
                                 		.STACK	_xPortStartScheduler=8
                                 ;     195 /*-----------------------------------------------------------*/
                                 ;     196 
                                 ;     197 BaseType_t xPortStartScheduler( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",197
00000062 6040                    		SUB #04H, R0
                                 ;     198 {
                                 ;     199 extern void vApplicationSetupTimerInterrupt( void );
                                 ;     200 
                                 ;     201 	/* Use pxCurrentTCB just so it does not get optimised away. */
                                 ;     202 	if( pxCurrentTCB != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",202
00000064 FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
0000006A ECEE                    		MOV.L [R14], R14
0000006C 610E                    		CMP #00H, R14
0000006E 20rr                    		BEQ L31
00000070                         L26:	; bb1
                                 ;     203 	{
                                 ;     204 		/* Call an application function to set up the timer that will generate the
                                 ;     205 		tick interrupt.  This way the application can decide which peripheral to
                                 ;     206 		use.  A demo application is provided to show a suitable example. */
                                 ;     207 		vApplicationSetupTimerInterrupt();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",207
00000070 05rrrrrr             A  		BSR _vApplicationSetupTimerInterrupt
00000074                         L27:	; bb1.split
                                 ;     208 
                                 ;     209 		/* Enable the software interrupt. */
                                 ;     210 		_IEN( _ICU_SWINT ) = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",210
00000074 FBEE1B7008              		MOV.L #0008701BH, R14
00000079 F2E3E801                		BSET #03H, 01E8H[R14].B
0000007D                         L28:	; bb1.split1
                                 ;     211 
                                 ;     212 		/* Ensure the software interrupt is clear. */
                                 ;     213 		_IR( _ICU_SWINT ) = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",213
0000007D FBEE1B7008              		MOV.L #0008701BH, R14
00000082 F0E8                    		BCLR #00H, [R14].B
00000084                         L29:	; bb1.split2
                                 ;     214 
                                 ;     215 		/* Ensure the software interrupt is set to the kernel priority. */
                                 ;     216 		_IPR( _ICU_SWINT ) = configKERNEL_INTERRUPT_PRIORITY;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",216
00000084 FBEE1B7008              		MOV.L #0008701BH, R14
00000089 5AEFE802                		MOVU.B 02E8H[R14], R15
0000008D 780F                    		BSET #00H, R15
0000008F 762FF100                		AND #0F1H, R15
00000093 CBEFE802                		MOV.B R15, 02E8H[R14]
00000097                         L30:	; bb1.split3
                                 ;     217 
                                 ;     218 		/* Start the first task. */
                                 ;     219 		prvStartFirstTask();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",219
                                 		._LINE_TOP  inline_asm
                                  
00000097 7FA9                    	SETPSW	U
                                 
                                  
00000099 FBF2rrrrrrrr            	MOV.L	#_pxCurrentTCB, R15
0000009F ECFF                    	MOV.L	[R15], R15
000000A1 ECF0                    	MOV.L	[R15], R0
                                 
                                  
000000A3 7EBF                        POP		R15
000000A5 FD171F                      MVTACLO	R15 		 
000000A8 7EBF                        POP		R15
000000AA FD170F                      MVTACHI	R15 		 
000000AD 7EBF                        POP		R15
000000AF FD68F3                      MVTC	R15,FPSW 	 
000000B2 6F1F                        POPM	R1-R15 		 
000000B4 7F95                        RTE					 
000000B6 03                          NOP
000000B7 03                          NOP
                                 		._LINE_END  inline_asm
000000B8                         L31:	; bb14
                                 ;     220 	}
                                 ;     221 
                                 ;     222 	/* Just to make sure the function is not optimised away. */
                                 ;     223 	( void ) vSoftwareInterruptISR();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",223
000000B8 39rrrr               W  		BSR _vSoftwareInterruptISR
000000BB                         L32:	; bb14.split
                                 ;     224 
                                 ;     225 	/* Should not get here. */
                                 ;     226 	return pdFAIL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",226
000000BB F80600                  		MOV.L #00000000H, [R0]
000000BE 6601                    		MOV.L #00000000H, R1
000000C0                         L33:	; bb14.split4
                                 ;     227 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",227
000000C0 6701                    		RTSD #04H
000000C2                         _vTickISR:
                                 		.STACK	_vTickISR=36
                                 		.RVECTOR	28,_vTickISR
                                 ;     228 /*-----------------------------------------------------------*/
                                 ;     229 
                                 ;     230 #pragma inline_asm prvStartFirstTask
                                 ;     231 static void prvStartFirstTask( void )
                                 ;     232 {
                                 ;     233 	/* When starting the scheduler there is nothing that needs moving to the
                                 ;     234 	interrupt stack because the function is not called from an interrupt.
                                 ;     235 	Just ensure the current stack is the user stack. */
                                 ;     236 	SETPSW	U
                                 ;     237 
                                 ;     238 	/* Obtain the location of the stack associated with which ever task
                                 ;     239 	pxCurrentTCB is currently pointing to. */
                                 ;     240 	MOV.L	#_pxCurrentTCB, R15
                                 ;     241 	MOV.L	[R15], R15
                                 ;     242 	MOV.L	[R15], R0
                                 ;     243 
                                 ;     244 	/* Restore the registers from the stack of the task pointed to by
                                 ;     245 	pxCurrentTCB. */
                                 ;     246     POP		R15
                                 ;     247     MVTACLO	R15 		/* Accumulator low 32 bits. */
                                 ;     248     POP		R15
                                 ;     249     MVTACHI	R15 		/* Accumulator high 32 bits. */
                                 ;     250     POP		R15
                                 ;     251     MVTC	R15,FPSW 	/* Floating point status word. */
                                 ;     252     POPM	R1-R15 		/* R1 to R15 - R0 is not included as it is the SP. */
                                 ;     253     RTE					/* This pops the remaining registers. */
                                 ;     254     NOP
                                 ;     255     NOP
                                 ;     256 }
                                 ;     257 /*-----------------------------------------------------------*/
                                 ;     258 
                                 ;     259 #pragma interrupt ( vTickISR( vect = _VECT( configTICK_VECTOR ), enable ) )
                                 ;     260 void vTickISR( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",260
000000C2 7FA8                    		SETPSW I
000000C4 6EEF                    		PUSHM R14-R15
000000C6 6E15                    		PUSHM R1-R5
                                 ;     261 {
                                 ;     262 	/* Increment the tick, and perform any processing the new tick value
                                 ;     263 	necessitates. */
                                 ;     264 	set_ipl( configMAX_SYSCALL_INTERRUPT_PRIORITY );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",264
000000C8 757005                  		MVTIPL #05H
000000CB                         L35:	; entry.split
                                 ;     265 	{
                                 ;     266 		if( xTaskIncrementTick() != pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",266
000000CB 05rrrrrr             A  		BSR _xTaskIncrementTick
000000CF 6101                    		CMP #00H, R1
000000D1 20rr                    		BEQ L37
000000D3                         L36:	; bb1
                                 ;     267 		{
                                 ;     268 			taskYIELD();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",268
                                 		._LINE_TOP  inline_asm
                                  
000000D3 7EA5                    	PUSH.L R5
                                 	 
000000D5 FB5EE07208              	MOV.L #553696, R5
000000DA F85401                  	MOV.B #1, [R5]
                                 	 
000000DD EC55                    	MOV.L [R5], R5
                                 	 
000000DF 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
000000E1                         L37:	; bb4
                                 ;     269 		}
                                 ;     270 	}
                                 ;     271 	set_ipl( configKERNEL_INTERRUPT_PRIORITY );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",271
000000E1 757001                  		MVTIPL #01H
000000E4 6F15                    		POPM R1-R5
000000E6 6FEF                    		POPM R14-R15
000000E8 7F95                    		RTE
000000EA                         _vSoftwareInterruptISR:
                                 		.STACK	_vSoftwareInterruptISR=4
                                 ;     272 }
                                 ;     273 /*-----------------------------------------------------------*/
                                 ;     274 
                                 ;     275 void vSoftwareInterruptISR( void )
                                 ;     276 {
                                 ;     277 	prvYieldHandler();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",277
                                 		._LINE_TOP  inline_asm
                                 	 
000000EA 7FA8                    	SETPSW	I
                                 
                                  
000000EC 7EAF                    	PUSH.L	R15
                                 
                                 	 
000000EE FD6A2F                  	MVFC	USP, R15
                                 
                                 	 
000000F1 60CF                    	SUB		#12, R15
000000F3 FD68F2                  	MVTC	R15, USP
                                 
                                 	 
000000F6 E00F                    	MOV.L	[ R0 ], [ R15 ] ; R15
000000F8 E50F0101                	MOV.L 	4[ R0 ], 4[ R15 ]  ; PC
000000FC E50F0202                	MOV.L	8[ R0 ], 8[ R15 ]  ; PSW
                                 
                                 	 
00000100 62C0                    	ADD	#12, R0
                                 
                                 	 
00000102 7FA9                    	SETPSW	U
                                 
                                 	 
00000104 6E1E                    	PUSHM	R1-R14
                                 
                                 	 
00000106 FD6A3F                  	MVFC	FPSW, R15
00000109 7EAF                    	PUSH.L	R15
0000010B FD1F0F                  	MVFACHI	R15
0000010E 7EAF                    	PUSH.L	R15
00000110 FD1F2F                  	MVFACMI	R15	; Middle order word.
00000113 6D0F                    	SHLL	#16, R15 ; Shifted left as it is restored to the low order word.
00000115 7EAF                    	PUSH.L	R15
                                 
                                 	 
00000117 FBF2rrrrrrrr            	MOV.L	#_pxCurrentTCB, R15
0000011D ECFF                    	MOV.L	[ R15 ], R15
0000011F E3F0                    	MOV.L	R0, [ R15 ]
                                 
                                  
00000121 757005                  	MVTIPL	#5
                                 
                                 	 
00000124 05rrrrrr             A  	BSR.A	_vTaskSwitchContext
                                 
                                 	 
00000128 757001                  	MVTIPL	#1
                                 
                                  
0000012B FBF2rrrrrrrr            	MOV.L	#_pxCurrentTCB,R15
00000131 ECFF                    	MOV.L	[ R15 ], R15
00000133 ECF0                    	MOV.L	[ R15 ], R0
                                 
                                  
00000135 7EBF                    	POP		R15
00000137 FD171F                  	MVTACLO	R15
0000013A 7EBF                    	POP		R15
0000013C FD170F                  	MVTACHI	R15
0000013F 7EBF                    	POP		R15
00000141 FD68F3                  	MVTC	R15,FPSW
00000144 6F1F                    	POPM	R1-R15
00000146 7F95                    	RTE
00000148 03                      	NOP
00000149 03                      	NOP
                                 		._LINE_END  inline_asm
0000014A 02                      		RTS
0000014B                         _vPortEndScheduler:
                                 		.STACK	_vPortEndScheduler=4
                                 ;     278 }
                                 ;     279 /*-----------------------------------------------------------*/
                                 ;     280 
                                 ;     281 #pragma inline_asm prvYieldHandler
                                 ;     282 static void prvYieldHandler( void )
                                 ;     283 {
                                 ;     284 	/* Re-enable interrupts. */
                                 ;     285 	SETPSW	I
                                 ;     286 
                                 ;     287 	/* Move the data that was automatically pushed onto the interrupt stack when
                                 ;     288 	the interrupt occurred from the interrupt stack to the user stack.
                                 ;     289 
                                 ;     290 	R15 is saved before it is clobbered. */
                                 ;     291 	PUSH.L	R15
                                 ;     292 
                                 ;     293 	/* Read the user stack pointer. */
                                 ;     294 	MVFC	USP, R15
                                 ;     295 
                                 ;     296 	/* Move the address down to the data being moved. */
                                 ;     297 	SUB		#12, R15
                                 ;     298 	MVTC	R15, USP
                                 ;     299 
                                 ;     300 	/* Copy the data across. */
                                 ;     301 	MOV.L	[ R0 ], [ R15 ] ; R15
                                 ;     302 	MOV.L 	4[ R0 ], 4[ R15 ]  ; PC
                                 ;     303 	MOV.L	8[ R0 ], 8[ R15 ]  ; PSW
                                 ;     304 
                                 ;     305 	/* Move the interrupt stack pointer to its new correct position. */
                                 ;     306 	ADD	#12, R0
                                 ;     307 
                                 ;     308 	/* All the rest of the registers are saved directly to the user stack. */
                                 ;     309 	SETPSW	U
                                 ;     310 
                                 ;     311 	/* Save the rest of the general registers (R15 has been saved already). */
                                 ;     312 	PUSHM	R1-R14
                                 ;     313 
                                 ;     314 	/* Save the FPSW and accumulator. */
                                 ;     315 	MVFC	FPSW, R15
                                 ;     316 	PUSH.L	R15
                                 ;     317 	MVFACHI	R15
                                 ;     318 	PUSH.L	R15
                                 ;     319 	MVFACMI	R15	; Middle order word.
                                 ;     320 	SHLL	#16, R15 ; Shifted left as it is restored to the low order word.
                                 ;     321 	PUSH.L	R15
                                 ;     322 
                                 ;     323 	/* Save the stack pointer to the TCB. */
                                 ;     324 	MOV.L	#_pxCurrentTCB, R15
                                 ;     325 	MOV.L	[ R15 ], R15
                                 ;     326 	MOV.L	R0, [ R15 ]
                                 ;     327 
                                 ;     328 	/* Ensure the interrupt mask is set to the syscall priority while the kernel
                                 ;     329 	structures are being accessed. */
                                 ;     330 	MVTIPL	#configMAX_SYSCALL_INTERRUPT_PRIORITY
                                 ;     331 
                                 ;     332 	/* Select the next task to run. */
                                 ;     333 	BSR.A	_vTaskSwitchContext
                                 ;     334 
                                 ;     335 	/* Reset the interrupt mask as no more data structure access is required. */
                                 ;     336 	MVTIPL	#configKERNEL_INTERRUPT_PRIORITY
                                 ;     337 
                                 ;     338 	/* Load the stack pointer of the task that is now selected as the Running
                                 ;     339 	state task from its TCB. */
                                 ;     340 	MOV.L	#_pxCurrentTCB,R15
                                 ;     341 	MOV.L	[ R15 ], R15
                                 ;     342 	MOV.L	[ R15 ], R0
                                 ;     343 
                                 ;     344 	/* Restore the context of the new task.  The PSW (Program Status Word) and
                                 ;     345 	PC will be popped by the RTE instruction. */
                                 ;     346 	POP		R15
                                 ;     347 	MVTACLO	R15
                                 ;     348 	POP		R15
                                 ;     349 	MVTACHI	R15
                                 ;     350 	POP		R15
                                 ;     351 	MVTC	R15,FPSW
                                 ;     352 	POPM	R1-R15
                                 ;     353 	RTE
                                 ;     354 	NOP
                                 ;     355 	NOP
                                 ;     356 }
                                 ;     357 /*-----------------------------------------------------------*/
                                 ;     358 
                                 ;     359 void vPortEndScheduler( void )
                                 ;     360 {
                                 ;     361 	/* Not implemented in ports where there is nothing to return to.
                                 ;     362 	Artificially force an assert. */
                                 ;     363 	configASSERT( pxCurrentTCB == NULL );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",363
0000014B FBE2rrrrrrrr            		MOV.L #_pxCurrentTCB, R14
00000151 ECEE                    		MOV.L [R14], R14
00000153 610E                    		CMP #00H, R14
00000155 10                   S  		BEQ L41
00000156                         L40:	; bb1
00000156 05rrrrrr             A  		BSR _vAssertCalled
0000015A                         L41:	; bb6
                                 ;     364 
                                 ;     365 	/* The following line is just to prevent the symbol getting optimised away. */
                                 ;     366 	( void ) vTaskSwitchContext();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\FreeRTOS\Source\portable\Renesas\RX600\port.c",366
0000015A 05rrrrrr             A  		BSR _vTaskSwitchContext
0000015E 02                      		RTS
                                 ;     367 }
                                 ;     368 /*-----------------------------------------------------------*/
                                 ;     369 
                                 ;     370 
                                 ;     371 
                                 		.SECTION	D,ROMDATA,ALIGN=4
00000000                         _p_vSoftwareInterruptEntry:
00000000 rrrrrrrr                		.lword	_vSoftwareInterruptEntry
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00664   LINES

Section List

Attr         Size               Name
CODE     0000000351(0000015FH)  P
ROMDATA  0000000004(00000004H)  D

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\port.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\MT01_build\port.lst
-output=C:\Workspace\e2studio\git\MT01_master\MT01_build\FreeRTOS\Source\portable\Renesas\RX600\port.obj
