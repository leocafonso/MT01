* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Sun Feb 19 10:54:00 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  19-Feb-2017 10:53:59
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=gpio.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=gpio.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=0,MOBILE=1,FREE_RTOS_PP
                                 ;gpio.c
                                 
                                 		.glb	_cs
                                 		.glb	_IndicatorLed_set
                                 		.glb	_IndicatorLed_clear
                                 		.glb	_IndicatorLed_toggle
                                 		.glb	_gpio_led_on
                                 		.glb	_gpio_led_off
                                 		.glb	_gpio_led_toggle
                                 		.glb	_gpio_read_bit
                                 		.glb	_gpio_set_bit_on
                                 		.glb	_gpio_set_bit_off
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _IndicatorLed_set:
                                 		.STACK	_IndicatorLed_set=4
                                 ;       1 /*
                                 ;       2  * gpio.c - general purpose IO bits
                                 ;       3  * Part of TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * As a special exception, you may use this file as part of a software library without
                                 ;      13  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      14  * inline functions from this file, or you compile this file and link it with  other
                                 ;      15  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      16  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      17  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      18  * GNU General Public License.
                                 ;      19  *
                                 ;      20  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      21  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      22  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      23  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      24  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      25  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      26  */
                                 ;      27 /*
                                 ;      28  *	This GPIO file is where all parallel port bits are managed that are
                                 ;      29  *	not already taken up by steppers, serial ports, SPI or PDI programming
                                 ;      30  *
                                 ;      31  *	There are 2 GPIO ports:
                                 ;      32  *
                                 ;      33  *	  gpio1	  Located on 5x2 header next to the PDI programming plugs (on v7's)
                                 ;      34  *				Four (4) output bits capable of driving 3.3v or 5v logic
                                 ;      35  *
                                 ;      36  *			  Note: On v6 and earlier boards there are also 4 inputs:
                                 ;      37  *				Four (4) level converted input bits capable of being driven
                                 ;      38  *				by 3.3v or 5v logic - connected to B0 - B3 (now used for SPI)
                                 ;      39  *
                                 ;      40  *	  gpio2	  Located on 9x2 header on "bottom" edge of the board
                                 ;      41  *				Eight (8) non-level converted input bits
                                 ;      42  *				Eight (8) ground pins - one each "under" each input pin
                                 ;      43  *				Two   (2) 3.3v power pins (on left edge of connector)
                                 ;      44  *				Inputs can be used as switch contact inputs or
                                 ;      45  *					3.3v input bits depending on port configuration
                                 ;      46  *					**** These bits CANNOT be used as 5v inputs ****
                                 ;      47  */
                                 ;      48 #ifdef __RX
                                 ;      49 #include "platform.h"
                                 ;      50 
                                 ;      51 #include "tinyg.h"
                                 ;      52 #include "util.h"
                                 ;      53 #include "config.h"
                                 ;      54 #include "controller.h"
                                 ;      55 #include "hardware.h"
                                 ;      56 //#include "switch.h"
                                 ;      57 #include "gpio.h"
                                 ;      58 #include "canonical_machine.h"
                                 ;      59 #include "xio.h"						// signals
                                 ;      60 
                                 ;      61 //======================== Parallel IO Functions ===============================
                                 ;      62 
                                 ;      63 /*
                                 ;      64  * IndicatorLed_set() 	- fake out for IndicatorLed.set() until we get Motate running
                                 ;      65  * IndicatorLed_clear() - fake out for IndicatorLed.clear() until we get Motate running
                                 ;      66  * IndicatorLed_toggle()- fake out for IndicatorLed.toggle() until we get Motate running
                                 ;      67  */
                                 ;      68 
                                 ;      69 void IndicatorLed_set()
                                 ;      70 {
                                 ;      71 
                                 ;      72 	cs.led_state = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",72
00000000 FBE2rrrrrrrr            		MOV.L #_cs, R14
00000006 F9E42001                		MOV.B #01H, 20H[R14]
0000000A 02                      		RTS
0000000B                         _IndicatorLed_clear:
                                 		.STACK	_IndicatorLed_clear=4
                                 ;      73 }
                                 ;      74 
                                 ;      75 void IndicatorLed_clear()
                                 ;      76 {
                                 ;      77 
                                 ;      78 	cs.led_state = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",78
0000000B FBE2rrrrrrrr            		MOV.L #_cs, R14
00000011 F9E42000                		MOV.B #00H, 20H[R14]
00000015 02                      		RTS
00000016                         _IndicatorLed_toggle:
                                 		.STACK	_IndicatorLed_toggle=4
                                 ;      79 }
                                 ;      80 
                                 ;      81 void IndicatorLed_toggle()
                                 ;      82 {
                                 ;      83 	if (cs.led_state == 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",83
00000016 FBE2rrrrrrrr            		MOV.L #_cs, R14
0000001C 59EE20                  		MOVU.B 20H[R14], R14
0000001F 610E                    		CMP #00H, R14
00000021 21rr                    		BNE L14
00000023                         L13:	; bb1
                                 ;      84 
                                 ;      85 		cs.led_state = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",85
00000023 FBE2rrrrrrrr            		MOV.L #_cs, R14
00000029 F9E42001                		MOV.B #01H, 20H[R14]
0000002D 02                      		RTS
0000002E                         L14:	; bb2
                                 ;      86 	} else {
                                 ;      87 
                                 ;      88 		cs.led_state = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",88
0000002E FBE2rrrrrrrr            		MOV.L #_cs, R14
00000034 F9E42000                		MOV.B #00H, 20H[R14]
00000038 02                      		RTS
00000039                         _gpio_led_on:
                                 		.STACK	_gpio_led_on=8
                                 ;      89 	}
                                 ;      90 }
                                 ;      91 
                                 ;      92 /*
                                 ;      93  * gpio_led_on() - turn led on - assumes TinyG LED mapping
                                 ;      94  * gpio_led_off() - turn led on - assumes TinyG LED mapping
                                 ;      95  * gpio_led_toggle()
                                 ;      96  */
                                 ;      97 
                                 ;      98 void gpio_led_on(uint8_t led)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",98
00000039 6040                    		SUB #04H, R0
0000003B 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",101
0000003D 6701                    		RTSD #04H
0000003F                         _gpio_led_off:
                                 		.STACK	_gpio_led_off=8
                                 ;      99 {
                                 ;     100 
                                 ;     101 }
                                 ;     102 
                                 ;     103 void gpio_led_off(uint8_t led)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",103
0000003F 6040                    		SUB #04H, R0
00000041 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",106
00000043 6701                    		RTSD #04H
00000045                         _gpio_led_toggle:
                                 		.STACK	_gpio_led_toggle=8
                                 ;     104 {
                                 ;     105 
                                 ;     106 }
                                 ;     107 
                                 ;     108 void gpio_led_toggle(uint8_t led)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",108
00000045 6040                    		SUB #04H, R0
00000047 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",111
00000049 6701                    		RTSD #04H
0000004B                         _gpio_read_bit:
                                 		.STACK	_gpio_read_bit=8
                                 ;     109 {
                                 ;     110 
                                 ;     111 }
                                 ;     112 
                                 ;     113 /*
                                 ;     114  * gpio_read_bit() - return true if bit is on, false if off
                                 ;     115  * gpio_set_bit_on() - turn bit on
                                 ;     116  * gpio_set_bit_off() - turn bit on
                                 ;     117  *
                                 ;     118  *	These functions have an inner remap depending on what hardware is running
                                 ;     119  */
                                 ;     120 
                                 ;     121 uint8_t gpio_read_bit(uint8_t b)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",121
0000004B 6040                    		SUB #04H, R0
0000004D 8089                    		MOV.B R1, 03H[R0]
                                 ;     122 {
                                 ;     123 
                                 ;     124 	return (0);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",124
0000004F 3C0200                  		MOV.B #00H, 02H[R0]
00000052 B081                    		MOVU.B 02H[R0], R1
00000054                         L19:	; entry.split
                                 ;     125 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",125
00000054 5B11                    		MOVU.B R1, R1
00000056 6701                    		RTSD #04H
00000058                         _gpio_set_bit_on:
                                 		.STACK	_gpio_set_bit_on=8
                                 ;     126 
                                 ;     127 void gpio_set_bit_on(uint8_t b)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",127
00000058 6040                    		SUB #04H, R0
0000005A 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",130
0000005C 6701                    		RTSD #04H
0000005E                         _gpio_set_bit_off:
                                 		.STACK	_gpio_set_bit_off=8
                                 ;     128 {
                                 ;     129 
                                 ;     130 }
                                 ;     131 
                                 ;     132 void gpio_set_bit_off(uint8_t b)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",132
0000005E 6040                    		SUB #04H, R0
00000060 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\gpio.c",135
00000062 6701                    		RTSD #04H
                                 ;     133 {
                                 ;     134 
                                 ;     135 }
                                 ;     136 #endif
                                 ;     137 
                                 ;     138 #ifdef __AVR
                                 ;     139 #include <avr/interrupt.h>
                                 ;     140 
                                 ;     141 #include "tinyg.h"
                                 ;     142 #include "util.h"
                                 ;     143 #include "config.h"
                                 ;     144 #include "controller.h"
                                 ;     145 #include "hardware.h"
                                 ;     146 //#include "switch.h"
                                 ;     147 #include "gpio.h"
                                 ;     148 #include "canonical_machine.h"
                                 ;     149 #include "xio.h"						// signals
                                 ;     150 
                                 ;     151 //======================== Parallel IO Functions ===============================
                                 ;     152 
                                 ;     153 /*
                                 ;     154  * IndicatorLed_set() 	- fake out for IndicatorLed.set() until we get Motate running
                                 ;     155  * IndicatorLed_clear() - fake out for IndicatorLed.clear() until we get Motate running
                                 ;     156  * IndicatorLed_toggle()- fake out for IndicatorLed.toggle() until we get Motate running
                                 ;     157  */
                                 ;     158 
                                 ;     159 void IndicatorLed_set()
                                 ;     160 {
                                 ;     161 	gpio_led_on(INDICATOR_LED);
                                 ;     162 	cs.led_state = 1;
                                 ;     163 }
                                 ;     164 
                                 ;     165 void IndicatorLed_clear()
                                 ;     166 {
                                 ;     167 	gpio_led_off(INDICATOR_LED);
                                 ;     168 	cs.led_state = 0;
                                 ;     169 }
                                 ;     170 
                                 ;     171 void IndicatorLed_toggle()
                                 ;     172 {
                                 ;     173 	if (cs.led_state == 0) {
                                 ;     174 		gpio_led_on(INDICATOR_LED);
                                 ;     175 		cs.led_state = 1;
                                 ;     176 	} else {
                                 ;     177 		gpio_led_off(INDICATOR_LED);
                                 ;     178 		cs.led_state = 0;
                                 ;     179 	}
                                 ;     180 }
                                 ;     181 
                                 ;     182 /*
                                 ;     183  * gpio_led_on() - turn led on - assumes TinyG LED mapping
                                 ;     184  * gpio_led_off() - turn led on - assumes TinyG LED mapping
                                 ;     185  * gpio_led_toggle()
                                 ;     186  */
                                 ;     187 
                                 ;     188 void gpio_led_on(uint8_t led)
                                 ;     189 {
                                 ;     190 //	if (led == 0) return (gpio_set_bit_on(0x08));
                                 ;     191 //	if (led == 1) return (gpio_set_bit_on(0x04));
                                 ;     192 //	if (led == 2) return (gpio_set_bit_on(0x02));
                                 ;     193 //	if (led == 3) return (gpio_set_bit_on(0x01));
                                 ;     194 
                                 ;     195 	if (led == 0) gpio_set_bit_on(0x08); else
                                 ;     196 	if (led == 1) gpio_set_bit_on(0x04); else
                                 ;     197 	if (led == 2) gpio_set_bit_on(0x02); else
                                 ;     198 	if (led == 3) gpio_set_bit_on(0x01);
                                 ;     199 }
                                 ;     200 
                                 ;     201 void gpio_led_off(uint8_t led)
                                 ;     202 {
                                 ;     203 //	if (led == 0) return (gpio_set_bit_off(0x08));
                                 ;     204 //	if (led == 1) return (gpio_set_bit_off(0x04));
                                 ;     205 //	if (led == 2) return (gpio_set_bit_off(0x02));
                                 ;     206 //	if (led == 3) return (gpio_set_bit_off(0x01));
                                 ;     207 
                                 ;     208 	if (led == 0) gpio_set_bit_off(0x08); else
                                 ;     209 	if (led == 1) gpio_set_bit_off(0x04); else
                                 ;     210 	if (led == 2) gpio_set_bit_off(0x02); else
                                 ;     211 	if (led == 3) gpio_set_bit_off(0x01);
                                 ;     212 }
                                 ;     213 
                                 ;     214 void gpio_led_toggle(uint8_t led)
                                 ;     215 {
                                 ;     216 	if (led == 0) {
                                 ;     217 		if (gpio_read_bit(0x08)) {
                                 ;     218 			gpio_set_bit_off(0x08);
                                 ;     219 		} else {
                                 ;     220 			gpio_set_bit_on(0x08);
                                 ;     221 		}
                                 ;     222 	} else if (led == 1) {
                                 ;     223 		if (gpio_read_bit(0x04)) {
                                 ;     224 			gpio_set_bit_off(0x04);
                                 ;     225 		} else {
                                 ;     226 			gpio_set_bit_on(0x04);
                                 ;     227 		}
                                 ;     228 	} else if (led == 2) {
                                 ;     229 		if (gpio_read_bit(0x02)) {
                                 ;     230 			gpio_set_bit_off(0x02);
                                 ;     231 		} else {
                                 ;     232 			gpio_set_bit_on(0x02);
                                 ;     233 		}
                                 ;     234 	} else if (led == 3) {
                                 ;     235 		if (gpio_read_bit(0x08)) {
                                 ;     236 			gpio_set_bit_off(0x08);
                                 ;     237 		} else {
                                 ;     238 			gpio_set_bit_on(0x08);
                                 ;     239 		}
                                 ;     240 	}
                                 ;     241 }
                                 ;     242 
                                 ;     243 /*
                                 ;     244  * gpio_read_bit() - return true if bit is on, false if off
                                 ;     245  * gpio_set_bit_on() - turn bit on
                                 ;     246  * gpio_set_bit_off() - turn bit on
                                 ;     247  *
                                 ;     248  *	These functions have an inner remap depending on what hardware is running
                                 ;     249  */
                                 ;     250 
                                 ;     251 uint8_t gpio_read_bit(uint8_t b)
                                 ;     252 {
                                 ;     253 	if (b & 0x08) { return (hw.out_port[0]->IN & GPIO1_OUT_BIT_bm); }
                                 ;     254 	if (b & 0x04) { return (hw.out_port[1]->IN & GPIO1_OUT_BIT_bm); }
                                 ;     255 	if (b & 0x02) { return (hw.out_port[2]->IN & GPIO1_OUT_BIT_bm); }
                                 ;     256 	if (b & 0x01) { return (hw.out_port[3]->IN & GPIO1_OUT_BIT_bm); }
                                 ;     257 	return (0);
                                 ;     258 }
                                 ;     259 
                                 ;     260 void gpio_set_bit_on(uint8_t b)
                                 ;     261 {
                                 ;     262 	if (b & 0x08) { hw.out_port[0]->OUTSET = GPIO1_OUT_BIT_bm; }
                                 ;     263 	if (b & 0x04) { hw.out_port[1]->OUTSET = GPIO1_OUT_BIT_bm; }
                                 ;     264 	if (b & 0x02) { hw.out_port[2]->OUTSET = GPIO1_OUT_BIT_bm; }
                                 ;     265 	if (b & 0x01) { hw.out_port[3]->OUTSET = GPIO1_OUT_BIT_bm; }
                                 ;     266 }
                                 ;     267 
                                 ;     268 void gpio_set_bit_off(uint8_t b)
                                 ;     269 {
                                 ;     270 	if (b & 0x08) { hw.out_port[0]->OUTCLR = GPIO1_OUT_BIT_bm; }
                                 ;     271 	if (b & 0x04) { hw.out_port[1]->OUTCLR = GPIO1_OUT_BIT_bm; }
                                 ;     272 	if (b & 0x02) { hw.out_port[2]->OUTCLR = GPIO1_OUT_BIT_bm; }
                                 ;     273 	if (b & 0x01) { hw.out_port[3]->OUTCLR = GPIO1_OUT_BIT_bm; }
                                 ;     274 }
                                 ;     275 #endif
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00388   LINES

Section List

Attr         Size               Name
CODE     0000000100(00000064H)  P

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx12DB\$ccrx\gpio.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\Mobile_build\gpio.lst
-output=C:\Workspace\e2studio\git\MT01\Mobile_build\src\cnc\gpio.obj
