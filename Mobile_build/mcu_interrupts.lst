* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Sun Feb 19 10:54:38 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  19-Feb-2017 10:54:38
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=mcu_interrupts.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=mcu_interrupts.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=0,MOBILE=1,FREE_RTOS_PP
                                 ;mcu_interrupts.c
                                 
                                 		.glb	_bsp_interrupt_open
                                 		.glb	_R_BSP_InterruptWrite
                                 		.glb	_R_BSP_InterruptRead
                                 		.glb	_R_BSP_InterruptControl
                                 		.glb	_bsp_interrupt_enable_disable
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _bsp_interrupt_open:
                                 		.STACK	_bsp_interrupt_open=8
                                 ;       1 /***********************************************************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No 
                                 ;       4 * other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all 
                                 ;       5 * applicable laws, including copyright laws. 
                                 ;       6 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
                                 ;       7 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, 
                                 ;       8 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM 
                                 ;       9 * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES 
                                 ;      10 * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS 
                                 ;      11 * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      12 * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of 
                                 ;      13 * this software. By using this software, you agree to the additional terms and conditions found by accessing the 
                                 ;      14 * following link:
                                 ;      15 * http://www.renesas.com/disclaimer 
                                 ;      16 *
                                 ;      17 * Copyright (C) 2013 Renesas Electronics Corporation. All rights reserved.
                                 ;      18 ***********************************************************************************************************************/
                                 ;      19 /***********************************************************************************************************************
                                 ;      20 * File Name	   : mcu_interrupts.c
                                 ;      21 * Description  : This module allows for callbacks to be registered for certain interrupts.
                                 ;      22 ***********************************************************************************************************************/
                                 ;      23 /**********************************************************************************************************************
                                 ;      24 * History : DD.MM.YYYY Version  Description
                                 ;      25 *         : 31.05.2013 1.00     First Release
                                 ;      26 ***********************************************************************************************************************/
                                 ;      27 
                                 ;      28 /***********************************************************************************************************************
                                 ;      29 Includes   <System Includes> , "Project Includes"
                                 ;      30 ***********************************************************************************************************************/
                                 ;      31 /* Access to r_bsp. */
                                 ;      32 #include "platform.h"
                                 ;      33 
                                 ;      34 /***********************************************************************************************************************
                                 ;      35 Macro definitions
                                 ;      36 ***********************************************************************************************************************/
                                 ;      37 /* This macro is used to suppress compiler messages about a parameter not being used in a function. The nice thing
                                 ;      38  * about using this implementation is that it does not take any extra RAM or ROM.
                                 ;      39  */
                                 ;      40 #define INTERNAL_NOT_USED(p)        ((void)(p))
                                 ;      41 /* Let FPSW EV, EO, EZ, EU, EX=1 (FPU exceptions enabled.) */
                                 ;      42 #define FPU_EXCEPTIONS_ENABLE       (0x00007C00)
                                 ;      43 
                                 ;      44 /***********************************************************************************************************************
                                 ;      45 Typedef definitions
                                 ;      46 ***********************************************************************************************************************/
                                 ;      47 
                                 ;      48 /***********************************************************************************************************************
                                 ;      49 Exported global variables (to be accessed by other files)
                                 ;      50 ***********************************************************************************************************************/
                                 ;      51  
                                 ;      52 /***********************************************************************************************************************
                                 ;      53 Private global variables and functions
                                 ;      54 ***********************************************************************************************************************/
                                 ;      55 /* This array holds callback functions. */
                                 ;      56 static void (* g_bsp_vectors[BSP_INT_SRC_TOTAL_ITEMS])(void * pdata);
                                 ;      57 
                                 ;      58 bsp_int_err_t bsp_interrupt_enable_disable(bsp_int_src_t vector, bool enable);
                                 ;      59 
                                 ;      60 /***********************************************************************************************************************
                                 ;      61 * Function Name: bsp_interrupt_open
                                 ;      62 * Description  : Initialize callback function array.
                                 ;      63 * Arguments    : None
                                 ;      64 * Return Value : None
                                 ;      65 ***********************************************************************************************************************/
                                 ;      66 void bsp_interrupt_open (void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",66
00000000 6040                    		SUB #04H, R0
                                 ;      67 {
                                 ;      68     uint32_t i;
                                 ;      69 
                                 ;      70     for (i = 0; i < BSP_INT_SRC_TOTAL_ITEMS; i++)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",70
00000002 F80600                  		MOV.L #00000000H, [R0]
00000005 2Err                 B  		BRA L12
00000007                         L11:	; bb
                                 ;      71     {
                                 ;      72         g_bsp_vectors[i] = FIT_NO_FUNC;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",72
00000007 EC01                    		MOV.L [R0], R1
00000009 FBE2rrrrrrrr            		MOV.L #__$g_bsp_vectors, R14
0000000F FBF200000010            		MOV.L #10000000H, R15
00000015 FE21EF                  		MOV.L R15, [R1,R14]
00000018 EC01                    		MOV.L [R0], R1
0000001A 6211                    		ADD #01H, R1
0000001C E301                    		MOV.L R1, [R0]
0000001E                         L12:	; bb5
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",70
0000001E EC01                    		MOV.L [R0], R1
00000020 61B1                    		CMP #0BH, R1
00000022 23rr                    		BLTU L11
00000024                         L13:	; return
                                 ;      73     }
                                 ;      74 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",74
00000024 6701                    		RTSD #04H
00000026                         _R_BSP_InterruptWrite:
                                 		.STACK	_R_BSP_InterruptWrite=24
                                 ;      75 
                                 ;      76 /***********************************************************************************************************************
                                 ;      77 * Function Name: R_BSP_InterruptWrite
                                 ;      78 * Description  : Registers a callback function for supported interrupts. If FIT_NO_FUNC, NULL, or
                                 ;      79 *                any other invalid function address is passed for the callback argument then any previously registered
                                 ;      80 *                callbacks are unregistered. Use of FIT_NO_FUNC is preferred over NULL since access to the address
                                 ;      81 *                defined by FIT_NO_FUNC will cause a bus error which is easy for the user to catch. NULL typically
                                 ;      82 *                resolves to 0 which is a valid address on RX MCUs.
                                 ;      83 * Arguments    : vector -
                                 ;      84 *                    Which interrupt to register a callback for.
                                 ;      85 *                callback -
                                 ;      86 *                    Pointer to function to call when interrupt occurs.
                                 ;      87 * Return Value : BSP_INT_SUCCESS -
                                 ;      88 *                    Callback registered
                                 ;      89 *                BSP_INT_ERR_INVALID_ARG -
                                 ;      90 *                    Invalid function address input, any previous function has been unregistered
                                 ;      91 ***********************************************************************************************************************/
                                 ;      92 bsp_int_err_t R_BSP_InterruptWrite (bsp_int_src_t vector,  bsp_int_cb_t callback)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",92
00000026 7100EC                  		ADD #0FFFFFFECH, R0
00000029 A101                    		MOV.L R1, 10H[R0]
0000002B A08A                    		MOV.L R2, 0CH[R0]
                                 ;      93 {
                                 ;      94     bsp_int_err_t err;
                                 ;      95 
                                 ;      96     err = BSP_INT_SUCCESS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",96
0000002D 3E0100                  		MOV.L #00000000H, 04H[R0]
00000030                         L15:	; entry.split
                                 ;      97 
                                 ;      98     /* Check for valid address. */
                                 ;      99     if (((uint32_t)callback == (uint32_t)NULL) || ((uint32_t)callback == (uint32_t)FIT_NO_FUNC))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",99
00000030 A889                    		MOV.L 0CH[R0], R1
00000032 6101                    		CMP #00H, R1
00000034 20rr                    		BEQ L19
00000036 2Err                 B  		BRA L18
00000038                         L16:	; bb4
                                 ;     100     {
                                 ;     101         g_bsp_vectors[vector] = FIT_NO_FUNC;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",101
00000038 FBE2rrrrrrrr            		MOV.L #__$g_bsp_vectors, R14
0000003E FBF200000010            		MOV.L #10000000H, R15
00000044 FE21EF                  		MOV.L R15, [R1,R14]
00000047 2Err                 B  		BRA L22
00000049                         L17:	; bb7
                                 ;     102     }
                                 ;     103     else
                                 ;     104     {
                                 ;     105         g_bsp_vectors[vector] = callback;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",105
00000049 6C21                    		SHLL #02H, R1
0000004B FBE2rrrrrrrr            		MOV.L #__$g_bsp_vectors, R14
00000051 4BE1                    		ADD R14, R1
00000053 E10103                  		MOV.L 0CH[R0], [R1]
00000056 2Err                 B  		BRA L22
00000058                         L18:	; bb15
00000058 A889                    		MOV.L 0CH[R0], R1
0000005A 740100000010            		CMP #10000000H, R1
00000060 18                   S  		BNE L20
00000061                         L19:	; bb20
00000061 F80601                  		MOV.L #00000001H, [R0]
00000064 08                   S  		BRA L21
00000065                         L20:	; bb21
00000065 F80600                  		MOV.L #00000000H, [R0]
00000068                         L21:	; bb22
00000068 EC01                    		MOV.L [R0], R1
0000006A 6101                    		CMP #00H, R1
0000006C A901                    		MOV.L 10H[R0], R1
0000006E 21rr                    		BNE L16
00000070 2Err                 B  		BRA L17
00000072                         L22:	; bb26
                                 ;     106     }
                                 ;     107 
                                 ;     108     return err;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",108
00000072 A809                    		MOV.L 04H[R0], R1
00000074 A081                    		MOV.L R1, 08H[R0]
00000076                         L23:	; bb26.split
                                 ;     109 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",109
00000076 6705                    		RTSD #14H
00000078                         _R_BSP_InterruptRead:
                                 		.STACK	_R_BSP_InterruptRead=24
                                 ;     110 
                                 ;     111 /***********************************************************************************************************************
                                 ;     112 * Function Name: R_BSP_InterruptRead
                                 ;     113 * Description  : Returns the callback function address for an interrupt.
                                 ;     114 * Arguments    : vector -
                                 ;     115 *                    Which interrupt to read the callback for.
                                 ;     116 *                callback -
                                 ;     117 *                    Pointer of where to store callback address.
                                 ;     118 * Return Value : BSP_INT_SUCCESS -
                                 ;     119 *                    Callback was registered and address has been stored in 'callback' parameter.
                                 ;     120 *                BSP_INT_ERR_NO_REGISTERED_CALLBACK -
                                 ;     121 *                    No valid callback has been registered for this interrupt source.
                                 ;     122 ***********************************************************************************************************************/
                                 ;     123 bsp_int_err_t R_BSP_InterruptRead (bsp_int_src_t vector, bsp_int_cb_t * callback)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",123
00000078 7100EC                  		ADD #0FFFFFFECH, R0
0000007B A101                    		MOV.L R1, 10H[R0]
0000007D A08A                    		MOV.L R2, 0CH[R0]
                                 ;     124 {
                                 ;     125     bsp_int_err_t err;
                                 ;     126 
                                 ;     127     err = BSP_INT_SUCCESS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",127
0000007F 3E0100                  		MOV.L #00000000H, 04H[R0]
00000082                         L25:	; entry.split
                                 ;     128 
                                 ;     129     /* Check for valid address. */
                                 ;     130     if (((uint32_t)g_bsp_vectors[vector] == (uint32_t)NULL) || ((uint32_t)g_bsp_vectors[vector] == (uint32_t)FIT_NO_FUNC))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",130
00000082 FBE2rrrrrrrr            		MOV.L #__$g_bsp_vectors, R14
00000088 A901                    		MOV.L 10H[R0], R1
0000008A FE61EE                  		MOV.L [R1,R14], R14
0000008D 610E                    		CMP #00H, R14
0000008F 20rr                    		BEQ L29
00000091 2Err                 B  		BRA L28
00000093                         L26:	; bb4
                                 ;     131     {
                                 ;     132         err = BSP_INT_ERR_NO_REGISTERED_CALLBACK;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",132
00000093 3E0101                  		MOV.L #00000001H, 04H[R0]
00000096 2Err                 B  		BRA L32
00000098                         L27:	; bb5
                                 ;     133     }
                                 ;     134     else
                                 ;     135     {
                                 ;     136         *callback = g_bsp_vectors[vector];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",136
00000098 FBE2rrrrrrrr            		MOV.L #__$g_bsp_vectors, R14
0000009E A901                    		MOV.L 10H[R0], R1
000000A0 FE61EE                  		MOV.L [R1,R14], R14
000000A3 A889                    		MOV.L 0CH[R0], R1
000000A5 E31E                    		MOV.L R14, [R1]
000000A7 2Err                 B  		BRA L32
000000A9                         L28:	; bb16
000000A9 FBE2rrrrrrrr            		MOV.L #__$g_bsp_vectors, R14
000000AF A901                    		MOV.L 10H[R0], R1
000000B1 FE61EE                  		MOV.L [R1,R14], R14
000000B4 740E00000010            		CMP #10000000H, R14
000000BA 18                   S  		BNE L30
000000BB                         L29:	; bb23
000000BB F80601                  		MOV.L #00000001H, [R0]
000000BE 08                   S  		BRA L31
000000BF                         L30:	; bb24
000000BF F80600                  		MOV.L #00000000H, [R0]
000000C2                         L31:	; bb25
000000C2 EC01                    		MOV.L [R0], R1
000000C4 6101                    		CMP #00H, R1
000000C6 21rr                    		BNE L26
000000C8 2Err                 B  		BRA L27
000000CA                         L32:	; bb29
                                 ;     137     }
                                 ;     138 
                                 ;     139     return err;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",139
000000CA A809                    		MOV.L 04H[R0], R1
000000CC A081                    		MOV.L R1, 08H[R0]
000000CE                         L33:	; bb29.split
                                 ;     140 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",140
000000CE 6705                    		RTSD #14H
000000D0                         _R_BSP_InterruptControl:
                                 		.STACK	_R_BSP_InterruptControl=32
                                 ;     141 
                                 ;     142 /***********************************************************************************************************************
                                 ;     143 * Function Name: R_BSP_InterruptControl
                                 ;     144 * Description  : Executes specified command.
                                 ;     145 * Arguments    : vector -
                                 ;     146 *                    Which vector is being used.
                                 ;     147 *                cmd -
                                 ;     148 *                    Which command to execute.
                                 ;     149 *                pdata -
                                 ;     150 *                    Pointer to data to use with command. Not currently used. Use FIT_NO_PTR.
                                 ;     151 * Return Value : BSP_INT_SUCCESS -
                                 ;     152 *                    Command executed successfully.
                                 ;     153 *                BSP_INT_ERR_NO_REGISTERED_CALLBACK -
                                 ;     154 *                    No valid callback has been registered for this interrupt source.
                                 ;     155 *                BSP_INT_ERR_INVALID_ARG -
                                 ;     156 *                    Invalid command sent in.
                                 ;     157 ***********************************************************************************************************************/
                                 ;     158 bsp_int_err_t R_BSP_InterruptControl (bsp_int_src_t vector, bsp_int_cmd_t cmd, void * pdata)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",158
000000D0 7100E4                  		ADD #0FFFFFFE4H, R0
000000D3 A181                    		MOV.L R1, 18H[R0]
000000D5 A10A                    		MOV.L R2, 14H[R0]
000000D7 A103                    		MOV.L R3, 10H[R0]
                                 ;     159 {
                                 ;     160     bsp_int_err_t       err;
                                 ;     161     bsp_int_cb_args_t   cb_args;
                                 ;     162 
                                 ;     163     err = BSP_INT_SUCCESS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",163
000000D9 3E0100                  		MOV.L #00000000H, 04H[R0]
000000DC                         L35:	; entry.split1
                                 ;     164 
                                 ;     165     /* This code is only used to remove compiler info messages about these parameters not being used. */
                                 ;     166     INTERNAL_NOT_USED(pdata);
                                 ;     167 
                                 ;     168     switch (cmd)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",168
000000DC A909                    		MOV.L 14H[R0], R1
000000DE 6121                    		CMP #02H, R1
000000E0 20rr                    		BEQ L47
000000E2                         L36:	; entry.split1
000000E2 6111                    		CMP #01H, R1
000000E4 20rr                    		BEQ L46
000000E6                         L37:	; entry.split1
000000E6 6101                    		CMP #00H, R1
000000E8 21rr                    		BNE L48
000000EA                         L38:	; bb8
                                 ;     169     {
                                 ;     170         case (BSP_INT_CMD_CALL_CALLBACK):
                                 ;     171             if (((uint32_t)g_bsp_vectors[vector] != (uint32_t)NULL) &&
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",171
000000EA FBE2rrrrrrrr            		MOV.L #__$g_bsp_vectors, R14
000000F0 A981                    		MOV.L 18H[R0], R1
000000F2 FE61EE                  		MOV.L [R1,R14], R14
000000F5 610E                    		CMP #00H, R14
000000F7 21rr                    		BNE L42
000000F9 2Err                 B  		BRA L44
000000FB                         L39:	; bb9
                                 ;     172                 ((uint32_t)g_bsp_vectors[vector] != (uint32_t)FIT_NO_FUNC))
                                 ;     173             {
                                 ;     174                 /* Fill in callback info. */
                                 ;     175                 cb_args.vector = vector;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",175
000000FB E5000602                		MOV.L 18H[R0], 08H[R0]
000000FF                         L40:	; bb9.split
                                 ;     176 
                                 ;     177                 g_bsp_vectors[vector](&cb_args);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",177
000000FF FBE2rrrrrrrr            		MOV.L #__$g_bsp_vectors, R14
00000105 A981                    		MOV.L 18H[R0], R1
00000107 FE61EE                  		MOV.L [R1,R14], R14
0000010A 710108                  		ADD #08H, R0, R1
0000010D 7F1E                    		JSR R14
0000010F 2Err                 B  		BRA L49
00000111                         L41:	; bb16
                                 ;     178             }
                                 ;     179             else
                                 ;     180             {
                                 ;     181                 err = BSP_INT_ERR_NO_REGISTERED_CALLBACK;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",181
00000111 3E0101                  		MOV.L #00000001H, 04H[R0]
00000114 2Err                 B  		BRA L49
00000116                         L42:	; bb23
00000116 FBE2rrrrrrrr            		MOV.L #__$g_bsp_vectors, R14
0000011C A981                    		MOV.L 18H[R0], R1
0000011E FE61EE                  		MOV.L [R1,R14], R14
00000121 740E00000010            		CMP #10000000H, R14
00000127 10                   S  		BEQ L44
00000128                         L43:	; bb30
00000128 F80601                  		MOV.L #00000001H, [R0]
0000012B 08                   S  		BRA L45
0000012C                         L44:	; bb31
0000012C F80600                  		MOV.L #00000000H, [R0]
0000012F                         L45:	; bb32
0000012F EC01                    		MOV.L [R0], R1
00000131 6101                    		CMP #00H, R1
00000133 21rr                    		BNE L39
00000135 2Err                 B  		BRA L41
00000137                         L46:	; bb37
                                 ;     182             }
                                 ;     183         break;
                                 ;     184 
                                 ;     185         case (BSP_INT_CMD_INTERRUPT_ENABLE):
                                 ;     186             err = bsp_interrupt_enable_disable(vector, true);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",186
00000137 A981                    		MOV.L 18H[R0], R1
00000139 6612                    		MOV.L #00000001H, R2
0000013B 39rrrr               W  		BSR _bsp_interrupt_enable_disable
0000013E A009                    		MOV.L R1, 04H[R0]
00000140 2Err                 B  		BRA L49
00000142                         L47:	; bb40
                                 ;     187         break;
                                 ;     188 
                                 ;     189         case (BSP_INT_CMD_INTERRUPT_DISABLE):
                                 ;     190             err = bsp_interrupt_enable_disable(vector, false);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",190
00000142 A981                    		MOV.L 18H[R0], R1
00000144 6602                    		MOV.L #00000000H, R2
00000146 39rrrr               W  		BSR _bsp_interrupt_enable_disable
00000149 A009                    		MOV.L R1, 04H[R0]
0000014B 08                   S  		BRA L49
0000014C                         L48:	; bb43
                                 ;     191         break;
                                 ;     192 
                                 ;     193         default:
                                 ;     194             err = BSP_INT_ERR_INVALID_ARG;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",194
0000014C 3E0102                  		MOV.L #00000002H, 04H[R0]
0000014F                         L49:	; bb44
                                 ;     195         break;
                                 ;     196     }
                                 ;     197 
                                 ;     198     return err;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",198
0000014F A809                    		MOV.L 04H[R0], R1
00000151 A089                    		MOV.L R1, 0CH[R0]
00000153                         L50:	; bb44.split
                                 ;     199 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",199
00000153 6707                    		RTSD #1CH
00000155                         _bsp_interrupt_enable_disable:
                                 		.STACK	_bsp_interrupt_enable_disable=24
                                 ;     200 
                                 ;     201 /***********************************************************************************************************************
                                 ;     202 * Function Name: bsp_interrupt_enable_disable
                                 ;     203 * Description  : Either enables or disables an interrupt.
                                 ;     204 * Arguments    : vector -
                                 ;     205 *                    Which vector to enable or disable.
                                 ;     206 *                enable -
                                 ;     207 *                    Whether to enable or disable the interrupt.
                                 ;     208 * Return Value : BSP_INT_SUCCESS -
                                 ;     209 *                    Interrupt enabled or disabled.
                                 ;     210 *                BSP_INT_ERR_UNSUPPORTED -
                                 ;     211 *                    API does not support enabling/disabling for this vector.
                                 ;     212 ***********************************************************************************************************************/
                                 ;     213 bsp_int_err_t bsp_interrupt_enable_disable (bsp_int_src_t vector, bool enable)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",213
00000155 7100EC                  		ADD #0FFFFFFECH, R0
00000158 A101                    		MOV.L R1, 10H[R0]
0000015A 838A                    		MOV.B R2, 0FH[R0]
                                 ;     214 {
                                 ;     215     uint32_t      temp_fpsw;
                                 ;     216     bsp_int_err_t err = BSP_INT_SUCCESS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",216
0000015C 3E0100                  		MOV.L #00000000H, 04H[R0]
0000015F                         L52:	; entry.split
                                 ;     217 
                                 ;     218     switch (vector)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",218
0000015F A901                    		MOV.L 10H[R0], R1
00000161 6121                    		CMP #02H, R1
00000163 20rr                    		BEQ L68
00000165                         L53:	; entry.split
00000165 6131                    		CMP #03H, R1
00000167 20rr                    		BEQ L64
00000169                         L54:	; entry.split
00000169 61A1                    		CMP #0AH, R1
0000016B 21rr                    		BNE L71
0000016D                         L55:	; bb6
                                 ;     219     {
                                 ;     220         case (BSP_INT_SRC_BUS_ERROR):
                                 ;     221 
                                 ;     222             if (true == enable)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",222
0000016D B389                    		MOVU.B 0FH[R0], R1
0000016F 6111                    		CMP #01H, R1
00000171 21rr                    		BNE L61
00000173                         L56:	; bb7
00000173 FBEE107008              		MOV.L #00087010H, R14
                                 ;     223             {
                                 ;     224                 /* Enable the bus error interrupt to catch accesses to illegal/reserved areas of memory */
                                 ;     225                 /* Clear any pending interrupts */
                                 ;     226                 IR(BSC,BUSERR) = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",226
00000178 F0E8                    		BCLR #00H, [R14].B
0000017A                         L57:	; bb7.split
0000017A FBEE007308              		MOV.L #00087300H, R14
                                 ;     227                 /* Make this the highest priority interrupt (adjust as necessary for your application */
                                 ;     228                 IPR(BSC,BUSERR) = 0x0F;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",228
0000017F 58EF                    		MOVU.B [R14], R15
00000181 65FF                    		OR #0FH, R15
00000183 C3EF                    		MOV.B R15, [R14]
00000185                         L58:	; bb7.split1
00000185 FBEE027208              		MOV.L #00087202H, R14
                                 ;     229                 /* Enable the interrupt in the ICU*/
                                 ;     230                 IEN(BSC,BUSERR) = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",230
0000018A F0E0                    		BSET #00H, [R14].B
0000018C                         L59:	; bb7.split2
0000018C FBEE041308              		MOV.L #00081304H, R14
                                 ;     231                 /* Enable illegal address interrupt in the BSC */
                                 ;     232                 BSC.BEREN.BIT.IGAEN = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",232
00000191 F0E0                    		BSET #00H, [R14].B
00000193                         L60:	; bb7.split3
00000193 FBEE041308              		MOV.L #00081304H, R14
                                 ;     233                 /* Enable timeout detection enable. */
                                 ;     234                 BSC.BEREN.BIT.TOEN = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",234
00000198 F0E1                    		BSET #01H, [R14].B
0000019A 2Err                 B  		BRA L72
0000019C                         L61:	; bb23
0000019C FBEE027208              		MOV.L #00087202H, R14
                                 ;     235             }
                                 ;     236             else
                                 ;     237             {
                                 ;     238                 /* Disable the bus error interrupt. */
                                 ;     239                 /* Disable the interrupt in the ICU*/
                                 ;     240                 IEN(BSC,BUSERR) = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",240
000001A1 F0E8                    		BCLR #00H, [R14].B
000001A3                         L62:	; bb23.split
000001A3 FBEE041308              		MOV.L #00081304H, R14
                                 ;     241                 /* Disable illegal address interrupt in the BSC */
                                 ;     242                 BSC.BEREN.BIT.IGAEN = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",242
000001A8 F0E8                    		BCLR #00H, [R14].B
000001AA                         L63:	; bb23.split4
000001AA FBEE041308              		MOV.L #00081304H, R14
                                 ;     243                 /* Disable timeout detection enable. */
                                 ;     244                 BSC.BEREN.BIT.TOEN = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",244
000001AF F0E9                    		BCLR #01H, [R14].B
000001B1 2Err                 B  		BRA L72
000001B3                         L64:	; bb38
                                 ;     245             }
                                 ;     246 
                                 ;     247         break;
                                 ;     248 
                                 ;     249         case (BSP_INT_SRC_EXC_FPU):
                                 ;     250 
                                 ;     251             /* Get current FPSW. */
                                 ;     252             temp_fpsw = (uint32_t)get_fpsw();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",252
000001B3 FD6A31                  		MVFC FPSW, R1
000001B6 E301                    		MOV.L R1, [R0]
000001B8                         L65:	; bb38.split
                                 ;     253 
                                 ;     254             if (true == enable)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",254
000001B8 B389                    		MOVU.B 0FH[R0], R1
000001BA 6111                    		CMP #01H, R1
000001BC EC01                    		MOV.L [R0], R1
000001BE 18                   S  		BNE L67
000001BF                         L66:	; bb41
                                 ;     255             {
                                 ;     256                 /* Set the FPU exception flags. */
                                 ;     257                 set_fpsw(temp_fpsw | ((uint32_t)FPU_EXCEPTIONS_ENABLE));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",257
000001BF 7631007C                		OR #7C00H, R1
000001C3 FD6813                  		MVTC R1, FPSW
000001C6 2Err                 B  		BRA L72
000001C8                         L67:	; bb44
                                 ;     258             }
                                 ;     259             else
                                 ;     260             {
                                 ;     261                 /* Clear only the FPU exception flags. */
                                 ;     262                 set_fpsw(temp_fpsw & ((uint32_t)~FPU_EXCEPTIONS_ENABLE));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",262
000001C8 7621FF83                		AND #0FFFF83FFH, R1
000001CC FD6813                  		MVTC R1, FPSW
000001CF 2Err                 B  		BRA L72
000001D1                         L68:	; bb54
                                 ;     263             }
                                 ;     264 
                                 ;     265         break;
                                 ;     266 
                                 ;     267         case (BSP_INT_SRC_EXC_NMI_PIN):
                                 ;     268 
                                 ;     269             if (true == enable)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",269
000001D1 B389                    		MOVU.B 0FH[R0], R1
000001D3 6111                    		CMP #01H, R1
000001D5 18                   S  		BNE L70
000001D6                         L69:	; bb55
000001D6 FBEE817508              		MOV.L #00087581H, R14
                                 ;     270             {
                                 ;     271                 /* Enable NMI pin interrupt (cannot undo!) */
                                 ;     272                 ICU.NMIER.BIT.NMIEN = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",272
000001DB F0E0                    		BSET #00H, [R14].B
000001DD 08                   S  		BRA L72
000001DE                         L70:	; bb59
                                 ;     273             }
                                 ;     274             else
                                 ;     275             {
                                 ;     276                 /* NMI pin interrupts cannot be disabled after being enabled. */
                                 ;     277                 err = BSP_INT_ERR_UNSUPPORTED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",277
000001DE 3E0103                  		MOV.L #00000003H, 04H[R0]
000001E1 08                   S  		BRA L72
000001E2                         L71:	; bb66
                                 ;     278             }
                                 ;     279 
                                 ;     280         break;
                                 ;     281 
                                 ;     282         default:
                                 ;     283             err = BSP_INT_ERR_UNSUPPORTED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",283
000001E2 3E0103                  		MOV.L #00000003H, 04H[R0]
000001E5                         L72:	; bb67
                                 ;     284         break;
                                 ;     285     }
                                 ;     286 
                                 ;     287     return err;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",287
000001E5 A809                    		MOV.L 04H[R0], R1
000001E7 A081                    		MOV.L R1, 08H[R0]
000001E9                         L73:	; bb67.split
                                 ;     288 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\mcu\rx63n\mcu_interrupts.c",288
000001E9 6705                    		RTSD #14H
                                 ;     289 
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         __$g_bsp_vectors:
00000000(0000002CH)              		.blkl	11
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00635   LINES

Section List

Attr         Size               Name
CODE     0000000491(000001EBH)  P
DATA     0000000044(0000002CH)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx99\$ccrx\mcu_interrupts.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\Mobile_build\mcu_interrupts.lst
-output=C:\Workspace\e2studio\git\MT01\Mobile_build\r_bsp\mcu\rx63n\mcu_interrupts.obj
