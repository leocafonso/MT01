* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Sun Feb 19 10:54:04 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  19-Feb-2017 10:54:04
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=stepper.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=stepper.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=0,MOBILE=1,FREE_RTOS_PP
                                 ;stepper.c
                                 
                                 		.glb	__Stderr
                                 		.glb	_en
                                 		.glb	_cm
                                 		.glb	_mr
                                 		.glb	_timerDwell
                                 		.glb	_zinhibitor
                                 		.glb	_configVarOx
                                 		.glb	_configVarMaq
                                 		.glb	_configFlags
                                 		.glb	_tempoDwell
                                 		.glb	_st_cfg
                                 		.glb	_st_pre
                                 		.glb	_isDwell
                                 		.glb	_zmoved
                                 		.glb	_zmove
                                 		.glb	_restart_stepper
                                 		.glb	_R_TMR_CreateOneShot
                                 		.glb	_R_TMR_CreatePeriodic
                                 		.glb	_R_CMT_Control
                                 		.glb	_stepper_init
                                 		.glb	_stepper_init_assertions
                                 		.glb	_R_CMT_CreatePeriodic
                                 		.glb	_stepper_test_assertions
                                 		.glb	_st_runtime_isbusy
                                 		.glb	_st_reset
                                 		.glb	_mp_set_steps_to_runtime_position
                                 		.glb	_st_clc
                                 		.glb	_st_energize_motors
                                 		.glb	_st_deenergize_motors
                                 		.glb	_st_motor_power_callback
                                 		.glb	_timer_dda_callback
                                 		.glb	_timer_dwell_callback
                                 		.glb	_SysTickTimer_getValue
                                 		.glb	_cm_get_combined_state
                                 		.glb	_sr_request_status_report
                                 		.glb	_R_TMR_Control
                                 		.glb	_mp_set_runtime_position
                                 		.glb	_delay_thcStartStop
                                 		.glb	_st_request_exec_move
                                 		.glb	_exec_timer_num
                                 		.glb	_load_timer_num
                                 		.glb	_mp_exec_move
                                 		.glb	_mp_runtime_command
                                 		.glb	_st_prep_line
                                 		.glb	_cm_hard_alarm
                                 		.glb	__FDclass
                                 		.glb	_min3
                                 		.glb	_max3
                                 		.glb	_round
                                 		.glb	_st_prep_null
                                 		.glb	_st_prep_command
                                 		.glb	_st_prep_dwell
                                 		.glb	_st_set_sa
                                 		.glb	_set_flt
                                 		.glb	_st_set_tr
                                 		.glb	_set_flu
                                 		.glb	_st_set_mi
                                 		.glb	_nv_add_conditional_message
                                 		.glb	_set_int
                                 		.glb	_st_set_pm
                                 		.glb	_set_ui8
                                 		.glb	_st_set_pl
                                 		.glb	_st_get_pwr
                                 		.glb	_st_set_mt
                                 		.glb	_fminf
                                 		.glb	_fmaxf
                                 		.glb	_st_set_md
                                 		.glb	_st_set_me
                                 		.glb	_st_command_dwell
                                 		.glb	_st_get_dwell_elapsed_time
                                 		.glb	_st_set_dwell_elapsed_time
                                 		.glb	_st_print_mt
                                 		.glb	_text_print_flt
                                 		.glb	_st_print_me
                                 		.glb	_text_print_nul
                                 		.glb	_st_print_md
                                 		.glb	_fprintf
                                 		.glb	_st_print_ma
                                 		.glb	_st_print_sa
                                 		.glb	_st_print_tr
                                 		.glb	_cm_get_units_mode
                                 		.glb	_st_print_mi
                                 		.glb	_st_print_po
                                 		.glb	_st_print_pm
                                 		.glb	_st_print_pl
                                 		.glb	_st_print_pwr
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _restart_stepper:
                                 		.STACK	_restart_stepper=4
                                 ;       1 /*
                                 ;       2  * stepper.c - stepper motor controls
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart, Jr.
                                 ;       6  * Copyright (c) 2013 - 2015 Robert Giseburt
                                 ;       7  *
                                 ;       8  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       9  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;      10  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      11  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      12  *
                                 ;      13  * As a special exception, you may use this file as part of a software library without
                                 ;      14  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      15  * inline functions from this file, or you compile this file and link it with  other
                                 ;      16  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      17  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      18  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      19  * GNU General Public License.
                                 ;      20  *
                                 ;      21  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      22  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      23  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      24  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      25  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      26  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      27  */
                                 ;      28 /* 	This module provides the low-level stepper drivers and some related functions.
                                 ;      29  *	See stepper.h for a detailed explanation of this module.
                                 ;      30  */
                                 ;      31 
                                 ;      32 #include "tinyg.h"
                                 ;      33 #include "config.h"
                                 ;      34 #include "stepper.h"
                                 ;      35 #include "encoder.h"
                                 ;      36 #include "planner.h"
                                 ;      37 #include "report.h"
                                 ;      38 #include "hardware.h"
                                 ;      39 #include "text_parser.h"
                                 ;      40 #include "util.h"
                                 ;      41 #include "lcd.h"
                                 ;      42 #include "plasma.h"
                                 ;      43 #include "switch.h"
                                 ;      44 #include "settings.h"
                                 ;      45 
                                 ;      46 #include "macros.h"
                                 ;      47 #include "eeprom.h"
                                 ;      48 
                                 ;      49 /**** Allocate structures ****/
                                 ;      50 
                                 ;      51 stConfig_t st_cfg;
                                 ;      52 stPrepSingleton_t st_pre;
                                 ;      53 static stRunSingleton_t st_run;
                                 ;      54 bool isDwell = false;
                                 ;      55 extern bool zmoved;
                                 ;      56 extern float zmove;
                                 ;      57 /**** Setup local functions ****/
                                 ;      58 
                                 ;      59 static void _load_move(void);
                                 ;      60 static void _request_load_move(void);
                                 ;      61 #ifdef __ARM
                                 ;      62 static void _set_motor_power_level(const uint8_t motor, const float power_level);
                                 ;      63 #endif
                                 ;      64 #ifdef __RX
                                 ;      65 void timer_dda_callback(void *pdata);
                                 ;      66 void timer_dwell_callback(void *pdata);
                                 ;      67 void exec_timer_num(void *pdata);
                                 ;      68 void load_timer_num(void *pdata);
                                 ;      69 
                                 ;      70 #endif
                                 ;      71 // handy macro
                                 ;      72 #define _f_to_period(f) (uint16_t)((float)F_CPU / (float)f)
                                 ;      73 
                                 ;      74 /**** Setup motate ****/
                                 ;      75 
                                 ;      76 #ifdef __ARM
                                 ;      77 using namespace Motate;
                                 ;      78 
                                 ;      79 OutputPin<kGRBL_CommonEnablePinNumber> common_enable;	 // shorter form of the above
                                 ;      80 OutputPin<kDebug1_PinNumber> dda_debug_pin1;
                                 ;      81 OutputPin<kDebug2_PinNumber> dda_debug_pin2;
                                 ;      82 OutputPin<kDebug3_PinNumber> dda_debug_pin3;
                                 ;      83 
                                 ;      84 // Example with prefixed name::
                                 ;      85 //Motate::Timer<dda_timer_num> dda_timer(kTimerUpToMatch, FREQUENCY_DDA);// stepper pulse generation
                                 ;      86 Timer<dda_timer_num> dda_timer(kTimerUpToMatch, FREQUENCY_DDA);			// stepper pulse generation
                                 ;      87 Timer<dwell_timer_num> dwell_timer(kTimerUpToMatch, FREQUENCY_DWELL);	// dwell timer
                                 ;      88 Timer<load_timer_num> load_timer;		// triggers load of next stepper segment
                                 ;      89 Timer<exec_timer_num> exec_timer;		// triggers calculation of next+1 stepper segment
                                 ;      90 
                                 ;      91 // Motor structures
                                 ;      92 template<pin_number step_num,			// Setup a stepper template to hold our pins
                                 ;      93 		 pin_number dir_num,
                                 ;      94 		 pin_number enable_num,
                                 ;      95 		 pin_number ms0_num,
                                 ;      96 		 pin_number ms1_num,
                                 ;      97 		 pin_number ms2_num,
                                 ;      98 		 pin_number vref_num>
                                 ;      99 
                                 ;     100 struct Stepper {
                                 ;     101 	/* stepper pin assignments */
                                 ;     102 
                                 ;     103 	OutputPin<step_num> step;
                                 ;     104 	OutputPin<dir_num> dir;
                                 ;     105 	OutputPin<enable_num> enable;
                                 ;     106 	OutputPin<ms0_num> ms0;
                                 ;     107 	OutputPin<ms1_num> ms1;
                                 ;     108 	OutputPin<ms2_num> ms2;
                                 ;     109 	PWMOutputPin<vref_num> vref;
                                 ;     110 
                                 ;     111 	/* stepper default values */
                                 ;     112 
                                 ;     113 	// sets default pwm freq for all motor vrefs (comment line also sets HiZ)
                                 ;     114 	Stepper(const uint32_t frequency = 500000) : vref(frequency) {};
                                 ;     115 //	Stepper(const uint32_t frequency = 100000) : vref(kDriveLowOnly, frequency) {};
                                 ;     116 
                                 ;     117 	/* functions bound to stepper structures */
                                 ;     118 
                                 ;     119 	void setMicrosteps(const uint8_t microsteps)
                                 ;     120 	{
                                 ;     121 		switch (microsteps) {
                                 ;     122 			case ( 1): { ms2=0; ms1=0; ms0=0; break; }
                                 ;     123 			case ( 2): { ms2=0; ms1=0; ms0=1; break; }
                                 ;     124 			case ( 4): { ms2=0; ms1=1; ms0=0; break; }
                                 ;     125 			case ( 8): { ms2=0; ms1=1; ms0=1; break; }
                                 ;     126 			case (16): { ms2=1; ms1=0; ms0=0; break; }
                                 ;     127 			case (32): { ms2=1; ms1=0; ms0=1; break; }
                                 ;     128 		}
                                 ;     129 	};
                                 ;     130 
                                 ;     131 	void energize(const uint8_t motor)
                                 ;     132 	{
                                 ;     133 		if (st_cfg.mot[motor].power_mode != MOTOR_DISABLED) {
                                 ;     134 			enable.clear();
                                 ;     135 			st_run.mot[motor].power_state = MOTOR_POWER_TIMEOUT_START;
                                 ;     136 		}
                                 ;     137 	};
                                 ;     138 };
                                 ;     139 
                                 ;     140 Stepper<kSocket1_StepPinNumber,
                                 ;     141 		kSocket1_DirPinNumber,
                                 ;     142 		kSocket1_EnablePinNumber,
                                 ;     143 		kSocket1_Microstep_0PinNumber,
                                 ;     144 		kSocket1_Microstep_1PinNumber,
                                 ;     145 		kSocket1_Microstep_2PinNumber,
                                 ;     146 		kSocket1_VrefPinNumber> motor_1;
                                 ;     147 
                                 ;     148 Stepper<kSocket2_StepPinNumber,
                                 ;     149 		kSocket2_DirPinNumber,
                                 ;     150 		kSocket2_EnablePinNumber,
                                 ;     151 		kSocket2_Microstep_0PinNumber,
                                 ;     152 		kSocket2_Microstep_1PinNumber,
                                 ;     153 		kSocket2_Microstep_2PinNumber,
                                 ;     154 		kSocket2_VrefPinNumber> motor_2;
                                 ;     155 
                                 ;     156 Stepper<kSocket3_StepPinNumber,
                                 ;     157 		kSocket3_DirPinNumber,
                                 ;     158 		kSocket3_EnablePinNumber,
                                 ;     159 		kSocket3_Microstep_0PinNumber,
                                 ;     160 		kSocket3_Microstep_1PinNumber,
                                 ;     161 		kSocket3_Microstep_2PinNumber,
                                 ;     162 		kSocket3_VrefPinNumber> motor_3;
                                 ;     163 
                                 ;     164 Stepper<kSocket4_StepPinNumber,
                                 ;     165 		kSocket4_DirPinNumber,
                                 ;     166 		kSocket4_EnablePinNumber,
                                 ;     167 		kSocket4_Microstep_0PinNumber,
                                 ;     168 		kSocket4_Microstep_1PinNumber,
                                 ;     169 		kSocket4_Microstep_2PinNumber,
                                 ;     170 		kSocket4_VrefPinNumber> motor_4;
                                 ;     171 
                                 ;     172 Stepper<kSocket5_StepPinNumber,
                                 ;     173 		kSocket5_DirPinNumber,
                                 ;     174 		kSocket5_EnablePinNumber,
                                 ;     175 		kSocket5_Microstep_0PinNumber,
                                 ;     176 		kSocket5_Microstep_1PinNumber,
                                 ;     177 		kSocket5_Microstep_2PinNumber,
                                 ;     178 		kSocket5_VrefPinNumber> motor_5;
                                 ;     179 
                                 ;     180 Stepper<kSocket6_StepPinNumber,
                                 ;     181 		kSocket6_DirPinNumber,
                                 ;     182 		kSocket6_EnablePinNumber,
                                 ;     183 		kSocket6_Microstep_0PinNumber,
                                 ;     184 		kSocket6_Microstep_1PinNumber,
                                 ;     185 		kSocket6_Microstep_2PinNumber,
                                 ;     186 		kSocket6_VrefPinNumber> motor_6;
                                 ;     187 
                                 ;     188 #endif // __ARM
                                 ;     189 
                                 ;     190 /************************************************************************************
                                 ;     191  **** CODE **************************************************************************
                                 ;     192  ************************************************************************************/
                                 ;     193 void restart_stepper()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",193
00000000 754360                  		MOV.L #00000060H, R3
00000003 6602                    		MOV.L #00000000H, R2
                                 ;     194 {
                                 ;     195 	memset(&st_run, 0, sizeof(st_run));			// clear all values, pointers and status
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",195
00000005 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000000B 7F88                    		SSTR.B
0000000D                         L12:	; entry.split
                                 ;     196 	stepper_init_assertions();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",196
0000000D 39rrrr               W  		BSR _stepper_init_assertions
00000010                         L13:	; entry.split1
00000010 6623                    		MOV.L #00000002H, R3
                                 ;     197     R_TMR_CreateOneShot((uint8_t)(1000000/FREQUENCY_SGI),exec_timer_num,TIMER_EXEC);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",197
00000012 FB22rrrrrrrr            		MOV.L #_exec_timer_num, R2
00000018 6651                    		MOV.L #00000005H, R1
0000001A 05rrrrrr             A  		BSR _R_TMR_CreateOneShot
0000001E                         L14:	; entry.split2
0000001E 6603                    		MOV.L #00000000H, R3
                                 ;     198     R_TMR_CreatePeriodic(2*FREQUENCY_DDA,timer_dda_callback,TIMER_DDA);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",198
00000020 FB22rrrrrrrr            		MOV.L #_timer_dda_callback, R2
00000026 FB1E400D03              		MOV.L #00030D40H, R1
0000002B 05rrrrrr             A  		BSR _R_TMR_CreatePeriodic
0000002F                         L15:	; entry.split3
0000002F 6613                    		MOV.L #00000001H, R3
                                 ;     199     R_TMR_CreateOneShot((uint8_t)(1000000/FREQUENCY_SGI),load_timer_num,TIMER_LOAD);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",199
00000031 FB22rrrrrrrr            		MOV.L #_load_timer_num, R2
00000037 6651                    		MOV.L #00000005H, R1
00000039 05rrrrrr             A  		BSR _R_TMR_CreateOneShot
0000003D                         L16:	; entry.split4
                                 ;     200  //   R_CMT_CreatePeriodic(FREQUENCY_DWELL,timer_dwell_callback,&timerDwell);
                                 ;     201     R_CMT_Control(timerDwell,CMT_RX_CMD_PAUSE,0);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",201
0000003D FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
00000043 ECE1                    		MOV.L [R14], R1
00000045 6603                    		MOV.L #00000000H, R3
00000047 6612                    		MOV.L #00000001H, R2
00000049 05rrrrrr             A  		BSR _R_CMT_Control
0000004D                         L17:	; entry.split5
                                 ;     202 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",202
0000004D FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000053 3C1201                  		MOV.B #01H, 02H[R1]
00000056 02                      		RTS
00000057                         _stepper_init:
                                 		.STACK	_stepper_init=4
                                 ;     203 }
                                 ;     204 /*
                                 ;     205  * stepper_init() - initialize stepper motor subsystem
                                 ;     206  *
                                 ;     207  *	Notes:
                                 ;     208  *	  - This init requires sys_init() to be run beforehand
                                 ;     209  * 	  - microsteps are setup during config_init()
                                 ;     210  *	  - motor polarity is setup during config_init()
                                 ;     211  *	  - high level interrupts must be enabled in main() once all inits are complete
                                 ;     212  */
                                 ;     213 /*	NOTE: This is the bare code that the Motate timer calls replace.
                                 ;     214  *	NB: requires: #include <component_tc.h>
                                 ;     215  *
                                 ;     216  *	REG_TC1_WPMR = 0x54494D00;			// enable write to registers
                                 ;     217  *	TC_Configure(TC_BLOCK_DDA, TC_CHANNEL_DDA, TC_CMR_DDA);
                                 ;     218  *	REG_RC_DDA = TC_RC_DDA;				// set frequency
                                 ;     219  *	REG_IER_DDA = TC_IER_DDA;			// enable interrupts
                                 ;     220  *	NVIC_EnableIRQ(TC_IRQn_DDA);
                                 ;     221  *	pmc_enable_periph_clk(TC_ID_DDA);
                                 ;     222  *	TC_Start(TC_BLOCK_DDA, TC_CHANNEL_DDA);
                                 ;     223  */
                                 ;     224 
                                 ;     225 void stepper_init()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",225
00000057 754360                  		MOV.L #00000060H, R3
0000005A 6602                    		MOV.L #00000000H, R2
                                 ;     226 {
                                 ;     227 	memset(&st_run, 0, sizeof(st_run));			// clear all values, pointers and status
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",227
0000005C FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000062 7F88                    		SSTR.B
00000064                         L19:	; entry.split
                                 ;     228 	stepper_init_assertions();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",228
00000064 39rrrr               W  		BSR _stepper_init_assertions
00000067                         L20:	; entry.split1
00000067 6623                    		MOV.L #00000002H, R3
                                 ;     229 
                                 ;     230 #ifdef __AVR
                                 ;     231 	// Configure virtual ports
                                 ;     232 	PORTCFG.VPCTRLA = PORTCFG_VP0MAP_PORT_MOTOR_1_gc | PORTCFG_VP1MAP_PORT_MOTOR_2_gc;
                                 ;     233 	PORTCFG.VPCTRLB = PORTCFG_VP2MAP_PORT_MOTOR_3_gc | PORTCFG_VP3MAP_PORT_MOTOR_4_gc;
                                 ;     234 
                                 ;     235 	// setup ports and data structures
                                 ;     236 	for (uint8_t i=0; i<MOTORS; i++) {
                                 ;     237 		hw.st_port[i]->DIR = MOTOR_PORT_DIR_gm;  // sets outputs for motors & GPIO1, and GPIO2 inputs
                                 ;     238 		hw.st_port[i]->OUT = MOTOR_ENABLE_BIT_bm;// zero port bits AND disable motor
                                 ;     239 	}
                                 ;     240 	// setup DDA timer
                                 ;     241 	TIMER_DDA.CTRLA = STEP_TIMER_DISABLE;		// turn timer off
                                 ;     242 	TIMER_DDA.CTRLB = STEP_TIMER_WGMODE;		// waveform mode
                                 ;     243 	TIMER_DDA.INTCTRLA = TIMER_DDA_INTLVL;		// interrupt mode
                                 ;     244 
                                 ;     245 	// setup DWELL timer
                                 ;     246 	TIMER_DWELL.CTRLA = STEP_TIMER_DISABLE;		// turn timer off
                                 ;     247 	TIMER_DWELL.CTRLB = STEP_TIMER_WGMODE;		// waveform mode
                                 ;     248 	TIMER_DWELL.INTCTRLA = TIMER_DWELL_INTLVL;	// interrupt mode
                                 ;     249 
                                 ;     250 	// setup software interrupt load timer
                                 ;     251 	TIMER_LOAD.CTRLA = LOAD_TIMER_DISABLE;		// turn timer off
                                 ;     252 	TIMER_LOAD.CTRLB = LOAD_TIMER_WGMODE;		// waveform mode
                                 ;     253 	TIMER_LOAD.INTCTRLA = TIMER_LOAD_INTLVL;	// interrupt mode
                                 ;     254 	TIMER_LOAD.PER = LOAD_TIMER_PERIOD;			// set period
                                 ;     255 
                                 ;     256 	// setup software interrupt exec timer
                                 ;     257 	TIMER_EXEC.CTRLA = EXEC_TIMER_DISABLE;		// turn timer off
                                 ;     258 	TIMER_EXEC.CTRLB = EXEC_TIMER_WGMODE;		// waveform mode
                                 ;     259 	TIMER_EXEC.INTCTRLA = TIMER_EXEC_INTLVL;	// interrupt mode
                                 ;     260 	TIMER_EXEC.PER = EXEC_TIMER_PERIOD;			// set period
                                 ;     261 
                                 ;     262 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;
                                 ;     263 	st_reset();									// reset steppers to known state
                                 ;     264 #endif // __AVR
                                 ;     265 
                                 ;     266 #ifdef __ARM
                                 ;     267 	// setup DDA timer (see FOOTNOTE)
                                 ;     268 	dda_timer.setInterrupts(kInterruptOnOverflow | kInterruptOnMatchA | kInterruptPriorityHighest);
                                 ;     269 	dda_timer.setDutyCycleA(0.25);
                                 ;     270 
                                 ;     271 	// setup DWELL timer
                                 ;     272 	dwell_timer.setInterrupts(kInterruptOnOverflow | kInterruptPriorityHighest);
                                 ;     273 
                                 ;     274 	// setup software interrupt load timer
                                 ;     275 	load_timer.setInterrupts(kInterruptOnSoftwareTrigger | kInterruptPriorityLow);
                                 ;     276 
                                 ;     277 	// setup software interrupt exec timer & initial condition
                                 ;     278 	exec_timer.setInterrupts(kInterruptOnSoftwareTrigger | kInterruptPriorityLowest);
                                 ;     279 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;
                                 ;     280 
                                 ;     281 	// setup motor power levels and apply power level to stepper drivers
                                 ;     282 	for (uint8_t motor=0; motor<MOTORS; motor++) {
                                 ;     283 		_set_motor_power_level(motor, st_cfg.mot[motor].power_level_scaled);
                                 ;     284 		st_run.mot[motor].power_level_dynamic = st_cfg.mot[motor].power_level_scaled;
                                 ;     285 	}
                                 ;     286 //	motor_1.vref = 0.25; // example of how to set vref duty cycle directly. Freq already set to 500000 Hz.
                                 ;     287 #endif // __ARM
                                 ;     288 
                                 ;     289 #ifdef __RX
                                 ;     290     R_TMR_CreateOneShot((uint8_t)(1000000/FREQUENCY_SGI),exec_timer_num,TIMER_EXEC);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",290
00000069 FB22rrrrrrrr            		MOV.L #_exec_timer_num, R2
0000006F 6651                    		MOV.L #00000005H, R1
00000071 05rrrrrr             A  		BSR _R_TMR_CreateOneShot
00000075                         L21:	; entry.split2
00000075 6603                    		MOV.L #00000000H, R3
                                 ;     291     R_TMR_CreatePeriodic(2*FREQUENCY_DDA,timer_dda_callback,TIMER_DDA);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",291
00000077 FB22rrrrrrrr            		MOV.L #_timer_dda_callback, R2
0000007D FB1E400D03              		MOV.L #00030D40H, R1
00000082 05rrrrrr             A  		BSR _R_TMR_CreatePeriodic
00000086                         L22:	; entry.split3
00000086 6613                    		MOV.L #00000001H, R3
                                 ;     292     R_TMR_CreateOneShot((uint8_t)(1000000/FREQUENCY_SGI),load_timer_num,TIMER_LOAD);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",292
00000088 FB22rrrrrrrr            		MOV.L #_load_timer_num, R2
0000008E 6651                    		MOV.L #00000005H, R1
00000090 05rrrrrr             A  		BSR _R_TMR_CreateOneShot
00000094                         L23:	; entry.split4
                                 ;     293     R_CMT_CreatePeriodic(FREQUENCY_DWELL,timer_dwell_callback,&timerDwell);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",293
00000094 FB32rrrrrrrr            		MOV.L #_timerDwell, R3
0000009A FB22rrrrrrrr            		MOV.L #_timer_dwell_callback, R2
000000A0 FB1A1027                		MOV.L #00002710H, R1
000000A4 05rrrrrr             A  		BSR _R_CMT_CreatePeriodic
000000A8                         L24:	; entry.split5
                                 ;     294     R_CMT_Control(timerDwell,CMT_RX_CMD_PAUSE,0);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",294
000000A8 FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
000000AE ECE1                    		MOV.L [R14], R1
000000B0 6603                    		MOV.L #00000000H, R3
000000B2 6612                    		MOV.L #00000001H, R2
000000B4 05rrrrrr             A  		BSR _R_CMT_Control
000000B8                         L25:	; entry.split6
                                 ;     295 
                                 ;     296 	// setup software interrupt load timer
                                 ;     297 
                                 ;     298 	// setup software interrupt exec timer & initial condition
                                 ;     299 
                                 ;     300 
                                 ;     301 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",301
000000B8 FB12rrrrrrrr            		MOV.L #_st_pre, R1
000000BE 3C1201                  		MOV.B #01H, 02H[R1]
000000C1                         L26:	; entry.split7
                                 ;     302 	st_reset();									// reset steppers to known state
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",302
000000C1 39rrrr               W  		BSR _st_reset
000000C4 02                      		RTS
000000C5                         _stepper_init_assertions:
                                 		.STACK	_stepper_init_assertions=4
                                 ;     303 
                                 ;     304 #endif // __RX
                                 ;     305 }
                                 ;     306 
                                 ;     307 /*
                                 ;     308  * stepper_init_assertions() - test assertions, return error code if violation exists
                                 ;     309  * stepper_test_assertions() - test assertions, return error code if violation exists
                                 ;     310  */
                                 ;     311 
                                 ;     312 void stepper_init_assertions()
                                 ;     313 {
                                 ;     314 	st_run.magic_end = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",314
000000C5 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
000000CB F9E92EEF12              		MOV.W #12EFH, 5CH[R14]
000000D0                         L28:	; entry.split
                                 ;     315 	st_run.magic_start = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",315
000000D0 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
000000D6 F8E9EF12                		MOV.W #12EFH, [R14]
000000DA                         L29:	; entry.split1
                                 ;     316 	st_pre.magic_end = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",316
000000DA FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000000E0 F9E942EF12              		MOV.W #12EFH, 84H[R14]
000000E5                         L30:	; entry.split2
                                 ;     317 	st_pre.magic_start = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",317
000000E5 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000000EB F8E9EF12                		MOV.W #12EFH, [R14]
000000EF 02                      		RTS
000000F0                         _stepper_test_assertions:
                                 		.STACK	_stepper_test_assertions=8
                                 ;     318 }
                                 ;     319 
                                 ;     320 stat_t stepper_test_assertions()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",320
000000F0 6040                    		SUB #04H, R0
                                 ;     321 {
                                 ;     322 	if (st_run.magic_end	!= MAGICNUM) return (STAT_STEPPER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",322
000000F2 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
000000F8 5DEE2E                  		MOVU.W 5CH[R14], R14
000000FB 760EEF12                		CMP #12EFH, R14
000000FF 10                   S  		BEQ L33
00000100                         L32:	; bb1
00000100 3C025D                  		MOV.B #5DH, 02H[R0]
00000103 2Err                 B  		BRA L40
00000105                         L33:	; bb8
                                 ;     323 	if (st_run.magic_start	!= MAGICNUM) return (STAT_STEPPER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",323
00000105 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
0000010B 5CEE                    		MOVU.W [R14], R14
0000010D 760EEF12                		CMP #12EFH, R14
00000111 10                   S  		BEQ L35
00000112                         L34:	; bb9
00000112 3C025D                  		MOV.B #5DH, 02H[R0]
00000115 2Err                 B  		BRA L40
00000117                         L35:	; bb17
                                 ;     324 	if (st_pre.magic_end	!= MAGICNUM) return (STAT_STEPPER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",324
00000117 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
0000011D 5DEE42                  		MOVU.W 84H[R14], R14
00000120 760EEF12                		CMP #12EFH, R14
00000124 10                   S  		BEQ L37
00000125                         L36:	; bb18
00000125 3C025D                  		MOV.B #5DH, 02H[R0]
00000128 2Err                 B  		BRA L40
0000012A                         L37:	; bb26
                                 ;     325 	if (st_pre.magic_start	!= MAGICNUM) return (STAT_STEPPER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",325
0000012A FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000130 5CEE                    		MOVU.W [R14], R14
00000132 760EEF12                		CMP #12EFH, R14
00000136 10                   S  		BEQ L39
00000137                         L38:	; bb27
00000137 3C025D                  		MOV.B #5DH, 02H[R0]
0000013A 08                   S  		BRA L40
0000013B                         L39:	; bb34
                                 ;     326 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",326
0000013B 3C0200                  		MOV.B #00H, 02H[R0]
0000013E                         L40:	; bb36
0000013E C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     327 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",327
00000142 B089                    		MOVU.B 03H[R0], R1
00000144 6701                    		RTSD #04H
00000146                         _st_runtime_isbusy:
                                 		.STACK	_st_runtime_isbusy=8
                                 ;     328 
                                 ;     329 /*
                                 ;     330  * st_runtime_isbusy() - return TRUE if runtime is busy:
                                 ;     331  *
                                 ;     332  *	Busy conditions:
                                 ;     333  *	- motors are running
                                 ;     334  *	- dwell is running
                                 ;     335  */
                                 ;     336 
                                 ;     337 uint8_t st_runtime_isbusy()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",337
00000146 6040                    		SUB #04H, R0
                                 ;     338 {
                                 ;     339 	if (st_run.dda_ticks_downcount == 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",339
00000148 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000014E A819                    		MOV.L 04H[R1], R1
00000150 6101                    		CMP #00H, R1
00000152 18                   S  		BNE L43
00000153                         L42:	; bb1
                                 ;     340 		return (false);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",340
00000153 3C0200                  		MOV.B #00H, 02H[R0]
00000156 08                   S  		BRA L44
00000157                         L43:	; bb6
                                 ;     341 	}
                                 ;     342 	return (true);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",342
00000157 3C0201                  		MOV.B #01H, 02H[R0]
0000015A                         L44:	; bb8
0000015A C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     343 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",343
0000015E B089                    		MOVU.B 03H[R0], R1
00000160 6701                    		RTSD #04H
00000162                         _st_reset:
                                 		.STACK	_st_reset=8
                                 ;     344 
                                 ;     345 /*
                                 ;     346  * st_reset() - reset stepper internals
                                 ;     347  */
                                 ;     348 
                                 ;     349 void st_reset()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",349
00000162 6040                    		SUB #04H, R0
                                 ;     350 {
                                 ;     351 	for (uint8_t motor=0; motor<MOTORS; motor++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",351
00000164 3C0300                  		MOV.B #00H, 03H[R0]
00000167 2Err                 B  		BRA L49
00000169                         L46:	; bb
                                 ;     352 		st_pre.mot[motor].prev_direction = STEP_INITIAL_DIRECTION;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",352
00000169 B089                    		MOVU.B 03H[R0], R1
0000016B 75111C                  		MUL #1CH, R1
0000016E FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000174 4B12                    		ADD R1, R2
00000176 3CA900                  		MOV.B #00H, 19H[R2]
00000179                         L47:	; bb.split
                                 ;     353 		st_run.mot[motor].substep_accumulator = 0;	// will become max negative during per-motor setup;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",353
00000179 B089                    		MOVU.B 03H[R0], R1
0000017B 751114                  		MUL #14H, R1
0000017E FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000184 4B12                    		ADD R1, R2
00000186 3E2400                  		MOV.L #00000000H, 10H[R2]
00000189                         L48:	; bb.split1
                                 ;     354 		st_pre.mot[motor].corrected_steps = 0;		// diagnostic only - no action effect
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",354
00000189 B089                    		MOVU.B 03H[R0], R1
0000018B 75111C                  		MUL #1CH, R1
0000018E FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000194 4B12                    		ADD R1, R2
00000196 3E2800                  		MOV.L #00000000H, 20H[R2]
00000199 B089                    		MOVU.B 03H[R0], R1
0000019B 6211                    		ADD #01H, R1
0000019D 8089                    		MOV.B R1, 03H[R0]
0000019F                         L49:	; bb15
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",351
0000019F B089                    		MOVU.B 03H[R0], R1
000001A1 6141                    		CMP #04H, R1
000001A3 29rr                    		BLT L46
000001A5                         L50:	; bb20
                                 ;     355 	}
                                 ;     356 	mp_set_steps_to_runtime_position();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",356
000001A5 05rrrrrr             A  		BSR _mp_set_steps_to_runtime_position
000001A9 6701                    		RTSD #04H
000001AB                         _st_clc:
                                 		.STACK	_st_clc=12
                                 ;     357 }
                                 ;     358 
                                 ;     359 /*
                                 ;     360  * st_clc() - clear counters
                                 ;     361  */
                                 ;     362 
                                 ;     363 stat_t st_clc(nvObj_t *nv)	// clear diagnostic counters, reset stepper prep
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",363
000001AB 6080                    		SUB #08H, R0
000001AD A009                    		MOV.L R1, 04H[R0]
                                 ;     364 {
                                 ;     365 	st_reset();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",365
000001AF 39rrrr               W  		BSR _st_reset
000001B2                         L52:	; entry.split
                                 ;     366 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",366
000001B2 3C0300                  		MOV.B #00H, 03H[R0]
000001B5 B089                    		MOVU.B 03H[R0], R1
000001B7                         L53:	; entry.split1
                                 ;     367 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",367
000001B7 5B11                    		MOVU.B R1, R1
000001B9 6702                    		RTSD #08H
000001BB                         __$_motor_is_enabled:
                                 		.STACK	__$_motor_is_enabled=8
                                 ;     368 
                                 ;     369 /*
                                 ;     370  * Motor power management functions
                                 ;     371  *
                                 ;     372  * _deenergize_motor()		 - remove power from a motor
                                 ;     373  * _energize_motor()		 - apply power to a motor
                                 ;     374  * _set_motor_power_level()	 - set the actual Vref to a specified power level
                                 ;     375  *
                                 ;     376  * st_energize_motors()		 - apply power to all motors
                                 ;     377  * st_deenergize_motors()	 - remove power from all motors
                                 ;     378  * st_motor_power_callback() - callback to manage motor power sequencing
                                 ;     379  */
                                 ;     380 
                                 ;     381 static uint8_t _motor_is_enabled(uint8_t motor)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",381
000001BB 6040                    		SUB #04H, R0
000001BD 8089                    		MOV.B R1, 03H[R0]
                                 ;     382 {
                                 ;     383 //RXMOD	uint8_t port;
                                 ;     384 //	switch(motor) {
                                 ;     385 //		case (MOTOR_1): { port = PORT_MOTOR_1_VPORT.OUT; break; }
                                 ;     386 //		case (MOTOR_2): { port = PORT_MOTOR_2_VPORT.OUT; break; }
                                 ;     387 //		case (MOTOR_3): { port = PORT_MOTOR_3_VPORT.OUT; break; }
                                 ;     388 //		case (MOTOR_4): { port = PORT_MOTOR_4_VPORT.OUT; break; }
                                 ;     389 //		default: port = 0xff;	// defaults to disabled for bad motor input value
                                 ;     390 //	}
                                 ;     391 //	return ((port & MOTOR_ENABLE_BIT_bm) ? 0 : 1);	// returns 1 if motor is enabled (motor is actually active low)
                                 ;     392 	return 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",392
000001BF 3C0200                  		MOV.B #00H, 02H[R0]
000001C2 B081                    		MOVU.B 02H[R0], R1
000001C4                         L55:	; entry.split
                                 ;     393 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",393
000001C4 5B11                    		MOVU.B R1, R1
000001C6 6701                    		RTSD #04H
000001C8                         __$_deenergize_motor:
                                 		.STACK	__$_deenergize_motor=8
                                 ;     394 
                                 ;     395 static void _deenergize_motor(const uint8_t motor)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",395
000001C8 6040                    		SUB #04H, R0
000001CA 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",416
000001CC 6701                    		RTSD #04H
000001CE                         __$_energize_motor:
                                 		.STACK	__$_energize_motor=8
                                 ;     396 {
                                 ;     397 #ifdef __AVR
                                 ;     398 	switch (motor) {
                                 ;     399 		case (MOTOR_1): { PORT_MOTOR_1_VPORT.OUT |= MOTOR_ENABLE_BIT_bm; break; }
                                 ;     400 		case (MOTOR_2): { PORT_MOTOR_2_VPORT.OUT |= MOTOR_ENABLE_BIT_bm; break; }
                                 ;     401 		case (MOTOR_3): { PORT_MOTOR_3_VPORT.OUT |= MOTOR_ENABLE_BIT_bm; break; }
                                 ;     402 		case (MOTOR_4): { PORT_MOTOR_4_VPORT.OUT |= MOTOR_ENABLE_BIT_bm; break; }
                                 ;     403 	}
                                 ;     404 	st_run.mot[motor].power_state = MOTOR_OFF;
                                 ;     405 #endif
                                 ;     406 #ifdef __ARM
                                 ;     407 	// Motors that are not defined are not compiled. Saves some ugly #ifdef code
                                 ;     408 	if (!motor_1.enable.isNull()) if (motor == MOTOR_1) motor_1.enable.set();	// set disables the motor
                                 ;     409 	if (!motor_2.enable.isNull()) if (motor == MOTOR_2) motor_2.enable.set();
                                 ;     410 	if (!motor_3.enable.isNull()) if (motor == MOTOR_3) motor_3.enable.set();
                                 ;     411 	if (!motor_4.enable.isNull()) if (motor == MOTOR_4) motor_4.enable.set();
                                 ;     412 	if (!motor_5.enable.isNull()) if (motor == MOTOR_5) motor_5.enable.set();
                                 ;     413 	if (!motor_6.enable.isNull()) if (motor == MOTOR_6) motor_6.enable.set();
                                 ;     414 	st_run.mot[motor].power_state = MOTOR_OFF;
                                 ;     415 #endif
                                 ;     416 }
                                 ;     417 
                                 ;     418 static void _energize_motor(const uint8_t motor)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",418
000001CE 6040                    		SUB #04H, R0
000001D0 8089                    		MOV.B R1, 03H[R0]
                                 ;     419 {
                                 ;     420 	if (st_cfg.mot[motor].power_mode == MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",420
000001D2 B089                    		MOVU.B 03H[R0], R1
000001D4 751124                  		MUL #24H, R1
000001D7 FB22rrrrrrrr            		MOV.L #_st_cfg, R2
000001DD 4B12                    		ADD R1, R2
000001DF B329                    		MOVU.B 0DH[R2], R1
000001E1 6101                    		CMP #00H, R1
000001E3 18                   S  		BNE L60
000001E4                         L58:	; bb2
                                 ;     421 		_deenergize_motor(motor);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",421
000001E4 B089                    		MOVU.B 03H[R0], R1
000001E6 39rrrr               W  		BSR __$_deenergize_motor
000001E9                         L59:	; bb2.split
                                 ;     422 		return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",422
000001E9 6701                    		RTSD #04H
000001EB                         L60:	; bb12
                                 ;     423 	}
                                 ;     424 #ifdef __AVR
                                 ;     425 	switch(motor) {
                                 ;     426 		case (MOTOR_1): { PORT_MOTOR_1_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm; break; }
                                 ;     427 		case (MOTOR_2): { PORT_MOTOR_2_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm; break; }
                                 ;     428 		case (MOTOR_3): { PORT_MOTOR_3_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm; break; }
                                 ;     429 		case (MOTOR_4): { PORT_MOTOR_4_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm; break; }
                                 ;     430 	}
                                 ;     431 #endif
                                 ;     432 #ifdef __ARM
                                 ;     433 	// Motors that are not defined are not compiled. Saves some ugly #ifdef code
                                 ;     434 	//	case (MOTOR_1): { motor_1.energize(MOTOR_1); break; }
                                 ;     435 	if (!motor_1.enable.isNull()) if (motor == MOTOR_1) motor_1.energize(MOTOR_1);
                                 ;     436 	if (!motor_2.enable.isNull()) if (motor == MOTOR_2) motor_2.energize(MOTOR_2);
                                 ;     437 	if (!motor_3.enable.isNull()) if (motor == MOTOR_3) motor_3.energize(MOTOR_3);
                                 ;     438 	if (!motor_4.enable.isNull()) if (motor == MOTOR_4) motor_4.energize(MOTOR_4);
                                 ;     439 	if (!motor_5.enable.isNull()) if (motor == MOTOR_5) motor_5.energize(MOTOR_5);
                                 ;     440 	if (!motor_6.enable.isNull()) if (motor == MOTOR_6) motor_6.energize(MOTOR_6);
                                 ;     441 #endif
                                 ;     442 	st_run.mot[motor].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",442
000001EB B089                    		MOVU.B 03H[R0], R1
000001ED 751114                  		MUL #14H, R1
000001F0 FB22rrrrrrrr            		MOV.L #__$st_run, R2
000001F6 4B12                    		ADD R1, R2
000001F8 3CA403                  		MOV.B #03H, 14H[R2]
000001FB 6701                    		RTSD #04H
000001FD                         _st_energize_motors:
                                 		.STACK	_st_energize_motors=8
                                 ;     443 }
                                 ;     444 
                                 ;     445 /*
                                 ;     446  * _set_motor_power_level()	- applies the power level to the requested motor.
                                 ;     447  *
                                 ;     448  *	The power_level must be a compensated PWM value - presumably one of:
                                 ;     449  *		st_cfg.mot[motor].power_level_scaled
                                 ;     450  *		st_run.mot[motor].power_level_dynamic
                                 ;     451  */
                                 ;     452 #ifdef __ARM
                                 ;     453 static void _set_motor_power_level(const uint8_t motor, const float power_level)
                                 ;     454 {
                                 ;     455 	// power_level must be scaled properly for the driver's Vref voltage requirements
                                 ;     456 	if (!motor_1.enable.isNull()) if (motor == MOTOR_1) motor_1.vref = power_level;
                                 ;     457 	if (!motor_2.enable.isNull()) if (motor == MOTOR_2) motor_2.vref = power_level;
                                 ;     458 	if (!motor_3.enable.isNull()) if (motor == MOTOR_3) motor_3.vref = power_level;
                                 ;     459 	if (!motor_4.enable.isNull()) if (motor == MOTOR_4) motor_4.vref = power_level;
                                 ;     460 	if (!motor_5.enable.isNull()) if (motor == MOTOR_5) motor_5.vref = power_level;
                                 ;     461 	if (!motor_6.enable.isNull()) if (motor == MOTOR_6) motor_6.vref = power_level;
                                 ;     462 }
                                 ;     463 #endif
                                 ;     464 
                                 ;     465 void st_energize_motors()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",465
000001FD 6040                    		SUB #04H, R0
                                 ;     466 {
                                 ;     467 	for (uint8_t motor = MOTOR_1; motor < MOTORS; motor++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",467
000001FF 3C0300                  		MOV.B #00H, 03H[R0]
00000202 2Err                 B  		BRA L64
00000204                         L62:	; bb
                                 ;     468 		_energize_motor(motor);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",468
00000204 B089                    		MOVU.B 03H[R0], R1
00000206 39rrrr               W  		BSR __$_energize_motor
00000209                         L63:	; bb.split
                                 ;     469 		st_run.mot[motor].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",469
00000209 B089                    		MOVU.B 03H[R0], R1
0000020B 751114                  		MUL #14H, R1
0000020E FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000214 4B12                    		ADD R1, R2
00000216 3CA403                  		MOV.B #03H, 14H[R2]
00000219 B089                    		MOVU.B 03H[R0], R1
0000021B 6211                    		ADD #01H, R1
0000021D 8089                    		MOV.B R1, 03H[R0]
0000021F                         L64:	; bb8
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",467
0000021F B089                    		MOVU.B 03H[R0], R1
00000221 6141                    		CMP #04H, R1
00000223 29rr                    		BLT L62
00000225                         L65:	; return
                                 ;     470 	}
                                 ;     471 #ifdef __ARM
                                 ;     472 	common_enable.clear();			// enable gShield common enable
                                 ;     473 #endif
                                 ;     474 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",474
00000225 6701                    		RTSD #04H
00000227                         _st_deenergize_motors:
                                 		.STACK	_st_deenergize_motors=8
                                 ;     475 
                                 ;     476 void st_deenergize_motors()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",476
00000227 6040                    		SUB #04H, R0
                                 ;     477 {
                                 ;     478 	for (uint8_t motor = MOTOR_1; motor < MOTORS; motor++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",478
00000229 3C0300                  		MOV.B #00H, 03H[R0]
0000022C 2Err                 B  		BRA L68
0000022E                         L67:	; bb
                                 ;     479 		_deenergize_motor(motor);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",479
0000022E B089                    		MOVU.B 03H[R0], R1
00000230 39rrrr               W  		BSR __$_deenergize_motor
00000233 B089                    		MOVU.B 03H[R0], R1
00000235 6211                    		ADD #01H, R1
00000237 8089                    		MOV.B R1, 03H[R0]
00000239                         L68:	; bb4
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",478
00000239 B089                    		MOVU.B 03H[R0], R1
0000023B 6141                    		CMP #04H, R1
0000023D 29rr                    		BLT L67
0000023F                         L69:	; return
                                 ;     480 	}
                                 ;     481 #ifdef __ARM
                                 ;     482 	common_enable.set();			// disable gShield common enable
                                 ;     483 #endif
                                 ;     484 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",484
0000023F 6701                    		RTSD #04H
00000241                         _st_motor_power_callback:
                                 		.STACK	_st_motor_power_callback=16
                                 ;     485 
                                 ;     486 /*
                                 ;     487  * st_motor_power_callback() - callback to manage motor power sequencing
                                 ;     488  *
                                 ;     489  *	Handles motor power-down timing, low-power idle, and adaptive motor power
                                 ;     490  */
                                 ;     491 stat_t st_motor_power_callback() 	// called by controller
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",491
00000241 7EA6                    		PUSH.L R6
00000243 6080                    		SUB #08H, R0
                                 ;     492 {
                                 ;     493 	// manage power for each motor individually
                                 ;     494 	for (uint8_t m = MOTOR_1; m < MOTORS; m++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",494
00000245 3C0600                  		MOV.B #00H, 06H[R0]
00000248 38rrrr               W  		BRA L95
0000024B                         L71:	; bb2
                                 ;     495 
                                 ;     496 		// de-energize motor if it's set to MOTOR_DISABLED
                                 ;     497 		if (st_cfg.mot[m].power_mode == MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",497
0000024B B181                    		MOVU.B 06H[R0], R1
0000024D 751124                  		MUL #24H, R1
00000250 FB22rrrrrrrr            		MOV.L #_st_cfg, R2
00000256 4B12                    		ADD R1, R2
00000258 B329                    		MOVU.B 0DH[R2], R1
0000025A 6101                    		CMP #00H, R1
0000025C 18                   S  		BNE L73
0000025D                         L72:	; bb3
                                 ;     498 			_deenergize_motor(m);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",498
0000025D B181                    		MOVU.B 06H[R0], R1
0000025F 39rrrr               W  		BSR __$_deenergize_motor
00000262 38rrrr               W  		BRA L94
00000265                         L73:	; bb15
                                 ;     499 			continue;
                                 ;     500 		}
                                 ;     501 
                                 ;     502 		// energize motor if it's set to MOTOR_ALWAYS_POWERED
                                 ;     503 		if (st_cfg.mot[m].power_mode == MOTOR_ALWAYS_POWERED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",503
00000265 B181                    		MOVU.B 06H[R0], R1
00000267 751124                  		MUL #24H, R1
0000026A FB22rrrrrrrr            		MOV.L #_st_cfg, R2
00000270 4B12                    		ADD R1, R2
00000272 B329                    		MOVU.B 0DH[R2], R1
00000274 6111                    		CMP #01H, R1
00000276 21rr                    		BNE L79
00000278                         L74:	; bb17
                                 ;     504 			if (! _motor_is_enabled(m)) _energize_motor(m);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",504
00000278 B181                    		MOVU.B 06H[R0], R1
0000027A 39rrrr               W  		BSR __$_motor_is_enabled
0000027D 6101                    		CMP #00H, R1
0000027F 21rr                    		BNE L76
00000281 2Err                 B  		BRA L77
00000283                         L75:	; bb18
00000283 B181                    		MOVU.B 06H[R0], R1
00000285 39rrrr               W  		BSR __$_energize_motor
00000288 38rrrr               W  		BRA L94
0000028B                         L76:	; bb25
0000028B F80600                  		MOV.L #00000000H, [R0]
0000028E 08                   S  		BRA L78
0000028F                         L77:	; bb26
0000028F F80601                  		MOV.L #00000001H, [R0]
00000292                         L78:	; bb27
00000292 EC01                    		MOV.L [R0], R1
00000294 6101                    		CMP #00H, R1
00000296 21rr                    		BNE L75
00000298 38rrrr               W  		BRA L94
0000029B                         L79:	; bb43
                                 ;     505 			continue;
                                 ;     506 		}
                                 ;     507 
                                 ;     508 		// start a countdown if MOTOR_POWERED_IN_CYCLE or MOTOR_POWERED_ONLY_WHEN_MOVING
                                 ;     509 		if (st_run.mot[m].power_state == MOTOR_POWER_TIMEOUT_START) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",509
0000029B B181                    		MOVU.B 06H[R0], R1
0000029D 751114                  		MUL #14H, R1
000002A0 FB22rrrrrrrr            		MOV.L #__$st_run, R2
000002A6 4B12                    		ADD R1, R2
000002A8 B521                    		MOVU.B 14H[R2], R1
000002AA 6131                    		CMP #03H, R1
000002AC 21rr                    		BNE L87
000002AE                         L80:	; bb44
                                 ;     510 			st_run.mot[m].power_state = MOTOR_POWER_TIMEOUT_COUNTDOWN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",510
000002AE B181                    		MOVU.B 06H[R0], R1
000002B0 751114                  		MUL #14H, R1
000002B3 FB22rrrrrrrr            		MOV.L #__$st_run, R2
000002B9 4B12                    		ADD R1, R2
000002BB 3CA404                  		MOV.B #04H, 14H[R2]
000002BE                         L81:	; bb44.split
                                 ;     511 			st_run.mot[m].power_systick = SysTickTimer_getValue() +
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",511
000002BE B186                    		MOVU.B 06H[R0], R6
000002C0 05rrrrrr             A  		BSR _SysTickTimer_getValue
000002C4 751614                  		MUL #14H, R6
000002C7 FB22rrrrrrrr            		MOV.L #__$st_run, R2
000002CD 4B62                    		ADD R6, R2
000002CF FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
000002D5 ECEE                    		MOV.L [R14], R14
000002D7 FD723E00007A44          		FMUL #447A0000H, R14
000002DE 7DF1                    		BTST #1FH, R1
000002E0 20rr                    		BEQ L83
000002E2                         L82:	; bb44.split
000002E2 FD811F                  		SHLR #01H, R1, R15
000002E5 6411                    		AND #01H, R1
000002E7 57F1                    		OR R15, R1
000002E9 FC471F                  		ITOF R1, R15
000002EC FC8BFF                  		FADD R15, R15
000002EF 08                   S  		BRA L84
000002F0                         L83:	; bb44.split
000002F0 FC471F                  		ITOF R1, R15
000002F3                         L84:	; bb44.split
000002F3 FC8BEF                  		FADD R14, R15
000002F6 FD721F0000004F          		FCMP #4F000000H, R15
000002FD 29rr                    		BLT L86
000002FF                         L85:	; bb44.split
000002FF FD722F000080CF          		FADD #0CF800000H, R15
00000306                         L86:	; bb44.split
00000306 FC97F1                  		FTOI R15, R1
00000309 A1A1                    		MOV.L R1, 18H[R2]
0000030B                         L87:	; bb69
                                 ;     512 											(st_cfg.motor_power_timeout * 1000);
                                 ;     513 		}
                                 ;     514 
                                 ;     515 		// do not process countdown if in a feedhold
                                 ;     516 		if (cm_get_combined_state() == COMBINED_HOLD) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",516
0000030B 05rrrrrr             A  		BSR _cm_get_combined_state
0000030F 6161                    		CMP #06H, R1
00000311 20rr                    		BEQ L94
00000313                         L88:	; bb78
                                 ;     517 			continue;
                                 ;     518 		}
                                 ;     519 
                                 ;     520 		// do not process countdown if in a feedhold
                                 ;     521 		if (cm_get_combined_state() == COMBINED_HOLD) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",521
00000313 05rrrrrr             A  		BSR _cm_get_combined_state
00000317 6161                    		CMP #06H, R1
00000319 20rr                    		BEQ L94
0000031B                         L89:	; bb87
                                 ;     522 			continue;
                                 ;     523 		}
                                 ;     524 
                                 ;     525 		// run the countdown if you are in a countdown
                                 ;     526 		if (st_run.mot[m].power_state == MOTOR_POWER_TIMEOUT_COUNTDOWN) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",526
0000031B B181                    		MOVU.B 06H[R0], R1
0000031D 751114                  		MUL #14H, R1
00000320 FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000326 4B12                    		ADD R1, R2
00000328 B521                    		MOVU.B 14H[R2], R1
0000032A 6141                    		CMP #04H, R1
0000032C 21rr                    		BNE L94
0000032E                         L90:	; bb89
                                 ;     527 			if (SysTickTimer_getValue() > st_run.mot[m].power_systick ) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",527
0000032E 05rrrrrr             A  		BSR _SysTickTimer_getValue
00000332 B182                    		MOVU.B 06H[R0], R2
00000334 751214                  		MUL #14H, R2
00000337 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
0000033D 4B2E                    		ADD R2, R14
0000033F 0685E106                		CMP 18H[R14].L, R1
00000343 25rr                    		BLEU L94
00000345                         L91:	; bb90
                                 ;     528 				st_run.mot[m].power_state = MOTOR_IDLE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",528
00000345 B181                    		MOVU.B 06H[R0], R1
00000347 751114                  		MUL #14H, R1
0000034A FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000350 4B12                    		ADD R1, R2
00000352 3CA401                  		MOV.B #01H, 14H[R2]
00000355                         L92:	; bb90.split
                                 ;     529 				_deenergize_motor(m);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",529
00000355 B181                    		MOVU.B 06H[R0], R1
00000357 39rrrr               W  		BSR __$_deenergize_motor
0000035A                         L93:	; bb90.split1
0000035A 6601                    		MOV.L #00000000H, R1
                                 ;     530                 sr_request_status_report(SR_TIMED_REQUEST);		// request a status report when motors shut down
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",530
0000035C 05rrrrrr             A  		BSR _sr_request_status_report
00000360                         L94:	; bb117
00000360 B181                    		MOVU.B 06H[R0], R1
00000362 6211                    		ADD #01H, R1
00000364 8181                    		MOV.B R1, 06H[R0]
00000366                         L95:	; bb120
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",494
00000366 B181                    		MOVU.B 06H[R0], R1
00000368 6141                    		CMP #04H, R1
0000036A 28rr                  * 		BLT L71
         38rrrr                  
0000036F                         L96:	; bb126
                                 ;     531 			}
                                 ;     532 		}
                                 ;     533 	}
                                 ;     534 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",534
0000036F 3C0700                  		MOV.B #00H, 07H[R0]
00000372 B189                    		MOVU.B 07H[R0], R1
00000374                         L97:	; bb126.split
                                 ;     535 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",535
00000374 5B11                    		MOVU.B R1, R1
00000376 3F6603                  		RTSD #0CH, R6-R6
00000379                         _timer_dda_callback:
                                 		.STACK	_timer_dda_callback=12
                                 ;     536 
                                 ;     537 
                                 ;     538 /******************************
                                 ;     539  * Interrupt Service Routines *
                                 ;     540  ******************************/
                                 ;     541 
                                 ;     542 /***** Stepper Interrupt Service Routine ************************************************
                                 ;     543  * ISR - DDA timer interrupt routine - service ticks from DDA timer
                                 ;     544  */
                                 ;     545 
                                 ;     546 #ifdef __AVR
                                 ;     547 /*
                                 ;     548  *	Uses direct struct addresses and literal values for hardware devices - it's faster than
                                 ;     549  *	using indexed timer and port accesses. I checked. Even when -0s or -03 is used.
                                 ;     550  */
                                 ;     551 ISR(TIMER_DDA_ISR_vect)
                                 ;     552 {
                                 ;     553 	if ((st_run.mot[MOTOR_1].substep_accumulator += st_run.mot[MOTOR_1].substep_increment) > 0) {
                                 ;     554 		PORT_MOTOR_1_VPORT.OUT |= STEP_BIT_bm;		// turn step bit on
                                 ;     555 		st_run.mot[MOTOR_1].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     556 		INCREMENT_ENCODER(MOTOR_1);
                                 ;     557 	}
                                 ;     558 	if ((st_run.mot[MOTOR_2].substep_accumulator += st_run.mot[MOTOR_2].substep_increment) > 0) {
                                 ;     559 		PORT_MOTOR_2_VPORT.OUT |= STEP_BIT_bm;
                                 ;     560 		st_run.mot[MOTOR_2].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     561 		INCREMENT_ENCODER(MOTOR_2);
                                 ;     562 	}
                                 ;     563 	if ((st_run.mot[MOTOR_3].substep_accumulator += st_run.mot[MOTOR_3].substep_increment) > 0) {
                                 ;     564 		PORT_MOTOR_3_VPORT.OUT |= STEP_BIT_bm;
                                 ;     565 		st_run.mot[MOTOR_3].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     566 		INCREMENT_ENCODER(MOTOR_3);
                                 ;     567 	}
                                 ;     568 	if ((st_run.mot[MOTOR_4].substep_accumulator += st_run.mot[MOTOR_4].substep_increment) > 0) {
                                 ;     569 		PORT_MOTOR_4_VPORT.OUT |= STEP_BIT_bm;
                                 ;     570 		st_run.mot[MOTOR_4].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     571 		INCREMENT_ENCODER(MOTOR_4);
                                 ;     572 	}
                                 ;     573 
                                 ;     574 	// pulse stretching for using external drivers.- turn step bits off
                                 ;     575 	PORT_MOTOR_1_VPORT.OUT &= ~STEP_BIT_bm;				// ~ 5 uSec pulse width
                                 ;     576 	PORT_MOTOR_2_VPORT.OUT &= ~STEP_BIT_bm;				// ~ 4 uSec
                                 ;     577 	PORT_MOTOR_3_VPORT.OUT &= ~STEP_BIT_bm;				// ~ 3 uSec
                                 ;     578 	PORT_MOTOR_4_VPORT.OUT &= ~STEP_BIT_bm;				// ~ 2 uSec
                                 ;     579 
                                 ;     580 	if (--st_run.dda_ticks_downcount != 0) return;
                                 ;     581 
                                 ;     582 	TIMER_DDA.CTRLA = STEP_TIMER_DISABLE;				// disable DDA timer
                                 ;     583 	_load_move();										// load the next move
                                 ;     584 }
                                 ;     585 #endif // __AVR
                                 ;     586 
                                 ;     587 #ifdef __ARM
                                 ;     588 /*
                                 ;     589  *	This interrupt is really 2 interrupts. It fires on timer overflow and also on match.
                                 ;     590  *	Overflow interrupts are used to set step pins, match interrupts clear step pins.
                                 ;     591  *	This way the duty cycle of the stepper pulse can be controlled by setting the match value.
                                 ;     592  *
                                 ;     593  *	Note that the motor_N.step.isNull() tests are compile-time tests, not run-time tests.
                                 ;     594  *	If motor_N is not defined that if{} clause (i.e. that motor) drops out of the complied code.
                                 ;     595  */
                                 ;     596 namespace Motate {			// Must define timer interrupts inside the Motate namespace
                                 ;     597 MOTATE_TIMER_INTERRUPT(dda_timer_num)
                                 ;     598 {
                                 ;     599 //    dda_debug_pin1 = 1;
                                 ;     600 	uint32_t interrupt_cause = dda_timer.getInterruptCause();	// also clears interrupt condition
                                 ;     601 
                                 ;     602 	if (interrupt_cause == kInterruptOnOverflow) {
                                 ;     603 
                                 ;     604 		if (!motor_1.step.isNull() && (st_run.mot[MOTOR_1].substep_accumulator += st_run.mot[MOTOR_1].substep_increment) > 0) {
                                 ;     605 			motor_1.step.set();		// turn step bit on
                                 ;     606 			st_run.mot[MOTOR_1].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     607 			INCREMENT_ENCODER(MOTOR_1);
                                 ;     608 		}
                                 ;     609 		if (!motor_2.step.isNull() && (st_run.mot[MOTOR_2].substep_accumulator += st_run.mot[MOTOR_2].substep_increment) > 0) {
                                 ;     610 			motor_2.step.set();
                                 ;     611 			st_run.mot[MOTOR_2].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     612 			INCREMENT_ENCODER(MOTOR_2);
                                 ;     613 		}
                                 ;     614 		if (!motor_3.step.isNull() && (st_run.mot[MOTOR_3].substep_accumulator += st_run.mot[MOTOR_3].substep_increment) > 0) {
                                 ;     615 			motor_3.step.set();
                                 ;     616 			st_run.mot[MOTOR_3].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     617 			INCREMENT_ENCODER(MOTOR_3);
                                 ;     618 		}
                                 ;     619 		if (!motor_4.step.isNull() && (st_run.mot[MOTOR_4].substep_accumulator += st_run.mot[MOTOR_4].substep_increment) > 0) {
                                 ;     620 			motor_4.step.set();
                                 ;     621 			st_run.mot[MOTOR_4].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     622 			INCREMENT_ENCODER(MOTOR_4);
                                 ;     623 		}
                                 ;     624 		if (!motor_5.step.isNull() && (st_run.mot[MOTOR_5].substep_accumulator += st_run.mot[MOTOR_5].substep_increment) > 0) {
                                 ;     625 			motor_5.step.set();
                                 ;     626 			st_run.mot[MOTOR_5].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     627 			INCREMENT_ENCODER(MOTOR_5);
                                 ;     628 		}
                                 ;     629 		if (!motor_6.step.isNull() && (st_run.mot[MOTOR_6].substep_accumulator += st_run.mot[MOTOR_6].substep_increment) > 0) {
                                 ;     630 			motor_6.step.set();
                                 ;     631 			st_run.mot[MOTOR_6].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 ;     632 			INCREMENT_ENCODER(MOTOR_6);
                                 ;     633 		}
                                 ;     634 
                                 ;     635 	} else if (interrupt_cause == kInterruptOnMatchA) {
                                 ;     636 //		dda_debug_pin2 = 1;
                                 ;     637 		motor_1.step.clear();							// turn step bits off
                                 ;     638 		motor_2.step.clear();
                                 ;     639 		motor_3.step.clear();
                                 ;     640 		motor_4.step.clear();
                                 ;     641 		motor_5.step.clear();
                                 ;     642 		motor_6.step.clear();
                                 ;     643 
                                 ;     644 		if (--st_run.dda_ticks_downcount != 0) return;
                                 ;     645 
                                 ;     646 		// process end of segment
                                 ;     647 		dda_timer.stop();								// turn it off or it will keep stepping out the last segment
                                 ;     648 		_load_move();									// load the next move at the current interrupt level
                                 ;     649 //		dda_debug_pin2 = 0;
                                 ;     650 	}
                                 ;     651 //    dda_debug_pin1 = 0;
                                 ;     652 } // MOTATE_TIMER_INTERRUPT
                                 ;     653 } // namespace Motate
                                 ;     654 
                                 ;     655 #endif // __ARM
                                 ;     656 
                                 ;     657 #ifdef __RX
                                 ;     658 void timer_dda_callback(void *pdata)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",658
00000379 6080                    		SUB #08H, R0
0000037B A009                    		MOV.L R1, 04H[R0]
                                 ;     659 {
                                 ;     660 	static bool flag_dda = 1;
                                 ;     661 
                                 ;     662 	flag_dda ^= 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",662
0000037D FBE2rrrrrrrr            		MOV.L #__$flag_dda$1, R14
00000383 661F                    		MOV.L #00000001H, R15
00000385 FC34EF                  		XOR [R14].UB, R15
00000388 610F                    		CMP #00H, R15
0000038A FCD0E1                  		SCNE.B [R14]
0000038D                         L99:	; entry.split
                                 ;     663 	if (!flag_dda)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",663
0000038D FBE2rrrrrrrr            		MOV.L #__$flag_dda$1, R14
00000393 58EE                    		MOVU.B [R14], R14
00000395 610E                    		CMP #00H, R14
00000397 3Brrrr               W  		BNE L127
0000039A 38rrrr               W  		BRA L128
0000039D                         L100:	; bb8
                                 ;     664 	{
                                 ;     665 		if ((st_run.mot[MOTOR_1].substep_accumulator += st_run.mot[MOTOR_1].substep_increment) > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",665
0000039D FB12rrrrrrrr            		MOV.L #__$st_run, R1
000003A3 A912                    		MOV.L 10H[R1], R2
000003A5 06891203                		ADD 0CH[R1].L, R2
000003A9 A112                    		MOV.L R2, 10H[R1]
000003AB 6102                    		CMP #00H, R2
000003AD 2Brr                    		BLE L108
000003AF                         L101:	; bb10
                                 ;     666 			if(!zinhibitor){
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",666
000003AF FBE2rrrrrrrr            		MOV.L #_zinhibitor, R14
000003B5 58EE                    		MOVU.B [R14], R14
000003B7 610E                    		CMP #00H, R14
000003B9 21rr                    		BNE L103
000003BB 2Err                 B  		BRA L104
000003BD                         L102:	; bb11
000003BD FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     667 				MOTOR1_STEP = TRUE;		// turn step bit on
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",667
000003C2 F0EC                    		BCLR #04H, [R14].B
000003C4 2Err                 B  		BRA L106
000003C6                         L103:	; bb19
000003C6 F80600                  		MOV.L #00000000H, [R0]
000003C9 08                   S  		BRA L105
000003CA                         L104:	; bb20
000003CA F80601                  		MOV.L #00000001H, [R0]
000003CD                         L105:	; bb21
000003CD EC01                    		MOV.L [R0], R1
000003CF 6101                    		CMP #00H, R1
000003D1 21rr                    		BNE L102
000003D3                         L106:	; bb24
                                 ;     668 			}
                                 ;     669 			st_run.mot[MOTOR_1].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",669
000003D3 FB12rrrrrrrr            		MOV.L #__$st_run, R1
000003D9 A912                    		MOV.L 10H[R1], R2
000003DB 06811202                		SUB 08H[R1].L, R2
000003DF A112                    		MOV.L R2, 10H[R1]
000003E1                         L107:	; bb24.split
                                 ;     670 			INCREMENT_ENCODER(MOTOR_1);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",670
000003E1 FB12rrrrrrrr            		MOV.L #_en, R1
000003E7 989A                    		MOV.W 06H[R1], R2
000003E9 06091204                		ADD 04H[R1].B, R2
000003ED 909A                    		MOV.W R2, 06H[R1]
000003EF                         L108:	; bb42
                                 ;     671 		}
                                 ;     672 		if ((st_run.mot[MOTOR_2].substep_accumulator += st_run.mot[MOTOR_2].substep_increment) > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",672
000003EF FB12rrrrrrrr            		MOV.L #__$st_run, R1
000003F5 AA1A                    		MOV.L 24H[R1], R2
000003F7 06891208                		ADD 20H[R1].L, R2
000003FB A21A                    		MOV.L R2, 24H[R1]
000003FD 6102                    		CMP #00H, R2
000003FF 2Brr                    		BLE L112
00000401                         L109:	; bb43
00000401 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     673 			MOTOR2_STEP = TRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",673
00000406 F0EE                    		BCLR #06H, [R14].B
00000408                         L110:	; bb43.split
                                 ;     674 			st_run.mot[MOTOR_2].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",674
00000408 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000040E AA1A                    		MOV.L 24H[R1], R2
00000410 06811202                		SUB 08H[R1].L, R2
00000414 A21A                    		MOV.L R2, 24H[R1]
00000416                         L111:	; bb43.split1
                                 ;     675 			INCREMENT_ENCODER(MOTOR_2);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",675
00000416 FB12rrrrrrrr            		MOV.L #_en, R1
0000041C 999A                    		MOV.W 0EH[R1], R2
0000041E 0609120C                		ADD 0CH[R1].B, R2
00000422 919A                    		MOV.W R2, 0EH[R1]
00000424                         L112:	; bb65
                                 ;     676 		}
                                 ;     677 		if ((st_run.mot[MOTOR_3].substep_accumulator += st_run.mot[MOTOR_3].substep_increment) > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",677
00000424 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000042A AB92                    		MOV.L 38H[R1], R2
0000042C 0689120D                		ADD 34H[R1].L, R2
00000430 A392                    		MOV.L R2, 38H[R1]
00000432 6102                    		CMP #00H, R2
00000434 2Brr                    		BLE L116
00000436                         L113:	; bb66
00000436 FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;     678 			MOTOR3_STEP = TRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",678
0000043B F0EA                    		BCLR #02H, [R14].B
0000043D                         L114:	; bb66.split
                                 ;     679 			st_run.mot[MOTOR_3].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",679
0000043D FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000443 AB92                    		MOV.L 38H[R1], R2
00000445 06811202                		SUB 08H[R1].L, R2
00000449 A392                    		MOV.L R2, 38H[R1]
0000044B                         L115:	; bb66.split2
                                 ;     680 			INCREMENT_ENCODER(MOTOR_3);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",680
0000044B FB12rrrrrrrr            		MOV.L #_en, R1
00000451 9A9A                    		MOV.W 16H[R1], R2
00000453 06091214                		ADD 14H[R1].B, R2
00000457 929A                    		MOV.W R2, 16H[R1]
00000459                         L116:	; bb87
                                 ;     681 		}
                                 ;     682 		if ((st_run.mot[MOTOR_4].substep_accumulator += st_run.mot[MOTOR_4].substep_increment) > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",682
00000459 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000045F AC9A                    		MOV.L 4CH[R1], R2
00000461 06891212                		ADD 48H[R1].L, R2
00000465 A49A                    		MOV.L R2, 4CH[R1]
00000467 6102                    		CMP #00H, R2
00000469 2Brr                    		BLE L130
0000046B                         L117:	; bb88
0000046B FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;     683 			MOTOR4_STEP = TRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",683
00000470 F0E8                    		BCLR #00H, [R14].B
00000472                         L118:	; bb88.split
                                 ;     684 			st_run.mot[MOTOR_4].substep_accumulator -= st_run.dda_ticks_X_substeps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",684
00000472 FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000478 AC9A                    		MOV.L 4CH[R1], R2
0000047A 06811202                		SUB 08H[R1].L, R2
0000047E A49A                    		MOV.L R2, 4CH[R1]
00000480                         L119:	; bb88.split3
                                 ;     685 			INCREMENT_ENCODER(MOTOR_4);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",685
00000480 FB12rrrrrrrr            		MOV.L #_en, R1
00000486 9B9A                    		MOV.W 1EH[R1], R2
00000488 0609121C                		ADD 1CH[R1].B, R2
0000048C 939A                    		MOV.W R2, 1EH[R1]
0000048E 6702                    		RTSD #08H
00000490                         L120:	; bb109
00000490 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     686 		}
                                 ;     687 	}
                                 ;     688 	else
                                 ;     689 	{
                                 ;     690 		// pulse stretching for using external drivers.- turn step bits off
                                 ;     691 		MOTOR1_STEP = FALSE;				// ~ 5 uSec pulse width
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",691
00000495 F0E4                    		BSET #04H, [R14].B
00000497                         L121:	; bb109.split
00000497 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     692 		MOTOR2_STEP = FALSE;				// ~ 4 uSec
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",692
0000049C F0E6                    		BSET #06H, [R14].B
0000049E                         L122:	; bb109.split4
0000049E FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;     693 		MOTOR3_STEP = FALSE;				// ~ 3 uSec
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",693
000004A3 F0E2                    		BSET #02H, [R14].B
000004A5                         L123:	; bb109.split5
000004A5 FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;     694 		MOTOR4_STEP = FALSE;				// ~ 2 uSec
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",694
000004AA F0E0                    		BSET #00H, [R14].B
000004AC                         L124:	; bb109.split6
                                 ;     695 
                                 ;     696 		if (--st_run.dda_ticks_downcount != 0) return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",696
000004AC FB12rrrrrrrr            		MOV.L #__$st_run, R1
000004B2 A81A                    		MOV.L 04H[R1], R2
000004B4 6012                    		SUB #01H, R2
000004B6 A01A                    		MOV.L R2, 04H[R1]
000004B8 6102                    		CMP #00H, R2
000004BA 21rr                    		BNE L130
000004BC                         L125:	; bb131
000004BC 6612                    		MOV.L #00000001H, R2
000004BE 6601                    		MOV.L #00000000H, R1
                                 ;     697 
                                 ;     698 		R_TMR_Control(TIMER_DDA, TMR_CLEAR, 0);				// disable DDA timer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",698
000004C0 EF13                    		MOV.L R1, R3
000004C2 05rrrrrr             A  		BSR _R_TMR_Control
000004C6                         L126:	; bb131.split
                                 ;     699 		_load_move();										// load the next move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",699
000004C6 39rrrr               W  		BSR __$_load_move
000004C9 6702                    		RTSD #08H
000004CB                         L127:	; bb137
000004CB F80600                  		MOV.L #00000000H, [R0]
000004CE 08                   S  		BRA L129
000004CF                         L128:	; bb138
000004CF F80601                  		MOV.L #00000001H, [R0]
000004D2                         L129:	; bb139
000004D2 EC01                    		MOV.L [R0], R1
000004D4 6101                    		CMP #00H, R1
000004D6 3Brrrr               W  		BNE L100
000004D9 2Err                 B  		BRA L120
000004DB                         L130:	; return
                                 ;     700 	}
                                 ;     701 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",701
000004DB 6702                    		RTSD #08H
000004DD                         _timer_dwell_callback:
                                 		.STACK	_timer_dwell_callback=12
                                 ;     702 
                                 ;     703 #endif // __ARM
                                 ;     704 /***** Dwell Interrupt Service Routine **************************************************
                                 ;     705  * ISR - DDA timer interrupt routine - service ticks from DDA timer
                                 ;     706  */
                                 ;     707 
                                 ;     708 #ifdef __AVR
                                 ;     709 ISR(TIMER_DWELL_ISR_vect) {								// DWELL timer interrupt
                                 ;     710 	if (--st_run.dda_ticks_downcount == 0) {
                                 ;     711 		TIMER_DWELL.CTRLA = STEP_TIMER_DISABLE;			// disable DWELL timer
                                 ;     712 		_load_move();
                                 ;     713 	}
                                 ;     714 }
                                 ;     715 #endif
                                 ;     716 
                                 ;     717 #ifdef __ARM
                                 ;     718 namespace Motate {			// Must define timer interrupts inside the Motate namespace
                                 ;     719 MOTATE_TIMER_INTERRUPT(dwell_timer_num)
                                 ;     720 {
                                 ;     721 	dwell_timer.getInterruptCause(); // read SR to clear interrupt condition
                                 ;     722 	if (--st_run.dda_ticks_downcount == 0) {
                                 ;     723 		dwell_timer.stop();
                                 ;     724 		_load_move();
                                 ;     725 	}
                                 ;     726 }
                                 ;     727 } // namespace Motate
                                 ;     728 #endif
                                 ;     729 
                                 ;     730 #ifdef __RX
                                 ;     731 void timer_dwell_callback(void *pdata)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",731
000004DD 6080                    		SUB #08H, R0
000004DF A009                    		MOV.L R1, 04H[R0]
                                 ;     732 {
                                 ;     733 	static uint32_t refresh = 0;
                                 ;     734 	static float step = 0;
                                 ;     735 	if(zmove<0)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",735
000004E1 FBE2rrrrrrrr            		MOV.L #_zmove, R14
000004E7 ECEE                    		MOV.L [R14], R14
000004E9 FD721E00000000          		FCMP #00000000H, R14
000004F0 26rr                    		BPZ L133
000004F2                         L132:	; bb2
000004F2 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     736 	{
                                 ;     737 		MOTOR1_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",737
000004F7 F0E5                    		BSET #05H, [R14].B
000004F9 08                   S  		BRA L134
000004FA                         L133:	; bb5
000004FA FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     738 	}
                                 ;     739 	else
                                 ;     740 	{
                                 ;     741 		MOTOR1_DIR = MOTOR_REVERSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",741
000004FF F0ED                    		BCLR #05H, [R14].B
00000501                         L134:	; bb13
                                 ;     742 	}
                                 ;     743 	if(zmove != 0){
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",743
00000501 FBE2rrrrrrrr            		MOV.L #_zmove, R14
00000507 ECEE                    		MOV.L [R14], R14
00000509 FD721E00000000          		FCMP #00000000H, R14
00000510 20rr                    		BEQ L140
00000512                         L135:	; bb14
                                 ;     744 		step += Z_STEP_PULSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",744
00000512 FBE2rrrrrrrr            		MOV.L #__$step$3, R14
00000518 ECEF                    		MOV.L [R14], R15
0000051A FD722FFA04C13B          		FADD #3BC104FAH, R15
00000521 E3EF                    		MOV.L R15, [R14]
00000523                         L136:	; bb14.split
00000523 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     745 		MOTOR1_STEP = !MOTOR1_STEP;		// turn step bit on
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",745
00000528 58EE                    		MOVU.B [R14], R14
0000052A 684E                    		SHLR #04H, R14
0000052C 7C0E                    		BTST #00H, R14
0000052E 10                   S  		BEQ L138
0000052F                         L137:	; bb23
0000052F F80600                  		MOV.L #00000000H, [R0]
00000532 08                   S  		BRA L139
00000533                         L138:	; bb24
00000533 F80601                  		MOV.L #00000001H, [R0]
00000536                         L139:	; bb25
00000536 FBEE2EC008              		MOV.L #0008C02EH, R14
0000053B 5801                    		MOVU.B [R0], R1
0000053D 754FEF                  		MOV.L #000000EFH, R15
00000540 50EF                    		AND [R14].UB, R15
00000542 6C41                    		SHLL #04H, R1
00000544 752110                  		AND #10H, R1
00000547 571F                    		OR R1, R15
00000549 C3EF                    		MOV.B R15, [R14]
0000054B                         L140:	; bb38
                                 ;     746 	}
                                 ;     747 
                                 ;     748 	refresh += 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",748
0000054B FBE2rrrrrrrr            		MOV.L #__$refresh$2, R14
00000551 ECEF                    		MOV.L [R14], R15
00000553 621F                    		ADD #01H, R15
00000555 E3EF                    		MOV.L R15, [R14]
00000557                         L141:	; bb38.split
                                 ;     749 	if(refresh == 1000){
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",749
00000557 FBE2rrrrrrrr            		MOV.L #__$refresh$2, R14
0000055D ECEE                    		MOV.L [R14], R14
0000055F 760EE803                		CMP #03E8H, R14
00000563 3Brrrr               W  		BNE L158
00000566                         L142:	; bb43
00000566 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     750 		if (MOTOR1_DIR == MOTOR_FOWARD)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",750
0000056B 58EE                    		MOVU.B [R14], R14
0000056D 685E                    		SHLR #05H, R14
0000056F 641E                    		AND #01H, R14
00000571 611E                    		CMP #01H, R14
00000573 FBE2rrrrrrrr            		MOV.L #_mr, R14
00000579 EDEE54                  		MOV.L 0150H[R14], R14
0000057C FBF2rrrrrrrr            		MOV.L #__$step$3, R15
00000582 ECFF                    		MOV.L [R15], R15
00000584 21rr                    		BNE L148
00000586                         L143:	; bb44
                                 ;     751 		{
                                 ;     752 			mr.gm.target[AXIS_Z] -= step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",752
00000586 FC83FE                  		FSUB R15, R14
00000589 FBF2rrrrrrrr            		MOV.L #_mr, R15
0000058F E7FE54                  		MOV.L R14, 0150H[R15]
00000592                         L144:	; bb44.split
                                 ;     753 			if(configFlags[MODOMAQUINA] == MODO_OXICORTE)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",753
00000592 FBE2rrrrrrrr            		MOV.L #_configFlags, R14
00000598 ECEE                    		MOV.L [R14], R14
0000059A 611E                    		CMP #01H, R14
0000059C 3Brrrr               W  		BNE L153
0000059F                         L145:	; bb49
                                 ;     754 			{
                                 ;     755 				/* Atualizando a altura de corte*/
                                 ;     756 				configVarOx[OX_CONFIG_ALTURA_CORTE] -= step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",756
0000059F FBF2rrrrrrrr            		MOV.L #_configVarOx, R15
000005A5 EDFE01                  		MOV.L 04H[R15], R14
000005A8 FB52rrrrrrrr            		MOV.L #__$step$3, R5
000005AE FC805E                  		FSUB [R5].L, R14
000005B1 E7FE01                  		MOV.L R14, 04H[R15]
000005B4                         L146:	; bb49.split
                                 ;     757 				configVarOx[OX_CONFIG_ALTURA_PERFURACAO] -= step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",757
000005B4 FBE2rrrrrrrr            		MOV.L #_configVarOx, R14
000005BA ECEF                    		MOV.L [R14], R15
000005BC FB52rrrrrrrr            		MOV.L #__$step$3, R5
000005C2 FC805F                  		FSUB [R5].L, R15
000005C5 E3EF                    		MOV.L R15, [R14]
000005C7                         L147:	; bb49.split1
                                 ;     758 				configVarMaq[CFG_MAQUINA_ALT_DESLOCAMENTO] -= step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",758
000005C7 FBE2rrrrrrrr            		MOV.L #_configVarMaq, R14
000005CD ECEF                    		MOV.L [R14], R15
000005CF FB52rrrrrrrr            		MOV.L #__$step$3, R5
000005D5 FC805F                  		FSUB [R5].L, R15
000005D8 E3EF                    		MOV.L R15, [R14]
000005DA 2Err                 B  		BRA L153
000005DC                         L148:	; bb64
                                 ;     759 			}
                                 ;     760 		}
                                 ;     761 		else
                                 ;     762 		{
                                 ;     763 			mr.gm.target[AXIS_Z] += step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",763
000005DC FC8BFE                  		FADD R15, R14
000005DF FBF2rrrrrrrr            		MOV.L #_mr, R15
000005E5 E7FE54                  		MOV.L R14, 0150H[R15]
000005E8                         L149:	; bb64.split
                                 ;     764 			if(configFlags[MODOMAQUINA] == MODO_OXICORTE)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",764
000005E8 FBE2rrrrrrrr            		MOV.L #_configFlags, R14
000005EE ECEE                    		MOV.L [R14], R14
000005F0 611E                    		CMP #01H, R14
000005F2 21rr                    		BNE L153
000005F4                         L150:	; bb69
                                 ;     765 			{
                                 ;     766 				/* Atualizando a altura de corte*/
                                 ;     767 				configVarOx[OX_CONFIG_ALTURA_CORTE] += step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",767
000005F4 FBE2rrrrrrrr            		MOV.L #__$step$3, R14
000005FA ECE1                    		MOV.L [R14], R1
000005FC FB22rrrrrrrr            		MOV.L #_configVarOx, R2
00000602 FC892101                		FADD 04H[R2].L, R1
00000606 A029                    		MOV.L R1, 04H[R2]
00000608                         L151:	; bb69.split
                                 ;     768 				configVarOx[OX_CONFIG_ALTURA_PERFURACAO] += step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",768
00000608 FBE2rrrrrrrr            		MOV.L #_configVarOx, R14
0000060E ECEF                    		MOV.L [R14], R15
00000610 FB52rrrrrrrr            		MOV.L #__$step$3, R5
00000616 FC885F                  		FADD [R5].L, R15
00000619 E3EF                    		MOV.L R15, [R14]
0000061B                         L152:	; bb69.split2
                                 ;     769 				configVarMaq[CFG_MAQUINA_ALT_DESLOCAMENTO] += step;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",769
0000061B FBE2rrrrrrrr            		MOV.L #_configVarMaq, R14
00000621 ECEF                    		MOV.L [R14], R15
00000623 FB52rrrrrrrr            		MOV.L #__$step$3, R5
00000629 FC885F                  		FADD [R5].L, R15
0000062C E3EF                    		MOV.L R15, [R14]
0000062E                         L153:	; bb91
                                 ;     770 			}
                                 ;     771 		}
                                 ;     772 
                                 ;     773 		mp_set_runtime_position(AXIS_Z,mr.gm.target[AXIS_Z]);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",773
0000062E FBE2rrrrrrrr            		MOV.L #_mr, R14
00000634 EDE254                  		MOV.L 0150H[R14], R2
00000637 6621                    		MOV.L #00000002H, R1
00000639 05rrrrrr             A  		BSR _mp_set_runtime_position
0000063D                         L154:	; bb91.split
                                 ;     774 		if(step != 0)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",774
0000063D FBE2rrrrrrrr            		MOV.L #__$step$3, R14
00000643 ECEE                    		MOV.L [R14], R14
00000645 FD721E00000000          		FCMP #00000000H, R14
0000064C 10                   S  		BEQ L156
0000064D                         L155:	; bb94
                                 ;     775 			zmoved = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",775
0000064D FBE2rrrrrrrr            		MOV.L #_zmoved, R14
00000653 F8E401                  		MOV.B #01H, [R14]
00000656                         L156:	; bb99
                                 ;     776 		refresh = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",776
00000656 FBE2rrrrrrrr            		MOV.L #__$refresh$2, R14
0000065C F8E600                  		MOV.L #00000000H, [R14]
0000065F                         L157:	; bb99.split
                                 ;     777 		step = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",777
0000065F FBE2rrrrrrrr            		MOV.L #__$step$3, R14
00000665 F8E600                  		MOV.L #00000000H, [R14]
00000668                         L158:	; bb105
                                 ;     778 	}
                                 ;     779 	if (--st_run.dda_ticks_downcount == 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",779
00000668 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000066E A81A                    		MOV.L 04H[R1], R2
00000670 6012                    		SUB #01H, R2
00000672 A01A                    		MOV.L R2, 04H[R1]
00000674 6102                    		CMP #00H, R2
00000676 21rr                    		BNE L168
00000678                         L159:	; bb106
                                 ;     780 		isDwell = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",780
00000678 FBE2rrrrrrrr            		MOV.L #_isDwell, R14
0000067E F8E400                  		MOV.B #00H, [R14]
00000681                         L160:	; bb106.split
                                 ;     781 		refresh = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",781
00000681 FBE2rrrrrrrr            		MOV.L #__$refresh$2, R14
00000687 F8E600                  		MOV.L #00000000H, [R14]
0000068A                         L161:	; bb106.split3
                                 ;     782 
                                 ;     783 		step = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",783
0000068A FBE2rrrrrrrr            		MOV.L #__$step$3, R14
00000690 F8E600                  		MOV.L #00000000H, [R14]
00000693                         L162:	; bb106.split4
                                 ;     784 		if (st_pre.mot[MOTOR_1].direction == DIRECTION_CW)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",784
00000693 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000699 8E11                    		MOV.B 18H[R1], R1
0000069B 6101                    		CMP #00H, R1
0000069D 18                   S  		BNE L164
0000069E                         L163:	; bb108
0000069E FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     785 			MOTOR1_DIR = MOTOR_REVERSE; else
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",785
000006A3 F0ED                    		BCLR #05H, [R14].B
000006A5 08                   S  		BRA L165
000006A6                         L164:	; bb112
000006A6 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     786 		MOTOR1_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",786
000006AB F0E5                    		BSET #05H, [R14].B
000006AD                         L165:	; bb121
                                 ;     787 		//TIMER_DWELL.CTRLA = STEP_TIMER_DISABLE;			// disable DWELL timer
                                 ;     788 		R_CMT_Control(timerDwell,CMT_RX_CMD_PAUSE,0);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",788
000006AD FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
000006B3 ECE1                    		MOV.L [R14], R1
000006B5 6603                    		MOV.L #00000000H, R3
000006B7 6612                    		MOV.L #00000001H, R2
000006B9 05rrrrrr             A  		BSR _R_CMT_Control
000006BD                         L166:	; bb121.split
000006BD 6611                    		MOV.L #00000001H, R1
                                 ;     789 		delay_thcStartStop(true);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",789
000006BF 05rrrrrr             A  		BSR _delay_thcStartStop
000006C3                         L167:	; bb121.split5
                                 ;     790 		_load_move();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",790
000006C3 39rrrr               W  		BSR __$_load_move
000006C6 6702                    		RTSD #08H
000006C8                         L168:	; return
                                 ;     791 	}
                                 ;     792 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",792
000006C8 6702                    		RTSD #08H
000006CA                         _st_request_exec_move:
                                 		.STACK	_st_request_exec_move=4
                                 ;     793 #endif
                                 ;     794 
                                 ;     795 /****************************************************************************************
                                 ;     796  * Exec sequencing code		- computes and prepares next load segment
                                 ;     797  * st_request_exec_move()	- SW interrupt to request to execute a move
                                 ;     798  * exec_timer interrupt		- interrupt handler for calling exec function
                                 ;     799  */
                                 ;     800 
                                 ;     801 #ifdef __AVR
                                 ;     802 void st_request_exec_move()
                                 ;     803 {
                                 ;     804 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {// bother interrupting
                                 ;     805 		TIMER_EXEC.PER = EXEC_TIMER_PERIOD;
                                 ;     806 		TIMER_EXEC.CTRLA = EXEC_TIMER_ENABLE;				// trigger a LO interrupt
                                 ;     807 	}
                                 ;     808 }
                                 ;     809 
                                 ;     810 ISR(TIMER_EXEC_ISR_vect) {								// exec move SW interrupt
                                 ;     811 	TIMER_EXEC.CTRLA = EXEC_TIMER_DISABLE;				// disable SW interrupt timer
                                 ;     812 
                                 ;     813 	// exec_move
                                 ;     814 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {
                                 ;     815 		if (mp_exec_move() != STAT_NOOP) {
                                 ;     816 			st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER; // flip it back
                                 ;     817 			_request_load_move();
                                 ;     818 		}
                                 ;     819 	}
                                 ;     820 }
                                 ;     821 #endif // __AVR
                                 ;     822 
                                 ;     823 #ifdef __ARM
                                 ;     824 void st_request_exec_move()
                                 ;     825 {
                                 ;     826 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {// bother interrupting
                                 ;     827 		exec_timer.setInterruptPending();
                                 ;     828 	}
                                 ;     829 }
                                 ;     830 
                                 ;     831 namespace Motate {	// Define timer inside Motate namespace
                                 ;     832 	MOTATE_TIMER_INTERRUPT(exec_timer_num)				// exec move SW interrupt
                                 ;     833 	{
                                 ;     834 		exec_timer.getInterruptCause();					// clears the interrupt condition
                                 ;     835 		if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {
                                 ;     836 			if (mp_exec_move() != STAT_NOOP) {
                                 ;     837 				st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER; // flip it back
                                 ;     838 				_request_load_move();
                                 ;     839 			}
                                 ;     840 		}
                                 ;     841 	}
                                 ;     842 } // namespace Motate
                                 ;     843 
                                 ;     844 #endif // __ARM
                                 ;     845 
                                 ;     846 #ifdef __RX
                                 ;     847 void st_request_exec_move()
                                 ;     848 {
                                 ;     849 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {// bother interrupting
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",849
000006CA FB12rrrrrrrr            		MOV.L #_st_pre, R1
000006D0 B091                    		MOVU.B 02H[R1], R1
000006D2 6111                    		CMP #01H, R1
000006D4 21rr                    		BNE L171
000006D6                         L170:	; bb1
000006D6 6602                    		MOV.L #00000000H, R2
000006D8 6621                    		MOV.L #00000002H, R1
                                 ;     850 		R_TMR_Control(TIMER_EXEC, TMR_START, 0); // trigger a LO interrupt
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",850
000006DA EF23                    		MOV.L R2, R3
000006DC 05rrrrrr             A  		BSR _R_TMR_Control
000006E0 02                      		RTS
000006E1                         L171:	; return
                                 ;     851 	}
                                 ;     852 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",852
000006E1 02                      		RTS
000006E2                         _exec_timer_num:
                                 		.STACK	_exec_timer_num=8
                                 ;     853 
                                 ;     854 void exec_timer_num(void *pdata)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",854
000006E2 6040                    		SUB #04H, R0
000006E4 E301                    		MOV.L R1, [R0]
                                 ;     855 {
                                 ;     856 	// exec_move
                                 ;     857 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_EXEC) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",857
000006E6 FB12rrrrrrrr            		MOV.L #_st_pre, R1
000006EC B091                    		MOVU.B 02H[R1], R1
000006EE 6111                    		CMP #01H, R1
000006F0 21rr                    		BNE L176
000006F2                         L173:	; bb3
                                 ;     858 		if (mp_exec_move() != STAT_NOOP) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",858
000006F2 05rrrrrr             A  		BSR _mp_exec_move
000006F6 6131                    		CMP #03H, R1
000006F8 20rr                    		BEQ L176
000006FA                         L174:	; bb4
                                 ;     859 			st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER; // flip it back
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",859
000006FA FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000700 3C1200                  		MOV.B #00H, 02H[R1]
00000703                         L175:	; bb4.split
                                 ;     860 			_request_load_move();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",860
00000703 39rrrr               W  		BSR __$_request_load_move
00000706 6701                    		RTSD #04H
00000708                         L176:	; return
                                 ;     861 		}
                                 ;     862 	}
                                 ;     863 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",863
00000708 6701                    		RTSD #04H
0000070A                         __$_request_load_move:
                                 		.STACK	__$_request_load_move=4
                                 ;     864 #endif
                                 ;     865 
                                 ;     866 /****************************************************************************************
                                 ;     867  * Loader sequencing code
                                 ;     868  * st_request_load_move() - fires a software interrupt (timer) to request to load a move
                                 ;     869  * load_move interrupt	  - interrupt handler for running the loader
                                 ;     870  *
                                 ;     871  *	_load_move() can only be called be called from an ISR at the same or higher level as
                                 ;     872  *	the DDA or dwell ISR. A software interrupt has been provided to allow a non-ISR to
                                 ;     873  *	request a load (see st_request_load_move())
                                 ;     874  */
                                 ;     875 
                                 ;     876 #ifdef __AVR
                                 ;     877 static void _request_load_move()
                                 ;     878 {
                                 ;     879 	if (st_runtime_isbusy()) {
                                 ;     880 		return;													// don't request a load if the runtime i
                                 ;     881 	}
                                 ;     882 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_LOADER) {	// bother interrupting
                                 ;     883 		TIMER_LOAD.PER = LOAD_TIMER_PERIOD;
                                 ;     884 		TIMER_LOAD.CTRLA = LOAD_TIMER_ENABLE;					// trigger a HI interrupt
                                 ;     885 	}
                                 ;     886 }
                                 ;     887 
                                 ;     888 ISR(TIMER_LOAD_ISR_vect) {										// load steppers SW interrupt
                                 ;     889 	TIMER_LOAD.CTRLA = LOAD_TIMER_DISABLE;						// disable SW interrupt timer
                                 ;     890 	_load_move();
                                 ;     891 }
                                 ;     892 #endif // __AVR
                                 ;     893 
                                 ;     894 #ifdef __ARM
                                 ;     895 static void _request_load_move()
                                 ;     896 {
                                 ;     897 	if (st_runtime_isbusy()) {
                                 ;     898 		return;													// don't request a load if the runtime i
                                 ;     899 	}
                                 ;     900 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_LOADER) {	// bother interrupting
                                 ;     901 		load_timer.setInterruptPending();
                                 ;     902 	}
                                 ;     903 }
                                 ;     904 
                                 ;     905 namespace Motate {	// Define timer inside Motate namespace
                                 ;     906 	MOTATE_TIMER_INTERRUPT(load_timer_num)						// load steppers SW interrupt
                                 ;     907 	{
                                 ;     908 		load_timer.getInterruptCause();							// read SR to clear interrupt condition
                                 ;     909 		_load_move();
                                 ;     910 	}
                                 ;     911 } // namespace Motate
                                 ;     912 #endif // __ARM
                                 ;     913 
                                 ;     914 #ifdef __RX
                                 ;     915 static void _request_load_move()
                                 ;     916 {
                                 ;     917 	if (st_runtime_isbusy()) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",917
0000070A 39rrrr               W  		BSR _st_runtime_isbusy
0000070D 6101                    		CMP #00H, R1
0000070F 21rr                    		BNE L180
00000711                         L178:	; bb7
                                 ;     918 		return;													// don't request a load if the runtime i
                                 ;     919 	}
                                 ;     920 	if (st_pre.buffer_state == PREP_BUFFER_OWNED_BY_LOADER) {	// bother interrupting
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",920
00000711 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000717 B091                    		MOVU.B 02H[R1], R1
00000719 6101                    		CMP #00H, R1
0000071B 21rr                    		BNE L180
0000071D                         L179:	; bb8
0000071D 6602                    		MOV.L #00000000H, R2
0000071F 6611                    		MOV.L #00000001H, R1
                                 ;     921 		R_TMR_Control(TIMER_LOAD, TMR_START, 0);					// trigger a HI interrupt
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",921
00000721 EF23                    		MOV.L R2, R3
00000723 05rrrrrr             A  		BSR _R_TMR_Control
00000727 02                      		RTS
00000728                         L180:	; return
                                 ;     922 	}
                                 ;     923 
                                 ;     924 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",924
00000728 02                      		RTS
00000729                         _load_timer_num:
                                 		.STACK	_load_timer_num=8
                                 ;     925 
                                 ;     926 void load_timer_num(void *pdata)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",926
00000729 6040                    		SUB #04H, R0
0000072B E301                    		MOV.L R1, [R0]
                                 ;     927 {								// load timer interrupt
                                 ;     928 	_load_move();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",928
0000072D 39rrrr               W  		BSR __$_load_move
00000730 6701                    		RTSD #04H
00000732                         __$_load_move:
                                 		.STACK	__$_load_move=8
                                 ;     929 }
                                 ;     930 #endif
                                 ;     931 
                                 ;     932 /****************************************************************************************
                                 ;     933  * _load_move() - Dequeue move and load into stepper struct
                                 ;     934  *
                                 ;     935  *	This routine can only be called be called from an ISR at the same or
                                 ;     936  *	higher level as the DDA or dwell ISR. A software interrupt has been
                                 ;     937  *	provided to allow a non-ISR to request a load (see st_request_load_move())
                                 ;     938  *
                                 ;     939  *	In aline() code:
                                 ;     940  *	 - All axes must set steps and compensate for out-of-range pulse phasing.
                                 ;     941  *	 - If axis has 0 steps the direction setting can be omitted
                                 ;     942  *	 - If axis has 0 steps the motor must not be enabled to support power mode = 1
                                 ;     943  */
                                 ;     944 /****** WARNING - THIS CODE IS SPECIFIC TO AVR. SEE G2 FOR ARM CODE ******/
                                 ;     945 
                                 ;     946 static void _load_move()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",946
00000732 6040                    		SUB #04H, R0
                                 ;     947 {
                                 ;     948 	// Be aware that dda_ticks_downcount must equal zero for the loader to run.
                                 ;     949 	// So the initial load must also have this set to zero as part of initialization
                                 ;     950 	if (st_runtime_isbusy()) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",950
00000734 39rrrr               W  		BSR _st_runtime_isbusy
00000737 6101                    		CMP #00H, R1
00000739 3Brrrr               W  		BNE L268
0000073C                         L183:	; bb8
                                 ;     951 		return;													// exit if the runtime is busy
                                 ;     952 	}
                                 ;     953 	if (st_pre.buffer_state != PREP_BUFFER_OWNED_BY_LOADER) {	// if there are no moves to load...
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",953
0000073C FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000742 B091                    		MOVU.B 02H[R1], R1
00000744 6101                    		CMP #00H, R1
00000746 20rr                    		BEQ L187
00000748                         L184:	; bb9
                                 ;     954 		for (uint8_t motor = MOTOR_1; motor < MOTORS; motor++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",954
00000748 3C0300                  		MOV.B #00H, 03H[R0]
0000074B 2Err                 B  		BRA L186
0000074D                         L185:	; bb10
                                 ;     955 			st_run.mot[motor].power_state = MOTOR_POWER_TIMEOUT_START;	// ...start motor power timeouts
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",955
0000074D B089                    		MOVU.B 03H[R0], R1
0000074F 751114                  		MUL #14H, R1
00000752 FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000758 4B12                    		ADD R1, R2
0000075A 3CA403                  		MOV.B #03H, 14H[R2]
0000075D B089                    		MOVU.B 03H[R0], R1
0000075F 6211                    		ADD #01H, R1
00000761 8089                    		MOV.B R1, 03H[R0]
00000763                         L186:	; bb17
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",954
00000763 B089                    		MOVU.B 03H[R0], R1
00000765 6141                    		CMP #04H, R1
00000767 29rr                    		BLT L185
00000769 38rrrr               W  		BRA L268
0000076C                         L187:	; bb31
                                 ;     956 		}
                                 ;     957 		return;
                                 ;     958 	}
                                 ;     959 	// handle aline loads first (most common case)
                                 ;     960 	if (st_pre.move_type == MOVE_TYPE_ALINE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",960
0000076C FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000772 B211                    		MOVU.B 08H[R1], R1
00000774 6111                    		CMP #01H, R1
00000776 3Brrrr               W  		BNE L259
00000779                         L188:	; bb32
                                 ;     961 
                                 ;     962 		//**** setup the new segment ****
                                 ;     963 
                                 ;     964 		st_run.dda_ticks_downcount = st_pre.dda_ticks;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",964
00000779 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
0000077F FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000785 E5FE0301                		MOV.L 0CH[R15], 04H[R14]
00000789                         L189:	; bb32.split
                                 ;     965 		st_run.dda_ticks_X_substeps = st_pre.dda_ticks_X_substeps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",965
00000789 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
0000078F FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000795 E5FE0402                		MOV.L 10H[R15], 08H[R14]
00000799                         L190:	; bb32.split1
                                 ;     966 
                                 ;     967 		//**** MOTOR_1 LOAD ****
                                 ;     968 
                                 ;     969 		// These sections are somewhat optimized for execution speed. The whole load operation
                                 ;     970 		// is supposed to take < 10 uSec (Xmega). Be careful if you mess with this.
                                 ;     971 
                                 ;     972 		// the following if() statement sets the runtime substep increment value or zeroes it
                                 ;     973 		if ((st_run.mot[MOTOR_1].substep_increment = st_pre.mot[MOTOR_1].substep_increment) != 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",973
00000799 FB12rrrrrrrr            		MOV.L #_st_pre, R1
0000079F A919                    		MOV.L 14H[R1], R1
000007A1 FB22rrrrrrrr            		MOV.L #__$st_run, R2
000007A7 A0A9                    		MOV.L R1, 0CH[R2]
000007A9 6101                    		CMP #00H, R1
000007AB 3Arrrr               W  		BEQ L203
000007AE                         L191:	; bb37
                                 ;     974 
                                 ;     975 			// NB: If motor has 0 steps the following is all skipped. This ensures that state comparisons
                                 ;     976 			//	   always operate on the last segment actually run by this motor, regardless of how many
                                 ;     977 			//	   segments it may have been inactive in between.
                                 ;     978 
                                 ;     979 			// Apply accumulator correction if the time base has changed since previous segment
                                 ;     980 			if (st_pre.mot[MOTOR_1].accumulator_correction_flag == true) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",980
000007AE FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000007B4 59EE2C                  		MOVU.B 2CH[R14], R14
000007B7 611E                    		CMP #01H, R14
000007B9 21rr                    		BNE L194
000007BB                         L192:	; bb38
                                 ;     981 				st_pre.mot[MOTOR_1].accumulator_correction_flag = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",981
000007BB FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000007C1 F9E42C00                		MOV.B #00H, 2CH[R14]
000007C5                         L193:	; bb38.split
                                 ;     982 				st_run.mot[MOTOR_1].substep_accumulator *= st_pre.mot[MOTOR_1].accumulator_correction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",982
000007C5 FB12rrrrrrrr            		MOV.L #__$st_run, R1
000007CB 06A1111E04              		ITOF 10H[R1].L, R14
000007D0 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
000007D6 FC8DFE0A                		FMUL 28H[R15].L, R14
000007DA FC97E2                  		FTOI R14, R2
000007DD A112                    		MOV.L R2, 10H[R1]
000007DF                         L194:	; bb50
                                 ;     983 			}
                                 ;     984 
                                 ;     985 			// Detect direction change and if so:
                                 ;     986 			//	- Set the direction bit in hardware.
                                 ;     987 			//	- Compensate for direction change by flipping substep accumulator value about its midpoint.
                                 ;     988 
                                 ;     989 			if (st_pre.mot[MOTOR_1].direction != st_pre.mot[MOTOR_1].prev_direction) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",989
000007DF FB12rrrrrrrr            		MOV.L #_st_pre, R1
000007E5 8E12                    		MOV.B 18H[R1], R2
000007E7 451219                  		CMP 19H[R1].UB, R2
000007EA 20rr                    		BEQ L200
000007EC                         L195:	; bb51
                                 ;     990 				st_pre.mot[MOTOR_1].prev_direction = st_pre.mot[MOTOR_1].direction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",990
000007EC FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000007F2 C5EE1819                		MOV.B 18H[R14], 19H[R14]
000007F6                         L196:	; bb51.split
                                 ;     991 				st_run.mot[MOTOR_1].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_1].substep_accumulator);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",991
000007F6 FB12rrrrrrrr            		MOV.L #__$st_run, R1
000007FC A892                    		MOV.L 08H[R1], R2
000007FE 06891204                		ADD 10H[R1].L, R2
00000802 7E12                    		NEG R2
00000804 A112                    		MOV.L R2, 10H[R1]
00000806                         L197:	; bb51.split2
                                 ;     992 				if (st_pre.mot[MOTOR_1].direction == DIRECTION_CW)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",992
00000806 FB12rrrrrrrr            		MOV.L #_st_pre, R1
0000080C 8E11                    		MOV.B 18H[R1], R1
0000080E 6101                    		CMP #00H, R1
00000810 18                   S  		BNE L199
00000811                         L198:	; bb58
00000811 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     993 					MOTOR1_DIR = MOTOR_REVERSE; else
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",993
00000816 F0ED                    		BCLR #05H, [R14].B
00000818 08                   S  		BRA L200
00000819                         L199:	; bb62
00000819 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;     994 				MOTOR1_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",994
0000081E F0E5                    		BSET #05H, [R14].B
00000820                         L200:	; bb79
                                 ;     995 //RXMOD				PORT_MOTOR_1_VPORT.OUT &= ~DIRECTION_BIT_bm; else
                                 ;     996 //				PORT_MOTOR_1_VPORT.OUT |= DIRECTION_BIT_bm;
                                 ;     997 			}
                                 ;     998 			SET_ENCODER_STEP_SIGN(MOTOR_1, st_pre.mot[MOTOR_1].step_sign);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",998
00000820 FBE2rrrrrrrr            		MOV.L #_en, R14
00000826 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
0000082C C5FE1A04                		MOV.B 1AH[R15], 04H[R14]
00000830                         L201:	; bb79.split
                                 ;     999 
                                 ;    1000 			// Enable the stepper and start motor power management
                                 ;    1001 			if (st_cfg.mot[MOTOR_1].power_mode != MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1001
00000830 FB12rrrrrrrr            		MOV.L #_st_cfg, R1
00000836 B319                    		MOVU.B 0DH[R1], R1
00000838 6101                    		CMP #00H, R1
0000083A 20rr                    		BEQ L205
0000083C                         L202:	; bb82
                                 ;    1002 //RXMOD					PORT_MOTOR_1_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;             // energize motor
                                 ;    1003 				st_run.mot[MOTOR_1].power_state = MOTOR_POWER_TIMEOUT_START;// set power management state
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1003
0000083C FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000842 3C9403                  		MOV.B #03H, 14H[R1]
00000845 2Err                 B  		BRA L205
00000847                         L203:	; bb90
                                 ;    1004 			}
                                 ;    1005 
                                 ;    1006 		} else {  // Motor has 0 steps; might need to energize motor for power mode processing
                                 ;    1007 			if (st_cfg.mot[MOTOR_1].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1007
00000847 FB12rrrrrrrr            		MOV.L #_st_cfg, R1
0000084D B319                    		MOVU.B 0DH[R1], R1
0000084F 6121                    		CMP #02H, R1
00000851 18                   S  		BNE L205
00000852                         L204:	; bb91
                                 ;    1008 ////RXMOD					PORT_MOTOR_1_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;             // energize motor
                                 ;    1009 				st_run.mot[MOTOR_1].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1009
00000852 FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000858 3C9403                  		MOV.B #03H, 14H[R1]
0000085B                         L205:	; bb103
                                 ;    1010 			}
                                 ;    1011 		}
                                 ;    1012 		// accumulate counted steps to the step position and zero out counted steps for the segment currently being loaded
                                 ;    1013 		ACCUMULATE_ENCODER(MOTOR_1);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1013
0000085B FB12rrrrrrrr            		MOV.L #_en, R1
00000861 A892                    		MOV.L 08H[R1], R2
00000863 06491203                		ADD 06H[R1].W, R2
00000867 A092                    		MOV.L R2, 08H[R1]
00000869                         L206:	; bb103.split
00000869 FB12rrrrrrrr            		MOV.L #_en, R1
0000086F 3D1300                  		MOV.W #0000H, 06H[R1]
00000872                         L207:	; bb103.split3
                                 ;    1014 
                                 ;    1015 #if (MOTORS >= 2)	//**** MOTOR_2 LOAD ****
                                 ;    1016 		if ((st_run.mot[MOTOR_2].substep_increment = st_pre.mot[MOTOR_2].substep_increment) != 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1016
00000872 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000878 AB11                    		MOV.L 30H[R1], R1
0000087A FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000880 A221                    		MOV.L R1, 20H[R2]
00000882 6101                    		CMP #00H, R1
00000884 3Arrrr               W  		BEQ L220
00000887                         L208:	; bb110
                                 ;    1017 			if (st_pre.mot[MOTOR_2].accumulator_correction_flag == true) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1017
00000887 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
0000088D 59EE48                  		MOVU.B 48H[R14], R14
00000890 611E                    		CMP #01H, R14
00000892 21rr                    		BNE L211
00000894                         L209:	; bb111
                                 ;    1018 				st_pre.mot[MOTOR_2].accumulator_correction_flag = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1018
00000894 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
0000089A F9E44800                		MOV.B #00H, 48H[R14]
0000089E                         L210:	; bb111.split
                                 ;    1019 				st_run.mot[MOTOR_2].substep_accumulator *= st_pre.mot[MOTOR_2].accumulator_correction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1019
0000089E FB12rrrrrrrr            		MOV.L #__$st_run, R1
000008A4 06A1111E09              		ITOF 24H[R1].L, R14
000008A9 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
000008AF FC8DFE11                		FMUL 44H[R15].L, R14
000008B3 FC97E2                  		FTOI R14, R2
000008B6 A21A                    		MOV.L R2, 24H[R1]
000008B8                         L211:	; bb123
                                 ;    1020 			}
                                 ;    1021 			if (st_pre.mot[MOTOR_2].direction != st_pre.mot[MOTOR_2].prev_direction) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1021
000008B8 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000008BE CDEF34                  		MOV.B 34H[R14], R15
000008C1 45EF35                  		CMP 35H[R14].UB, R15
000008C4 20rr                    		BEQ L217
000008C6                         L212:	; bb124
                                 ;    1022 				st_pre.mot[MOTOR_2].prev_direction = st_pre.mot[MOTOR_2].direction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1022
000008C6 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000008CC C5EE3435                		MOV.B 34H[R14], 35H[R14]
000008D0                         L213:	; bb124.split
                                 ;    1023 				st_run.mot[MOTOR_2].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_2].substep_accumulator);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1023
000008D0 FB12rrrrrrrr            		MOV.L #__$st_run, R1
000008D6 A892                    		MOV.L 08H[R1], R2
000008D8 06891209                		ADD 24H[R1].L, R2
000008DC 7E12                    		NEG R2
000008DE A21A                    		MOV.L R2, 24H[R1]
000008E0                         L214:	; bb124.split4
                                 ;    1024 				if (st_pre.mot[MOTOR_2].direction == DIRECTION_CW)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1024
000008E0 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000008E6 CDEE34                  		MOV.B 34H[R14], R14
000008E9 610E                    		CMP #00H, R14
000008EB 18                   S  		BNE L216
000008EC                         L215:	; bb131
000008EC FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;    1025 					MOTOR2_DIR = MOTOR_REVERSE; else
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1025
000008F1 F0EF                    		BCLR #07H, [R14].B
000008F3 08                   S  		BRA L217
000008F4                         L216:	; bb135
000008F4 FBEE2EC008              		MOV.L #0008C02EH, R14
                                 ;    1026 				MOTOR2_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1026
000008F9 F0E7                    		BSET #07H, [R14].B
000008FB                         L217:	; bb152
                                 ;    1027 			}
                                 ;    1028 			SET_ENCODER_STEP_SIGN(MOTOR_2, st_pre.mot[MOTOR_2].step_sign);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1028
000008FB FBE2rrrrrrrr            		MOV.L #_en, R14
00000901 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000907 C5FE360C                		MOV.B 36H[R15], 0CH[R14]
0000090B                         L218:	; bb152.split
                                 ;    1029 			if (st_cfg.mot[MOTOR_2].power_mode != MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1029
0000090B FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
00000911 59EE31                  		MOVU.B 31H[R14], R14
00000914 610E                    		CMP #00H, R14
00000916 20rr                    		BEQ L222
00000918                         L219:	; bb155
                                 ;    1030 //RXMOD					PORT_MOTOR_2_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1031 				st_run.mot[MOTOR_2].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1031
00000918 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
0000091E F9E42803                		MOV.B #03H, 28H[R14]
00000922 2Err                 B  		BRA L222
00000924                         L220:	; bb163
                                 ;    1032 			}
                                 ;    1033 		} else {
                                 ;    1034 			if (st_cfg.mot[MOTOR_2].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1034
00000924 FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
0000092A 59EE31                  		MOVU.B 31H[R14], R14
0000092D 612E                    		CMP #02H, R14
0000092F 21rr                    		BNE L222
00000931                         L221:	; bb164
                                 ;    1035 //RXMOD					PORT_MOTOR_2_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1036 				st_run.mot[MOTOR_2].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1036
00000931 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000937 F9E42803                		MOV.B #03H, 28H[R14]
0000093B                         L222:	; bb176
                                 ;    1037 			}
                                 ;    1038 		}
                                 ;    1039 		ACCUMULATE_ENCODER(MOTOR_2);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1039
0000093B FB12rrrrrrrr            		MOV.L #_en, R1
00000941 A912                    		MOV.L 10H[R1], R2
00000943 06491207                		ADD 0EH[R1].W, R2
00000947 A112                    		MOV.L R2, 10H[R1]
00000949                         L223:	; bb176.split
00000949 FB12rrrrrrrr            		MOV.L #_en, R1
0000094F 3D1700                  		MOV.W #0000H, 0EH[R1]
00000952                         L224:	; bb176.split5
                                 ;    1040 #endif
                                 ;    1041 #if (MOTORS >= 3)	//**** MOTOR_3 LOAD ****
                                 ;    1042 		if ((st_run.mot[MOTOR_3].substep_increment = st_pre.mot[MOTOR_3].substep_increment) != 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1042
00000952 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000958 AC99                    		MOV.L 4CH[R1], R1
0000095A FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000960 A329                    		MOV.L R1, 34H[R2]
00000962 6101                    		CMP #00H, R1
00000964 3Arrrr               W  		BEQ L237
00000967                         L225:	; bb183
                                 ;    1043 			if (st_pre.mot[MOTOR_3].accumulator_correction_flag == true) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1043
00000967 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
0000096D 59EE64                  		MOVU.B 64H[R14], R14
00000970 611E                    		CMP #01H, R14
00000972 21rr                    		BNE L228
00000974                         L226:	; bb184
                                 ;    1044 				st_pre.mot[MOTOR_3].accumulator_correction_flag = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1044
00000974 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
0000097A F9E46400                		MOV.B #00H, 64H[R14]
0000097E                         L227:	; bb184.split
                                 ;    1045 				st_run.mot[MOTOR_3].substep_accumulator *= st_pre.mot[MOTOR_3].accumulator_correction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1045
0000097E FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000984 06A1111E0E              		ITOF 38H[R1].L, R14
00000989 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
0000098F FC8DFE18                		FMUL 60H[R15].L, R14
00000993 FC97E2                  		FTOI R14, R2
00000996 A392                    		MOV.L R2, 38H[R1]
00000998                         L228:	; bb196
                                 ;    1046 			}
                                 ;    1047 			if (st_pre.mot[MOTOR_3].direction != st_pre.mot[MOTOR_3].prev_direction) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1047
00000998 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
0000099E CDEF50                  		MOV.B 50H[R14], R15
000009A1 45EF51                  		CMP 51H[R14].UB, R15
000009A4 20rr                    		BEQ L234
000009A6                         L229:	; bb197
                                 ;    1048 				st_pre.mot[MOTOR_3].prev_direction = st_pre.mot[MOTOR_3].direction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1048
000009A6 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000009AC C5EE5051                		MOV.B 50H[R14], 51H[R14]
000009B0                         L230:	; bb197.split
                                 ;    1049 				st_run.mot[MOTOR_3].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_3].substep_accumulator);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1049
000009B0 FB12rrrrrrrr            		MOV.L #__$st_run, R1
000009B6 A892                    		MOV.L 08H[R1], R2
000009B8 0689120E                		ADD 38H[R1].L, R2
000009BC 7E12                    		NEG R2
000009BE A392                    		MOV.L R2, 38H[R1]
000009C0                         L231:	; bb197.split6
                                 ;    1050 				if (st_pre.mot[MOTOR_3].direction == DIRECTION_CW)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1050
000009C0 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
000009C6 CDEE50                  		MOV.B 50H[R14], R14
000009C9 610E                    		CMP #00H, R14
000009CB 18                   S  		BNE L233
000009CC                         L232:	; bb204
000009CC FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;    1051 					MOTOR3_DIR = MOTOR_REVERSE; else
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1051
000009D1 F0EB                    		BCLR #03H, [R14].B
000009D3 08                   S  		BRA L234
000009D4                         L233:	; bb208
000009D4 FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;    1052 				MOTOR3_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1052
000009D9 F0E3                    		BSET #03H, [R14].B
000009DB                         L234:	; bb225
                                 ;    1053 			}
                                 ;    1054 			SET_ENCODER_STEP_SIGN(MOTOR_3, st_pre.mot[MOTOR_3].step_sign);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1054
000009DB FBE2rrrrrrrr            		MOV.L #_en, R14
000009E1 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
000009E7 C5FE5214                		MOV.B 52H[R15], 14H[R14]
000009EB                         L235:	; bb225.split
                                 ;    1055 			if (st_cfg.mot[MOTOR_3].power_mode != MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1055
000009EB FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
000009F1 59EE55                  		MOVU.B 55H[R14], R14
000009F4 610E                    		CMP #00H, R14
000009F6 20rr                    		BEQ L239
000009F8                         L236:	; bb228
                                 ;    1056 //RXMOD					PORT_MOTOR_3_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1057 				st_run.mot[MOTOR_3].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1057
000009F8 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
000009FE F9E43C03                		MOV.B #03H, 3CH[R14]
00000A02 2Err                 B  		BRA L239
00000A04                         L237:	; bb236
                                 ;    1058 			}
                                 ;    1059 		} else {
                                 ;    1060 			if (st_cfg.mot[MOTOR_3].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1060
00000A04 FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
00000A0A 59EE55                  		MOVU.B 55H[R14], R14
00000A0D 612E                    		CMP #02H, R14
00000A0F 21rr                    		BNE L239
00000A11                         L238:	; bb237
                                 ;    1061 //RXMOD					PORT_MOTOR_3_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1062 				st_run.mot[MOTOR_3].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1062
00000A11 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000A17 F9E43C03                		MOV.B #03H, 3CH[R14]
00000A1B                         L239:	; bb249
                                 ;    1063 			}
                                 ;    1064 		}
                                 ;    1065 		ACCUMULATE_ENCODER(MOTOR_3);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1065
00000A1B FB12rrrrrrrr            		MOV.L #_en, R1
00000A21 A992                    		MOV.L 18H[R1], R2
00000A23 0649120B                		ADD 16H[R1].W, R2
00000A27 A192                    		MOV.L R2, 18H[R1]
00000A29                         L240:	; bb249.split
00000A29 FB12rrrrrrrr            		MOV.L #_en, R1
00000A2F 3D1B00                  		MOV.W #0000H, 16H[R1]
00000A32                         L241:	; bb249.split7
                                 ;    1066 #endif
                                 ;    1067 #if (MOTORS >= 4)  //**** MOTOR_4 LOAD ****
                                 ;    1068 		if ((st_run.mot[MOTOR_4].substep_increment = st_pre.mot[MOTOR_4].substep_increment) != 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1068
00000A32 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000A38 AE91                    		MOV.L 68H[R1], R1
00000A3A FB22rrrrrrrr            		MOV.L #__$st_run, R2
00000A40 A4A1                    		MOV.L R1, 48H[R2]
00000A42 6101                    		CMP #00H, R1
00000A44 3Arrrr               W  		BEQ L254
00000A47                         L242:	; bb256
                                 ;    1069 			if (st_pre.mot[MOTOR_4].accumulator_correction_flag == true) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1069
00000A47 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000A4D 59EE80                  		MOVU.B 80H[R14], R14
00000A50 611E                    		CMP #01H, R14
00000A52 21rr                    		BNE L245
00000A54                         L243:	; bb257
                                 ;    1070 				st_pre.mot[MOTOR_4].accumulator_correction_flag = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1070
00000A54 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000A5A F9E48000                		MOV.B #00H, 80H[R14]
00000A5E                         L244:	; bb257.split
                                 ;    1071 				st_run.mot[MOTOR_4].substep_accumulator *= st_pre.mot[MOTOR_4].accumulator_correction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1071
00000A5E FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000A64 06A1111E13              		ITOF 4CH[R1].L, R14
00000A69 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000A6F FC8DFE1F                		FMUL 7CH[R15].L, R14
00000A73 FC97E2                  		FTOI R14, R2
00000A76 A49A                    		MOV.L R2, 4CH[R1]
00000A78                         L245:	; bb269
                                 ;    1072 			}
                                 ;    1073 			if (st_pre.mot[MOTOR_4].direction != st_pre.mot[MOTOR_4].prev_direction) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1073
00000A78 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000A7E CDEF6C                  		MOV.B 6CH[R14], R15
00000A81 45EF6D                  		CMP 6DH[R14].UB, R15
00000A84 20rr                    		BEQ L251
00000A86                         L246:	; bb270
                                 ;    1074 				st_pre.mot[MOTOR_4].prev_direction = st_pre.mot[MOTOR_4].direction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1074
00000A86 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000A8C C5EE6C6D                		MOV.B 6CH[R14], 6DH[R14]
00000A90                         L247:	; bb270.split
                                 ;    1075 				st_run.mot[MOTOR_4].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_4].substep_accumulator);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1075
00000A90 FB12rrrrrrrr            		MOV.L #__$st_run, R1
00000A96 A892                    		MOV.L 08H[R1], R2
00000A98 06891213                		ADD 4CH[R1].L, R2
00000A9C 7E12                    		NEG R2
00000A9E A49A                    		MOV.L R2, 4CH[R1]
00000AA0                         L248:	; bb270.split8
                                 ;    1076 				if (st_pre.mot[MOTOR_4].direction == DIRECTION_CW)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1076
00000AA0 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000AA6 CDEE6C                  		MOV.B 6CH[R14], R14
00000AA9 610E                    		CMP #00H, R14
00000AAB 18                   S  		BNE L250
00000AAC                         L249:	; bb277
00000AAC FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;    1077 					MOTOR4_DIR = MOTOR_REVERSE; else
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1077
00000AB1 F0E9                    		BCLR #01H, [R14].B
00000AB3 08                   S  		BRA L251
00000AB4                         L250:	; bb281
00000AB4 FBEE2AC008              		MOV.L #0008C02AH, R14
                                 ;    1078 				MOTOR4_DIR = MOTOR_FOWARD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1078
00000AB9 F0E1                    		BSET #01H, [R14].B
00000ABB                         L251:	; bb298
                                 ;    1079 			}
                                 ;    1080 			SET_ENCODER_STEP_SIGN(MOTOR_4, st_pre.mot[MOTOR_4].step_sign);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1080
00000ABB FBE2rrrrrrrr            		MOV.L #_en, R14
00000AC1 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000AC7 C5FE6E1C                		MOV.B 6EH[R15], 1CH[R14]
00000ACB                         L252:	; bb298.split
                                 ;    1081 			if (st_cfg.mot[MOTOR_4].power_mode != MOTOR_DISABLED) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1081
00000ACB FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
00000AD1 59EE79                  		MOVU.B 79H[R14], R14
00000AD4 610E                    		CMP #00H, R14
00000AD6 20rr                    		BEQ L256
00000AD8                         L253:	; bb301
                                 ;    1082 //RXMOD					PORT_MOTOR_4_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1083 				st_run.mot[MOTOR_4].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1083
00000AD8 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000ADE F9E45003                		MOV.B #03H, 50H[R14]
00000AE2 2Err                 B  		BRA L256
00000AE4                         L254:	; bb309
                                 ;    1084 			}
                                 ;    1085 		} else {
                                 ;    1086 			if (st_cfg.mot[MOTOR_4].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1086
00000AE4 FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
00000AEA 59EE79                  		MOVU.B 79H[R14], R14
00000AED 612E                    		CMP #02H, R14
00000AEF 21rr                    		BNE L256
00000AF1                         L255:	; bb310
                                 ;    1087 //RXMOD					PORT_MOTOR_4_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1088 				st_run.mot[MOTOR_4].power_state = MOTOR_POWER_TIMEOUT_START;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1088
00000AF1 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000AF7 F9E45003                		MOV.B #03H, 50H[R14]
00000AFB                         L256:	; bb322
                                 ;    1089 			}
                                 ;    1090 		}
                                 ;    1091 		ACCUMULATE_ENCODER(MOTOR_4);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1091
00000AFB FB12rrrrrrrr            		MOV.L #_en, R1
00000B01 AA12                    		MOV.L 20H[R1], R2
00000B03 0649120F                		ADD 1EH[R1].W, R2
00000B07 A212                    		MOV.L R2, 20H[R1]
00000B09                         L257:	; bb322.split
00000B09 FB12rrrrrrrr            		MOV.L #_en, R1
00000B0F 3D1F00                  		MOV.W #0000H, 1EH[R1]
00000B12                         L258:	; bb322.split9
00000B12 6601                    		MOV.L #00000000H, R1
                                 ;    1092 #endif
                                 ;    1093 #if (MOTORS >= 5)	//**** MOTOR_5 LOAD ****
                                 ;    1094 		if ((st_run.mot[MOTOR_5].substep_increment = st_pre.mot[MOTOR_5].substep_increment) != 0) {
                                 ;    1095 			if (st_pre.mot[MOTOR_5].accumulator_correction_flag == true) {
                                 ;    1096 				st_pre.mot[MOTOR_5].accumulator_correction_flag = false;
                                 ;    1097 				st_run.mot[MOTOR_5].substep_accumulator *= st_pre.mot[MOTOR_5].accumulator_correction;
                                 ;    1098 			}
                                 ;    1099 			if (st_pre.mot[MOTOR_5].direction != st_pre.mot[MOTOR_5].prev_direction) {
                                 ;    1100 				st_pre.mot[MOTOR_5].prev_direction = st_pre.mot[MOTOR_5].direction;
                                 ;    1101 				st_run.mot[MOTOR_5].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_5].substep_accumulator);
                                 ;    1102 				if (st_pre.mot[MOTOR_5].direction == DIRECTION_CW)
                                 ;    1103 				PORT_MOTOR_5_VPORT.OUT &= ~DIRECTION_BIT_bm; else
                                 ;    1104 				PORT_MOTOR_5_VPORT.OUT |= DIRECTION_BIT_bm;
                                 ;    1105 			}
                                 ;    1106 			PORT_MOTOR_5_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1107 			st_run.mot[MOTOR_5].power_state = MOTOR_POWER_TIMEOUT_START;
                                 ;    1108 			SET_ENCODER_STEP_SIGN(MOTOR_5, st_pre.mot[MOTOR_5].step_sign);
                                 ;    1109 		} else {
                                 ;    1110 			if (st_cfg.mot[MOTOR_5].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 ;    1111 				PORT_MOTOR_5_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1112 				st_run.mot[MOTOR_5].power_state = MOTOR_POWER_TIMEOUT_START;
                                 ;    1113 			}
                                 ;    1114 		}
                                 ;    1115 		ACCUMULATE_ENCODER(MOTOR_5);
                                 ;    1116 #endif
                                 ;    1117 #if (MOTORS >= 6)	//**** MOTOR_6 LOAD ****
                                 ;    1118 		if ((st_run.mot[MOTOR_6].substep_increment = st_pre.mot[MOTOR_6].substep_increment) != 0) {
                                 ;    1119 			if (st_pre.mot[MOTOR_6].accumulator_correction_flag == true) {
                                 ;    1120 				st_pre.mot[MOTOR_6].accumulator_correction_flag = false;
                                 ;    1121 				st_run.mot[MOTOR_6].substep_accumulator *= st_pre.mot[MOTOR_6].accumulator_correction;
                                 ;    1122 			}
                                 ;    1123 			if (st_pre.mot[MOTOR_6].direction != st_pre.mot[MOTOR_6].prev_direction) {
                                 ;    1124 				st_pre.mot[MOTOR_6].prev_direction = st_pre.mot[MOTOR_6].direction;
                                 ;    1125 				st_run.mot[MOTOR_6].substep_accumulator = -(st_run.dda_ticks_X_substeps + st_run.mot[MOTOR_6].substep_accumulator);
                                 ;    1126 				if (st_pre.mot[MOTOR_6].direction == DIRECTION_CW)
                                 ;    1127 				PORT_MOTOR_6_VPORT.OUT &= ~DIRECTION_BIT_bm; else
                                 ;    1128 				PORT_MOTOR_6_VPORT.OUT |= DIRECTION_BIT_bm;
                                 ;    1129 			}
                                 ;    1130 			PORT_MOTOR_6_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1131 			st_run.mot[MOTOR_6].power_state = MOTOR_POWER_TIMEOUT_START;
                                 ;    1132 			SET_ENCODER_STEP_SIGN(MOTOR_6, st_pre.mot[MOTOR_6].step_sign);
                                 ;    1133 		} else {
                                 ;    1134 			if (st_cfg.mot[MOTOR_6].power_mode == MOTOR_POWERED_IN_CYCLE) {
                                 ;    1135 				PORT_MOTOR_6_VPORT.OUT &= ~MOTOR_ENABLE_BIT_bm;
                                 ;    1136 				st_run.mot[MOTOR_6].power_state = MOTOR_POWER_TIMEOUT_START;
                                 ;    1137 			}
                                 ;    1138 		}
                                 ;    1139 		ACCUMULATE_ENCODER(MOTOR_6);
                                 ;    1140 #endif
                                 ;    1141 		//**** do this last ****
                                 ;    1142 
                                 ;    1143 		R_TMR_Control(TIMER_DDA, TMR_START, 0);			// enable the DDA timer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1143
00000B14 EF12                    		MOV.L R1, R2
00000B16 EF13                    		MOV.L R1, R3
00000B18 05rrrrrr             A  		BSR _R_TMR_Control
00000B1C 2Err                 B  		BRA L265
00000B1E                         L259:	; bb329
                                 ;    1144 
                                 ;    1145 	// handle dwells
                                 ;    1146 	} else if (st_pre.move_type == MOVE_TYPE_DWELL) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1146
00000B1E FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000B24 B211                    		MOVU.B 08H[R1], R1
00000B26 6121                    		CMP #02H, R1
00000B28 21rr                    		BNE L263
00000B2A                         L260:	; bb330
                                 ;    1147 		isDwell = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1147
00000B2A FBE2rrrrrrrr            		MOV.L #_isDwell, R14
00000B30 F8E401                  		MOV.B #01H, [R14]
00000B33                         L261:	; bb330.split
                                 ;    1148 		st_run.dda_ticks_downcount = st_pre.dda_ticks;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1148
00000B33 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00000B39 FBF2rrrrrrrr            		MOV.L #_st_pre, R15
00000B3F E5FE0301                		MOV.L 0CH[R15], 04H[R14]
00000B43                         L262:	; bb330.split10
00000B43 6601                    		MOV.L #00000000H, R1
                                 ;    1149 //RXMOD			TIMER_DWELL.PER = st_pre.dda_period;			// load dwell timer period
                                 ;    1150 //		TIMER_DWELL.CTRLA = STEP_TIMER_ENABLE;			// enable the dwell timer
                                 ;    1151 //		R_CMT_Control(timerDwell,CMT_RX_CMD_RESTART,0);
                                 ;    1152 		st_command_dwell(DWELL_START);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1152
00000B45 39rrrr               W  		BSR _st_command_dwell
00000B48 2Err                 B  		BRA L265
00000B4A                         L263:	; bb333
                                 ;    1153 
                                 ;    1154 	// handle synchronous commands
                                 ;    1155 	} else if (st_pre.move_type == MOVE_TYPE_COMMAND) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1155
00000B4A FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000B50 B211                    		MOVU.B 08H[R1], R1
00000B52 6131                    		CMP #03H, R1
00000B54 21rr                    		BNE L265
00000B56                         L264:	; bb334
                                 ;    1156 		mp_runtime_command(st_pre.bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1156
00000B56 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000B5C A819                    		MOV.L 04H[R1], R1
00000B5E 05rrrrrr             A  		BSR _mp_runtime_command
00000B62                         L265:	; bb354
                                 ;    1157 	}
                                 ;    1158 
                                 ;    1159 	// all other cases drop to here (e.g. Null moves after Mcodes skip to here)
                                 ;    1160 	st_pre.move_type = MOVE_TYPE_NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1160
00000B62 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000B68 3C1800                  		MOV.B #00H, 08H[R1]
00000B6B                         L266:	; bb354.split
                                 ;    1161 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;	// we are done with the prep buffer - flip the flag back
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1161
00000B6B FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000B71 3C1201                  		MOV.B #01H, 02H[R1]
00000B74                         L267:	; bb354.split11
                                 ;    1162 	st_request_exec_move();								// exec and prep next move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1162
00000B74 39rrrr               W  		BSR _st_request_exec_move
00000B77 6701                    		RTSD #04H
00000B79                         L268:	; return
                                 ;    1163 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1163
00000B79 6701                    		RTSD #04H
00000B7B                         _st_prep_line:
                                 		.STACK	_st_prep_line=36
                                 ;    1164 
                                 ;    1165 /***********************************************************************************
                                 ;    1166  * st_prep_line() - Prepare the next move for the loader
                                 ;    1167  *
                                 ;    1168  *	This function does the math on the next pulse segment and gets it ready for
                                 ;    1169  *	the loader. It deals with all the DDA optimizations and timer setups so that
                                 ;    1170  *	loading can be performed as rapidly as possible. It works in joint space
                                 ;    1171  *	(motors) and it works in steps, not length units. All args are provided as
                                 ;    1172  *	floats and converted to their appropriate integer types for the loader.
                                 ;    1173  *
                                 ;    1174  * Args:
                                 ;    1175  *	  - travel_steps[] are signed relative motion in steps for each motor. Steps are
                                 ;    1176  *		floats that typically have fractional values (fractional steps). The sign
                                 ;    1177  *		indicates direction. Motors that are not in the move should be 0 steps on input.
                                 ;    1178  *
                                 ;    1179  *	  - following_error[] is a vector of measured errors to the step count. Used for correction.
                                 ;    1180  *
                                 ;    1181  *	  - segment_time - how many minutes the segment should run. If timing is not
                                 ;    1182  *		100% accurate this will affect the move velocity, but not the distance traveled.
                                 ;    1183  *
                                 ;    1184  * NOTE:  Many of the expressions are sensitive to casting and execution order to avoid long-term
                                 ;    1185  *		  accuracy errors due to floating point round off. One earlier failed attempt was:
                                 ;    1186  *		    dda_ticks_X_substeps = (int32_t)((microseconds/1000000) * f_dda * dda_substeps);
                                 ;    1187  */
                                 ;    1188 
                                 ;    1189 stat_t st_prep_line(float travel_steps[], float following_error[], float segment_time)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1189
00000B7B 7EA6                    		PUSH.L R6
00000B7D 7100E4                  		ADD #0FFFFFFE4H, R0
00000B80 A181                    		MOV.L R1, 18H[R0]
00000B82 A10A                    		MOV.L R2, 14H[R0]
00000B84 A103                    		MOV.L R3, 10H[R0]
                                 ;    1190 {
                                 ;    1191 	// trap conditions that would prevent queueing the line
                                 ;    1192 	if (st_pre.buffer_state != PREP_BUFFER_OWNED_BY_EXEC) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1192
00000B86 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000B8C B091                    		MOVU.B 02H[R1], R1
00000B8E 6111                    		CMP #01H, R1
00000B90 20rr                    		BEQ L276
00000B92                         L270:	; bb6
00000B92 754114                  		MOV.L #00000014H, R1
                                 ;    1193 		return (cm_hard_alarm(STAT_INTERNAL_ERROR));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1193
00000B95 05rrrrrr             A  		BSR _cm_hard_alarm
00000B99 8189                    		MOV.B R1, 07H[R0]
00000B9B 38rrrr               W  		BRA L318
00000B9E                         L271:	; bb11
00000B9E 75411E                  		MOV.L #0000001EH, R1
00000BA1 05rrrrrr             A  		BSR _cm_hard_alarm
00000BA5 8189                    		MOV.B R1, 07H[R0]
00000BA7 38rrrr               W  		BRA L318
00000BAA                         L272:	; bb16
00000BAA 75411F                  		MOV.L #0000001FH, R1
00000BAD 05rrrrrr             A  		BSR _cm_hard_alarm
00000BB1 8189                    		MOV.B R1, 07H[R0]
00000BB3 38rrrr               W  		BRA L318
00000BB6                         L273:	; bb20
                                 ;    1194 	} else if (isinf(segment_time)) { return (cm_hard_alarm(STAT_PREP_LINE_MOVE_TIME_IS_INFINITE));	// never supposed to happen
                                 ;    1195 	} else if (isnan(segment_time)) { return (cm_hard_alarm(STAT_PREP_LINE_MOVE_TIME_IS_NAN));		// never supposed to happen
                                 ;    1196 	} else if (segment_time < EPSILON) { return (STAT_MINIMUM_TIME_MOVE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1196
00000BB6 A901                    		MOV.L 10H[R0], R1
00000BB8 FD7211BD378635          		FCMP #358637BDH, R1
00000BBF 26rr                    		BPZ L277
00000BC1                         L274:	; bb21
00000BC1 3C07CA                  		MOV.B #0CAH, 07H[R0]
00000BC4 38rrrr               W  		BRA L318
00000BC7                         L275:	; bb27
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1195
00000BC7 A901                    		MOV.L 10H[R0], R1
00000BC9 05rrrrrr             A  		BSR __FDclass
00000BCD E301                    		MOV.L R1, [R0]
00000BCF 6121                    		CMP #02H, R1
00000BD1 20rr                    		BEQ L272
00000BD3 2Err                 B  		BRA L273
00000BD5                         L276:	; bb45
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1194
00000BD5 A901                    		MOV.L 10H[R0], R1
00000BD7 05rrrrrr             A  		BSR __FDclass
00000BDB E301                    		MOV.L R1, [R0]
00000BDD 6111                    		CMP #01H, R1
00000BDF 20rr                    		BEQ L271
00000BE1 2Err                 B  		BRA L275
00000BE3                         L277:	; bb68
                                 ;    1197 	}
                                 ;    1198 	// setup segment parameters
                                 ;    1199 	// - dda_ticks is the integer number of DDA clock ticks needed to play out the segment
                                 ;    1200 	// - ticks_X_substeps is the maximum depth of the DDA accumulator (as a negative number)
                                 ;    1201 
                                 ;    1202 	st_pre.dda_period = _f_to_period(FREQUENCY_DDA);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1202
00000BE3 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000BE9 F9E905C003              		MOV.W #03C0H, 0AH[R14]
00000BEE                         L278:	; bb68.split
                                 ;    1203 	st_pre.dda_ticks = (int32_t)(segment_time * 60 * FREQUENCY_DDA);// NB: converts minutes to seconds
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1203
00000BEE A901                    		MOV.L 10H[R0], R1
00000BF0 FD723100007042          		FMUL #42700000H, R1
00000BF7 FD72310050C347          		FMUL #47C35000H, R1
00000BFE FC9711                  		FTOI R1, R1
00000C01 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000C07 A0A9                    		MOV.L R1, 0CH[R2]
00000C09                         L279:	; bb68.split1
                                 ;    1204 	st_pre.dda_ticks_X_substeps = st_pre.dda_ticks * DDA_SUBSTEPS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1204
00000C09 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000C0F A89A                    		MOV.L 0CH[R1], R2
00000C11 7DF2                    		BTST #1FH, R2
00000C13 20rr                    		BEQ L281
00000C15                         L280:	; bb68.split1
00000C15 FD812E                  		SHLR #01H, R2, R14
00000C18 6412                    		AND #01H, R2
00000C1A 57E2                    		OR R14, R2
00000C1C FC472E                  		ITOF R2, R14
00000C1F FC8BEE                  		FADD R14, R14
00000C22 08                   S  		BRA L282
00000C23                         L281:	; bb68.split1
00000C23 FC472E                  		ITOF R2, R14
00000C26                         L282:	; bb68.split1
00000C26 FD723EA69B444B          		FMUL #4B449BA6H, R14
00000C2D FD721E0000004F          		FCMP #4F000000H, R14
00000C34 29rr                    		BLT L284
00000C36                         L283:	; bb68.split1
00000C36 FD722E000080CF          		FADD #0CF800000H, R14
00000C3D                         L284:	; bb68.split1
00000C3D FC97E2                  		FTOI R14, R2
00000C40 A112                    		MOV.L R2, 10H[R1]
00000C42                         L285:	; bb68.split2
                                 ;    1205 
                                 ;    1206 	// setup motor parameters
                                 ;    1207 
                                 ;    1208 	float correction_steps;
                                 ;    1209 	for (uint8_t motor=0; motor<MOTORS; motor++) {	// I want to remind myself that this is motors, not axes
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1209
00000C42 3C0E00                  		MOV.B #00H, 0EH[R0]
00000C45 38rrrr               W  		BRA L314
00000C48                         L286:	; bb78
                                 ;    1210 
                                 ;    1211 		// Skip this motor if there are no new steps. Leave all other values intact.
                                 ;    1212 		if (fp_ZERO(travel_steps[motor])) { st_pre.mot[motor].substep_increment = 0; continue;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1212
00000C48 A981                    		MOV.L 18H[R0], R1
00000C4A B382                    		MOVU.B 0EH[R0], R2
00000C4C FE621E                  		MOV.L [R2,R1], R14
00000C4F 7BFE                    		BCLR #1FH, R14
00000C51 FD721EBD378635          		FCMP #358637BDH, R14
00000C58 26rr                    		BPZ L288
00000C5A                         L287:	; bb79
00000C5A B381                    		MOVU.B 0EH[R0], R1
00000C5C 75111C                  		MUL #1CH, R1
00000C5F FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000C65 4B12                    		ADD R1, R2
00000C67 3E2500                  		MOV.L #00000000H, 14H[R2]
00000C6A 38rrrr               W  		BRA L313
00000C6D                         L288:	; bb95
                                 ;    1213 
                                 ;    1214 		// Setup the direction, compensating for polarity.
                                 ;    1215 		// Set the step_sign which is used by the stepper ISR to accumulate step position
                                 ;    1216 
                                 ;    1217 		if (travel_steps[motor] >= 0) {					// positive direction
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1217
00000C6D B381                    		MOVU.B 0EH[R0], R1
00000C6F EF1E                    		MOV.L R1, R14
00000C71 751E1C                  		MUL #1CH, R14
00000C74 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000C7A 4BE2                    		ADD R14, R2
00000C7C 712214                  		ADD #14H, R2
00000C7F EF1E                    		MOV.L R1, R14
00000C81 751E24                  		MUL #24H, R14
00000C84 FB32rrrrrrrr            		MOV.L #_st_cfg, R3
00000C8A 4BE3                    		ADD R14, R3
00000C8C A984                    		MOV.L 18H[R0], R4
00000C8E FE614E                  		MOV.L [R1,R4], R14
00000C91 FD721E00000000          		FCMP #00000000H, R14
00000C98 B331                    		MOVU.B 0CH[R3], R1
00000C9A 29rr                    		BLT L291
00000C9C                         L289:	; bb96
                                 ;    1218 			st_pre.mot[motor].direction = DIRECTION_CW ^ st_cfg.mot[motor].polarity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1218
00000C9C 8121                    		MOV.B R1, 04H[R2]
00000C9E                         L290:	; bb96.split
                                 ;    1219 			st_pre.mot[motor].step_sign = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1219
00000C9E B381                    		MOVU.B 0EH[R0], R1
00000CA0 75111C                  		MUL #1CH, R1
00000CA3 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000CA9 4B12                    		ADD R1, R2
00000CAB 3CAA01                  		MOV.B #01H, 1AH[R2]
00000CAE 2Err                 B  		BRA L293
00000CB0                         L291:	; bb113
                                 ;    1220 		} else {
                                 ;    1221 			st_pre.mot[motor].direction = DIRECTION_CCW ^ st_cfg.mot[motor].polarity;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1221
00000CB0 FDE0F1                  		BNOT #00H, R1
00000CB3 8121                    		MOV.B R1, 04H[R2]
00000CB5                         L292:	; bb113.split
                                 ;    1222 			st_pre.mot[motor].step_sign = -1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1222
00000CB5 B381                    		MOVU.B 0EH[R0], R1
00000CB7 75111C                  		MUL #1CH, R1
00000CBA FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000CC0 4B12                    		ADD R1, R2
00000CC2 3CAAFF                  		MOV.B #0FFH, 1AH[R2]
00000CC5                         L293:	; bb139
                                 ;    1223 		}
                                 ;    1224 
                                 ;    1225 		// Detect segment time changes and setup the accumulator correction factor and flag.
                                 ;    1226 		// Putting this here computes the correct factor even if the motor was dormant for some
                                 ;    1227 		// number of previous moves. Correction is computed based on the last segment time actually used.
                                 ;    1228 
                                 ;    1229 		if (fabs(segment_time - st_pre.mot[motor].prev_segment_time) > 0.0000001) { // highly tuned FP != compare
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1229
00000CC5 B381                    		MOVU.B 0EH[R0], R1
00000CC7 75111C                  		MUL #1CH, R1
00000CCA FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000CD0 4B1E                    		ADD R1, R14
00000CD2 A901                    		MOV.L 10H[R0], R1
00000CD4 FC81E109                		FSUB 24H[R14].L, R1
00000CD8 7BF1                    		BCLR #1FH, R1
00000CDA FBE295BFD633            		MOV.L #33D6BF95H, R14
00000CE0 FC871E                  		FCMP R1, R14
00000CE3 26rr                    		BPZ L298
00000CE5                         L294:	; bb141
                                 ;    1230 			if (fp_NOT_ZERO(st_pre.mot[motor].prev_segment_time)) {					// special case to skip first move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1230
00000CE5 B381                    		MOVU.B 0EH[R0], R1
00000CE7 75111C                  		MUL #1CH, R1
00000CEA FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000CF0 4B12                    		ADD R1, R2
00000CF2 AA29                    		MOV.L 24H[R2], R1
00000CF4 7BF1                    		BCLR #1FH, R1
00000CF6 FBE2BD378635            		MOV.L #358637BDH, R14
00000CFC FC871E                  		FCMP R1, R14
00000CFF 26rr                    		BPZ L297
00000D01                         L295:	; bb142
                                 ;    1231 				st_pre.mot[motor].accumulator_correction_flag = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1231
00000D01 B381                    		MOVU.B 0EH[R0], R1
00000D03 75111C                  		MUL #1CH, R1
00000D06 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000D0C 4B1E                    		ADD R1, R14
00000D0E F9E42C01                		MOV.B #01H, 2CH[R14]
00000D12                         L296:	; bb142.split
                                 ;    1232 				st_pre.mot[motor].accumulator_correction = segment_time / st_pre.mot[motor].prev_segment_time;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1232
00000D12 B381                    		MOVU.B 0EH[R0], R1
00000D14 75111C                  		MUL #1CH, R1
00000D17 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000D1D 4B12                    		ADD R1, R2
00000D1F A901                    		MOV.L 10H[R0], R1
00000D21 FC912109                		FDIV 24H[R2].L, R1
00000D25 A2A1                    		MOV.L R1, 28H[R2]
00000D27                         L297:	; bb167
                                 ;    1233 			}
                                 ;    1234 			st_pre.mot[motor].prev_segment_time = segment_time;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1234
00000D27 B381                    		MOVU.B 0EH[R0], R1
00000D29 75111C                  		MUL #1CH, R1
00000D2C FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000D32 4B12                    		ADD R1, R2
00000D34 E5020409                		MOV.L 10H[R0], 24H[R2]
00000D38                         L298:	; bb185
                                 ;    1235 		}
                                 ;    1236 
                                 ;    1237 #ifdef __STEP_CORRECTION
                                 ;    1238 		// 'Nudge' correction strategy. Inject a single, scaled correction value then hold off
                                 ;    1239 
                                 ;    1240 		if ((--st_pre.mot[motor].correction_holdoff < 0) &&
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1240
00000D38 B381                    		MOVU.B 0EH[R0], R1
00000D3A 75111C                  		MUL #1CH, R1
00000D3D FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000D43 4B12                    		ADD R1, R2
00000D45 A9A9                    		MOV.L 1CH[R2], R1
00000D47 6011                    		SUB #01H, R1
00000D49 A1A9                    		MOV.L R1, 1CH[R2]
00000D4B 6101                    		CMP #00H, R1
00000D4D 29rr                    		BLT L306
00000D4F 38rrrr               W  		BRA L308
00000D52                         L299:	; bb186
                                 ;    1241 			(fabs(following_error[motor]) > STEP_CORRECTION_THRESHOLD)) {
                                 ;    1242 
                                 ;    1243 			st_pre.mot[motor].correction_holdoff = STEP_CORRECTION_HOLDOFF;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1243
00000D52 B381                    		MOVU.B 0EH[R0], R1
00000D54 75111C                  		MUL #1CH, R1
00000D57 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000D5D 4B12                    		ADD R1, R2
00000D5F 3E2705                  		MOV.L #00000005H, 1CH[R2]
00000D62                         L300:	; bb186.split
                                 ;    1244 			correction_steps = following_error[motor] * STEP_CORRECTION_FACTOR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1244
00000D62 A909                    		MOV.L 14H[R0], R1
00000D64 B382                    		MOVU.B 0EH[R0], R2
00000D66 FE6211                  		MOV.L [R2,R1], R1
00000D69 FD72310000803E          		FMUL #3E800000H, R1
00000D70 A081                    		MOV.L R1, 08H[R0]
00000D72                         L301:	; bb186.split3
                                 ;    1245 
                                 ;    1246 			if (correction_steps > 0) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1246
00000D72 A881                    		MOV.L 08H[R0], R1
00000D74 660E                    		MOV.L #00000000H, R14
00000D76 FC871E                  		FCMP R1, R14
00000D79 A982                    		MOV.L 18H[R0], R2
00000D7B B383                    		MOVU.B 0EH[R0], R3
00000D7D FE6322                  		MOV.L [R3,R2], R2
00000D80 26rr                    		BPZ L303
00000D82                         L302:	; bb198
                                 ;    1247 				correction_steps = min3(correction_steps, fabs(travel_steps[motor]), STEP_CORRECTION_MAX);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1247
00000D82 7BF2                    		BCLR #1FH, R2
00000D84 FB329A99193F            		MOV.L #3F19999AH, R3
00000D8A 05rrrrrr             A  		BSR _min3
00000D8E A081                    		MOV.L R1, 08H[R0]
00000D90 2Err                 B  		BRA L304
00000D92                         L303:	; bb207
                                 ;    1248 			} else {
                                 ;    1249 				correction_steps = max3(correction_steps, -fabs(travel_steps[motor]), -STEP_CORRECTION_MAX);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1249
00000D92 7BF2                    		BCLR #1FH, R2
00000D94 FDFFF2                  		BNOT #1FH, R2
00000D97 FB329A9919BF            		MOV.L #0BF19999AH, R3
00000D9D 05rrrrrr             A  		BSR _max3
00000DA1 A081                    		MOV.L R1, 08H[R0]
00000DA3                         L304:	; bb221
                                 ;    1250 			}
                                 ;    1251 			st_pre.mot[motor].corrected_steps += correction_steps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1251
00000DA3 B381                    		MOVU.B 0EH[R0], R1
00000DA5 75111C                  		MUL #1CH, R1
00000DA8 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000DAE 4B12                    		ADD R1, R2
00000DB0 AA21                    		MOV.L 20H[R2], R1
00000DB2 FC890102                		FADD 08H[R0].L, R1
00000DB6 A221                    		MOV.L R1, 20H[R2]
00000DB8                         L305:	; bb221.split
                                 ;    1252 			travel_steps[motor] -= correction_steps;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1252
00000DB8 A981                    		MOV.L 18H[R0], R1
00000DBA B382                    		MOVU.B 0EH[R0], R2
00000DBC FE621E                  		MOV.L [R2,R1], R14
00000DBF FC810E02                		FSUB 08H[R0].L, R14
00000DC3 FE221E                  		MOV.L R14, [R2,R1]
00000DC6 2Err                 B  		BRA L310
00000DC8                         L306:	; bb245
00000DC8 A909                    		MOV.L 14H[R0], R1
00000DCA B382                    		MOVU.B 0EH[R0], R2
00000DCC FE621E                  		MOV.L [R2,R1], R14
00000DCF 7BFE                    		BCLR #1FH, R14
00000DD1 FBF200000040            		MOV.L #40000000H, R15
00000DD7 FC87EF                  		FCMP R14, R15
00000DDA 26rr                    		BPZ L308
00000DDC                         L307:	; bb254
00000DDC F80601                  		MOV.L #00000001H, [R0]
00000DDF 08                   S  		BRA L309
00000DE0                         L308:	; bb255
00000DE0 F80600                  		MOV.L #00000000H, [R0]
00000DE3                         L309:	; bb256
00000DE3 EC01                    		MOV.L [R0], R1
00000DE5 6101                    		CMP #00H, R1
00000DE7 3Brrrr               W  		BNE L299
00000DEA                         L310:	; bb261
                                 ;    1253 		}
                                 ;    1254 #endif
                                 ;    1255 		// Compute substeb increment. The accumulator must be *exactly* the incoming
                                 ;    1256 		// fractional steps times the substep multiplier or positional drift will occur.
                                 ;    1257 		// Rounding is performed to eliminate a negative bias in the uint32 conversion
                                 ;    1258 		// that results in long-term negative drift. (fabs/round order doesn't matter)
                                 ;    1259 
                                 ;    1260 		st_pre.mot[motor].substep_increment = round(fabs(travel_steps[motor] * DDA_SUBSTEPS));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1260
00000DEA B386                    		MOVU.B 0EH[R0], R6
00000DEC A981                    		MOV.L 18H[R0], R1
00000DEE FE6611                  		MOV.L [R6,R1], R1
00000DF1 FD7231A69B444B          		FMUL #4B449BA6H, R1
00000DF8 7BF1                    		BCLR #1FH, R1
00000DFA 05rrrrrr             A  		BSR _round
00000DFE 75161C                  		MUL #1CH, R6
00000E01 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000E07 4B62                    		ADD R6, R2
00000E09 FD72110000004F          		FCMP #4F000000H, R1
00000E10 29rr                    		BLT L312
00000E12                         L311:	; bb261
00000E12 FD7221000080CF          		FADD #0CF800000H, R1
00000E19                         L312:	; bb261
00000E19 FC9711                  		FTOI R1, R1
00000E1C A129                    		MOV.L R1, 14H[R2]
00000E1E                         L313:	; bb275
00000E1E B381                    		MOVU.B 0EH[R0], R1
00000E20 6211                    		ADD #01H, R1
00000E22 8381                    		MOV.B R1, 0EH[R0]
00000E24                         L314:	; bb278
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1209
00000E24 B381                    		MOVU.B 0EH[R0], R1
00000E26 6141                    		CMP #04H, R1
00000E28 28rr                  * 		BLT L286
         38rrrr                  
00000E2D                         L315:	; bb284
                                 ;    1261 	}
                                 ;    1262 	st_pre.move_type = MOVE_TYPE_ALINE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1262
00000E2D FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E33 3C1801                  		MOV.B #01H, 08H[R1]
00000E36                         L316:	; bb284.split
                                 ;    1263 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER;	// signal that prep buffer is ready
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1263
00000E36 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E3C 3C1200                  		MOV.B #00H, 02H[R1]
00000E3F                         L317:	; bb284.split4
                                 ;    1264 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1264
00000E3F 3C0700                  		MOV.B #00H, 07H[R0]
00000E42                         L318:	; bb286
00000E42 C500070F                		MOV.B 07H[R0], 0FH[R0]
                                 ;    1265 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1265
00000E46 B389                    		MOVU.B 0FH[R0], R1
00000E48 3F6608                  		RTSD #20H, R6-R6
00000E4B                         _st_prep_null:
                                 		.STACK	_st_prep_null=4
                                 ;    1266 
                                 ;    1267 /*
                                 ;    1268  * st_prep_null() - Keeps the loader happy. Otherwise performs no action
                                 ;    1269  */
                                 ;    1270 
                                 ;    1271 void st_prep_null()
                                 ;    1272 {
                                 ;    1273 	st_pre.move_type = MOVE_TYPE_NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1273
00000E4B FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E51 3C1800                  		MOV.B #00H, 08H[R1]
00000E54                         L320:	; entry.split
                                 ;    1274 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_EXEC;	// signal that prep buffer is empty
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1274
00000E54 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E5A 3C1201                  		MOV.B #01H, 02H[R1]
00000E5D 02                      		RTS
00000E5E                         _st_prep_command:
                                 		.STACK	_st_prep_command=8
                                 ;    1275 }
                                 ;    1276 
                                 ;    1277 /*
                                 ;    1278  * st_prep_command() - Stage command to execution
                                 ;    1279  */
                                 ;    1280 
                                 ;    1281 void st_prep_command(void *bf)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1281
00000E5E 6040                    		SUB #04H, R0
00000E60 E301                    		MOV.L R1, [R0]
                                 ;    1282 {
                                 ;    1283 	st_pre.move_type = MOVE_TYPE_COMMAND;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1283
00000E62 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E68 3C1803                  		MOV.B #03H, 08H[R1]
00000E6B                         L322:	; entry.split
                                 ;    1284 	st_pre.bf = (mpBuf_t *)bf;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1284
00000E6B FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000E71 E40E01                  		MOV.L [R0], 04H[R14]
00000E74                         L323:	; entry.split1
                                 ;    1285 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER;	// signal that prep buffer is ready
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1285
00000E74 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E7A 3C1200                  		MOV.B #00H, 02H[R1]
00000E7D 6701                    		RTSD #04H
00000E7F                         _st_prep_dwell:
                                 		.STACK	_st_prep_dwell=12
                                 ;    1286 }
                                 ;    1287 
                                 ;    1288 /*
                                 ;    1289  * st_prep_dwell() 	 - Add a dwell to the move buffer
                                 ;    1290  */
                                 ;    1291 
                                 ;    1292 void st_prep_dwell(float microseconds)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1292
00000E7F 6080                    		SUB #08H, R0
00000E81 A009                    		MOV.L R1, 04H[R0]
                                 ;    1293 {
                                 ;    1294 	float seconds;
                                 ;    1295 	seconds = (microseconds/1000);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1295
00000E83 FD724100007A44          		FDIV #447A0000H, R1
00000E8A E301                    		MOV.L R1, [R0]
00000E8C                         L325:	; entry.split
                                 ;    1296 	st_pre.move_type = MOVE_TYPE_DWELL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1296
00000E8C FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000E92 3C1802                  		MOV.B #02H, 08H[R1]
00000E95                         L326:	; entry.split1
                                 ;    1297 	st_pre.dda_period = _f_to_period(FREQUENCY_DWELL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1297
00000E95 FBE2rrrrrrrr            		MOV.L #_st_pre, R14
00000E9B F9E9058025              		MOV.W #2580H, 0AH[R14]
00000EA0                         L327:	; entry.split2
                                 ;    1298 	st_pre.dda_ticks = (uint32_t)((microseconds/1000) * FREQUENCY_DWELL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1298
00000EA0 A809                    		MOV.L 04H[R0], R1
00000EA2 FD724100007A44          		FDIV #447A0000H, R1
00000EA9 FD723100401C46          		FMUL #461C4000H, R1
00000EB0 FD72110000004F          		FCMP #4F000000H, R1
00000EB7 29rr                    		BLT L329
00000EB9                         L328:	; entry.split2
00000EB9 FD7221000080CF          		FADD #0CF800000H, R1
00000EC0                         L329:	; entry.split2
00000EC0 FC9711                  		FTOI R1, R1
00000EC3 FB22rrrrrrrr            		MOV.L #_st_pre, R2
00000EC9 A0A9                    		MOV.L R1, 0CH[R2]
00000ECB                         L330:	; entry.split3
                                 ;    1299 	if (configFlags[MODOMAQUINA] == MODO_OXICORTE){
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1299
00000ECB FBE2rrrrrrrr            		MOV.L #_configFlags, R14
00000ED1 ECEE                    		MOV.L [R14], R14
00000ED3 611E                    		CMP #01H, R14
00000ED5 21rr                    		BNE L335
00000ED7                         L331:	; bb9
                                 ;    1300 		if (seconds == configVarOx[OX_CONFIG_TEMPO_AQUECIMENTO])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1300
00000ED7 FBE2rrrrrrrr            		MOV.L #_configVarOx, R14
00000EDD EC01                    		MOV.L [R0], R1
00000EDF FC85E103                		FCMP 0CH[R14].L, R1
00000EE3 21rr                    		BNE L333
00000EE5                         L332:	; bb10
                                 ;    1301 			tempoDwell = OX_CONFIG_TEMPO_AQUECIMENTO;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1301
00000EE5 FBE2rrrrrrrr            		MOV.L #_tempoDwell, R14
00000EEB F8E603                  		MOV.L #00000003H, [R14]
00000EEE 2Err                 B  		BRA L335
00000EF0                         L333:	; bb12
                                 ;    1302 		else if(seconds == configVarOx[OX_CONFIG_TEMPO_PERFURACAO])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1302
00000EF0 FBE2rrrrrrrr            		MOV.L #_configVarOx, R14
00000EF6 EC01                    		MOV.L [R0], R1
00000EF8 FC85E104                		FCMP 10H[R14].L, R1
00000EFC 18                   S  		BNE L335
00000EFD                         L334:	; bb13
                                 ;    1303 			tempoDwell = OX_CONFIG_TEMPO_PERFURACAO;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1303
00000EFD FBE2rrrrrrrr            		MOV.L #_tempoDwell, R14
00000F03 F8E604                  		MOV.L #00000004H, [R14]
00000F06                         L335:	; bb29
                                 ;    1304 	}
                                 ;    1305 	// Seconds st_pre.dda_ticks = (uint32_t)((microseconds/1000000) * FREQUENCY_DWELL);
                                 ;    1306 	st_pre.buffer_state = PREP_BUFFER_OWNED_BY_LOADER;	// signal that prep buffer is ready
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1306
00000F06 FB12rrrrrrrr            		MOV.L #_st_pre, R1
00000F0C 3C1200                  		MOV.B #00H, 02H[R1]
00000F0F 6702                    		RTSD #08H
00000F11                         __$_set_hw_microsteps:
                                 		.STACK	__$_set_hw_microsteps=8
                                 ;    1307 }
                                 ;    1308 
                                 ;    1309 /*
                                 ;    1310  * _set_hw_microsteps() - set microsteps in hardware
                                 ;    1311  *
                                 ;    1312  *	For now the microsteps is the same as the microsteps (1,2,4,8)
                                 ;    1313  *	This may change if microstep morphing is implemented.
                                 ;    1314  */
                                 ;    1315 
                                 ;    1316 static void _set_hw_microsteps(const uint8_t motor, const uint8_t microsteps)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1316
00000F11 6040                    		SUB #04H, R0
00000F13 8089                    		MOV.B R1, 03H[R0]
00000F15 8082                    		MOV.B R2, 02H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1343
00000F17 6701                    		RTSD #04H
00000F19                         __$_get_motor:
                                 		.STACK	__$_get_motor=16
                                 ;    1317 {
                                 ;    1318 #ifdef __ARM
                                 ;    1319 	switch (motor) {
                                 ;    1320 		if (!motor_1.enable.isNull()) case (MOTOR_1): { motor_1.setMicrosteps(microsteps); break; }
                                 ;    1321 		if (!motor_2.enable.isNull()) case (MOTOR_2): { motor_2.setMicrosteps(microsteps); break; }
                                 ;    1322 		if (!motor_3.enable.isNull()) case (MOTOR_3): { motor_3.setMicrosteps(microsteps); break; }
                                 ;    1323 		if (!motor_4.enable.isNull()) case (MOTOR_4): { motor_4.setMicrosteps(microsteps); break; }
                                 ;    1324 		if (!motor_5.enable.isNull()) case (MOTOR_5): { motor_5.setMicrosteps(microsteps); break; }
                                 ;    1325 		if (!motor_6.enable.isNull()) case (MOTOR_6): { motor_6.setMicrosteps(microsteps); break; }
                                 ;    1326 	}
                                 ;    1327 #endif //__ARM
                                 ;    1328 #ifdef __AVR
                                 ;    1329 	if (microsteps == 8) {
                                 ;    1330 		hw.st_port[motor]->OUTSET = MICROSTEP_BIT_0_bm;
                                 ;    1331 		hw.st_port[motor]->OUTSET = MICROSTEP_BIT_1_bm;
                                 ;    1332 	} else if (microsteps == 4) {
                                 ;    1333 		hw.st_port[motor]->OUTCLR = MICROSTEP_BIT_0_bm;
                                 ;    1334 		hw.st_port[motor]->OUTSET = MICROSTEP_BIT_1_bm;
                                 ;    1335 	} else if (microsteps == 2) {
                                 ;    1336 		hw.st_port[motor]->OUTSET = MICROSTEP_BIT_0_bm;
                                 ;    1337 		hw.st_port[motor]->OUTCLR = MICROSTEP_BIT_1_bm;
                                 ;    1338 	} else if (microsteps == 1) {
                                 ;    1339 		hw.st_port[motor]->OUTCLR = MICROSTEP_BIT_0_bm;
                                 ;    1340 		hw.st_port[motor]->OUTCLR = MICROSTEP_BIT_1_bm;
                                 ;    1341 	}
                                 ;    1342 #endif // __AVR
                                 ;    1343 }
                                 ;    1344 
                                 ;    1345 
                                 ;    1346 /***********************************************************************************
                                 ;    1347  * CONFIGURATION AND INTERFACE FUNCTIONS
                                 ;    1348  * Functions to get and set variables from the cfgArray table
                                 ;    1349  ***********************************************************************************/
                                 ;    1350 
                                 ;    1351 /* HELPERS
                                 ;    1352  * _get_motor() - helper to return motor number as an index
                                 ;    1353  */
                                 ;    1354 
                                 ;    1355 static int8_t _get_motor(const nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1355
00000F19 60C0                    		SUB #0CH, R0
00000F1B A081                    		MOV.L R1, 08H[R0]
                                 ;    1356 {
                                 ;    1357     return ((nv->group[0] ? nv->group[0] : nv->token[0]) - 0x31);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1357
00000F1D B512                    		MOVU.B 14H[R1], R2
00000F1F 6102                    		CMP #00H, R2
00000F21 10                   S  		BEQ L339
00000F22                         L338:	; bb
00000F22 B511                    		MOVU.B 14H[R1], R1
00000F24 E301                    		MOV.L R1, [R0]
00000F26 08                   S  		BRA L340
00000F27                         L339:	; bb16
00000F27 B611                    		MOVU.B 18H[R1], R1
00000F29 E301                    		MOV.L R1, [R0]
00000F2B                         L340:	; bb23
00000F2B EC01                    		MOV.L [R0], R1
00000F2D 7111CF                  		ADD #0FFFFFFCFH, R1
00000F30 8189                    		MOV.B R1, 07H[R0]
                                 ;    1358 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1358
00000F32 8989                    		MOV.B 07H[R0], R1
00000F34 6703                    		RTSD #0CH
00000F36                         __$_set_motor_steps_per_unit:
                                 		.STACK	__$_set_motor_steps_per_unit=12
                                 ;    1359 
                                 ;    1360 /*
                                 ;    1361  * _set_motor_steps_per_unit() - what it says
                                 ;    1362  * This function will need to be rethought if microstep morphing is implemented
                                 ;    1363  */
                                 ;    1364 
                                 ;    1365 static void _set_motor_steps_per_unit(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1365
00000F36 6080                    		SUB #08H, R0
00000F38 A009                    		MOV.L R1, 04H[R0]
                                 ;    1366 {
                                 ;    1367 	uint8_t m = _get_motor(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1367
00000F3A 39rrrr               W  		BSR __$_get_motor
00000F3D 8089                    		MOV.B R1, 03H[R0]
00000F3F                         L342:	; entry.split
                                 ;    1368 
                                 ;    1369 //	st_cfg.mot[m].units_per_step = (st_cfg.mot[m].travel_rev * st_cfg.mot[m].step_angle) / (360 * st_cfg.mot[m].microsteps); // unused
                                 ;    1370     st_cfg.mot[m].steps_per_unit = (360 * st_cfg.mot[m].microsteps) / (st_cfg.mot[m].travel_rev * st_cfg.mot[m].step_angle);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1370
00000F3F B089                    		MOVU.B 03H[R0], R1
00000F41 751124                  		MUL #24H, R1
00000F44 FB22rrrrrrrr            		MOV.L #_st_cfg, R2
00000F4A 4B12                    		ADD R1, R2
00000F4C A9A1                    		MOV.L 18H[R2], R1
00000F4E FC8D2105                		FMUL 14H[R2].L, R1
00000F52 A8A3                    		MOV.L 08H[R2], R3
00000F54 76136801                		MUL #0168H, R3
00000F58 7DF3                    		BTST #1FH, R3
00000F5A 20rr                    		BEQ L344
00000F5C                         L343:	; entry.split
00000F5C FD813E                  		SHLR #01H, R3, R14
00000F5F 6413                    		AND #01H, R3
00000F61 57E3                    		OR R14, R3
00000F63 FC4733                  		ITOF R3, R3
00000F66 FC8B33                  		FADD R3, R3
00000F69 08                   S  		BRA L345
00000F6A                         L344:	; entry.split
00000F6A FC4733                  		ITOF R3, R3
00000F6D                         L345:	; entry.split
00000F6D FC9313                  		FDIV R1, R3
00000F70 A1AB                    		MOV.L R3, 1CH[R2]
00000F72                         L346:	; entry.split1
                                 ;    1371 	st_reset();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1371
00000F72 39rrrr               W  		BSR _st_reset
00000F75 6702                    		RTSD #08H
00000F77                         _st_set_sa:
                                 		.STACK	_st_set_sa=12
                                 ;    1372 }
                                 ;    1373 
                                 ;    1374 /* PER-MOTOR FUNCTIONS
                                 ;    1375  * st_set_sa() - set motor step angle
                                 ;    1376  * st_set_tr() - set travel per motor revolution
                                 ;    1377  * st_set_mi() - set motor microsteps
                                 ;    1378  * st_set_pm() - set motor power mode
                                 ;    1379  * st_set_pl() - set motor power level
                                 ;    1380  */
                                 ;    1381 
                                 ;    1382 stat_t st_set_sa(nvObj_t *nv)			// motor step angle
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1382
00000F77 6080                    		SUB #08H, R0
00000F79 A009                    		MOV.L R1, 04H[R0]
                                 ;    1383 {
                                 ;    1384 	set_flt(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1384
00000F7B 05rrrrrr             A  		BSR _set_flt
00000F7F                         L348:	; entry.split
                                 ;    1385 	_set_motor_steps_per_unit(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1385
00000F7F A809                    		MOV.L 04H[R0], R1
00000F81 39rrrr               W  		BSR __$_set_motor_steps_per_unit
00000F84                         L349:	; entry.split1
                                 ;    1386 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1386
00000F84 3C0300                  		MOV.B #00H, 03H[R0]
00000F87 B089                    		MOVU.B 03H[R0], R1
00000F89                         L350:	; entry.split2
                                 ;    1387 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1387
00000F89 5B11                    		MOVU.B R1, R1
00000F8B 6702                    		RTSD #08H
00000F8D                         _st_set_tr:
                                 		.STACK	_st_set_tr=12
                                 ;    1388 
                                 ;    1389 stat_t st_set_tr(nvObj_t *nv)			// motor travel per revolution
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1389
00000F8D 6080                    		SUB #08H, R0
00000F8F A009                    		MOV.L R1, 04H[R0]
                                 ;    1390 {
                                 ;    1391 	set_flu(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1391
00000F91 05rrrrrr             A  		BSR _set_flu
00000F95                         L352:	; entry.split
                                 ;    1392 	_set_motor_steps_per_unit(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1392
00000F95 A809                    		MOV.L 04H[R0], R1
00000F97 39rrrr               W  		BSR __$_set_motor_steps_per_unit
00000F9A                         L353:	; entry.split1
                                 ;    1393 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1393
00000F9A 3C0300                  		MOV.B #00H, 03H[R0]
00000F9D B089                    		MOVU.B 03H[R0], R1
00000F9F                         L354:	; entry.split2
                                 ;    1394 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1394
00000F9F 5B11                    		MOVU.B R1, R1
00000FA1 6702                    		RTSD #08H
00000FA3                         _st_set_mi:
                                 		.STACK	_st_set_mi=20
                                 ;    1395 
                                 ;    1396 stat_t st_set_mi(nvObj_t *nv)			// motor microsteps
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1396
00000FA3 7100F0                  		ADD #0FFFFFFF0H, R0
00000FA6 A089                    		MOV.L R1, 0CH[R0]
                                 ;    1397 {
                                 ;    1398     uint32_t mi = (uint32_t)nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1398
00000FA8 A911                    		MOV.L 10H[R1], R1
00000FAA FD72110000004F          		FCMP #4F000000H, R1
00000FB1 29rr                    		BLT L357
00000FB3                         L356:	; entry
00000FB3 FD7221000080CF          		FADD #0CF800000H, R1
00000FBA                         L357:	; entry
00000FBA FC9711                  		FTOI R1, R1
00000FBD A009                    		MOV.L R1, 04H[R0]
00000FBF                         L358:	; entry.split
                                 ;    1399 	if ((mi != 1) && (mi != 2) && (mi != 4) && (mi != 8)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1399
00000FBF A809                    		MOV.L 04H[R0], R1
00000FC1 6111                    		CMP #01H, R1
00000FC3 21rr                    		BNE L360
00000FC5 2Err                 B  		BRA L362
00000FC7                         L359:	; bb7
                                 ;    1400 		nv_add_conditional_message((const char_t *)"*** WARNING *** Setting non-standard microstep value");
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1400
00000FC7 FB12rrrrrrrr            		MOV.L #_L10, R1
00000FCD 05rrrrrr             A  		BSR _nv_add_conditional_message
00000FD1 2Err                 B  		BRA L372
00000FD3                         L360:	; bb12
00000FD3 A809                    		MOV.L 04H[R0], R1
00000FD5 6121                    		CMP #02H, R1
00000FD7 10                   S  		BEQ L362
00000FD8                         L361:	; bb16
00000FD8 F80601                  		MOV.L #00000001H, [R0]
00000FDB 08                   S  		BRA L363
00000FDC                         L362:	; bb17
00000FDC F80600                  		MOV.L #00000000H, [R0]
00000FDF                         L363:	; bb18
00000FDF EC01                    		MOV.L [R0], R1
00000FE1 6101                    		CMP #00H, R1
00000FE3 10                   S  		BEQ L366
00000FE4                         L364:	; bb21
00000FE4 A809                    		MOV.L 04H[R0], R1
00000FE6 6141                    		CMP #04H, R1
00000FE8 10                   S  		BEQ L366
00000FE9                         L365:	; bb25
00000FE9 F80601                  		MOV.L #00000001H, [R0]
00000FEC 08                   S  		BRA L367
00000FED                         L366:	; bb26
00000FED F80600                  		MOV.L #00000000H, [R0]
00000FF0                         L367:	; bb27
00000FF0 EC01                    		MOV.L [R0], R1
00000FF2 6101                    		CMP #00H, R1
00000FF4 10                   S  		BEQ L370
00000FF5                         L368:	; bb31
00000FF5 A809                    		MOV.L 04H[R0], R1
00000FF7 6181                    		CMP #08H, R1
00000FF9 10                   S  		BEQ L370
00000FFA                         L369:	; bb35
00000FFA F80601                  		MOV.L #00000001H, [R0]
00000FFD 08                   S  		BRA L371
00000FFE                         L370:	; bb36
00000FFE F80600                  		MOV.L #00000000H, [R0]
00001001                         L371:	; bb37
00001001 EC01                    		MOV.L [R0], R1
00001003 6101                    		CMP #00H, R1
00001005 21rr                    		BNE L359
00001007                         L372:	; bb42
                                 ;    1401 	}
                                 ;    1402 	set_int(nv);						// set it anyway, even if it's unsupported. It could also be > 255
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1402
00001007 A889                    		MOV.L 0CH[R0], R1
00001009 05rrrrrr             A  		BSR _set_int
0000100D                         L373:	; bb42.split
                                 ;    1403 	_set_motor_steps_per_unit(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1403
0000100D A889                    		MOV.L 0CH[R0], R1
0000100F 39rrrr               W  		BSR __$_set_motor_steps_per_unit
00001012                         L374:	; bb42.split1
                                 ;    1404 	_set_hw_microsteps(_get_motor(nv), (uint8_t)nv->value);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1404
00001012 A889                    		MOV.L 0CH[R0], R1
00001014 39rrrr               W  		BSR __$_get_motor
00001017 A88A                    		MOV.L 0CH[R0], R2
00001019 A922                    		MOV.L 10H[R2], R2
0000101B FD72120000004F          		FCMP #4F000000H, R2
00001022 29rr                    		BLT L376
00001024                         L375:	; bb42.split1
00001024 FD7222000080CF          		FADD #0CF800000H, R2
0000102B                         L376:	; bb42.split1
0000102B FC972E                  		FTOI R2, R14
0000102E 5BE2                    		MOVU.B R14, R2
00001030 5B11                    		MOVU.B R1, R1
00001032 39rrrr               W  		BSR __$_set_hw_microsteps
00001035                         L377:	; bb42.split2
                                 ;    1405 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1405
00001035 3C0B00                  		MOV.B #00H, 0BH[R0]
00001038 B289                    		MOVU.B 0BH[R0], R1
0000103A                         L378:	; bb42.split3
                                 ;    1406 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1406
0000103A 5B11                    		MOVU.B R1, R1
0000103C 6704                    		RTSD #10H
0000103E                         _st_set_pm:
                                 		.STACK	_st_set_pm=12
                                 ;    1407 
                                 ;    1408 stat_t st_set_pm(nvObj_t *nv)			// motor power mode
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1408
0000103E 6080                    		SUB #08H, R0
00001040 A009                    		MOV.L R1, 04H[R0]
                                 ;    1409 {
                                 ;    1410 	if ((uint8_t)nv->value >= MOTOR_POWER_MODE_MAX_VALUE)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1410
00001042 A911                    		MOV.L 10H[R1], R1
00001044 FD72110000004F          		FCMP #4F000000H, R1
0000104B 29rr                    		BLT L381
0000104D                         L380:	; entry
0000104D FD7221000080CF          		FADD #0CF800000H, R1
00001054                         L381:	; entry
00001054 FC971E                  		FTOI R1, R14
00001057 5BEE                    		MOVU.B R14, R14
00001059 614E                    		CMP #04H, R14
0000105B 29rr                    		BLT L383
0000105D                         L382:	; bb2
                                 ;    1411         return (STAT_INPUT_VALUE_RANGE_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1411
0000105D 3C026E                  		MOV.B #6EH, 02H[R0]
00001060 08                   S  		BRA L385
00001061                         L383:	; bb11
                                 ;    1412 	set_ui8(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1412
00001061 A809                    		MOV.L 04H[R0], R1
00001063 05rrrrrr             A  		BSR _set_ui8
00001067                         L384:	; bb11.split
                                 ;    1413 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1413
00001067 3C0200                  		MOV.B #00H, 02H[R0]
0000106A                         L385:	; bb15
0000106A C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;    1414 	// NOTE: The motor power callback makes these settings take effect immediately
                                 ;    1415 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1415
0000106E B089                    		MOVU.B 03H[R0], R1
00001070 6702                    		RTSD #08H
00001072                         _st_set_pl:
                                 		.STACK	_st_set_pl=12
                                 ;    1416 
                                 ;    1417 /*
                                 ;    1418  * st_set_pl() - set motor power level
                                 ;    1419  *
                                 ;    1420  *	Input value may vary from 0.000 to 1.000 The setting is scaled to allowable PWM range.
                                 ;    1421  *	This function sets both the scaled and dynamic power levels, and applies the
                                 ;    1422  *	scaled value to the vref.
                                 ;    1423  */
                                 ;    1424 stat_t st_set_pl(nvObj_t *nv)	// motor power level
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1424
00001072 6080                    		SUB #08H, R0
00001074 A009                    		MOV.L R1, 04H[R0]
                                 ;    1425 {
                                 ;    1426 #ifdef __ARM
                                 ;    1427 	if (nv->value < (float)0.0) nv->value = 0.0;
                                 ;    1428 	if (nv->value > (float)1.0) {
                                 ;    1429 		if (nv->value > (float)100) nv->value = 1;
                                 ;    1430  		nv->value /= 100;		// accommodate old 0-100 inputs
                                 ;    1431 	}
                                 ;    1432 	set_flt(nv);	// set power_setting value in the motor config struct (st)
                                 ;    1433 
                                 ;    1434 	uint8_t m = _get_motor(nv);
                                 ;    1435 	st_cfg.mot[m].power_level_scaled = (nv->value * POWER_LEVEL_SCALE_FACTOR);
                                 ;    1436 	st_run.mot[m].power_level_dynamic = (st_cfg.mot[m].power_level_scaled);
                                 ;    1437 	_set_motor_power_level(m, st_cfg.mot[m].power_level_scaled);
                                 ;    1438 #endif
                                 ;    1439 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1439
00001076 3C0300                  		MOV.B #00H, 03H[R0]
00001079 B089                    		MOVU.B 03H[R0], R1
0000107B                         L387:	; entry.split
                                 ;    1440 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1440
0000107B 5B11                    		MOVU.B R1, R1
0000107D 6702                    		RTSD #08H
0000107F                         _st_get_pwr:
                                 		.STACK	_st_get_pwr=16
                                 ;    1441 
                                 ;    1442 /*
                                 ;    1443  * st_get_pwr()	- get motor enable power state
                                 ;    1444  */
                                 ;    1445 stat_t st_get_pwr(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1445
0000107F 7EA6                    		PUSH.L R6
00001081 6080                    		SUB #08H, R0
00001083 EF16                    		MOV.L R1, R6
00001085 A00E                    		MOV.L R6, 04H[R0]
                                 ;    1446 {
                                 ;    1447 	nv->value = _motor_is_enabled(_get_motor(nv));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1447
00001087 39rrrr               W  		BSR __$_get_motor
0000108A 5B11                    		MOVU.B R1, R1
0000108C 39rrrr               W  		BSR __$_motor_is_enabled
0000108F FC4711                  		ITOF R1, R1
00001092 A161                    		MOV.L R1, 10H[R6]
00001094                         L389:	; entry.split
                                 ;    1448 	nv->valuetype = TYPE_INTEGER;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1448
00001094 A809                    		MOV.L 04H[R0], R1
00001096 3C1B02                  		MOV.B #02H, 0BH[R1]
00001099                         L390:	; entry.split1
                                 ;    1449 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1449
00001099 3C0300                  		MOV.B #00H, 03H[R0]
0000109C B089                    		MOVU.B 03H[R0], R1
0000109E                         L391:	; entry.split2
                                 ;    1450 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1450
0000109E 5B11                    		MOVU.B R1, R1
000010A0 3F6603                  		RTSD #0CH, R6-R6
000010A3                         _st_set_mt:
                                 		.STACK	_st_set_mt=12
                                 ;    1451 
                                 ;    1452 /* GLOBAL FUNCTIONS (SYSTEM LEVEL)
                                 ;    1453  *
                                 ;    1454  * st_set_mt() - set motor timeout in seconds
                                 ;    1455  * st_set_md() - disable motor power
                                 ;    1456  * st_set_me() - enable motor power
                                 ;    1457  *
                                 ;    1458  * Calling me or md with NULL will enable or disable all motors
                                 ;    1459  * Setting a value of 0 will enable or disable all motors
                                 ;    1460  * Setting a value from 1 to MOTORS will enable or disable that motor only
                                 ;    1461  */
                                 ;    1462 
                                 ;    1463 stat_t st_set_mt(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1463
000010A3 6080                    		SUB #08H, R0
000010A5 A009                    		MOV.L R1, 04H[R0]
                                 ;    1464 {
                                 ;    1465 	st_cfg.motor_power_timeout = fminf(MOTOR_TIMEOUT_SECONDS_MAX, fmaxf(nv->value, MOTOR_TIMEOUT_SECONDS_MIN));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1465
000010A7 A911                    		MOV.L 10H[R1], R1
000010A9 FB22CDCCCC3D            		MOV.L #3DCCCCCDH, R2
000010AF 05rrrrrr             A  		BSR _fmaxf
000010B3 EF12                    		MOV.L R1, R2
000010B5 FB126E12834A            		MOV.L #4A83126EH, R1
000010BB 05rrrrrr             A  		BSR _fminf
000010BF FBE2rrrrrrrr            		MOV.L #_st_cfg, R14
000010C5 E3E1                    		MOV.L R1, [R14]
000010C7                         L393:	; entry.split
                                 ;    1466 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1466
000010C7 3C0300                  		MOV.B #00H, 03H[R0]
000010CA B089                    		MOVU.B 03H[R0], R1
000010CC                         L394:	; entry.split1
                                 ;    1467 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1467
000010CC 5B11                    		MOVU.B R1, R1
000010CE 6702                    		RTSD #08H
000010D0                         _st_set_md:
                                 		.STACK	_st_set_md=16
                                 ;    1468 
                                 ;    1469 stat_t st_set_md(nvObj_t *nv)	// Make sure this function is not part of initialization --> f00
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1469
000010D0 60C0                    		SUB #0CH, R0
000010D2 A081                    		MOV.L R1, 08H[R0]
                                 ;    1470 {
                                 ;    1471 	if (((uint8_t)nv->value == 0) || (nv->valuetype == TYPE_NULL)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1471
000010D4 A911                    		MOV.L 10H[R1], R1
000010D6 FD72110000004F          		FCMP #4F000000H, R1
000010DD 29rr                    		BLT L397
000010DF                         L396:	; entry
000010DF FD7221000080CF          		FADD #0CF800000H, R1
000010E6                         L397:	; entry
000010E6 FC971E                  		FTOI R1, R14
000010E9 5BEE                    		MOVU.B R14, R14
000010EB 610E                    		CMP #00H, R14
000010ED 20rr                    		BEQ L406
000010EF 2Err                 B  		BRA L405
000010F1                         L398:	; bb3
                                 ;    1472 		st_deenergize_motors();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1472
000010F1 39rrrr               W  		BSR _st_deenergize_motors
000010F4 2Err                 B  		BRA L409
000010F6                         L399:	; bb4
                                 ;    1473 	} else {
                                 ;    1474         uint8_t motor = (uint8_t)nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1474
000010F6 A881                    		MOV.L 08H[R0], R1
000010F8 A911                    		MOV.L 10H[R1], R1
000010FA FD72110000004F          		FCMP #4F000000H, R1
00001101 29rr                    		BLT L401
00001103                         L400:	; bb4
00001103 FD7221000080CF          		FADD #0CF800000H, R1
0000110A                         L401:	; bb4
0000110A FC9711                  		FTOI R1, R1
0000110D 8181                    		MOV.B R1, 06H[R0]
0000110F                         L402:	; bb4.split
                                 ;    1475         if (motor > MOTORS) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1475
0000110F B181                    		MOVU.B 06H[R0], R1
00001111 6151                    		CMP #05H, R1
00001113 29rr                    		BLT L404
00001115                         L403:	; bb10
                                 ;    1476             return (STAT_INPUT_VALUE_RANGE_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1476
00001115 3C056E                  		MOV.B #6EH, 05H[R0]
00001118 2Err                 B  		BRA L410
0000111A                         L404:	; bb16
                                 ;    1477         }
                                 ;    1478         _deenergize_motor(motor-1);     // adjust so that motor 1 is actually 0 (etc)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1478
0000111A B181                    		MOVU.B 06H[R0], R1
0000111C 6011                    		SUB #01H, R1
0000111E 5B11                    		MOVU.B R1, R1
00001120 39rrrr               W  		BSR __$_deenergize_motor
00001123 2Err                 B  		BRA L409
00001125                         L405:	; bb28
00001125 A881                    		MOV.L 08H[R0], R1
00001127 8A99                    		MOV.B 0BH[R1], R1
00001129 6101                    		CMP #00H, R1
0000112B 18                   S  		BNE L407
0000112C                         L406:	; bb35
0000112C F80601                  		MOV.L #00000001H, [R0]
0000112F 08                   S  		BRA L408
00001130                         L407:	; bb36
00001130 F80600                  		MOV.L #00000000H, [R0]
00001133                         L408:	; bb37
00001133 EC01                    		MOV.L [R0], R1
00001135 6101                    		CMP #00H, R1
00001137 21rr                    		BNE L398
00001139 2Err                 B  		BRA L399
0000113B                         L409:	; bb42
                                 ;    1479 	}
                                 ;    1480 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1480
0000113B 3C0500                  		MOV.B #00H, 05H[R0]
0000113E                         L410:	; bb44
0000113E C5000507                		MOV.B 05H[R0], 07H[R0]
                                 ;    1481 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1481
00001142 B189                    		MOVU.B 07H[R0], R1
00001144 6703                    		RTSD #0CH
00001146                         _st_set_me:
                                 		.STACK	_st_set_me=16
                                 ;    1482 
                                 ;    1483 stat_t st_set_me(nvObj_t *nv)	// Make sure this function is not part of initialization --> f00
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1483
00001146 60C0                    		SUB #0CH, R0
00001148 A081                    		MOV.L R1, 08H[R0]
                                 ;    1484 {
                                 ;    1485 	if (((uint8_t)nv->value == 0) || (nv->valuetype == TYPE_NULL)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1485
0000114A A911                    		MOV.L 10H[R1], R1
0000114C FD72110000004F          		FCMP #4F000000H, R1
00001153 29rr                    		BLT L413
00001155                         L412:	; entry
00001155 FD7221000080CF          		FADD #0CF800000H, R1
0000115C                         L413:	; entry
0000115C FC971E                  		FTOI R1, R14
0000115F 5BEE                    		MOVU.B R14, R14
00001161 610E                    		CMP #00H, R14
00001163 20rr                    		BEQ L422
00001165 2Err                 B  		BRA L421
00001167                         L414:	; bb3
                                 ;    1486 		st_energize_motors();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1486
00001167 39rrrr               W  		BSR _st_energize_motors
0000116A 2Err                 B  		BRA L425
0000116C                         L415:	; bb4
                                 ;    1487 	} else {
                                 ;    1488         uint8_t motor = (uint8_t)nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1488
0000116C A881                    		MOV.L 08H[R0], R1
0000116E A911                    		MOV.L 10H[R1], R1
00001170 FD72110000004F          		FCMP #4F000000H, R1
00001177 29rr                    		BLT L417
00001179                         L416:	; bb4
00001179 FD7221000080CF          		FADD #0CF800000H, R1
00001180                         L417:	; bb4
00001180 FC9711                  		FTOI R1, R1
00001183 8181                    		MOV.B R1, 06H[R0]
00001185                         L418:	; bb4.split
                                 ;    1489         if (motor > MOTORS) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1489
00001185 B181                    		MOVU.B 06H[R0], R1
00001187 6151                    		CMP #05H, R1
00001189 29rr                    		BLT L420
0000118B                         L419:	; bb10
                                 ;    1490             return (STAT_INPUT_VALUE_RANGE_ERROR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1490
0000118B 3C056E                  		MOV.B #6EH, 05H[R0]
0000118E 2Err                 B  		BRA L426
00001190                         L420:	; bb16
                                 ;    1491         }
                                 ;    1492 		_energize_motor(motor-1);     // adjust so that motor 1 is actually 0 (etc)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1492
00001190 B181                    		MOVU.B 06H[R0], R1
00001192 6011                    		SUB #01H, R1
00001194 5B11                    		MOVU.B R1, R1
00001196 39rrrr               W  		BSR __$_energize_motor
00001199 2Err                 B  		BRA L425
0000119B                         L421:	; bb28
0000119B A881                    		MOV.L 08H[R0], R1
0000119D 8A99                    		MOV.B 0BH[R1], R1
0000119F 6101                    		CMP #00H, R1
000011A1 18                   S  		BNE L423
000011A2                         L422:	; bb35
000011A2 F80601                  		MOV.L #00000001H, [R0]
000011A5 08                   S  		BRA L424
000011A6                         L423:	; bb36
000011A6 F80600                  		MOV.L #00000000H, [R0]
000011A9                         L424:	; bb37
000011A9 EC01                    		MOV.L [R0], R1
000011AB 6101                    		CMP #00H, R1
000011AD 21rr                    		BNE L414
000011AF 2Err                 B  		BRA L415
000011B1                         L425:	; bb42
                                 ;    1493 	}
                                 ;    1494 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1494
000011B1 3C0500                  		MOV.B #00H, 05H[R0]
000011B4                         L426:	; bb44
000011B4 C5000507                		MOV.B 05H[R0], 07H[R0]
                                 ;    1495 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1495
000011B8 B189                    		MOVU.B 07H[R0], R1
000011BA 6703                    		RTSD #0CH
000011BC                         _st_command_dwell:
                                 		.STACK	_st_command_dwell=8
                                 ;    1496 
                                 ;    1497 void st_command_dwell(st_dwell_command com)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1497
000011BC 6040                    		SUB #04H, R0
000011BE E301                    		MOV.L R1, [R0]
                                 ;    1498 {
                                 ;    1499 	switch(com)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1499
000011C0 6141                    		CMP #04H, R1
000011C2 20rr                    		BEQ L436
000011C4                         L428:	; entry
000011C4 6111                    		CMP #01H, R1
000011C6 20rr                    		BEQ L433
000011C8                         L429:	; entry
000011C8 6121                    		CMP #02H, R1
000011CA 20rr                    		BEQ L434
000011CC                         L430:	; entry
000011CC 6131                    		CMP #03H, R1
000011CE 20rr                    		BEQ L435
000011D0                         L431:	; entry
000011D0 6101                    		CMP #00H, R1
000011D2 21rr                    		BNE L437
000011D4                         L432:	; bb
                                 ;    1500 	{
                                 ;    1501 		case DWELL_START: 	R_CMT_Control(timerDwell,CMT_RX_CMD_RESTART,0);	break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1501
000011D4 FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
000011DA ECE1                    		MOV.L [R14], R1
000011DC 6603                    		MOV.L #00000000H, R3
000011DE 6622                    		MOV.L #00000002H, R2
000011E0 05rrrrrr             A  		BSR _R_CMT_Control
000011E4 6701                    		RTSD #04H
000011E6                         L433:	; bb4
                                 ;    1502 		case DWELL_PAUSE: 	R_CMT_Control(timerDwell,CMT_RX_CMD_PAUSE,0);	break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1502
000011E6 FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
000011EC ECE1                    		MOV.L [R14], R1
000011EE 6603                    		MOV.L #00000000H, R3
000011F0 6612                    		MOV.L #00000001H, R2
000011F2 05rrrrrr             A  		BSR _R_CMT_Control
000011F6 6701                    		RTSD #04H
000011F8                         L434:	; bb7
                                 ;    1503 		case DWELL_RESTART: R_CMT_Control(timerDwell,CMT_RX_CMD_RESUME,0);  break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1503
000011F8 FBE2rrrrrrrr            		MOV.L #_timerDwell, R14
000011FE ECE1                    		MOV.L [R14], R1
00001200 6603                    		MOV.L #00000000H, R3
00001202 6632                    		MOV.L #00000003H, R2
00001204 05rrrrrr             A  		BSR _R_CMT_Control
00001208 6701                    		RTSD #04H
0000120A                         L435:	; bb10
                                 ;    1504 		case DWELL_EXIT: 	st_run.dda_ticks_downcount = 1; 				break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1504
0000120A FB12rrrrrrrr            		MOV.L #__$st_run, R1
00001210 3E1101                  		MOV.L #00000001H, 04H[R1]
00001213 6701                    		RTSD #04H
00001215                         L436:	; bb11
                                 ;    1505 		case DWELL_ZERO: 	st_run.dda_ticks_downcount = 0; 				break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1505
00001215 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000121B 3E1100                  		MOV.L #00000000H, 04H[R1]
0000121E 6701                    		RTSD #04H
00001220                         L437:	; return
                                 ;    1506 		default: break;
                                 ;    1507 	}
                                 ;    1508 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1508
00001220 6701                    		RTSD #04H
00001222                         _st_get_dwell_elapsed_time:
                                 		.STACK	_st_get_dwell_elapsed_time=8
                                 ;    1509 
                                 ;    1510 float st_get_dwell_elapsed_time(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1510
00001222 6040                    		SUB #04H, R0
                                 ;    1511 {
                                 ;    1512 	return st_run.dda_ticks_downcount/FREQUENCY_DWELL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1512
00001224 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000122A A819                    		MOV.L 04H[R1], R1
0000122C 7DF1                    		BTST #1FH, R1
0000122E 20rr                    		BEQ L440
00001230                         L439:	; entry
00001230 FD811E                  		SHLR #01H, R1, R14
00001233 6411                    		AND #01H, R1
00001235 57E1                    		OR R14, R1
00001237 FC4711                  		ITOF R1, R1
0000123A FC8B11                  		FADD R1, R1
0000123D 08                   S  		BRA L441
0000123E                         L440:	; entry
0000123E FC4711                  		ITOF R1, R1
00001241                         L441:	; entry
00001241 FD724100401C46          		FDIV #461C4000H, R1
00001248 E301                    		MOV.L R1, [R0]
0000124A                         L442:	; entry.split
                                 ;    1513 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1513
0000124A 6701                    		RTSD #04H
0000124C                         _st_set_dwell_elapsed_time:
                                 		.STACK	_st_set_dwell_elapsed_time=12
                                 ;    1514 
                                 ;    1515 void st_set_dwell_elapsed_time(float time)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1515
0000124C 6080                    		SUB #08H, R0
0000124E A009                    		MOV.L R1, 04H[R0]
                                 ;    1516 {
                                 ;    1517 	float timeElapsed;
                                 ;    1518 	timeElapsed = (int32_t)st_run.dda_ticks_downcount + (int32_t)time*FREQUENCY_DWELL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1518
00001250 FBE2rrrrrrrr            		MOV.L #__$st_run, R14
00001256 06A111E201              		ITOF 04H[R14].L, R2
0000125B FC971E                  		FTOI R1, R14
0000125E FC47EE                  		ITOF R14, R14
00001261 FD723E00401C46          		FMUL #461C4000H, R14
00001268 FC8BE2                  		FADD R14, R2
0000126B E302                    		MOV.L R2, [R0]
0000126D                         L444:	; entry.split
0000126D 660E                    		MOV.L #00000000H, R14
                                 ;    1519 	if(timeElapsed <= 0){
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1519
0000126F FC840E                  		FCMP [R0].L, R14
00001272 29rr                    		BLT L446
00001274                         L445:	; bb9
                                 ;    1520 		st_run.dda_ticks_downcount = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1520
00001274 FB12rrrrrrrr            		MOV.L #__$st_run, R1
0000127A 3E1101                  		MOV.L #00000001H, 04H[R1]
0000127D 6702                    		RTSD #08H
0000127F                         L446:	; bb10
                                 ;    1521 	}
                                 ;    1522 	else
                                 ;    1523 	{
                                 ;    1524 		st_run.dda_ticks_downcount = timeElapsed;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1524
0000127F EC01                    		MOV.L [R0], R1
00001281 FD72110000004F          		FCMP #4F000000H, R1
00001288 29rr                    		BLT L448
0000128A                         L447:	; bb10
0000128A FD7221000080CF          		FADD #0CF800000H, R1
00001291                         L448:	; bb10
00001291 FC9711                  		FTOI R1, R1
00001294 FB22rrrrrrrr            		MOV.L #__$st_run, R2
0000129A A029                    		MOV.L R1, 04H[R2]
0000129C 6702                    		RTSD #08H
0000129E                         _st_print_mt:
                                 		.STACK	_st_print_mt=8
                                 ;    1525 	}
                                 ;    1526 }
                                 ;    1527 
                                 ;    1528 
                                 ;    1529 
                                 ;    1530 /***********************************************************************************
                                 ;    1531  * TEXT MODE SUPPORT
                                 ;    1532  * Functions to print variables from the cfgArray table
                                 ;    1533  ***********************************************************************************/
                                 ;    1534 
                                 ;    1535 #ifdef __TEXT_MODE
                                 ;    1536 
                                 ;    1537 static const char msg_units0[] PROGMEM = " in";	// used by generic print functions
                                 ;    1538 static const char msg_units1[] PROGMEM = " mm";
                                 ;    1539 static const char msg_units2[] PROGMEM = " deg";
                                 ;    1540 static const char *const msg_units[] PROGMEM = { msg_units0, msg_units1, msg_units2 };
                                 ;    1541 #define DEGREE_INDEX 2
                                 ;    1542 
                                 ;    1543 static const char fmt_me[] PROGMEM = "motors energized\n";
                                 ;    1544 static const char fmt_md[] PROGMEM = "motors de-energized\n";
                                 ;    1545 static const char fmt_mt[] PROGMEM = "[mt]  motor idle timeout%14.2f Sec\n";
                                 ;    1546 static const char fmt_0ma[] PROGMEM = "[%s%s] m%s map to axis%15d [0=X,1=Y,2=Z...]\n";
                                 ;    1547 static const char fmt_0sa[] PROGMEM = "[%s%s] m%s step angle%20.3f%s\n";
                                 ;    1548 static const char fmt_0tr[] PROGMEM = "[%s%s] m%s travel per revolution%10.4f%s\n";
                                 ;    1549 static const char fmt_0mi[] PROGMEM = "[%s%s] m%s microsteps%16d [1,2,4,8]\n";
                                 ;    1550 static const char fmt_0po[] PROGMEM = "[%s%s] m%s polarity%18d [0=normal,1=reverse]\n";
                                 ;    1551 static const char fmt_0pm[] PROGMEM = "[%s%s] m%s power management%10d [0=disabled,1=always on,2=in cycle,3=when moving]\n";
                                 ;    1552 static const char fmt_0pl[] PROGMEM = "[%s%s] m%s motor power level%13.3f [0.000=minimum, 1.000=maximum]\n";
                                 ;    1553 static const char fmt_pwr[] PROGMEM = "Motor %c power enabled state:%2.0f\n";
                                 ;    1554 
                                 ;    1555 void st_print_mt(nvObj_t *nv) { text_print_flt(nv, fmt_mt);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1555
0000129E 6040                    		SUB #04H, R0
000012A0 E301                    		MOV.L R1, [R0]
000012A2 FB22rrrrrrrr            		MOV.L #__$fmt_mt, R2
000012A8 05rrrrrr             A  		BSR _text_print_flt
000012AC 6701                    		RTSD #04H
000012AE                         _st_print_me:
                                 		.STACK	_st_print_me=8
                                 ;    1556 void st_print_me(nvObj_t *nv) { text_print_nul(nv, fmt_me);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1556
000012AE 6040                    		SUB #04H, R0
000012B0 E301                    		MOV.L R1, [R0]
000012B2 FB22rrrrrrrr            		MOV.L #__$fmt_me, R2
000012B8 05rrrrrr             A  		BSR _text_print_nul
000012BC 6701                    		RTSD #04H
000012BE                         _st_print_md:
                                 		.STACK	_st_print_md=8
                                 ;    1557 void st_print_md(nvObj_t *nv) { text_print_nul(nv, fmt_md);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1557
000012BE 6040                    		SUB #04H, R0
000012C0 E301                    		MOV.L R1, [R0]
000012C2 FB22rrrrrrrr            		MOV.L #__$fmt_md, R2
000012C8 05rrrrrr             A  		BSR _text_print_nul
000012CC 6701                    		RTSD #04H
000012CE                         __$_print_motor_ui8:
                                 		.STACK	__$_print_motor_ui8=32
                                 ;    1558 
                                 ;    1559 static void _print_motor_ui8(nvObj_t *nv, const char *format)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1559
000012CE 6080                    		SUB #08H, R0
000012D0 A009                    		MOV.L R1, 04H[R0]
000012D2 E302                    		MOV.L R2, [R0]
                                 ;    1560 {
                                 ;    1561 	fprintf_P(stderr, format, nv->group, nv->token, nv->group, (uint8_t)nv->value);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1561
000012D4 A809                    		MOV.L 04H[R0], R1
000012D6 A913                    		MOV.L 10H[R1], R3
000012D8 7100EC                  		ADD #0FFFFFFECH, R0
000012DB FD72130000004F          		FCMP #4F000000H, R3
000012E2 29rr                    		BLT L454
000012E4                         L453:	; entry
000012E4 FD7223000080CF          		FADD #0CF800000H, R3
000012EB                         L454:	; entry
000012EB FC973E                  		FTOI R3, R14
000012EE 5BE3                    		MOVU.B R14, R3
000012F0 A103                    		MOV.L R3, 10H[R0]
000012F2 711314                  		ADD #14H, R1, R3
000012F5 A08B                    		MOV.L R3, 0CH[R0]
000012F7 711118                  		ADD #18H, R1
000012FA A081                    		MOV.L R1, 08H[R0]
000012FC A00B                    		MOV.L R3, 04H[R0]
000012FE E302                    		MOV.L R2, [R0]
00001300 FB12rrrrrrrr            		MOV.L #__Stderr, R1
00001306 05rrrrrr             A  		BSR _fprintf
0000130A 710014                  		ADD #14H, R0
0000130D 6702                    		RTSD #08H
0000130F                         __$_print_motor_flt_units:
                                 		.STACK	__$_print_motor_flt_units=40
                                 ;    1562 }
                                 ;    1563 
                                 ;    1564 static void _print_motor_flt_units(nvObj_t *nv, const char *format, uint8_t units)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1564
0000130F 60C0                    		SUB #0CH, R0
00001311 A081                    		MOV.L R1, 08H[R0]
00001313 A00A                    		MOV.L R2, 04H[R0]
00001315 808B                    		MOV.B R3, 03H[R0]
                                 ;    1565 {
                                 ;    1566 	fprintf_P(stderr, format, nv->group, nv->token, nv->group, nv->value, GET_TEXT_ITEM(msg_units, units));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1566
00001317 FBE2rrrrrrrr            		MOV.L #__$msg_units, R14
0000131D B089                    		MOVU.B 03H[R0], R1
0000131F FE61E1                  		MOV.L [R1,R14], R1
00001322 A882                    		MOV.L 08H[R0], R2
00001324 A923                    		MOV.L 10H[R2], R3
00001326 A80C                    		MOV.L 04H[R0], R4
00001328 7100E8                  		ADD #0FFFFFFE8H, R0
0000132B A109                    		MOV.L R1, 14H[R0]
0000132D A103                    		MOV.L R3, 10H[R0]
0000132F 712114                  		ADD #14H, R2, R1
00001332 A089                    		MOV.L R1, 0CH[R0]
00001334 712218                  		ADD #18H, R2
00001337 A082                    		MOV.L R2, 08H[R0]
00001339 A009                    		MOV.L R1, 04H[R0]
0000133B E304                    		MOV.L R4, [R0]
0000133D FB12rrrrrrrr            		MOV.L #__Stderr, R1
00001343 05rrrrrr             A  		BSR _fprintf
00001347 710018                  		ADD #18H, R0
0000134A 6703                    		RTSD #0CH
0000134C                         __$_print_motor_flt:
                                 		.STACK	__$_print_motor_flt=32
                                 ;    1567 }
                                 ;    1568 
                                 ;    1569 static void _print_motor_flt(nvObj_t *nv, const char *format)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1569
0000134C 6080                    		SUB #08H, R0
0000134E A009                    		MOV.L R1, 04H[R0]
00001350 E302                    		MOV.L R2, [R0]
                                 ;    1570 {
                                 ;    1571 	fprintf_P(stderr, format, nv->group, nv->token, nv->group, nv->value);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1571
00001352 A809                    		MOV.L 04H[R0], R1
00001354 7100EC                  		ADD #0FFFFFFECH, R0
00001357 E5100404                		MOV.L 10H[R1], 10H[R0]
0000135B 711314                  		ADD #14H, R1, R3
0000135E A08B                    		MOV.L R3, 0CH[R0]
00001360 711118                  		ADD #18H, R1
00001363 A081                    		MOV.L R1, 08H[R0]
00001365 A00B                    		MOV.L R3, 04H[R0]
00001367 E302                    		MOV.L R2, [R0]
00001369 FB12rrrrrrrr            		MOV.L #__Stderr, R1
0000136F 05rrrrrr             A  		BSR _fprintf
00001373 710014                  		ADD #14H, R0
00001376 6702                    		RTSD #08H
00001378                         __$_print_motor_pwr:
                                 		.STACK	__$_print_motor_pwr=24
                                 ;    1572 }
                                 ;    1573 
                                 ;    1574 static void _print_motor_pwr(nvObj_t *nv, const char *format)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1574
00001378 6080                    		SUB #08H, R0
0000137A A009                    		MOV.L R1, 04H[R0]
0000137C E302                    		MOV.L R2, [R0]
                                 ;    1575 {
                                 ;    1576 	fprintf_P(stderr, format, nv->token[0], nv->value);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1576
0000137E A809                    		MOV.L 04H[R0], R1
00001380 B613                    		MOVU.B 18H[R1], R3
00001382 60C0                    		SUB #0CH, R0
00001384 E5100402                		MOV.L 10H[R1], 08H[R0]
00001388 A00B                    		MOV.L R3, 04H[R0]
0000138A E302                    		MOV.L R2, [R0]
0000138C FB12rrrrrrrr            		MOV.L #__Stderr, R1
00001392 05rrrrrr             A  		BSR _fprintf
00001396 62C0                    		ADD #0CH, R0
00001398 6702                    		RTSD #08H
0000139A                         _st_print_ma:
                                 		.STACK	_st_print_ma=8
                                 ;    1577 }
                                 ;    1578 
                                 ;    1579 void st_print_ma(nvObj_t *nv) { _print_motor_ui8(nv, fmt_0ma);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1579
0000139A 6040                    		SUB #04H, R0
0000139C E301                    		MOV.L R1, [R0]
0000139E FB22rrrrrrrr            		MOV.L #__$fmt_0ma, R2
000013A4 39rrrr               W  		BSR __$_print_motor_ui8
000013A7 6701                    		RTSD #04H
000013A9                         _st_print_sa:
                                 		.STACK	_st_print_sa=8
                                 ;    1580 void st_print_sa(nvObj_t *nv) { _print_motor_flt_units(nv, fmt_0sa, DEGREE_INDEX);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1580
000013A9 6040                    		SUB #04H, R0
000013AB E301                    		MOV.L R1, [R0]
000013AD 6623                    		MOV.L #00000002H, R3
000013AF FB22rrrrrrrr            		MOV.L #__$fmt_0sa, R2
000013B5 39rrrr               W  		BSR __$_print_motor_flt_units
000013B8 6701                    		RTSD #04H
000013BA                         _st_print_tr:
                                 		.STACK	_st_print_tr=12
                                 ;    1581 void st_print_tr(nvObj_t *nv) { _print_motor_flt_units(nv, fmt_0tr, cm_get_units_mode(MODEL));}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1581
000013BA 7EA6                    		PUSH.L R6
000013BC 6040                    		SUB #04H, R0
000013BE EF16                    		MOV.L R1, R6
000013C0 E306                    		MOV.L R6, [R0]
000013C2 FB12rrrrrrrr            		MOV.L #_cm, R1
000013C8 72115402                		ADD #0254H, R1
000013CC 05rrrrrr             A  		BSR _cm_get_units_mode
000013D0 EF13                    		MOV.L R1, R3
000013D2 FB22rrrrrrrr            		MOV.L #__$fmt_0tr, R2
000013D8 EF61                    		MOV.L R6, R1
000013DA 39rrrr               W  		BSR __$_print_motor_flt_units
000013DD 3F6602                  		RTSD #08H, R6-R6
000013E0                         _st_print_mi:
                                 		.STACK	_st_print_mi=8
                                 ;    1582 void st_print_mi(nvObj_t *nv) { _print_motor_ui8(nv, fmt_0mi);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1582
000013E0 6040                    		SUB #04H, R0
000013E2 E301                    		MOV.L R1, [R0]
000013E4 FB22rrrrrrrr            		MOV.L #__$fmt_0mi, R2
000013EA 39rrrr               W  		BSR __$_print_motor_ui8
000013ED 6701                    		RTSD #04H
000013EF                         _st_print_po:
                                 		.STACK	_st_print_po=8
                                 ;    1583 void st_print_po(nvObj_t *nv) { _print_motor_ui8(nv, fmt_0po);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1583
000013EF 6040                    		SUB #04H, R0
000013F1 E301                    		MOV.L R1, [R0]
000013F3 FB22rrrrrrrr            		MOV.L #__$fmt_0po, R2
000013F9 39rrrr               W  		BSR __$_print_motor_ui8
000013FC 6701                    		RTSD #04H
000013FE                         _st_print_pm:
                                 		.STACK	_st_print_pm=8
                                 ;    1584 void st_print_pm(nvObj_t *nv) { _print_motor_ui8(nv, fmt_0pm);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1584
000013FE 6040                    		SUB #04H, R0
00001400 E301                    		MOV.L R1, [R0]
00001402 FB22rrrrrrrr            		MOV.L #__$fmt_0pm, R2
00001408 39rrrr               W  		BSR __$_print_motor_ui8
0000140B 6701                    		RTSD #04H
0000140D                         _st_print_pl:
                                 		.STACK	_st_print_pl=8
                                 ;    1585 void st_print_pl(nvObj_t *nv) { _print_motor_flt(nv, fmt_0pl);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1585
0000140D 6040                    		SUB #04H, R0
0000140F E301                    		MOV.L R1, [R0]
00001411 FB22rrrrrrrr            		MOV.L #__$fmt_0pl, R2
00001417 39rrrr               W  		BSR __$_print_motor_flt
0000141A 6701                    		RTSD #04H
0000141C                         _st_print_pwr:
                                 		.STACK	_st_print_pwr=8
                                 ;    1586 void st_print_pwr(nvObj_t *nv){ _print_motor_pwr(nv, fmt_pwr);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\stepper.c",1586
0000141C 6040                    		SUB #04H, R0
0000141E E301                    		MOV.L R1, [R0]
00001420 FB22rrrrrrrr            		MOV.L #__$fmt_pwr, R2
00001426 39rrrr               W  		BSR __$_print_motor_pwr
00001429 6701                    		RTSD #04H
                                 ;    1587 
                                 ;    1588 #endif // __TEXT_MODE
                                 		.SECTION	C,ROMDATA,ALIGN=4
00000000                         __$msg_units:
00000000 rrrrrrrr                		.lword	__$msg_units0
00000004 rrrrrrrr                		.lword	__$msg_units1
00000008 rrrrrrrr                		.lword	__$msg_units2
                                 		.SECTION	C_1,ROMDATA
00000000                         __$msg_units0:
00000000 20696E                  		.byte	" in"
00000003 00                      		.byte	00H
00000004                         __$msg_units1:
00000004 206D6D                  		.byte	" mm"
00000007 00                      		.byte	00H
00000008                         __$msg_units2:
00000008 20646567                		.byte	" deg"
0000000C 00                      		.byte	00H
0000000D                         __$fmt_me:
0000000D 6D6F746F                		.byte	"motors energized"
         72732065                
         6E657267                
         697A6564                
0000001D 0A00                    		.byte	0AH,00H
0000001F                         __$fmt_md:
0000001F 6D6F746F                		.byte	"motors de-energized"
         72732064                
         652D656E                
         65726769                
         7A6564                  
00000032 0A00                    		.byte	0AH,00H
00000034                         __$fmt_mt:
00000034 5B6D745D                		.byte	"[mt]  motor idle timeout%14.2f Sec"
         20206D6F                
         746F7220                
         69646C65                
         2074696D                
         656F7574                
         2531342E                
         32662053                
         6563                    
00000056 0A00                    		.byte	0AH,00H
00000058                         __$fmt_0ma:
00000058 5B257325                		.byte	"[%s%s] m%s map to axis%15d [0=X,1=Y,2=Z...]"
         735D206D                
         2573206D                
         61702074                
         6F206178                
         69732531                
         3564205B                
         303D582C                
         313D592C                
         323D5A2E                
         2E2E5D                  
00000083 0A00                    		.byte	0AH,00H
00000085                         __$fmt_0sa:
00000085 5B257325                		.byte	"[%s%s] m%s step angle%20.3f%s"
         735D206D                
         25732073                
         74657020                
         616E676C                
         65253230                
         2E336625                
         73                      
000000A2 0A00                    		.byte	0AH,00H
000000A4                         __$fmt_0tr:
000000A4 5B257325                		.byte	"[%s%s] m%s travel per revolution%10.4f%s"
         735D206D                
         25732074                
         72617665                
         6C207065                
         72207265                
         766F6C75                
         74696F6E                
         2531302E                
         34662573                
000000CC 0A00                    		.byte	0AH,00H
000000CE                         __$fmt_0mi:
000000CE 5B257325                		.byte	"[%s%s] m%s microsteps%16d [1,2,4,8]"
         735D206D                
         2573206D                
         6963726F                
         73746570                
         73253136                
         64205B31                
         2C322C34                
         2C385D                  
000000F1 0A00                    		.byte	0AH,00H
000000F3                         __$fmt_0po:
000000F3 5B257325                		.byte	"[%s%s] m%s polarity%18d [0=normal,1=reverse]"
         735D206D                
         25732070                
         6F6C6172                
         69747925                
         31386420                
         5B303D6E                
         6F726D61                
         6C2C313D                
         72657665                
         7273655D                
0000011F 0A00                    		.byte	0AH,00H
00000121                         __$fmt_0pm:
00000121 5B257325                		.byte	"[%s%s] m%s power management%10d [0=disabled,1=always on,2=in cycle,3=when moving]"
         735D206D                
         25732070                
         6F776572                
         206D616E                
         6167656D                
         656E7425                
         31306420                
         5B303D64                
         69736162                
         6C65642C                
         313D616C                
         77617973                
         206F6E2C                
         323D696E                
         20637963                
         6C652C33                
         3D776865                
         6E206D6F                
         76696E67                
         5D                      
00000172 0A00                    		.byte	0AH,00H
00000174                         __$fmt_0pl:
00000174 5B257325                		.byte	"[%s%s] m%s motor power level%13.3f [0.000=minimum, 1.000=maximum]"
         735D206D                
         2573206D                
         6F746F72                
         20706F77                
         6572206C                
         6576656C                
         2531332E                
         3366205B                
         302E3030                
         303D6D69                
         6E696D75                
         6D2C2031                
         2E303030                
         3D6D6178                
         696D756D                
         5D                      
000001B5 0A00                    		.byte	0AH,00H
000001B7                         __$fmt_pwr:
000001B7 4D6F746F                		.byte	"Motor %c power enabled state:%2.0f"
         72202563                
         20706F77                
         65722065                
         6E61626C                
         65642073                
         74617465                
         3A25322E                
         3066                    
000001D9 0A00                    		.byte	0AH,00H
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 2A2A2A20                		.byte	"*** WARNING *** Setting non-standard microstep value"
         5741524E                
         494E4720                
         2A2A2A20                
         53657474                
         696E6720                
         6E6F6E2D                
         7374616E                
         64617264                
         206D6963                
         726F7374                
         65702076                
         616C7565                
00000034 00                      		.byte	00H
                                 		.SECTION	D,ROMDATA,ALIGN=4
00000000                         __$refresh$2:
00000000 00000000                		.lword	00000000H
00000004                         __$step$3:
00000004 00000000                		.lword	00000000H
                                 		.SECTION	D_1,ROMDATA
00000000                         _isDwell:
00000000 00                      		.byte	00H
00000001                         __$flag_dda$1:
00000001 01                      		.byte	01H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _st_cfg:
00000000(00000094H)              		.blkl	37
00000094                         _st_pre:
00000094(00000088H)              		.blkl	34
0000011C                         __$st_run:
0000011C(00000060H)              		.blkl	24
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     04347   LINES

Section List

Attr         Size               Name
CODE     0000005163(0000142BH)  P
ROMDATA  0000000012(0000000CH)  C
ROMDATA  0000000475(000001DBH)  C_1
ROMDATA  0000000053(00000035H)  L
ROMDATA  0000000008(00000008H)  D
ROMDATA  0000000002(00000002H)  D_1
DATA     0000000380(0000017CH)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx12DB\$ccrx\stepper.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\Mobile_build\stepper.lst
-output=C:\Workspace\e2studio\git\MT01\Mobile_build\src\cnc\stepper.obj
