* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Sun Feb 19 10:53:59 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  19-Feb-2017 10:53:59
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=cycle_probing.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=cycle_probing.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=0,MOBILE=1,FREE_RTOS_PP
                                 ;cycle_probing.c
                                 
                                 		.glb	_status_code
                                 		.glb	_cm
                                 		.glb	_sw
                                 		.glb	_zinhibitor
                                 		.glb	_macro_func_ptr
                                 		.glb	_qKeyboard
                                 		.glb	_lstop
                                 		.glb	__set_pb_func
                                 		.glb	_cm_straight_probe
                                 		.glb	_cm_probe_callback
                                 		.glb	_cm_get_runtime_busy
                                 		.glb	_cm_get_axis_jerk
                                 		.glb	_cm_set_axis_jerk
                                 		.glb	_cm_get_absolute_position
                                 		.glb	_get_axis_vector_length
                                 		.glb	_switch_init
                                 		.glb	_cm_get_coord_system
                                 		.glb	_cm_get_distance_mode
                                 		.glb	_cm_set_distance_mode
                                 		.glb	_cm_set_coord_system
                                 		.glb	_cm_spindle_control
                                 		.glb	_cm_straight_feed
                                 		.glb	_xQueueGenericSend
                                 		.glb	_command_idle
                                 		.glb	_cm_set_position
                                 		.glb	_mp_get_runtime_work_position
                                 		.glb	_json_parser
                                 		.glb	__probe_restore_settings
                                 		.glb	_mp_flush_planner
                                 		.glb	_cm_set_motion_mode
                                 		.glb	_cm_cycle_end
                                 		.glb	_nv_reset_nv_list
                                 		.glb	_nv_add_conditional_message
                                 		.glb	_sprintf
                                 		.glb	_cm_get_axis_char
                                 		.glb	_nv_print_list
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         __set_pb_func:
                                 		.STACK	__set_pb_func=12
                                 ;       1 /*
                                 ;       2  * cycle_probing.c - probing cycle extension to canonical_machine.c
                                 ;       3  * Part of TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * As a special exception, you may use this file as part of a software library without
                                 ;      13  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      14  * inline functions from this file, or you compile this file and link it with  other
                                 ;      15  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      16  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      17  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      18  * GNU General Public License.
                                 ;      19  *
                                 ;      20  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      21  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      22  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      23  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      24  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      25  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      26  */
                                 ;      27 #include "tinyg.h"
                                 ;      28 #include "config.h"
                                 ;      29 #include "json_parser.h"
                                 ;      30 #include "text_parser.h"
                                 ;      31 #include "canonical_machine.h"
                                 ;      32 #include "spindle.h"
                                 ;      33 #include "report.h"
                                 ;      34 #include "switch.h"
                                 ;      35 #include "util.h"
                                 ;      36 #include "planner.h"
                                 ;      37 #include "hardware.h"
                                 ;      38 #include "switch.h"
                                 ;      39 #include "macros.h"
                                 ;      40 #include "plasma.h"
                                 ;      41 #include "controller.h"
                                 ;      42 #include "keyboard.h"
                                 ;      43 
                                 ;      44 extern bool lstop;
                                 ;      45 /**** Probe singleton structure ****/
                                 ;      46 
                                 ;      47 #define MINIMUM_PROBE_TRAVEL 0.254
                                 ;      48 
                                 ;      49 struct pbProbingSingleton {						// persistent probing runtime variables
                                 ;      50 	stat_t (*func)();							// binding for callback function state machine
                                 ;      51 
                                 ;      52 	// switch configuration
                                 ;      53 #ifndef __NEW_SWITCHES
                                 ;      54 	uint8_t probe_switch;						// which switch should we check?
                                 ;      55 	uint8_t saved_switch_type;					// saved switch type NO/NC
                                 ;      56 	uint8_t saved_switch_mode;	                // save the probe switch's original settings
                                 ;      57 #else
                                 ;      58 	uint8_t probe_switch_axis;					// which axis should we check?
                                 ;      59 	uint8_t probe_switch_position;				//...and position
                                 ;      60 	uint8_t saved_switch_type;					// saved switch type NO/NC
                                 ;      61 	uint8_t saved_switch_mode;					// save the probe switch's original settings
                                 ;      62 #endif
                                 ;      63 
                                 ;      64 	// state saved from gcode model
                                 ;      65 	uint8_t saved_distance_mode;				// G90,G91 global setting
                                 ;      66 	uint8_t saved_coord_system;					// G54 - G59 setting
                                 ;      67 	float saved_jerk[AXES];						// saved and restored for each axis
                                 ;      68 
                                 ;      69 	// probe destination
                                 ;      70 	float start_position[AXES];
                                 ;      71 	float target[AXES];
                                 ;      72 	float flags[AXES];
                                 ;      73 };
                                 ;      74 static struct pbProbingSingleton pb;
                                 ;      75 
                                 ;      76 /**** NOTE: global prototypes and other .h info is located in canonical_machine.h ****/
                                 ;      77 
                                 ;      78 static stat_t _probing_init();
                                 ;      79 static stat_t _probing_start();
                                 ;      80 static stat_t _probing_finish();
                                 ;      81 static stat_t _probing_finalize_exit();
                                 ;      82 static stat_t _probing_error_exit(int8_t axis);
                                 ;      83 
                                 ;      84 
                                 ;      85 /**** HELPERS ***************************************************************************
                                 ;      86  * _set_pb_func() - a convenience for setting the next dispatch vector and exiting
                                 ;      87  */
                                 ;      88 
                                 ;      89 uint8_t _set_pb_func(uint8_t (*func)())
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",89
00000000 6080                    		SUB #08H, R0
00000002 A009                    		MOV.L R1, 04H[R0]
                                 ;      90 {
                                 ;      91 	pb.func = func;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",91
00000004 FBE2rrrrrrrr            		MOV.L #__$pb, R14
0000000A E3E1                    		MOV.L R1, [R14]
0000000C                         L14:	; entry.split
                                 ;      92 	return (STAT_EAGAIN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",92
0000000C 3C0302                  		MOV.B #02H, 03H[R0]
0000000F B089                    		MOVU.B 03H[R0], R1
00000011                         L15:	; entry.split1
                                 ;      93 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",93
00000011 5B11                    		MOVU.B R1, R1
00000013 6702                    		RTSD #08H
00000015                         _cm_straight_probe:
                                 		.STACK	_cm_straight_probe=20
                                 ;      94 
                                 ;      95 /****************************************************************************************
                                 ;      96  * cm_probing_cycle_start()	- G38.2 homing cycle using limit switches
                                 ;      97  * cm_probing_callback() 	- main loop callback for running the homing cycle
                                 ;      98  *
                                 ;      99  *	--- Some further details ---
                                 ;     100  *
                                 ;     101  *	All cm_probe_cycle_start does is prevent any new commands from queueing to the
                                 ;     102  *	planner so that the planner can move to a sop and report MACHINE_PROGRAM_STOP.
                                 ;     103  *	OK, it also queues the function that's called once motion has stopped.
                                 ;     104  *
                                 ;     105  *	Note: When coding a cycle (like this one) you get to perform one queued move per
                                 ;     106  *	entry into the continuation, then you must exit.
                                 ;     107  *
                                 ;     108  *	Another Note: When coding a cycle (like this one) you must wait until
                                 ;     109  *	the last move has actually been queued (or has finished) before declaring
                                 ;     110  *	the cycle to be done. Otherwise there is a nasty race condition in the
                                 ;     111  *	tg_controller() that will accept the next command before the position of
                                 ;     112  *	the final move has been recorded in the Gcode model. That's what the call
                                 ;     113  *	to cm_get_runtime_busy() is about.
                                 ;     114  */
                                 ;     115 
                                 ;     116 uint8_t cm_straight_probe(float target[], float flags[])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",116
00000015 7100F0                  		ADD #0FFFFFFF0H, R0
00000018 A089                    		MOV.L R1, 0CH[R0]
0000001A A082                    		MOV.L R2, 08H[R0]
                                 ;     117 {
                                 ;     118 	// trap zero feed rate condition
                                 ;     119 	if ((cm.gm.feed_rate_mode != INVERSE_TIME_MODE) && (fp_ZERO(cm.gm.feed_rate))) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",119
0000001C FBE2rrrrrrrr            		MOV.L #_cm, R14
00000022 5AEEA002                		MOVU.B 02A0H[R14], R14
00000026 610E                    		CMP #00H, R14
00000028 18                   S  		BNE L18
00000029 2Err                 B  		BRA L20
0000002B                         L17:	; bb3
                                 ;     120 		return (STAT_GCODE_FEEDRATE_NOT_SPECIFIED);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",120
0000002B 3C068E                  		MOV.B #8EH, 06H[R0]
0000002E 38rrrr               W  		BRA L38
00000031                         L18:	; bb9
00000031 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000037 EDEEA5                  		MOV.L 0294H[R14], R14
0000003A 7BFE                    		BCLR #1FH, R14
0000003C FD721EBD378635          		FCMP #358637BDH, R14
00000043 26rr                    		BPZ L20
00000045                         L19:	; bb14
00000045 F80601                  		MOV.L #00000001H, [R0]
00000048 08                   S  		BRA L21
00000049                         L20:	; bb15
00000049 F80600                  		MOV.L #00000000H, [R0]
0000004C                         L21:	; bb16
0000004C EC01                    		MOV.L [R0], R1
0000004E 6101                    		CMP #00H, R1
00000050 21rr                    		BNE L17
00000052                         L22:	; bb21
                                 ;     121 	}
                                 ;     122 
                                 ;     123 	// trap no axes specified
                                 ;     124 	if (fp_NOT_ZERO(flags[AXIS_X]) && fp_NOT_ZERO(flags[AXIS_Y]) && fp_NOT_ZERO(flags[AXIS_Z]))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",124
00000052 A881                    		MOV.L 08H[R0], R1
00000054 EC1E                    		MOV.L [R1], R14
00000056 7BFE                    		BCLR #1FH, R14
00000058 FBF2BD378635            		MOV.L #358637BDH, R15
0000005E FC87EF                  		FCMP R14, R15
00000061 27rr                    		BN L24
00000063 2Err                 B  		BRA L26
00000065                         L23:	; bb22
                                 ;     125 		return (STAT_GCODE_AXIS_IS_MISSING);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",125
00000065 3C0686                  		MOV.B #86H, 06H[R0]
00000068 38rrrr               W  		BRA L38
0000006B                         L24:	; bb30
0000006B A881                    		MOV.L 08H[R0], R1
0000006D A819                    		MOV.L 04H[R1], R1
0000006F 7BF1                    		BCLR #1FH, R1
00000071 FBE2BD378635            		MOV.L #358637BDH, R14
00000077 FC871E                  		FCMP R1, R14
0000007A 26rr                    		BPZ L26
0000007C                         L25:	; bb37
0000007C F80601                  		MOV.L #00000001H, [R0]
0000007F 08                   S  		BRA L27
00000080                         L26:	; bb38
00000080 F80600                  		MOV.L #00000000H, [R0]
00000083                         L27:	; bb39
00000083 EC01                    		MOV.L [R0], R1
00000085 6101                    		CMP #00H, R1
00000087 20rr                    		BEQ L30
00000089                         L28:	; bb43
00000089 A881                    		MOV.L 08H[R0], R1
0000008B A891                    		MOV.L 08H[R1], R1
0000008D 7BF1                    		BCLR #1FH, R1
0000008F FBE2BD378635            		MOV.L #358637BDH, R14
00000095 FC871E                  		FCMP R1, R14
00000098 26rr                    		BPZ L30
0000009A                         L29:	; bb50
0000009A F80601                  		MOV.L #00000001H, [R0]
0000009D 08                   S  		BRA L31
0000009E                         L30:	; bb51
0000009E F80600                  		MOV.L #00000000H, [R0]
000000A1                         L31:	; bb52
000000A1 EC01                    		MOV.L [R0], R1
000000A3 6101                    		CMP #00H, R1
000000A5 21rr                    		BNE L23
000000A7                         L32:	; bb57
                                 ;     126 
                                 ;     127 	// set probe move endpoint
                                 ;     128 	copy_vector(pb.target, target);		// set probe move endpoint
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",128
000000A7 FB12rrrrrrrr            		MOV.L #__$pb, R1
000000AD 71113C                  		ADD #3CH, R1
000000B0 754318                  		MOV.L #00000018H, R3
000000B3 A88A                    		MOV.L 0CH[R0], R2
000000B5 7F8F                    		SMOVF
000000B7                         L33:	; bb57.split
                                 ;     129 	copy_vector(pb.flags, flags);		// set axes involved on the move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",129
000000B7 FB12rrrrrrrr            		MOV.L #__$pb, R1
000000BD 711154                  		ADD #54H, R1
000000C0 754318                  		MOV.L #00000018H, R3
000000C3 A882                    		MOV.L 08H[R0], R2
000000C5 7F8F                    		SMOVF
000000C7                         L34:	; bb57.split1
                                 ;     130 	clear_vector(cm.probe_results);		// clear the old probe position.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",130
000000C7 FBE2rrrrrrrr            		MOV.L #_cm, R14
000000CD 660F                    		MOV.L #00000000H, R15
000000CF E7EF90                  		MOV.L R15, 0240H[R14]
000000D2 E7EF8F                  		MOV.L R15, 023CH[R14]
000000D5 E7EF8E                  		MOV.L R15, 0238H[R14]
000000D8 E7EF8D                  		MOV.L R15, 0234H[R14]
000000DB E7EF8C                  		MOV.L R15, 0230H[R14]
000000DE E7EF8B                  		MOV.L R15, 022CH[R14]
000000E1                         L35:	; bb57.split2
                                 ;     131 										// NOTE: relying on probe_result will not detect a probe to 0,0,0.
                                 ;     132 
                                 ;     133 	cm.probe_state = PROBE_WAITING;		// wait until planner queue empties before completing initialization
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",133
000000E1 FBE2rrrrrrrr            		MOV.L #_cm, R14
000000E7 FAE4280202              		MOV.B #02H, 0228H[R14]
000000EC                         L36:	; bb57.split3
                                 ;     134 	pb.func = _probing_init; 			// bind probing initialization function
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",134
000000EC FBE2rrrrrrrr            		MOV.L #__$pb, R14
000000F2 FBF2rrrrrrrr            		MOV.L #__$_probing_init, R15
000000F8 E3EF                    		MOV.L R15, [R14]
000000FA                         L37:	; bb57.split4
                                 ;     135 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",135
000000FA 3C0600                  		MOV.B #00H, 06H[R0]
000000FD                         L38:	; bb63
000000FD C5000607                		MOV.B 06H[R0], 07H[R0]
                                 ;     136 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",136
00000101 B189                    		MOVU.B 07H[R0], R1
00000103 6704                    		RTSD #10H
00000105                         _cm_probe_callback:
                                 		.STACK	_cm_probe_callback=12
                                 ;     137 
                                 ;     138 uint8_t cm_probe_callback(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",138
00000105 6080                    		SUB #08H, R0
                                 ;     139 {
                                 ;     140 	if ((cm.cycle_state != CYCLE_PROBE) && (cm.probe_state != PROBE_WAITING)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",140
00000107 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000010D 5AEE1E02                		MOVU.B 021EH[R14], R14
00000111 612E                    		CMP #02H, R14
00000113 18                   S  		BNE L41
00000114 2Err                 B  		BRA L43
00000116                         L40:	; bb1
                                 ;     141 		return (STAT_NOOP);				// exit if not in a probe cycle or waiting for one
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",141
00000116 3C0603                  		MOV.B #03H, 06H[R0]
00000119 2Err                 B  		BRA L50
0000011B                         L41:	; bb7
0000011B FBE2rrrrrrrr            		MOV.L #_cm, R14
00000121 5AEE2802                		MOVU.B 0228H[R14], R14
00000125 612E                    		CMP #02H, R14
00000127 10                   S  		BEQ L43
00000128                         L42:	; bb12
00000128 F80601                  		MOV.L #00000001H, [R0]
0000012B 08                   S  		BRA L44
0000012C                         L43:	; bb13
0000012C F80600                  		MOV.L #00000000H, [R0]
0000012F                         L44:	; bb14
0000012F EC01                    		MOV.L [R0], R1
00000131 6101                    		CMP #00H, R1
00000133 21rr                    		BNE L40
00000135                         L45:	; bb19
                                 ;     142 	}
                                 ;     143 	if (cm_get_runtime_busy() == true) { return (STAT_EAGAIN);}	// sync to planner move ends
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",143
00000135 05rrrrrr             A  		BSR _cm_get_runtime_busy
00000139 6111                    		CMP #01H, R1
0000013B 18                   S  		BNE L47
0000013C                         L46:	; bb20
0000013C 3C0602                  		MOV.B #02H, 06H[R0]
0000013F 2Err                 B  		BRA L50
00000141                         L47:	; bb28
                                 ;     144 	if (lstop) { return (STAT_EAGAIN);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",144
00000141 FBE2rrrrrrrr            		MOV.L #_lstop, R14
00000147 58EE                    		MOVU.B [R14], R14
00000149 610E                    		CMP #00H, R14
0000014B 10                   S  		BEQ L49
0000014C                         L48:	; bb29
0000014C 3C0602                  		MOV.B #02H, 06H[R0]
0000014F 2Err                 B  		BRA L50
00000151                         L49:	; bb37
                                 ;     145     return (pb.func());                                         // execute the current homing move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",145
00000151 FBE2rrrrrrrr            		MOV.L #__$pb, R14
00000157 ECEE                    		MOV.L [R14], R14
00000159 7F1E                    		JSR R14
0000015B 8181                    		MOV.B R1, 06H[R0]
0000015D                         L50:	; bb41
0000015D C5000607                		MOV.B 06H[R0], 07H[R0]
                                 ;     146 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",146
00000161 B189                    		MOVU.B 07H[R0], R1
00000163 6702                    		RTSD #08H
00000165                         __$_probing_init:
                                 		.STACK	__$_probing_init=12
                                 ;     147 
                                 ;     148 /*
                                 ;     149  * _probing_init()	- G38.2 homing cycle using limit switches
                                 ;     150  *
                                 ;     151  *	These initializations are required before starting the probing cycle.
                                 ;     152  *	They must be done after the planner has exhasted all current CYCLE moves as
                                 ;     153  *	they affect the runtime (specifically the switch modes). Side effects would
                                 ;     154  *	include limit switches initiating probe actions instead of just killing movement
                                 ;     155  */
                                 ;     156 
                                 ;     157 static uint8_t _probing_init()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",157
00000165 7EA6                    		PUSH.L R6
00000167 6040                    		SUB #04H, R0
                                 ;     158 {
                                 ;     159 	// so optimistic... ;)
                                 ;     160 	// NOTE: it is *not* an error condition for the probe not to trigger.
                                 ;     161 	// it is an error for the limit or homing switches to fire, or for some other configuration error.
                                 ;     162 	cm.probe_state = PROBE_FAILED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",162
00000169 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000016F FAE4280200              		MOV.B #00H, 0228H[R14]
00000174                         L52:	; entry.split
                                 ;     163 	cm.cycle_state = CYCLE_PROBE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",163
00000174 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000017A FAE41E0202              		MOV.B #02H, 021EH[R14]
0000017F                         L53:	; entry.split1
                                 ;     164 
                                 ;     165 	// initialize the axes - save the jerk settings & switch to the jerk_homing settings
                                 ;     166 	for( uint8_t axis=0; axis<AXES; axis++ ) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",166
0000017F 3C0100                  		MOV.B #00H, 01H[R0]
00000182 2Err                 B  		BRA L57
00000184                         L54:	; bb
                                 ;     167 		pb.saved_jerk[axis] = cm_get_axis_jerk(axis);	// save the max jerk value
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",167
00000184 B00E                    		MOVU.B 01H[R0], R6
00000186 EF61                    		MOV.L R6, R1
00000188 05rrrrrr             A  		BSR _cm_get_axis_jerk
0000018C 6C26                    		SHLL #02H, R6
0000018E FB22rrrrrrrr            		MOV.L #__$pb, R2
00000194 4B62                    		ADD R6, R2
00000196 A0A9                    		MOV.L R1, 0CH[R2]
00000198                         L55:	; bb.split
                                 ;     168 		cm_set_axis_jerk(axis, cm.a[axis].jerk_homing);	// use the homing jerk for probe
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",168
00000198 B009                    		MOVU.B 01H[R0], R1
0000019A EF1E                    		MOV.L R1, R14
0000019C 751E38                  		MUL #38H, R14
0000019F FBF2rrrrrrrr            		MOV.L #_cm, R15
000001A5 4BEF                    		ADD R14, R15
000001A7 EDF239                  		MOV.L 0E4H[R15], R2
000001AA 05rrrrrr             A  		BSR _cm_set_axis_jerk
000001AE                         L56:	; bb.split2
                                 ;     169 		pb.start_position[axis] = cm_get_absolute_position(ACTIVE_MODEL, axis);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",169
000001AE FBE2rrrrrrrr            		MOV.L #_cm, R14
000001B4 EDE194                  		MOV.L 0250H[R14], R1
000001B7 B00E                    		MOVU.B 01H[R0], R6
000001B9 EF62                    		MOV.L R6, R2
000001BB 05rrrrrr             A  		BSR _cm_get_absolute_position
000001BF 6C26                    		SHLL #02H, R6
000001C1 FB22rrrrrrrr            		MOV.L #__$pb, R2
000001C7 4B62                    		ADD R6, R2
000001C9 A229                    		MOV.L R1, 24H[R2]
000001CB B009                    		MOVU.B 01H[R0], R1
000001CD 6211                    		ADD #01H, R1
000001CF 8009                    		MOV.B R1, 01H[R0]
000001D1                         L57:	; bb23
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",166
000001D1 B009                    		MOVU.B 01H[R0], R1
000001D3 6161                    		CMP #06H, R1
000001D5 29rr                    		BLT L54
000001D7                         L58:	; bb29
                                 ;     170 	}
                                 ;     171 
                                 ;     172 	// error if the probe target is too close to the current position
                                 ;     173 	if (get_axis_vector_length(pb.start_position, pb.target) < MINIMUM_PROBE_TRAVEL)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",173
000001D7 FB12rrrrrrrr            		MOV.L #__$pb, R1
000001DD 71123C                  		ADD #3CH, R1, R2
000001E0 711124                  		ADD #24H, R1
000001E3 05rrrrrr             A  		BSR _get_axis_vector_length
000001E7 FD72114A0C823E          		FCMP #3E820C4AH, R1
000001EE 26rr                    		BPZ L60
000001F0                         L59:	; bb30
000001F0 FB16FE                  		MOV.L #0FFFFFFFEH, R1
                                 ;     174 		_probing_error_exit(-2);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",174
000001F3 39rrrr               W  		BSR __$_probing_error_exit
000001F6                         L60:	; bb36
                                 ;     175 
                                 ;     176 	// error if the probe target requires a move along the A/B/C axes
                                 ;     177 	for ( uint8_t axis=AXIS_A; axis<AXES; axis++ ) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",177
000001F6 3C0203                  		MOV.B #03H, 02H[R0]
000001F9 2Err                 B  		BRA L64
000001FB                         L61:	; bb38
                                 ;     178 		if (fp_NE(pb.start_position[axis], pb.target[axis]))
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",178
000001FB B081                    		MOVU.B 02H[R0], R1
000001FD 6C21                    		SHLL #02H, R1
000001FF FB22rrrrrrrr            		MOV.L #__$pb, R2
00000205 4B12                    		ADD R1, R2
00000207 AA29                    		MOV.L 24H[R2], R1
00000209 FC81210F                		FSUB 3CH[R2].L, R1
0000020D 7BF1                    		BCLR #1FH, R1
0000020F FBE2BD378635            		MOV.L #358637BDH, R14
00000215 FC871E                  		FCMP R1, R14
00000218 26rr                    		BPZ L63
0000021A                         L62:	; bb39
                                 ;     179 			_probing_error_exit(axis);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",179
0000021A 8881                    		MOV.B 02H[R0], R1
0000021C 39rrrr               W  		BSR __$_probing_error_exit
0000021F                         L63:	; bb56
0000021F B081                    		MOVU.B 02H[R0], R1
00000221 6211                    		ADD #01H, R1
00000223 8081                    		MOV.B R1, 02H[R0]
00000225                         L64:	; bb59
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",177
00000225 B081                    		MOVU.B 02H[R0], R1
00000227 6161                    		CMP #06H, R1
00000229 29rr                    		BLT L61
0000022B                         L65:	; bb65
                                 ;     180 	}
                                 ;     181 
                                 ;     182 	// initialize the probe switch
                                 ;     183 
                                 ;     184     // switch the switch type mode for the probe
                                 ;     185     // FIXME: we should be able to use the homing switch at this point too,
                                 ;     186 	// Can't because switch mode is global and our probe is NO, not NC.
                                 ;     187 
                                 ;     188 #ifndef __NEW_SWITCHES	// old style switch code:
                                 ;     189 	pb.probe_switch = SW_MIN_Z;										// FIXME: hardcoded...
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",189
0000022B FB12rrrrrrrr            		MOV.L #__$pb, R1
00000231 3C1404                  		MOV.B #04H, 04H[R1]
00000234                         L66:	; bb65.split
                                 ;     190 	pb.saved_switch_mode = sw.mode[pb.probe_switch];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",190
00000234 FBE2rrrrrrrr            		MOV.L #__$pb, R14
0000023A FBF2rrrrrrrr            		MOV.L #_sw, R15
00000240 49EF04                  		ADD 04H[R14].UB, R15
00000243 C5FE0B06                		MOV.B 0BH[R15], 06H[R14]
00000247                         L67:	; bb65.split3
                                 ;     191 
                                 ;     192 	sw.mode[pb.probe_switch] = SW_MODE_HOMING;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",192
00000247 FB12rrrrrrrr            		MOV.L #_sw, R1
0000024D FBE2rrrrrrrr            		MOV.L #__$pb, R14
00000253 49E104                  		ADD 04H[R14].UB, R1
00000256 3C1B01                  		MOV.B #01H, 0BH[R1]
00000259                         L68:	; bb65.split4
                                 ;     193 	pb.saved_switch_type = sw.switch_type;							// save the switch type for recovery later.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",193
00000259 FBE2rrrrrrrr            		MOV.L #__$pb, R14
0000025F FBF2rrrrrrrr            		MOV.L #_sw, R15
00000265 C4FE05                  		MOV.B [R15], 05H[R14]
00000268                         L69:	; bb65.split5
                                 ;     194 	sw.switch_type = SW_TYPE_NORMALLY_CLOSED;							// contact probes are NO switches... usually
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",194
00000268 FBE2rrrrrrrr            		MOV.L #_sw, R14
0000026E F8E401                  		MOV.B #01H, [R14]
00000271                         L70:	; bb65.split6
                                 ;     195 	switch_init();													// re-init to pick up new switch setting
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",195
00000271 05rrrrrr             A  		BSR _switch_init
00000275                         L71:	; bb65.split7
                                 ;     196 #else // new style switch code:
                                 ;     197 	pb.probe_switch_axis = AXIS_Z;									// FIXME: hardcoded...
                                 ;     198 	pb.probe_switch_position = SW_MIN;								// FIXME: hardcoded...
                                 ;     199 
                                 ;     200 	pb.saved_switch_mode = sw.s[pb.probe_switch_axis][pb.probe_switch_position].mode;
                                 ;     201 	sw.s[pb.probe_switch_axis][pb.probe_switch_position].mode = SW_MODE_HOMING;
                                 ;     202 
                                 ;     203 	pb.saved_switch_type = sw.s[pb.probe_switch_axis][pb.probe_switch_position].type;
                                 ;     204 	sw.s[pb.probe_switch_axis][pb.probe_switch_position].type = SW_TYPE_NORMALLY_OPEN; // contact probes are NO switches... usually.
                                 ;     205 	switch_init();													// re-init to pick up new switch setting
                                 ;     206 #endif
                                 ;     207 
                                 ;     208 	// probe in absolute machine coords
                                 ;     209 	pb.saved_coord_system = cm_get_coord_system(ACTIVE_MODEL);     //cm.gm.coord_system;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",209
00000275 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000027B EDE194                  		MOV.L 0250H[R14], R1
0000027E 05rrrrrr             A  		BSR _cm_get_coord_system
00000282 FB22rrrrrrrr            		MOV.L #__$pb, R2
00000288 8221                    		MOV.B R1, 08H[R2]
0000028A                         L72:	; bb65.split8
                                 ;     210 	pb.saved_distance_mode = cm_get_distance_mode(ACTIVE_MODEL);   //cm.gm.distance_mode;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",210
0000028A FBE2rrrrrrrr            		MOV.L #_cm, R14
00000290 EDE194                  		MOV.L 0250H[R14], R1
00000293 05rrrrrr             A  		BSR _cm_get_distance_mode
00000297 FB22rrrrrrrr            		MOV.L #__$pb, R2
0000029D 81A9                    		MOV.B R1, 07H[R2]
0000029F                         L73:	; bb65.split9
0000029F 6601                    		MOV.L #00000000H, R1
                                 ;     211 	cm_set_distance_mode(ABSOLUTE_MODE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",211
000002A1 05rrrrrr             A  		BSR _cm_set_distance_mode
000002A5                         L74:	; bb65.split10
000002A5 6601                    		MOV.L #00000000H, R1
                                 ;     212 	cm_set_coord_system(ABSOLUTE_COORDS);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",212
000002A7 05rrrrrr             A  		BSR _cm_set_coord_system
000002AB                         L75:	; bb65.split11
000002AB 6601                    		MOV.L #00000000H, R1
                                 ;     213 
                                 ;     214 	cm_spindle_control(SPINDLE_OFF);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",214
000002AD 05rrrrrr             A  		BSR _cm_spindle_control
000002B1                         L76:	; bb65.split12
                                 ;     215 	return (_set_pb_func(_probing_start));							// start the move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",215
000002B1 FB12rrrrrrrr            		MOV.L #__$_probing_start, R1
000002B7 39rrrr               W  		BSR __set_pb_func
000002BA 8089                    		MOV.B R1, 03H[R0]
000002BC B089                    		MOVU.B 03H[R0], R1
000002BE                         L77:	; bb65.split13
                                 ;     216 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",216
000002BE 5B11                    		MOVU.B R1, R1
000002C0 3F6602                  		RTSD #08H, R6-R6
000002C3                         __$_probing_start:
                                 		.STACK	__$_probing_start=20
                                 ;     217 
                                 ;     218 /*
                                 ;     219  * _probing_start()
                                 ;     220  */
                                 ;     221 
                                 ;     222 static stat_t _probing_start()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",222
000002C3 7100F0                  		ADD #0FFFFFFF0H, R0
                                 ;     223 {
                                 ;     224 	// initial probe state, don't probe if we're already contacted!
                                 ;     225 #ifndef __NEW_SWITCHES
                                 ;     226 
                                 ;     227 	int8_t probe = sw.state[pb.probe_switch];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",227
000002C6 FB12rrrrrrrr            		MOV.L #_sw, R1
000002CC FBE2rrrrrrrr            		MOV.L #__$pb, R14
000002D2 49E104                  		ADD 04H[R14].UB, R1
000002D5 C5100307                		MOV.B 03H[R1], 07H[R0]
000002D9                         L79:	; entry.split
000002D9 FBEE41C008              		MOV.L #0008C041H, R14
                                 ;     228 #else
                                 ;     229 	int8_t probe = read_switch(pb.probe_switch_axis, pb.probe_switch_position);
                                 ;     230 #endif
                                 ;     231 
                                 ;     232 	if(!MATERIAL)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",232
000002DE 58EE                    		MOVU.B [R14], R14
000002E0 682E                    		SHLR #02H, R14
000002E2 7C0E                    		BTST #00H, R14
000002E4 21rr                    		BNE L87
000002E6 2Err                 B  		BRA L88
000002E8                         L80:	; bb7
                                 ;     233 	{
                                 ;     234 	    IR(ICU, IRQ2)  = 0;            //Clear any previously pending interrupts
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",234
000002E8 FBEE427008              		MOV.L #00087042H, R14
000002ED F0E8                    		BCLR #00H, [R14].B
000002EF                         L81:	; bb7.split
                                 ;     235 	    IEN(ICU, IRQ2) = 1;            // Enable interrupt
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",235
000002EF FBEE427008              		MOV.L #00087042H, R14
000002F4 F2E2C601                		BSET #02H, 01C6H[R14].B
000002F8                         L82:	; bb7.split1
                                 ;     236 	    ritorno(cm_straight_feed(pb.target, pb.flags));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",236
000002F8 FB12rrrrrrrr            		MOV.L #__$pb, R1
000002FE 711254                  		ADD #54H, R1, R2
00000301 71113C                  		ADD #3CH, R1
00000304 05rrrrrr             A  		BSR _cm_straight_feed
00000308 FBE2rrrrrrrr            		MOV.L #_status_code, R14
0000030E C3E1                    		MOV.B R1, [R14]
00000310 6101                    		CMP #00H, R1
00000312 20rr                    		BEQ L90
00000314                         L83:	; bb15
00000314 FBE2rrrrrrrr            		MOV.L #_status_code, R14
0000031A C4E006                  		MOV.B [R14], 06H[R0]
0000031D 2Err                 B  		BRA L91
0000031F                         L84:	; bb24
                                 ;     237 	}
                                 ;     238 	else
                                 ;     239 	{
                                 ;     240 		uint32_t qSend = MATERIAL_FAILED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",240
0000031F F90E020000FD            		MOV.L #0FFFD0000H, 08H[R0]
00000325                         L85:	; bb24.split
                                 ;     241 		xQueueSend( qKeyboard, &qSend, 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",241
00000325 FBE2rrrrrrrr            		MOV.L #_qKeyboard, R14
0000032B ECE1                    		MOV.L [R14], R1
0000032D 6603                    		MOV.L #00000000H, R3
0000032F 710208                  		ADD #08H, R0, R2
00000332 EF34                    		MOV.L R3, R4
00000334 05rrrrrr             A  		BSR _xQueueGenericSend
00000338                         L86:	; bb24.split2
                                 ;     242 		macro_func_ptr = command_idle;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",242
00000338 FBE2rrrrrrrr            		MOV.L #_macro_func_ptr, R14
0000033E FBF2rrrrrrrr            		MOV.L #_command_idle, R15
00000344 E3EF                    		MOV.L R15, [R14]
00000346 2Err                 B  		BRA L90
00000348                         L87:	; bb34
00000348 F80600                  		MOV.L #00000000H, [R0]
0000034B 08                   S  		BRA L89
0000034C                         L88:	; bb35
0000034C F80601                  		MOV.L #00000001H, [R0]
0000034F                         L89:	; bb36
0000034F EC01                    		MOV.L [R0], R1
00000351 6101                    		CMP #00H, R1
00000353 21rr                    		BNE L80
00000355 2Err                 B  		BRA L84
00000357                         L90:	; bb40
                                 ;     243 	}
                                 ;     244 	return (_set_pb_func(_probing_finish));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",244
00000357 FB12rrrrrrrr            		MOV.L #__$_probing_finish, R1
0000035D 39rrrr               W  		BSR __set_pb_func
00000360 8181                    		MOV.B R1, 06H[R0]
00000362                         L91:	; bb43
00000362 C500060F                		MOV.B 06H[R0], 0FH[R0]
                                 ;     245 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",245
00000366 B389                    		MOVU.B 0FH[R0], R1
00000368 6704                    		RTSD #10H
0000036A                         __$_probing_finish:
                                 		.STACK	__$_probing_finish=20
                                 ;     246 
                                 ;     247 /*
                                 ;     248  * _probing_finish()
                                 ;     249  */
                                 ;     250 
                                 ;     251 static stat_t _probing_finish()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",251
0000036A 6E67                    		PUSHM R6-R7
0000036C 6080                    		SUB #08H, R0
                                 ;     252 {
                                 ;     253 #ifndef __NEW_SWITCHES
                                 ;     254 	int8_t probe = sw.state[pb.probe_switch];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",254
0000036E FB12rrrrrrrr            		MOV.L #_sw, R1
00000374 FBE2rrrrrrrr            		MOV.L #__$pb, R14
0000037A 49E104                  		ADD 04H[R14].UB, R1
0000037D C5100305                		MOV.B 03H[R1], 05H[R0]
00000381                         L93:	; entry.split
                                 ;     255 #else
                                 ;     256 	int8_t probe = read_switch(pb.probe_switch_axis, pb.probe_switch_position);
                                 ;     257 #endif
                                 ;     258 	cm.probe_state = (probe==SW_CLOSED) ? PROBE_SUCCEEDED : PROBE_FAILED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",258
00000381 8909                    		MOV.B 05H[R0], R1
00000383 6111                    		CMP #01H, R1
00000385 18                   S  		BNE L95
00000386                         L94:	; bb
00000386 F80601                  		MOV.L #00000001H, [R0]
00000389 08                   S  		BRA L96
0000038A                         L95:	; bb11
0000038A F80600                  		MOV.L #00000000H, [R0]
0000038D                         L96:	; bb12
0000038D EC01                    		MOV.L [R0], R1
0000038F FBE2rrrrrrrr            		MOV.L #_cm, R14
00000395 CBE12802                		MOV.B R1, 0228H[R14]
                                 ;     259 
                                 ;     260 	for( uint8_t axis=0; axis<AXES; axis++ ) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",260
00000399 3C0600                  		MOV.B #00H, 06H[R0]
0000039C 2Err                 B  		BRA L99
0000039E                         L97:	; bb15
                                 ;     261 		// if we got here because of a feed hold we need to keep the model position correct
                                 ;     262 		cm_set_position(axis, mp_get_runtime_work_position(axis));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",262
0000039E B186                    		MOVU.B 06H[R0], R6
000003A0 EF61                    		MOV.L R6, R1
000003A2 05rrrrrr             A  		BSR _mp_get_runtime_work_position
000003A6 EF12                    		MOV.L R1, R2
000003A8 EF61                    		MOV.L R6, R1
000003AA 05rrrrrr             A  		BSR _cm_set_position
000003AE                         L98:	; bb15.split
                                 ;     263 
                                 ;     264 		// store the probe results
                                 ;     265 		cm.probe_results[axis] = cm_get_absolute_position(ACTIVE_MODEL, axis);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",265
000003AE FB62rrrrrrrr            		MOV.L #_cm, R6
000003B4 ED6194                  		MOV.L 0250H[R6], R1
000003B7 B187                    		MOVU.B 06H[R0], R7
000003B9 EF72                    		MOV.L R7, R2
000003BB 05rrrrrr             A  		BSR _cm_get_absolute_position
000003BF 6C27                    		SHLL #02H, R7
000003C1 4B76                    		ADD R7, R6
000003C3 E7618B                  		MOV.L R1, 022CH[R6]
000003C6 B181                    		MOVU.B 06H[R0], R1
000003C8 6211                    		ADD #01H, R1
000003CA 8181                    		MOV.B R1, 06H[R0]
000003CC                         L99:	; bb27
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",260
000003CC B181                    		MOVU.B 06H[R0], R1
000003CE 6161                    		CMP #06H, R1
000003D0 29rr                    		BLT L97
000003D2                         L100:	; bb33
                                 ;     266 	}
                                 ;     267 
                                 ;     268 	json_parser("{\"prb\":null}"); // TODO: verify that this is OK to do...
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",268
000003D2 FB12rrrrrrrr            		MOV.L #_L10, R1
000003D8 05rrrrrr             A  		BSR _json_parser
000003DC                         L101:	; bb33.split
                                 ;     269 	// printf_P(PSTR("{\"prb\":{\"e\":%i"), (int)cm.probe_state);
                                 ;     270 	// if (pb.flags[AXIS_X]) printf_P(PSTR(",\"x\":%0.3f"), cm.probe_results[AXIS_X]);
                                 ;     271 	// if (pb.flags[AXIS_Y]) printf_P(PSTR(",\"y\":%0.3f"), cm.probe_results[AXIS_Y]);
                                 ;     272 	// if (pb.flags[AXIS_Z]) printf_P(PSTR(",\"z\":%0.3f"), cm.probe_results[AXIS_Z]);
                                 ;     273 	// if (pb.flags[AXIS_A]) printf_P(PSTR(",\"a\":%0.3f"), cm.probe_results[AXIS_A]);
                                 ;     274 	// if (pb.flags[AXIS_B]) printf_P(PSTR(",\"b\":%0.3f"), cm.probe_results[AXIS_B]);
                                 ;     275 	// if (pb.flags[AXIS_C]) printf_P(PSTR(",\"c\":%0.3f"), cm.probe_results[AXIS_C]);
                                 ;     276 	// printf_P(PSTR("}}\n"));
                                 ;     277 
                                 ;     278 	return (_set_pb_func(_probing_finalize_exit));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",278
000003DC FB12rrrrrrrr            		MOV.L #__$_probing_finalize_exit, R1
000003E2 39rrrr               W  		BSR __set_pb_func
000003E5 8189                    		MOV.B R1, 07H[R0]
000003E7 B189                    		MOVU.B 07H[R0], R1
000003E9                         L102:	; bb33.split1
                                 ;     279 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",279
000003E9 5B11                    		MOVU.B R1, R1
000003EB 3F6704                  		RTSD #10H, R6-R7
000003EE                         __probe_restore_settings:
                                 		.STACK	__probe_restore_settings=8
                                 ;     280 
                                 ;     281 /*
                                 ;     282  * _probe_restore_settings()
                                 ;     283  * _probing_finalize_exit()
                                 ;     284  * _probing_error_exit()
                                 ;     285  */
                                 ;     286 
                                 ;     287 void _probe_restore_settings()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",287
000003EE 6040                    		SUB #04H, R0
                                 ;     288 {
                                 ;     289 	mp_flush_planner(); 						// we should be stopped now, but in case of switch closure
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",289
000003F0 05rrrrrr             A  		BSR _mp_flush_planner
000003F4                         L104:	; entry.split
                                 ;     290 
                                 ;     291 #ifndef __NEW_SWITCHES // restore switch settings (old style)
                                 ;     292 	sw.switch_type = pb.saved_switch_type;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",292
000003F4 FBE2rrrrrrrr            		MOV.L #_sw, R14
000003FA FBF2rrrrrrrr            		MOV.L #__$pb, R15
00000400 C1FE05                  		MOV.B 05H[R15], [R14]
00000403                         L105:	; entry.split1
                                 ;     293 	sw.mode[pb.probe_switch] = pb.saved_switch_mode;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",293
00000403 FBE2rrrrrrrr            		MOV.L #__$pb, R14
00000409 FBF2rrrrrrrr            		MOV.L #_sw, R15
0000040F 49EF04                  		ADD 04H[R14].UB, R15
00000412 C5EF060B                		MOV.B 06H[R14], 0BH[R15]
00000416                         L106:	; entry.split2
                                 ;     294 	switch_init();								// re-init to pick up changes
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",294
00000416 05rrrrrr             A  		BSR _switch_init
0000041A                         L107:	; entry.split3
                                 ;     295 #else // restore switch settings (new style)
                                 ;     296 	sw.s[pb.probe_switch_axis][pb.probe_switch_position].mode = pb.saved_switch_mode;
                                 ;     297 	sw.s[pb.probe_switch_axis][pb.probe_switch_position].type = pb.saved_switch_type;
                                 ;     298 	switch_init();								// re-init to pick up changes
                                 ;     299 #endif
                                 ;     300 
                                 ;     301 	// restore axis jerk
                                 ;     302 	for( uint8_t axis=0; axis<AXES; axis++ )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",302
0000041A 3C0300                  		MOV.B #00H, 03H[R0]
0000041D 2Err                 B  		BRA L109
0000041F                         L108:	; bb
                                 ;     303 		cm_set_axis_jerk(axis, pb.saved_jerk[axis]);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",303
0000041F B089                    		MOVU.B 03H[R0], R1
00000421 FDC21E                  		SHLL #02H, R1, R14
00000424 FB22rrrrrrrr            		MOV.L #__$pb, R2
0000042A 4BE2                    		ADD R14, R2
0000042C A8AA                    		MOV.L 0CH[R2], R2
0000042E 05rrrrrr             A  		BSR _cm_set_axis_jerk
00000432 B089                    		MOVU.B 03H[R0], R1
00000434 6211                    		ADD #01H, R1
00000436 8089                    		MOV.B R1, 03H[R0]
00000438                         L109:	; bb13
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",302
00000438 B089                    		MOVU.B 03H[R0], R1
0000043A 6161                    		CMP #06H, R1
0000043C 29rr                    		BLT L108
0000043E                         L110:	; bb18
                                 ;     304 
                                 ;     305 	// restore coordinate system and distance mode
                                 ;     306 	cm_set_coord_system(pb.saved_coord_system);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",306
0000043E FB12rrrrrrrr            		MOV.L #__$pb, R1
00000444 B211                    		MOVU.B 08H[R1], R1
00000446 05rrrrrr             A  		BSR _cm_set_coord_system
0000044A                         L111:	; bb18.split
                                 ;     307 	cm_set_distance_mode(pb.saved_distance_mode);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",307
0000044A FB12rrrrrrrr            		MOV.L #__$pb, R1
00000450 B199                    		MOVU.B 07H[R1], R1
00000452 05rrrrrr             A  		BSR _cm_set_distance_mode
00000456                         L112:	; bb18.split4
                                 ;     308 
                                 ;     309 	// update the model with actual position
                                 ;     310 	cm_set_motion_mode(MODEL, MOTION_MODE_CANCEL_MOTION_MODE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",310
00000456 FB12rrrrrrrr            		MOV.L #_cm, R1
0000045C 72115402                		ADD #0254H, R1
00000460 6642                    		MOV.L #00000004H, R2
00000462 05rrrrrr             A  		BSR _cm_set_motion_mode
00000466                         L113:	; bb18.split5
                                 ;     311 	cm_cycle_end();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",311
00000466 05rrrrrr             A  		BSR _cm_cycle_end
0000046A                         L114:	; bb18.split6
                                 ;     312 	cm.cycle_state = CYCLE_OFF;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",312
0000046A FBE2rrrrrrrr            		MOV.L #_cm, R14
00000470 FAE41E0200              		MOV.B #00H, 021EH[R14]
00000475 6701                    		RTSD #04H
00000477                         __$_probing_finalize_exit:
                                 		.STACK	__$_probing_finalize_exit=8
                                 ;     313 }
                                 ;     314 
                                 ;     315 static stat_t _probing_finalize_exit()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",315
00000477 6040                    		SUB #04H, R0
                                 ;     316 {
                                 ;     317 	_probe_restore_settings();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",317
00000479 39rrrr               W  		BSR __probe_restore_settings
0000047C                         L116:	; entry.split
                                 ;     318 	zinhibitor = false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",318
0000047C FBE2rrrrrrrr            		MOV.L #_zinhibitor, R14
00000482 F8E400                  		MOV.B #00H, [R14]
00000485                         L117:	; entry.split1
                                 ;     319 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",319
00000485 3C0300                  		MOV.B #00H, 03H[R0]
00000488 B089                    		MOVU.B 03H[R0], R1
0000048A                         L118:	; entry.split2
                                 ;     320 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",320
0000048A 5B11                    		MOVU.B R1, R1
0000048C 6701                    		RTSD #04H
0000048E                         __$_probing_error_exit:
                                 		.STACK	__$_probing_error_exit=144
                                 ;     321 
                                 ;     322 static stat_t _probing_error_exit(int8_t axis)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",322
0000048E 72007CFF                		ADD #0FFFFFF7CH, R0
00000492 C70183                  		MOV.B R1, 83H[R0]
                                 ;     323 {
                                 ;     324 	// Generate the warning message. Since the error exit returns via the probing callback
                                 ;     325 	// - and not the main controller - it requires its own display processing
                                 ;     326 	nv_reset_nv_list();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",326
00000495 05rrrrrr             A  		BSR _nv_reset_nv_list
00000499                         L120:	; entry.split
                                 ;     327 	if (axis == -2) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",327
00000499 CD0183                  		MOV.B 83H[R0], R1
0000049C 7501FE                  		CMP #0FFFFFFFEH, R1
0000049F 21rr                    		BNE L122
000004A1                         L121:	; bb4
                                 ;     328 		nv_add_conditional_message((const char_t *)"Probing error - invalid probe destination");
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",328
000004A1 FB12rrrrrrrr            		MOV.L #_L11, R1
000004A7 05rrrrrr             A  		BSR _nv_add_conditional_message
000004AB 2Err                 B  		BRA L124
000004AD                         L122:	; bb6
                                 ;     329 	} else {
                                 ;     330 		char message[NV_MESSAGE_LEN];
                                 ;     331 		sprintf_P(message, PSTR("Probing error - %c axis cannot move during probing"), cm_get_axis_char(axis));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",331
000004AD CD0183                  		MOV.B 83H[R0], R1
000004B0 05rrrrrr             A  		BSR _cm_get_axis_char
000004B4 6080                    		SUB #08H, R0
000004B6 FBE2rrrrrrrr            		MOV.L #_L12, R14
000004BC E30E                    		MOV.L R14, [R0]
000004BE A009                    		MOV.L R1, 04H[R0]
000004C0 71010A                  		ADD #0AH, R0, R1
000004C3 05rrrrrr             A  		BSR _sprintf
000004C7 6280                    		ADD #08H, R0
000004C9                         L123:	; bb6.split
000004C9 710102                  		ADD #02H, R0, R1
                                 ;     332 		nv_add_conditional_message((char_t *)message);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",332
000004CC 05rrrrrr             A  		BSR _nv_add_conditional_message
000004D0                         L124:	; bb18
000004D0 6622                    		MOV.L #00000002H, R2
000004D2 7541FA                  		MOV.L #000000FAH, R1
                                 ;     333 	}
                                 ;     334 	nv_print_list(STAT_PROBE_CYCLE_FAILED, TEXT_INLINE_VALUES, JSON_RESPONSE_FORMAT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",334
000004D5 EF23                    		MOV.L R2, R3
000004D7 05rrrrrr             A  		BSR _nv_print_list
000004DB                         L125:	; bb18.split
                                 ;     335 
                                 ;     336 	// clean up and exit
                                 ;     337 	_probe_restore_settings();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",337
000004DB 39rrrr               W  		BSR __probe_restore_settings
000004DE                         L126:	; bb18.split1
                                 ;     338 	return (STAT_PROBE_CYCLE_FAILED);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",338
000004DE F90482FA                		MOV.B #0FAH, 82H[R0]
000004E2 590182                  		MOVU.B 82H[R0], R1
000004E5                         L127:	; bb18.split2
                                 ;     339 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_probing.c",339
000004E5 5B11                    		MOVU.B R1, R1
000004E7 6721                    		RTSD #84H
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 7B                      		.byte	"{"
00000001 22                      		.byte	22H
00000002 707262                  		.byte	"prb"
00000005 22                      		.byte	22H
00000006 3A6E756C                		.byte	":null}"
         6C7D                    
0000000C 00                      		.byte	00H
0000000D                         _L11:
0000000D 50726F62                		.byte	"Probing error - invalid probe destination"
         696E6720                
         6572726F                
         72202D20                
         696E7661                
         6C696420                
         70726F62                
         65206465                
         7374696E                
         6174696F                
         6E                      
00000036 00                      		.byte	00H
00000037                         _L12:
00000037 50726F62                		.byte	"Probing error - %c axis cannot move during probing"
         696E6720                
         6572726F                
         72202D20                
         25632061                
         78697320                
         63616E6E                
         6F74206D                
         6F766520                
         64757269                
         6E672070                
         726F6269                
         6E67                    
00000069 00                      		.byte	00H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         __$pb:
00000000(0000006CH)              		.blkl	27
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     01040   LINES

Section List

Attr         Size               Name
CODE     0000001257(000004E9H)  P
ROMDATA  0000000106(0000006AH)  L
DATA     0000000108(0000006CH)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx7E87\$ccrx\cycle_probing.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\Mobile_build\cycle_probing.lst
-output=C:\Workspace\e2studio\git\MT01\Mobile_build\src\cnc\cycle_probing.obj
