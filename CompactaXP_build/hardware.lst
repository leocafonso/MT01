* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Thu Mar 09 14:18:37 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  09-Mar-2017 14:18:37
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=hardware.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=hardware.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=1,EASYMAK=0,MOBILE=0,FREE_RTOS_PP
                                 ;hardware.c
                                 
                                 		.glb	_status_code
                                 		.glb	_cs
                                 		.glb	_timerDwell
                                 		.glb	_timerMotorPower
                                 		.glb	_hardware_init
                                 		.glb	_hw_request_hard_reset
                                 		.glb	_hw_hard_reset
                                 		.glb	_hw_hard_reset_handler
                                 		.glb	_hw_request_bootloader
                                 		.glb	_hw_bootloader_handler
                                 		.glb	_hw_get_id
                                 		.glb	_nv_copy_string
                                 		.glb	_hw_run_boot
                                 		.glb	_hw_set_hv
                                 		.glb	_set_flt
                                 		.glb	_switch_init
                                 		.glb	_hw_print_fb
                                 		.glb	_text_print_flt
                                 		.glb	_hw_print_fv
                                 		.glb	_hw_print_hp
                                 		.glb	_hw_print_hv
                                 		.glb	_hw_print_id
                                 		.glb	_text_print_str
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         __$_port_bindings:
                                 		.STACK	__$_port_bindings=8
                                 ;       1 /*
                                 ;       2  * hardware.c - general hardware support functions
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * As a special exception, you may use this file as part of a software library without
                                 ;      13  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      14  * inline functions from this file, or you compile this file and link it with  other
                                 ;      15  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      16  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      17  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      18  * GNU General Public License.
                                 ;      19  *
                                 ;      20  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      21  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      22  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      23  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      24  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      25  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      26  */
                                 ;      27 
                                 ;      28 #ifdef __AVR
                                 ;      29 #include <avr/wdt.h>			// used for software reset
                                 ;      30 #endif
                                 ;      31 
                                 ;      32 #include "tinyg.h"		// #1
                                 ;      33 #include "config.h"		// #2
                                 ;      34 #include "hardware.h"
                                 ;      35 #include "switch.h"
                                 ;      36 #include "controller.h"
                                 ;      37 #include "text_parser.h"
                                 ;      38 #ifdef __AVR
                                 ;      39 #include "xmega/xmega_init.h"
                                 ;      40 #include "xmega/xmega_rtc.h"
                                 ;      41 #endif
                                 ;      42 
                                 ;      43 #ifdef __cplusplus
                                 ;      44 extern "C"{
                                 ;      45 #endif
                                 ;      46 
                                 ;      47 uint32_t timerDwell;
                                 ;      48 uint32_t timerMotorPower;
                                 ;      49 /*
                                 ;      50 uint32_t timerLoad;
                                 ;      51  * _port_bindings  - bind XMEGA ports to hardware - these changed at board revision 7
                                 ;      52  * hardware_init() - lowest level hardware init
                                 ;      53  */
                                 ;      54 
                                 ;      55 static void _port_bindings(float hw_version)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",55
00000000 6040                    		SUB #04H, R0
00000002 E301                    		MOV.L R1, [R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",80
00000004 6701                    		RTSD #04H
00000006                         _hardware_init:
                                 		.STACK	_hardware_init=4
                                 ;      56 {
                                 ;      57 #ifdef __AVR
                                 ;      58 	hw.st_port[0] = &PORT_MOTOR_1;
                                 ;      59 	hw.st_port[1] = &PORT_MOTOR_2;
                                 ;      60 	hw.st_port[2] = &PORT_MOTOR_3;
                                 ;      61 	hw.st_port[3] = &PORT_MOTOR_4;
                                 ;      62 
                                 ;      63 	hw.sw_port[0] = &PORT_SWITCH_X;
                                 ;      64 	hw.sw_port[1] = &PORT_SWITCH_Y;
                                 ;      65 	hw.sw_port[2] = &PORT_SWITCH_Z;
                                 ;      66 	hw.sw_port[3] = &PORT_SWITCH_A;
                                 ;      67 
                                 ;      68 	if (hw_version > 6.9) {
                                 ;      69 		hw.out_port[0] = &PORT_OUT_V7_X;
                                 ;      70 		hw.out_port[1] = &PORT_OUT_V7_Y;
                                 ;      71 		hw.out_port[2] = &PORT_OUT_V7_Z;
                                 ;      72 		hw.out_port[3] = &PORT_OUT_V7_A;
                                 ;      73 		} else {
                                 ;      74 		hw.out_port[0] = &PORT_OUT_V6_X;
                                 ;      75 		hw.out_port[1] = &PORT_OUT_V6_Y;
                                 ;      76 		hw.out_port[2] = &PORT_OUT_V6_Z;
                                 ;      77 		hw.out_port[3] = &PORT_OUT_V6_A;
                                 ;      78 	}
                                 ;      79 #endif
                                 ;      80 }
                                 ;      81 
                                 ;      82 void hardware_init()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",82
00000006 02                      		RTS
00000007                         __$_get_id:
                                 		.STACK	__$_get_id=8
                                 ;      83 {
                                 ;      84 #ifdef __AVR
                                 ;      85 	xmega_init();							// set system clock
                                 ;      86 	_port_bindings(TINYG_HARDWARE_VERSION);
                                 ;      87 	rtc_init();								// real time counter
                                 ;      88 #endif
                                 ;      89 }
                                 ;      90 
                                 ;      91 /*
                                 ;      92  * _get_id() - get a human readable signature
                                 ;      93  *
                                 ;      94  * FOR AVR:
                                 ;      95  *	Produce a unique deviceID based on the factory calibration data.
                                 ;      96  *		Format is: 123456-ABC
                                 ;      97  *
                                 ;      98  *	The number part is a direct readout of the 6 digit lot number
                                 ;      99  *	The alpha is the low 5 bits of wafer number and XY coords in printable ASCII
                                 ;     100  *	Refer to NVM_PROD_SIGNATURES_t in iox192a3.h for details.
                                 ;     101  *
                                 ;     102  * FOR ARM:
                                 ;     103  *	Currently not implemented
                                 ;     104  */
                                 ;     105 
                                 ;     106 /* UNUSED
                                 ;     107 static uint8_t _read_calibration_byte(uint8_t index)
                                 ;     108 {
                                 ;     109 	NVM_CMD = NVM_NV_READ_CALIB_ROW_gc; 	// Load NVM Command register to read the calibration row
                                 ;     110 	uint8_t result = pgm_read_byte(index);
                                 ;     111 	NVM_CMD = NVM_NV_NO_OPERATION_gc; 	 	// Clean up NVM Command register
                                 ;     112 	return(result);
                                 ;     113 }
                                 ;     114 */
                                 ;     115 
                                 ;     116 enum {
                                 ;     117 	LOTNUM0=8,  // Lot Number Byte 0, ASCII
                                 ;     118 	LOTNUM1,    // Lot Number Byte 1, ASCII
                                 ;     119 	LOTNUM2,    // Lot Number Byte 2, ASCII
                                 ;     120 	LOTNUM3,    // Lot Number Byte 3, ASCII
                                 ;     121 	LOTNUM4,    // Lot Number Byte 4, ASCII
                                 ;     122 	LOTNUM5,    // Lot Number Byte 5, ASCII
                                 ;     123 	WAFNUM =16, // Wafer Number
                                 ;     124 	COORDX0=18, // Wafer Coordinate X Byte 0
                                 ;     125 	COORDX1,    // Wafer Coordinate X Byte 1
                                 ;     126 	COORDY0,    // Wafer Coordinate Y Byte 0
                                 ;     127 	COORDY1,    // Wafer Coordinate Y Byte 1
                                 ;     128 };
                                 ;     129 
                                 ;     130 static void _get_id(char_t *id)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",130
00000007 6040                    		SUB #04H, R0
00000009 E301                    		MOV.L R1, [R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",151
0000000B 6701                    		RTSD #04H
0000000D                         _hw_request_hard_reset:
                                 		.STACK	_hw_request_hard_reset=4
                                 ;     131 {
                                 ;     132 #ifdef __AVR
                                 ;     133 	char printable[33] = {"ABCDEFGHJKLMNPQRSTUVWXYZ23456789"};
                                 ;     134 	uint8_t i;
                                 ;     135 
                                 ;     136 	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc; 	// Load NVM Command register to read the calibration row
                                 ;     137 
                                 ;     138 	for (i=0; i<6; i++) {
                                 ;     139 		id[i] = pgm_read_byte(LOTNUM0 + i);
                                 ;     140 	}
                                 ;     141 	id[i++] = '-';
                                 ;     142 	id[i++] = printable[(pgm_read_byte(WAFNUM) & 0x1F)];
                                 ;     143 	id[i++] = printable[(pgm_read_byte(COORDX0) & 0x1F)];
                                 ;     144 //	id[i++] = printable[(pgm_read_byte(COORDX1) & 0x1F)];
                                 ;     145 	id[i++] = printable[(pgm_read_byte(COORDY0) & 0x1F)];
                                 ;     146 //	id[i++] = printable[(pgm_read_byte(COORDY1) & 0x1F)];
                                 ;     147 	id[i] = 0;
                                 ;     148 
                                 ;     149 	NVM_CMD = NVM_CMD_NO_OPERATION_gc; 	 	// Clean up NVM Command register
                                 ;     150 #endif
                                 ;     151 }
                                 ;     152 
                                 ;     153 /*
                                 ;     154  * Hardware Reset Handlers
                                 ;     155  *
                                 ;     156  * hw_request_hard_reset()
                                 ;     157  * hw_hard_reset()			- hard reset using watchdog timer
                                 ;     158  * hw_hard_reset_handler()	- controller's rest handler
                                 ;     159  */
                                 ;     160 void hw_request_hard_reset() { cs.hard_reset_requested = true; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",160
0000000D FBE2rrrrrrrr            		MOV.L #_cs, R14
00000013 F9E42C01                		MOV.B #01H, 2CH[R14]
00000017 02                      		RTS
00000018                         _hw_hard_reset:
                                 		.STACK	_hw_hard_reset=4
00000018                         L15:	; bb1
                                 ;     161 
                                 ;     162 void hw_hard_reset(void)			// software hard reset using the watchdog timer
                                 ;     163 {
                                 ;     164 #ifdef __AVR
                                 ;     165 	wdt_enable(WDTO_15MS);
                                 ;     166 	while (true);					// loops for about 15ms then resets
                                 ;     167 #endif
                                 ;     168 #ifdef __RX
                                 ;     169 	/* TODO */
                                 ;     170 	while (true);					// loops for about 15ms then resets
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",170
00000018 2Err                 B  		BRA L15
0000001A                         _hw_hard_reset_handler:
                                 		.STACK	_hw_hard_reset_handler=8
                                 ;     171 #endif
                                 ;     172 }
                                 ;     173 
                                 ;     174 stat_t hw_hard_reset_handler(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",174
0000001A 6040                    		SUB #04H, R0
                                 ;     175 {
                                 ;     176 	if (cs.hard_reset_requested == false)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",176
0000001C FBE2rrrrrrrr            		MOV.L #_cs, R14
00000022 59EE2C                  		MOVU.B 2CH[R14], R14
00000025 610E                    		CMP #00H, R14
00000027 18                   S  		BNE L18
00000028                         L17:	; bb1
                                 ;     177         return (STAT_NOOP);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",177
00000028 3C0203                  		MOV.B #03H, 02H[R0]
0000002B 08                   S  		BRA L20
0000002C                         L18:	; bb7
                                 ;     178 	hw_hard_reset();				// hard reset - identical to hitting RESET button
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",178
0000002C 39rrrr               W  		BSR _hw_hard_reset
0000002F                         L19:	; bb7.split
                                 ;     179 	return (STAT_EAGAIN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",179
0000002F 3C0202                  		MOV.B #02H, 02H[R0]
00000032                         L20:	; bb9
00000032 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     180 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",180
00000036 B089                    		MOVU.B 03H[R0], R1
00000038 6701                    		RTSD #04H
0000003A                         _hw_request_bootloader:
                                 		.STACK	_hw_request_bootloader=4
                                 ;     181 
                                 ;     182 /*
                                 ;     183  * Bootloader Handlers
                                 ;     184  *
                                 ;     185  * hw_request_bootloader()
                                 ;     186  * hw_request_bootloader_handler() - executes a software reset using CCPWrite
                                 ;     187  */
                                 ;     188 
                                 ;     189 void hw_request_bootloader() { cs.bootloader_requested = true;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",189
0000003A FBE2rrrrrrrr            		MOV.L #_cs, R14
00000040 F9E42D01                		MOV.B #01H, 2DH[R14]
00000044 02                      		RTS
00000045                         _hw_bootloader_handler:
                                 		.STACK	_hw_bootloader_handler=8
                                 ;     190 
                                 ;     191 stat_t hw_bootloader_handler(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",191
00000045 6040                    		SUB #04H, R0
                                 ;     192 {
                                 ;     193 #ifdef __AVR
                                 ;     194 	if (cs.bootloader_requested == false)
                                 ;     195         return (STAT_NOOP);
                                 ;     196 	cli();
                                 ;     197 	CCPWrite(&RST.CTRL, RST_SWRST_bm);  // fire a software reset
                                 ;     198 #endif
                                 ;     199 	return (STAT_EAGAIN);				// never gets here but keeps the compiler happy
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",199
00000047 3C0302                  		MOV.B #02H, 03H[R0]
0000004A B089                    		MOVU.B 03H[R0], R1
0000004C                         L23:	; entry.split
                                 ;     200 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",200
0000004C 5B11                    		MOVU.B R1, R1
0000004E 6701                    		RTSD #04H
00000050                         _hw_get_id:
                                 		.STACK	_hw_get_id=28
                                 ;     201 
                                 ;     202 /***** END OF SYSTEM FUNCTIONS *****/
                                 ;     203 
                                 ;     204 
                                 ;     205 /***********************************************************************************
                                 ;     206  * CONFIGURATION AND INTERFACE FUNCTIONS
                                 ;     207  * Functions to get and set variables from the cfgArray table
                                 ;     208  ***********************************************************************************/
                                 ;     209 
                                 ;     210 /*
                                 ;     211  * hw_get_id() - get device ID (signature)
                                 ;     212  */
                                 ;     213 
                                 ;     214 stat_t hw_get_id(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",214
00000050 7100E8                  		ADD #0FFFFFFE8H, R0
00000053 A109                    		MOV.L R1, 14H[R0]
00000055 710103                  		ADD #03H, R0, R1
                                 ;     215 {
                                 ;     216 	char_t tmp[SYS_ID_LEN];
                                 ;     217 	_get_id(tmp);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",217
00000058 39rrrr               W  		BSR __$_get_id
0000005B                         L25:	; entry.split
                                 ;     218 	nv->valuetype = TYPE_STRING;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",218
0000005B A909                    		MOV.L 14H[R0], R1
0000005D 3C1B05                  		MOV.B #05H, 0BH[R1]
00000060                         L26:	; entry.split1
                                 ;     219 	ritorno(nv_copy_string(nv, tmp));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",219
00000060 A909                    		MOV.L 14H[R0], R1
00000062 710203                  		ADD #03H, R0, R2
00000065 05rrrrrr             A  		BSR _nv_copy_string
00000069 FBE2rrrrrrrr            		MOV.L #_status_code, R14
0000006F C3E1                    		MOV.B R1, [R14]
00000071 6101                    		CMP #00H, R1
00000073 20rr                    		BEQ L28
00000075                         L27:	; bb7
00000075 FBE2rrrrrrrr            		MOV.L #_status_code, R14
0000007B C4E002                  		MOV.B [R14], 02H[R0]
0000007E 08                   S  		BRA L29
0000007F                         L28:	; bb17
                                 ;     220 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",220
0000007F 3C0200                  		MOV.B #00H, 02H[R0]
00000082                         L29:	; bb19
00000082 C5000213                		MOV.B 02H[R0], 13H[R0]
                                 ;     221 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",221
00000086 B489                    		MOVU.B 13H[R0], R1
00000088 6706                    		RTSD #18H
0000008A                         _hw_run_boot:
                                 		.STACK	_hw_run_boot=12
                                 ;     222 
                                 ;     223 /*
                                 ;     224  * hw_run_boot() - invoke boot form the cfgArray
                                 ;     225  */
                                 ;     226 stat_t hw_run_boot(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",226
0000008A 6080                    		SUB #08H, R0
0000008C A009                    		MOV.L R1, 04H[R0]
                                 ;     227 {
                                 ;     228 	hw_request_bootloader();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",228
0000008E 39rrrr               W  		BSR _hw_request_bootloader
00000091                         L31:	; entry.split
                                 ;     229 	return(STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",229
00000091 3C0300                  		MOV.B #00H, 03H[R0]
00000094 B089                    		MOVU.B 03H[R0], R1
00000096                         L32:	; entry.split1
                                 ;     230 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",230
00000096 5B11                    		MOVU.B R1, R1
00000098 6702                    		RTSD #08H
0000009A                         _hw_set_hv:
                                 		.STACK	_hw_set_hv=12
                                 ;     231 
                                 ;     232 /*
                                 ;     233  * hw_set_hv() - set hardware version number
                                 ;     234  */
                                 ;     235 stat_t hw_set_hv(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",235
0000009A 6080                    		SUB #08H, R0
0000009C A009                    		MOV.L R1, 04H[R0]
0000009E FBE200000041            		MOV.L #41000000H, R14
                                 ;     236 {
                                 ;     237 	if (nv->value > TINYG_HARDWARE_VERSION_MAX)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",237
000000A4 FC851E04                		FCMP 10H[R1].L, R14
000000A8 26rr                    		BPZ L35
000000AA                         L34:	; bb2
                                 ;     238         return (STAT_INPUT_EXCEEDS_MAX_VALUE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",238
000000AA 3C026D                  		MOV.B #6DH, 02H[R0]
000000AD 2Err                 B  		BRA L39
000000AF                         L35:	; bb9
                                 ;     239 	set_flt(nv);					// record the hardware version
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",239
000000AF A809                    		MOV.L 04H[R0], R1
000000B1 05rrrrrr             A  		BSR _set_flt
000000B5                         L36:	; bb9.split
                                 ;     240 	_port_bindings(nv->value);		// reset port bindings
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",240
000000B5 A809                    		MOV.L 04H[R0], R1
000000B7 A911                    		MOV.L 10H[R1], R1
000000B9 39rrrr               W  		BSR __$_port_bindings
000000BC                         L37:	; bb9.split1
                                 ;     241 	switch_init();					// re-initialize the GPIO ports
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",241
000000BC 05rrrrrr             A  		BSR _switch_init
000000C0                         L38:	; bb9.split2
                                 ;     242 //++++	gpio_init();				// re-initialize the GPIO ports
                                 ;     243 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",243
000000C0 3C0200                  		MOV.B #00H, 02H[R0]
000000C3                         L39:	; bb16
000000C3 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     244 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",244
000000C7 B089                    		MOVU.B 03H[R0], R1
000000C9 6702                    		RTSD #08H
000000CB                         _hw_print_fb:
                                 		.STACK	_hw_print_fb=8
                                 ;     245 
                                 ;     246 /***********************************************************************************
                                 ;     247  * TEXT MODE SUPPORT
                                 ;     248  * Functions to print variables from the cfgArray table
                                 ;     249  ***********************************************************************************/
                                 ;     250 
                                 ;     251 #ifdef __TEXT_MODE
                                 ;     252 
                                 ;     253 static const char fmt_fb[] PROGMEM = "[fb]  firmware build%18.2f\n";
                                 ;     254 static const char fmt_fv[] PROGMEM = "[fv]  firmware version%16.2f\n";
                                 ;     255 static const char fmt_hp[] PROGMEM = "[hp]  hardware platform%15.2f\n";
                                 ;     256 static const char fmt_hv[] PROGMEM = "[hv]  hardware version%16.2f\n";
                                 ;     257 static const char fmt_id[] PROGMEM = "[id]  TinyG ID%30s\n";
                                 ;     258 
                                 ;     259 void hw_print_fb(nvObj_t *nv) { text_print_flt(nv, fmt_fb);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",259
000000CB 6040                    		SUB #04H, R0
000000CD E301                    		MOV.L R1, [R0]
000000CF FB22rrrrrrrr            		MOV.L #__$fmt_fb, R2
000000D5 05rrrrrr             A  		BSR _text_print_flt
000000D9 6701                    		RTSD #04H
000000DB                         _hw_print_fv:
                                 		.STACK	_hw_print_fv=8
                                 ;     260 void hw_print_fv(nvObj_t *nv) { text_print_flt(nv, fmt_fv);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",260
000000DB 6040                    		SUB #04H, R0
000000DD E301                    		MOV.L R1, [R0]
000000DF FB22rrrrrrrr            		MOV.L #__$fmt_fv, R2
000000E5 05rrrrrr             A  		BSR _text_print_flt
000000E9 6701                    		RTSD #04H
000000EB                         _hw_print_hp:
                                 		.STACK	_hw_print_hp=8
                                 ;     261 void hw_print_hp(nvObj_t *nv) { text_print_flt(nv, fmt_hp);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",261
000000EB 6040                    		SUB #04H, R0
000000ED E301                    		MOV.L R1, [R0]
000000EF FB22rrrrrrrr            		MOV.L #__$fmt_hp, R2
000000F5 05rrrrrr             A  		BSR _text_print_flt
000000F9 6701                    		RTSD #04H
000000FB                         _hw_print_hv:
                                 		.STACK	_hw_print_hv=8
                                 ;     262 void hw_print_hv(nvObj_t *nv) { text_print_flt(nv, fmt_hv);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",262
000000FB 6040                    		SUB #04H, R0
000000FD E301                    		MOV.L R1, [R0]
000000FF FB22rrrrrrrr            		MOV.L #__$fmt_hv, R2
00000105 05rrrrrr             A  		BSR _text_print_flt
00000109 6701                    		RTSD #04H
0000010B                         _hw_print_id:
                                 		.STACK	_hw_print_id=8
                                 ;     263 void hw_print_id(nvObj_t *nv) { text_print_str(nv, fmt_id);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\hardware.c",263
0000010B 6040                    		SUB #04H, R0
0000010D E301                    		MOV.L R1, [R0]
0000010F FB22rrrrrrrr            		MOV.L #__$fmt_id, R2
00000115 05rrrrrr             A  		BSR _text_print_str
00000119 6701                    		RTSD #04H
                                 ;     264 
                                 ;     265 #endif //__TEXT_MODE
                                 ;     266 
                                 ;     267 #ifdef __cplusplus
                                 ;     268 }
                                 ;     269 #endif
                                 		.SECTION	C_1,ROMDATA
00000000                         __$fmt_fb:
00000000 5B66625D                		.byte	"[fb]  firmware build%18.2f"
         20206669                
         726D7761                
         72652062                
         75696C64                
         2531382E                
         3266                    
0000001A 0A00                    		.byte	0AH,00H
0000001C                         __$fmt_fv:
0000001C 5B66765D                		.byte	"[fv]  firmware version%16.2f"
         20206669                
         726D7761                
         72652076                
         65727369                
         6F6E2531                
         362E3266                
00000038 0A00                    		.byte	0AH,00H
0000003A                         __$fmt_hp:
0000003A 5B68705D                		.byte	"[hp]  hardware platform%15.2f"
         20206861                
         72647761                
         72652070                
         6C617466                
         6F726D25                
         31352E32                
         66                      
00000057 0A00                    		.byte	0AH,00H
00000059                         __$fmt_hv:
00000059 5B68765D                		.byte	"[hv]  hardware version%16.2f"
         20206861                
         72647761                
         72652076                
         65727369                
         6F6E2531                
         362E3266                
00000075 0A00                    		.byte	0AH,00H
00000077                         __$fmt_id:
00000077 5B69645D                		.byte	"[id]  TinyG ID%30s"
         20205469                
         6E794720                
         49442533                
         3073                    
00000089 0A00                    		.byte	0AH,00H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _timerDwell:
00000000(00000004H)              		.blkl	1
00000004                         _timerMotorPower:
00000004(00000004H)              		.blkl	1
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00531   LINES

Section List

Attr         Size               Name
CODE     0000000283(0000011BH)  P
ROMDATA  0000000139(0000008BH)  C_1
DATA     0000000008(00000008H)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\hardware.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\hardware.lst
-output=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\src\cnc\hardware.obj
