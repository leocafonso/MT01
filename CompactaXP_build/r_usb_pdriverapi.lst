* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Feb 28 14:07:27 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  28-Feb-2017 14:07:27
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=r_usb_pdriverapi.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=r_usb_pdriverapi.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=1,EASYMAK=0,MOBILE=0,FREE_RTOS_PP
                                 ;r_usb_pdriverapi.c
                                 
                                 		.glb	_R_usb_pstd_PcdTask
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _R_usb_pstd_PcdTask:
                                 		.STACK	_R_usb_pstd_PcdTask=8
                                 ;       1 /***********************************************************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No
                                 ;       4 * other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
                                 ;       5 * applicable laws, including copyright laws.
                                 ;       6 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
                                 ;       7 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY,
                                 ;       8 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM
                                 ;       9 * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
                                 ;      10 * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS
                                 ;      11 * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      12 * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of
                                 ;      13 * this software. By using this software, you agree to the additional terms and conditions found by accessing the
                                 ;      14 * following link:
                                 ;      15 * http://www.renesas.com/disclaimer
                                 ;      16 *
                                 ;      17 * Copyright (C) 2014(2015) Renesas Electronics Corporation. All rights reserved.
                                 ;      18 ***********************************************************************************************************************/
                                 ;      19 /***********************************************************************************************************************
                                 ;      20 * File Name    : r_usb_pdriverapi.c
                                 ;      21 * Description  : USB Peripheral Driver API code. PCD (Peripheral Control Driver)
                                 ;      22                : USB Function transfer level commands. 
                                 ;      23 ***********************************************************************************************************************/
                                 ;      24 /**********************************************************************************************************************
                                 ;      25 * History : DD.MM.YYYY Version Description
                                 ;      26 *         : 04.01.2014 1.00 First Release
                                 ;      27 *         : 30.01.2015 1.01    Added RX71M.
                                 ;      28 ***********************************************************************************************************************/
                                 ;      29 
                                 ;      30 
                                 ;      31 /******************************************************************************
                                 ;      32 Includes   <System Includes> , "Project Includes"
                                 ;      33 ******************************************************************************/
                                 ;      34 #include "r_usb_basic_if.h"
                                 ;      35 #include "r_usb_reg_access.h"
                                 ;      36 
                                 ;      37 
                                 ;      38 #if (USB_FUNCSEL_USBIP0_PP == USB_PERI_PP) || (USB_FUNCSEL_USBIP1_PP == USB_PERI_PP)
                                 ;      39 
                                 ;      40 /******************************************************************************
                                 ;      41 External variables and functions
                                 ;      42 ******************************************************************************/
                                 ;      43 extern  void        R_usb_cstd_UsbIpInit( USB_UTR_t *ptr, uint16_t usb_mode );
                                 ;      44 extern  void        R_usb_cstd_SetTaskPri(uint8_t tasknum, uint8_t pri);
                                 ;      45 
                                 ;      46 
                                 ;      47 /******************************************************************************
                                 ;      48 Renesas Abstracted Peripheral Driver API functions
                                 ;      49 ******************************************************************************/
                                 ;      50 
                                 ;      51 /******************************************************************************
                                 ;      52 Function Name   : R_usb_pstd_PcdOpen
                                 ;      53 Description     : Start PCD(Peripheral Control Driver) task (RTOS version)
                                 ;      54                 : Initialize pipe information (non-OS version).
                                 ;      55 Arguments       : USB_UTR_t *ptr : USB system internal structure. Selects channel.
                                 ;      56 Return value    : USB_ER_t       : Error info.
                                 ;      57 ******************************************************************************/
                                 ;      58 USB_ER_t R_usb_pstd_PcdOpen(USB_UTR_t *ptr)
                                 ;      59 {
                                 ;      60     uint16_t    i;
                                 ;      61 
                                 ;      62     R_usb_cstd_SetTaskPri(USB_PCD_TSK,  USB_PRI_0);
                                 ;      63 
                                 ;      64     for( i = USB_PIPE0; i <= USB_MAX_PIPE_NO; i++ )
                                 ;      65     {
                                 ;      66         usb_gpstd_StallPipe[i]  = USB_DONE;
                                 ;      67         usb_gcstd_Pipe[ptr->ip][i]      = (USB_UTR_t*)USB_NULL;
                                 ;      68     }
                                 ;      69 
                                 ;      70     return USB_E_OK;
                                 ;      71 }/* eof R_usb_pstd_PcdOpen */
                                 ;      72 
                                 ;      73 /******************************************************************************
                                 ;      74 Function Name   : R_usb_pstd_PcdClose
                                 ;      75 Description     : Stop PCD(Peripheral Control Driver) task
                                 ;      76 Arguments       : USB_UTR_t *ptr : Not used.
                                 ;      77 Return value    : USB_ER_t       : Error info.
                                 ;      78 ******************************************************************************/
                                 ;      79 USB_ER_t R_usb_pstd_PcdClose(USB_UTR_t *ptr)
                                 ;      80 {
                                 ;      81     return USB_E_OK;
                                 ;      82 }/* eof R_usb_pstd_PcdClose */
                                 ;      83 
                                 ;      84 /******************************************************************************
                                 ;      85 Function Name   : R_usb_pstd_TransferStart
                                 ;      86 Description     : Transfer the data of each pipe 
                                 ;      87                 : Request PCD to transfer data, and the PCD transfers the data 
                                 ;      88                   based on the transfer information stored in ptr
                                 ;      89 Arguments       : USB_UTR_t *ptr : keyword, msghead and msginfo are used for...  $REA
                                 ;      90 Return value    : USB_ER_t       : Error info.
                                 ;      91 ******************************************************************************/
                                 ;      92 USB_ER_t R_usb_pstd_TransferStart(USB_UTR_t *ptr)
                                 ;      93 {
                                 ;      94     USB_ER_t        err;
                                 ;      95     uint16_t        pipenum;
                                 ;      96 
                                 ;      97     pipenum = ptr->keyword;
                                 ;      98     if( usb_gcstd_Pipe[ptr->ip][pipenum] != USB_NULL )
                                 ;      99     {
                                 ;     100         /* Get PIPE TYPE */
                                 ;     101         if( usb_cstd_GetPipeType(ptr, pipenum) != USB_ISO )
                                 ;     102         {
                                 ;     103             USB_PRINTF1("### R_usb_pstd_TransferStart overlaps %d\n", pipenum);
                                 ;     104             return USB_E_QOVR;
                                 ;     105         }
                                 ;     106     }
                                 ;     107 
                                 ;     108     /* Check state ( Configured ) */
                                 ;     109     if( usb_pstd_ChkConfigured(ptr) != USB_YES )
                                 ;     110     {
                                 ;     111         USB_PRINTF0("### R_usb_pstd_TransferStart not configured\n");
                                 ;     112         return USB_E_ERROR;
                                 ;     113     }
                                 ;     114 
                                 ;     115     if( pipenum == USB_PIPE0 )
                                 ;     116     {
                                 ;     117         USB_PRINTF0("### R_usb_pstd_TransferStart PIPE0 is not support\n");
                                 ;     118         return USB_E_ERROR;
                                 ;     119     }
                                 ;     120 
                                 ;     121     ptr->msghead    = (USB_MH_t)USB_NULL;
                                 ;     122     ptr->msginfo    = USB_MSG_PCD_SUBMITUTR;
                                 ;     123     /* Send message */
                                 ;     124     err = USB_SND_MSG(USB_PCD_MBX, (USB_MSG_t*)ptr);
                                 ;     125     if( err != USB_E_OK )
                                 ;     126     {
                                 ;     127         USB_PRINTF1("### pTransferStart snd_msg error (%ld)\n", err);
                                 ;     128     }
                                 ;     129     return err;
                                 ;     130 }/* eof R_usb_pstd_TransferStart() */
                                 ;     131 
                                 ;     132 /******************************************************************************
                                 ;     133 Function Name   : R_usb_pstd_TransferEnd
                                 ;     134 Description     : Force termination of data transfer of specified pipe. Request 
                                 ;     135                 : PCD to force termination 
                                 ;     136                   data transfer, and the PCD forced-terminates data transfer. 
                                 ;     137 Arguments       : USB_UTR_t *ptr : USB system internal structure. Selects channel. 
                                 ;     138                 : uint16_t pipe     : Pipe number.
                                 ;     139                 : uint16_t status   : End status.
                                 ;     140 Return value    : USB_ER_t          : Error info.
                                 ;     141 ******************************************************************************/
                                 ;     142 USB_ER_t R_usb_pstd_TransferEnd(USB_UTR_t *ptr, uint16_t pipe, uint16_t status)
                                 ;     143 {
                                 ;     144     uint16_t        info;
                                 ;     145 
                                 ;     146     if( usb_gcstd_Pipe[ptr->ip][pipe] == USB_NULL )
                                 ;     147     {
                                 ;     148         USB_PRINTF0("### R_usb_pstd_TransferEnd overlaps\n");
                                 ;     149         return USB_E_QOVR;
                                 ;     150     }
                                 ;     151 
                                 ;     152     /* check Time out */
                                 ;     153     if( status == USB_DATA_TMO )
                                 ;     154     {
                                 ;     155         info = USB_MSG_PCD_TRANSEND1;
                                 ;     156     }
                                 ;     157     else
                                 ;     158     {
                                 ;     159         info = USB_MSG_PCD_TRANSEND2;
                                 ;     160     }
                                 ;     161 
                                 ;     162     /* PCD Send Mailbox */
                                 ;     163     return usb_pstd_PcdSndMbx(ptr, info, pipe, &usb_cstd_DummyFunction);
                                 ;     164 }/* eof R_usb_pstd_TransferEnd() */
                                 ;     165 
                                 ;     166 /******************************************************************************
                                 ;     167 Function Name   : R_usb_pstd_ChangeDeviceState
                                 ;     168 Description     : Change USB Device to the status specified by argument
                                 ;     169 Arguments       : USB_UTR_t *ptr : USB system internal structure.
                                 ;     170                 : uint16_t state            : New device status.
                                 ;     171                 : uint16_t port_no          : Pipe number etc.
                                 ;     172                 : USB_CB_t complete         : Callback function.
                                 ;     173 Return value    : USB_ER_t                  : Error info.
                                 ;     174 ******************************************************************************/
                                 ;     175 USB_ER_t R_usb_pstd_ChangeDeviceState(USB_UTR_t *ptr, uint16_t state, uint16_t port_no, USB_CB_t complete)
                                 ;     176 {
                                 ;     177     USB_ER_t        err;
                                 ;     178 
                                 ;     179     /* PCD Send Mailbox */
                                 ;     180     err = usb_pstd_PcdSndMbx(ptr, state, port_no, complete);
                                 ;     181     
                                 ;     182     return err;
                                 ;     183 }/* eof R_usb_pstd_ChangeDeviceState() */
                                 ;     184 
                                 ;     185 /******************************************************************************
                                 ;     186 Function Name   : R_usb_pstd_DeviceInformation
                                 ;     187 Description     : Get USB Device information such as USB Device status and con-
                                 ;     188                 : figuration No. etc. 
                                 ;     189 Arguments       : USB_UTR_t *ptr : USB system internal structure.
                                 ;     190                 : uint16_t *tbl  : Device information storage pointer TBL. This 
                                 ;     191                 : pointer is used to provide the caller with the device's sta-
                                 ;     192                 : tus, speed, configuration and interface number, and the value
                                 ;     193                 : of the remote wakeup flag.
                                 ;     194 Return value    : none
                                 ;     195 ******************************************************************************/
                                 ;     196 void R_usb_pstd_DeviceInformation(USB_UTR_t *ptr, uint16_t *tbl)
                                 ;     197 {
                                 ;     198     /* Device status */
                                 ;     199     tbl[0] = usb_creg_read_intsts( ptr ) & (uint16_t)(USB_VBSTS|USB_DVSQ);
                                 ;     200 
                                 ;     201     /* Speed */
                                 ;     202     tbl[1] = usb_cstd_PortSpeed(ptr, (uint16_t)USB_PORT0);
                                 ;     203 
                                 ;     204     /* Configuration number */
                                 ;     205     tbl[2] = usb_gpstd_ConfigNum;
                                 ;     206 
                                 ;     207     /* Interface number */
                                 ;     208     tbl[3] = usb_pstd_GetInterfaceNum(usb_gpstd_ConfigNum);
                                 ;     209 
                                 ;     210     /* Remote Wakeup Flag */
                                 ;     211     tbl[4] = usb_gpstd_RemoteWakeup;
                                 ;     212 }/* eof R_usb_pstd_DeviceInformation() */
                                 ;     213 
                                 ;     214 /******************************************************************************
                                 ;     215 Function Name   : R_usb_pstd_DriverRegistration
                                 ;     216 Description     : Register pipe information table, descriptor information table, 
                                 ;     217                 : callback function, etc. This info is specified by the data in
                                 ;     218                 : the structure USB_PCDREG_t.
                                 ;     219 Arguments       : USB_UTR_t *ptr : USB system internal structure.
                                 ;     220                 : USB_PCDREG_t *registinfo : Class driver structure.
                                 ;     221 Return value    : none
                                 ;     222 ******************************************************************************/
                                 ;     223 void R_usb_pstd_DriverRegistration(USB_UTR_t *ptr, USB_PCDREG_t *registinfo)
                                 ;     224 {
                                 ;     225     USB_PCDREG_t    *driver;
                                 ;     226 
                                 ;     227     driver = &usb_gpstd_Driver;
                                 ;     228     /* Pipe define table address */
                                 ;     229     driver->pipetbl     = registinfo->pipetbl;
                                 ;     230     /* Device descriptor table address */
                                 ;     231     driver->devicetbl   = registinfo->devicetbl;
                                 ;     232     /* Qualifier descriptor table address */
                                 ;     233     driver->qualitbl    = registinfo->qualitbl;
                                 ;     234     /* Configuration descriptor table address */
                                 ;     235     driver->configtbl   = registinfo->configtbl;
                                 ;     236     /* Other configuration descriptor table address */
                                 ;     237     driver->othertbl    = registinfo->othertbl;
                                 ;     238     /* String descriptor table address */
                                 ;     239     driver->stringtbl   = registinfo->stringtbl;
                                 ;     240     /* Driver init */
                                 ;     241     driver->classinit   = registinfo->classinit;
                                 ;     242     /* Device default */
                                 ;     243     driver->devdefault  = registinfo->devdefault;
                                 ;     244     /* Device configured */
                                 ;     245     driver->devconfig   = registinfo->devconfig;
                                 ;     246     /* Device detach */
                                 ;     247     driver->devdetach   = registinfo->devdetach;
                                 ;     248     /* Device suspend */
                                 ;     249     driver->devsuspend  = registinfo->devsuspend;
                                 ;     250     /* Device resume */
                                 ;     251     driver->devresume   = registinfo->devresume;
                                 ;     252     /* Interfaced change */
                                 ;     253     driver->interface   = registinfo->interface;
                                 ;     254     /* Control transfer */
                                 ;     255     driver->ctrltrans   = registinfo->ctrltrans;
                                 ;     256     /* Initialized device driver */
                                 ;     257     (*driver->classinit)(ptr, (uint16_t)USB_NO_ARG, (uint16_t)USB_NO_ARG);
                                 ;     258 }/* eof R_usb_pstd_DriverRegistration() */
                                 ;     259 
                                 ;     260 /******************************************************************************
                                 ;     261 Function Name   : R_usb_pstd_DriverRelease
                                 ;     262 Description     : Clear the information registered in the structure USB_PCDREG_t.
                                 ;     263 Arguments       : none
                                 ;     264 Return value    : none
                                 ;     265 ******************************************************************************/
                                 ;     266 void R_usb_pstd_DriverRelease(void)
                                 ;     267 {
                                 ;     268     USB_PCDREG_t    *driver;
                                 ;     269 
                                 ;     270     driver = &usb_gpstd_Driver;
                                 ;     271     /* Pipe define table address */
                                 ;     272     driver->pipetbl     = (uint16_t**)0u;
                                 ;     273     /* Device descriptor table address */
                                 ;     274     driver->devicetbl   = (uint8_t*)0u;
                                 ;     275     /* Qualifier descriptor table address */
                                 ;     276     driver->qualitbl    = (uint8_t*)0u;
                                 ;     277     /* Configuration descriptor table address */
                                 ;     278     driver->configtbl   = (uint8_t**)0u;
                                 ;     279     /* Other configuration descriptor table address */
                                 ;     280     driver->othertbl    = (uint8_t**)0u;
                                 ;     281     /* String descriptor table address */
                                 ;     282     driver->stringtbl   = (uint8_t**)0u;
                                 ;     283     /* Driver init */
                                 ;     284     driver->classinit   = &usb_cstd_DummyFunction;
                                 ;     285     /* Device default */
                                 ;     286     driver->devdefault  = &usb_cstd_DummyFunction;
                                 ;     287     /* Device configured */
                                 ;     288     driver->devconfig   = &usb_cstd_DummyFunction;
                                 ;     289     /* Device detach */
                                 ;     290     driver->devdetach   = &usb_cstd_DummyFunction;
                                 ;     291     /* Device suspend */
                                 ;     292     driver->devsuspend  = &usb_cstd_DummyFunction;
                                 ;     293     /* Device resume */
                                 ;     294     driver->devresume   = &usb_cstd_DummyFunction;
                                 ;     295     /* Interfaced change */
                                 ;     296     driver->interface   = &usb_cstd_DummyFunction;
                                 ;     297     /* Control transfer */
                                 ;     298     driver->ctrltrans   = &usb_cstd_DummyTrn;
                                 ;     299 }/* eof R_usb_pstd_DriverRelease() */
                                 ;     300 
                                 ;     301 /******************************************************************************
                                 ;     302 Function Name   : R_usb_pstd_SetPipeRegister
                                 ;     303 Description     : Set specified pipe configuration of specified pipe no.
                                 ;     304 Arguments       : USB_UTR_t *ptr : USB system internal structure.
                                 ;     305                 : uint16_t pipe_number  : pipe number
                                 ;     306                 : uint16_t *tbl         : DEF_EP table pointer
                                 ;     307 Return value    : none
                                 ;     308 ******************************************************************************/
                                 ;     309 void R_usb_pstd_SetPipeRegister(USB_UTR_t *ptr, uint16_t pipe_number, uint16_t *tbl)
                                 ;     310 {
                                 ;     311     usb_pstd_SetPipeRegister( ptr, pipe_number, tbl);
                                 ;     312 }/* eof R_usb_pstd_SetPipeRegister() */
                                 ;     313 
                                 ;     314 /******************************************************************************
                                 ;     315 Function Name   : R_usb_pstd_SetPipeStall
                                 ;     316 Description     : Pipe Stall Set
                                 ;     317 Arguments       : USB_UTR_t *ptr
                                 ;     318 Return value    : none
                                 ;     319 ******************************************************************************/
                                 ;     320 void R_usb_pstd_SetPipeStall(USB_UTR_t *ptr, uint16_t pipeno)
                                 ;     321 {
                                 ;     322     usb_pstd_SetStall(ptr, pipeno);
                                 ;     323 }
                                 ;     324 /******************************************************************************
                                 ;     325 End of function R_usb_pstd_SetPipeStall
                                 ;     326 ******************************************************************************/
                                 ;     327 
                                 ;     328 /******************************************************************************
                                 ;     329 Function Name   : R_usb_pstd_SetStall
                                 ;     330 Description     : Set pipe stall request
                                 ;     331 Arguments       : USB_CB_t complete ; callback function
                                 ;     332                 : uint16_t pipe ; pipe number
                                 ;     333 Return value    : USB_ER_t Error Info
                                 ;     334 ******************************************************************************/
                                 ;     335 USB_ER_t R_usb_pstd_SetStall(USB_UTR_t *ptr, USB_CB_t complete, uint16_t pipe)
                                 ;     336 {
                                 ;     337     /* PCD Send Mailbox */
                                 ;     338     return usb_pstd_PcdSndMbx(ptr, (uint16_t)USB_MSG_PCD_SETSTALL, pipe, complete);
                                 ;     339 }
                                 ;     340 /******************************************************************************
                                 ;     341 End of function R_usb_pstd_SetStall
                                 ;     342 ******************************************************************************/
                                 ;     343 
                                 ;     344 /******************************************************************************
                                 ;     345 Function Name   : R_usb_pstd_ControlRead
                                 ;     346 Description     : Start control read transfer (API). When a valid control read 
                                 ;     347                 : request is received from host, the ControlRead function gen-
                                 ;     348                 : erates data for transmission to the host and writes it to the 
                                 ;     349                 : FIFO.
                                 ;     350 Arguments       : uint32_t bsize    : Read size in bytes.
                                 ;     351                 : uint8_t *table    : Start address of read data buffer.
                                 ;     352 Return value    : uint16_t          : USB_WRITESHRT/USB_WRITE_END/USB_WRITING/
                                 ;     353                 :                   : USB_FIFOERROR.
                                 ;     354 ******************************************************************************/
                                 ;     355 uint16_t R_usb_pstd_ControlRead(USB_UTR_t *ptr, uint32_t bsize, uint8_t *table)
                                 ;     356 {
                                 ;     357     uint16_t    end_flag;
                                 ;     358 
                                 ;     359     end_flag = usb_pstd_ControlRead( ptr, bsize, table);
                                 ;     360 
                                 ;     361     return (end_flag);
                                 ;     362 }
                                 ;     363 /******************************************************************************
                                 ;     364 End of function R_usb_pstd_ControlRead
                                 ;     365 ******************************************************************************/
                                 ;     366 
                                 ;     367 /******************************************************************************
                                 ;     368 Function Name   : R_usb_pstd_ControlWrite
                                 ;     369 Description     : Start control write transfer (API). When a valid control write 
                                 ;     370                 : request from host is received, the ControlWrite function 
                                 ;     371                 : enables data reception from the host.
                                 ;     372 Arguments       : USB_UTR_t *ptr    : USB system internal structure.
                                 ;     373                 : uint32_t bsize    : Write size in bytes.
                                 ;     374                 : uint8_t *table    : Start address of write data buffer.
                                 ;     375 Return value    : none
                                 ;     376 ******************************************************************************/
                                 ;     377 void R_usb_pstd_ControlWrite(USB_UTR_t *ptr, uint32_t bsize, uint8_t *table)
                                 ;     378 {
                                 ;     379     usb_gcstd_DataCnt[ptr->ip][USB_PIPE0] = bsize;
                                 ;     380     usb_gcstd_DataPtr[ptr->ip][USB_PIPE0] = table;
                                 ;     381 
                                 ;     382     usb_cstd_chg_curpipe(ptr, (uint16_t)USB_PIPE0, (uint16_t)USB_CUSE, USB_NO);
                                 ;     383     /* Buffer clear */
                                 ;     384     usb_creg_set_bclr( ptr, USB_CUSE );
                                 ;     385 
                                 ;     386     /* Interrupt enable */
                                 ;     387     /* Enable ready interrupt */
                                 ;     388     usb_creg_set_brdyenb(ptr, (uint16_t)USB_PIPE0);
                                 ;     389     /* Enable not ready interrupt */
                                 ;     390     usb_cstd_NrdyEnable(ptr, (uint16_t)USB_PIPE0);
                                 ;     391 
                                 ;     392     /* Set PID=BUF */
                                 ;     393     usb_cstd_SetBuf(ptr, (uint16_t)USB_PIPE0);
                                 ;     394 }
                                 ;     395 /******************************************************************************
                                 ;     396 End of function R_usb_pstd_ControlWrite
                                 ;     397 ******************************************************************************/
                                 ;     398 
                                 ;     399 /******************************************************************************
                                 ;     400 Function Name   : R_usb_pstd_ControlEnd
                                 ;     401 Description     : End control transfer.
                                 ;     402 Arguments       : USB_UTR_t *ptr    : USB system internal structure.
                                 ;     403                 : uint16_t status   : Control transfer status.
                                 ;     404 Return value    : none
                                 ;     405 ******************************************************************************/
                                 ;     406 void R_usb_pstd_ControlEnd(USB_UTR_t *ptr, uint16_t status)
                                 ;     407 {
                                 ;     408     usb_pstd_ControlEnd( ptr, status);
                                 ;     409 }
                                 ;     410 /******************************************************************************
                                 ;     411 End of function R_usb_pstd_ControlEnd
                                 ;     412 ******************************************************************************/
                                 ;     413 
                                 ;     414 /******************************************************************************
                                 ;     415 Function Name   : R_usb_pstd_usbdriver_start
                                 ;     416 Description     :  Start peripheral USB low-level driver task.
                                 ;     417 Argument        : none
                                 ;     418 Return          : none
                                 ;     419 ******************************************************************************/
                                 ;     420 void R_usb_pstd_usbdriver_start( USB_UTR_t *ptr )
                                 ;     421 {
                                 ;     422     /* Task Start Processing */
                                 ;     423     R_usb_pstd_PcdOpen(ptr);            /* Pcd open */
                                 ;     424 }
                                 ;     425 /******************************************************************************
                                 ;     426 End of function R_usb_pstd_usbdriver_start()
                                 ;     427 ******************************************************************************/
                                 ;     428 
                                 ;     429 #endif  /* (USB_FUNCSEL_USBIP0_PP == USB_PERI_PP) || (USB_FUNCSEL_USBIP1_PP == USB_PERI_PP) */
                                 ;     430 
                                 ;     431 /******************************************************************************
                                 ;     432 Function Name   : R_usb_pstd_PcdTask
                                 ;     433 Description     : Call PCD (Peripheral Control Driver) task (API for nonOS).
                                 ;     434 Arguments       : USB_VP_INT stacd: Start Code
                                 ;     435 Return value    : none
                                 ;     436 ******************************************************************************/
                                 ;     437 void R_usb_pstd_PcdTask(USB_VP_INT stacd)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_usb_basic\src\driver\peri\r_usb_pdriverapi.c",437
00000000 6040                    		SUB #04H, R0
00000002 E301                    		MOV.L R1, [R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_usb_basic\src\driver\peri\r_usb_pdriverapi.c",442
00000004 6701                    		RTSD #04H
                                 ;     438 {
                                 ;     439 #if (USB_FUNCSEL_USBIP0_PP == USB_PERI_PP) || (USB_FUNCSEL_USBIP1_PP == USB_PERI_PP)
                                 ;     440     usb_pstd_PcdTask( stacd );
                                 ;     441 #endif  /* (USB_FUNCSEL_USBIP0_PP == USB_PERI_PP) || (USB_FUNCSEL_USBIP1_PP == USB_PERI_PP) */
                                 ;     442 }/* eof R_usb_pstd_PcdTask() */
                                 ;     443 
                                 ;     444 /******************************************************************************
                                 ;     445 End  Of File
                                 ;     446 ******************************************************************************/
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00481   LINES

Section List

Attr         Size               Name
CODE     0000000006(00000006H)  P

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx12DB\$ccrx\r_usb_pdriverapi.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\CompactaXP_build\r_usb_pdriverapi.lst
-output=C:\Workspace\e2studio\git\MT01\CompactaXP_build\r_usb_basic\src\driver\peri\r_usb_pdriverapi.obj
