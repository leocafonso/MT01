* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Feb 28 14:07:12 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  28-Feb-2017 14:07:12
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=util.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=util.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=1,EASYMAK=0,MOBILE=0,FREE_RTOS_PP
                                 ;util.c
                                 
                                 		.glb	__Ctype
                                 		.glb	_vector
                                 		.glb	_vector_equal
                                 		.glb	_get_axis_vector_length
                                 		.glb	_sqrt
                                 		.glb	_set_vector
                                 		.glb	_set_vector_by_axis
                                 		.glb	_min3
                                 		.glb	_min4
                                 		.glb	_max3
                                 		.glb	_max4
                                 		.glb	_isnumber
                                 		.glb	_escape_string
                                 		.glb	_pstr2str
                                 		.glb	_fntoa
                                 		.glb	_sprintf
                                 		.glb	__FDclass
                                 		.glb	_compute_checksum
                                 		.glb	_SysTickTimer_getValue
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _vector_equal:
                                 		.STACK	_vector_equal=20
                                 ;       1 /*
                                 ;       2  * util.c - a random assortment of useful functions
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * As a special exception, you may use this file as part of a software library without
                                 ;      13  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      14  * inline functions from this file, or you compile this file and link it with  other
                                 ;      15  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      16  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      17  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      18  * GNU General Public License.
                                 ;      19  *
                                 ;      20  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      21  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      22  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      23  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      24  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      25  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      26  */
                                 ;      27 /* util contains a dog's breakfast of supporting functions that are not specific to tinyg:
                                 ;      28  * including:
                                 ;      29  *	  - math and min/max utilities and extensions
                                 ;      30  *	  - vector manipulation utilities
                                 ;      31  */
                                 ;      32 
                                 ;      33 #include "tinyg.h"
                                 ;      34 #include "util.h"
                                 ;      35 
                                 ;      36 #ifdef __AVR
                                 ;      37 #include "xmega/xmega_rtc.h"
                                 ;      38 #endif
                                 ;      39 
                                 ;      40 #ifdef __cplusplus
                                 ;      41 extern "C"{
                                 ;      42 #endif
                                 ;      43 
                                 ;      44 /**** Vector utilities ****
                                 ;      45  * copy_vector()			- copy vector of arbitrary length
                                 ;      46  * vector_equal()			- test if vectors are equal
                                 ;      47  * get_axis_vector_length()	- return the length of an axis vector
                                 ;      48  * set_vector()				- load values into vector form
                                 ;      49  * set_vector_by_axis()		- load a single value into a zero vector
                                 ;      50  */
                                 ;      51 
                                 ;      52 float vector[AXES];	// statically allocated global for vector utilities
                                 ;      53 
                                 ;      54 /*
                                 ;      55 void copy_vector(float dst[], const float src[])
                                 ;      56 {
                                 ;      57 	memcpy(dst, src, sizeof(dst));
                                 ;      58 }
                                 ;      59 */
                                 ;      60 
                                 ;      61 uint8_t vector_equal(const float a[], const float b[])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",61
00000000 7100F0                  		ADD #0FFFFFFF0H, R0
00000003 A089                    		MOV.L R1, 0CH[R0]
00000005 A082                    		MOV.L R2, 08H[R0]
                                 ;      62 {
                                 ;      63 	if ((fp_EQ(a[AXIS_X], b[AXIS_X])) &&
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",63
00000007 A889                    		MOV.L 0CH[R0], R1
00000009 EC1E                    		MOV.L [R1], R14
0000000B FC802E                  		FSUB [R2].L, R14
0000000E 7BFE                    		BCLR #1FH, R14
00000010 FD721EBD378635          		FCMP #358637BDH, R14
00000017 27rr                    		BN L23
00000019 2Err                 B  		BRA L25
0000001B                         L22:	; bb3
                                 ;      64 		(fp_EQ(a[AXIS_Y], b[AXIS_Y])) &&
                                 ;      65 		(fp_EQ(a[AXIS_Z], b[AXIS_Z])) &&
                                 ;      66 		(fp_EQ(a[AXIS_A], b[AXIS_A])) &&
                                 ;      67 		(fp_EQ(a[AXIS_B], b[AXIS_B])) &&
                                 ;      68 		(fp_EQ(a[AXIS_C], b[AXIS_C]))) {
                                 ;      69 		return (true);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",69
0000001B 3C0601                  		MOV.B #01H, 06H[R0]
0000001E 38rrrr               W  		BRA L44
00000021                         L23:	; bb15
00000021 A889                    		MOV.L 0CH[R0], R1
00000023 A819                    		MOV.L 04H[R1], R1
00000025 A882                    		MOV.L 08H[R0], R2
00000027 FC812101                		FSUB 04H[R2].L, R1
0000002B 7BF1                    		BCLR #1FH, R1
0000002D FD7211BD378635          		FCMP #358637BDH, R1
00000034 26rr                    		BPZ L25
00000036                         L24:	; bb26
00000036 F80601                  		MOV.L #00000001H, [R0]
00000039 08                   S  		BRA L26
0000003A                         L25:	; bb27
0000003A F80600                  		MOV.L #00000000H, [R0]
0000003D                         L26:	; bb28
0000003D EC01                    		MOV.L [R0], R1
0000003F 6101                    		CMP #00H, R1
00000041 20rr                    		BEQ L29
00000043                         L27:	; bb31
00000043 A889                    		MOV.L 0CH[R0], R1
00000045 A891                    		MOV.L 08H[R1], R1
00000047 A882                    		MOV.L 08H[R0], R2
00000049 FC812102                		FSUB 08H[R2].L, R1
0000004D 7BF1                    		BCLR #1FH, R1
0000004F FD7211BD378635          		FCMP #358637BDH, R1
00000056 26rr                    		BPZ L29
00000058                         L28:	; bb42
00000058 F80601                  		MOV.L #00000001H, [R0]
0000005B 08                   S  		BRA L30
0000005C                         L29:	; bb43
0000005C F80600                  		MOV.L #00000000H, [R0]
0000005F                         L30:	; bb44
0000005F EC01                    		MOV.L [R0], R1
00000061 6101                    		CMP #00H, R1
00000063 20rr                    		BEQ L33
00000065                         L31:	; bb48
00000065 A889                    		MOV.L 0CH[R0], R1
00000067 A899                    		MOV.L 0CH[R1], R1
00000069 A882                    		MOV.L 08H[R0], R2
0000006B FC812103                		FSUB 0CH[R2].L, R1
0000006F 7BF1                    		BCLR #1FH, R1
00000071 FD7211BD378635          		FCMP #358637BDH, R1
00000078 26rr                    		BPZ L33
0000007A                         L32:	; bb59
0000007A F80601                  		MOV.L #00000001H, [R0]
0000007D 08                   S  		BRA L34
0000007E                         L33:	; bb60
0000007E F80600                  		MOV.L #00000000H, [R0]
00000081                         L34:	; bb61
00000081 EC01                    		MOV.L [R0], R1
00000083 6101                    		CMP #00H, R1
00000085 20rr                    		BEQ L37
00000087                         L35:	; bb65
00000087 A889                    		MOV.L 0CH[R0], R1
00000089 A911                    		MOV.L 10H[R1], R1
0000008B A882                    		MOV.L 08H[R0], R2
0000008D FC812104                		FSUB 10H[R2].L, R1
00000091 7BF1                    		BCLR #1FH, R1
00000093 FD7211BD378635          		FCMP #358637BDH, R1
0000009A 26rr                    		BPZ L37
0000009C                         L36:	; bb76
0000009C F80601                  		MOV.L #00000001H, [R0]
0000009F 08                   S  		BRA L38
000000A0                         L37:	; bb77
000000A0 F80600                  		MOV.L #00000000H, [R0]
000000A3                         L38:	; bb78
000000A3 EC01                    		MOV.L [R0], R1
000000A5 6101                    		CMP #00H, R1
000000A7 20rr                    		BEQ L41
000000A9                         L39:	; bb82
000000A9 A889                    		MOV.L 0CH[R0], R1
000000AB A919                    		MOV.L 14H[R1], R1
000000AD A882                    		MOV.L 08H[R0], R2
000000AF FC812105                		FSUB 14H[R2].L, R1
000000B3 7BF1                    		BCLR #1FH, R1
000000B5 FD7211BD378635          		FCMP #358637BDH, R1
000000BC 26rr                    		BPZ L41
000000BE                         L40:	; bb93
000000BE F80601                  		MOV.L #00000001H, [R0]
000000C1 08                   S  		BRA L42
000000C2                         L41:	; bb94
000000C2 F80600                  		MOV.L #00000000H, [R0]
000000C5                         L42:	; bb95
000000C5 EC01                    		MOV.L [R0], R1
000000C7 6101                    		CMP #00H, R1
000000C9 3Brrrr               W  		BNE L22
000000CC                         L43:	; bb100
                                 ;      70 	}
                                 ;      71 	return (false);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",71
000000CC 3C0600                  		MOV.B #00H, 06H[R0]
000000CF                         L44:	; bb102
000000CF C5000607                		MOV.B 06H[R0], 07H[R0]
                                 ;      72 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",72
000000D3 B189                    		MOVU.B 07H[R0], R1
000000D5 6704                    		RTSD #10H
000000D7                         _get_axis_vector_length:
                                 		.STACK	_get_axis_vector_length=16
                                 ;      73 
                                 ;      74 float get_axis_vector_length(const float a[], const float b[])
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",74
000000D7 60C0                    		SUB #0CH, R0
000000D9 A081                    		MOV.L R1, 08H[R0]
000000DB A00A                    		MOV.L R2, 04H[R0]
                                 ;      75 {
                                 ;      76 	return (sqrt(square(a[AXIS_X] - b[AXIS_X]) +
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",76
000000DD A883                    		MOV.L 08H[R0], R3
000000DF A83C                    		MOV.L 04H[R3], R4
000000E1 FC812401                		FSUB 04H[R2].L, R4
000000E5 EC31                    		MOV.L [R3], R1
000000E7 FC8021                  		FSUB [R2].L, R1
000000EA A8B5                    		MOV.L 08H[R3], R5
000000EC FC812502                		FSUB 08H[R2].L, R5
000000F0 ED3F03                  		MOV.L 0CH[R3], R15
000000F3 FC812F03                		FSUB 0CH[R2].L, R15
000000F7 ED3E04                  		MOV.L 10H[R3], R14
000000FA FC812E04                		FSUB 10H[R2].L, R14
000000FE A93B                    		MOV.L 14H[R3], R3
00000100 FC812305                		FSUB 14H[R2].L, R3
00000104 FC8F11                  		FMUL R1, R1
00000107 FC8F44                  		FMUL R4, R4
0000010A FC8B41                  		FADD R4, R1
0000010D FC8F55                  		FMUL R5, R5
00000110 FC8B51                  		FADD R5, R1
00000113 FC8FFF                  		FMUL R15, R15
00000116 FC8BF1                  		FADD R15, R1
00000119 FC8FEE                  		FMUL R14, R14
0000011C FC8BE1                  		FADD R14, R1
0000011F FC8F33                  		FMUL R3, R3
00000122 FC8B31                  		FADD R3, R1
00000125 05rrrrrr             A  		BSR _sqrt
00000129 E301                    		MOV.L R1, [R0]
0000012B                         L46:	; entry.split
                                 ;      77 				 square(a[AXIS_Y] - b[AXIS_Y]) +
                                 ;      78 				 square(a[AXIS_Z] - b[AXIS_Z]) +
                                 ;      79 				 square(a[AXIS_A] - b[AXIS_A]) +
                                 ;      80 				 square(a[AXIS_B] - b[AXIS_B]) +
                                 ;      81 				 square(a[AXIS_C] - b[AXIS_C])));
                                 ;      82 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",82
0000012B 6703                    		RTSD #0CH
0000012D                         _set_vector:
                                 		.STACK	_set_vector=32
                                 ;      83 
                                 ;      84 float *set_vector(float x, float y, float z, float a, float b, float c)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",84
0000012D 7100E4                  		ADD #0FFFFFFE4H, R0
00000130 A181                    		MOV.L R1, 18H[R0]
00000132 A10A                    		MOV.L R2, 14H[R0]
00000134 A103                    		MOV.L R3, 10H[R0]
00000136 A08C                    		MOV.L R4, 0CH[R0]
00000138 E5000802                		MOV.L 20H[R0], 08H[R0]
0000013C E5000901                		MOV.L 24H[R0], 04H[R0]
                                 ;      85 {
                                 ;      86 	vector[AXIS_X] = x;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",86
00000140 FBE2rrrrrrrr            		MOV.L #_vector, R14
00000146 E10E06                  		MOV.L 18H[R0], [R14]
00000149                         L48:	; entry.split
                                 ;      87 	vector[AXIS_Y] = y;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",87
00000149 FBE2rrrrrrrr            		MOV.L #_vector, R14
0000014F E50E0501                		MOV.L 14H[R0], 04H[R14]
00000153                         L49:	; entry.split1
                                 ;      88 	vector[AXIS_Z] = z;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",88
00000153 FBE2rrrrrrrr            		MOV.L #_vector, R14
00000159 E50E0402                		MOV.L 10H[R0], 08H[R14]
0000015D                         L50:	; entry.split2
                                 ;      89 	vector[AXIS_A] = a;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",89
0000015D FBE2rrrrrrrr            		MOV.L #_vector, R14
00000163 E50E0303                		MOV.L 0CH[R0], 0CH[R14]
00000167                         L51:	; entry.split3
                                 ;      90 	vector[AXIS_B] = b;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",90
00000167 FBE2rrrrrrrr            		MOV.L #_vector, R14
0000016D E50E0204                		MOV.L 08H[R0], 10H[R14]
00000171                         L52:	; entry.split4
                                 ;      91 	vector[AXIS_C] = c;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",91
00000171 FBE2rrrrrrrr            		MOV.L #_vector, R14
00000177 E50E0105                		MOV.L 04H[R0], 14H[R14]
0000017B                         L53:	; entry.split5
                                 ;      92 	return (vector);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",92
0000017B FB12rrrrrrrr            		MOV.L #_vector, R1
00000181 E301                    		MOV.L R1, [R0]
00000183                         L54:	; entry.split6
                                 ;      93 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",93
00000183 6707                    		RTSD #1CH
00000185                         _set_vector_by_axis:
                                 		.STACK	_set_vector_by_axis=16
                                 ;      94 
                                 ;      95 float *set_vector_by_axis(float value, uint8_t axis)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",95
00000185 60C0                    		SUB #0CH, R0
00000187 A081                    		MOV.L R1, 08H[R0]
00000189 818A                    		MOV.B R2, 07H[R0]
                                 ;      96 {
                                 ;      97 	clear_vector(vector);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",97
0000018B FB12rrrrrrrr            		MOV.L #_vector, R1
00000191 6602                    		MOV.L #00000000H, R2
00000193 A11A                    		MOV.L R2, 14H[R1]
00000195 A112                    		MOV.L R2, 10H[R1]
00000197 A09A                    		MOV.L R2, 0CH[R1]
00000199 A092                    		MOV.L R2, 08H[R1]
0000019B A01A                    		MOV.L R2, 04H[R1]
0000019D E312                    		MOV.L R2, [R1]
0000019F                         L56:	; entry.split
                                 ;      98 	switch (axis) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",98
0000019F B189                    		MOVU.B 07H[R0], R1
000001A1 6151                    		CMP #05H, R1
000001A3 20rr                    		BEQ L67
000001A5                         L57:	; entry.split
000001A5 6111                    		CMP #01H, R1
000001A7 20rr                    		BEQ L63
000001A9                         L58:	; entry.split
000001A9 6121                    		CMP #02H, R1
000001AB 20rr                    		BEQ L64
000001AD                         L59:	; entry.split
000001AD 6131                    		CMP #03H, R1
000001AF 20rr                    		BEQ L65
000001B1                         L60:	; entry.split
000001B1 6141                    		CMP #04H, R1
000001B3 20rr                    		BEQ L66
000001B5                         L61:	; entry.split
000001B5 6101                    		CMP #00H, R1
000001B7 21rr                    		BNE L68
000001B9                         L62:	; bb
                                 ;      99 		case (AXIS_X): vector[AXIS_X] = value; break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",99
000001B9 FBE2rrrrrrrr            		MOV.L #_vector, R14
000001BF E10E02                  		MOV.L 08H[R0], [R14]
000001C2 2Err                 B  		BRA L68
000001C4                         L63:	; bb6
                                 ;     100 		case (AXIS_Y): vector[AXIS_Y] = value; break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",100
000001C4 FBE2rrrrrrrr            		MOV.L #_vector, R14
000001CA E50E0201                		MOV.L 08H[R0], 04H[R14]
000001CE 2Err                 B  		BRA L68
000001D0                         L64:	; bb8
                                 ;     101 		case (AXIS_Z): vector[AXIS_Z] = value; break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",101
000001D0 FBE2rrrrrrrr            		MOV.L #_vector, R14
000001D6 E50E0202                		MOV.L 08H[R0], 08H[R14]
000001DA 2Err                 B  		BRA L68
000001DC                         L65:	; bb10
                                 ;     102 		case (AXIS_A): vector[AXIS_A] = value; break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",102
000001DC FBE2rrrrrrrr            		MOV.L #_vector, R14
000001E2 E50E0203                		MOV.L 08H[R0], 0CH[R14]
000001E6 2Err                 B  		BRA L68
000001E8                         L66:	; bb12
                                 ;     103 		case (AXIS_B): vector[AXIS_B] = value; break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",103
000001E8 FBE2rrrrrrrr            		MOV.L #_vector, R14
000001EE E50E0204                		MOV.L 08H[R0], 10H[R14]
000001F2 2Err                 B  		BRA L68
000001F4                         L67:	; bb14
                                 ;     104 		case (AXIS_C): vector[AXIS_C] = value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",104
000001F4 FBE2rrrrrrrr            		MOV.L #_vector, R14
000001FA E50E0205                		MOV.L 08H[R0], 14H[R14]
000001FE                         L68:	; bb16
                                 ;     105 	}
                                 ;     106 	return (vector);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",106
000001FE FB12rrrrrrrr            		MOV.L #_vector, R1
00000204 E301                    		MOV.L R1, [R0]
00000206                         L69:	; bb16.split
                                 ;     107 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",107
00000206 6703                    		RTSD #0CH
00000208                         _min3:
                                 		.STACK	_min3=28
                                 ;     108 
                                 ;     109 /**** Math and other general purpose functions ****/
                                 ;     110 
                                 ;     111 /* Slightly faster (*) multi-value min and max functions
                                 ;     112  * 	min3() - return minimum of 3 numbers
                                 ;     113  * 	min4() - return minimum of 4 numbers
                                 ;     114  * 	max3() - return maximum of 3 numbers
                                 ;     115  * 	max4() - return maximum of 4 numbers
                                 ;     116  *
                                 ;     117  * Implementation tip: Order the min and max values from most to least likely in the calling args
                                 ;     118  *
                                 ;     119  * (*) Macro min4 is about 20uSec, inline function version is closer to 10 uSec (Xmega 32 MHz)
                                 ;     120  * 	#define min3(a,b,c) (min(min(a,b),c))
                                 ;     121  *	#define min4(a,b,c,d) (min(min(a,b),min(c,d)))
                                 ;     122  *	#define max3(a,b,c) (max(max(a,b),c))
                                 ;     123  *	#define max4(a,b,c,d) (max(max(a,b),max(c,d)))
                                 ;     124  */
                                 ;     125 
                                 ;     126 float min3(float x1, float x2, float x3)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",126
00000208 7100E8                  		ADD #0FFFFFFE8H, R0
0000020B A109                    		MOV.L R1, 14H[R0]
0000020D A102                    		MOV.L R2, 10H[R0]
0000020F A08B                    		MOV.L R3, 0CH[R0]
                                 ;     127 {
                                 ;     128 	float min = x1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",128
00000211 E5000501                		MOV.L 14H[R0], 04H[R0]
00000215                         L71:	; entry.split
                                 ;     129 	if (x2 < min) { min = x2;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",129
00000215 A901                    		MOV.L 10H[R0], R1
00000217 FC850101                		FCMP 04H[R0].L, R1
0000021B 26rr                    		BPZ L73
0000021D                         L72:	; bb6
0000021D E5000401                		MOV.L 10H[R0], 04H[R0]
00000221                         L73:	; bb13
                                 ;     130 	if (x3 < min) { return (x3);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",130
00000221 A889                    		MOV.L 0CH[R0], R1
00000223 FC850101                		FCMP 04H[R0].L, R1
00000227 26rr                    		BPZ L75
00000229                         L74:	; bb14
00000229 E10003                  		MOV.L 0CH[R0], [R0]
0000022C 08                   S  		BRA L76
0000022D                         L75:	; bb22
                                 ;     131 	return (min);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",131
0000022D E10001                  		MOV.L 04H[R0], [R0]
00000230                         L76:	; bb25
00000230 EC01                    		MOV.L [R0], R1
00000232 A081                    		MOV.L R1, 08H[R0]
                                 ;     132 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",132
00000234 6706                    		RTSD #18H
00000236                         _min4:
                                 		.STACK	_min4=32
                                 ;     133 
                                 ;     134 float min4(float x1, float x2, float x3, float x4)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",134
00000236 7100E4                  		ADD #0FFFFFFE4H, R0
00000239 A181                    		MOV.L R1, 18H[R0]
0000023B A10A                    		MOV.L R2, 14H[R0]
0000023D A103                    		MOV.L R3, 10H[R0]
0000023F A08C                    		MOV.L R4, 0CH[R0]
                                 ;     135 {
                                 ;     136 	float min = x1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",136
00000241 E5000601                		MOV.L 18H[R0], 04H[R0]
00000245                         L78:	; entry.split
                                 ;     137 	if (x2 < min) { min = x2;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",137
00000245 A909                    		MOV.L 14H[R0], R1
00000247 FC850101                		FCMP 04H[R0].L, R1
0000024B 26rr                    		BPZ L80
0000024D                         L79:	; bb7
0000024D E5000501                		MOV.L 14H[R0], 04H[R0]
00000251                         L80:	; bb14
                                 ;     138 	if (x3 < min) { min = x3;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",138
00000251 A901                    		MOV.L 10H[R0], R1
00000253 FC850101                		FCMP 04H[R0].L, R1
00000257 26rr                    		BPZ L82
00000259                         L81:	; bb15
00000259 E5000401                		MOV.L 10H[R0], 04H[R0]
0000025D                         L82:	; bb23
                                 ;     139 	if (x4 < min) { return (x4);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",139
0000025D A889                    		MOV.L 0CH[R0], R1
0000025F FC850101                		FCMP 04H[R0].L, R1
00000263 26rr                    		BPZ L84
00000265                         L83:	; bb24
00000265 E10003                  		MOV.L 0CH[R0], [R0]
00000268 08                   S  		BRA L85
00000269                         L84:	; bb32
                                 ;     140 	return (min);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",140
00000269 E10001                  		MOV.L 04H[R0], [R0]
0000026C                         L85:	; bb35
0000026C EC01                    		MOV.L [R0], R1
0000026E A081                    		MOV.L R1, 08H[R0]
                                 ;     141 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",141
00000270 6707                    		RTSD #1CH
00000272                         _max3:
                                 		.STACK	_max3=28
                                 ;     142 
                                 ;     143 float max3(float x1, float x2, float x3)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",143
00000272 7100E8                  		ADD #0FFFFFFE8H, R0
00000275 A109                    		MOV.L R1, 14H[R0]
00000277 A102                    		MOV.L R2, 10H[R0]
00000279 A08B                    		MOV.L R3, 0CH[R0]
                                 ;     144 {
                                 ;     145 	float max = x1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",145
0000027B E5000501                		MOV.L 14H[R0], 04H[R0]
0000027F                         L87:	; entry.split
                                 ;     146 	if (x2 > max) { max = x2;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",146
0000027F A809                    		MOV.L 04H[R0], R1
00000281 FC850104                		FCMP 10H[R0].L, R1
00000285 26rr                    		BPZ L89
00000287                         L88:	; bb6
00000287 E5000401                		MOV.L 10H[R0], 04H[R0]
0000028B                         L89:	; bb13
                                 ;     147 	if (x3 > max) { return (x3);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",147
0000028B A809                    		MOV.L 04H[R0], R1
0000028D FC850103                		FCMP 0CH[R0].L, R1
00000291 26rr                    		BPZ L91
00000293                         L90:	; bb14
00000293 E10003                  		MOV.L 0CH[R0], [R0]
00000296 08                   S  		BRA L92
00000297                         L91:	; bb22
                                 ;     148 	return (max);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",148
00000297 E10001                  		MOV.L 04H[R0], [R0]
0000029A                         L92:	; bb25
0000029A EC01                    		MOV.L [R0], R1
0000029C A081                    		MOV.L R1, 08H[R0]
                                 ;     149 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",149
0000029E 6706                    		RTSD #18H
000002A0                         _max4:
                                 		.STACK	_max4=32
                                 ;     150 
                                 ;     151 float max4(float x1, float x2, float x3, float x4)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",151
000002A0 7100E4                  		ADD #0FFFFFFE4H, R0
000002A3 A181                    		MOV.L R1, 18H[R0]
000002A5 A10A                    		MOV.L R2, 14H[R0]
000002A7 A103                    		MOV.L R3, 10H[R0]
000002A9 A08C                    		MOV.L R4, 0CH[R0]
                                 ;     152 {
                                 ;     153 	float max = x1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",153
000002AB E5000601                		MOV.L 18H[R0], 04H[R0]
000002AF                         L94:	; entry.split
                                 ;     154 	if (x2 > max) { max = x2;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",154
000002AF A809                    		MOV.L 04H[R0], R1
000002B1 FC850105                		FCMP 14H[R0].L, R1
000002B5 26rr                    		BPZ L96
000002B7                         L95:	; bb7
000002B7 E5000501                		MOV.L 14H[R0], 04H[R0]
000002BB                         L96:	; bb14
                                 ;     155 	if (x3 > max) { max = x3;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",155
000002BB A809                    		MOV.L 04H[R0], R1
000002BD FC850104                		FCMP 10H[R0].L, R1
000002C1 26rr                    		BPZ L98
000002C3                         L97:	; bb15
000002C3 E5000401                		MOV.L 10H[R0], 04H[R0]
000002C7                         L98:	; bb23
                                 ;     156 	if (x4 > max) { return (x4);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",156
000002C7 A809                    		MOV.L 04H[R0], R1
000002C9 FC850103                		FCMP 0CH[R0].L, R1
000002CD 26rr                    		BPZ L100
000002CF                         L99:	; bb24
000002CF E10003                  		MOV.L 0CH[R0], [R0]
000002D2 08                   S  		BRA L101
000002D3                         L100:	; bb32
                                 ;     157 	return (max);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",157
000002D3 E10001                  		MOV.L 04H[R0], [R0]
000002D6                         L101:	; bb35
000002D6 EC01                    		MOV.L [R0], R1
000002D8 A081                    		MOV.L R1, 08H[R0]
                                 ;     158 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",158
000002DA 6707                    		RTSD #1CH
000002DC                         _isnumber:
                                 		.STACK	_isnumber=8
                                 ;     159 
                                 ;     160 
                                 ;     161 /**** String utilities ****
                                 ;     162  * strcpy_U() 	   - strcpy workalike to get around initial NUL for blank string - possibly wrong
                                 ;     163  * isnumber() 	   - isdigit that also accepts plus, minus, and decimal point
                                 ;     164  * escape_string() - add escapes to a string - currently for quotes only
                                 ;     165  */
                                 ;     166 
                                 ;     167 /*
                                 ;     168 uint8_t * strcpy_U( uint8_t * dst, const uint8_t * src )
                                 ;     169 {
                                 ;     170 	uint16_t index = 0;
                                 ;     171 	do {
                                 ;     172 		dst[index] = src[index];
                                 ;     173 	} while (src[index++] != 0);
                                 ;     174 	return dst;
                                 ;     175 }
                                 ;     176 */
                                 ;     177 
                                 ;     178 uint8_t isnumber(char_t c)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",178
000002DC 6040                    		SUB #04H, R0
000002DE 8089                    		MOV.B R1, 03H[R0]
                                 ;     179 {
                                 ;     180 	if (c == '.') { return (true); }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",180
000002E0 75512E                  		CMP #2EH, R1
000002E3 18                   S  		BNE L104
000002E4                         L103:	; bb2
000002E4 3C0101                  		MOV.B #01H, 01H[R0]
000002E7 2Err                 B  		BRA L109
000002E9                         L104:	; bb9
                                 ;     181 	if (c == '-') { return (true); }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",181
000002E9 B089                    		MOVU.B 03H[R0], R1
000002EB 75512D                  		CMP #2DH, R1
000002EE 18                   S  		BNE L106
000002EF                         L105:	; bb10
000002EF 3C0101                  		MOV.B #01H, 01H[R0]
000002F2 2Err                 B  		BRA L109
000002F4                         L106:	; bb18
                                 ;     182 	if (c == '+') { return (true); }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",182
000002F4 B089                    		MOVU.B 03H[R0], R1
000002F6 75512B                  		CMP #2BH, R1
000002F9 18                   S  		BNE L108
000002FA                         L107:	; bb19
000002FA 3C0101                  		MOV.B #01H, 01H[R0]
000002FD 2Err                 B  		BRA L109
000002FF                         L108:	; bb26
                                 ;     183 	return (isdigit(c));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",183
000002FF FBE2rrrrrrrr            		MOV.L #__Ctype, R14
00000305 ECEE                    		MOV.L [R14], R14
00000307 B089                    		MOVU.B 03H[R0], R1
00000309 FED1E1                  		MOVU.W [R1,R14], R1
0000030C 752120                  		AND #20H, R1
0000030F 8009                    		MOV.B R1, 01H[R0]
00000311                         L109:	; bb36
00000311 C5000102                		MOV.B 01H[R0], 02H[R0]
                                 ;     184 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",184
00000315 B081                    		MOVU.B 02H[R0], R1
00000317 6701                    		RTSD #04H
00000319                         _escape_string:
                                 		.STACK	_escape_string=24
                                 ;     185 
                                 ;     186 char_t *escape_string(char_t *dst, char_t *src)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",186
00000319 7100EC                  		ADD #0FFFFFFECH, R0
0000031C A101                    		MOV.L R1, 10H[R0]
0000031E A08A                    		MOV.L R2, 0CH[R0]
                                 ;     187 {
                                 ;     188 	char_t c;
                                 ;     189 	char_t *start_dst = dst;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",189
00000320 E5000401                		MOV.L 10H[R0], 04H[R0]
00000324 2Err                 B  		BRA L114
00000326                         L111:	; bb6
                                 ;     190 
                                 ;     191 	while ((c = *(src++)) != 0) {	// NUL
                                 ;     192 		if (c == '"') { *(dst++) = '\\'; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",192
00000326 B089                    		MOVU.B 03H[R0], R1
00000328 755122                  		CMP #22H, R1
0000032B 21rr                    		BNE L113
0000032D                         L112:	; bb7
0000032D A901                    		MOV.L 10H[R0], R1
0000032F F8145C                  		MOV.B #5CH, [R1]
00000332 A901                    		MOV.L 10H[R0], R1
00000334 6211                    		ADD #01H, R1
00000336 A101                    		MOV.L R1, 10H[R0]
00000338                         L113:	; bb15
                                 ;     193 		*(dst++) = c;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",193
00000338 B089                    		MOVU.B 03H[R0], R1
0000033A A902                    		MOV.L 10H[R0], R2
0000033C C321                    		MOV.B R1, [R2]
0000033E A901                    		MOV.L 10H[R0], R1
00000340 6211                    		ADD #01H, R1
00000342 A101                    		MOV.L R1, 10H[R0]
00000344                         L114:	; bb20
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",191
00000344 A889                    		MOV.L 0CH[R0], R1
00000346 5811                    		MOVU.B [R1], R1
00000348 8089                    		MOV.B R1, 03H[R0]
0000034A A88A                    		MOV.L 0CH[R0], R2
0000034C 6212                    		ADD #01H, R2
0000034E A08A                    		MOV.L R2, 0CH[R0]
00000350 6101                    		CMP #00H, R1
00000352 21rr                    		BNE L111
00000354                         L115:	; bb30
                                 ;     194 	}
                                 ;     195 	return (start_dst);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",195
00000354 A809                    		MOV.L 04H[R0], R1
00000356 A081                    		MOV.L R1, 08H[R0]
00000358                         L116:	; bb30.split
                                 ;     196 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",196
00000358 6705                    		RTSD #14H
0000035A                         _pstr2str:
                                 		.STACK	_pstr2str=12
                                 ;     197 
                                 ;     198 /*
                                 ;     199  * pstr2str() - return an AVR style progmem string as a RAM string. No effect on ARMs
                                 ;     200  *
                                 ;     201  *	This function deals with FLASH memory string confusion between the AVR serias and ARMs.
                                 ;     202  *	AVRs typically have xxxxx_P() functions which take strings from FLASH as args.
                                 ;     203  *	On ARMs there is no need for this as strings are handled identically in FLASH and RAM.
                                 ;     204  *
                                 ;     205  *	This function copies a string from FLASH to a pre-allocated RAM buffer - see main.c for
                                 ;     206  *	allocation and max length. On the ARM it's a pass through that just returns the address
                                 ;     207  *	of the input string
                                 ;     208  */
                                 ;     209 char_t *pstr2str(const char *pgm_string)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",209
0000035A 6080                    		SUB #08H, R0
0000035C A009                    		MOV.L R1, 04H[R0]
                                 ;     210 {
                                 ;     211 #ifdef __AVR
                                 ;     212 	strncpy_P(global_string_buf, pgm_string, MESSAGE_LEN);
                                 ;     213 	return (global_string_buf);
                                 ;     214 #endif
                                 ;     215 #ifdef __ARM
                                 ;     216 	return ((char_t *)pgm_string);
                                 ;     217 #endif
                                 ;     218 #ifdef __RX
                                 ;     219 	return ((char_t *)pgm_string);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",219
0000035E E301                    		MOV.L R1, [R0]
00000360                         L118:	; entry.split
                                 ;     220 #endif
                                 ;     221 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",221
00000360 6702                    		RTSD #08H
00000362                         _fntoa:
                                 		.STACK	_fntoa=28
                                 ;     222 
                                 ;     223 /*
                                 ;     224  * fntoa() - return ASCII string given a float and a decimal precision value
                                 ;     225  *
                                 ;     226  *	Returns length of string, less the terminating NUL character
                                 ;     227  */
                                 ;     228 char_t fntoa(char_t *str, float n, uint8_t precision)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",228
00000362 7100F0                  		ADD #0FFFFFFF0H, R0
00000365 A089                    		MOV.L R1, 0CH[R0]
00000367 A082                    		MOV.L R2, 08H[R0]
00000369 818B                    		MOV.B R3, 07H[R0]
                                 ;     229 {
                                 ;     230     // handle special cases
                                 ;     231 	if (isnan(n)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",231
0000036B A881                    		MOV.L 08H[R0], R1
0000036D 05rrrrrr             A  		BSR __FDclass
00000371 E301                    		MOV.L R1, [R0]
00000373 6121                    		CMP #02H, R1
00000375 3Brrrr               W  		BNE L141
00000378                         L120:	; bb4
                                 ;     232 		strcpy(str, "nan");
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",232
00000378 A889                    		MOV.L 0CH[R0], R1
0000037A FBE2rrrrrrrr            		MOV.L #_L10, R14
00000380 E0E1                    		MOV.L [R14], [R1]
00000382                         L121:	; bb4.split
                                 ;     233 		return (3);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",233
00000382 3C0503                  		MOV.B #03H, 05H[R0]
00000385 38rrrr               W  		BRA L142
00000388                         L122:	; bb9
                                 ;     234 
                                 ;     235 	} else if (isinf(n)) {
                                 ;     236 		strcpy(str, "inf");
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",236
00000388 A889                    		MOV.L 0CH[R0], R1
0000038A FBE2rrrrrrrr            		MOV.L #_L11, R14
00000390 E0E1                    		MOV.L [R14], [R1]
00000392                         L123:	; bb9.split
                                 ;     237 		return (3);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",237
00000392 3C0503                  		MOV.B #03H, 05H[R0]
00000395 38rrrr               W  		BRA L142
00000398                         L124:	; bb13
                                 ;     238 
                                 ;     239 	} else if (precision == 0 ) { return((char_t)sprintf((char *)str, "%0.0f", (double) n));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",239
00000398 B189                    		MOVU.B 07H[R0], R1
0000039A 6101                    		CMP #00H, R1
0000039C 21rr                    		BNE L126
0000039E                         L125:	; bb14
0000039E A882                    		MOV.L 08H[R0], R2
000003A0 A889                    		MOV.L 0CH[R0], R1
000003A2 6080                    		SUB #08H, R0
000003A4 A00A                    		MOV.L R2, 04H[R0]
000003A6 FBE2rrrrrrrr            		MOV.L #_L12, R14
000003AC E30E                    		MOV.L R14, [R0]
000003AE 05rrrrrr             A  		BSR _sprintf
000003B2 6280                    		ADD #08H, R0
000003B4 8109                    		MOV.B R1, 05H[R0]
000003B6 38rrrr               W  		BRA L142
000003B9                         L126:	; bb21
                                 ;     240 	} else if (precision == 1 ) { return((char_t)sprintf((char *)str, "%0.1f", (double) n));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",240
000003B9 B189                    		MOVU.B 07H[R0], R1
000003BB 6111                    		CMP #01H, R1
000003BD 21rr                    		BNE L128
000003BF                         L127:	; bb22
000003BF A882                    		MOV.L 08H[R0], R2
000003C1 A889                    		MOV.L 0CH[R0], R1
000003C3 6080                    		SUB #08H, R0
000003C5 A00A                    		MOV.L R2, 04H[R0]
000003C7 FBE2rrrrrrrr            		MOV.L #_L13, R14
000003CD E30E                    		MOV.L R14, [R0]
000003CF 05rrrrrr             A  		BSR _sprintf
000003D3 6280                    		ADD #08H, R0
000003D5 8109                    		MOV.B R1, 05H[R0]
000003D7 38rrrr               W  		BRA L142
000003DA                         L128:	; bb29
                                 ;     241 	} else if (precision == 2 ) { return((char_t)sprintf((char *)str, "%0.2f", (double) n));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",241
000003DA B189                    		MOVU.B 07H[R0], R1
000003DC 6121                    		CMP #02H, R1
000003DE 21rr                    		BNE L130
000003E0                         L129:	; bb30
000003E0 A882                    		MOV.L 08H[R0], R2
000003E2 A889                    		MOV.L 0CH[R0], R1
000003E4 6080                    		SUB #08H, R0
000003E6 A00A                    		MOV.L R2, 04H[R0]
000003E8 FBE2rrrrrrrr            		MOV.L #_L14, R14
000003EE E30E                    		MOV.L R14, [R0]
000003F0 05rrrrrr             A  		BSR _sprintf
000003F4 6280                    		ADD #08H, R0
000003F6 8109                    		MOV.B R1, 05H[R0]
000003F8 38rrrr               W  		BRA L142
000003FB                         L130:	; bb37
                                 ;     242 	} else if (precision == 3 ) { return((char_t)sprintf((char *)str, "%0.3f", (double) n));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",242
000003FB B189                    		MOVU.B 07H[R0], R1
000003FD 6131                    		CMP #03H, R1
000003FF 21rr                    		BNE L132
00000401                         L131:	; bb38
00000401 A882                    		MOV.L 08H[R0], R2
00000403 A889                    		MOV.L 0CH[R0], R1
00000405 6080                    		SUB #08H, R0
00000407 A00A                    		MOV.L R2, 04H[R0]
00000409 FBE2rrrrrrrr            		MOV.L #_L15, R14
0000040F E30E                    		MOV.L R14, [R0]
00000411 05rrrrrr             A  		BSR _sprintf
00000415 6280                    		ADD #08H, R0
00000417 8109                    		MOV.B R1, 05H[R0]
00000419 38rrrr               W  		BRA L142
0000041C                         L132:	; bb45
                                 ;     243 	} else if (precision == 4 ) { return((char_t)sprintf((char *)str, "%0.4f", (double) n));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",243
0000041C B189                    		MOVU.B 07H[R0], R1
0000041E 6141                    		CMP #04H, R1
00000420 21rr                    		BNE L134
00000422                         L133:	; bb46
00000422 A882                    		MOV.L 08H[R0], R2
00000424 A889                    		MOV.L 0CH[R0], R1
00000426 6080                    		SUB #08H, R0
00000428 A00A                    		MOV.L R2, 04H[R0]
0000042A FBE2rrrrrrrr            		MOV.L #_L16, R14
00000430 E30E                    		MOV.L R14, [R0]
00000432 05rrrrrr             A  		BSR _sprintf
00000436 6280                    		ADD #08H, R0
00000438 8109                    		MOV.B R1, 05H[R0]
0000043A 38rrrr               W  		BRA L142
0000043D                         L134:	; bb53
                                 ;     244 	} else if (precision == 5 ) { return((char_t)sprintf((char *)str, "%0.5f", (double) n));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",244
0000043D B189                    		MOVU.B 07H[R0], R1
0000043F 6151                    		CMP #05H, R1
00000441 21rr                    		BNE L136
00000443                         L135:	; bb54
00000443 A882                    		MOV.L 08H[R0], R2
00000445 A889                    		MOV.L 0CH[R0], R1
00000447 6080                    		SUB #08H, R0
00000449 A00A                    		MOV.L R2, 04H[R0]
0000044B FBE2rrrrrrrr            		MOV.L #_L17, R14
00000451 E30E                    		MOV.L R14, [R0]
00000453 05rrrrrr             A  		BSR _sprintf
00000457 6280                    		ADD #08H, R0
00000459 8109                    		MOV.B R1, 05H[R0]
0000045B 2Err                 B  		BRA L142
0000045D                         L136:	; bb61
                                 ;     245 	} else if (precision == 6 ) { return((char_t)sprintf((char *)str, "%0.6f", (double) n));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",245
0000045D B189                    		MOVU.B 07H[R0], R1
0000045F 6161                    		CMP #06H, R1
00000461 21rr                    		BNE L138
00000463                         L137:	; bb62
00000463 A882                    		MOV.L 08H[R0], R2
00000465 A889                    		MOV.L 0CH[R0], R1
00000467 6080                    		SUB #08H, R0
00000469 A00A                    		MOV.L R2, 04H[R0]
0000046B FBE2rrrrrrrr            		MOV.L #_L18, R14
00000471 E30E                    		MOV.L R14, [R0]
00000473 05rrrrrr             A  		BSR _sprintf
00000477 6280                    		ADD #08H, R0
00000479 8109                    		MOV.B R1, 05H[R0]
0000047B 2Err                 B  		BRA L142
0000047D                         L138:	; bb69
                                 ;     246 	} else if (precision == 7 ) { return((char_t)sprintf((char *)str, "%0.7f", (double) n));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",246
0000047D B189                    		MOVU.B 07H[R0], R1
0000047F 6171                    		CMP #07H, R1
00000481 A882                    		MOV.L 08H[R0], R2
00000483 A889                    		MOV.L 0CH[R0], R1
00000485 21rr                    		BNE L140
00000487                         L139:	; bb70
00000487 6080                    		SUB #08H, R0
00000489 FBE2rrrrrrrr            		MOV.L #_L19, R14
0000048F E30E                    		MOV.L R14, [R0]
00000491 A00A                    		MOV.L R2, 04H[R0]
00000493 05rrrrrr             A  		BSR _sprintf
00000497 6280                    		ADD #08H, R0
00000499 8109                    		MOV.B R1, 05H[R0]
0000049B 2Err                 B  		BRA L142
0000049D                         L140:	; bb76
0000049D 6080                    		SUB #08H, R0
                                 ;     247 	} else					    { return((char_t)sprintf((char *)str, "%f", (double) n)); }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",247
0000049F FBE2rrrrrrrr            		MOV.L #_L20, R14
000004A5 E30E                    		MOV.L R14, [R0]
000004A7 A00A                    		MOV.L R2, 04H[R0]
000004A9 05rrrrrr             A  		BSR _sprintf
000004AD 6280                    		ADD #08H, R0
000004AF 8109                    		MOV.B R1, 05H[R0]
000004B1 2Err                 B  		BRA L142
000004B3                         L141:	; bb129
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",235
000004B3 A881                    		MOV.L 08H[R0], R1
000004B5 05rrrrrr             A  		BSR __FDclass
000004B9 E301                    		MOV.L R1, [R0]
000004BB 6111                    		CMP #01H, R1
000004BD 3Arrrr               W  		BEQ L122
000004C0 38rrrr               W  		BRA L124
000004C3                         L142:	; bb165
000004C3 C5000506                		MOV.B 05H[R0], 06H[R0]
                                 ;     248 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",248
000004C7 B181                    		MOVU.B 06H[R0], R1
000004C9 6704                    		RTSD #10H
000004CB                         _compute_checksum:
                                 		.STACK	_compute_checksum=20
                                 ;     249 
                                 ;     250 /*
                                 ;     251  * compute_checksum() - calculate the checksum for a string
                                 ;     252  *
                                 ;     253  *	Stops calculation on null termination or length value if non-zero.
                                 ;     254  *
                                 ;     255  * 	This is based on the the Java hashCode function.
                                 ;     256  *	See http://en.wikipedia.org/wiki/Java_hashCode()
                                 ;     257  */
                                 ;     258 #define HASHMASK 9999
                                 ;     259 
                                 ;     260 uint16_t compute_checksum(char_t const *string, const uint16_t length)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",260
000004CB 7100F0                  		ADD #0FFFFFFF0H, R0
000004CE A089                    		MOV.L R1, 0CH[R0]
000004D0 910A                    		MOV.W R2, 0AH[R0]
                                 ;     261 {
                                 ;     262 	uint32_t h = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",262
000004D2 F80600                  		MOV.L #00000000H, [R0]
000004D5                         L144:	; entry.split
000004D5 FB36FF                  		MOV.L #0FFFFFFFFH, R3
000004D8 6602                    		MOV.L #00000000H, R2
                                 ;     263 	uint16_t len = strlen(string);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",263
000004DA A889                    		MOV.L 0CH[R0], R1
000004DC 7F80                    		SUNTIL.B
000004DE FB16FE                  		MOV.L #0FFFFFFFEH, R1
000004E1 4331                    		SUB R3, R1
000004E3 9081                    		MOV.W R1, 04H[R0]
000004E5                         L145:	; entry.split1
                                 ;     264 	if (length != 0) len = min(len, length);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",264
000004E5 B909                    		MOVU.W 0AH[R0], R1
000004E7 6101                    		CMP #00H, R1
000004E9 10                   S  		BEQ L147
000004EA                         L146:	; bb9
000004EA B881                    		MOVU.W 04H[R0], R1
000004EC 06E1050105              		MIN 0AH[R0].UW, R1
000004F1 9081                    		MOV.W R1, 04H[R0]
000004F3                         L147:	; bb20
                                 ;     265     for (uint16_t i=0; i<len; i++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",265
000004F3 3D0300                  		MOV.W #0000H, 06H[R0]
000004F6 2Err                 B  		BRA L149
000004F8                         L148:	; bb21
                                 ;     266 		h = 31 * h + string[i];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",266
000004F8 A88A                    		MOV.L 0CH[R0], R2
000004FA 06C90203                		ADD 06H[R0].UW, R2
000004FE 75111F                  		MUL #1FH, R1
00000501 4821                    		ADD [R2].UB, R1
00000503 E301                    		MOV.L R1, [R0]
00000505 9889                    		MOV.W 06H[R0], R1
00000507 6211                    		ADD #01H, R1
00000509 9089                    		MOV.W R1, 06H[R0]
0000050B                         L149:	; bb33
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",265
0000050B B889                    		MOVU.W 06H[R0], R1
0000050D 06C50102                		CMP 04H[R0].UW, R1
00000511 EC01                    		MOV.L [R0], R1
00000513 29rr                    		BLT L148
00000515                         L150:	; bb41
                                 ;     267     }
                                 ;     268     return (h % HASHMASK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",268
00000515 EF1E                    		MOV.L R1, R14
00000517 FD789E0F27              		DIVU #270FH, R14
0000051C 761E0F27                		MUL #270FH, R14
00000520 43E1                    		SUB R14, R1
00000522 9101                    		MOV.W R1, 08H[R0]
00000524 9901                    		MOV.W 08H[R0], R1
00000526                         L151:	; bb41.split
                                 ;     269 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",269
00000526 5F11                    		MOVU.W R1, R1
00000528 6704                    		RTSD #10H
0000052A                         _SysTickTimer_getValue:
                                 		.STACK	_SysTickTimer_getValue=8
                                 ;     270 
                                 ;     271 /*
                                 ;     272  * SysTickTimer_getValue() - this is a hack to get around some compatibility problems
                                 ;     273  */
                                 ;     274 
                                 ;     275 #ifdef __AVR
                                 ;     276 uint32_t SysTickTimer_getValue()
                                 ;     277 {
                                 ;     278 	return (rtc.sys_ticks);
                                 ;     279 }
                                 ;     280 #endif // __AVR
                                 ;     281 
                                 ;     282 #ifdef __ARM
                                 ;     283 uint32_t SysTickTimer_getValue()
                                 ;     284 {
                                 ;     285 	return (SysTickTimer.getValue());
                                 ;     286 }
                                 ;     287 #endif // __ARM
                                 ;     288 
                                 ;     289 #ifdef __RX
                                 ;     290 uint32_t SysTickTimer_getValue()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",290
0000052A 6040                    		SUB #04H, R0
                                 ;     291 {
                                 ;     292 	return (0); //RXMOD
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",292
0000052C F80600                  		MOV.L #00000000H, [R0]
0000052F 6601                    		MOV.L #00000000H, R1
00000531                         L153:	; entry.split
                                 ;     293 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\util.c",293
00000531 6701                    		RTSD #04H
                                 ;     294 #endif // __ARM
                                 ;     295 
                                 ;     296 #ifdef __cplusplus
                                 ;     297 }
                                 ;     298 #endif
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 6E616E                  		.byte	"nan"
00000003 00                      		.byte	00H
00000004                         _L11:
00000004 696E66                  		.byte	"inf"
00000007 00                      		.byte	00H
00000008                         _L12:
00000008 25302E30                		.byte	"%0.0f"
         66                      
0000000D 00                      		.byte	00H
0000000E                         _L13:
0000000E 25302E31                		.byte	"%0.1f"
         66                      
00000013 00                      		.byte	00H
00000014                         _L14:
00000014 25302E32                		.byte	"%0.2f"
         66                      
00000019 00                      		.byte	00H
0000001A                         _L15:
0000001A 25302E33                		.byte	"%0.3f"
         66                      
0000001F 00                      		.byte	00H
00000020                         _L16:
00000020 25302E34                		.byte	"%0.4f"
         66                      
00000025 00                      		.byte	00H
00000026                         _L17:
00000026 25302E35                		.byte	"%0.5f"
         66                      
0000002B 00                      		.byte	00H
0000002C                         _L18:
0000002C 25302E36                		.byte	"%0.6f"
         66                      
00000031 00                      		.byte	00H
00000032                         _L19:
00000032 25302E37                		.byte	"%0.7f"
         66                      
00000037 00                      		.byte	00H
00000038                         _L20:
00000038 2566                    		.byte	"%f"
0000003A 00                      		.byte	00H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _vector:
00000000(00000018H)              		.blkl	6
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     01128   LINES

Section List

Attr         Size               Name
CODE     0000001331(00000533H)  P
ROMDATA  0000000059(0000003BH)  L
DATA     0000000024(00000018H)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\util.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\CompactaXP_build\util.lst
-output=C:\Workspace\e2studio\git\MT01\CompactaXP_build\src\cnc\util.obj
