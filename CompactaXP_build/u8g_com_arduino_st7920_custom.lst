* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Thu Mar 09 14:18:45 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  09-Mar-2017 14:18:45
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=u8g_com_arduino_st7920_custom.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=u8g_com_arduino_st7920_custom.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=1,EASYMAK=0,MOBILE=0,FREE_RTOS_PP
                                 ;u8g_com_arduino_st7920_custom.c
                                 
                                 		.glb	_u8g_com_arduino_st7920_custom_fn
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _u8g_com_arduino_st7920_custom_fn:
                                 		.STACK	_u8g_com_arduino_st7920_custom_fn=20
                                 ;       1 /*
                                 ;       2   
                                 ;       3   u8g_com_arduino_st7920_custom.c
                                 ;       4   
                                 ;       5   Additional COM device, initially introduced for 3D Printer community
                                 ;       6   Implements a fast SW SPI com subsystem
                                 ;       7 
                                 ;       8   Universal 8bit Graphics Library
                                 ;       9   
                                 ;      10   Copyright (c) 2011, olikraus@gmail.com
                                 ;      11   All rights reserved.
                                 ;      12 
                                 ;      13   Redistribution and use in source and binary forms, with or without modification, 
                                 ;      14   are permitted provided that the following conditions are met:
                                 ;      15 
                                 ;      16   * Redistributions of source code must retain the above copyright notice, this list 
                                 ;      17     of conditions and the following disclaimer.
                                 ;      18     
                                 ;      19   * Redistributions in binary form must reproduce the above copyright notice, this 
                                 ;      20     list of conditions and the following disclaimer in the documentation and/or other 
                                 ;      21     materials provided with the distribution.
                                 ;      22 
                                 ;      23   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
                                 ;      24   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
                                 ;      25   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
                                 ;      26   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
                                 ;      27   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
                                 ;      28   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
                                 ;      29   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
                                 ;      30   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
                                 ;      31   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
                                 ;      32   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
                                 ;      33   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
                                 ;      34   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
                                 ;      35   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
                                 ;      36 
                                 ;      37   A special SPI interface for ST7920 controller
                                 ;      38 
                                 ;      39   Update for ATOMIC operation done (01 Jun 2013)
                                 ;      40     U8G_ATOMIC_OR(ptr, val)
                                 ;      41     U8G_ATOMIC_AND(ptr, val)
                                 ;      42     U8G_ATOMIC_START();
                                 ;      43     U8G_ATOMIC_END();
                                 ;      44 
                                 ;      45 
                                 ;      46 */
                                 ;      47 
                                 ;      48 #include "u8g.h"
                                 ;      49 
                                 ;      50 #if defined(ARDUINO)
                                 ;      51 
                                 ;      52 #if ARDUINO < 100 
                                 ;      53 #include <WProgram.h>    
                                 ;      54 #include "wiring_private.h"
                                 ;      55 #include "pins_arduino.h"
                                 ;      56 
                                 ;      57 #else 
                                 ;      58 #include <Arduino.h> 
                                 ;      59 #include "wiring_private.h"
                                 ;      60 #endif
                                 ;      61 
                                 ;      62 #if defined(__AVR__)
                                 ;      63 
                                 ;      64 static uint8_t u8g_bitData, u8g_bitNotData;
                                 ;      65 static uint8_t u8g_bitClock, u8g_bitNotClock;
                                 ;      66 static volatile uint8_t *u8g_outData;
                                 ;      67 static volatile uint8_t *u8g_outClock;
                                 ;      68 
                                 ;      69 static void u8g_com_arduino_init_shift_out(uint8_t dataPin, uint8_t clockPin)
                                 ;      70 {
                                 ;      71   u8g_outData = portOutputRegister(digitalPinToPort(dataPin));
                                 ;      72   u8g_outClock = portOutputRegister(digitalPinToPort(clockPin));
                                 ;      73   u8g_bitData = digitalPinToBitMask(dataPin);
                                 ;      74   u8g_bitClock = digitalPinToBitMask(clockPin);
                                 ;      75 
                                 ;      76   u8g_bitNotClock = u8g_bitClock;
                                 ;      77   u8g_bitNotClock ^= 0x0ff;
                                 ;      78 
                                 ;      79   u8g_bitNotData = u8g_bitData;
                                 ;      80   u8g_bitNotData ^= 0x0ff;
                                 ;      81 }
                                 ;      82 
                                 ;      83 static void u8g_com_arduino_do_shift_out_msb_first(uint8_t val) U8G_NOINLINE;
                                 ;      84 static void u8g_com_arduino_do_shift_out_msb_first(uint8_t val)
                                 ;      85 {
                                 ;      86   uint8_t cnt = 8;
                                 ;      87   uint8_t bitData = u8g_bitData;
                                 ;      88   uint8_t bitNotData = u8g_bitNotData;
                                 ;      89   uint8_t bitClock = u8g_bitClock;
                                 ;      90   uint8_t bitNotClock = u8g_bitNotClock;
                                 ;      91   volatile uint8_t *outData = u8g_outData;
                                 ;      92   volatile uint8_t *outClock = u8g_outClock;
                                 ;      93   
                                 ;      94   
                                 ;      95   U8G_ATOMIC_START();
                                 ;      96   bitData |= *outData;
                                 ;      97   bitNotData &= *outData;
                                 ;      98   do
                                 ;      99   {
                                 ;     100     if ( val & 128 )
                                 ;     101       *outData = bitData;
                                 ;     102     else
                                 ;     103       *outData = bitNotData;
                                 ;     104 
                                 ;     105     /*
                                 ;     106     *outClock |= bitClock;
                                 ;     107     val <<= 1;
                                 ;     108     cnt--;
                                 ;     109     *outClock &= bitNotClock;
                                 ;     110     */
                                 ;     111 
                                 ;     112     val <<= 1;
                                 ;     113     *outClock &= bitNotClock;
                                 ;     114     cnt--;
                                 ;     115     // removed micro delays, because AVRs are too slow and the delay is not required
                                 ;     116     //u8g_MicroDelay();
                                 ;     117     *outClock |= bitClock;
                                 ;     118     //u8g_MicroDelay();
                                 ;     119   } while( cnt != 0 );
                                 ;     120   U8G_ATOMIC_END();
                                 ;     121 }
                                 ;     122 
                                 ;     123 #elif defined(__18CXX) || defined(__PIC32MX)
                                 ;     124 
                                 ;     125 uint16_t dog_bitData, dog_bitNotData;
                                 ;     126 uint16_t dog_bitClock, dog_bitNotClock;
                                 ;     127 volatile uint32_t *dog_outData;
                                 ;     128 volatile uint32_t *dog_outClock;
                                 ;     129 volatile uint32_t dog_pic32_spi_tmp;
                                 ;     130 
                                 ;     131 static void u8g_com_arduino_init_shift_out(uint8_t dataPin, uint8_t clockPin)
                                 ;     132 {
                                 ;     133   dog_outData = portOutputRegister(digitalPinToPort(dataPin));
                                 ;     134   dog_outClock = portOutputRegister(digitalPinToPort(clockPin));
                                 ;     135   dog_bitData = digitalPinToBitMask(dataPin);
                                 ;     136   dog_bitClock = digitalPinToBitMask(clockPin);
                                 ;     137 
                                 ;     138   dog_bitNotClock = dog_bitClock;
                                 ;     139   dog_bitNotClock ^= 0x0ffff;
                                 ;     140 
                                 ;     141   dog_bitNotData = dog_bitData;
                                 ;     142   dog_bitNotData ^= 0x0ffff;
                                 ;     143 }
                                 ;     144 
                                 ;     145 static void u8g_com_arduino_do_shift_out_msb_first(uint8_t val)
                                 ;     146 {
                                 ;     147   uint8_t cnt = 8;
                                 ;     148   U8G_ATOMIC_START();
                                 ;     149   do
                                 ;     150   {
                                 ;     151     if ( val & 128 )
                                 ;     152 	*dog_outData |= dog_bitData;
                                 ;     153     else
                                 ;     154 	*dog_outData &= dog_bitNotData;    
                                 ;     155     val <<= 1;
                                 ;     156     //u8g_MicroDelay();
                                 ;     157     //*dog_outClock |= dog_bitClock;
                                 ;     158     *dog_outClock &= dog_bitNotClock;
                                 ;     159     cnt--;
                                 ;     160     u8g_MicroDelay();
                                 ;     161     //*dog_outClock &= dog_bitNotClock;
                                 ;     162     *dog_outClock |= dog_bitClock;
                                 ;     163     u8g_MicroDelay();
                                 ;     164     
                                 ;     165   } while( cnt != 0 );
                                 ;     166   U8G_ATOMIC_END();
                                 ;     167 }
                                 ;     168 
                                 ;     169 #else
                                 ;     170 
                                 ;     171 /* default interface, Arduino DUE (__arm__) */
                                 ;     172 
                                 ;     173 uint8_t u8g_data_custom_pin;
                                 ;     174 uint8_t u8g_clock_custom_pin;
                                 ;     175 
                                 ;     176 static void u8g_com_arduino_init_shift_out(uint8_t dataPin, uint8_t clockPin)
                                 ;     177 {
                                 ;     178   u8g_data_custom_pin = dataPin;
                                 ;     179   u8g_clock_custom_pin = clockPin;
                                 ;     180 }
                                 ;     181 
                                 ;     182 static void u8g_com_arduino_do_shift_out_msb_first(uint8_t val)
                                 ;     183 {
                                 ;     184   uint8_t cnt = 8;
                                 ;     185   do
                                 ;     186   {
                                 ;     187     if ( val & 128 )
                                 ;     188 	digitalWrite(u8g_data_custom_pin, HIGH);
                                 ;     189     else
                                 ;     190 	digitalWrite(u8g_data_custom_pin, LOW);
                                 ;     191     val <<= 1;
                                 ;     192     //u8g_MicroDelay();
                                 ;     193     digitalWrite(u8g_clock_custom_pin, LOW);
                                 ;     194     cnt--;
                                 ;     195     u8g_MicroDelay();
                                 ;     196     digitalWrite(u8g_clock_custom_pin, HIGH);
                                 ;     197     u8g_MicroDelay();    
                                 ;     198   } while( cnt != 0 );
                                 ;     199 }
                                 ;     200 
                                 ;     201 #endif 
                                 ;     202 
                                 ;     203 
                                 ;     204 static void u8g_com_arduino_st7920_write_byte_seq(uint8_t rs, uint8_t *ptr, uint8_t len)
                                 ;     205 {
                                 ;     206   uint8_t i;
                                 ;     207 
                                 ;     208   if ( rs == 0 )
                                 ;     209   {
                                 ;     210     /* command */
                                 ;     211     u8g_com_arduino_do_shift_out_msb_first(0x0f8);
                                 ;     212   }
                                 ;     213   else if ( rs == 1 )
                                 ;     214   {
                                 ;     215     /* data */
                                 ;     216     u8g_com_arduino_do_shift_out_msb_first(0x0fa);
                                 ;     217   }
                                 ;     218 
                                 ;     219   while( len > 0 )
                                 ;     220   {
                                 ;     221     u8g_com_arduino_do_shift_out_msb_first(*ptr & 0x0f0);
                                 ;     222     u8g_com_arduino_do_shift_out_msb_first(*ptr << 4);
                                 ;     223     ptr++;
                                 ;     224     len--;
                                 ;     225     u8g_10MicroDelay();
                                 ;     226   }
                                 ;     227   
                                 ;     228   for( i = 0; i < 4; i++ )
                                 ;     229     u8g_10MicroDelay();
                                 ;     230 }
                                 ;     231 
                                 ;     232 static void u8g_com_arduino_st7920_write_byte(uint8_t rs, uint8_t val)
                                 ;     233 {
                                 ;     234   uint8_t i;
                                 ;     235 
                                 ;     236   if ( rs == 0 )
                                 ;     237   {
                                 ;     238     /* command */
                                 ;     239     u8g_com_arduino_do_shift_out_msb_first(0x0f8);
                                 ;     240   }
                                 ;     241   else if ( rs == 1 )
                                 ;     242   {
                                 ;     243     /* data */
                                 ;     244     u8g_com_arduino_do_shift_out_msb_first(0x0fa);
                                 ;     245   }
                                 ;     246   
                                 ;     247   u8g_com_arduino_do_shift_out_msb_first(val & 0x0f0);
                                 ;     248   u8g_com_arduino_do_shift_out_msb_first(val << 4);
                                 ;     249   
                                 ;     250   for( i = 0; i < 4; i++ )
                                 ;     251     u8g_10MicroDelay();
                                 ;     252     
                                 ;     253 }
                                 ;     254 
                                 ;     255 
                                 ;     256 uint8_t u8g_com_arduino_st7920_custom_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
                                 ;     257 {
                                 ;     258   switch(msg)
                                 ;     259   {
                                 ;     260     case U8G_COM_MSG_INIT:
                                 ;     261       u8g_com_arduino_assign_pin_output_high(u8g);
                                 ;     262       u8g_com_arduino_digital_write(u8g, U8G_PI_CS, LOW);
                                 ;     263       // u8g_com_arduino_digital_write(u8g, U8G_PI_SCK, LOW);
                                 ;     264       u8g_com_arduino_digital_write(u8g, U8G_PI_SCK, HIGH);
                                 ;     265       u8g_com_arduino_digital_write(u8g, U8G_PI_MOSI, LOW);
                                 ;     266       u8g_com_arduino_init_shift_out(u8g->pin_list[U8G_PI_MOSI], u8g->pin_list[U8G_PI_SCK]);
                                 ;     267       u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: command mode */
                                 ;     268       break;
                                 ;     269     
                                 ;     270     case U8G_COM_MSG_STOP:
                                 ;     271       break;
                                 ;     272 
                                 ;     273     case U8G_COM_MSG_RESET:
                                 ;     274       if ( u8g->pin_list[U8G_PI_RESET] != U8G_PIN_NONE )
                                 ;     275 	u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val);
                                 ;     276       break;
                                 ;     277       
                                 ;     278     case U8G_COM_MSG_CHIP_SELECT:
                                 ;     279       if ( arg_val == 0 )
                                 ;     280       {
                                 ;     281         /* disable, note: the st7920 has an active high chip select */
                                 ;     282         u8g_com_arduino_digital_write(u8g, U8G_PI_CS, LOW);
                                 ;     283       }
                                 ;     284       else
                                 ;     285       {
                                 ;     286         /* enable */
                                 ;     287         //u8g_com_arduino_digital_write(u8g, U8G_PI_SCK, HIGH);
                                 ;     288         u8g_com_arduino_digital_write(u8g, U8G_PI_CS, HIGH);
                                 ;     289       }
                                 ;     290       break;
                                 ;     291 
                                 ;     292     case U8G_COM_MSG_WRITE_BYTE:
                                 ;     293       u8g_com_arduino_st7920_write_byte( u8g->pin_list[U8G_PI_A0_STATE], arg_val);
                                 ;     294       //u8g->pin_list[U8G_PI_A0_STATE] = 2; 
                                 ;     295       //u8g_arduino_sw_spi_shift_out(u8g->pin_list[U8G_PI_MOSI], u8g->pin_list[U8G_PI_SCK], arg_val);
                                 ;     296       break;
                                 ;     297     
                                 ;     298     case U8G_COM_MSG_WRITE_SEQ:
                                 ;     299       u8g_com_arduino_st7920_write_byte_seq(u8g->pin_list[U8G_PI_A0_STATE], (uint8_t *)arg_ptr, arg_val);
                                 ;     300       break;
                                 ;     301 
                                 ;     302       case U8G_COM_MSG_WRITE_SEQ_P:
                                 ;     303       {
                                 ;     304         register uint8_t *ptr = arg_ptr;
                                 ;     305         while( arg_val > 0 )
                                 ;     306         {
                                 ;     307           u8g_com_arduino_st7920_write_byte(u8g->pin_list[U8G_PI_A0_STATE], u8g_pgm_read(ptr) );
                                 ;     308           //u8g->pin_list[U8G_PI_A0_STATE] = 2; 
                                 ;     309           ptr++;
                                 ;     310           arg_val--;
                                 ;     311         }
                                 ;     312       }
                                 ;     313       break;
                                 ;     314       
                                 ;     315     case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
                                 ;     316       u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
                                 ;     317       break;
                                 ;     318   }
                                 ;     319   return 1;
                                 ;     320 }
                                 ;     321 
                                 ;     322 #else /* ARDUINO */
                                 ;     323 
                                 ;     324 uint8_t u8g_com_arduino_st7920_custom_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_com_arduino_st7920_custom.c",324
00000000 7100F0                  		ADD #0FFFFFFF0H, R0
00000003 A089                    		MOV.L R1, 0CH[R0]
00000005 828A                    		MOV.B R2, 0BH[R0]
00000007 8283                    		MOV.B R3, 0AH[R0]
00000009 A00C                    		MOV.L R4, 04H[R0]
                                 ;     325 {
                                 ;     326   return 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_com_arduino_st7920_custom.c",326
0000000B 3C0301                  		MOV.B #01H, 03H[R0]
0000000E B089                    		MOVU.B 03H[R0], R1
00000010                         L11:	; entry.split
                                 ;     327 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\Display\u8g_com_arduino_st7920_custom.c",327
00000010 5B11                    		MOVU.B R1, R1
00000012 6704                    		RTSD #10H
                                 ;     328 
                                 ;     329 #endif /* ARDUINO */
                                 ;     330 
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00373   LINES

Section List

Attr         Size               Name
CODE     0000000020(00000014H)  P

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx4D06\$ccrx\u8g_com_arduino_st7920_custom.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\u8g_com_arduino_st7920_custom.lst
-output=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\src\Display\u8g_com_arduino_st7920_custom.obj
