* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Thu Mar 09 14:18:40 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  09-Mar-2017 14:18:40
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=planner.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=planner.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=1,EASYMAK=0,MOBILE=0,FREE_RTOS_PP
                                 ;planner.c
                                 
                                 		.glb	_st_pre
                                 		.glb	_mb
                                 		.glb	_mm
                                 		.glb	_mr
                                 		.glb	_planner_init
                                 		.glb	_planner_init_assertions
                                 		.glb	_planner_test_assertions
                                 		.glb	_mp_flush_planner
                                 		.glb	_cm_abort_arc
                                 		.glb	_cm_set_motion_state
                                 		.glb	_mp_set_planner_position
                                 		.glb	_mp_set_runtime_position
                                 		.glb	_mp_set_steps_to_runtime_position
                                 		.glb	_ik_kinematics
                                 		.glb	_en_set_encoder_steps
                                 		.glb	_mp_queue_command
                                 		.glb	_cm_hard_alarm
                                 		.glb	_st_prep_command
                                 		.glb	_mp_runtime_command
                                 		.glb	_cm_cycle_end
                                 		.glb	_mp_dwell
                                 		.glb	_st_prep_dwell
                                 		.glb	_mp_get_planner_buffers_available
                                 		.glb	_mp_init_buffers
                                 		.glb	_mp_get_write_buffer
                                 		.glb	_rpt_exception
                                 		.glb	_mp_unget_write_buffer
                                 		.glb	_mp_commit_write_buffer
                                 		.glb	_qr_request_queue_report
                                 		.glb	_st_request_exec_move
                                 		.glb	_mp_get_run_buffer
                                 		.glb	_mp_free_run_buffer
                                 		.glb	_mp_get_first_buffer
                                 		.glb	_mp_get_last_buffer
                                 		.glb	_mp_clear_buffer
                                 		.glb	_mp_copy_buffer
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _planner_init:
                                 		.STACK	_planner_init=4
                                 ;       1 /*
                                 ;       2  * planner.c - Cartesian trajectory planning and motion execution
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart, Jr.
                                 ;       6  * Copyright (c) 2012 - 2015 Rob Giseburt
                                 ;       7  *
                                 ;       8  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       9  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;      10  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      11  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      12  *
                                 ;      13  * As a special exception, you may use this file as part of a software library without
                                 ;      14  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      15  * inline functions from this file, or you compile this file and link it with  other
                                 ;      16  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      17  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      18  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      19  * GNU General Public License.
                                 ;      20  *
                                 ;      21  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      22  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      23  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      24  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      25  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      26  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      27  */
                                 ;      28 /* --- Planner Notes ----
                                 ;      29  *
                                 ;      30  *	The planner works below the canonical machine and above the motor mapping
                                 ;      31  *	and stepper execution layers. A rudimentary multitasking capability is
                                 ;      32  *	implemented for long-running commands such as lines, arcs, and dwells.
                                 ;      33  *	These functions are coded as non-blocking continuations - which are simple
                                 ;      34  *	state machines that are re-entered multiple times until a particular
                                 ;      35  *	operation is complete. These functions have 2 parts - the initial call,
                                 ;      36  *	which sets up the local context, and callbacks (continuations) that are
                                 ;      37  *	called from the main loop (in controller.c).
                                 ;      38  *
                                 ;      39  *	One important concept is isolation of the three layers of the data model -
                                 ;      40  *	the Gcode model (gm), planner model (bf queue & mm), and runtime model (mr).
                                 ;      41  *	These are designated as "model", "planner" and "runtime" in function names.
                                 ;      42  *
                                 ;      43  *	The Gcode model is owned by the canonical machine and should only be accessed
                                 ;      44  *	by cm_xxxx() functions. Data from the Gcode model is transferred to the planner
                                 ;      45  *	by the mp_xxx() functions called by the canonical machine.
                                 ;      46  *
                                 ;      47  *	The planner should only use data in the planner model. When a move (block)
                                 ;      48  *	is ready for execution the planner data is transferred to the runtime model,
                                 ;      49  *	which should also be isolated.
                                 ;      50  *
                                 ;      51  *	Lower-level models should never use data from upper-level models as the data
                                 ;      52  *	may have changed and lead to unpredictable results.
                                 ;      53  */
                                 ;      54 #include "tinyg.h"
                                 ;      55 #include "config.h"
                                 ;      56 #include "canonical_machine.h"
                                 ;      57 #include "plan_arc.h"
                                 ;      58 #include "planner.h"
                                 ;      59 #include "kinematics.h"
                                 ;      60 #include "stepper.h"
                                 ;      61 #include "encoder.h"
                                 ;      62 #include "report.h"
                                 ;      63 #include "util.h"
                                 ;      64 /*
                                 ;      65 #ifdef __cplusplus
                                 ;      66 extern "C"{
                                 ;      67 #endif
                                 ;      68 */
                                 ;      69 // Allocate planner structures
                                 ;      70 
                                 ;      71 mpBufferPool_t mb;				// move buffer queue
                                 ;      72 mpMoveMasterSingleton_t mm;		// context for line planning
                                 ;      73 mpMoveRuntimeSingleton_t mr;	// context for line runtime
                                 ;      74 
                                 ;      75 /*
                                 ;      76  * Local Scope Data and Functions
                                 ;      77  */
                                 ;      78 #define _bump(a) ((a<PLANNER_BUFFER_POOL_SIZE-1)?(a+1):0) // buffer incr & wrap
                                 ;      79 #define spindle_speed move_time	// local alias for spindle_speed to the time variable
                                 ;      80 #define value_vector gm.target	// alias for vector of values
                                 ;      81 #define flag_vector unit		// alias for vector of flags
                                 ;      82 
                                 ;      83 // execution routines (NB: These are all called from the LO interrupt)
                                 ;      84 static stat_t _exec_dwell(mpBuf_t *bf);
                                 ;      85 static stat_t _exec_command(mpBuf_t *bf);
                                 ;      86 
                                 ;      87 /*
                                 ;      88  * planner_init()
                                 ;      89  */
                                 ;      90 void planner_init()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",90
00000000 FB3AA001                		MOV.L #000001A0H, R3
00000004 6602                    		MOV.L #00000000H, R2
                                 ;      91 {
                                 ;      92 // If you know all memory has been zeroed by a hard reset you don't need these next 2 lines
                                 ;      93 	memset(&mr, 0, sizeof(mr));	// clear all values, pointers and status
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",93
00000006 FB12rrrrrrrr            		MOV.L #_mr, R1
0000000C 7F88                    		SSTR.B
0000000E                         L11:	; entry.split
0000000E 75432C                  		MOV.L #0000002CH, R3
00000011 6602                    		MOV.L #00000000H, R2
                                 ;      94 	memset(&mm, 0, sizeof(mm));	// clear all values, pointers and status
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",94
00000013 FB12rrrrrrrr            		MOV.L #_mm, R1
00000019 7F88                    		SSTR.B
0000001B                         L12:	; entry.split1
                                 ;      95 	planner_init_assertions();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",95
0000001B 39rrrr               W  		BSR _planner_init_assertions
0000001E                         L13:	; entry.split2
                                 ;      96 	mp_init_buffers();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",96
0000001E 39rrrr               W  		BSR _mp_init_buffers
00000021 02                      		RTS
00000022                         _planner_init_assertions:
                                 		.STACK	_planner_init_assertions=4
                                 ;      97 }
                                 ;      98 
                                 ;      99 /*
                                 ;     100  * planner_init_assertions()
                                 ;     101  * planner_test_assertions() - test assertions, return error code if violation exists
                                 ;     102  */
                                 ;     103 void planner_init_assertions()
                                 ;     104 {
                                 ;     105 	mm.magic_start = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",105
00000022 FBE2rrrrrrrr            		MOV.L #_mm, R14
00000028 F8E9EF12                		MOV.W #12EFH, [R14]
0000002C                         L15:	; entry.split
                                 ;     106 	mm.magic_end = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",106
0000002C FBE2rrrrrrrr            		MOV.L #_mm, R14
00000032 F9E914EF12              		MOV.W #12EFH, 28H[R14]
00000037                         L16:	; entry.split1
                                 ;     107 	mr.magic_start = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",107
00000037 FBE2rrrrrrrr            		MOV.L #_mr, R14
0000003D F8E9EF12                		MOV.W #12EFH, [R14]
00000041                         L17:	; entry.split2
                                 ;     108 	mr.magic_end = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",108
00000041 FBE2rrrrrrrr            		MOV.L #_mr, R14
00000047 F9E9CEEF12              		MOV.W #12EFH, 019CH[R14]
0000004C 02                      		RTS
0000004D                         _planner_test_assertions:
                                 		.STACK	_planner_test_assertions=12
                                 ;     109 }
                                 ;     110 
                                 ;     111 stat_t planner_test_assertions()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",111
0000004D 6080                    		SUB #08H, R0
                                 ;     112 {
                                 ;     113 	if ((mm.magic_start  != MAGICNUM) || (mm.magic_end 	 != MAGICNUM)) return (STAT_PLANNER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",113
0000004F FBE2rrrrrrrr            		MOV.L #_mm, R14
00000055 5CEE                    		MOVU.W [R14], R14
00000057 760EEF12                		CMP #12EFH, R14
0000005B 21rr                    		BNE L21
0000005D 08                   S  		BRA L20
0000005E                         L19:	; bb1
0000005E 3C065E                  		MOV.B #5EH, 06H[R0]
00000061 38rrrr               W  		BRA L37
00000064                         L20:	; bb7
00000064 FB12rrrrrrrr            		MOV.L #_mm, R1
0000006A BD11                    		MOVU.W 28H[R1], R1
0000006C 7601EF12                		CMP #12EFH, R1
00000070 10                   S  		BEQ L22
00000071                         L21:	; bb12
00000071 F80601                  		MOV.L #00000001H, [R0]
00000074 08                   S  		BRA L23
00000075                         L22:	; bb13
00000075 F80600                  		MOV.L #00000000H, [R0]
00000078                         L23:	; bb14
00000078 EC01                    		MOV.L [R0], R1
0000007A 6101                    		CMP #00H, R1
0000007C 21rr                    		BNE L19
0000007E                         L24:	; bb19
                                 ;     114 	if ((mb.magic_start  != MAGICNUM) || (mb.magic_end 	 != MAGICNUM)) return (STAT_PLANNER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",114
0000007E FBE2rrrrrrrr            		MOV.L #_mb, R14
00000084 5CEE                    		MOVU.W [R14], R14
00000086 760EEF12                		CMP #12EFH, R14
0000008A 21rr                    		BNE L27
0000008C 08                   S  		BRA L26
0000008D                         L25:	; bb20
0000008D 3C065E                  		MOV.B #5EH, 06H[R0]
00000090 2Err                 B  		BRA L37
00000092                         L26:	; bb26
00000092 FBE2rrrrrrrr            		MOV.L #_mb, R14
00000098 5EEE080D                		MOVU.W 1A10H[R14], R14
0000009C 760EEF12                		CMP #12EFH, R14
000000A0 10                   S  		BEQ L28
000000A1                         L27:	; bb31
000000A1 F80601                  		MOV.L #00000001H, [R0]
000000A4 08                   S  		BRA L29
000000A5                         L28:	; bb32
000000A5 F80600                  		MOV.L #00000000H, [R0]
000000A8                         L29:	; bb33
000000A8 EC01                    		MOV.L [R0], R1
000000AA 6101                    		CMP #00H, R1
000000AC 21rr                    		BNE L25
000000AE                         L30:	; bb39
                                 ;     115 	if ((mr.magic_start  != MAGICNUM) || (mr.magic_end 	 != MAGICNUM)) return (STAT_PLANNER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",115
000000AE FBE2rrrrrrrr            		MOV.L #_mr, R14
000000B4 5CEE                    		MOVU.W [R14], R14
000000B6 760EEF12                		CMP #12EFH, R14
000000BA 21rr                    		BNE L33
000000BC 08                   S  		BRA L32
000000BD                         L31:	; bb40
000000BD 3C065E                  		MOV.B #5EH, 06H[R0]
000000C0 2Err                 B  		BRA L37
000000C2                         L32:	; bb46
000000C2 FBE2rrrrrrrr            		MOV.L #_mr, R14
000000C8 5DEECE                  		MOVU.W 019CH[R14], R14
000000CB 760EEF12                		CMP #12EFH, R14
000000CF 10                   S  		BEQ L34
000000D0                         L33:	; bb51
000000D0 F80601                  		MOV.L #00000001H, [R0]
000000D3 08                   S  		BRA L35
000000D4                         L34:	; bb52
000000D4 F80600                  		MOV.L #00000000H, [R0]
000000D7                         L35:	; bb53
000000D7 EC01                    		MOV.L [R0], R1
000000D9 6101                    		CMP #00H, R1
000000DB 21rr                    		BNE L31
000000DD                         L36:	; bb58
                                 ;     116 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",116
000000DD 3C0600                  		MOV.B #00H, 06H[R0]
000000E0                         L37:	; bb60
000000E0 C5000607                		MOV.B 06H[R0], 07H[R0]
                                 ;     117 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",117
000000E4 B189                    		MOVU.B 07H[R0], R1
000000E6 6702                    		RTSD #08H
000000E8                         _mp_flush_planner:
                                 		.STACK	_mp_flush_planner=4
                                 ;     118 
                                 ;     119 /*
                                 ;     120  * mp_flush_planner() - flush all moves in the planner and all arcs
                                 ;     121  *
                                 ;     122  *	Does not affect the move currently running in mr.
                                 ;     123  *	Does not affect mm or gm model positions
                                 ;     124  *	This function is designed to be called during a hold to reset the planner
                                 ;     125  *	This function should not generally be called; call cm_queue_flush() instead
                                 ;     126  */
                                 ;     127 void mp_flush_planner()
                                 ;     128 {
                                 ;     129 	cm_abort_arc();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",129
000000E8 05rrrrrr             A  		BSR _cm_abort_arc
000000EC                         L39:	; entry.split
                                 ;     130 	mp_init_buffers();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",130
000000EC 39rrrr               W  		BSR _mp_init_buffers
000000EF                         L40:	; entry.split1
000000EF 6601                    		MOV.L #00000000H, R1
                                 ;     131 	cm_set_motion_state(MOTION_STOP);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",131
000000F1 05rrrrrr             A  		BSR _cm_set_motion_state
000000F5 02                      		RTS
000000F6                         _mp_set_planner_position:
                                 		.STACK	_mp_set_planner_position=12
                                 ;     132 }
                                 ;     133 
                                 ;     134 /*
                                 ;     135  * mp_set_planner_position() - set planner position for a single axis
                                 ;     136  * mp_set_runtime_position() - set runtime position for a single axis
                                 ;     137  * mp_set_steps_to_runtime_position() - set encoder counts to the runtime position
                                 ;     138  *
                                 ;     139  *	Since steps are in motor space you have to run the position vector through inverse
                                 ;     140  *	kinematics to get the right numbers. This means that in a non-Cartesian robot changing
                                 ;     141  *	any position can result in changes to multiple step values. So this operation is provided
                                 ;     142  *	as a single function and always uses the new position vector as an input.
                                 ;     143  *
                                 ;     144  *	Keeping track of position is complicated by the fact that moves exist in several reference
                                 ;     145  *	frames. The scheme to keep this straight is:
                                 ;     146  *
                                 ;     147  *	 - mm.position	- start and end position for planning
                                 ;     148  *	 - mr.position	- current position of runtime segment
                                 ;     149  *	 - mr.target	- target position of runtime segment
                                 ;     150  *	 - mr.endpoint	- final target position of runtime segment
                                 ;     151  *
                                 ;     152  *	Note that position is set immediately when called and may not be not an accurate representation
                                 ;     153  *	of the tool position. The motors are still processing the action and the real tool position is
                                 ;     154  *	still close to the starting point.
                                 ;     155  */
                                 ;     156 
                                 ;     157 void mp_set_planner_position(uint8_t axis, const float position) { mm.position[axis] = position; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",157
000000F6 6080                    		SUB #08H, R0
000000F8 8189                    		MOV.B R1, 07H[R0]
000000FA E302                    		MOV.L R2, [R0]
000000FC B189                    		MOVU.B 07H[R0], R1
000000FE 6C21                    		SHLL #02H, R1
00000100 FB32rrrrrrrr            		MOV.L #_mm, R3
00000106 4B13                    		ADD R1, R3
00000108 A03A                    		MOV.L R2, 04H[R3]
0000010A 6702                    		RTSD #08H
0000010C                         _mp_set_runtime_position:
                                 		.STACK	_mp_set_runtime_position=12
                                 ;     158 void mp_set_runtime_position(uint8_t axis, const float position) { mr.position[axis] = position; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",158
0000010C 6080                    		SUB #08H, R0
0000010E 8189                    		MOV.B R1, 07H[R0]
00000110 E302                    		MOV.L R2, [R0]
00000112 B189                    		MOVU.B 07H[R0], R1
00000114 6C21                    		SHLL #02H, R1
00000116 FB32rrrrrrrr            		MOV.L #_mr, R3
0000011C 4B13                    		ADD R1, R3
0000011E A3B2                    		MOV.L R2, 38H[R3]
00000120 6702                    		RTSD #08H
00000122                         _mp_set_steps_to_runtime_position:
                                 		.STACK	_mp_set_steps_to_runtime_position=24
                                 ;     159 
                                 ;     160 void mp_set_steps_to_runtime_position()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",160
00000122 7100EC                  		ADD #0FFFFFFECH, R0
                                 ;     161 {
                                 ;     162 	float step_position[MOTORS];
                                 ;     163 	ik_kinematics(mr.position, step_position);				// convert lengths to steps in floating point
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",163
00000125 FB12rrrrrrrr            		MOV.L #_mr, R1
0000012B 711138                  		ADD #38H, R1
0000012E EF02                    		MOV.L R0, R2
00000130 05rrrrrr             A  		BSR _ik_kinematics
00000134                         L44:	; entry.split
                                 ;     164 	for (uint8_t motor = MOTOR_1; motor < MOTORS; motor++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",164
00000134 3C8300                  		MOV.B #00H, 13H[R0]
00000137 2Err                 B  		BRA L51
00000139                         L45:	; bb
                                 ;     165 		mr.target_steps[motor] = step_position[motor];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",165
00000139 B489                    		MOVU.B 13H[R0], R1
0000013B EF0E                    		MOV.L R0, R14
0000013D FE61EE                  		MOV.L [R1,R14], R14
00000140 6C21                    		SHLL #02H, R1
00000142 FBF2rrrrrrrr            		MOV.L #_mr, R15
00000148 4B1F                    		ADD R1, R15
0000014A E7FE2C                  		MOV.L R14, 0B0H[R15]
0000014D                         L46:	; bb.split
                                 ;     166 		mr.position_steps[motor] = step_position[motor];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",166
0000014D B489                    		MOVU.B 13H[R0], R1
0000014F EF0E                    		MOV.L R0, R14
00000151 FE61EE                  		MOV.L [R1,R14], R14
00000154 6C21                    		SHLL #02H, R1
00000156 FBF2rrrrrrrr            		MOV.L #_mr, R15
0000015C 4B1F                    		ADD R1, R15
0000015E E7FE30                  		MOV.L R14, 0C0H[R15]
00000161                         L47:	; bb.split1
                                 ;     167 		mr.commanded_steps[motor] = step_position[motor];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",167
00000161 B489                    		MOVU.B 13H[R0], R1
00000163 EF0E                    		MOV.L R0, R14
00000165 FE61EE                  		MOV.L [R1,R14], R14
00000168 6C21                    		SHLL #02H, R1
0000016A FBF2rrrrrrrr            		MOV.L #_mr, R15
00000170 4B1F                    		ADD R1, R15
00000172 E7FE34                  		MOV.L R14, 0D0H[R15]
00000175                         L48:	; bb.split2
                                 ;     168 		en_set_encoder_steps(motor, step_position[motor]);	// write steps to encoder register
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",168
00000175 B489                    		MOVU.B 13H[R0], R1
00000177 EF0E                    		MOV.L R0, R14
00000179 FE61E2                  		MOV.L [R1,R14], R2
0000017C 05rrrrrr             A  		BSR _en_set_encoder_steps
00000180                         L49:	; bb.split3
                                 ;     169 
                                 ;     170 		// These must be zero:
                                 ;     171 		mr.following_error[motor] = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",171
00000180 B489                    		MOVU.B 13H[R0], R1
00000182 6C21                    		SHLL #02H, R1
00000184 FBE2rrrrrrrr            		MOV.L #_mr, R14
0000018A 4B1E                    		ADD R1, R14
0000018C F9E63C00                		MOV.L #00000000H, 0F0H[R14]
00000190                         L50:	; bb.split4
                                 ;     172 		st_pre.mot[motor].corrected_steps = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",172
00000190 B489                    		MOVU.B 13H[R0], R1
00000192 75111C                  		MUL #1CH, R1
00000195 FB22rrrrrrrr            		MOV.L #_st_pre, R2
0000019B 4B12                    		ADD R1, R2
0000019D 3E2800                  		MOV.L #00000000H, 20H[R2]
000001A0 B489                    		MOVU.B 13H[R0], R1
000001A2 6211                    		ADD #01H, R1
000001A4 8489                    		MOV.B R1, 13H[R0]
000001A6                         L51:	; bb42
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",164
000001A6 B489                    		MOVU.B 13H[R0], R1
000001A8 6141                    		CMP #04H, R1
000001AA 29rr                    		BLT L45
000001AC                         L52:	; return
                                 ;     173 	}
                                 ;     174 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",174
000001AC 6705                    		RTSD #14H
000001AE                         _mp_queue_command:
                                 		.STACK	_mp_queue_command=24
                                 ;     175 
                                 ;     176 /************************************************************************************
                                 ;     177  * mp_queue_command() - queue a synchronous Mcode, program control, or other command
                                 ;     178  * _exec_command() 	  - callback to execute command
                                 ;     179  *
                                 ;     180  *	How this works:
                                 ;     181  *	  - The command is called by the Gcode interpreter (cm_<command>, e.g. an M code)
                                 ;     182  *	  - cm_ function calls mp_queue_command which puts it in the planning queue (bf buffer).
                                 ;     183  *		This involves setting some parameters and registering a callback to the
                                 ;     184  *		execution function in the canonical machine
                                 ;     185  *	  - the planning queue gets to the function and calls _exec_command()
                                 ;     186  *	  - ...which puts a pointer to the bf buffer in the prep stratuc (st_pre)
                                 ;     187  *	  - When the runtime gets to the end of the current activity (sending steps, counting a dwell)
                                 ;     188  *		if executes mp_runtime_command...
                                 ;     189  *	  - ...which uses the callback function in the bf and the saved parameters in the vectors
                                 ;     190  *	  - To finish up mp_runtime_command() needs to free the bf buffer
                                 ;     191  *
                                 ;     192  *	Doing it this way instead of synchronizing on queue empty simplifies the
                                 ;     193  *	handling of feedholds, feed overrides, buffer flushes, and thread blocking,
                                 ;     194  *	and makes keeping the queue full much easier - therefore avoiding Q starvation
                                 ;     195  */
                                 ;     196 
                                 ;     197 void mp_queue_command(void(*cm_exec)(float[], float[]), float *value, float *flag)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",197
000001AE 7100EC                  		ADD #0FFFFFFECH, R0
000001B1 A101                    		MOV.L R1, 10H[R0]
000001B3 A08A                    		MOV.L R2, 0CH[R0]
000001B5 A083                    		MOV.L R3, 08H[R0]
                                 ;     198 {
                                 ;     199 	mpBuf_t *bf;
                                 ;     200 
                                 ;     201 	// Never supposed to fail as buffer availability was checked upstream in the controller
                                 ;     202 	if ((bf = mp_get_write_buffer()) == NULL) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",202
000001B7 39rrrr               W  		BSR _mp_get_write_buffer
000001BA E301                    		MOV.L R1, [R0]
000001BC 6101                    		CMP #00H, R1
000001BE 18                   S  		BNE L56
000001BF                         L54:	; bb6
000001BF 66E1                    		MOV.L #0000000EH, R1
                                 ;     203 		cm_hard_alarm(STAT_BUFFER_FULL_FATAL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",203
000001C1 05rrrrrr             A  		BSR _cm_hard_alarm
000001C5                         L55:	; bb6.split
                                 ;     204 		return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",204
000001C5 6705                    		RTSD #14H
000001C7                         L56:	; bb12
                                 ;     205 	}
                                 ;     206 
                                 ;     207 	bf->move_type = MOVE_TYPE_COMMAND;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",207
000001C7 EC01                    		MOV.L [R0], R1
000001C9 3C9503                  		MOV.B #03H, 15H[R1]
000001CC                         L57:	; bb12.split
                                 ;     208 	bf->bf_func = _exec_command;						// callback to planner queue exec function
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",208
000001CC EC01                    		MOV.L [R0], R1
000001CE FB22rrrrrrrr            		MOV.L #__$_exec_command, R2
000001D4 A092                    		MOV.L R2, 08H[R1]
000001D6                         L58:	; bb12.split1
                                 ;     209 	bf->cm_func = cm_exec;								// callback to canonical machine exec function
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",209
000001D6 A901                    		MOV.L 10H[R0], R1
000001D8 EC02                    		MOV.L [R0], R2
000001DA A0A9                    		MOV.L R1, 0CH[R2]
000001DC                         L59:	; bb12.split2
                                 ;     210 
                                 ;     211 	for (uint8_t axis = AXIS_X; axis < AXES; axis++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",211
000001DC 3C0700                  		MOV.B #00H, 07H[R0]
000001DF 2Err                 B  		BRA L62
000001E1                         L60:	; bb20
                                 ;     212 		bf->value_vector[axis] = value[axis];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",212
000001E1 B189                    		MOVU.B 07H[R0], R1
000001E3 A88A                    		MOV.L 0CH[R0], R2
000001E5 FE6122                  		MOV.L [R1,R2], R2
000001E8 6C21                    		SHLL #02H, R1
000001EA 068801                  		ADD [R0].L, R1
000001ED A79A                    		MOV.L R2, 7CH[R1]
000001EF                         L61:	; bb20.split
                                 ;     213 		bf->flag_vector[axis] = flag[axis];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",213
000001EF B189                    		MOVU.B 07H[R0], R1
000001F1 A882                    		MOV.L 08H[R0], R2
000001F3 FE6122                  		MOV.L [R1,R2], R2
000001F6 6C21                    		SHLL #02H, R1
000001F8 068801                  		ADD [R0].L, R1
000001FB A19A                    		MOV.L R2, 1CH[R1]
000001FD B189                    		MOVU.B 07H[R0], R1
000001FF 6211                    		ADD #01H, R1
00000201 8189                    		MOV.B R1, 07H[R0]
00000203                         L62:	; bb46
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",211
00000203 B189                    		MOVU.B 07H[R0], R1
00000205 6161                    		CMP #06H, R1
00000207 29rr                    		BLT L60
00000209                         L63:	; bb52
00000209 6631                    		MOV.L #00000003H, R1
                                 ;     214 	}
                                 ;     215 	mp_commit_write_buffer(MOVE_TYPE_COMMAND);			// must be final operation before exit
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",215
0000020B 39rrrr               W  		BSR _mp_commit_write_buffer
0000020E 6705                    		RTSD #14H
00000210                         __$_exec_command:
                                 		.STACK	__$_exec_command=12
                                 ;     216 }
                                 ;     217 
                                 ;     218 static stat_t _exec_command(mpBuf_t *bf)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",218
00000210 6080                    		SUB #08H, R0
00000212 A009                    		MOV.L R1, 04H[R0]
                                 ;     219 {
                                 ;     220 	st_prep_command(bf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",220
00000214 05rrrrrr             A  		BSR _st_prep_command
00000218                         L65:	; entry.split
                                 ;     221 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",221
00000218 3C0300                  		MOV.B #00H, 03H[R0]
0000021B B089                    		MOVU.B 03H[R0], R1
0000021D                         L66:	; entry.split1
                                 ;     222 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",222
0000021D 5B11                    		MOVU.B R1, R1
0000021F 6702                    		RTSD #08H
00000221                         _mp_runtime_command:
                                 		.STACK	_mp_runtime_command=12
                                 ;     223 
                                 ;     224 stat_t mp_runtime_command(mpBuf_t *bf)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",224
00000221 6080                    		SUB #08H, R0
00000223 A009                    		MOV.L R1, 04H[R0]
                                 ;     225 {
                                 ;     226 	bf->cm_func(bf->value_vector, bf->flag_vector);		// 2 vectors used by callbacks
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",226
00000225 A89B                    		MOV.L 0CH[R1], R3
00000227 71121C                  		ADD #1CH, R1, R2
0000022A 71117C                  		ADD #7CH, R1
0000022D 7F13                    		JSR R3
0000022F                         L68:	; entry.split
                                 ;     227 	if (mp_free_run_buffer())
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",227
0000022F 39rrrr               W  		BSR _mp_free_run_buffer
00000232 6101                    		CMP #00H, R1
00000234 10                   S  		BEQ L70
00000235                         L69:	; bb12
                                 ;     228 		cm_cycle_end();									// free buffer & perform cycle_end if planner is empty
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",228
00000235 05rrrrrr             A  		BSR _cm_cycle_end
00000239                         L70:	; bb17
                                 ;     229 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",229
00000239 3C0300                  		MOV.B #00H, 03H[R0]
0000023C B089                    		MOVU.B 03H[R0], R1
0000023E                         L71:	; bb17.split
                                 ;     230 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",230
0000023E 5B11                    		MOVU.B R1, R1
00000240 6702                    		RTSD #08H
00000242                         _mp_dwell:
                                 		.STACK	_mp_dwell=20
                                 ;     231 
                                 ;     232 /*************************************************************************
                                 ;     233  * mp_dwell() 	 - queue a dwell
                                 ;     234  * _exec_dwell() - dwell execution
                                 ;     235  *
                                 ;     236  * Dwells are performed by passing a dwell move to the stepper drivers.
                                 ;     237  * When the stepper driver sees a dwell it times the dwell on a separate
                                 ;     238  * timer than the stepper pulse timer.
                                 ;     239  */
                                 ;     240 stat_t mp_dwell(float seconds)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",240
00000242 7100F0                  		ADD #0FFFFFFF0H, R0
00000245 A089                    		MOV.L R1, 0CH[R0]
                                 ;     241 {
                                 ;     242 	mpBuf_t *bf;
                                 ;     243 
                                 ;     244 	if ((bf = mp_get_write_buffer()) == NULL)			// get write buffer or fail
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",244
00000247 39rrrr               W  		BSR _mp_get_write_buffer
0000024A A009                    		MOV.L R1, 04H[R0]
0000024C 6101                    		CMP #00H, R1
0000024E 21rr                    		BNE L74
00000250                         L73:	; bb3
00000250 66E1                    		MOV.L #0000000EH, R1
                                 ;     245 		return(cm_hard_alarm(STAT_BUFFER_FULL_FATAL));	// not ever supposed to fail
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",245
00000252 05rrrrrr             A  		BSR _cm_hard_alarm
00000256 8089                    		MOV.B R1, 03H[R0]
00000258 2Err                 B  		BRA L79
0000025A                         L74:	; bb10
                                 ;     246 
                                 ;     247 	bf->bf_func = _exec_dwell;							// register callback to dwell start
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",247
0000025A A809                    		MOV.L 04H[R0], R1
0000025C FB22rrrrrrrr            		MOV.L #__$_exec_dwell, R2
00000262 A092                    		MOV.L R2, 08H[R1]
00000264                         L75:	; bb10.split
                                 ;     248 	bf->gm.move_time = seconds;							// in seconds, not minutes
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",248
00000264 A889                    		MOV.L 0CH[R0], R1
00000266 A80A                    		MOV.L 04H[R0], R2
00000268 E7212B                  		MOV.L R1, 0ACH[R2]
0000026B                         L76:	; bb10.split1
                                 ;     249 	bf->move_state = MOVE_NEW;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",249
0000026B A809                    		MOV.L 04H[R0], R1
0000026D 3C9701                  		MOV.B #01H, 17H[R1]
00000270                         L77:	; bb10.split2
00000270 6621                    		MOV.L #00000002H, R1
                                 ;     250 	mp_commit_write_buffer(MOVE_TYPE_DWELL);			// must be final operation before exit
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",250
00000272 39rrrr               W  		BSR _mp_commit_write_buffer
00000275                         L78:	; bb10.split3
                                 ;     251 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",251
00000275 3C0300                  		MOV.B #00H, 03H[R0]
00000278                         L79:	; bb20
00000278 C500030B                		MOV.B 03H[R0], 0BH[R0]
                                 ;     252 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",252
0000027C B289                    		MOVU.B 0BH[R0], R1
0000027E 6704                    		RTSD #10H
00000280                         __$_exec_dwell:
                                 		.STACK	__$_exec_dwell=12
                                 ;     253 
                                 ;     254 static stat_t _exec_dwell(mpBuf_t *bf)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",254
00000280 6080                    		SUB #08H, R0
00000282 A009                    		MOV.L R1, 04H[R0]
                                 ;     255 {
                                 ;     256 //	st_prep_dwell((uint32_t)(bf->gm.move_time * 1000000));// convert seconds to uSec
                                 ;     257 	st_prep_dwell((uint32_t)(bf->gm.move_time));// convert seconds to uSec
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",257
00000284 ED1E2B                  		MOV.L 0ACH[R1], R14
00000287 FD721E0000004F          		FCMP #4F000000H, R14
0000028E 29rr                    		BLT L82
00000290                         L81:	; entry
00000290 FD722E000080CF          		FADD #0CF800000H, R14
00000297                         L82:	; entry
00000297 FC97EE                  		FTOI R14, R14
0000029A 7DFE                    		BTST #1FH, R14
0000029C 20rr                    		BEQ L84
0000029E                         L83:	; entry
0000029E FD81EF                  		SHLR #01H, R14, R15
000002A1 641E                    		AND #01H, R14
000002A3 57FE                    		OR R15, R14
000002A5 FC47E1                  		ITOF R14, R1
000002A8 FC8B11                  		FADD R1, R1
000002AB 08                   S  		BRA L85
000002AC                         L84:	; entry
000002AC FC47E1                  		ITOF R14, R1
000002AF                         L85:	; entry
000002AF 05rrrrrr             A  		BSR _st_prep_dwell
000002B3                         L86:	; entry.split
                                 ;     258 	if (mp_free_run_buffer()) cm_cycle_end();			// free buffer & perform cycle_end if planner is empty
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",258
000002B3 39rrrr               W  		BSR _mp_free_run_buffer
000002B6 6101                    		CMP #00H, R1
000002B8 10                   S  		BEQ L88
000002B9                         L87:	; bb8
000002B9 05rrrrrr             A  		BSR _cm_cycle_end
000002BD                         L88:	; bb13
                                 ;     259 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",259
000002BD 3C0300                  		MOV.B #00H, 03H[R0]
000002C0 B089                    		MOVU.B 03H[R0], R1
000002C2                         L89:	; bb13.split
                                 ;     260 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",260
000002C2 5B11                    		MOVU.B R1, R1
000002C4 6702                    		RTSD #08H
000002C6                         _mp_get_planner_buffers_available:
                                 		.STACK	_mp_get_planner_buffers_available=8
                                 ;     261 
                                 ;     262 /**** PLANNER BUFFERS *****************************************************
                                 ;     263  *
                                 ;     264  * Planner buffers are used to queue and operate on Gcode blocks. Each buffer
                                 ;     265  * contains one Gcode block which may be a move, and M code, or other command
                                 ;     266  * that must be executed synchronously with movement.
                                 ;     267  *
                                 ;     268  * Buffers are in a circularly linked list managed by a WRITE pointer and a RUN pointer.
                                 ;     269  * New blocks are populated by (1) getting a write buffer, (2) populating the buffer,
                                 ;     270  * then (3) placing it in the queue (queue write buffer). If an exception occurs
                                 ;     271  * during population you can unget the write buffer before queuing it, which returns
                                 ;     272  * it to the pool of available buffers.
                                 ;     273  *
                                 ;     274  * The RUN buffer is the buffer currently executing. It may be retrieved once for
                                 ;     275  * simple commands, or multiple times for long-running commands like moves. When
                                 ;     276  * the command is complete the run buffer is returned to the pool by freeing it.
                                 ;     277  *
                                 ;     278  * Notes:
                                 ;     279  *	The write buffer pointer only moves forward on _queue_write_buffer, and
                                 ;     280  *	the read buffer pointer only moves forward on free_read calls.
                                 ;     281  *	(test, get and unget have no effect)
                                 ;     282  *
                                 ;     283  * mp_get_planner_buffers_available()   Returns # of available planner buffers
                                 ;     284  *
                                 ;     285  * mp_init_buffers()		Initializes or resets buffers
                                 ;     286  *
                                 ;     287  * mp_get_write_buffer()	Get pointer to next available write buffer
                                 ;     288  *							Returns pointer or NULL if no buffer available.
                                 ;     289  *
                                 ;     290  * mp_unget_write_buffer()	Free write buffer if you decide not to commit it.
                                 ;     291  *
                                 ;     292  * mp_commit_write_buffer()	Commit the next write buffer to the queue
                                 ;     293  *							Advances write pointer & changes buffer state
                                 ;     294  *							WARNING: The calling routine must not use the write buffer
                                 ;     295  *							once it has been queued as it may be processed and freed (wiped)
                                 ;     296  *							before mp_queue_write_buffer() returns.
                                 ;     297  *
                                 ;     298  * mp_get_run_buffer()		Get pointer to the next or current run buffer
                                 ;     299  *							Returns a new run buffer if prev buf was ENDed
                                 ;     300  *							Returns same buf if called again before ENDing
                                 ;     301  *							Returns NULL if no buffer available
                                 ;     302  *							The behavior supports continuations (iteration)
                                 ;     303  *
                                 ;     304  * mp_free_run_buffer()		Release the run buffer & return to buffer pool.
                                 ;     305  *							Returns true if queue is empty, false otherwise.
                                 ;     306  *							This is useful for doing queue empty / end move functions.
                                 ;     307  *
                                 ;     308  * mp_get_prev_buffer(bf)	Returns pointer to prev buffer in linked list
                                 ;     309  * mp_get_next_buffer(bf)	Returns pointer to next buffer in linked list
                                 ;     310  * mp_get_first_buffer(bf)	Returns pointer to first buffer, i.e. the running block
                                 ;     311  * mp_get_last_buffer(bf)	Returns pointer to last buffer, i.e. last block (zero)
                                 ;     312  * mp_clear_buffer(bf)		Zeroes the contents of the buffer
                                 ;     313  * mp_copy_buffer(bf,bp)	Copies the contents of bp into bf - preserves links
                                 ;     314  */
                                 ;     315 
                                 ;     316 uint8_t mp_get_planner_buffers_available(void) { return (mb.buffers_available);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",316
000002C6 6040                    		SUB #04H, R0
000002C8 FBE2rrrrrrrr            		MOV.L #_mb, R14
000002CE C5E00203                		MOV.B 02H[R14], 03H[R0]
000002D2 B089                    		MOVU.B 03H[R0], R1
000002D4 6701                    		RTSD #04H
000002D6                         _mp_init_buffers:
                                 		.STACK	_mp_init_buffers=16
                                 ;     317 
                                 ;     318 void mp_init_buffers(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",318
000002D6 60C0                    		SUB #0CH, R0
000002D8 FB3A141A                		MOV.L #00001A14H, R3
000002DC 6602                    		MOV.L #00000000H, R2
                                 ;     319 {
                                 ;     320 	mpBuf_t *pv;
                                 ;     321 	uint8_t i;
                                 ;     322 
                                 ;     323 	memset(&mb, 0, sizeof(mb));		// clear all values, pointers and status
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",323
000002DE FB12rrrrrrrr            		MOV.L #_mb, R1
000002E4 7F88                    		SSTR.B
000002E6                         L92:	; entry.split
                                 ;     324 	mb.magic_start = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",324
000002E6 FBE2rrrrrrrr            		MOV.L #_mb, R14
000002EC F8E9EF12                		MOV.W #12EFH, [R14]
000002F0                         L93:	; entry.split1
                                 ;     325 	mb.magic_end = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",325
000002F0 FBE2rrrrrrrr            		MOV.L #_mb, R14
000002F6 FAE9080DEF12            		MOV.W #12EFH, 1A10H[R14]
000002FC                         L94:	; entry.split2
                                 ;     326 
                                 ;     327 	mb.w = &mb.bf[0];				// init write and read buffer pointers
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",327
000002FC FB12rrrrrrrr            		MOV.L #_mb, R1
00000302 711210                  		ADD #10H, R1, R2
00000305 A01A                    		MOV.L R2, 04H[R1]
00000307                         L95:	; entry.split3
                                 ;     328 	mb.q = &mb.bf[0];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",328
00000307 FB12rrrrrrrr            		MOV.L #_mb, R1
0000030D 711210                  		ADD #10H, R1, R2
00000310 A092                    		MOV.L R2, 08H[R1]
00000312                         L96:	; entry.split4
                                 ;     329 	mb.r = &mb.bf[0];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",329
00000312 FB12rrrrrrrr            		MOV.L #_mb, R1
00000318 711210                  		ADD #10H, R1, R2
0000031B A09A                    		MOV.L R2, 0CH[R1]
0000031D                         L97:	; entry.split5
                                 ;     330 	pv = &mb.bf[PLANNER_BUFFER_POOL_SIZE-1];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",330
0000031D FB12rrrrrrrr            		MOV.L #_mb, R1
00000323 72114019                		ADD #1940H, R1
00000327 A009                    		MOV.L R1, 04H[R0]
00000329                         L98:	; entry.split6
                                 ;     331 	for (i=0; i < PLANNER_BUFFER_POOL_SIZE; i++) { // setup ring pointers
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",331
00000329 3C0B00                  		MOV.B #00H, 0BH[R0]
0000032C 2Err                 B  		BRA L104
0000032E                         L99:	; bb
                                 ;     332 		mb.bf[i].nx = &mb.bf[_bump(i)];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",332
0000032E B289                    		MOVU.B 0BH[R0], R1
00000330 EF1E                    		MOV.L R1, R14
00000332 761ED000                		MUL #0D0H, R14
00000336 FB22rrrrrrrr            		MOV.L #_mb, R2
0000033C 4BE2                    		ADD R14, R2
0000033E 712210                  		ADD #10H, R2
00000341 75511E                  		CMP #1EH, R1
00000344 2Arr                    		BGT L101
00000346                         L100:	; bb10
00000346 B289                    		MOVU.B 0BH[R0], R1
00000348 6211                    		ADD #01H, R1
0000034A E301                    		MOV.L R1, [R0]
0000034C 08                   S  		BRA L102
0000034D                         L101:	; bb14
0000034D F80600                  		MOV.L #00000000H, [R0]
00000350                         L102:	; bb15
00000350 FBE2rrrrrrrr            		MOV.L #_mb, R14
00000356 71EE10                  		ADD #10H, R14
00000359 EC01                    		MOV.L [R0], R1
0000035B 7611D000                		MUL #0D0H, R1
0000035F 4BE1                    		ADD R14, R1
00000361 A029                    		MOV.L R1, 04H[R2]
00000363 754FD0                  		MOV.L #000000D0H, R15
                                 ;     333 		mb.bf[i].pv = pv;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",333
00000366 4D0F0B                  		MUL 0BH[R0].UB, R15
00000369 4BFE                    		ADD R15, R14
0000036B E10E01                  		MOV.L 04H[R0], [R14]
0000036E                         L103:	; bb15.split
0000036E 754ED0                  		MOV.L #000000D0H, R14
                                 ;     334 		pv = &mb.bf[i];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",334
00000371 4D0E0B                  		MUL 0BH[R0].UB, R14
00000374 FB12rrrrrrrr            		MOV.L #_mb, R1
0000037A 4BE1                    		ADD R14, R1
0000037C 711110                  		ADD #10H, R1
0000037F A009                    		MOV.L R1, 04H[R0]
00000381 B289                    		MOVU.B 0BH[R0], R1
00000383 6211                    		ADD #01H, R1
00000385 8289                    		MOV.B R1, 0BH[R0]
00000387                         L104:	; bb28
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",331
00000387 B289                    		MOVU.B 0BH[R0], R1
00000389 755120                  		CMP #20H, R1
0000038C 29rr                    		BLT L99
0000038E                         L105:	; bb34
                                 ;     335 	}
                                 ;     336 	mb.buffers_available = PLANNER_BUFFER_POOL_SIZE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",336
0000038E FB12rrrrrrrr            		MOV.L #_mb, R1
00000394 3C1220                  		MOV.B #20H, 02H[R1]
00000397 6703                    		RTSD #0CH
00000399                         _mp_get_write_buffer:
                                 		.STACK	_mp_get_write_buffer=24
                                 ;     337 }
                                 ;     338 
                                 ;     339 mpBuf_t * mp_get_write_buffer() 				// get & clear a buffer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",339
00000399 7100EC                  		ADD #0FFFFFFECH, R0
                                 ;     340 {
                                 ;     341 	if (mb.w->buffer_state == MP_BUFFER_EMPTY) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",341
0000039C FB12rrrrrrrr            		MOV.L #_mb, R1
000003A2 A819                    		MOV.L 04H[R1], R1
000003A4 B511                    		MOVU.B 14H[R1], R1
000003A6 6101                    		CMP #00H, R1
000003A8 21rr                    		BNE L117
000003AA                         L107:	; bb4
                                 ;     342 		mpBuf_t *w = mb.w;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",342
000003AA FBE2rrrrrrrr            		MOV.L #_mb, R14
000003B0 E5E00101                		MOV.L 04H[R14], 04H[R0]
000003B4                         L108:	; bb4.split
                                 ;     343 		mpBuf_t *nx = mb.w->nx;					// save linked list pointers
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",343
000003B4 FB12rrrrrrrr            		MOV.L #_mb, R1
000003BA A819                    		MOV.L 04H[R1], R1
000003BC E5100102                		MOV.L 04H[R1], 08H[R0]
000003C0                         L109:	; bb4.split1
                                 ;     344 		mpBuf_t *pv = mb.w->pv;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",344
000003C0 FB12rrrrrrrr            		MOV.L #_mb, R1
000003C6 A819                    		MOV.L 04H[R1], R1
000003C8 E41003                  		MOV.L [R1], 0CH[R0]
000003CB                         L110:	; bb4.split2
                                 ;     345 		memset(mb.w, 0, sizeof(mpBuf_t));		// clear all values
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",345
000003CB FB12rrrrrrrr            		MOV.L #_mb, R1
000003D1 A819                    		MOV.L 04H[R1], R1
000003D3 7543D0                  		MOV.L #000000D0H, R3
000003D6 6602                    		MOV.L #00000000H, R2
000003D8 7F88                    		SSTR.B
000003DA                         L111:	; bb4.split3
                                 ;     346 		w->nx = nx;								// restore pointers
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",346
000003DA A881                    		MOV.L 08H[R0], R1
000003DC A80A                    		MOV.L 04H[R0], R2
000003DE A029                    		MOV.L R1, 04H[R2]
000003E0                         L112:	; bb4.split4
                                 ;     347 		w->pv = pv;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",347
000003E0 A889                    		MOV.L 0CH[R0], R1
000003E2 A80A                    		MOV.L 04H[R0], R2
000003E4 E321                    		MOV.L R1, [R2]
000003E6                         L113:	; bb4.split5
                                 ;     348 		w->buffer_state = MP_BUFFER_LOADING;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",348
000003E6 A809                    		MOV.L 04H[R0], R1
000003E8 3C9401                  		MOV.B #01H, 14H[R1]
000003EB                         L114:	; bb4.split6
                                 ;     349 		mb.buffers_available--;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",349
000003EB FB12rrrrrrrr            		MOV.L #_mb, R1
000003F1 B092                    		MOVU.B 02H[R1], R2
000003F3 6012                    		SUB #01H, R2
000003F5 8092                    		MOV.B R2, 02H[R1]
000003F7                         L115:	; bb4.split7
                                 ;     350 		mb.w = w->nx;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",350
000003F7 A809                    		MOV.L 04H[R0], R1
000003F9 FBE2rrrrrrrr            		MOV.L #_mb, R14
000003FF E51E0101                		MOV.L 04H[R1], 04H[R14]
00000403                         L116:	; bb4.split8
                                 ;     351 		return (w);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",351
00000403 E10001                  		MOV.L 04H[R0], [R0]
00000406 2Err                 B  		BRA L119
00000408                         L117:	; bb35
00000408 75411C                  		MOV.L #0000001CH, R1
                                 ;     352 	}
                                 ;     353 	rpt_exception(STAT_FAILED_TO_GET_PLANNER_BUFFER);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",353
0000040B 05rrrrrr             A  		BSR _rpt_exception
0000040F                         L118:	; bb35.split
                                 ;     354 	return (NULL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",354
0000040F F80600                  		MOV.L #00000000H, [R0]
00000412                         L119:	; bb38
00000412 EC01                    		MOV.L [R0], R1
00000414 A101                    		MOV.L R1, 10H[R0]
                                 ;     355 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",355
00000416 6705                    		RTSD #14H
00000418                         _mp_unget_write_buffer:
                                 		.STACK	_mp_unget_write_buffer=4
                                 ;     356 
                                 ;     357 void mp_unget_write_buffer()
                                 ;     358 {
                                 ;     359 	mb.w = mb.w->pv;							// queued --> write
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",359
00000418 FB12rrrrrrrr            		MOV.L #_mb, R1
0000041E A81A                    		MOV.L 04H[R1], R2
00000420 E42101                  		MOV.L [R2], 04H[R1]
00000423                         L121:	; entry.split
                                 ;     360 	mb.w->buffer_state = MP_BUFFER_EMPTY; 		// not loading anymore
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",360
00000423 FB12rrrrrrrr            		MOV.L #_mb, R1
00000429 A819                    		MOV.L 04H[R1], R1
0000042B 3C9400                  		MOV.B #00H, 14H[R1]
0000042E                         L122:	; entry.split1
                                 ;     361 	mb.buffers_available++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",361
0000042E FB12rrrrrrrr            		MOV.L #_mb, R1
00000434 B092                    		MOVU.B 02H[R1], R2
00000436 6212                    		ADD #01H, R2
00000438 8092                    		MOV.B R2, 02H[R1]
0000043A 02                      		RTS
0000043B                         _mp_commit_write_buffer:
                                 		.STACK	_mp_commit_write_buffer=8
                                 ;     362 }
                                 ;     363 
                                 ;     364 /*** WARNING: The routine calling mp_commit_write_buffer() must not use the write buffer
                                 ;     365 			  once it has been queued. Action may start on the buffer immediately,
                                 ;     366 			  invalidating its contents ***/
                                 ;     367 
                                 ;     368 void mp_commit_write_buffer(const uint8_t move_type)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",368
0000043B 6040                    		SUB #04H, R0
0000043D 8089                    		MOV.B R1, 03H[R0]
                                 ;     369 {
                                 ;     370 	mb.q->move_type = move_type;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",370
0000043F FB22rrrrrrrr            		MOV.L #_mb, R2
00000445 A8A2                    		MOV.L 08H[R2], R2
00000447 8529                    		MOV.B R1, 15H[R2]
00000449                         L124:	; entry.split
                                 ;     371 	mb.q->move_state = MOVE_NEW;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",371
00000449 FB12rrrrrrrr            		MOV.L #_mb, R1
0000044F A891                    		MOV.L 08H[R1], R1
00000451 3C9701                  		MOV.B #01H, 17H[R1]
00000454                         L125:	; entry.split1
                                 ;     372 	mb.q->buffer_state = MP_BUFFER_QUEUED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",372
00000454 FB12rrrrrrrr            		MOV.L #_mb, R1
0000045A A891                    		MOV.L 08H[R1], R1
0000045C 3C9402                  		MOV.B #02H, 14H[R1]
0000045F                         L126:	; entry.split2
                                 ;     373 	mb.q = mb.q->nx;							// advance the queued buffer pointer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",373
0000045F FB12rrrrrrrr            		MOV.L #_mb, R1
00000465 A892                    		MOV.L 08H[R1], R2
00000467 E5210102                		MOV.L 04H[R2], 08H[R1]
0000046B                         L127:	; entry.split3
0000046B 6611                    		MOV.L #00000001H, R1
                                 ;     374 	qr_request_queue_report(+1);				// request a QR and add to the "added buffers" count
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",374
0000046D 05rrrrrr             A  		BSR _qr_request_queue_report
00000471                         L128:	; entry.split4
                                 ;     375 	st_request_exec_move();						// requests an exec if the runtime is not busy
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",375
00000471 05rrrrrr             A  		BSR _st_request_exec_move
00000475 6701                    		RTSD #04H
00000477                         _mp_get_run_buffer:
                                 		.STACK	_mp_get_run_buffer=16
                                 ;     376 												// NB: BEWARE! the exec may result in the planner buffer being
                                 ;     377 												// processed immediately and then freed - invalidating the conte
                                 ;     378 }
                                 ;     379 
                                 ;     380 mpBuf_t * mp_get_run_buffer()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",380
00000477 60C0                    		SUB #0CH, R0
                                 ;     381 {
                                 ;     382 	// CASE: fresh buffer; becomes running if queued or pending
                                 ;     383 	if ((mb.r->buffer_state == MP_BUFFER_QUEUED) ||
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",383
00000479 FB12rrrrrrrr            		MOV.L #_mb, R1
0000047F A899                    		MOV.L 0CH[R1], R1
00000481 B511                    		MOVU.B 14H[R1], R1
00000483 6121                    		CMP #02H, R1
00000485 20rr                    		BEQ L132
00000487 2Err                 B  		BRA L131
00000489                         L130:	; bb1
                                 ;     384 		(mb.r->buffer_state == MP_BUFFER_PENDING)) {
                                 ;     385 		 mb.r->buffer_state = MP_BUFFER_RUNNING;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",385
00000489 FB12rrrrrrrr            		MOV.L #_mb, R1
0000048F A899                    		MOV.L 0CH[R1], R1
00000491 3C9404                  		MOV.B #04H, 14H[R1]
00000494 2Err                 B  		BRA L135
00000496                         L131:	; bb10
00000496 FB12rrrrrrrr            		MOV.L #_mb, R1
0000049C A899                    		MOV.L 0CH[R1], R1
0000049E B511                    		MOVU.B 14H[R1], R1
000004A0 6131                    		CMP #03H, R1
000004A2 18                   S  		BNE L133
000004A3                         L132:	; bb17
000004A3 F80601                  		MOV.L #00000001H, [R0]
000004A6 08                   S  		BRA L134
000004A7                         L133:	; bb18
000004A7 F80600                  		MOV.L #00000000H, [R0]
000004AA                         L134:	; bb19
000004AA EC01                    		MOV.L [R0], R1
000004AC 6101                    		CMP #00H, R1
000004AE 21rr                    		BNE L130
000004B0                         L135:	; bb24
                                 ;     386 	}
                                 ;     387 	// CASE: asking for the same run buffer for the Nth time
                                 ;     388 	if (mb.r->buffer_state == MP_BUFFER_RUNNING) {	// return same buffer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",388
000004B0 FB12rrrrrrrr            		MOV.L #_mb, R1
000004B6 A899                    		MOV.L 0CH[R1], R1
000004B8 B511                    		MOVU.B 14H[R1], R1
000004BA 6141                    		CMP #04H, R1
000004BC 21rr                    		BNE L137
000004BE                         L136:	; bb25
                                 ;     389 		return (mb.r);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",389
000004BE FBE2rrrrrrrr            		MOV.L #_mb, R14
000004C4 E5E00301                		MOV.L 0CH[R14], 04H[R0]
000004C8 08                   S  		BRA L138
000004C9                         L137:	; bb35
                                 ;     390 	}
                                 ;     391 	return (NULL);								// CASE: no queued buffers. fail it.
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",391
000004C9 3E0100                  		MOV.L #00000000H, 04H[R0]
000004CC                         L138:	; bb37
000004CC A809                    		MOV.L 04H[R0], R1
000004CE A081                    		MOV.L R1, 08H[R0]
                                 ;     392 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",392
000004D0 6703                    		RTSD #0CH
000004D2                         _mp_free_run_buffer:
                                 		.STACK	_mp_free_run_buffer=12
                                 ;     393 
                                 ;     394 uint8_t mp_free_run_buffer()					// EMPTY current run buf & adv to next
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",394
000004D2 6080                    		SUB #08H, R0
                                 ;     395 {
                                 ;     396 	mp_clear_buffer(mb.r);						// clear it out (& reset replannable)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",396
000004D4 FB12rrrrrrrr            		MOV.L #_mb, R1
000004DA A899                    		MOV.L 0CH[R1], R1
000004DC 39rrrr               W  		BSR _mp_clear_buffer
000004DF                         L140:	; entry.split
                                 ;     397 //	mb.r->buffer_state = MP_BUFFER_EMPTY;		// redundant after the clear, above
                                 ;     398 	mb.r = mb.r->nx;							// advance to next run buffer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",398
000004DF FB12rrrrrrrr            		MOV.L #_mb, R1
000004E5 A89A                    		MOV.L 0CH[R1], R2
000004E7 E5210103                		MOV.L 04H[R2], 0CH[R1]
000004EB                         L141:	; entry.split1
                                 ;     399 	if (mb.r->buffer_state == MP_BUFFER_QUEUED) {// only if queued...
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",399
000004EB FB12rrrrrrrr            		MOV.L #_mb, R1
000004F1 A899                    		MOV.L 0CH[R1], R1
000004F3 B511                    		MOVU.B 14H[R1], R1
000004F5 6121                    		CMP #02H, R1
000004F7 21rr                    		BNE L143
000004F9                         L142:	; bb5
                                 ;     400 		mb.r->buffer_state = MP_BUFFER_PENDING;	// pend next buffer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",400
000004F9 FB12rrrrrrrr            		MOV.L #_mb, R1
000004FF A899                    		MOV.L 0CH[R1], R1
00000501 3C9403                  		MOV.B #03H, 14H[R1]
00000504                         L143:	; bb14
                                 ;     401 	}
                                 ;     402 	mb.buffers_available++;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",402
00000504 FB12rrrrrrrr            		MOV.L #_mb, R1
0000050A B092                    		MOVU.B 02H[R1], R2
0000050C 6212                    		ADD #01H, R2
0000050E 8092                    		MOV.B R2, 02H[R1]
00000510                         L144:	; bb14.split
00000510 FB16FF                  		MOV.L #0FFFFFFFFH, R1
                                 ;     403 	qr_request_queue_report(-1);				// request a QR and add to the "removed buffers" count
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",403
00000513 05rrrrrr             A  		BSR _qr_request_queue_report
00000517                         L145:	; bb14.split2
                                 ;     404 	return ((mb.w == mb.r) ? true : false); 	// return true if the queue emptied
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",404
00000517 FB12rrrrrrrr            		MOV.L #_mb, R1
0000051D A81A                    		MOV.L 04H[R1], R2
0000051F 06851203                		CMP 0CH[R1].L, R2
00000523 18                   S  		BNE L147
00000524                         L146:	; bb21
00000524 F80601                  		MOV.L #00000001H, [R0]
00000527 08                   S  		BRA L148
00000528                         L147:	; bb22
00000528 F80600                  		MOV.L #00000000H, [R0]
0000052B                         L148:	; bb23
0000052B EC01                    		MOV.L [R0], R1
0000052D 8189                    		MOV.B R1, 07H[R0]
                                 ;     405 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",405
0000052F B189                    		MOVU.B 07H[R0], R1
00000531 6702                    		RTSD #08H
00000533                         _mp_get_first_buffer:
                                 		.STACK	_mp_get_first_buffer=8
                                 ;     406 
                                 ;     407 mpBuf_t * mp_get_first_buffer(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",407
00000533 6040                    		SUB #04H, R0
                                 ;     408 {
                                 ;     409 	return(mp_get_run_buffer());	// returns buffer or NULL if nothing's running
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",409
00000535 39rrrr               W  		BSR _mp_get_run_buffer
00000538 E301                    		MOV.L R1, [R0]
0000053A                         L150:	; entry.split
                                 ;     410 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",410
0000053A 6701                    		RTSD #04H
0000053C                         _mp_get_last_buffer:
                                 		.STACK	_mp_get_last_buffer=24
                                 ;     411 
                                 ;     412 mpBuf_t * mp_get_last_buffer(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",412
0000053C 7100EC                  		ADD #0FFFFFFECH, R0
                                 ;     413 {
                                 ;     414 	mpBuf_t *bf = mp_get_run_buffer();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",414
0000053F 39rrrr               W  		BSR _mp_get_run_buffer
00000542 A081                    		MOV.L R1, 08H[R0]
00000544                         L152:	; entry.split
                                 ;     415 	mpBuf_t *bp = bf;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",415
00000544 E5000203                		MOV.L 08H[R0], 0CH[R0]
00000548                         L153:	; entry.split1
                                 ;     416 
                                 ;     417 	if (bf == NULL) return(NULL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",417
00000548 A881                    		MOV.L 08H[R0], R1
0000054A 6101                    		CMP #00H, R1
0000054C 18                   S  		BNE L155
0000054D                         L154:	; bb5
0000054D 3E0100                  		MOV.L #00000000H, 04H[R0]
00000550 2Err                 B  		BRA L163
00000552                         L155:	; bb12
                                 ;     418 
                                 ;     419 	do {
                                 ;     420 		if ((bp->nx->move_state == MOVE_OFF) || (bp->nx == bf)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",420
00000552 A889                    		MOV.L 0CH[R0], R1
00000554 A819                    		MOV.L 04H[R1], R1
00000556 B599                    		MOVU.B 17H[R1], R1
00000558 6101                    		CMP #00H, R1
0000055A 20rr                    		BEQ L158
0000055C 08                   S  		BRA L157
0000055D                         L156:	; bb13
                                 ;     421 			return (bp);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",421
0000055D A009                    		MOV.L R1, 04H[R0]
0000055F 2Err                 B  		BRA L163
00000561                         L157:	; bb24
00000561 A889                    		MOV.L 0CH[R0], R1
00000563 A819                    		MOV.L 04H[R1], R1
00000565 06850102                		CMP 08H[R0].L, R1
00000569 18                   S  		BNE L159
0000056A                         L158:	; bb31
0000056A F80601                  		MOV.L #00000001H, [R0]
0000056D 08                   S  		BRA L160
0000056E                         L159:	; bb32
0000056E F80600                  		MOV.L #00000000H, [R0]
00000571                         L160:	; bb33
00000571 EC01                    		MOV.L [R0], R1
00000573 6101                    		CMP #00H, R1
00000575 A889                    		MOV.L 0CH[R0], R1
00000577 21rr                    		BNE L156
00000579                         L161:	; bb38
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",419
00000579 A819                    		MOV.L 04H[R1], R1
0000057B A089                    		MOV.L R1, 0CH[R0]
0000057D 06850102                		CMP 08H[R0].L, R1
00000581 21rr                    		BNE L155
00000583                         L162:	; bb47
                                 ;     422 		}
                                 ;     423 	} while ((bp = mp_get_next_buffer(bp)) != bf);
                                 ;     424 	return (bp);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",424
00000583 E5000301                		MOV.L 0CH[R0], 04H[R0]
00000587                         L163:	; bb50
00000587 A809                    		MOV.L 04H[R0], R1
00000589 A101                    		MOV.L R1, 10H[R0]
                                 ;     425 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",425
0000058B 6705                    		RTSD #14H
0000058D                         _mp_clear_buffer:
                                 		.STACK	_mp_clear_buffer=16
                                 ;     426 
                                 ;     427 // Use the macro instead
                                 ;     428 //mpBuf_t * mp_get_prev_buffer(const mpBuf_t *bf) return (bf->pv);
                                 ;     429 //mpBuf_t * mp_get_next_buffer(const mpBuf_t *bf) return (bf->nx);
                                 ;     430 
                                 ;     431 void mp_clear_buffer(mpBuf_t *bf)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",431
0000058D 60C0                    		SUB #0CH, R0
0000058F A081                    		MOV.L R1, 08H[R0]
                                 ;     432 {
                                 ;     433 	mpBuf_t *nx = bf->nx;			// save pointers
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",433
00000591 E11001                  		MOV.L 04H[R1], [R0]
00000594                         L165:	; entry.split
                                 ;     434 	mpBuf_t *pv = bf->pv;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",434
00000594 A881                    		MOV.L 08H[R0], R1
00000596 E41001                  		MOV.L [R1], 04H[R0]
00000599                         L166:	; entry.split1
00000599 7543D0                  		MOV.L #000000D0H, R3
0000059C 6602                    		MOV.L #00000000H, R2
                                 ;     435 	memset(bf, 0, sizeof(mpBuf_t));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",435
0000059E A881                    		MOV.L 08H[R0], R1
000005A0 7F88                    		SSTR.B
000005A2                         L167:	; entry.split2
                                 ;     436 	bf->nx = nx;					// restore pointers
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",436
000005A2 EC01                    		MOV.L [R0], R1
000005A4 A882                    		MOV.L 08H[R0], R2
000005A6 A029                    		MOV.L R1, 04H[R2]
000005A8                         L168:	; entry.split3
                                 ;     437 	bf->pv = pv;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",437
000005A8 A809                    		MOV.L 04H[R0], R1
000005AA A882                    		MOV.L 08H[R0], R2
000005AC E321                    		MOV.L R1, [R2]
000005AE 6703                    		RTSD #0CH
000005B0                         _mp_copy_buffer:
                                 		.STACK	_mp_copy_buffer=20
                                 ;     438 }
                                 ;     439 
                                 ;     440 void mp_copy_buffer(mpBuf_t *bf, const mpBuf_t *bp)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",440
000005B0 7100F0                  		ADD #0FFFFFFF0H, R0
000005B3 A089                    		MOV.L R1, 0CH[R0]
000005B5 A082                    		MOV.L R2, 08H[R0]
                                 ;     441 {
                                 ;     442 	mpBuf_t *nx = bf->nx;			// save pointers
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",442
000005B7 A889                    		MOV.L 0CH[R0], R1
000005B9 E11001                  		MOV.L 04H[R1], [R0]
000005BC                         L170:	; entry.split
                                 ;     443 	mpBuf_t *pv = bf->pv;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",443
000005BC A889                    		MOV.L 0CH[R0], R1
000005BE E41001                  		MOV.L [R1], 04H[R0]
000005C1                         L171:	; entry.split1
000005C1 7543D0                  		MOV.L #000000D0H, R3
                                 ;     444  	memcpy(bf, bp, sizeof(mpBuf_t));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",444
000005C4 A882                    		MOV.L 08H[R0], R2
000005C6 A889                    		MOV.L 0CH[R0], R1
000005C8 7F8F                    		SMOVF
000005CA                         L172:	; entry.split2
                                 ;     445 	bf->nx = nx;					// restore pointers
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",445
000005CA EC01                    		MOV.L [R0], R1
000005CC A88A                    		MOV.L 0CH[R0], R2
000005CE A029                    		MOV.L R1, 04H[R2]
000005D0                         L173:	; entry.split3
                                 ;     446 	bf->pv = pv;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\planner.c",446
000005D0 A809                    		MOV.L 04H[R0], R1
000005D2 A88A                    		MOV.L 0CH[R0], R2
000005D4 E321                    		MOV.L R1, [R2]
000005D6 6704                    		RTSD #10H
                                 ;     447 }
                                 ;     448 
                                 ;     449 /*
                                 ;     450 // currently this routine is only used by debug routines
                                 ;     451 uint8_t mp_get_buffer_index(mpBuf_t *bf)
                                 ;     452 {
                                 ;     453 	mpBuf_t *b = bf;				// temp buffer pointer
                                 ;     454 
                                 ;     455 	for (uint8_t i=0; i < PLANNER_BUFFER_POOL_SIZE; i++) {
                                 ;     456 		if (b->pv > b) {
                                 ;     457 			return (i);
                                 ;     458 		}
                                 ;     459 		b = b->pv;
                                 ;     460 	}
                                 ;     461 	return(cm_hard_alarm(PLANNER_BUFFER_POOL_SIZE));	// should never happen
                                 ;     462 }
                                 ;     463 */
                                 ;     464 
                                 ;     465 /****************************
                                 ;     466  * END OF PLANNER FUNCTIONS *
                                 ;     467  ****************************/
                                 ;     468 
                                 ;     469 /***********************************************************************************
                                 ;     470  * CONFIGURATION AND INTERFACE FUNCTIONS
                                 ;     471  * Functions to get and set variables from the cfgArray table
                                 ;     472  ***********************************************************************************/
                                 ;     473 
                                 ;     474 /***********************************************************************************
                                 ;     475  * TEXT MODE SUPPORT
                                 ;     476  * Functions to print variables from the cfgArray table
                                 ;     477  ***********************************************************************************/
                                 ;     478 /*
                                 ;     479 #ifdef __cplusplus
                                 ;     480 }
                                 ;     481 #endif
                                 ;     482 */
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _mb:
00000000(00001A14H)              		.blkl	1669
00001A14                         _mm:
00001A14(0000002CH)              		.blkl	11
00001A40                         _mr:
00001A40(000001A0H)              		.blkl	104
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     01423   LINES

Section List

Attr         Size               Name
CODE     0000001496(000005D8H)  P
DATA     0000007136(00001BE0H)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\planner.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\planner.lst
-output=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\src\cnc\planner.obj
