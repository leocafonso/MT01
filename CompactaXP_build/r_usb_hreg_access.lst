* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Thu Mar 09 14:19:07 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  09-Mar-2017 14:19:06
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=r_usb_hreg_access.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=r_usb_hreg_access.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=1,EASYMAK=0,MOBILE=0,FREE_RTOS_PP
                                 ;r_usb_hreg_access.c
                                 
                                 		.glb	_usb_hreg_set_drpd
                                 		.glb	_usb_hreg_clr_drpd
                                 		.glb	_usb_hreg_set_rwupe
                                 		.glb	_usb_hreg_clr_rwupe
                                 		.glb	_usb_hreg_set_resume
                                 		.glb	_usb_hreg_clr_resume
                                 		.glb	_usb_hreg_set_uact
                                 		.glb	_usb_hreg_clr_uact
                                 		.glb	_usb_hreg_read_intenb
                                 		.glb	_usb_hreg_write_intenb
                                 		.glb	_usb_hreg_set_enb_ovrcre
                                 		.glb	_usb_hreg_clr_enb_ovrcre
                                 		.glb	_usb_hreg_set_enb_bchge
                                 		.glb	_usb_hreg_clr_enb_bchge
                                 		.glb	_usb_hreg_set_enb_dtche
                                 		.glb	_usb_hreg_clr_enb_dtche
                                 		.glb	_usb_hreg_set_enb_attche
                                 		.glb	_usb_hreg_clr_enb_attche
                                 		.glb	_usb_hreg_set_enb_signe
                                 		.glb	_usb_hreg_clr_enb_signe
                                 		.glb	_usb_hreg_set_enb_sacke
                                 		.glb	_usb_hreg_clr_enb_sacke
                                 		.glb	_usb_hreg_set_trnensel
                                 		.glb	_usb_hreg_clr_trnensel
                                 		.glb	_usb_hreg_read_intsts
                                 		.glb	_usb_hreg_write_intsts
                                 		.glb	_usb_hreg_clr_sts_ovrcr
                                 		.glb	_usb_hreg_clr_sts_bchg
                                 		.glb	_usb_hreg_clr_sts_dtch
                                 		.glb	_usb_hreg_clr_sts_attch
                                 		.glb	_usb_hreg_clr_sts_eoferr
                                 		.glb	_usb_hreg_clr_sts_sign
                                 		.glb	_usb_hreg_clr_sts_sack
                                 		.glb	_usb_hreg_write_usbreq
                                 		.glb	_usb_hreg_set_usbval
                                 		.glb	_usb_hreg_set_usbindx
                                 		.glb	_usb_hreg_set_usbleng
                                 		.glb	_usb_hreg_write_dcpctr
                                 		.glb	_usb_hreg_set_sureq
                                 		.glb	_usb_hreg_set_sureqclr
                                 		.glb	_usb_hreg_set_devsel
                                 		.glb	_usb_hreg_read_devadd
                                 		.glb	_usb_hreg_rmw_devadd
                                 		.glb	_usb_hreg_set_usbspd
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _usb_hreg_set_drpd:
                                 		.STACK	_usb_hreg_set_drpd=12
                                 ;       1 /***********************************************************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No
                                 ;       4 * other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
                                 ;       5 * applicable laws, including copyright laws.
                                 ;       6 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
                                 ;       7 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY,
                                 ;       8 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM
                                 ;       9 * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
                                 ;      10 * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS
                                 ;      11 * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      12 * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of
                                 ;      13 * this software. By using this software, you agree to the additional terms and conditions found by accessing the
                                 ;      14 * following link:
                                 ;      15 * http://www.renesas.com/disclaimer
                                 ;      16 *
                                 ;      17 * Copyright (C) 2014(2015) Renesas Electronics Corporation. All rights reserved.
                                 ;      18 ***********************************************************************************************************************/
                                 ;      19 /***********************************************************************************************************************
                                 ;      20 * File Name    : r_usb_hreg_access.c
                                 ;      21 * Description  : USB IP register access code
                                 ;      22 ***********************************************************************************************************************/
                                 ;      23 /**********************************************************************************************************************
                                 ;      24 * History : DD.MM.YYYY Version Description
                                 ;      25 *         : 04.01.2014 1.00 First Release
                                 ;      26 *         : 30.01.2015 1.01    Added RX71M.
                                 ;      27 ***********************************************************************************************************************/
                                 ;      28 
                                 ;      29 
                                 ;      30 /******************************************************************************
                                 ;      31 Includes   <System Includes> , "Project Includes"
                                 ;      32 ******************************************************************************/
                                 ;      33 #include "r_usb_basic_if.h"
                                 ;      34 
                                 ;      35 
                                 ;      36 #if (USB_FUNCSEL_USBIP0_PP == USB_HOST_PP) || (USB_FUNCSEL_USBIP1_PP == USB_HOST_PP)
                                 ;      37 
                                 ;      38 /******************************************************************************
                                 ;      39 Constant macro definitions
                                 ;      40 ******************************************************************************/
                                 ;      41 #define USB_DEVSEL_NUM_SHIFT    12
                                 ;      42 
                                 ;      43 /************/
                                 ;      44 /*  SYSCFG  */
                                 ;      45 /************/
                                 ;      46 /******************************************************************************
                                 ;      47 Function Name   : usb_hreg_set_drpd
                                 ;      48 Description     : Set DRPD bit of specified port's SYSCFG register. This is only 
                                 ;      49                 : for when Host, to pull down the D+ and D- lines.
                                 ;      50 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;      51                 : uint16_t  port  : USB port number.
                                 ;      52 Return value    : none
                                 ;      53 ******************************************************************************/
                                 ;      54 void    usb_hreg_set_drpd( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",54
00000000 6080                    		SUB #08H, R0
00000002 A009                    		MOV.L R1, 04H[R0]
00000004 900A                    		MOV.W R2, 02H[R0]
                                 ;      55 {
                                 ;      56     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",56
00000006 B809                    		MOVU.W 02H[R0], R1
00000008 6101                    		CMP #00H, R1
0000000A 21rr                    		BNE L12
0000000C                         L11:	; bb3
                                 ;      57     {
                                 ;      58         ptr->ipp->SYSCFG.WORD |= USB_DRPD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",58
0000000C A809                    		MOV.L 04H[R0], R1
0000000E A891                    		MOV.L 08H[R1], R1
00000010 DC1E                    		MOV.W [R1], R14
00000012 785E                    		BSET #05H, R14
00000014 D31E                    		MOV.W R14, [R1]
00000016 6702                    		RTSD #08H
00000018                         L12:	; return
                                 ;      59     }
                                 ;      60 } /* eof usb_hreg_set_drpd() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",60
00000018 6702                    		RTSD #08H
0000001A                         _usb_hreg_clr_drpd:
                                 		.STACK	_usb_hreg_clr_drpd=12
                                 ;      61 
                                 ;      62 /******************************************************************************
                                 ;      63 Function Name   : usb_hreg_clr_drpd
                                 ;      64 Description     : Clear DRPD-bit specified port's SYSCFG register. For 
                                 ;      65                 : host external circuit, to not pull down the D+ and D- lines.
                                 ;      66 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;      67                 : uint16_t  port  : USB port number.
                                 ;      68 Return value    : none
                                 ;      69 ******************************************************************************/
                                 ;      70 void    usb_hreg_clr_drpd( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",70
0000001A 6080                    		SUB #08H, R0
0000001C A009                    		MOV.L R1, 04H[R0]
0000001E 900A                    		MOV.W R2, 02H[R0]
                                 ;      71 {
                                 ;      72     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",72
00000020 B809                    		MOVU.W 02H[R0], R1
00000022 6101                    		CMP #00H, R1
00000024 21rr                    		BNE L15
00000026                         L14:	; bb3
                                 ;      73     {
                                 ;      74         ptr->ipp->SYSCFG.WORD &= ~USB_DRPD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",74
00000026 A809                    		MOV.L 04H[R0], R1
00000028 A891                    		MOV.L 08H[R1], R1
0000002A 5C1E                    		MOVU.W [R1], R14
0000002C 772EDFFF00              		AND #0FFDFH, R14
00000031 D31E                    		MOV.W R14, [R1]
00000033 6702                    		RTSD #08H
00000035                         L15:	; return
                                 ;      75     }
                                 ;      76 } /* eof usb_hreg_clr_drpd() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",76
00000035 6702                    		RTSD #08H
00000037                         _usb_hreg_set_rwupe:
                                 		.STACK	_usb_hreg_set_rwupe=12
                                 ;      77 
                                 ;      78 /************/
                                 ;      79 /*  SYSSTS0 */
                                 ;      80 /************/
                                 ;      81 /* System Configuration Status Register 0 */
                                 ;      82 
                                 ;      83 /**************/
                                 ;      84 /*  DVSTCTR0  */
                                 ;      85 /**************/
                                 ;      86 /* Device State Control Register 0 */
                                 ;      87 
                                 ;      88 /******************************************************************************
                                 ;      89 Function Name   : usb_hreg_set_rwupe
                                 ;      90 Description     : Set the RWUPE-bit specified port's DVSTCTR0 reg-
                                 ;      91                 : ister. When host. To allow detection of remote wake-up from 
                                 ;      92                 : a USB Function.
                                 ;      93 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;      94                 : uint16_t  port  : USB port number.
                                 ;      95 Return value    : none
                                 ;      96 ******************************************************************************/
                                 ;      97 void    usb_hreg_set_rwupe( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",97
00000037 6080                    		SUB #08H, R0
00000039 A009                    		MOV.L R1, 04H[R0]
0000003B 900A                    		MOV.W R2, 02H[R0]
                                 ;      98 {
                                 ;      99     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",99
0000003D B809                    		MOVU.W 02H[R0], R1
0000003F 6101                    		CMP #00H, R1
00000041 21rr                    		BNE L18
00000043                         L17:	; bb3
                                 ;     100     {
                                 ;     101         ptr->ipp->DVSTCTR0.WORD |= USB_RWUPE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",101
00000043 A809                    		MOV.L 04H[R0], R1
00000045 A891                    		MOV.L 08H[R1], R1
00000047 9912                    		MOV.W 08H[R1], R2
00000049 7872                    		BSET #07H, R2
0000004B 9112                    		MOV.W R2, 08H[R1]
0000004D 6702                    		RTSD #08H
0000004F                         L18:	; return
                                 ;     102     }
                                 ;     103 } /* eof usb_hreg_set_rwupe() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",103
0000004F 6702                    		RTSD #08H
00000051                         _usb_hreg_clr_rwupe:
                                 		.STACK	_usb_hreg_clr_rwupe=12
                                 ;     104 
                                 ;     105 /******************************************************************************
                                 ;     106 Function Name   : usb_hreg_clr_rwupe
                                 ;     107 Description     : Clear the RWUPE-bit specified port's DVSTCTR0 reg-
                                 ;     108                 : ister. When host. To prohibit detection of remote wake-up from 
                                 ;     109                 : a USB Function.
                                 ;     110 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     111                 : uint16_t  port  : USB port number.
                                 ;     112 Return value    : none
                                 ;     113 ******************************************************************************/
                                 ;     114 void    usb_hreg_clr_rwupe( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",114
00000051 6080                    		SUB #08H, R0
00000053 A009                    		MOV.L R1, 04H[R0]
00000055 900A                    		MOV.W R2, 02H[R0]
                                 ;     115 {
                                 ;     116     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",116
00000057 B809                    		MOVU.W 02H[R0], R1
00000059 6101                    		CMP #00H, R1
0000005B 21rr                    		BNE L21
0000005D                         L20:	; bb3
                                 ;     117     {
                                 ;     118         ptr->ipp->DVSTCTR0.WORD &= ~USB_RWUPE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",118
0000005D A809                    		MOV.L 04H[R0], R1
0000005F A891                    		MOV.L 08H[R1], R1
00000061 B912                    		MOVU.W 08H[R1], R2
00000063 77227FFF00              		AND #0FF7FH, R2
00000068 9112                    		MOV.W R2, 08H[R1]
0000006A 6702                    		RTSD #08H
0000006C                         L21:	; return
                                 ;     119     }
                                 ;     120 } /* eof usb_hreg_clr_rwupe() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",120
0000006C 6702                    		RTSD #08H
0000006E                         _usb_hreg_set_resume:
                                 		.STACK	_usb_hreg_set_resume=12
                                 ;     121 
                                 ;     122 /******************************************************************************
                                 ;     123 Function Name   : usb_hreg_set_resume
                                 ;     124 Description     : Set the RESUME-bit specified port's DVSTCTR0 register 
                                 ;     125                 : When host. To allow output of resume signal to a USB Function.
                                 ;     126 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     127                 : uint16_t  port  : USB port number.
                                 ;     128 Return value    : none
                                 ;     129 ******************************************************************************/
                                 ;     130 void    usb_hreg_set_resume( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",130
0000006E 6080                    		SUB #08H, R0
00000070 A009                    		MOV.L R1, 04H[R0]
00000072 900A                    		MOV.W R2, 02H[R0]
                                 ;     131 {
                                 ;     132     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",132
00000074 B809                    		MOVU.W 02H[R0], R1
00000076 6101                    		CMP #00H, R1
00000078 21rr                    		BNE L24
0000007A                         L23:	; bb3
                                 ;     133     {
                                 ;     134         ptr->ipp->DVSTCTR0.WORD |= USB_RESUME;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",134
0000007A A809                    		MOV.L 04H[R0], R1
0000007C A891                    		MOV.L 08H[R1], R1
0000007E 9912                    		MOV.W 08H[R1], R2
00000080 7852                    		BSET #05H, R2
00000082 9112                    		MOV.W R2, 08H[R1]
00000084 6702                    		RTSD #08H
00000086                         L24:	; return
                                 ;     135     }
                                 ;     136 } /* eof usb_hreg_set_resume() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",136
00000086 6702                    		RTSD #08H
00000088                         _usb_hreg_clr_resume:
                                 		.STACK	_usb_hreg_clr_resume=12
                                 ;     137 
                                 ;     138 /******************************************************************************
                                 ;     139 Function Name   : usb_hreg_clr_resume
                                 ;     140 Description     : Clear the RESUME-bit specified port's DVSTCTR0 register 
                                 ;     141                 : When host. To prohibit output of resume signal to a USB Func-
                                 ;     142                 : tion.
                                 ;     143 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     144                 : uint16_t  port  : USB port number.
                                 ;     145 Return value    : none
                                 ;     146 ******************************************************************************/
                                 ;     147 void    usb_hreg_clr_resume( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",147
00000088 6080                    		SUB #08H, R0
0000008A A009                    		MOV.L R1, 04H[R0]
0000008C 900A                    		MOV.W R2, 02H[R0]
                                 ;     148 {
                                 ;     149     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",149
0000008E B809                    		MOVU.W 02H[R0], R1
00000090 6101                    		CMP #00H, R1
00000092 21rr                    		BNE L27
00000094                         L26:	; bb3
                                 ;     150     {
                                 ;     151         ptr->ipp->DVSTCTR0.WORD &= ~USB_RESUME;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",151
00000094 A809                    		MOV.L 04H[R0], R1
00000096 A891                    		MOV.L 08H[R1], R1
00000098 B912                    		MOVU.W 08H[R1], R2
0000009A 7722DFFF00              		AND #0FFDFH, R2
0000009F 9112                    		MOV.W R2, 08H[R1]
000000A1 6702                    		RTSD #08H
000000A3                         L27:	; return
                                 ;     152     }
                                 ;     153 } /* eof usb_hreg_clr_resume() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",153
000000A3 6702                    		RTSD #08H
000000A5                         _usb_hreg_set_uact:
                                 		.STACK	_usb_hreg_set_uact=12
                                 ;     154 
                                 ;     155 /******************************************************************************
                                 ;     156 Function Name   : usb_hreg_set_uact
                                 ;     157 Description     : Set UACT-bit (USB Bus Enable) specified port's DVSTCTR0 
                                 ;     158                 : register. When Host, to output SOF.
                                 ;     159 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     160                 : uint16_t  port  : USB port number.
                                 ;     161 Return value    : none
                                 ;     162 ******************************************************************************/
                                 ;     163 void    usb_hreg_set_uact( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",163
000000A5 6080                    		SUB #08H, R0
000000A7 A009                    		MOV.L R1, 04H[R0]
000000A9 900A                    		MOV.W R2, 02H[R0]
                                 ;     164 {
                                 ;     165     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",165
000000AB B809                    		MOVU.W 02H[R0], R1
000000AD 6101                    		CMP #00H, R1
000000AF 21rr                    		BNE L30
000000B1                         L29:	; bb3
                                 ;     166     {
                                 ;     167         ptr->ipp->DVSTCTR0.WORD |= USB_UACT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",167
000000B1 A809                    		MOV.L 04H[R0], R1
000000B3 A891                    		MOV.L 08H[R1], R1
000000B5 9912                    		MOV.W 08H[R1], R2
000000B7 7842                    		BSET #04H, R2
000000B9 9112                    		MOV.W R2, 08H[R1]
000000BB 6702                    		RTSD #08H
000000BD                         L30:	; return
                                 ;     168     }
                                 ;     169 } /* eof usb_hreg_set_uact() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",169
000000BD 6702                    		RTSD #08H
000000BF                         _usb_hreg_clr_uact:
                                 		.STACK	_usb_hreg_clr_uact=12
                                 ;     170 
                                 ;     171 /******************************************************************************
                                 ;     172 Function Name   : usb_hreg_clr_uact
                                 ;     173 Description     : Clear UACT-bit (USB Bus Enable) specified port's DVSTCTR0 
                                 ;     174                 : register. When Host, to prohibit output SOF.
                                 ;     175 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     176                 : uint16_t  port  : USB port number.
                                 ;     177 Return value    : none
                                 ;     178 ******************************************************************************/
                                 ;     179 void    usb_hreg_clr_uact( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",179
000000BF 6080                    		SUB #08H, R0
000000C1 A009                    		MOV.L R1, 04H[R0]
000000C3 900A                    		MOV.W R2, 02H[R0]
                                 ;     180 {
                                 ;     181     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",181
000000C5 B809                    		MOVU.W 02H[R0], R1
000000C7 6101                    		CMP #00H, R1
000000C9 21rr                    		BNE L33
000000CB                         L32:	; bb3
                                 ;     182     {
                                 ;     183         ptr->ipp->DVSTCTR0.WORD &= ~USB_UACT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",183
000000CB A809                    		MOV.L 04H[R0], R1
000000CD A891                    		MOV.L 08H[R1], R1
000000CF B912                    		MOVU.W 08H[R1], R2
000000D1 7722EFFF00              		AND #0FFEFH, R2
000000D6 9112                    		MOV.W R2, 08H[R1]
000000D8 6702                    		RTSD #08H
000000DA                         L33:	; return
                                 ;     184     }
                                 ;     185 } /* eof usb_hreg_clr_uact() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",185
000000DA 6702                    		RTSD #08H
000000DC                         _usb_hreg_read_intenb:
                                 		.STACK	_usb_hreg_read_intenb=12
                                 ;     186 
                                 ;     187 /**************/
                                 ;     188 /*  TESTMODE  */
                                 ;     189 /**************/
                                 ;     190 
                                 ;     191 /************/
                                 ;     192 /*  PINCFG  */
                                 ;     193 /************/
                                 ;     194 
                                 ;     195 /**********************************/
                                 ;     196 /*  DMA0CFG, DMA1CFG  for 597ASSP */
                                 ;     197 /**********************************/
                                 ;     198 
                                 ;     199 /***************************/
                                 ;     200 /*  CFIFO, D0FIFO, D1FIFO  */
                                 ;     201 /***************************/
                                 ;     202 
                                 ;     203 /**********************************/
                                 ;     204 /* CFIFOSEL, D0FIFOSEL, D1FIFOSEL */
                                 ;     205 /**********************************/
                                 ;     206 
                                 ;     207 /**********************************/
                                 ;     208 /* CFIFOCTR, D0FIFOCTR, D1FIFOCTR */
                                 ;     209 /**********************************/
                                 ;     210 
                                 ;     211 /*************/
                                 ;     212 /*  INTENB0  */
                                 ;     213 /*************/
                                 ;     214 
                                 ;     215 /*************/
                                 ;     216 /*  INTENB1  */
                                 ;     217 /*************/
                                 ;     218 /* Interrupt Enable Register 1 */
                                 ;     219 
                                 ;     220 /******************************************************************************
                                 ;     221 Function Name   : usb_hreg_read_intenb
                                 ;     222 Description     : Returns the value of the specified port's INTENB1 register.
                                 ;     223                 : uint16_t  port  : USB port number. //$REA - not used.
                                 ;     224 Return value    : INTENB1/INTENB2 content
                                 ;     225 ******************************************************************************/
                                 ;     226 uint16_t    usb_hreg_read_intenb( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",226
000000DC 6080                    		SUB #08H, R0
000000DE A009                    		MOV.L R1, 04H[R0]
000000E0 900A                    		MOV.W R2, 02H[R0]
                                 ;     227 {
                                 ;     228     return ptr->ipp->INTENB1.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",228
000000E2 A809                    		MOV.L 04H[R0], R1
000000E4 A891                    		MOV.L 08H[R1], R1
000000E6 D11019                  		MOV.W 32H[R1], [R0]
000000E9 DC01                    		MOV.W [R0], R1
000000EB                         L35:	; entry.split
                                 ;     229 } /* eof usb_hreg_read_intenb() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",229
000000EB 5F11                    		MOVU.W R1, R1
000000ED 6702                    		RTSD #08H
000000EF                         _usb_hreg_write_intenb:
                                 		.STACK	_usb_hreg_write_intenb=12
                                 ;     230 
                                 ;     231 /******************************************************************************
                                 ;     232 Function Name   : usb_hreg_write_intenb
                                 ;     233 Description     : Write the specified data to the specified port's INTENB register.
                                 ;     234 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     235                 : uint16_t  port  : USB port number.
                                 ;     236                 : uint16_t  data  : The value to write.
                                 ;     237 Return value    : none
                                 ;     238 ******************************************************************************/
                                 ;     239 void    usb_hreg_write_intenb( USB_UTR_t *ptr, uint16_t port, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",239
000000EF 6080                    		SUB #08H, R0
000000F1 A009                    		MOV.L R1, 04H[R0]
000000F3 900A                    		MOV.W R2, 02H[R0]
000000F5 D303                    		MOV.W R3, [R0]
                                 ;     240 {
                                 ;     241     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",241
000000F7 B809                    		MOVU.W 02H[R0], R1
000000F9 6101                    		CMP #00H, R1
000000FB 18                   S  		BNE L38
000000FC                         L37:	; bb4
                                 ;     242     {
                                 ;     243         ptr->ipp->INTENB1.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",243
000000FC A809                    		MOV.L 04H[R0], R1
000000FE A891                    		MOV.L 08H[R1], R1
00000100 D40119                  		MOV.W [R0], 32H[R1]
00000103 6702                    		RTSD #08H
00000105                         L38:	; return
                                 ;     244     }
                                 ;     245 } /* eof usb_hreg_write_intenb() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",245
00000105 6702                    		RTSD #08H
00000107                         _usb_hreg_set_enb_ovrcre:
                                 		.STACK	_usb_hreg_set_enb_ovrcre=12
                                 ;     246 
                                 ;     247 /******************************************************************************
                                 ;     248 Function Name   : usb_hreg_set_enb_ovrcre
                                 ;     249 Description     : Set specified port's OVRCRE-bit (Overcurrent Input Change Int-
                                 ;     250                 : errupt Status Enable) in the INTENB1 register.
                                 ;     251 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     252                 : uint16_t  port  : USB port number.
                                 ;     253 Return value    : none
                                 ;     254 ******************************************************************************/
                                 ;     255 void    usb_hreg_set_enb_ovrcre( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",255
00000107 6080                    		SUB #08H, R0
00000109 A009                    		MOV.L R1, 04H[R0]
0000010B 900A                    		MOV.W R2, 02H[R0]
                                 ;     256 {
                                 ;     257     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",257
0000010D B809                    		MOVU.W 02H[R0], R1
0000010F 6101                    		CMP #00H, R1
00000111 21rr                    		BNE L41
00000113                         L40:	; bb3
                                 ;     258     {
                                 ;     259         ptr->ipp->INTENB1.WORD |= USB_OVRCRE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",259
00000113 A809                    		MOV.L 04H[R0], R1
00000115 A891                    		MOV.L 08H[R1], R1
00000117 9E1A                    		MOV.W 32H[R1], R2
00000119 78F2                    		BSET #0FH, R2
0000011B 961A                    		MOV.W R2, 32H[R1]
0000011D 6702                    		RTSD #08H
0000011F                         L41:	; return
                                 ;     260     }
                                 ;     261 } /* eof usb_hreg_set_enb_ovrcre() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",261
0000011F 6702                    		RTSD #08H
00000121                         _usb_hreg_clr_enb_ovrcre:
                                 		.STACK	_usb_hreg_clr_enb_ovrcre=12
                                 ;     262 
                                 ;     263 /******************************************************************************
                                 ;     264 Function Name   : usb_hreg_clr_enb_ovrcre
                                 ;     265 Description     : Clear the OVRCRE-bit of the specified port's INTENB1 register,
                                 ;     266                 : to prohibit VBUS interrupts.
                                 ;     267 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     268                 : uint16_t  port  : USB port number.
                                 ;     269 Return value    : none
                                 ;     270 ******************************************************************************/
                                 ;     271 void    usb_hreg_clr_enb_ovrcre( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",271
00000121 6080                    		SUB #08H, R0
00000123 A009                    		MOV.L R1, 04H[R0]
00000125 900A                    		MOV.W R2, 02H[R0]
                                 ;     272 {
                                 ;     273     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",273
00000127 B809                    		MOVU.W 02H[R0], R1
00000129 6101                    		CMP #00H, R1
0000012B 21rr                    		BNE L44
0000012D                         L43:	; bb3
                                 ;     274     {
                                 ;     275         ptr->ipp->INTENB1.WORD &= ~USB_OVRCRE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",275
0000012D A809                    		MOV.L 04H[R0], R1
0000012F A891                    		MOV.L 08H[R1], R1
00000131 BE1A                    		MOVU.W 32H[R1], R2
00000133 7622FF7F                		AND #7FFFH, R2
00000137 961A                    		MOV.W R2, 32H[R1]
00000139 6702                    		RTSD #08H
0000013B                         L44:	; return
                                 ;     276     }
                                 ;     277 } /* eof usb_hreg_clr_enb_ovrcre() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",277
0000013B 6702                    		RTSD #08H
0000013D                         _usb_hreg_set_enb_bchge:
                                 		.STACK	_usb_hreg_set_enb_bchge=12
                                 ;     278 
                                 ;     279 /******************************************************************************
                                 ;     280 Function Name   : usb_hreg_set_enb_bchge
                                 ;     281 Description     : The BCHGE-bit (USB Bus Change Interrupt Enable) is set in the 
                                 ;     282                 : specified port's INTENB1 register. This will cause a BCHG 
                                 ;     283                 : interrupt when a change of USB bus state has been detected.
                                 ;     284 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     285                 : uint16_t  port  : USB port number.
                                 ;     286 Return value    : none
                                 ;     287 ******************************************************************************/
                                 ;     288 void    usb_hreg_set_enb_bchge( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",288
0000013D 6080                    		SUB #08H, R0
0000013F A009                    		MOV.L R1, 04H[R0]
00000141 900A                    		MOV.W R2, 02H[R0]
                                 ;     289 {
                                 ;     290     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",290
00000143 B809                    		MOVU.W 02H[R0], R1
00000145 6101                    		CMP #00H, R1
00000147 21rr                    		BNE L47
00000149                         L46:	; bb3
                                 ;     291     {
                                 ;     292         ptr->ipp->INTENB1.WORD |= USB_BCHGE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",292
00000149 A809                    		MOV.L 04H[R0], R1
0000014B A891                    		MOV.L 08H[R1], R1
0000014D 9E1A                    		MOV.W 32H[R1], R2
0000014F 78E2                    		BSET #0EH, R2
00000151 961A                    		MOV.W R2, 32H[R1]
00000153 6702                    		RTSD #08H
00000155                         L47:	; return
                                 ;     293     }
                                 ;     294 } /* eof usb_hreg_set_enb_bchge() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",294
00000155 6702                    		RTSD #08H
00000157                         _usb_hreg_clr_enb_bchge:
                                 		.STACK	_usb_hreg_clr_enb_bchge=12
                                 ;     295 
                                 ;     296 /******************************************************************************
                                 ;     297 Function Name   : usb_hreg_clr_enb_bchge
                                 ;     298 Description     : The BCHGE-bit (USB Bus Change Interrupt Enable) is cleared in 
                                 ;     299                 : the specified port's INTENB1 register.
                                 ;     300 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     301                 : uint16_t  port  : USB port number.
                                 ;     302 Return value    : none
                                 ;     303 ******************************************************************************/
                                 ;     304 void    usb_hreg_clr_enb_bchge( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",304
00000157 6080                    		SUB #08H, R0
00000159 A009                    		MOV.L R1, 04H[R0]
0000015B 900A                    		MOV.W R2, 02H[R0]
                                 ;     305 {
                                 ;     306     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",306
0000015D B809                    		MOVU.W 02H[R0], R1
0000015F 6101                    		CMP #00H, R1
00000161 21rr                    		BNE L50
00000163                         L49:	; bb3
                                 ;     307     {
                                 ;     308         ptr->ipp->INTENB1.WORD &= ~USB_BCHGE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",308
00000163 A809                    		MOV.L 04H[R0], R1
00000165 A891                    		MOV.L 08H[R1], R1
00000167 BE1A                    		MOVU.W 32H[R1], R2
00000169 7722FFBF00              		AND #0BFFFH, R2
0000016E 961A                    		MOV.W R2, 32H[R1]
00000170 6702                    		RTSD #08H
00000172                         L50:	; return
                                 ;     309     }
                                 ;     310 } /* eof usb_hreg_clr_enb_bchge() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",310
00000172 6702                    		RTSD #08H
00000174                         _usb_hreg_set_enb_dtche:
                                 		.STACK	_usb_hreg_set_enb_dtche=12
                                 ;     311 
                                 ;     312 /******************************************************************************
                                 ;     313 Function Name   : usb_hreg_set_enb_dtche
                                 ;     314 Description     : Enable the specified port's DTCHE-interrupt "Disconnection 
                                 ;     315                 : Detection" by setting the DTCHE-bit.
                                 ;     316 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     317                 : uint16_t  port  : USB port number.
                                 ;     318 Return value    : none
                                 ;     319 ******************************************************************************/
                                 ;     320 void    usb_hreg_set_enb_dtche( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",320
00000174 6080                    		SUB #08H, R0
00000176 A009                    		MOV.L R1, 04H[R0]
00000178 900A                    		MOV.W R2, 02H[R0]
                                 ;     321 {
                                 ;     322     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",322
0000017A B809                    		MOVU.W 02H[R0], R1
0000017C 6101                    		CMP #00H, R1
0000017E 21rr                    		BNE L53
00000180                         L52:	; bb3
                                 ;     323     {
                                 ;     324         ptr->ipp->INTENB1.WORD |= USB_DTCHE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",324
00000180 A809                    		MOV.L 04H[R0], R1
00000182 A891                    		MOV.L 08H[R1], R1
00000184 9E1A                    		MOV.W 32H[R1], R2
00000186 78C2                    		BSET #0CH, R2
00000188 961A                    		MOV.W R2, 32H[R1]
0000018A 6702                    		RTSD #08H
0000018C                         L53:	; return
                                 ;     325     }
                                 ;     326 } /* eof usb_hreg_set_enb_dtche() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",326
0000018C 6702                    		RTSD #08H
0000018E                         _usb_hreg_clr_enb_dtche:
                                 		.STACK	_usb_hreg_clr_enb_dtche=12
                                 ;     327 
                                 ;     328 /******************************************************************************
                                 ;     329 Function Name   : usb_hreg_clr_enb_dtche
                                 ;     330 Description     : Disable the specified port's DTCHE-interrupt "Disconnection 
                                 ;     331                 : Detection" by clearing the DTCHE-bit.
                                 ;     332 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     333                 : uint16_t  port  : USB port number.
                                 ;     334 Return value    : none
                                 ;     335 ******************************************************************************/
                                 ;     336 void    usb_hreg_clr_enb_dtche( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",336
0000018E 6080                    		SUB #08H, R0
00000190 A009                    		MOV.L R1, 04H[R0]
00000192 900A                    		MOV.W R2, 02H[R0]
                                 ;     337 {
                                 ;     338     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",338
00000194 B809                    		MOVU.W 02H[R0], R1
00000196 6101                    		CMP #00H, R1
00000198 21rr                    		BNE L56
0000019A                         L55:	; bb3
                                 ;     339     {
                                 ;     340         ptr->ipp->INTENB1.WORD &= ~USB_DTCHE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",340
0000019A A809                    		MOV.L 04H[R0], R1
0000019C A891                    		MOV.L 08H[R1], R1
0000019E BE1A                    		MOVU.W 32H[R1], R2
000001A0 7722FFEF00              		AND #0EFFFH, R2
000001A5 961A                    		MOV.W R2, 32H[R1]
000001A7 6702                    		RTSD #08H
000001A9                         L56:	; return
                                 ;     341     }
                                 ;     342 } /* eof usb_hreg_clr_enb_bchge() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",342
000001A9 6702                    		RTSD #08H
000001AB                         _usb_hreg_set_enb_attche:
                                 		.STACK	_usb_hreg_set_enb_attche=12
                                 ;     343 
                                 ;     344 /******************************************************************************
                                 ;     345 Function Name   : usb_hreg_set_enb_attche
                                 ;     346 Description     : Enable the specified port's ATTCHE-interrupt "Connection 
                                 ;     347                 : Detection" by setting the ATTCHE-bit.
                                 ;     348 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     349                 : uint16_t  port  : USB port number.
                                 ;     350 Return value    : none
                                 ;     351 ******************************************************************************/
                                 ;     352 void    usb_hreg_set_enb_attche( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",352
000001AB 6080                    		SUB #08H, R0
000001AD A009                    		MOV.L R1, 04H[R0]
000001AF 900A                    		MOV.W R2, 02H[R0]
                                 ;     353 {
                                 ;     354     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",354
000001B1 B809                    		MOVU.W 02H[R0], R1
000001B3 6101                    		CMP #00H, R1
000001B5 21rr                    		BNE L59
000001B7                         L58:	; bb3
                                 ;     355     {
                                 ;     356         ptr->ipp->INTENB1.WORD |= USB_ATTCHE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",356
000001B7 A809                    		MOV.L 04H[R0], R1
000001B9 A891                    		MOV.L 08H[R1], R1
000001BB 9E1A                    		MOV.W 32H[R1], R2
000001BD 78B2                    		BSET #0BH, R2
000001BF 961A                    		MOV.W R2, 32H[R1]
000001C1 6702                    		RTSD #08H
000001C3                         L59:	; return
                                 ;     357     }
                                 ;     358 } /* eof usb_hreg_set_enb_attche() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",358
000001C3 6702                    		RTSD #08H
000001C5                         _usb_hreg_clr_enb_attche:
                                 		.STACK	_usb_hreg_clr_enb_attche=12
                                 ;     359 
                                 ;     360 /******************************************************************************
                                 ;     361 Function Name   : usb_hreg_clr_enb_attche
                                 ;     362 Description     : Disable the specified port's ATTCHE-interrupt "Disconnection 
                                 ;     363                 : Detection" by clearing the ATTCHE-bit.
                                 ;     364 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     365                 : uint16_t  port  : USB port number.
                                 ;     366 Return value    : none
                                 ;     367 ******************************************************************************/
                                 ;     368 void    usb_hreg_clr_enb_attche( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",368
000001C5 6080                    		SUB #08H, R0
000001C7 A009                    		MOV.L R1, 04H[R0]
000001C9 900A                    		MOV.W R2, 02H[R0]
                                 ;     369 {
                                 ;     370     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",370
000001CB B809                    		MOVU.W 02H[R0], R1
000001CD 6101                    		CMP #00H, R1
000001CF 21rr                    		BNE L62
000001D1                         L61:	; bb3
                                 ;     371     {
                                 ;     372         ptr->ipp->INTENB1.WORD &= ~USB_ATTCHE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",372
000001D1 A809                    		MOV.L 04H[R0], R1
000001D3 A891                    		MOV.L 08H[R1], R1
000001D5 BE1A                    		MOVU.W 32H[R1], R2
000001D7 7722FFF700              		AND #0F7FFH, R2
000001DC 961A                    		MOV.W R2, 32H[R1]
000001DE 6702                    		RTSD #08H
000001E0                         L62:	; return
                                 ;     373     }
                                 ;     374 } /* eof usb_hreg_clr_enb_attche() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",374
000001E0 6702                    		RTSD #08H
000001E2                         _usb_hreg_set_enb_signe:
                                 		.STACK	_usb_hreg_set_enb_signe=8
                                 ;     375 
                                 ;     376 /******************************************************************************
                                 ;     377 Function Name   : usb_hreg_set_enb_signe
                                 ;     378 Description     : Enable the SIGNE-interrupt "Setup Transaction
                                 ;     379                 : Error" by setting the SIGNE-bit.
                                 ;     380 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     381 Return value    : none
                                 ;     382 ******************************************************************************/
                                 ;     383 void    usb_hreg_set_enb_signe( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",383
000001E2 6040                    		SUB #04H, R0
000001E4 E301                    		MOV.L R1, [R0]
                                 ;     384 {
                                 ;     385     ptr->ipp->INTENB1.WORD |= USB_SIGNE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",385
000001E6 A891                    		MOV.L 08H[R1], R1
000001E8 9E1A                    		MOV.W 32H[R1], R2
000001EA 7852                    		BSET #05H, R2
000001EC 961A                    		MOV.W R2, 32H[R1]
000001EE 6701                    		RTSD #04H
000001F0                         _usb_hreg_clr_enb_signe:
                                 		.STACK	_usb_hreg_clr_enb_signe=8
                                 ;     386 } /* eof usb_hreg_set_enb_signe() */
                                 ;     387 
                                 ;     388 /******************************************************************************
                                 ;     389 Function Name   : usb_hreg_clr_enb_signe
                                 ;     390 Description     : Disable the SIGNE-interrupt "Setup Transac-
                                 ;     391                 : tion Error" by clearing the SIGNE-bit.
                                 ;     392 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     393 Return value    : none
                                 ;     394 ******************************************************************************/
                                 ;     395 void    usb_hreg_clr_enb_signe( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",395
000001F0 6040                    		SUB #04H, R0
000001F2 E301                    		MOV.L R1, [R0]
                                 ;     396 {
                                 ;     397     ptr->ipp->INTENB1.WORD &= ~USB_SIGNE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",397
000001F4 A891                    		MOV.L 08H[R1], R1
000001F6 BE1A                    		MOVU.W 32H[R1], R2
000001F8 7722DFFF00              		AND #0FFDFH, R2
000001FD 961A                    		MOV.W R2, 32H[R1]
000001FF 6701                    		RTSD #04H
00000201                         _usb_hreg_set_enb_sacke:
                                 		.STACK	_usb_hreg_set_enb_sacke=8
                                 ;     398 } /* eof usb_hreg_clr_enb_signe() */
                                 ;     399 
                                 ;     400 /******************************************************************************
                                 ;     401 Function Name   : usb_hreg_set_enb_sacke
                                 ;     402 Description     : Enable the SACKE-interrupt "Setup Transaction 
                                 ;     403                 : Normal Response" by setting the SACKE-bit.
                                 ;     404 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     405 Return value    : none
                                 ;     406 ******************************************************************************/
                                 ;     407 void    usb_hreg_set_enb_sacke( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",407
00000201 6040                    		SUB #04H, R0
00000203 E301                    		MOV.L R1, [R0]
                                 ;     408 {
                                 ;     409     ptr->ipp->INTENB1.WORD |= USB_SACKE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",409
00000205 A891                    		MOV.L 08H[R1], R1
00000207 9E1A                    		MOV.W 32H[R1], R2
00000209 7842                    		BSET #04H, R2
0000020B 961A                    		MOV.W R2, 32H[R1]
0000020D 6701                    		RTSD #04H
0000020F                         _usb_hreg_clr_enb_sacke:
                                 		.STACK	_usb_hreg_clr_enb_sacke=8
                                 ;     410 } /* eof usb_hreg_set_enb_sacke() */
                                 ;     411 
                                 ;     412 /******************************************************************************
                                 ;     413 Function Name   : usb_hreg_clr_enb_sacke
                                 ;     414 Description     : Disable the SACKE-interrupt "Setup Transac-
                                 ;     415                 : tion Normal Response" by clearing the SACKE-bit.
                                 ;     416 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     417 Return value    : none
                                 ;     418 ******************************************************************************/
                                 ;     419 void    usb_hreg_clr_enb_sacke( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",419
0000020F 6040                    		SUB #04H, R0
00000211 E301                    		MOV.L R1, [R0]
                                 ;     420 {
                                 ;     421     ptr->ipp->INTENB1.WORD &= ~USB_SACKE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",421
00000213 A891                    		MOV.L 08H[R1], R1
00000215 BE1A                    		MOVU.W 32H[R1], R2
00000217 7722EFFF00              		AND #0FFEFH, R2
0000021C 961A                    		MOV.W R2, 32H[R1]
0000021E 6701                    		RTSD #04H
00000220                         _usb_hreg_set_trnensel:
                                 		.STACK	_usb_hreg_set_trnensel=8
                                 ;     422 } /* eof usb_hreg_clr_enb_sacke() */
                                 ;     423 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;     424 /******************************************************************************
                                 ;     425 Function Name   : usb_hreg_set_enb_pddetinte
                                 ;     426 Description     : Enable the PDDETINT-interrupt "Connection Detection for 
                                 ;     427                 : Battery Charging Supporting Device" by setting 
                                 ;     428                 : the PDDETINTE-bit.
                                 ;     429 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     430 Return value    : none
                                 ;     431 ******************************************************************************/
                                 ;     432 void    usb_hreg_set_enb_pddetinte( USB_UTR_t *ptr )
                                 ;     433 {
                                 ;     434     if(ptr->ip == USB_USBIP_1)
                                 ;     435     {
                                 ;     436         ptr->ipp1->INTENB1.WORD |= USB_PDDETINTE;
                                 ;     437     }
                                 ;     438 } /* eof usb_hreg_set_enb_pddetinte() */
                                 ;     439 
                                 ;     440 /******************************************************************************
                                 ;     441 Function Name   : usb_hreg_clr_enb_pddetinte
                                 ;     442 Description     : Disable the PDDETINT-interrupt "Connection Detection for 
                                 ;     443                 : Battery Charging Supporting Device" by clearing 
                                 ;     444                 : the PDDETINTE-bit.
                                 ;     445 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     446 Return value    : none
                                 ;     447 ******************************************************************************/
                                 ;     448 void    usb_hreg_clr_enb_pddetinte( USB_UTR_t *ptr )
                                 ;     449 {
                                 ;     450     if(ptr->ip == USB_USBIP_1)
                                 ;     451     {
                                 ;     452         ptr->ipp1->INTENB1.WORD &= ~USB_PDDETINTE;
                                 ;     453     }
                                 ;     454 } /* eof usb_hreg_clr_enb_pddetinte() */
                                 ;     455 #endif  /* defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M) */
                                 ;     456 /*************/
                                 ;     457 /*  BRDYENB  */
                                 ;     458 /*************/
                                 ;     459 
                                 ;     460 /*************/
                                 ;     461 /*  NRDYENB  */
                                 ;     462 /*************/
                                 ;     463 
                                 ;     464 /*************/
                                 ;     465 /*  BEMPENB  */
                                 ;     466 /*************/
                                 ;     467 
                                 ;     468 /*************/
                                 ;     469 /*  SOFCFG   */
                                 ;     470 /*************/
                                 ;     471 /* SOF Output Configuration */
                                 ;     472 
                                 ;     473 /******************************************************************************
                                 ;     474 Function Name   : usb_hreg_set_trnensel
                                 ;     475 Description     : When host, set the TRNENSEL-bit; "Transac-
                                 ;     476                 : tion-Enabled Time Select" for low-speed USB communication.
                                 ;     477                 : This bit should be set to 0 if USB Function.
                                 ;     478 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     479 Return value    : none
                                 ;     480 ******************************************************************************/
                                 ;     481 void    usb_hreg_set_trnensel( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",481
00000220 6040                    		SUB #04H, R0
00000222 E301                    		MOV.L R1, [R0]
                                 ;     482 {
                                 ;     483     ptr->ipp->SOFCFG.WORD |= USB_TRNENSEL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",483
00000224 A891                    		MOV.L 08H[R1], R1
00000226 9F92                    		MOV.W 3CH[R1], R2
00000228 7882                    		BSET #08H, R2
0000022A 9792                    		MOV.W R2, 3CH[R1]
0000022C 6701                    		RTSD #04H
0000022E                         _usb_hreg_clr_trnensel:
                                 		.STACK	_usb_hreg_clr_trnensel=8
                                 ;     484 } /* eof usb_hreg_set_trnensel() */
                                 ;     485 
                                 ;     486 /******************************************************************************
                                 ;     487 Function Name   : usb_hreg_clr_trnensel
                                 ;     488 Description     : When host, clear the TRNENSEL-bit; "Transac-
                                 ;     489                 : tion-Enabled Time Select" for non low-speed communication.
                                 ;     490                 : This bit should be set to 0 if USB Function.
                                 ;     491 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     492 Return value    : none
                                 ;     493 ******************************************************************************/
                                 ;     494 void    usb_hreg_clr_trnensel( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",494
0000022E 6040                    		SUB #04H, R0
00000230 E301                    		MOV.L R1, [R0]
                                 ;     495 {
                                 ;     496     ptr->ipp->SOFCFG.WORD &= ~USB_TRNENSEL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",496
00000232 A891                    		MOV.L 08H[R1], R1
00000234 BF92                    		MOVU.W 3CH[R1], R2
00000236 7722FFFE00              		AND #0FEFFH, R2
0000023B 9792                    		MOV.W R2, 3CH[R1]
0000023D 6701                    		RTSD #04H
0000023F                         _usb_hreg_read_intsts:
                                 		.STACK	_usb_hreg_read_intsts=12
                                 ;     497 } /* eof usb_hreg_clr_trnensel() */
                                 ;     498 
                                 ;     499 /*************/
                                 ;     500 /*  INTSTS0  */
                                 ;     501 /*************/
                                 ;     502 
                                 ;     503 /*************/
                                 ;     504 /*  INTSTS1  */
                                 ;     505 /*************/
                                 ;     506 /* Interrupt Status Register 1  */
                                 ;     507 
                                 ;     508 /******************************************************************************
                                 ;     509 Function Name   : usb_hreg_read_intsts
                                 ;     510 Description     : Returns the value of the specified port's INTSTS1 register.
                                 ;     511 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     512                 : uint16_t  port  : USB port number.
                                 ;     513 Return value    : INTSTS1 content
                                 ;     514 ******************************************************************************/
                                 ;     515 uint16_t    usb_hreg_read_intsts( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",515
0000023F 6080                    		SUB #08H, R0
00000241 A009                    		MOV.L R1, 04H[R0]
00000243 900A                    		MOV.W R2, 02H[R0]
                                 ;     516 {
                                 ;     517     return (uint16_t)(ptr->ipp->INTSTS1.WORD);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",517
00000245 A809                    		MOV.L 04H[R0], R1
00000247 A891                    		MOV.L 08H[R1], R1
00000249 D11021                  		MOV.W 42H[R1], [R0]
0000024C DC01                    		MOV.W [R0], R1
0000024E                         L70:	; entry.split
                                 ;     518 } /* eof usb_hreg_read_intsts() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",518
0000024E 5F11                    		MOVU.W R1, R1
00000250 6702                    		RTSD #08H
00000252                         _usb_hreg_write_intsts:
                                 		.STACK	_usb_hreg_write_intsts=12
                                 ;     519 
                                 ;     520 /******************************************************************************
                                 ;     521 Function Name   : usb_hreg_write_intsts
                                 ;     522 Description     : Write the specified data to the specified port's INTSTS1 reg-
                                 ;     523                 : ister.
                                 ;     524 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     525                 : uint16_t  port  : USB port number.
                                 ;     526                 : uint16_t  data  : The value to write.
                                 ;     527 Return value    : none
                                 ;     528 ******************************************************************************/
                                 ;     529 void    usb_hreg_write_intsts( USB_UTR_t *ptr, uint16_t port, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",529
00000252 6080                    		SUB #08H, R0
00000254 A009                    		MOV.L R1, 04H[R0]
00000256 900A                    		MOV.W R2, 02H[R0]
00000258 D303                    		MOV.W R3, [R0]
                                 ;     530 {
                                 ;     531     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",531
0000025A B809                    		MOVU.W 02H[R0], R1
0000025C 6101                    		CMP #00H, R1
0000025E 18                   S  		BNE L73
0000025F                         L72:	; bb4
                                 ;     532     {
                                 ;     533         ptr->ipp->INTSTS1.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",533
0000025F A809                    		MOV.L 04H[R0], R1
00000261 A891                    		MOV.L 08H[R1], R1
00000263 D40121                  		MOV.W [R0], 42H[R1]
00000266 6702                    		RTSD #08H
00000268                         L73:	; return
                                 ;     534     }
                                 ;     535 } /* eof usb_hreg_write_intsts() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",535
00000268 6702                    		RTSD #08H
0000026A                         _usb_hreg_clr_sts_ovrcr:
                                 		.STACK	_usb_hreg_clr_sts_ovrcr=12
                                 ;     536 
                                 ;     537 /******************************************************************************
                                 ;     538 Function Name   : usb_hreg_clr_sts_ovrcr
                                 ;     539 Description     : Clear the specified port's OVRCR-bit; "Overcurrent 
                                 ;     540                 : Input Change Interrupt Status".
                                 ;     541 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     542                 : uint16_t  port  : USB port number.
                                 ;     543 Return value    : none
                                 ;     544 ******************************************************************************/
                                 ;     545 void    usb_hreg_clr_sts_ovrcr( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",545
0000026A 6080                    		SUB #08H, R0
0000026C A009                    		MOV.L R1, 04H[R0]
0000026E 900A                    		MOV.W R2, 02H[R0]
                                 ;     546 {
                                 ;     547     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",547
00000270 B809                    		MOVU.W 02H[R0], R1
00000272 6101                    		CMP #00H, R1
00000274 21rr                    		BNE L76
00000276                         L75:	; bb3
                                 ;     548     {
                                 ;     549         ptr->ipp->INTSTS1.WORD = (uint16_t)~USB_OVRCR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",549
00000276 A809                    		MOV.L 04H[R0], R1
00000278 A891                    		MOV.L 08H[R1], R1
0000027A F91921FF7F              		MOV.W #7FFFH, 42H[R1]
0000027F 6702                    		RTSD #08H
00000281                         L76:	; return
                                 ;     550     }
                                 ;     551 } /* eof usb_hreg_clr_sts_ovrcr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",551
00000281 6702                    		RTSD #08H
00000283                         _usb_hreg_clr_sts_bchg:
                                 		.STACK	_usb_hreg_clr_sts_bchg=12
                                 ;     552 
                                 ;     553 /******************************************************************************
                                 ;     554 Function Name   : usb_hreg_clr_sts_bchg
                                 ;     555 Description     : Clear the specified port's BCHG-bit; "USB Bus Change Interrupt 
                                 ;     556                 : Status".
                                 ;     557 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     558                 : uint16_t  port  : USB port number.
                                 ;     559 Return value    : none
                                 ;     560 ******************************************************************************/
                                 ;     561 void    usb_hreg_clr_sts_bchg( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",561
00000283 6080                    		SUB #08H, R0
00000285 A009                    		MOV.L R1, 04H[R0]
00000287 900A                    		MOV.W R2, 02H[R0]
                                 ;     562 {
                                 ;     563     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",563
00000289 B809                    		MOVU.W 02H[R0], R1
0000028B 6101                    		CMP #00H, R1
0000028D 21rr                    		BNE L79
0000028F                         L78:	; bb3
                                 ;     564     {
                                 ;     565         ptr->ipp->INTSTS1.WORD = (uint16_t)~USB_BCHG;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",565
0000028F A809                    		MOV.L 04H[R0], R1
00000291 A891                    		MOV.L 08H[R1], R1
00000293 F91921FFBF              		MOV.W #0BFFFH, 42H[R1]
00000298 6702                    		RTSD #08H
0000029A                         L79:	; return
                                 ;     566     }
                                 ;     567 } /* eof usb_hreg_clr_sts_bchg() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",567
0000029A 6702                    		RTSD #08H
0000029C                         _usb_hreg_clr_sts_dtch:
                                 		.STACK	_usb_hreg_clr_sts_dtch=12
                                 ;     568 
                                 ;     569 /******************************************************************************
                                 ;     570 Function Name   : usb_hreg_clr_sts_dtch
                                 ;     571 Description     : Clear the specified port's DTCH-bit; "USB Disconnection Detec-
                                 ;     572                 : tion Interrupt Status".
                                 ;     573 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     574                 : uint16_t  port  : USB port number.
                                 ;     575 Return value    : none
                                 ;     576 ******************************************************************************/
                                 ;     577 void    usb_hreg_clr_sts_dtch( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",577
0000029C 6080                    		SUB #08H, R0
0000029E A009                    		MOV.L R1, 04H[R0]
000002A0 900A                    		MOV.W R2, 02H[R0]
                                 ;     578 {
                                 ;     579     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",579
000002A2 B809                    		MOVU.W 02H[R0], R1
000002A4 6101                    		CMP #00H, R1
000002A6 21rr                    		BNE L82
000002A8                         L81:	; bb3
                                 ;     580     {
                                 ;     581         ptr->ipp->INTSTS1.WORD = (uint16_t)~USB_DTCH;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",581
000002A8 A809                    		MOV.L 04H[R0], R1
000002AA A891                    		MOV.L 08H[R1], R1
000002AC F91921FFEF              		MOV.W #0EFFFH, 42H[R1]
000002B1 6702                    		RTSD #08H
000002B3                         L82:	; return
                                 ;     582     }
                                 ;     583 } /* eof usb_hreg_clr_sts_dtch() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",583
000002B3 6702                    		RTSD #08H
000002B5                         _usb_hreg_clr_sts_attch:
                                 		.STACK	_usb_hreg_clr_sts_attch=12
                                 ;     584 
                                 ;     585 /******************************************************************************
                                 ;     586 Function Name   : usb_hreg_clr_sts_attch
                                 ;     587 Description     : Clear the specified port's ATTCH-bit; "ATTCH Interrupt Status".
                                 ;     588 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     589                 : uint16_t  port  : USB port number.
                                 ;     590 Return value    : none
                                 ;     591 ******************************************************************************/
                                 ;     592 void    usb_hreg_clr_sts_attch( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",592
000002B5 6080                    		SUB #08H, R0
000002B7 A009                    		MOV.L R1, 04H[R0]
000002B9 900A                    		MOV.W R2, 02H[R0]
                                 ;     593 {
                                 ;     594     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",594
000002BB B809                    		MOVU.W 02H[R0], R1
000002BD 6101                    		CMP #00H, R1
000002BF 21rr                    		BNE L85
000002C1                         L84:	; bb3
                                 ;     595     {
                                 ;     596         ptr->ipp->INTSTS1.WORD = (uint16_t)~USB_ATTCH;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",596
000002C1 A809                    		MOV.L 04H[R0], R1
000002C3 A891                    		MOV.L 08H[R1], R1
000002C5 F91921FFF7              		MOV.W #0F7FFH, 42H[R1]
000002CA 6702                    		RTSD #08H
000002CC                         L85:	; return
                                 ;     597     }
                                 ;     598 } /* eof usb_hreg_clr_sts_attch() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",598
000002CC 6702                    		RTSD #08H
000002CE                         _usb_hreg_clr_sts_eoferr:
                                 		.STACK	_usb_hreg_clr_sts_eoferr=12
                                 ;     599 
                                 ;     600 /******************************************************************************
                                 ;     601 Function Name   : usb_hreg_clr_sts_eoferr
                                 ;     602 Description     : Clear the specified port's EOFERR-bit; "EOF Error Detection 
                                 ;     603                 : Interrupt Status".
                                 ;     604 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     605                 : uint16_t  port  : USB port number.
                                 ;     606 Return value    : none
                                 ;     607 ******************************************************************************/
                                 ;     608 void    usb_hreg_clr_sts_eoferr( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",608
000002CE 6080                    		SUB #08H, R0
000002D0 A009                    		MOV.L R1, 04H[R0]
000002D2 900A                    		MOV.W R2, 02H[R0]
                                 ;     609 {
                                 ;     610     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",610
000002D4 B809                    		MOVU.W 02H[R0], R1
000002D6 6101                    		CMP #00H, R1
000002D8 21rr                    		BNE L88
000002DA                         L87:	; bb3
                                 ;     611     {
                                 ;     612         ptr->ipp->INTSTS1.WORD = (uint16_t)~USB_EOFERR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",612
000002DA A809                    		MOV.L 04H[R0], R1
000002DC A891                    		MOV.L 08H[R1], R1
000002DE F91921BFFF              		MOV.W #0FFBFH, 42H[R1]
000002E3 6702                    		RTSD #08H
000002E5                         L88:	; return
                                 ;     613     }
                                 ;     614 } /* eof usb_hreg_clr_sts_eoferr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",614
000002E5 6702                    		RTSD #08H
000002E7                         _usb_hreg_clr_sts_sign:
                                 		.STACK	_usb_hreg_clr_sts_sign=8
                                 ;     615 
                                 ;     616 /******************************************************************************
                                 ;     617 Function Name   : usb_hreg_clr_sts_sign
                                 ;     618 Description     : Clear the SIGN-bit; "Setup Transaction Error
                                 ;     619                 : Interrupt Status".
                                 ;     620 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     621 Return value    : none
                                 ;     622 ******************************************************************************/
                                 ;     623 void    usb_hreg_clr_sts_sign( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",623
000002E7 6040                    		SUB #04H, R0
000002E9 E301                    		MOV.L R1, [R0]
                                 ;     624 {
                                 ;     625     ptr->ipp->INTSTS1.WORD = (uint16_t)~USB_SIGN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",625
000002EB A891                    		MOV.L 08H[R1], R1
000002ED F91921DFFF              		MOV.W #0FFDFH, 42H[R1]
000002F2 6701                    		RTSD #04H
000002F4                         _usb_hreg_clr_sts_sack:
                                 		.STACK	_usb_hreg_clr_sts_sack=8
                                 ;     626 } /* eof usb_hreg_clr_sts_sign() */
                                 ;     627 
                                 ;     628 /******************************************************************************
                                 ;     629 Function Name   : usb_hreg_clr_sts_sack
                                 ;     630 Description     : Clear the SACK-bit; "Setup Transaction Normal
                                 ;     631                 : Response Interrupt Status".
                                 ;     632                 : Interrupt Status".
                                 ;     633 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     634 Return value    : none
                                 ;     635 ******************************************************************************/
                                 ;     636 void    usb_hreg_clr_sts_sack( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",636
000002F4 6040                    		SUB #04H, R0
000002F6 E301                    		MOV.L R1, [R0]
                                 ;     637 {
                                 ;     638     ptr->ipp->INTSTS1.WORD = (uint16_t)~USB_SACK;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",638
000002F8 A891                    		MOV.L 08H[R1], R1
000002FA F91921EFFF              		MOV.W #0FFEFH, 42H[R1]
000002FF 6701                    		RTSD #04H
00000301                         _usb_hreg_write_usbreq:
                                 		.STACK	_usb_hreg_write_usbreq=12
                                 ;     639 } /* eof usb_hreg_clr_sts_sack() */
                                 ;     640 #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M)
                                 ;     641 /******************************************************************************
                                 ;     642 Function Name   : usb_hreg_clr_sts_pddetint
                                 ;     643 Description     : Clear the PDDETINT-bit; "
                                 ;     644                 : ".
                                 ;     645                 : Interrupt Status".
                                 ;     646 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     647 Return value    : none
                                 ;     648 ******************************************************************************/
                                 ;     649 void    usb_hreg_clr_sts_pddetint( USB_UTR_t *ptr, uint16_t port )
                                 ;     650 {
                                 ;     651     if(port == USB_PORT0)
                                 ;     652     {
                                 ;     653         if(ptr->ip == USB_USBIP_1)
                                 ;     654         {
                                 ;     655             ptr->ipp1->INTSTS1.WORD = (uint16_t)~USB_PDDETINT;
                                 ;     656         }
                                 ;     657     }
                                 ;     658 } /* eof usb_hreg_clr_sts_sack() */
                                 ;     659 #endif /* #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M) */
                                 ;     660 /************/
                                 ;     661 /* BRDYSTS  */
                                 ;     662 /************/
                                 ;     663 
                                 ;     664 /************/
                                 ;     665 /* NRDYSTS  */
                                 ;     666 /************/
                                 ;     667 
                                 ;     668 /************/
                                 ;     669 /* BEMPSTS  */
                                 ;     670 /************/
                                 ;     671 
                                 ;     672 /************/
                                 ;     673 /* FRMNUM   */
                                 ;     674 /************/
                                 ;     675 
                                 ;     676 /************/
                                 ;     677 /* USBADDR  */
                                 ;     678 /************/
                                 ;     679 
                                 ;     680 /************/
                                 ;     681 /* USBREQ   */
                                 ;     682 /************/
                                 ;     683 /* USB Request Type */
                                 ;     684 
                                 ;     685 /******************************************************************************
                                 ;     686 Function Name   : usb_hreg_write_usbreq
                                 ;     687 Description     : Write bRequest and bmRequestType to USBREQ register.
                                 ;     688                 : When Host, the values of bRequest and bmRequestType 
                                 ;     689                 : to be transmitted are written. (When Function, the received 
                                 ;     690                 : values of bRequest and bmRequestType are stored in USBREQ).
                                 ;     691 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     692                 : uint16_t  data  : The value to write.
                                 ;     693 Return value    : none
                                 ;     694 ******************************************************************************/
                                 ;     695 void    usb_hreg_write_usbreq( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",695
00000301 6080                    		SUB #08H, R0
00000303 A009                    		MOV.L R1, 04H[R0]
00000305 900A                    		MOV.W R2, 02H[R0]
                                 ;     696 {
                                 ;     697     ptr->ipp->USBREQ.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",697
00000307 A809                    		MOV.L 04H[R0], R1
00000309 A891                    		MOV.L 08H[R1], R1
0000030B D7122A                  		MOV.W R2, 54H[R1]
0000030E 6702                    		RTSD #08H
00000310                         _usb_hreg_set_usbval:
                                 		.STACK	_usb_hreg_set_usbval=12
                                 ;     698 } /* eof usb_hreg_write_usbreq() */
                                 ;     699 
                                 ;     700 /************/
                                 ;     701 /* USBVAL   */
                                 ;     702 /************/
                                 ;     703 /* USB Request Value Register */
                                 ;     704 
                                 ;     705 /******************************************************************************
                                 ;     706 Function Name   : usb_hreg_set_usbval
                                 ;     707 Description     : Write the specified 'wValue' to USBVAL register,
                                 ;     708                 : to write the USB request. When Host, the value of 
                                 ;     709                 : wValue to be transmitted is set. (When Function, the value of 
                                 ;     710                 : wValue that has been received is stored in USBREQ.)
                                 ;     711 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     712                 : uint16_t  data  : The value to write.
                                 ;     713 Return value    : none
                                 ;     714 ******************************************************************************/
                                 ;     715 void    usb_hreg_set_usbval( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",715
00000310 6080                    		SUB #08H, R0
00000312 A009                    		MOV.L R1, 04H[R0]
00000314 900A                    		MOV.W R2, 02H[R0]
                                 ;     716 {
                                 ;     717     ptr->ipp->USBVAL = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",717
00000316 A809                    		MOV.L 04H[R0], R1
00000318 A891                    		MOV.L 08H[R1], R1
0000031A D7122B                  		MOV.W R2, 56H[R1]
0000031D 6702                    		RTSD #08H
0000031F                         _usb_hreg_set_usbindx:
                                 		.STACK	_usb_hreg_set_usbindx=12
                                 ;     718 } /* eof usb_hreg_set_usbval() */
                                 ;     719 
                                 ;     720 /************/
                                 ;     721 /* USBINDX  */
                                 ;     722 /************/
                                 ;     723 /* USB Request Index */
                                 ;     724 
                                 ;     725 /******************************************************************************
                                 ;     726 Function Name   : usb_hreg_set_usbindx
                                 ;     727 Description     : Write the specified 'wIndex', the USB request, to USBINDX
                                 ;     728                 : register, for host setup requests for control 
                                 ;     729                 : transfers.
                                 ;     730 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     731                 : uint16_t  data  : The value to write.
                                 ;     732 Return value    : none
                                 ;     733 ******************************************************************************/
                                 ;     734 void    usb_hreg_set_usbindx( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",734
0000031F 6080                    		SUB #08H, R0
00000321 A009                    		MOV.L R1, 04H[R0]
00000323 900A                    		MOV.W R2, 02H[R0]
                                 ;     735 {
                                 ;     736     ptr->ipp->USBINDX = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",736
00000325 A809                    		MOV.L 04H[R0], R1
00000327 A891                    		MOV.L 08H[R1], R1
00000329 D7122C                  		MOV.W R2, 58H[R1]
0000032C 6702                    		RTSD #08H
0000032E                         _usb_hreg_set_usbleng:
                                 		.STACK	_usb_hreg_set_usbleng=12
                                 ;     737 } /* eof usb_hreg_set_usbindx() */
                                 ;     738 
                                 ;     739 /************/
                                 ;     740 /* USBLENG  */
                                 ;     741 /************/
                                 ;     742 /* USB Request Length */
                                 ;     743 
                                 ;     744 /******************************************************************************
                                 ;     745 Function Name   : usb_hreg_set_usbleng
                                 ;     746 Description     : Write the specified 'wLength' value to USBINDX register, 
                                 ;     747                 : for host setup requests for control.
                                 ;     748 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     749                 : uint16_t  data  : The value to write.
                                 ;     750 Return value    : none
                                 ;     751 ******************************************************************************/
                                 ;     752 void    usb_hreg_set_usbleng( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",752
0000032E 6080                    		SUB #08H, R0
00000330 A009                    		MOV.L R1, 04H[R0]
00000332 900A                    		MOV.W R2, 02H[R0]
                                 ;     753 {
                                 ;     754     ptr->ipp->USBLENG = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",754
00000334 A809                    		MOV.L 04H[R0], R1
00000336 A891                    		MOV.L 08H[R1], R1
00000338 D7122D                  		MOV.W R2, 5AH[R1]
0000033B 6702                    		RTSD #08H
0000033D                         _usb_hreg_write_dcpctr:
                                 		.STACK	_usb_hreg_write_dcpctr=12
                                 ;     755 } /* eof usb_hreg_set_usbleng() */
                                 ;     756 
                                 ;     757 /************/
                                 ;     758 /* DCPCFG   */
                                 ;     759 /************/
                                 ;     760 
                                 ;     761 /************/
                                 ;     762 /* DCPMAXP  */
                                 ;     763 /************/
                                 ;     764 
                                 ;     765 /************/
                                 ;     766 /* DCPCTR   */
                                 ;     767 /************/
                                 ;     768 /******************************************************************************
                                 ;     769 Function Name   : usb_hreg_write_dcpctr
                                 ;     770 Description     : Write the specified data value to the DCPCTR register.
                                 ;     771 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     772                 : uint16_t  data  : The value to write.
                                 ;     773 Return value    : none
                                 ;     774 ******************************************************************************/
                                 ;     775 void    usb_hreg_write_dcpctr( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",775
0000033D 6080                    		SUB #08H, R0
0000033F A009                    		MOV.L R1, 04H[R0]
00000341 900A                    		MOV.W R2, 02H[R0]
                                 ;     776 {
                                 ;     777     ptr->ipp->DCPCTR.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",777
00000343 A809                    		MOV.L 04H[R0], R1
00000345 A891                    		MOV.L 08H[R1], R1
00000347 D71230                  		MOV.W R2, 60H[R1]
0000034A 6702                    		RTSD #08H
0000034C                         _usb_hreg_set_sureq:
                                 		.STACK	_usb_hreg_set_sureq=8
                                 ;     778 } /* eof usb_hreg_write_dcpctr() */
                                 ;     779 
                                 ;     780 /******************************************************************************
                                 ;     781 Function Name   : usb_hreg_set_sureq
                                 ;     782 Description     : Set te SUREQ-bit in the DCPCTR register 
                                 ;     783                 : (Set SETUP packet send when HostController function is selected)
                                 ;     784 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     785 Return value    : none
                                 ;     786 ******************************************************************************/
                                 ;     787 void    usb_hreg_set_sureq( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",787
0000034C 6040                    		SUB #04H, R0
0000034E E301                    		MOV.L R1, [R0]
                                 ;     788 {
                                 ;     789     ptr->ipp->DCPCTR.WORD |= USB_SUREQ;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",789
00000350 A891                    		MOV.L 08H[R1], R1
00000352 DD1E30                  		MOV.W 60H[R1], R14
00000355 78EE                    		BSET #0EH, R14
00000357 D71E30                  		MOV.W R14, 60H[R1]
0000035A 6701                    		RTSD #04H
0000035C                         _usb_hreg_set_sureqclr:
                                 		.STACK	_usb_hreg_set_sureqclr=8
                                 ;     790 } /* eof usb_hreg_set_sureq() */
                                 ;     791 
                                 ;     792 /******************************************************************************
                                 ;     793 Function Name   : usb_hreg_set_sureqclr
                                 ;     794 Description     : Set the SUREQCLR-bit in the DCPCTR register.
                                 ;     795                 : (Disable SETUP packet send setting when HostController func-
                                 ;     796                 :  tion is selected)
                                 ;     797 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     798 Return value    : none
                                 ;     799 ******************************************************************************/
                                 ;     800 void    usb_hreg_set_sureqclr( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",800
0000035C 6040                    		SUB #04H, R0
0000035E E301                    		MOV.L R1, [R0]
                                 ;     801 {
                                 ;     802     ptr->ipp->DCPCTR.WORD |= USB_SUREQCLR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",802
00000360 A891                    		MOV.L 08H[R1], R1
00000362 DD1E30                  		MOV.W 60H[R1], R14
00000365 78BE                    		BSET #0BH, R14
00000367 D71E30                  		MOV.W R14, 60H[R1]
0000036A 6701                    		RTSD #04H
0000036C                         _usb_hreg_set_devsel:
                                 		.STACK	_usb_hreg_set_devsel=16
                                 ;     803 } /* eof usb_hreg_set_sureqclr() */
                                 ;     804 
                                 ;     805 /************/
                                 ;     806 /* PIPESEL  */
                                 ;     807 /************/
                                 ;     808 
                                 ;     809 /************/
                                 ;     810 /* PIPECFG  */
                                 ;     811 /************/
                                 ;     812 
                                 ;     813 /************/
                                 ;     814 /* PIPEBUF  */
                                 ;     815 /************/
                                 ;     816 
                                 ;     817 /************/
                                 ;     818 /* PIPEMAXP */
                                 ;     819 /************/
                                 ;     820 /******************************************************************************
                                 ;     821 Function Name   : usb_hreg_set_devsel
                                 ;     822 Description     : Write the address specified by the argument to the DEVSEL-bit 
                                 ;     823                 : of the PIPEMAXP register. (Set the address of the USB Device 
                                 ;     824                 : when HostController function is selected.)
                                 ;     825 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     826                 : uint16_t  data  : The value to write.
                                 ;     827 Return value    : none
                                 ;     828 ******************************************************************************/
                                 ;     829 void    usb_hreg_set_devsel( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",829
0000036C 60C0                    		SUB #0CH, R0
0000036E A081                    		MOV.L R1, 08H[R0]
00000370 908A                    		MOV.W R2, 06H[R0]
                                 ;     830 {
                                 ;     831     volatile uint16_t *reg_p;
                                 ;     832     
                                 ;     833     reg_p = (uint16_t *)&ptr->ipp->PIPEMAXP;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",833
00000372 A881                    		MOV.L 08H[R0], R1
00000374 A891                    		MOV.L 08H[R1], R1
00000376 71116C                  		ADD #6CH, R1
00000379 E301                    		MOV.L R1, [R0]
0000037B                         L99:	; entry.split
                                 ;     834     *reg_p &= ~USB_DEVSEL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",834
0000037B EC01                    		MOV.L [R0], R1
0000037D 5C1E                    		MOVU.W [R1], R14
0000037F 762EFF0F                		AND #0FFFH, R14
00000383 D31E                    		MOV.W R14, [R1]
00000385                         L100:	; entry.split1
                                 ;     835     *reg_p |= data << USB_DEVSEL_NUM_SHIFT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",835
00000385 9889                    		MOV.W 06H[R0], R1
00000387 6CC1                    		SHLL #0CH, R1
00000389 EC02                    		MOV.L [R0], R2
0000038B 06D421                  		OR [R2].UW, R1
0000038E D321                    		MOV.W R1, [R2]
00000390 6703                    		RTSD #0CH
00000392                         _usb_hreg_read_devadd:
                                 		.STACK	_usb_hreg_read_devadd=24
                                 ;     836 } /* eof usb_hreg_set_devsel() */
                                 ;     837 
                                 ;     838 /************/
                                 ;     839 /* PIPEPERI */
                                 ;     840 /************/
                                 ;     841 
                                 ;     842 /********************/
                                 ;     843 /* DCPCTR, PIPEnCTR */
                                 ;     844 /********************/
                                 ;     845 
                                 ;     846 /************/
                                 ;     847 /* PIPEnTRE */
                                 ;     848 /************/
                                 ;     849 
                                 ;     850 /************/
                                 ;     851 /* PIPEnTRN */
                                 ;     852 /************/
                                 ;     853 
                                 ;     854 /************/
                                 ;     855 /* DEVADDn  */
                                 ;     856 /************/
                                 ;     857 /******************************************************************************
                                 ;     858 Function Name   : usb_hreg_read_devadd
                                 ;     859 Description     : Return the DEVADD register value for the specified USB device 
                                 ;     860                 ; address.
                                 ;     861 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     862                 : uint16_t  devsel      ; USB device address value 
                                 ;     863 Return value    : DEVADDx content
                                 ;     864 ******************************************************************************/
                                 ;     865 uint16_t    usb_hreg_read_devadd( USB_UTR_t *ptr, uint16_t devsel )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",865
00000392 7100EC                  		ADD #0FFFFFFECH, R0
00000395 A101                    		MOV.L R1, 10H[R0]
00000397 918A                    		MOV.W R2, 0EH[R0]
                                 ;     866 {
                                 ;     867     volatile uint16_t    *reg_p;
                                 ;     868     uint16_t    devadr;
                                 ;     869     uint16_t    return_value;
                                 ;     870 
                                 ;     871     devadr = devsel >> USB_DEVADDRBIT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",871
00000399 68C2                    		SHLR #0CH, R2
0000039B 9102                    		MOV.W R2, 08H[R0]
0000039D                         L102:	; entry.split
                                 ;     872 
                                 ;     873     if(devadr > USB_MAXDEVADDR)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",873
0000039D B901                    		MOVU.W 08H[R0], R1
0000039F 61B1                    		CMP #0BH, R1
000003A1 23rr                    		BLTU L104
000003A3                         L103:	; bb10
                                 ;     874     {
                                 ;     875         return USB_ERROR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",875
000003A3 F90901FFFF              		MOV.W #0FFFFH, 02H[R0]
000003A8 2Err                 B  		BRA L107
000003AA                         L104:	; bb12
                                 ;     876     }
                                 ;     877     else
                                 ;     878     {
                                 ;     879         reg_p = (uint16_t *)&(ptr->ipp->DEVADD0) + devadr;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",879
000003AA B901                    		MOVU.W 08H[R0], R1
000003AC 6C11                    		SHLL #01H, R1
000003AE A902                    		MOV.L 10H[R0], R2
000003B0 06892102                		ADD 08H[R2].L, R1
000003B4 7211D000                		ADD #0D0H, R1
000003B8 A009                    		MOV.L R1, 04H[R0]
000003BA                         L105:	; bb12.split
                                 ;     880         return_value = (*reg_p & (USB_UPPHUB | USB_HUBPORT | USB_USBSPD));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",880
000003BA A809                    		MOV.L 04H[R0], R1
000003BC 5C11                    		MOVU.W [R1], R1
000003BE 7621C07F                		AND #7FC0H, R1
000003C2 9109                    		MOV.W R1, 0AH[R0]
000003C4                         L106:	; bb12.split1
                                 ;     881         return return_value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",881
000003C4 D5000501                		MOV.W 0AH[R0], 02H[R0]
000003C8                         L107:	; bb34
000003C8 D5000106                		MOV.W 02H[R0], 0CH[R0]
                                 ;     882     }
                                 ;     883 } /* eof usb_hreg_read_devadd() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",883
000003CC B981                    		MOVU.W 0CH[R0], R1
000003CE 6705                    		RTSD #14H
000003D0                         _usb_hreg_rmw_devadd:
                                 		.STACK	_usb_hreg_rmw_devadd=24
                                 ;     884 
                                 ;     885 /******************************************************************************
                                 ;     886 Function Name   : usb_hreg_rmw_devadd
                                 ;     887 Description     : Read-modify-write the specified devsel's DEVADD.
                                 ;     888 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     889                 : uint16_t  devsel: Device address
                                 ;     890                 : uint16_t  data  : The value to write.
                                 ;     891                 : uint16_t  width : Bit pattern to read-modify-write.
                                 ;     892 Return value    : none
                                 ;     893 ******************************************************************************/
                                 ;     894 void    usb_hreg_rmw_devadd( USB_UTR_t *ptr, uint16_t devsel, uint16_t data, uint16_t width )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",894
000003D0 7100EC                  		ADD #0FFFFFFECH, R0
000003D3 A101                    		MOV.L R1, 10H[R0]
000003D5 918A                    		MOV.W R2, 0EH[R0]
000003D7 9183                    		MOV.W R3, 0CH[R0]
000003D9 910C                    		MOV.W R4, 0AH[R0]
                                 ;     895 {
                                 ;     896     volatile uint16_t    *reg_p;
                                 ;     897     uint16_t    buf;
                                 ;     898     uint16_t    devadr;
                                 ;     899 
                                 ;     900     devadr = devsel >> USB_DEVADDRBIT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",900
000003DB B989                    		MOVU.W 0EH[R0], R1
000003DD 68C1                    		SHLR #0CH, R1
000003DF 9101                    		MOV.W R1, 08H[R0]
000003E1                         L109:	; entry.split
                                 ;     901 
                                 ;     902     reg_p = (uint16_t *)&(ptr->ipp->DEVADD0) + devadr;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",902
000003E1 B901                    		MOVU.W 08H[R0], R1
000003E3 6C11                    		SHLL #01H, R1
000003E5 A902                    		MOV.L 10H[R0], R2
000003E7 06892102                		ADD 08H[R2].L, R1
000003EB 7211D000                		ADD #0D0H, R1
000003EF E301                    		MOV.L R1, [R0]
000003F1                         L110:	; entry.split1
                                 ;     903 
                                 ;     904     buf = *reg_p;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",904
000003F1 EC01                    		MOV.L [R0], R1
000003F3 D41003                  		MOV.W [R1], 06H[R0]
000003F6                         L111:	; entry.split2
                                 ;     905     buf &= ~width;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",905
000003F6 9909                    		MOV.W 0AH[R0], R1
000003F8 7E01                    		NOT R1
000003FA 06D10103                		AND 06H[R0].UW, R1
000003FE 9089                    		MOV.W R1, 06H[R0]
00000400                         L112:	; entry.split3
                                 ;     906     buf |= (data & width);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",906
00000400 B981                    		MOVU.W 0CH[R0], R1
00000402 06510105                		AND 0AH[R0].W, R1
00000406 06D50103                		OR 06H[R0].UW, R1
0000040A 9089                    		MOV.W R1, 06H[R0]
0000040C                         L113:	; entry.split4
                                 ;     907     *reg_p = buf;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",907
0000040C 9889                    		MOV.W 06H[R0], R1
0000040E EC02                    		MOV.L [R0], R2
00000410 D321                    		MOV.W R1, [R2]
00000412 6705                    		RTSD #14H
00000414                         _usb_hreg_set_usbspd:
                                 		.STACK	_usb_hreg_set_usbspd=20
                                 ;     908 } /* eof usb_hreg_rmw_devadd() */
                                 ;     909 
                                 ;     910 /******************************************************************************
                                 ;     911 Function Name   : usb_hreg_set_usbspd
                                 ;     912 Description     : Set the DEVADD register's USBSPD for the specified device add-
                                 ;     913                 : ress.
                                 ;     914 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     915                 : uint16_t  devsel      ; USB device address value
                                 ;     916                 : uint16_t  data  : The value to write.
                                 ;     917 Return value    : none
                                 ;     918 ******************************************************************************/
                                 ;     919 void    usb_hreg_set_usbspd( USB_UTR_t *ptr, uint16_t devsel, uint8_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",919
00000414 7100F0                  		ADD #0FFFFFFF0H, R0
00000417 A089                    		MOV.L R1, 0CH[R0]
00000419 910A                    		MOV.W R2, 0AH[R0]
0000041B 820B                    		MOV.B R3, 09H[R0]
                                 ;     920 {
                                 ;     921     volatile uint16_t    *reg_p;
                                 ;     922     uint16_t    devadr;
                                 ;     923 
                                 ;     924     devadr = devsel >> USB_DEVADDRBIT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",924
0000041D B909                    		MOVU.W 0AH[R0], R1
0000041F 68C1                    		SHLR #0CH, R1
00000421 9089                    		MOV.W R1, 06H[R0]
00000423                         L115:	; entry.split
                                 ;     925 
                                 ;     926     reg_p = (uint16_t *)&(ptr->ipp->DEVADD0) + devadr;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",926
00000423 B889                    		MOVU.W 06H[R0], R1
00000425 6C11                    		SHLL #01H, R1
00000427 A88A                    		MOV.L 0CH[R0], R2
00000429 06892102                		ADD 08H[R2].L, R1
0000042D 7211D000                		ADD #0D0H, R1
00000431 E301                    		MOV.L R1, [R0]
00000433                         L116:	; entry.split1
                                 ;     927 
                                 ;     928     *reg_p &= ~USB_USBSPD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",928
00000433 EC01                    		MOV.L [R0], R1
00000435 5C1E                    		MOVU.W [R1], R14
00000437 772E3FFF00              		AND #0FF3FH, R14
0000043C D31E                    		MOV.W R14, [R1]
0000043E                         L117:	; entry.split2
                                 ;     929     *reg_p |= data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\host\r_usb_hreg_access.c",929
0000043E EC01                    		MOV.L [R0], R1
00000440 B20A                    		MOVU.B 09H[R0], R2
00000442 065412                  		OR [R1].W, R2
00000445 D312                    		MOV.W R2, [R1]
00000447 6704                    		RTSD #10H
                                 ;     930 } /* eof usb_hreg_set_usbspd() */
                                 ;     931 
                                 ;     932 #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M)
                                 ;     933 /************/
                                 ;     934 /* PHYSLEW  */
                                 ;     935 /************/
                                 ;     936 
                                 ;     937 /******************************************************************************
                                 ;     938 Function Name   : usb_hreg_write_physlew
                                 ;     939 Description     : Set the PHYSLEW register's for host mode
                                 ;     940 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     941 Return value    : none
                                 ;     942 ******************************************************************************/
                                 ;     943 void    usb_hreg_write_physlew( USB_UTR_t *ptr )
                                 ;     944 {
                                 ;     945     if(ptr->ip == USB_USBIP_0)
                                 ;     946     {
                                 ;     947         ptr->ipp->PHYSLEW.LONG = 0x0000000E;
                                 ;     948     }
                                 ;     949 } /* eof usb_hreg_write_physlew() */
                                 ;     950 
                                 ;     951 
                                 ;     952 /************/
                                 ;     953 /* BCCTRL   */
                                 ;     954 /************/
                                 ;     955 
                                 ;     956 /******************************************************************************
                                 ;     957 Function Name   : usb_hreg_set_dcpmode
                                 ;     958 Description     : Set DCPMODE bit.
                                 ;     959 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     960 Return value    : none
                                 ;     961 ******************************************************************************/
                                 ;     962 void    usb_hreg_set_dcpmode( USB_UTR_t *ptr )
                                 ;     963 {
                                 ;     964     if(ptr->ip == USB_USBIP_1)
                                 ;     965     {
                                 ;     966         ptr->ipp1->BCCTRL.WORD |= USB_DCPMODE;
                                 ;     967     }
                                 ;     968 } /* eof usb_hreg_set_dcpmode() */
                                 ;     969 
                                 ;     970 /******************************************************************************
                                 ;     971 Function Name   : usb_hreg_clr_dcpmode
                                 ;     972 Description     : Clear DCPMODE bits.
                                 ;     973 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     974 Return value    : none
                                 ;     975 ******************************************************************************/
                                 ;     976 void    usb_hreg_clr_dcpmode( USB_UTR_t *ptr )
                                 ;     977 {
                                 ;     978     if(ptr->ip == USB_USBIP_1)
                                 ;     979     {
                                 ;     980         ptr->ipp1->BCCTRL.WORD &= ~USB_DCPMODE;
                                 ;     981     }
                                 ;     982 } /* eof usb_hreg_clr_dcpmode() */
                                 ;     983 #endif /* #if defined(BSP_MCU_RX64M) | (BSP_MCU_RX71M) */
                                 ;     984 #endif  /* (USB_FUNCSEL_USBIP0_PP == USB_HOST_PP) || (USB_FUNCSEL_USBIP1_PP == USB_HOST_PP) */
                                 ;     985 
                                 ;     986 /******************************************************************************
                                 ;     987 End of file
                                 ;     988 ******************************************************************************/
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     01860   LINES

Section List

Attr         Size               Name
CODE     0000001097(00000449H)  P

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\r_usb_hreg_access.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\r_usb_hreg_access.lst
-output=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\r_usb_basic\src\HW\host\r_usb_hreg_access.obj
