* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Feb 28 14:07:51 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  28-Feb-2017 14:07:51
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=heap_4.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=heap_4.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=1,EASYMAK=0,MOBILE=0,FREE_RTOS_PP
                                 ;heap_4.c
                                 
                                 		.glb	_pvPortMalloc
                                 		.glb	_vTaskSuspendAll
                                 		.glb	_vAssertCalled
                                 		.glb	_xTaskResumeAll
                                 		.glb	_vApplicationMallocFailedHook
                                 		.glb	_vPortFree
                                 		.glb	_xPortGetFreeHeapSize
                                 		.glb	_xPortGetMinimumEverFreeHeapSize
                                 		.glb	_vPortInitialiseBlocks
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _pvPortMalloc:
                                 		.STACK	_pvPortMalloc=32
                                 ;       1 /*
                                 ;       2     FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
                                 ;       3     All rights reserved
                                 ;       4 
                                 ;       5     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
                                 ;       6 
                                 ;       7     This file is part of the FreeRTOS distribution.
                                 ;       8 
                                 ;       9     FreeRTOS is free software; you can redistribute it and/or modify it under
                                 ;      10     the terms of the GNU General Public License (version 2) as published by the
                                 ;      11     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
                                 ;      12 
                                 ;      13     ***************************************************************************
                                 ;      14     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
                                 ;      15     >>!   distribute a combined work that includes FreeRTOS without being   !<<
                                 ;      16     >>!   obliged to provide the source code for proprietary components     !<<
                                 ;      17     >>!   outside of the FreeRTOS kernel.                                   !<<
                                 ;      18     ***************************************************************************
                                 ;      19 
                                 ;      20     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
                                 ;      21     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                                 ;      22     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
                                 ;      23     link: http://www.freertos.org/a00114.html
                                 ;      24 
                                 ;      25     ***************************************************************************
                                 ;      26      *                                                                       *
                                 ;      27      *    FreeRTOS provides completely free yet professionally developed,    *
                                 ;      28      *    robust, strictly quality controlled, supported, and cross          *
                                 ;      29      *    platform software that is more than just the market leader, it     *
                                 ;      30      *    is the industry's de facto standard.                               *
                                 ;      31      *                                                                       *
                                 ;      32      *    Help yourself get started quickly while simultaneously helping     *
                                 ;      33      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
                                 ;      34      *    tutorial book, reference manual, or both:                          *
                                 ;      35      *    http://www.FreeRTOS.org/Documentation                              *
                                 ;      36      *                                                                       *
                                 ;      37     ***************************************************************************
                                 ;      38 
                                 ;      39     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
                                 ;      40     the FAQ page "My application does not run, what could be wrong?".  Have you
                                 ;      41     defined configASSERT()?
                                 ;      42 
                                 ;      43     http://www.FreeRTOS.org/support - In return for receiving this top quality
                                 ;      44     embedded software for free we request you assist our global community by
                                 ;      45     participating in the support forum.
                                 ;      46 
                                 ;      47     http://www.FreeRTOS.org/training - Investing in training allows your team to
                                 ;      48     be as productive as possible as early as possible.  Now you can receive
                                 ;      49     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
                                 ;      50     Ltd, and the world's leading authority on the world's leading RTOS.
                                 ;      51 
                                 ;      52     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
                                 ;      53     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
                                 ;      54     compatible FAT file system, and our tiny thread aware UDP/IP stack.
                                 ;      55 
                                 ;      56     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
                                 ;      57     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
                                 ;      58 
                                 ;      59     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
                                 ;      60     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
                                 ;      61     licenses offer ticketed support, indemnification and commercial middleware.
                                 ;      62 
                                 ;      63     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
                                 ;      64     engineered and independently SIL3 certified version for use in safety and
                                 ;      65     mission critical applications that require provable dependability.
                                 ;      66 
                                 ;      67     1 tab == 4 spaces!
                                 ;      68 */
                                 ;      69 
                                 ;      70 /*
                                 ;      71  * A sample implementation of pvPortMalloc() and vPortFree() that combines
                                 ;      72  * (coalescences) adjacent memory blocks as they are freed, and in so doing
                                 ;      73  * limits memory fragmentation.
                                 ;      74  *
                                 ;      75  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
                                 ;      76  * memory management pages of http://www.FreeRTOS.org for more information.
                                 ;      77  */
                                 ;      78 #include <stdlib.h>
                                 ;      79 
                                 ;      80 /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
                                 ;      81 all the API functions to use the MPU wrappers.  That should only be done when
                                 ;      82 task.h is included from an application file. */
                                 ;      83 #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
                                 ;      84 
                                 ;      85 #include "FreeRTOS.h"
                                 ;      86 #include "task.h"
                                 ;      87 
                                 ;      88 #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
                                 ;      89 
                                 ;      90 /* Block sizes must not get too small. */
                                 ;      91 #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( xHeapStructSize * 2 ) )
                                 ;      92 
                                 ;      93 /* Assumes 8bit bytes! */
                                 ;      94 #define heapBITS_PER_BYTE		( ( size_t ) 8 )
                                 ;      95 
                                 ;      96 /* Allocate the memory for the heap. */
                                 ;      97 #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
                                 ;      98 	/* The application writer has already defined the array used for the RTOS
                                 ;      99 	heap - probably so it can be placed in a special segment or address. */
                                 ;     100 	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
                                 ;     101 #else
                                 ;     102 	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
                                 ;     103 #endif /* configAPPLICATION_ALLOCATED_HEAP */
                                 ;     104 
                                 ;     105 /* Define the linked list structure.  This is used to link free blocks in order
                                 ;     106 of their memory address. */
                                 ;     107 typedef struct A_BLOCK_LINK
                                 ;     108 {
                                 ;     109 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
                                 ;     110 	size_t xBlockSize;						/*<< The size of the free block. */
                                 ;     111 } BlockLink_t;
                                 ;     112 
                                 ;     113 /*-----------------------------------------------------------*/
                                 ;     114 
                                 ;     115 /*
                                 ;     116  * Inserts a block of memory that is being freed into the correct position in
                                 ;     117  * the list of free memory blocks.  The block being freed will be merged with
                                 ;     118  * the block in front it and/or the block behind it if the memory blocks are
                                 ;     119  * adjacent to each other.
                                 ;     120  */
                                 ;     121 static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert );
                                 ;     122 
                                 ;     123 /*
                                 ;     124  * Called automatically to setup the required heap structures the first time
                                 ;     125  * pvPortMalloc() is called.
                                 ;     126  */
                                 ;     127 static void prvHeapInit( void );
                                 ;     128 
                                 ;     129 /*-----------------------------------------------------------*/
                                 ;     130 
                                 ;     131 /* The size of the structure placed at the beginning of each allocated memory
                                 ;     132 block must by correctly byte aligned. */
                                 ;     133 static const size_t xHeapStructSize	= ( ( sizeof( BlockLink_t ) + ( ( ( size_t ) portBYTE_ALIGNMENT_MASK ) - ( size_t ) 1 ) ) & ~( ( size_t ) portBYTE_ALIGN
                                 ;     134 
                                 ;     135 /* Create a couple of list links to mark the start and end of the list. */
                                 ;     136 static BlockLink_t xStart, *pxEnd = NULL;
                                 ;     137 
                                 ;     138 /* Keeps track of the number of free bytes remaining, but says nothing about
                                 ;     139 fragmentation. */
                                 ;     140 static size_t xFreeBytesRemaining = 0U;
                                 ;     141 static size_t xMinimumEverFreeBytesRemaining = 0U;
                                 ;     142 
                                 ;     143 /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
                                 ;     144 member of an BlockLink_t structure is set then the block belongs to the
                                 ;     145 application.  When the bit is free the block is still part of the free heap
                                 ;     146 space. */
                                 ;     147 static size_t xBlockAllocatedBit = 0;
                                 ;     148 
                                 ;     149 /*-----------------------------------------------------------*/
                                 ;     150 
                                 ;     151 void *pvPortMalloc( size_t xWantedSize )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",151
00000000 7100E4                  		ADD #0FFFFFFE4H, R0
00000003 A181                    		MOV.L R1, 18H[R0]
                                 ;     152 {
                                 ;     153 BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
                                 ;     154 void *pvReturn = NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",154
00000005 3E0400                  		MOV.L #00000000H, 10H[R0]
00000008                         L11:	; entry.split
                                 ;     155 
                                 ;     156 	vTaskSuspendAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",156
00000008 05rrrrrr             A  		BSR _vTaskSuspendAll
0000000C                         L12:	; entry.split1
                                 ;     157 	{
                                 ;     158 		/* If this is the first call to malloc then the heap will require
                                 ;     159 		initialisation to setup the list of free blocks. */
                                 ;     160 		if( pxEnd == NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",160
0000000C FBE2rrrrrrrr            		MOV.L #__$pxEnd, R14
00000012 ECEE                    		MOV.L [R14], R14
00000014 610E                    		CMP #00H, R14
00000016 18                   S  		BNE L14
00000017                         L13:	; bb6
                                 ;     161 		{
                                 ;     162 			prvHeapInit();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",162
00000017 39rrrr               W  		BSR __$prvHeapInit
0000001A                         L14:	; bb12
                                 ;     163 		}
                                 ;     164 		else
                                 ;     165 		{
                                 ;     166 			mtCOVERAGE_TEST_MARKER();
                                 ;     167 		}
                                 ;     168 
                                 ;     169 		/* Check the requested block size is not so large that the top bit is
                                 ;     170 		set.  The top bit of the block size member of the BlockLink_t structure
                                 ;     171 		is used to determine who owns the block - the application or the
                                 ;     172 		kernel, so it must be free. */
                                 ;     173 		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",173
0000001A FBE2rrrrrrrr            		MOV.L #__$xBlockAllocatedBit, R14
00000020 ECEE                    		MOV.L [R14], R14
00000022 06A10C0E06              		TST 18H[R0].L, R14
00000027 3Brrrr               W  		BNE L50
0000002A                         L15:	; bb14
                                 ;     174 		{
                                 ;     175 			/* The wanted size is increased so it can contain a BlockLink_t
                                 ;     176 			structure in addition to the requested amount of bytes. */
                                 ;     177 			if( xWantedSize > 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",177
0000002A A981                    		MOV.L 18H[R0], R1
0000002C 6101                    		CMP #00H, R1
0000002E 20rr                    		BEQ L21
00000030                         L16:	; bb15
                                 ;     178 			{
                                 ;     179 				xWantedSize += xHeapStructSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",179
00000030 FBE2rrrrrrrr            		MOV.L #__$xHeapStructSize, R14
00000036 ECE1                    		MOV.L [R14], R1
00000038 06890106                		ADD 18H[R0].L, R1
0000003C A181                    		MOV.L R1, 18H[R0]
0000003E                         L17:	; bb15.split
0000003E 667E                    		MOV.L #00000007H, R14
                                 ;     180 
                                 ;     181 				/* Ensure that blocks are always aligned to the required number
                                 ;     182 				of bytes. */
                                 ;     183 				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",183
00000040 06A10C0E06              		TST 18H[R0].L, R14
00000045 20rr                    		BEQ L21
00000047                         L18:	; bb20
                                 ;     184 				{
                                 ;     185 					/* Byte alignment required. */
                                 ;     186 					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",186
00000047 A981                    		MOV.L 18H[R0], R1
00000049 EF1E                    		MOV.L R1, R14
0000004B 647E                    		AND #07H, R14
0000004D 668F                    		MOV.L #00000008H, R15
0000004F 43EF                    		SUB R14, R15
00000051 4BF1                    		ADD R15, R1
00000053 A181                    		MOV.L R1, 18H[R0]
00000055                         L19:	; bb20.split
00000055 667E                    		MOV.L #00000007H, R14
                                 ;     187 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",187
00000057 06A10C0E06              		TST 18H[R0].L, R14
0000005C 10                   S  		BEQ L21
0000005D                         L20:	; bb27
0000005D 05rrrrrr             A  		BSR _vAssertCalled
00000061                         L21:	; bb49
                                 ;     188 				}
                                 ;     189 				else
                                 ;     190 				{
                                 ;     191 					mtCOVERAGE_TEST_MARKER();
                                 ;     192 				}
                                 ;     193 			}
                                 ;     194 			else
                                 ;     195 			{
                                 ;     196 				mtCOVERAGE_TEST_MARKER();
                                 ;     197 			}
                                 ;     198 
                                 ;     199 			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",199
00000061 A981                    		MOV.L 18H[R0], R1
00000063 6101                    		CMP #00H, R1
00000065 3Brrrr               W  		BNE L46
00000068 38rrrr               W  		BRA L48
0000006B                         L22:	; bb50
                                 ;     200 			{
                                 ;     201 				/* Traverse the list from the start	(lowest address) block until
                                 ;     202 				one	of adequate size is found. */
                                 ;     203 				pxPreviousBlock = &xStart;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",203
0000006B FB12rrrrrrrr            		MOV.L #__$xStart, R1
00000071 A081                    		MOV.L R1, 08H[R0]
00000073                         L23:	; bb50.split
                                 ;     204 				pxBlock = xStart.pxNextFreeBlock;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",204
00000073 FBE2rrrrrrrr            		MOV.L #__$xStart, R14
00000079 E4E001                  		MOV.L [R14], 04H[R0]
0000007C 08                   S  		BRA L26
0000007D                         L24:	; bb52
                                 ;     205 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
                                 ;     206 				{
                                 ;     207 					pxPreviousBlock = pxBlock;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",207
0000007D A081                    		MOV.L R1, 08H[R0]
0000007F                         L25:	; bb52.split
                                 ;     208 					pxBlock = pxBlock->pxNextFreeBlock;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",208
0000007F A809                    		MOV.L 04H[R0], R1
00000081 E41001                  		MOV.L [R1], 04H[R0]
00000084                         L26:	; bb57
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",205
00000084 A809                    		MOV.L 04H[R0], R1
00000086 A819                    		MOV.L 04H[R1], R1
00000088 06850106                		CMP 18H[R0].L, R1
0000008C 22rr                    		BGEU L29
0000008E                         L27:	; bb64
0000008E A809                    		MOV.L 04H[R0], R1
00000090 EC1E                    		MOV.L [R1], R14
00000092 610E                    		CMP #00H, R14
00000094 10                   S  		BEQ L29
00000095                         L28:	; bb70
00000095 F80601                  		MOV.L #00000001H, [R0]
00000098 08                   S  		BRA L30
00000099                         L29:	; bb71
00000099 F80600                  		MOV.L #00000000H, [R0]
0000009C                         L30:	; bb72
0000009C EC01                    		MOV.L [R0], R1
0000009E 6101                    		CMP #00H, R1
000000A0 A809                    		MOV.L 04H[R0], R1
000000A2 21rr                    		BNE L24
000000A4                         L31:	; bb78
                                 ;     209 				}
                                 ;     210 
                                 ;     211 				/* If the end marker was reached then a block of adequate size
                                 ;     212 				was	not found. */
                                 ;     213 				if( pxBlock != pxEnd )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",213
000000A4 FBE2rrrrrrrr            		MOV.L #__$pxEnd, R14
000000AA 0684E1                  		CMP [R14].L, R1
000000AD 3Arrrr               W  		BEQ L50
000000B0                         L32:	; bb79
                                 ;     214 				{
                                 ;     215 					/* Return the memory space pointed to - jumping over the
                                 ;     216 					BlockLink_t structure at its start. */
                                 ;     217 					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",217
000000B0 A881                    		MOV.L 08H[R0], R1
000000B2 EC11                    		MOV.L [R1], R1
000000B4 FBE2rrrrrrrr            		MOV.L #__$xHeapStructSize, R14
000000BA 0688E1                  		ADD [R14].L, R1
000000BD A101                    		MOV.L R1, 10H[R0]
000000BF                         L33:	; bb79.split
                                 ;     218 
                                 ;     219 					/* This block is being returned for use so must be taken out
                                 ;     220 					of the list of free blocks. */
                                 ;     221 					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",221
000000BF A809                    		MOV.L 04H[R0], R1
000000C1 A882                    		MOV.L 08H[R0], R2
000000C3 E012                    		MOV.L [R1], [R2]
000000C5                         L34:	; bb79.split2
                                 ;     222 
                                 ;     223 					/* If the block is larger than required it can be split into
                                 ;     224 					two. */
                                 ;     225 					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",225
000000C5 A809                    		MOV.L 04H[R0], R1
000000C7 A819                    		MOV.L 04H[R1], R1
000000C9 06810106                		SUB 18H[R0].L, R1
000000CD FBE2rrrrrrrr            		MOV.L #__$xHeapStructSize, R14
000000D3 ECEE                    		MOV.L [R14], R14
000000D5 6C1E                    		SHLL #01H, R14
000000D7 47E1                    		CMP R14, R1
000000D9 25rr                    		BLEU L41
000000DB                         L35:	; bb92
                                 ;     226 					{
                                 ;     227 						/* This block is to be split into two.  Create a new
                                 ;     228 						block following the number of bytes requested. The void
                                 ;     229 						cast is used to prevent byte alignment warnings from the
                                 ;     230 						compiler. */
                                 ;     231 						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",231
000000DB A809                    		MOV.L 04H[R0], R1
000000DD 06890106                		ADD 18H[R0].L, R1
000000E1 A089                    		MOV.L R1, 0CH[R0]
000000E3                         L36:	; bb92.split
000000E3 667E                    		MOV.L #00000007H, R14
                                 ;     232 						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",232
000000E5 06A10C0E03              		TST 0CH[R0].L, R14
000000EA 10                   S  		BEQ L38
000000EB                         L37:	; bb99
000000EB 05rrrrrr             A  		BSR _vAssertCalled
000000EF                         L38:	; bb108
                                 ;     233 
                                 ;     234 						/* Calculate the sizes of two blocks split from the
                                 ;     235 						single block. */
                                 ;     236 						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",236
000000EF A809                    		MOV.L 04H[R0], R1
000000F1 A819                    		MOV.L 04H[R1], R1
000000F3 06810106                		SUB 18H[R0].L, R1
000000F7 A88A                    		MOV.L 0CH[R0], R2
000000F9 A029                    		MOV.L R1, 04H[R2]
000000FB                         L39:	; bb108.split
                                 ;     237 						pxBlock->xBlockSize = xWantedSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",237
000000FB A981                    		MOV.L 18H[R0], R1
000000FD A80A                    		MOV.L 04H[R0], R2
000000FF A029                    		MOV.L R1, 04H[R2]
00000101                         L40:	; bb108.split3
                                 ;     238 
                                 ;     239 						/* Insert the new block into the list of free blocks. */
                                 ;     240 						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",240
00000101 A889                    		MOV.L 0CH[R0], R1
00000103 39rrrr               W  		BSR __$prvInsertBlockIntoFreeList
00000106                         L41:	; bb131
                                 ;     241 					}
                                 ;     242 					else
                                 ;     243 					{
                                 ;     244 						mtCOVERAGE_TEST_MARKER();
                                 ;     245 					}
                                 ;     246 
                                 ;     247 					xFreeBytesRemaining -= pxBlock->xBlockSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",247
00000106 FBE2rrrrrrrr            		MOV.L #__$xFreeBytesRemaining, R14
0000010C ECEF                    		MOV.L [R14], R15
0000010E A809                    		MOV.L 04H[R0], R1
00000110 06811F01                		SUB 04H[R1].L, R15
00000114 E3EF                    		MOV.L R15, [R14]
00000116                         L42:	; bb131.split
                                 ;     248 
                                 ;     249 					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",249
00000116 FBE2rrrrrrrr            		MOV.L #__$xFreeBytesRemaining, R14
0000011C ECEE                    		MOV.L [R14], R14
0000011E FBF2rrrrrrrr            		MOV.L #__$xMinimumEverFreeBytesRemaining, R15
00000124 0684FE                  		CMP [R15].L, R14
00000127 22rr                    		BGEU L44
00000129                         L43:	; bb138
                                 ;     250 					{
                                 ;     251 						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",251
00000129 FBE2rrrrrrrr            		MOV.L #__$xMinimumEverFreeBytesRemaining, R14
0000012F FBF2rrrrrrrr            		MOV.L #__$xFreeBytesRemaining, R15
00000135 E0FE                    		MOV.L [R15], [R14]
00000137                         L44:	; bb146
                                 ;     252 					}
                                 ;     253 					else
                                 ;     254 					{
                                 ;     255 						mtCOVERAGE_TEST_MARKER();
                                 ;     256 					}
                                 ;     257 
                                 ;     258 					/* The block is being returned - it is allocated and owned
                                 ;     259 					by the application and has no "next" block. */
                                 ;     260 					pxBlock->xBlockSize |= xBlockAllocatedBit;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",260
00000137 FBE2rrrrrrrr            		MOV.L #__$xBlockAllocatedBit, R14
0000013D ECE1                    		MOV.L [R14], R1
0000013F A80A                    		MOV.L 04H[R0], R2
00000141 06952101                		OR 04H[R2].L, R1
00000145 A029                    		MOV.L R1, 04H[R2]
00000147                         L45:	; bb146.split
                                 ;     261 					pxBlock->pxNextFreeBlock = NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",261
00000147 A809                    		MOV.L 04H[R0], R1
00000149 F81600                  		MOV.L #00000000H, [R1]
0000014C 2Err                 B  		BRA L50
0000014E                         L46:	; bb165
0000014E FBE2rrrrrrrr            		MOV.L #__$xFreeBytesRemaining, R14
00000154 A981                    		MOV.L 18H[R0], R1
00000156 0684E1                  		CMP [R14].L, R1
00000159 24rr                    		BGTU L48
0000015B                         L47:	; bb170
0000015B F80601                  		MOV.L #00000001H, [R0]
0000015E 08                   S  		BRA L49
0000015F                         L48:	; bb171
0000015F F80600                  		MOV.L #00000000H, [R0]
00000162                         L49:	; bb172
00000162 EC01                    		MOV.L [R0], R1
00000164 6101                    		CMP #00H, R1
00000166 3Brrrr               W  		BNE L22
00000169                         L50:	; bb185
                                 ;     262 				}
                                 ;     263 				else
                                 ;     264 				{
                                 ;     265 					mtCOVERAGE_TEST_MARKER();
                                 ;     266 				}
                                 ;     267 			}
                                 ;     268 			else
                                 ;     269 			{
                                 ;     270 				mtCOVERAGE_TEST_MARKER();
                                 ;     271 			}
                                 ;     272 		}
                                 ;     273 		else
                                 ;     274 		{
                                 ;     275 			mtCOVERAGE_TEST_MARKER();
                                 ;     276 		}
                                 ;     277 
                                 ;     278 		traceMALLOC( pvReturn, xWantedSize );
                                 ;     279 	}
                                 ;     280 	( void ) xTaskResumeAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",280
00000169 05rrrrrr             A  		BSR _xTaskResumeAll
0000016D                         L51:	; bb185.split
                                 ;     281 
                                 ;     282 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
                                 ;     283 	{
                                 ;     284 		if( pvReturn == NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",284
0000016D A901                    		MOV.L 10H[R0], R1
0000016F 6101                    		CMP #00H, R1
00000171 18                   S  		BNE L53
00000172                         L52:	; bb188
                                 ;     285 		{
                                 ;     286 			extern void vApplicationMallocFailedHook( void );
                                 ;     287 			vApplicationMallocFailedHook();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",287
00000172 05rrrrrr             A  		BSR _vApplicationMallocFailedHook
00000176                         L53:	; bb195
00000176 667E                    		MOV.L #00000007H, R14
                                 ;     288 		}
                                 ;     289 		else
                                 ;     290 		{
                                 ;     291 			mtCOVERAGE_TEST_MARKER();
                                 ;     292 		}
                                 ;     293 	}
                                 ;     294 	#endif
                                 ;     295 
                                 ;     296 	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",296
00000178 06A10C0E04              		TST 10H[R0].L, R14
0000017D 10                   S  		BEQ L55
0000017E                         L54:	; bb196
0000017E 05rrrrrr             A  		BSR _vAssertCalled
00000182                         L55:	; bb205
                                 ;     297 	return pvReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",297
00000182 A901                    		MOV.L 10H[R0], R1
00000184 A109                    		MOV.L R1, 14H[R0]
00000186                         L56:	; bb205.split
                                 ;     298 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",298
00000186 6707                    		RTSD #1CH
00000188                         _vPortFree:
                                 		.STACK	_vPortFree=16
                                 ;     299 /*-----------------------------------------------------------*/
                                 ;     300 
                                 ;     301 void vPortFree( void *pv )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",301
00000188 60C0                    		SUB #0CH, R0
0000018A A081                    		MOV.L R1, 08H[R0]
                                 ;     302 {
                                 ;     303 uint8_t *puc = ( uint8_t * ) pv;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",303
0000018C E301                    		MOV.L R1, [R0]
0000018E                         L58:	; entry.split
                                 ;     304 BlockLink_t *pxLink;
                                 ;     305 
                                 ;     306 	if( pv != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",306
0000018E A881                    		MOV.L 08H[R0], R1
00000190 6101                    		CMP #00H, R1
00000192 20rr                    		BEQ L72
00000194                         L59:	; bb4
                                 ;     307 	{
                                 ;     308 		/* The memory being freed will have an BlockLink_t structure immediately
                                 ;     309 		before it. */
                                 ;     310 		puc -= xHeapStructSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",310
00000194 EC01                    		MOV.L [R0], R1
00000196 FBE2rrrrrrrr            		MOV.L #__$xHeapStructSize, R14
0000019C 0680E1                  		SUB [R14].L, R1
0000019F E301                    		MOV.L R1, [R0]
000001A1                         L60:	; bb4.split
                                 ;     311 
                                 ;     312 		/* This casting is to keep the compiler from issuing warnings. */
                                 ;     313 		pxLink = ( void * ) puc;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",313
000001A1 E40001                  		MOV.L [R0], 04H[R0]
000001A4                         L61:	; bb4.split1
                                 ;     314 
                                 ;     315 		/* Check the block is actually allocated. */
                                 ;     316 		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",316
000001A4 FBE2rrrrrrrr            		MOV.L #__$xBlockAllocatedBit, R14
000001AA ECEE                    		MOV.L [R14], R14
000001AC A809                    		MOV.L 04H[R0], R1
000001AE 06A10C1E01              		TST 04H[R1].L, R14
000001B3 18                   S  		BNE L63
000001B4                         L62:	; bb12
000001B4 05rrrrrr             A  		BSR _vAssertCalled
000001B8                         L63:	; bb23
                                 ;     317 		configASSERT( pxLink->pxNextFreeBlock == NULL );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",317
000001B8 A809                    		MOV.L 04H[R0], R1
000001BA EC1E                    		MOV.L [R1], R14
000001BC 610E                    		CMP #00H, R14
000001BE 10                   S  		BEQ L65
000001BF                         L64:	; bb24
000001BF 05rrrrrr             A  		BSR _vAssertCalled
000001C3                         L65:	; bb34
                                 ;     318 
                                 ;     319 		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",319
000001C3 FBE2rrrrrrrr            		MOV.L #__$xBlockAllocatedBit, R14
000001C9 ECEE                    		MOV.L [R14], R14
000001CB A809                    		MOV.L 04H[R0], R1
000001CD 06A10C1E01              		TST 04H[R1].L, R14
000001D2 20rr                    		BEQ L72
000001D4                         L66:	; bb36
                                 ;     320 		{
                                 ;     321 			if( pxLink->pxNextFreeBlock == NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",321
000001D4 A809                    		MOV.L 04H[R0], R1
000001D6 EC1E                    		MOV.L [R1], R14
000001D8 610E                    		CMP #00H, R14
000001DA 21rr                    		BNE L72
000001DC                         L67:	; bb37
                                 ;     322 			{
                                 ;     323 				/* The block is being returned to the heap - it is no longer
                                 ;     324 				allocated. */
                                 ;     325 				pxLink->xBlockSize &= ~xBlockAllocatedBit;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",325
000001DC FBE2rrrrrrrr            		MOV.L #__$xBlockAllocatedBit, R14
000001E2 ECE1                    		MOV.L [R14], R1
000001E4 7E01                    		NOT R1
000001E6 A80A                    		MOV.L 04H[R0], R2
000001E8 06912101                		AND 04H[R2].L, R1
000001EC A029                    		MOV.L R1, 04H[R2]
000001EE                         L68:	; bb37.split
                                 ;     326 
                                 ;     327 				vTaskSuspendAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",327
000001EE 05rrrrrr             A  		BSR _vTaskSuspendAll
000001F2                         L69:	; bb37.split2
                                 ;     328 				{
                                 ;     329 					/* Add this block to the list of free blocks. */
                                 ;     330 					xFreeBytesRemaining += pxLink->xBlockSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",330
000001F2 FBE2rrrrrrrr            		MOV.L #__$xFreeBytesRemaining, R14
000001F8 ECEF                    		MOV.L [R14], R15
000001FA A809                    		MOV.L 04H[R0], R1
000001FC 06891F01                		ADD 04H[R1].L, R15
00000200 E3EF                    		MOV.L R15, [R14]
00000202                         L70:	; bb37.split3
                                 ;     331 					traceFREE( pv, pxLink->xBlockSize );
                                 ;     332 					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",332
00000202 A809                    		MOV.L 04H[R0], R1
00000204 39rrrr               W  		BSR __$prvInsertBlockIntoFreeList
00000207                         L71:	; bb37.split4
                                 ;     333 				}
                                 ;     334 				( void ) xTaskResumeAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",334
00000207 05rrrrrr             A  		BSR _xTaskResumeAll
0000020B 6703                    		RTSD #0CH
0000020D                         L72:	; return
                                 ;     335 			}
                                 ;     336 			else
                                 ;     337 			{
                                 ;     338 				mtCOVERAGE_TEST_MARKER();
                                 ;     339 			}
                                 ;     340 		}
                                 ;     341 		else
                                 ;     342 		{
                                 ;     343 			mtCOVERAGE_TEST_MARKER();
                                 ;     344 		}
                                 ;     345 	}
                                 ;     346 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",346
0000020D 6703                    		RTSD #0CH
0000020F                         _xPortGetFreeHeapSize:
                                 		.STACK	_xPortGetFreeHeapSize=8
                                 ;     347 /*-----------------------------------------------------------*/
                                 ;     348 
                                 ;     349 size_t xPortGetFreeHeapSize( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",349
0000020F 6040                    		SUB #04H, R0
                                 ;     350 {
                                 ;     351 	return xFreeBytesRemaining;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",351
00000211 FBE2rrrrrrrr            		MOV.L #__$xFreeBytesRemaining, R14
00000217 ECE1                    		MOV.L [R14], R1
00000219 E301                    		MOV.L R1, [R0]
0000021B                         L74:	; entry.split
                                 ;     352 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",352
0000021B 6701                    		RTSD #04H
0000021D                         _xPortGetMinimumEverFreeHeapSize:
                                 		.STACK	_xPortGetMinimumEverFreeHeapSize=8
                                 ;     353 /*-----------------------------------------------------------*/
                                 ;     354 
                                 ;     355 size_t xPortGetMinimumEverFreeHeapSize( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",355
0000021D 6040                    		SUB #04H, R0
                                 ;     356 {
                                 ;     357 	return xMinimumEverFreeBytesRemaining;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",357
0000021F FBE2rrrrrrrr            		MOV.L #__$xMinimumEverFreeBytesRemaining, R14
00000225 ECE1                    		MOV.L [R14], R1
00000227 E301                    		MOV.L R1, [R0]
00000229                         L76:	; entry.split
                                 ;     358 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",358
00000229 6701                    		RTSD #04H
0000022B                         _vPortInitialiseBlocks:
                                 		.STACK	_vPortInitialiseBlocks=4
                                 ;     359 /*-----------------------------------------------------------*/
                                 ;     360 
                                 ;     361 void vPortInitialiseBlocks( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",361
0000022B 02                      		RTS
0000022C                         __$prvHeapInit:
                                 		.STACK	__$prvHeapInit=20
                                 ;     362 {
                                 ;     363 	/* This just exists to keep the linker quiet. */
                                 ;     364 }
                                 ;     365 /*-----------------------------------------------------------*/
                                 ;     366 
                                 ;     367 static void prvHeapInit( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",367
0000022C 7100F0                  		ADD #0FFFFFFF0H, R0
                                 ;     368 {
                                 ;     369 BlockLink_t *pxFirstFreeBlock;
                                 ;     370 uint8_t *pucAlignedHeap;
                                 ;     371 uint32_t ulAddress;
                                 ;     372 size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",372
0000022F F90E0300A000            		MOV.L #0000A000H, 0CH[R0]
00000235                         L79:	; entry.split
                                 ;     373 
                                 ;     374 	/* Ensure the heap starts on a correctly aligned boundary. */
                                 ;     375 	ulAddress = ( uint32_t ) ucHeap;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",375
00000235 FB12rrrrrrrr            		MOV.L #__$ucHeap, R1
0000023B A081                    		MOV.L R1, 08H[R0]
0000023D                         L80:	; entry.split1
0000023D 667E                    		MOV.L #00000007H, R14
                                 ;     376 
                                 ;     377 	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",377
0000023F 06A10C0E02              		TST 08H[R0].L, R14
00000244 20rr                    		BEQ L84
00000246                         L81:	; bb5
                                 ;     378 	{
                                 ;     379 		ulAddress += ( portBYTE_ALIGNMENT - 1 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",379
00000246 A881                    		MOV.L 08H[R0], R1
00000248 6271                    		ADD #07H, R1
0000024A A081                    		MOV.L R1, 08H[R0]
0000024C                         L82:	; bb5.split
                                 ;     380 		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",380
0000024C A881                    		MOV.L 08H[R0], R1
0000024E 7521F8                  		AND #0FFFFFFF8H, R1
00000251 A081                    		MOV.L R1, 08H[R0]
00000253                         L83:	; bb5.split2
                                 ;     381 		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",381
00000253 A881                    		MOV.L 08H[R0], R1
00000255 FBE2rrrrrrrr            		MOV.L #__$ucHeap, R14
0000025B 43E1                    		SUB R14, R1
0000025D A88A                    		MOV.L 0CH[R0], R2
0000025F 4312                    		SUB R1, R2
00000261 A08A                    		MOV.L R2, 0CH[R0]
00000263                         L84:	; bb17
                                 ;     382 	}
                                 ;     383 
                                 ;     384 	pucAlignedHeap = ( uint8_t * ) ulAddress;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",384
00000263 E5000201                		MOV.L 08H[R0], 04H[R0]
00000267                         L85:	; bb17.split
                                 ;     385 
                                 ;     386 	/* xStart is used to hold a pointer to the first item in the list of free
                                 ;     387 	blocks.  The void cast is used to prevent compiler warnings. */
                                 ;     388 	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",388
00000267 FBE2rrrrrrrr            		MOV.L #__$xStart, R14
0000026D E10E01                  		MOV.L 04H[R0], [R14]
00000270                         L86:	; bb17.split3
                                 ;     389 	xStart.xBlockSize = ( size_t ) 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",389
00000270 FB12rrrrrrrr            		MOV.L #__$xStart, R1
00000276 3E1100                  		MOV.L #00000000H, 04H[R1]
00000279                         L87:	; bb17.split4
                                 ;     390 
                                 ;     391 	/* pxEnd is used to mark the end of the list of free blocks and is inserted
                                 ;     392 	at the end of the heap space. */
                                 ;     393 	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",393
00000279 A809                    		MOV.L 04H[R0], R1
0000027B 06890103                		ADD 0CH[R0].L, R1
0000027F A081                    		MOV.L R1, 08H[R0]
00000281                         L88:	; bb17.split5
                                 ;     394 	ulAddress -= xHeapStructSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",394
00000281 A881                    		MOV.L 08H[R0], R1
00000283 FBE2rrrrrrrr            		MOV.L #__$xHeapStructSize, R14
00000289 0680E1                  		SUB [R14].L, R1
0000028C A081                    		MOV.L R1, 08H[R0]
0000028E                         L89:	; bb17.split6
                                 ;     395 	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",395
0000028E A881                    		MOV.L 08H[R0], R1
00000290 7521F8                  		AND #0FFFFFFF8H, R1
00000293 A081                    		MOV.L R1, 08H[R0]
00000295                         L90:	; bb17.split7
                                 ;     396 	pxEnd = ( void * ) ulAddress;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",396
00000295 FBE2rrrrrrrr            		MOV.L #__$pxEnd, R14
0000029B E10E02                  		MOV.L 08H[R0], [R14]
0000029E                         L91:	; bb17.split8
                                 ;     397 	pxEnd->xBlockSize = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",397
0000029E FBE2rrrrrrrr            		MOV.L #__$pxEnd, R14
000002A4 ECE1                    		MOV.L [R14], R1
000002A6 3E1100                  		MOV.L #00000000H, 04H[R1]
000002A9                         L92:	; bb17.split9
                                 ;     398 	pxEnd->pxNextFreeBlock = NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",398
000002A9 FBE2rrrrrrrr            		MOV.L #__$pxEnd, R14
000002AF ECEE                    		MOV.L [R14], R14
000002B1 F8E600                  		MOV.L #00000000H, [R14]
000002B4                         L93:	; bb17.split10
                                 ;     399 
                                 ;     400 	/* To start with there is a single free block that is sized to take up the
                                 ;     401 	entire heap space, minus the space taken by pxEnd. */
                                 ;     402 	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",402
000002B4 E10001                  		MOV.L 04H[R0], [R0]
000002B7                         L94:	; bb17.split11
                                 ;     403 	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",403
000002B7 EC01                    		MOV.L [R0], R1
000002B9 A882                    		MOV.L 08H[R0], R2
000002BB 4312                    		SUB R1, R2
000002BD A01A                    		MOV.L R2, 04H[R1]
000002BF                         L95:	; bb17.split12
                                 ;     404 	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",404
000002BF FBE2rrrrrrrr            		MOV.L #__$pxEnd, R14
000002C5 EC01                    		MOV.L [R0], R1
000002C7 E0E1                    		MOV.L [R14], [R1]
000002C9                         L96:	; bb17.split13
                                 ;     405 
                                 ;     406 	/* Only one block exists - and it covers the entire usable heap space. */
                                 ;     407 	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",407
000002C9 EC01                    		MOV.L [R0], R1
000002CB FBE2rrrrrrrr            		MOV.L #__$xMinimumEverFreeBytesRemaining, R14
000002D1 E11E01                  		MOV.L 04H[R1], [R14]
000002D4                         L97:	; bb17.split14
                                 ;     408 	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",408
000002D4 EC01                    		MOV.L [R0], R1
000002D6 FBE2rrrrrrrr            		MOV.L #__$xFreeBytesRemaining, R14
000002DC E11E01                  		MOV.L 04H[R1], [R14]
000002DF                         L98:	; bb17.split15
                                 ;     409 
                                 ;     410 	/* Work out the position of the top bit in a size_t variable. */
                                 ;     411 	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",411
000002DF FBE2rrrrrrrr            		MOV.L #__$xBlockAllocatedBit, R14
000002E5 F8E200000080            		MOV.L #80000000H, [R14]
000002EB 6704                    		RTSD #10H
000002ED                         __$prvInsertBlockIntoFreeList:
                                 		.STACK	__$prvInsertBlockIntoFreeList=16
                                 ;     412 }
                                 ;     413 /*-----------------------------------------------------------*/
                                 ;     414 
                                 ;     415 static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",415
000002ED 60C0                    		SUB #0CH, R0
000002EF A081                    		MOV.L R1, 08H[R0]
                                 ;     416 {
                                 ;     417 BlockLink_t *pxIterator;
                                 ;     418 uint8_t *puc;
                                 ;     419 
                                 ;     420 	/* Iterate through the list until a block is found that has a higher address
                                 ;     421 	than the block being inserted. */
                                 ;     422 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",422
000002F1 FB12rrrrrrrr            		MOV.L #__$xStart, R1
000002F7 E301                    		MOV.L R1, [R0]
000002F9 08                   S  		BRA L101
000002FA                         L100:	; bb
000002FA E010                    		MOV.L [R1], [R0]
000002FC                         L101:	; bb6
000002FC EC01                    		MOV.L [R0], R1
000002FE EC1E                    		MOV.L [R1], R14
00000300 06850E02                		CMP 08H[R0].L, R14
00000304 23rr                    		BLTU L100
00000306                         L102:	; bb13
                                 ;     423 	{
                                 ;     424 		/* Nothing to do here, just iterate to the right position. */
                                 ;     425 	}
                                 ;     426 
                                 ;     427 	/* Do the block being inserted, and the block it is being inserted after
                                 ;     428 	make a contiguous block of memory? */
                                 ;     429 	puc = ( uint8_t * ) pxIterator;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",429
00000306 A009                    		MOV.L R1, 04H[R0]
00000308                         L103:	; bb13.split
                                 ;     430 	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",430
00000308 EC01                    		MOV.L [R0], R1
0000030A A819                    		MOV.L 04H[R1], R1
0000030C 06890101                		ADD 04H[R0].L, R1
00000310 06850102                		CMP 08H[R0].L, R1
00000314 21rr                    		BNE L106
00000316                         L104:	; bb17
                                 ;     431 	{
                                 ;     432 		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",432
00000316 EC01                    		MOV.L [R0], R1
00000318 A81A                    		MOV.L 04H[R1], R2
0000031A A883                    		MOV.L 08H[R0], R3
0000031C 06893201                		ADD 04H[R3].L, R2
00000320 A01A                    		MOV.L R2, 04H[R1]
00000322                         L105:	; bb17.split
                                 ;     433 		pxBlockToInsert = pxIterator;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",433
00000322 E40002                  		MOV.L [R0], 08H[R0]
00000325                         L106:	; bb37
                                 ;     434 	}
                                 ;     435 	else
                                 ;     436 	{
                                 ;     437 		mtCOVERAGE_TEST_MARKER();
                                 ;     438 	}
                                 ;     439 
                                 ;     440 	/* Do the block being inserted, and the block it is being inserted before
                                 ;     441 	make a contiguous block of memory? */
                                 ;     442 	puc = ( uint8_t * ) pxBlockToInsert;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",442
00000325 E5000201                		MOV.L 08H[R0], 04H[R0]
00000329                         L107:	; bb37.split
                                 ;     443 	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",443
00000329 EC01                    		MOV.L [R0], R1
0000032B A882                    		MOV.L 08H[R0], R2
0000032D A82A                    		MOV.L 04H[R2], R2
0000032F 06890201                		ADD 04H[R0].L, R2
00000333 068412                  		CMP [R1].L, R2
00000336 21rr                    		BNE L112
00000338                         L108:	; bb42
                                 ;     444 	{
                                 ;     445 		if( pxIterator->pxNextFreeBlock != pxEnd )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",445
00000338 EC01                    		MOV.L [R0], R1
0000033A EC1E                    		MOV.L [R1], R14
0000033C FBF2rrrrrrrr            		MOV.L #__$pxEnd, R15
00000342 0684FE                  		CMP [R15].L, R14
00000345 A881                    		MOV.L 08H[R0], R1
00000347 20rr                    		BEQ L111
00000349                         L109:	; bb43
                                 ;     446 		{
                                 ;     447 			/* Form one big block from the two blocks. */
                                 ;     448 			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",448
00000349 EC02                    		MOV.L [R0], R2
0000034B EC2E                    		MOV.L [R2], R14
0000034D A81A                    		MOV.L 04H[R1], R2
0000034F 0689E201                		ADD 04H[R14].L, R2
00000353 A01A                    		MOV.L R2, 04H[R1]
00000355                         L110:	; bb43.split
                                 ;     449 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",449
00000355 EC01                    		MOV.L [R0], R1
00000357 EC1E                    		MOV.L [R1], R14
00000359 A881                    		MOV.L 08H[R0], R1
0000035B E0E1                    		MOV.L [R14], [R1]
0000035D 2Err                 B  		BRA L113
0000035F                         L111:	; bb60
                                 ;     450 		}
                                 ;     451 		else
                                 ;     452 		{
                                 ;     453 			pxBlockToInsert->pxNextFreeBlock = pxEnd;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",453
0000035F FBE2rrrrrrrr            		MOV.L #__$pxEnd, R14
00000365 E0E1                    		MOV.L [R14], [R1]
00000367 08                   S  		BRA L113
00000368                         L112:	; bb72
                                 ;     454 		}
                                 ;     455 	}
                                 ;     456 	else
                                 ;     457 	{
                                 ;     458 		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",458
00000368 EC01                    		MOV.L [R0], R1
0000036A A882                    		MOV.L 08H[R0], R2
0000036C E012                    		MOV.L [R1], [R2]
0000036E                         L113:	; bb91
                                 ;     459 	}
                                 ;     460 
                                 ;     461 	/* If the block being inserted plugged a gab, so was merged with the block
                                 ;     462 	before and the block after, then it's pxNextFreeBlock pointer will have
                                 ;     463 	already been set, and should not be set here as that would make it point
                                 ;     464 	to itself. */
                                 ;     465 	if( pxIterator != pxBlockToInsert )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",465
0000036E EC01                    		MOV.L [R0], R1
00000370 06850102                		CMP 08H[R0].L, R1
00000374 10                   S  		BEQ L115
00000375                         L114:	; bb92
                                 ;     466 	{
                                 ;     467 		pxIterator->pxNextFreeBlock = pxBlockToInsert;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",467
00000375 A881                    		MOV.L 08H[R0], R1
00000377 EC02                    		MOV.L [R0], R2
00000379 E321                    		MOV.L R1, [R2]
0000037B 6703                    		RTSD #0CH
0000037D                         L115:	; return
                                 ;     468 	}
                                 ;     469 	else
                                 ;     470 	{
                                 ;     471 		mtCOVERAGE_TEST_MARKER();
                                 ;     472 	}
                                 ;     473 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\portable\MemMang\heap_4.c",473
0000037D 6703                    		RTSD #0CH
                                 ;     474 
                                 		.SECTION	C,ROMDATA,ALIGN=4
00000000                         __$xHeapStructSize:
00000000 08000000                		.lword	00000008H
                                 		.SECTION	D,ROMDATA,ALIGN=4
00000000                         __$pxEnd:
00000000 00000000                		.lword	00000000H
00000004                         __$xFreeBytesRemaining:
00000004 00000000                		.lword	00000000H
00000008                         __$xMinimumEverFreeBytesRemaining:
00000008 00000000                		.lword	00000000H
0000000C                         __$xBlockAllocatedBit:
0000000C 00000000                		.lword	00000000H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         __$xStart:
00000000(00000008H)              		.blkl	2
                                 		.SECTION	B_1,DATA
00000000                         __$ucHeap:
00000000(0000A000H)              		.blkb	40960
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     01055   LINES

Section List

Attr         Size               Name
CODE     0000000895(0000037FH)  P
ROMDATA  0000000004(00000004H)  C
ROMDATA  0000000016(00000010H)  D
DATA     0000000008(00000008H)  B
DATA     0000040960(0000A000H)  B_1

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx12DB\$ccrx\heap_4.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\CompactaXP_build\heap_4.lst
-output=C:\Workspace\e2studio\git\MT01\CompactaXP_build\FreeRTOS\Source\portable\MemMang\heap_4.obj
