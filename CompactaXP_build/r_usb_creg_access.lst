* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Thu Mar 09 14:19:07 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  09-Mar-2017 14:19:07
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=r_usb_creg_access.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=r_usb_creg_access.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=1,EASYMAK=0,MOBILE=0,FREE_RTOS_PP
                                 ;r_usb_creg_access.c
                                 
                                 		.glb	_usb_creg_read_syscfg
                                 		.glb	_usb_creg_write_syscfg
                                 		.glb	_usb_creg_set_xtal
                                 		.glb	_usb_creg_set_xcke
                                 		.glb	_usb_creg_set_scke
                                 		.glb	_usb_creg_clr_scke
                                 		.glb	_usb_creg_set_hse
                                 		.glb	_usb_creg_clr_hse
                                 		.glb	_usb_creg_set_dcfm
                                 		.glb	_usb_creg_clr_dcfm
                                 		.glb	_usb_creg_set_drpd
                                 		.glb	_usb_creg_clr_drpd
                                 		.glb	_usb_creg_set_usbe
                                 		.glb	_usb_creg_clr_usbe
                                 		.glb	_usb_creg_read_syssts
                                 		.glb	_usb_creg_write_syssts
                                 		.glb	_usb_creg_read_dvstctr
                                 		.glb	_usb_creg_write_dvstctr
                                 		.glb	_usb_creg_rmw_dvstctr
                                 		.glb	_usb_creg_clr_dvstctr
                                 		.glb	_usb_creg_set_vbout
                                 		.glb	_usb_creg_clr_vbout
                                 		.glb	_usb_creg_set_utst
                                 		.glb	_usb_creg_set_ldrv
                                 		.glb	_usb_creg_clr_ldrv
                                 		.glb	_usb_creg_write_dmacfg
                                 		.glb	_usb_creg_read_fifo32
                                 		.glb	_usb_creg_write_fifo32
                                 		.glb	_usb_creg_read_fifo16
                                 		.glb	_R_usb_cstd_debug_hook
                                 		.glb	_usb_creg_write_fifo16
                                 		.glb	_usb_creg_read_fifo8
                                 		.glb	_usb_creg_write_fifo8
                                 		.glb	_usb_creg_read_fifosel
                                 		.glb	_usb_creg_write_fifosel
                                 		.glb	_usb_creg_rmw_fifosel
                                 		.glb	_usb_creg_set_dclrm
                                 		.glb	_usb_creg_clr_dclrm
                                 		.glb	_usb_creg_set_dreqe
                                 		.glb	_usb_creg_clr_dreqe
                                 		.glb	_usb_creg_set_mbw
                                 		.glb	_usb_creg_set_bigend
                                 		.glb	_usb_creg_set_curpipe
                                 		.glb	_usb_creg_read_fifoctr
                                 		.glb	_usb_creg_set_bval
                                 		.glb	_usb_creg_set_bclr
                                 		.glb	_usb_creg_read_intenb
                                 		.glb	_usb_creg_write_intenb
                                 		.glb	_usb_creg_set_intenb
                                 		.glb	_usb_creg_clr_enb_vbse
                                 		.glb	_usb_creg_clr_enb_sofe
                                 		.glb	_usb_creg_read_brdyenb
                                 		.glb	_usb_creg_write_brdyenb
                                 		.glb	_usb_creg_set_brdyenb
                                 		.glb	_usb_creg_clr_brdyenb
                                 		.glb	_usb_creg_read_nrdyenb
                                 		.glb	_usb_creg_write_nrdyenb
                                 		.glb	_usb_creg_set_nrdyenb
                                 		.glb	_usb_creg_clr_nrdyenb
                                 		.glb	_usb_creg_read_bempenb
                                 		.glb	_usb_creg_write_bempenb
                                 		.glb	_usb_creg_set_bempenb
                                 		.glb	_usb_creg_clr_bempenb
                                 		.glb	_usb_creg_read_sofcfg
                                 		.glb	_usb_creg_read_intsts
                                 		.glb	_usb_creg_write_intsts
                                 		.glb	_usb_creg_clr_sts_vbint
                                 		.glb	_usb_creg_clr_sts_sofr
                                 		.glb	_usb_creg_read_brdysts
                                 		.glb	_usb_creg_write_brdysts
                                 		.glb	_usb_creg_clr_sts_brdy
                                 		.glb	_usb_creg_read_nrdysts
                                 		.glb	_usb_creg_write_nrdysts
                                 		.glb	_usb_creg_clr_sts_nrdy
                                 		.glb	_usb_creg_read_bempsts
                                 		.glb	_usb_creg_write_bempsts
                                 		.glb	_usb_creg_clr_sts_bemp
                                 		.glb	_usb_creg_read_frmnum
                                 		.glb	_usb_creg_read_usbaddr
                                 		.glb	_usb_creg_set_stsrecov
                                 		.glb	_usb_creg_read_usbreq
                                 		.glb	_usb_creg_read_usbval
                                 		.glb	_usb_creg_read_usbindx
                                 		.glb	_usb_creg_read_usbleng
                                 		.glb	_usb_creg_read_dcpcfg
                                 		.glb	_usb_creg_write_dcpcfg
                                 		.glb	_usb_creg_set_dcpshtnak
                                 		.glb	_usb_creg_read_dcpmaxp
                                 		.glb	_usb_creg_write_dcpmxps
                                 		.glb	_usb_creg_read_dcpctr
                                 		.glb	_usb_creg_read_pipesel
                                 		.glb	_usb_creg_write_pipesel
                                 		.glb	_usb_creg_read_pipecfg
                                 		.glb	_usb_creg_write_pipecfg
                                 		.glb	_usb_creg_set_type
                                 		.glb	_usb_creg_write_pipebuf
                                 		.glb	_usb_creg_read_pipemaxp
                                 		.glb	_usb_creg_write_pipemaxp
                                 		.glb	_usb_creg_set_mxps
                                 		.glb	_usb_creg_read_pipeperi
                                 		.glb	_usb_creg_write_pipeperi
                                 		.glb	_usb_creg_read_pipectr
                                 		.glb	_usb_creg_write_pipectr
                                 		.glb	_usb_creg_set_csclr
                                 		.glb	_usb_creg_set_aclrm
                                 		.glb	_usb_creg_clr_aclrm
                                 		.glb	_usb_creg_set_sqclr
                                 		.glb	_usb_creg_set_sqset
                                 		.glb	_usb_creg_clr_sqset
                                 		.glb	_usb_creg_set_pid
                                 		.glb	_usb_creg_clr_pid
                                 		.glb	_usb_creg_read_pipetre
                                 		.glb	_usb_creg_set_trenb
                                 		.glb	_usb_creg_clr_trenb
                                 		.glb	_usb_creg_set_trclr
                                 		.glb	_usb_creg_read_pipetrn
                                 		.glb	_usb_creg_write_pipetrn
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _usb_creg_read_syscfg:
                                 		.STACK	_usb_creg_read_syscfg=12
                                 ;       1 /***********************************************************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No
                                 ;       4 * other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
                                 ;       5 * applicable laws, including copyright laws.
                                 ;       6 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
                                 ;       7 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY,
                                 ;       8 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM
                                 ;       9 * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
                                 ;      10 * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS
                                 ;      11 * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      12 * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of
                                 ;      13 * this software. By using this software, you agree to the additional terms and conditions found by accessing the
                                 ;      14 * following link:
                                 ;      15 * http://www.renesas.com/disclaimer
                                 ;      16 *
                                 ;      17 * Copyright (C) 2014(2015) Renesas Electronics Corporation. All rights reserved.
                                 ;      18 ***********************************************************************************************************************/
                                 ;      19 /***********************************************************************************************************************
                                 ;      20 * File Name    : r_usb_creg_access.c
                                 ;      21 * Description  : USB IP register access code
                                 ;      22 ***********************************************************************************************************************/
                                 ;      23 /**********************************************************************************************************************
                                 ;      24 * History : DD.MM.YYYY Version Description
                                 ;      25 *         : 04.01.2014 1.00 First Release
                                 ;      26 *         : 30.01.2015 1.01    Added RX71M.
                                 ;      27 ***********************************************************************************************************************/
                                 ;      28 
                                 ;      29 
                                 ;      30 /******************************************************************************
                                 ;      31 Includes   <System Includes> , "Project Includes"
                                 ;      32 ******************************************************************************/
                                 ;      33 #include "r_usb_basic_if.h"
                                 ;      34 #include "r_usb_reg_access.h"
                                 ;      35 
                                 ;      36 
                                 ;      37 /******************************************************************************
                                 ;      38 Constant macro definitions
                                 ;      39 ******************************************************************************/
                                 ;      40 #define USB_TYPE_NUM_SHIFT  14
                                 ;      41 #define USB_MXPS_NUM_SHIFT  0
                                 ;      42 
                                 ;      43 
                                 ;      44 /*************/
                                 ;      45 /*  SYSCFG  */
                                 ;      46 /*************/
                                 ;      47 /* System Configuration Control Register. */
                                 ;      48 
                                 ;      49 /******************************************************************************
                                 ;      50 Function Name   : usb_creg_read_syscfg
                                 ;      51 Description     : Returns the specified port's SYSCFG register value.
                                 ;      52 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;      53                 : uint16_t port   : Port number (not used $REA)
                                 ;      54 Return value    : SYSCFG content.
                                 ;      55 ******************************************************************************/
                                 ;      56 uint16_t    usb_creg_read_syscfg( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",56
00000000 6080                    		SUB #08H, R0
00000002 A009                    		MOV.L R1, 04H[R0]
00000004 900A                    		MOV.W R2, 02H[R0]
                                 ;      57 {
                                 ;      58     return ptr->ipp->SYSCFG.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",58
00000006 A809                    		MOV.L 04H[R0], R1
00000008 A891                    		MOV.L 08H[R1], R1
0000000A D010                    		MOV.W [R1], [R0]
0000000C DC01                    		MOV.W [R0], R1
0000000E                         L11:	; entry.split
                                 ;      59 } /* eof usb_creg_read_syscfg() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",59
0000000E 5F11                    		MOVU.W R1, R1
00000010 6702                    		RTSD #08H
00000012                         _usb_creg_write_syscfg:
                                 		.STACK	_usb_creg_write_syscfg=12
                                 ;      60 
                                 ;      61 /******************************************************************************
                                 ;      62 Function Name   : usb_creg_write_syscfg
                                 ;      63 Description     : Write specified value to the SYSCFG register of the given port.
                                 ;      64 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;      65                 : uint16_t port   : Port number (only port 0 used $REA)
                                 ;      66                 : uint16_t data   : Value to write.
                                 ;      67 Return value    : none
                                 ;      68 ******************************************************************************/
                                 ;      69 void    usb_creg_write_syscfg( USB_UTR_t *ptr, uint16_t port, uint16_t  data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",69
00000012 6080                    		SUB #08H, R0
00000014 A009                    		MOV.L R1, 04H[R0]
00000016 900A                    		MOV.W R2, 02H[R0]
00000018 D303                    		MOV.W R3, [R0]
                                 ;      70 {
                                 ;      71     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",71
0000001A B809                    		MOVU.W 02H[R0], R1
0000001C 6101                    		CMP #00H, R1
0000001E 18                   S  		BNE L14
0000001F                         L13:	; bb4
                                 ;      72     {
                                 ;      73         ptr->ipp->SYSCFG.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",73
0000001F A809                    		MOV.L 04H[R0], R1
00000021 A891                    		MOV.L 08H[R1], R1
00000023 D001                    		MOV.W [R0], [R1]
00000025 6702                    		RTSD #08H
00000027                         L14:	; return
                                 ;      74     }
                                 ;      75 } /* eof usb_creg_write_syscfg */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",75
00000027 6702                    		RTSD #08H
00000029                         _usb_creg_set_xtal:
                                 		.STACK	_usb_creg_set_xtal=12
                                 ;      76 
                                 ;      77 /******************************************************************************
                                 ;      78 Function Name   : usb_creg_set_xtal
                                 ;      79 Description     : Not processed as the functionality is provided by R8A66597(ASSP).
                                 ;      80 Arguments       : USB_UTR_t *ptr    : USB system internal data.
                                 ;      81                 : uint16_t data     : Not used for 597ASSP silicon.
                                 ;      82 Return value    : none
                                 ;      83 ******************************************************************************/
                                 ;      84 void    usb_creg_set_xtal( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",84
00000029 6080                    		SUB #08H, R0
0000002B A009                    		MOV.L R1, 04H[R0]
0000002D 900A                    		MOV.W R2, 02H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",86
0000002F 6702                    		RTSD #08H
00000031                         _usb_creg_set_xcke:
                                 		.STACK	_usb_creg_set_xcke=8
                                 ;      85 {
                                 ;      86 } /* eof usb_creg_set_xtal() */
                                 ;      87 
                                 ;      88 /******************************************************************************
                                 ;      89 Function Name   : usb_creg_set_xcke
                                 ;      90 Description     : Not processed as the functionality is provided by R8A66597(ASSP).
                                 ;      91 Arguments       : USB_UTR_t *ptr    : USB system internal data.
                                 ;      92 Return value    : none
                                 ;      93 ******************************************************************************/
                                 ;      94 void    usb_creg_set_xcke( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",94
00000031 6040                    		SUB #04H, R0
00000033 E301                    		MOV.L R1, [R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",96
00000035 6701                    		RTSD #04H
00000037                         _usb_creg_set_scke:
                                 		.STACK	_usb_creg_set_scke=8
                                 ;      95 {
                                 ;      96 } /* eof usb_creg_set_xcke() */
                                 ;      97 
                                 ;      98 /******************************************************************************
                                 ;      99 Function Name   : usb_creg_set_scke
                                 ;     100 Description     : Enable USB module clock.
                                 ;     101 Arguments       : USB_UTR_t *ptr : USB system internal structure. Selects channel.
                                 ;     102 Return value    : -
                                 ;     103 ******************************************************************************/
                                 ;     104 void    usb_creg_set_scke( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",104
00000037 6040                    		SUB #04H, R0
00000039 E301                    		MOV.L R1, [R0]
                                 ;     105 {
                                 ;     106     ptr->ipp->SYSCFG.WORD |= USB_SCKE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",106
0000003B A891                    		MOV.L 08H[R1], R1
0000003D DC1E                    		MOV.W [R1], R14
0000003F 78AE                    		BSET #0AH, R14
00000041 D31E                    		MOV.W R14, [R1]
00000043 6701                    		RTSD #04H
00000045                         _usb_creg_clr_scke:
                                 		.STACK	_usb_creg_clr_scke=8
                                 ;     107 } /* eof usb_creg_set_xcke */
                                 ;     108 
                                 ;     109 /******************************************************************************
                                 ;     110 Function Name   : usb_creg_clr_scke
                                 ;     111 Description     : Disable USB module clock.
                                 ;     112 Arguments       : USB_UTR_t *ptr : USB system internal structure. Selects channel.
                                 ;     113 Return value    : -
                                 ;     114 ******************************************************************************/
                                 ;     115 void    usb_creg_clr_scke( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",115
00000045 6040                    		SUB #04H, R0
00000047 E301                    		MOV.L R1, [R0]
                                 ;     116 {
                                 ;     117     ptr->ipp->SYSCFG.WORD &= ~USB_SCKE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",117
00000049 A891                    		MOV.L 08H[R1], R1
0000004B 5C1E                    		MOVU.W [R1], R14
0000004D 772EFFFB00              		AND #0FBFFH, R14
00000052 D31E                    		MOV.W R14, [R1]
00000054 6701                    		RTSD #04H
00000056                         _usb_creg_set_hse:
                                 		.STACK	_usb_creg_set_hse=12
                                 ;     118 } /* eof usb_creg_clr_scke() */
                                 ;     119 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;     120 /******************************************************************************
                                 ;     121 Function Name   : usb_creg_set_cnen
                                 ;     122 Description     : Enable single end receiver.
                                 ;     123 Arguments       : USB_UTR_t *ptr : USB system internal structure. Selects channel.
                                 ;     124 Return value    : -
                                 ;     125 ******************************************************************************/
                                 ;     126 void    usb_creg_set_cnen( USB_UTR_t *ptr )
                                 ;     127 {
                                 ;     128     ptr->ipp1->SYSCFG.WORD |= USB_CNEN;
                                 ;     129 } /* eof usb_creg_set_xcke */
                                 ;     130 
                                 ;     131 /******************************************************************************
                                 ;     132 Function Name   : usb_creg_clr_cnen
                                 ;     133 Description     : Disable single end receiver.
                                 ;     134 Arguments       : USB_UTR_t *ptr : USB system internal structure. Selects channel.
                                 ;     135 Return value    : -
                                 ;     136 ******************************************************************************/
                                 ;     137 void    usb_creg_clr_cnen( USB_UTR_t *ptr )
                                 ;     138 {
                                 ;     139     ptr->ipp1->SYSCFG.WORD &= ~USB_CNEN;
                                 ;     140 } /* eof usb_creg_clr_scke() */
                                 ;     141 #endif /*defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M) */
                                 ;     142 /******************************************************************************
                                 ;     143 Function Name   : usb_creg_set_hse
                                 ;     144 Description     : Not processed as the functionality is provided by R8A66597(ASSP).
                                 ;     145 Arguments       : USB_UTR_t *ptr  : Not used.
                                 ;     146                 : uint16_t  port  : Not used.
                                 ;     147 Return value    : none
                                 ;     148 ******************************************************************************/
                                 ;     149 void    usb_creg_set_hse( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",149
00000056 6080                    		SUB #08H, R0
00000058 A009                    		MOV.L R1, 04H[R0]
0000005A 900A                    		MOV.W R2, 02H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",157
0000005C 6702                    		RTSD #08H
0000005E                         _usb_creg_clr_hse:
                                 		.STACK	_usb_creg_clr_hse=12
                                 ;     150 {
                                 ;     151 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;     152     if ( ptr->ip == USB_USBIP_1 )
                                 ;     153     {
                                 ;     154         ptr->ipp1->SYSCFG.WORD |= USB_HSE;
                                 ;     155     }
                                 ;     156 #endif /*defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M) */
                                 ;     157 } /* eof usb_creg_set_hse() */
                                 ;     158 
                                 ;     159 /******************************************************************************
                                 ;     160 Function Name   : usb_creg_clr_hse
                                 ;     161 Description     : Clears HSE bit of the specified port's SYSCFG register
                                 ;     162 Arguments       : USB_UTR_t *ptr : USB system internal structure. Selects channel.
                                 ;     163                 : uint16_t  port : Port number
                                 ;     164 Return value    : none
                                 ;     165 ******************************************************************************/
                                 ;     166 void    usb_creg_clr_hse( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",166
0000005E 6080                    		SUB #08H, R0
00000060 A009                    		MOV.L R1, 04H[R0]
00000062 900A                    		MOV.W R2, 02H[R0]
                                 ;     167 {
                                 ;     168     if ( ptr->ip == USB_USBIP_1 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",168
00000064 A809                    		MOV.L 04H[R0], R1
00000066 B991                    		MOVU.W 0CH[R1], R1
00000068 6111                    		CMP #01H, R1
0000006A 21rr                    		BNE L22
0000006C                         L21:	; bb3
                                 ;     169     {
                                 ;     170         ptr->ipp->SYSCFG.WORD &= ~USB_HSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",170
0000006C A809                    		MOV.L 04H[R0], R1
0000006E A891                    		MOV.L 08H[R1], R1
00000070 5C1E                    		MOVU.W [R1], R14
00000072 772E7FFF00              		AND #0FF7FH, R14
00000077 D31E                    		MOV.W R14, [R1]
00000079 6702                    		RTSD #08H
0000007B                         L22:	; return
                                 ;     171     }
                                 ;     172 } /* eof usb_creg_clr_hse() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",172
0000007B 6702                    		RTSD #08H
0000007D                         _usb_creg_set_dcfm:
                                 		.STACK	_usb_creg_set_dcfm=8
                                 ;     173 
                                 ;     174 /******************************************************************************
                                 ;     175 Function Name   : usb_creg_set_dcfm
                                 ;     176 Description     : DCFM-bit set of register SYSCFG
                                 ;     177                 : (USB Host mode is selected.)
                                 ;     178 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     179 Return value    : none
                                 ;     180 ******************************************************************************/
                                 ;     181 void    usb_creg_set_dcfm( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",181
0000007D 6040                    		SUB #04H, R0
0000007F E301                    		MOV.L R1, [R0]
                                 ;     182 {
                                 ;     183     ptr->ipp->SYSCFG.WORD |= USB_DCFM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",183
00000081 A891                    		MOV.L 08H[R1], R1
00000083 DC1E                    		MOV.W [R1], R14
00000085 786E                    		BSET #06H, R14
00000087 D31E                    		MOV.W R14, [R1]
00000089 6701                    		RTSD #04H
0000008B                         _usb_creg_clr_dcfm:
                                 		.STACK	_usb_creg_clr_dcfm=8
                                 ;     184 } /* eof usb_creg_set_dcfm() */
                                 ;     185 
                                 ;     186 /******************************************************************************
                                 ;     187 Function Name   : usb_creg_clr_dcfm
                                 ;     188 Description     : DCFM-bit clear of register SYSCFG.
                                 ;     189                 : (USB Peripheral mode is selected.)
                                 ;     190 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     191 Return value    : none
                                 ;     192 ******************************************************************************/
                                 ;     193 void    usb_creg_clr_dcfm( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",193
0000008B 6040                    		SUB #04H, R0
0000008D E301                    		MOV.L R1, [R0]
                                 ;     194 {
                                 ;     195     ptr->ipp->SYSCFG.WORD &= ~USB_DCFM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",195
0000008F A891                    		MOV.L 08H[R1], R1
00000091 5C1E                    		MOVU.W [R1], R14
00000093 772EBFFF00              		AND #0FFBFH, R14
00000098 D31E                    		MOV.W R14, [R1]
0000009A 6701                    		RTSD #04H
0000009C                         _usb_creg_set_drpd:
                                 		.STACK	_usb_creg_set_drpd=12
                                 ;     196 } /* eof usb_creg_clr_dcfm() */
                                 ;     197 
                                 ;     198 /******************************************************************************
                                 ;     199 Function Name   : usb_creg_set_drpd
                                 ;     200 Description     : Set bit of the specified port's SYSCFG DRPD register.
                                 ;     201                 : (for USB Host mode; set D + / D-line PullDown.)
                                 ;     202 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     203                 : uint16_t  port  : USB port number.
                                 ;     204 Return value    : none
                                 ;     205 ******************************************************************************/
                                 ;     206 void    usb_creg_set_drpd( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",206
0000009C 6080                    		SUB #08H, R0
0000009E A009                    		MOV.L R1, 04H[R0]
000000A0 900A                    		MOV.W R2, 02H[R0]
                                 ;     207 {
                                 ;     208     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",208
000000A2 B809                    		MOVU.W 02H[R0], R1
000000A4 6101                    		CMP #00H, R1
000000A6 21rr                    		BNE L27
000000A8                         L26:	; bb3
                                 ;     209     {
                                 ;     210         ptr->ipp->SYSCFG.WORD |= USB_DRPD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",210
000000A8 A809                    		MOV.L 04H[R0], R1
000000AA A891                    		MOV.L 08H[R1], R1
000000AC DC1E                    		MOV.W [R1], R14
000000AE 785E                    		BSET #05H, R14
000000B0 D31E                    		MOV.W R14, [R1]
000000B2 6702                    		RTSD #08H
000000B4                         L27:	; return
                                 ;     211     }
                                 ;     212 } /* eof usb_creg_set_drpd() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",212
000000B4 6702                    		RTSD #08H
000000B6                         _usb_creg_clr_drpd:
                                 		.STACK	_usb_creg_clr_drpd=12
                                 ;     213 
                                 ;     214 /******************************************************************************
                                 ;     215 Function Name   : usb_creg_clr_drpd
                                 ;     216 Description     : Clear bit of the specified port's SYSCFG DRPD register.
                                 ;     217                 : (for USB Host mode; Enable D + / D-line PullDown.)
                                 ;     218 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     219                 : uint16_t  port  : Port number
                                 ;     220 Return value    : none
                                 ;     221 ******************************************************************************/
                                 ;     222 void    usb_creg_clr_drpd( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",222
000000B6 6080                    		SUB #08H, R0
000000B8 A009                    		MOV.L R1, 04H[R0]
000000BA 900A                    		MOV.W R2, 02H[R0]
                                 ;     223 {
                                 ;     224     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",224
000000BC B809                    		MOVU.W 02H[R0], R1
000000BE 6101                    		CMP #00H, R1
000000C0 21rr                    		BNE L30
000000C2                         L29:	; bb3
                                 ;     225     {
                                 ;     226         ptr->ipp->SYSCFG.WORD &= ~USB_DRPD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",226
000000C2 A809                    		MOV.L 04H[R0], R1
000000C4 A891                    		MOV.L 08H[R1], R1
000000C6 5C1E                    		MOVU.W [R1], R14
000000C8 772EDFFF00              		AND #0FFDFH, R14
000000CD D31E                    		MOV.W R14, [R1]
000000CF 6702                    		RTSD #08H
000000D1                         L30:	; return
                                 ;     227     }
                                 ;     228 } /* eof usb_creg_clr_drpd() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",228
000000D1 6702                    		RTSD #08H
000000D3                         _usb_creg_set_usbe:
                                 		.STACK	_usb_creg_set_usbe=8
                                 ;     229 
                                 ;     230 /******************************************************************************
                                 ;     231 Function Name   : usb_creg_set_usbe
                                 ;     232 Description     : Enable USB operation.
                                 ;     233 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     234 Return value    : none
                                 ;     235 ******************************************************************************/
                                 ;     236 void    usb_creg_set_usbe( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",236
000000D3 6040                    		SUB #04H, R0
000000D5 E301                    		MOV.L R1, [R0]
                                 ;     237 {
                                 ;     238     ptr->ipp->SYSCFG.WORD |= USB_USBE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",238
000000D7 A891                    		MOV.L 08H[R1], R1
000000D9 DC1E                    		MOV.W [R1], R14
000000DB 780E                    		BSET #00H, R14
000000DD D31E                    		MOV.W R14, [R1]
000000DF 6701                    		RTSD #04H
000000E1                         _usb_creg_clr_usbe:
                                 		.STACK	_usb_creg_clr_usbe=8
                                 ;     239 } /* eof usb_creg_set_usbe() */
                                 ;     240 
                                 ;     241 /******************************************************************************
                                 ;     242 Function Name   : usb_creg_clr_usbe
                                 ;     243 Description     : Enable USB operation.
                                 ;     244 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     245 Return value    : none
                                 ;     246 ******************************************************************************/
                                 ;     247 void    usb_creg_clr_usbe( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",247
000000E1 6040                    		SUB #04H, R0
000000E3 E301                    		MOV.L R1, [R0]
                                 ;     248 {
                                 ;     249     ptr->ipp->SYSCFG.WORD &= ~USB_USBE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",249
000000E5 A891                    		MOV.L 08H[R1], R1
000000E7 5C1E                    		MOVU.W [R1], R14
000000E9 772EFEFF00              		AND #0FFFEH, R14
000000EE D31E                    		MOV.W R14, [R1]
000000F0 6701                    		RTSD #04H
000000F2                         _usb_creg_read_syssts:
                                 		.STACK	_usb_creg_read_syssts=12
                                 ;     250 } /* eof usb_creg_clr_usbe() */
                                 ;     251 
                                 ;     252 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;     253 /***********/
                                 ;     254 /*  BUSWAIT */
                                 ;     255 /***********/
                                 ;     256 /*  CPU Bus Wait Register */
                                 ;     257 
                                 ;     258 /******************************************************************************
                                 ;     259 Function Name   : usb_creg_set_bus_wait
                                 ;     260 Description     : Set BUSWAIT register.
                                 ;     261 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     262 Return value    : none
                                 ;     263 ******************************************************************************/
                                 ;     264 void    usb_creg_set_bus_wait( USB_UTR_t *ptr )
                                 ;     265 {
                                 ;     266     ptr -> ipp1 -> BUSWAIT.WORD = USB_BWAIT_7; // 67ns / (1 / 120MHz) = 8.04 -> 9 cycle -> 7 wait 
                                 ;     267 } /* eof usb_creg_set_bus_wait() */
                                 ;     268 #endif /* #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M) */
                                 ;     269 
                                 ;     270 /***********/
                                 ;     271 /*  SYSSTS0 */
                                 ;     272 /***********/
                                 ;     273 /* System Configuration Status Register 0 */
                                 ;     274 
                                 ;     275 /******************************************************************************
                                 ;     276 Function Name   : usb_creg_read_syssts
                                 ;     277 Description     : Returns the value of the specified port's SYSSTS register.
                                 ;     278 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     279                 : uint16_t  port  : USB port number. ($REA not used.)
                                 ;     280 Return value    : SYSSTS0 content
                                 ;     281 ******************************************************************************/
                                 ;     282 uint16_t    usb_creg_read_syssts( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",282
000000F2 6080                    		SUB #08H, R0
000000F4 A009                    		MOV.L R1, 04H[R0]
000000F6 900A                    		MOV.W R2, 02H[R0]
                                 ;     283 {
                                 ;     284     return (uint16_t)(ptr->ipp->SYSSTS0.WORD);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",284
000000F8 A809                    		MOV.L 04H[R0], R1
000000FA A891                    		MOV.L 08H[R1], R1
000000FC D11002                  		MOV.W 04H[R1], [R0]
000000FF DC01                    		MOV.W [R0], R1
00000101                         L34:	; entry.split
                                 ;     285 } /* eof usb_creg_read_syssts() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",285
00000101 5F11                    		MOVU.W R1, R1
00000103 6702                    		RTSD #08H
00000105                         _usb_creg_write_syssts:
                                 		.STACK	_usb_creg_write_syssts=12
                                 ;     286 
                                 ;     287 /******************************************************************************
                                 ;     288 Function Name   : usb_creg_write_syssts
                                 ;     289 Description     : Write to the specified port's SYSSTS register.
                                 ;     290 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     291                 : uint16_t  port  : USB port number.
                                 ;     292                 : uint16_t  data  : The value to write
                                 ;     293 Return value    : none
                                 ;     294 ******************************************************************************/
                                 ;     295 void        usb_creg_write_syssts( USB_UTR_t *ptr, uint16_t port, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",295
00000105 6080                    		SUB #08H, R0
00000107 A009                    		MOV.L R1, 04H[R0]
00000109 900A                    		MOV.W R2, 02H[R0]
0000010B D303                    		MOV.W R3, [R0]
                                 ;     296 {
                                 ;     297     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",297
0000010D B809                    		MOVU.W 02H[R0], R1
0000010F 6101                    		CMP #00H, R1
00000111 18                   S  		BNE L37
00000112                         L36:	; bb4
                                 ;     298     {
                                 ;     299         ptr->ipp->SYSSTS0.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",299
00000112 A809                    		MOV.L 04H[R0], R1
00000114 A891                    		MOV.L 08H[R1], R1
00000116 D40102                  		MOV.W [R0], 04H[R1]
00000119 6702                    		RTSD #08H
0000011B                         L37:	; return
                                 ;     300     }
                                 ;     301 } /* eof usb_creg_write_syssts() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",301
0000011B 6702                    		RTSD #08H
0000011D                         _usb_creg_read_dvstctr:
                                 		.STACK	_usb_creg_read_dvstctr=12
                                 ;     302 
                                 ;     303 /************/
                                 ;     304 /*  DVSTCTR0  */
                                 ;     305 /************/
                                 ;     306 /* Device State Control Register 0 */
                                 ;     307 
                                 ;     308 /******************************************************************************
                                 ;     309 Function Name   : usb_creg_read_dvstctr
                                 ;     310 Description     : Returns the specified port's DVSTCTR register content.
                                 ;     311 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     312                 : uint16_t  port  : USB port number. ($REA not used.)
                                 ;     313 Return value    : DVSTCTR0 content
                                 ;     314 ******************************************************************************/
                                 ;     315 uint16_t    usb_creg_read_dvstctr( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",315
0000011D 6080                    		SUB #08H, R0
0000011F A009                    		MOV.L R1, 04H[R0]
00000121 900A                    		MOV.W R2, 02H[R0]
                                 ;     316 {
                                 ;     317     return (uint16_t)(ptr->ipp->DVSTCTR0.WORD);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",317
00000123 A809                    		MOV.L 04H[R0], R1
00000125 A891                    		MOV.L 08H[R1], R1
00000127 D11004                  		MOV.W 08H[R1], [R0]
0000012A DC01                    		MOV.W [R0], R1
0000012C                         L39:	; entry.split
                                 ;     318 } /* eof usb_creg_read_dvstctr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",318
0000012C 5F11                    		MOVU.W R1, R1
0000012E 6702                    		RTSD #08H
00000130                         _usb_creg_write_dvstctr:
                                 		.STACK	_usb_creg_write_dvstctr=12
                                 ;     319 
                                 ;     320 /******************************************************************************
                                 ;     321 Function Name   : usb_creg_write_dvstctr
                                 ;     322 Description     : Write data to the specified port's DVSTCTR register.
                                 ;     323 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     324                 : uint16_t  port  : USB port number.
                                 ;     325                 : uint16_t  data  : The value to write.
                                 ;     326 Return value    : none
                                 ;     327 ******************************************************************************/
                                 ;     328 void        usb_creg_write_dvstctr( USB_UTR_t *ptr, uint16_t port, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",328
00000130 6080                    		SUB #08H, R0
00000132 A009                    		MOV.L R1, 04H[R0]
00000134 900A                    		MOV.W R2, 02H[R0]
00000136 D303                    		MOV.W R3, [R0]
                                 ;     329 {
                                 ;     330     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",330
00000138 B809                    		MOVU.W 02H[R0], R1
0000013A 6101                    		CMP #00H, R1
0000013C 18                   S  		BNE L42
0000013D                         L41:	; bb4
                                 ;     331     {
                                 ;     332         ptr->ipp->DVSTCTR0.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",332
0000013D A809                    		MOV.L 04H[R0], R1
0000013F A891                    		MOV.L 08H[R1], R1
00000141 D40104                  		MOV.W [R0], 08H[R1]
00000144 6702                    		RTSD #08H
00000146                         L42:	; return
                                 ;     333     }
                                 ;     334 } /* eof usb_creg_write_dvstctr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",334
00000146 6702                    		RTSD #08H
00000148                         _usb_creg_rmw_dvstctr:
                                 		.STACK	_usb_creg_rmw_dvstctr=16
                                 ;     335 
                                 ;     336 /******************************************************************************
                                 ;     337 Function Name   : usb_creg_rmw_dvstctr
                                 ;     338 Description     : Read-modify-write the specified port's DVSTCTR.
                                 ;     339 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     340                 : uint16_t  port  : Port number
                                 ;     341                 : uint16_t  data  : The value to write.
                                 ;     342                 : uint16_t  bitptn: Bit pattern to read-modify-write.
                                 ;     343 Return value    : none
                                 ;     344 ******************************************************************************/
                                 ;     345 void        usb_creg_rmw_dvstctr( USB_UTR_t *ptr, uint16_t port, uint16_t data, uint16_t bitptn )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",345
00000148 60C0                    		SUB #0CH, R0
0000014A A081                    		MOV.L R1, 08H[R0]
0000014C 908A                    		MOV.W R2, 06H[R0]
0000014E 9083                    		MOV.W R3, 04H[R0]
00000150 900C                    		MOV.W R4, 02H[R0]
                                 ;     346 {
                                 ;     347     uint16_t    buf;
                                 ;     348 
                                 ;     349     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",349
00000152 B889                    		MOVU.W 06H[R0], R1
00000154 6101                    		CMP #00H, R1
00000156 21rr                    		BNE L48
00000158                         L44:	; bb6
                                 ;     350     {
                                 ;     351         buf = ptr->ipp->DVSTCTR0.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",351
00000158 A881                    		MOV.L 08H[R0], R1
0000015A A891                    		MOV.L 08H[R1], R1
0000015C D11004                  		MOV.W 08H[R1], [R0]
0000015F                         L45:	; bb6.split
                                 ;     352         buf &= ~bitptn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",352
0000015F 9809                    		MOV.W 02H[R0], R1
00000161 7E01                    		NOT R1
00000163 06D001                  		AND [R0].UW, R1
00000166 D301                    		MOV.W R1, [R0]
00000168                         L46:	; bb6.split1
                                 ;     353         buf |= (data & bitptn);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",353
00000168 B881                    		MOVU.W 04H[R0], R1
0000016A 06510101                		AND 02H[R0].W, R1
0000016E 06D401                  		OR [R0].UW, R1
00000171 D301                    		MOV.W R1, [R0]
00000173                         L47:	; bb6.split2
                                 ;     354         ptr->ipp->DVSTCTR0.WORD = buf;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",354
00000173 A881                    		MOV.L 08H[R0], R1
00000175 A891                    		MOV.L 08H[R1], R1
00000177 D40104                  		MOV.W [R0], 08H[R1]
0000017A 6703                    		RTSD #0CH
0000017C                         L48:	; return
                                 ;     355     }
                                 ;     356 } /* eof usb_creg_rmw_dvstctr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",356
0000017C 6703                    		RTSD #0CH
0000017E                         _usb_creg_clr_dvstctr:
                                 		.STACK	_usb_creg_clr_dvstctr=12
                                 ;     357 
                                 ;     358 /******************************************************************************
                                 ;     359 Function Name   : usb_creg_clr_dvstctr
                                 ;     360 Description     : Clear the bit pattern specified in argument, of the specified 
                                 ;     361                 : port's DVSTCTR register.
                                 ;     362 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     363                 : uint16_t  port  : Port number
                                 ;     364                 : uint16_t  bitptn: Bit pattern to read-modify-write.
                                 ;     365 Return value    : none
                                 ;     366 ******************************************************************************/
                                 ;     367 void        usb_creg_clr_dvstctr( USB_UTR_t *ptr, uint16_t port,uint16_t bitptn)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",367
0000017E 6080                    		SUB #08H, R0
00000180 A009                    		MOV.L R1, 04H[R0]
00000182 900A                    		MOV.W R2, 02H[R0]
00000184 D303                    		MOV.W R3, [R0]
                                 ;     368 {
                                 ;     369     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",369
00000186 B809                    		MOVU.W 02H[R0], R1
00000188 6101                    		CMP #00H, R1
0000018A 21rr                    		BNE L51
0000018C                         L50:	; bb4
                                 ;     370     {
                                 ;     371         ptr->ipp->DVSTCTR0.WORD &= ~bitptn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",371
0000018C DC01                    		MOV.W [R0], R1
0000018E 7E01                    		NOT R1
00000190 A80A                    		MOV.L 04H[R0], R2
00000192 A8A2                    		MOV.L 08H[R2], R2
00000194 06D12104                		AND 08H[R2].UW, R1
00000198 9121                    		MOV.W R1, 08H[R2]
0000019A 6702                    		RTSD #08H
0000019C                         L51:	; return
                                 ;     372     }
                                 ;     373 } /* eof usb_creg_clr_dvstctr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",373
0000019C 6702                    		RTSD #08H
0000019E                         _usb_creg_set_vbout:
                                 		.STACK	_usb_creg_set_vbout=12
                                 ;     374 
                                 ;     375 /******************************************************************************
                                 ;     376 Function Name   : usb_creg_set_vbout
                                 ;     377 Description     : Set specified port's VBOUT-bit in the DVSTCTR register.
                                 ;     378                 : (To output a "High" to pin VBOUT.) 
                                 ;     379 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     380                 : uint16_t  port  : Port number
                                 ;     381 Return value    : none
                                 ;     382 ******************************************************************************/
                                 ;     383 void    usb_creg_set_vbout( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",383
0000019E 6080                    		SUB #08H, R0
000001A0 A009                    		MOV.L R1, 04H[R0]
000001A2 900A                    		MOV.W R2, 02H[R0]
                                 ;     384 {
                                 ;     385     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",385
000001A4 B809                    		MOVU.W 02H[R0], R1
000001A6 6101                    		CMP #00H, R1
000001A8 21rr                    		BNE L54
000001AA                         L53:	; bb3
                                 ;     386     {
                                 ;     387       //  ptr->ipp->DVSTCTR0.WORD |= USB_VBUSEN;
                                 ;     388     	ptr->ipp->DVSTCTR0.WORD &= ~USB_VBUSEN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",388
000001AA A809                    		MOV.L 04H[R0], R1
000001AC A891                    		MOV.L 08H[R1], R1
000001AE B912                    		MOVU.W 08H[R1], R2
000001B0 7722FFFD00              		AND #0FDFFH, R2
000001B5 9112                    		MOV.W R2, 08H[R1]
000001B7 6702                    		RTSD #08H
000001B9                         L54:	; return
                                 ;     389     }
                                 ;     390 } /* eof usb_creg_set_vbout() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",390
000001B9 6702                    		RTSD #08H
000001BB                         _usb_creg_clr_vbout:
                                 		.STACK	_usb_creg_clr_vbout=12
                                 ;     391 
                                 ;     392 /******************************************************************************
                                 ;     393 Function Name   : usb_creg_clr_vbout
                                 ;     394 Description     : Clear specified port's VBOUT-bit in the DVSTCTR register.
                                 ;     395                 : (To output a "Low" to pin VBOUT.)
                                 ;     396 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     397                 : uint16_t  port  : Port number
                                 ;     398 Return value    : none
                                 ;     399 ******************************************************************************/
                                 ;     400 void    usb_creg_clr_vbout( USB_UTR_t *ptr, uint16_t port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",400
000001BB 6080                    		SUB #08H, R0
000001BD A009                    		MOV.L R1, 04H[R0]
000001BF 900A                    		MOV.W R2, 02H[R0]
                                 ;     401 {
                                 ;     402     if( USB_PORT0 == port )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",402
000001C1 B809                    		MOVU.W 02H[R0], R1
000001C3 6101                    		CMP #00H, R1
000001C5 21rr                    		BNE L57
000001C7                         L56:	; bb3
                                 ;     403     {
                                 ;     404     	ptr->ipp->DVSTCTR0.WORD |= USB_VBUSEN;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",404
000001C7 A809                    		MOV.L 04H[R0], R1
000001C9 A891                    		MOV.L 08H[R1], R1
000001CB 9912                    		MOV.W 08H[R1], R2
000001CD 7892                    		BSET #09H, R2
000001CF 9112                    		MOV.W R2, 08H[R1]
000001D1 6702                    		RTSD #08H
000001D3                         L57:	; return
                                 ;     405        // ptr->ipp->DVSTCTR0.WORD &= ~USB_VBUSEN;
                                 ;     406     }
                                 ;     407 } /* eof usb_creg_clr_vbout() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",407
000001D3 6702                    		RTSD #08H
000001D5                         _usb_creg_set_utst:
                                 		.STACK	_usb_creg_set_utst=12
                                 ;     408 
                                 ;     409 
                                 ;     410 #if (USB1_IPTYPE_PP == USB_HS_PP)
                                 ;     411 /******************************************************************************
                                 ;     412 Function Name   : usb_creg_set_utst
                                 ;     413 Description     : Not processed as the functionality is provided by R8A66597(ASSP).
                                 ;     414 Arguments       : USB_UTR_t *ptr  : 
                                 ;     415                 : uint16_t  data
                                 ;     416 Return value    : none
                                 ;     417 ******************************************************************************/
                                 ;     418 void    usb_creg_set_utst( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",418
000001D5 6080                    		SUB #08H, R0
000001D7 A009                    		MOV.L R1, 04H[R0]
000001D9 900A                    		MOV.W R2, 02H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",423
000001DB 6702                    		RTSD #08H
000001DD                         _usb_creg_set_ldrv:
                                 		.STACK	_usb_creg_set_ldrv=8
                                 ;     419 {
                                 ;     420 #if defined(BSP_MCU_RX71M)
                                 ;     421     ptr->ipp1->TESTMODE.WORD = data;
                                 ;     422 #endif /* defined(BSP_MCU_RX71M) */
                                 ;     423 } /* eof usb_creg_set_utst() */
                                 ;     424 
                                 ;     425 #endif /* (USB1_IPTYPE_PP == USB_HS_PP) */
                                 ;     426 
                                 ;     427 
                                 ;     428 /************/
                                 ;     429 /*  PINCFG  */
                                 ;     430 /************/
                                 ;     431 
                                 ;     432 /******************************************************************************
                                 ;     433 Function Name   : usb_creg_set_ldrv
                                 ;     434 Description     : Not processed as the functionality is provided by R8A66597(ASSP).
                                 ;     435 Arguments       : USB_UTR_t *ptr  : 
                                 ;     436 Return value    : none
                                 ;     437 ******************************************************************************/
                                 ;     438 void    usb_creg_set_ldrv( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",438
000001DD 6040                    		SUB #04H, R0
000001DF E301                    		MOV.L R1, [R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",440
000001E1 6701                    		RTSD #04H
000001E3                         _usb_creg_clr_ldrv:
                                 		.STACK	_usb_creg_clr_ldrv=8
                                 ;     439 {
                                 ;     440 } /* eof usb_creg_set_ldrv() */
                                 ;     441 
                                 ;     442 /******************************************************************************
                                 ;     443 Function Name   : usb_creg_clr_ldrv
                                 ;     444 Description     : Not processed as the functionality is provided by R8A66597(ASSP).
                                 ;     445 Arguments       : USB_UTR_t *ptr    : USB system internal data.
                                 ;     446 Return value    : none
                                 ;     447 ******************************************************************************/
                                 ;     448 void    usb_creg_clr_ldrv( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",448
000001E3 6040                    		SUB #04H, R0
000001E5 E301                    		MOV.L R1, [R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",450
000001E7 6701                    		RTSD #04H
000001E9                         _usb_creg_write_dmacfg:
                                 		.STACK	_usb_creg_write_dmacfg=12
                                 ;     449 {
                                 ;     450 } /* eof usb_creg_clr_ldrv() */
                                 ;     451 
                                 ;     452 /*********************************/
                                 ;     453 /*  DMA0CFG, DMA1CFG  for 597ASSP */
                                 ;     454 /*********************************/
                                 ;     455 
                                 ;     456 /******************************************************************************
                                 ;     457 Function Name   : usb_creg_write_dmacfg
                                 ;     458 Description     : Not processed as the functionality is provided by R8A66597(ASSP).
                                 ;     459 Arguments       : USB_UTR_t *ptr    : USB system internal data.
                                 ;     460 Return value    : none
                                 ;     461 ******************************************************************************/
                                 ;     462 void    usb_creg_write_dmacfg( USB_UTR_t *ptr, uint16_t pipemode, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",462
000001E9 6080                    		SUB #08H, R0
000001EB A009                    		MOV.L R1, 04H[R0]
000001ED 900A                    		MOV.W R2, 02H[R0]
000001EF D303                    		MOV.W R3, [R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",464
000001F1 6702                    		RTSD #08H
000001F3                         _usb_creg_read_fifo32:
                                 		.STACK	_usb_creg_read_fifo32=16
                                 ;     463 {
                                 ;     464 } /* eof usb_creg_write_dmacfg() */
                                 ;     465 
                                 ;     466 /***************************/
                                 ;     467 /*  CFIFO, D0FIFO, D1FIFO  */
                                 ;     468 /***************************/
                                 ;     469 /* FIFO Port Register */
                                 ;     470 
                                 ;     471 /******************************************************************************
                                 ;     472 Function Name   : usb_creg_read_fifo32
                                 ;     473 Description     : Data is read from the specified pipemode's FIFO register, 32-bits 
                                 ;     474                 : wide, corresponding to the specified PIPEMODE.
                                 ;     475 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     476                 : uint16_t  pipemode  : CUSE/D0DMA/D1DMA
                                 ;     477 Return value    : CFIFO/D0FIFO/D1FIFO content (32-bit)
                                 ;     478 ******************************************************************************/
                                 ;     479 uint32_t    usb_creg_read_fifo32( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",479
000001F3 60C0                    		SUB #0CH, R0
000001F5 A081                    		MOV.L R1, 08H[R0]
000001F7 908A                    		MOV.W R2, 06H[R0]
                                 ;     480 {
                                 ;     481 #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M)
                                 ;     482     uint32_t    data;
                                 ;     483     switch( pipemode )
                                 ;     484     {
                                 ;     485         case    USB_CUSE:
                                 ;     486             data = ptr->ipp1->CFIFO.LONG;
                                 ;     487             break;
                                 ;     488         case    USB_D0USE:
                                 ;     489 #ifdef USB_DTC_ENABLE
                                 ;     490         case    USB_D0DMA:
                                 ;     491 #endif    /* USB_DTC_ENABLE */
                                 ;     492             data = ptr->ipp1->D0FIFO.LONG;
                                 ;     493             break;
                                 ;     494         case    USB_D1USE:
                                 ;     495 #ifdef USB_DTC_ENABLE
                                 ;     496         case    USB_D1DMA:
                                 ;     497 #endif    /* USB_DTC_ENABLE */
                                 ;     498             data = ptr->ipp1->D1FIFO.LONG;
                                 ;     499             break;
                                 ;     500         default:
                                 ;     501             USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE2 );
                                 ;     502             break;
                                 ;     503     }
                                 ;     504     return data;
                                 ;     505 #else /* defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M) */
                                 ;     506     return (uint32_t)0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",506
000001F9 F80600                  		MOV.L #00000000H, [R0]
000001FC 6601                    		MOV.L #00000000H, R1
000001FE                         L63:	; entry.split
                                 ;     507 #endif  /* defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M) */
                                 ;     508 
                                 ;     509 } /* eof usb_creg_read_fifo32() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",509
000001FE 6703                    		RTSD #0CH
00000200                         _usb_creg_write_fifo32:
                                 		.STACK	_usb_creg_write_fifo32=16
                                 ;     510 
                                 ;     511 /******************************************************************************
                                 ;     512 Function Name   : usb_creg_write_fifo32
                                 ;     513 Description     : Data is written to the specified pipemode's FIFO register, 32-bits 
                                 ;     514                 : wide, corresponding to the specified PIPEMODE.
                                 ;     515 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     516                 : uint16_t  pipemode  : CUSE/D0DMA/D1DMA
                                 ;     517                 : uint32_t  data      : The value to write.
                                 ;     518 Return value    : none
                                 ;     519 ******************************************************************************/
                                 ;     520 void    usb_creg_write_fifo32( USB_UTR_t *ptr, uint16_t pipemode, uint32_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",520
00000200 60C0                    		SUB #0CH, R0
00000202 A081                    		MOV.L R1, 08H[R0]
00000204 908A                    		MOV.W R2, 06H[R0]
00000206 E303                    		MOV.L R3, [R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",545
00000208 6703                    		RTSD #0CH
0000020A                         _usb_creg_read_fifo16:
                                 		.STACK	_usb_creg_read_fifo16=16
                                 ;     521 {
                                 ;     522 #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M)
                                 ;     523     switch( pipemode )
                                 ;     524     {
                                 ;     525         case    USB_CUSE:
                                 ;     526             ptr->ipp1->CFIFO.LONG = data;
                                 ;     527             break;
                                 ;     528         case    USB_D0USE:
                                 ;     529 #ifdef USB_DTC_ENABLE
                                 ;     530         case    USB_D0DMA:
                                 ;     531 #endif    /* USB_DTC_ENABLE */
                                 ;     532             ptr->ipp1->D0FIFO.LONG = data;
                                 ;     533             break;
                                 ;     534         case    USB_D1USE:
                                 ;     535 #ifdef USB_DTC_ENABLE
                                 ;     536         case    USB_D1DMA:
                                 ;     537 #endif    /* USB_DTC_ENABLE */
                                 ;     538             ptr->ipp1->D1FIFO.LONG = data;
                                 ;     539             break;
                                 ;     540         default:
                                 ;     541             USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE3 );
                                 ;     542             break;
                                 ;     543     }
                                 ;     544 #endif  /* defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M) */
                                 ;     545 } /* eof usb_creg_write_fifo32() */
                                 ;     546 
                                 ;     547 /******************************************************************************
                                 ;     548 Function Name   : usb_creg_read_fifo16
                                 ;     549 Description     : Data is read from the specified pipemode's FIFO register, 16-bits 
                                 ;     550                 : wide, corresponding to the specified PIPEMODE.
                                 ;     551 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     552                 : uint16_t  pipemode  : CUSE/D0DMA/D1DMA
                                 ;     553 Return value    : CFIFO/D0FIFO/D1FIFO content (16-bit)
                                 ;     554 ******************************************************************************/
                                 ;     555 uint16_t    usb_creg_read_fifo16( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",555
0000020A 60C0                    		SUB #0CH, R0
0000020C A081                    		MOV.L R1, 08H[R0]
0000020E 908A                    		MOV.W R2, 06H[R0]
                                 ;     556 {
                                 ;     557     uint16_t    data;
                                 ;     558     if (ptr -> ip  == USB_USBIP_0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",558
00000210 A881                    		MOV.L 08H[R0], R1
00000212 B991                    		MOVU.W 0CH[R1], R1
00000214 6101                    		CMP #00H, R1
00000216 21rr                    		BNE L73
00000218                         L66:	; bb4
                                 ;     559     {
                                 ;     560         switch( pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",560
00000218 B889                    		MOVU.W 06H[R0], R1
0000021A 6131                    		CMP #03H, R1
0000021C 20rr                    		BEQ L71
0000021E                         L67:	; bb4
0000021E 6111                    		CMP #01H, R1
00000220 20rr                    		BEQ L70
00000222                         L68:	; bb4
00000222 6101                    		CMP #00H, R1
00000224 21rr                    		BNE L72
00000226                         L69:	; bb7
                                 ;     561         {
                                 ;     562             case    USB_CUSE:
                                 ;     563                 data = ptr->ipp->CFIFO.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",563
00000226 A881                    		MOV.L 08H[R0], R1
00000228 A891                    		MOV.L 08H[R1], R1
0000022A D5100A01                		MOV.W 14H[R1], 02H[R0]
0000022E 2Err                 B  		BRA L73
00000230                         L70:	; bb15
                                 ;     564                 break;
                                 ;     565             case    USB_D0USE:
                                 ;     566 #ifdef USB_DTC_ENABLE
                                 ;     567             case    USB_D0DMA:
                                 ;     568 #endif    /* USB_DTC_ENABLE */
                                 ;     569                 data = ptr->ipp->D0FIFO.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",569
00000230 A881                    		MOV.L 08H[R0], R1
00000232 A891                    		MOV.L 08H[R1], R1
00000234 D5100C01                		MOV.W 18H[R1], 02H[R0]
00000238 2Err                 B  		BRA L73
0000023A                         L71:	; bb23
                                 ;     570                 break;
                                 ;     571             case    USB_D1USE:
                                 ;     572 #ifdef USB_DTC_ENABLE
                                 ;     573             case    USB_D1DMA:
                                 ;     574 #endif    /* USB_DTC_ENABLE */
                                 ;     575                 data = ptr->ipp->D1FIFO.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",575
0000023A A881                    		MOV.L 08H[R0], R1
0000023C A891                    		MOV.L 08H[R1], R1
0000023E D5100E01                		MOV.W 1CH[R1], 02H[R0]
00000242 08                   S  		BRA L73
00000243                         L72:	; bb31
00000243 FB1A0408                		MOV.L #00000804H, R1
                                 ;     576                 break;
                                 ;     577             default:
                                 ;     578                 USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE4 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",578
00000247 05rrrrrr             A  		BSR _R_usb_cstd_debug_hook
0000024B                         L73:	; bb39
                                 ;     579                 break;
                                 ;     580         }
                                 ;     581     }
                                 ;     582 #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M)
                                 ;     583     else if ( ptr->ip  == USB_USBIP_1 )
                                 ;     584     {
                                 ;     585         switch( pipemode )
                                 ;     586         {
                                 ;     587 #if USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP
                                 ;     588             case    USB_CUSE:
                                 ;     589                 data = ptr->ipp1->CFIFO.WORD.H;
                                 ;     590                 break;
                                 ;     591             case    USB_D0USE:
                                 ;     592 #ifdef USB_DTC_ENABLE
                                 ;     593             case    USB_D0DMA:
                                 ;     594 #endif    /* USB_DTC_ENABLE */
                                 ;     595                 data = ptr->ipp1->D0FIFO.WORD.H;
                                 ;     596                 break;
                                 ;     597             case    USB_D1USE:
                                 ;     598 #ifdef USB_DTC_ENABLE
                                 ;     599             case    USB_D1DMA:
                                 ;     600 #endif    /* USB_DTC_ENABLE */
                                 ;     601                 data = ptr->ipp1->D1FIFO.WORD.H;
                                 ;     602                 break;
                                 ;     603 #else /* USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP */
                                 ;     604             case    USB_CUSE:
                                 ;     605                 data = ptr->ipp1->CFIFO.WORD.L;
                                 ;     606                 break;
                                 ;     607             case    USB_D0USE:
                                 ;     608 #ifdef USB_DTC_ENABLE
                                 ;     609             case    USB_D0DMA:
                                 ;     610 #endif    /* USB_DTC_ENABLE */
                                 ;     611                 data = ptr->ipp1->D0FIFO.WORD.L;
                                 ;     612                 break;
                                 ;     613             case    USB_D1USE:
                                 ;     614 #ifdef USB_DTC_ENABLE
                                 ;     615             case    USB_D1DMA:
                                 ;     616 #endif    /* USB_DTC_ENABLE */
                                 ;     617                 data = ptr->ipp1->D1FIFO.WORD.L;
                                 ;     618                 break;
                                 ;     619 #endif /* USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP */
                                 ;     620             default:
                                 ;     621                 USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE5 );
                                 ;     622                 break;
                                 ;     623         }
                                 ;     624     }
                                 ;     625 #endif  /* defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M) */
                                 ;     626     return data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",626
0000024B D5000102                		MOV.W 02H[R0], 04H[R0]
0000024F 9881                    		MOV.W 04H[R0], R1
00000251                         L74:	; bb39.split
                                 ;     627 } /* eof usb_creg_read_fifo16() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",627
00000251 5F11                    		MOVU.W R1, R1
00000253 6703                    		RTSD #0CH
00000255                         _usb_creg_write_fifo16:
                                 		.STACK	_usb_creg_write_fifo16=12
                                 ;     628 
                                 ;     629 /******************************************************************************
                                 ;     630 Function Name   : usb_creg_write_fifo16
                                 ;     631 Description     : Data is written to the specified pipemode's FIFO register, 16-bits 
                                 ;     632                 : wide, corresponding to the specified PIPEMODE.
                                 ;     633 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     634                 : uint16_t  pipemode  : CUSE/D0DMA/D1DMA
                                 ;     635                 : uint16_t  data      : The value to write.
                                 ;     636 Return value    : none
                                 ;     637 ******************************************************************************/
                                 ;     638 void    usb_creg_write_fifo16( USB_UTR_t *ptr, uint16_t pipemode, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",638
00000255 6080                    		SUB #08H, R0
00000257 A009                    		MOV.L R1, 04H[R0]
00000259 900A                    		MOV.W R2, 02H[R0]
0000025B D303                    		MOV.W R3, [R0]
                                 ;     639 {
                                 ;     640     if ( ptr->ip == USB_USBIP_0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",640
0000025D A809                    		MOV.L 04H[R0], R1
0000025F B991                    		MOVU.W 0CH[R1], R1
00000261 6101                    		CMP #00H, R1
00000263 21rr                    		BNE L83
00000265                         L76:	; bb4
                                 ;     641     {
                                 ;     642         switch( pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",642
00000265 B809                    		MOVU.W 02H[R0], R1
00000267 6131                    		CMP #03H, R1
00000269 20rr                    		BEQ L81
0000026B                         L77:	; bb4
0000026B 6111                    		CMP #01H, R1
0000026D 20rr                    		BEQ L80
0000026F                         L78:	; bb4
0000026F 6101                    		CMP #00H, R1
00000271 21rr                    		BNE L82
00000273                         L79:	; bb6
                                 ;     643         {
                                 ;     644             case    USB_CUSE:
                                 ;     645                 ptr->ipp->CFIFO.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",645
00000273 A809                    		MOV.L 04H[R0], R1
00000275 A891                    		MOV.L 08H[R1], R1
00000277 D4010A                  		MOV.W [R0], 14H[R1]
0000027A 6702                    		RTSD #08H
0000027C                         L80:	; bb14
                                 ;     646                 break;
                                 ;     647             case    USB_D0USE:
                                 ;     648 #ifdef USB_DTC_ENABLE
                                 ;     649             case    USB_D0DMA:
                                 ;     650 #endif    /* USB_DTC_ENABLE */
                                 ;     651                 ptr->ipp->D0FIFO.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",651
0000027C A809                    		MOV.L 04H[R0], R1
0000027E A891                    		MOV.L 08H[R1], R1
00000280 D4010C                  		MOV.W [R0], 18H[R1]
00000283 6702                    		RTSD #08H
00000285                         L81:	; bb22
                                 ;     652                 break;
                                 ;     653             case    USB_D1USE:
                                 ;     654 #ifdef USB_DTC_ENABLE
                                 ;     655             case    USB_D1DMA:
                                 ;     656 #endif    /* USB_DTC_ENABLE */
                                 ;     657                 ptr->ipp->D1FIFO.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",657
00000285 A809                    		MOV.L 04H[R0], R1
00000287 A891                    		MOV.L 08H[R1], R1
00000289 D4010E                  		MOV.W [R0], 1CH[R1]
0000028C 6702                    		RTSD #08H
0000028E                         L82:	; bb30
0000028E FB1A0608                		MOV.L #00000806H, R1
                                 ;     658                 break;
                                 ;     659             default:
                                 ;     660                 USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE6 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",660
00000292 05rrrrrr             A  		BSR _R_usb_cstd_debug_hook
00000296 6702                    		RTSD #08H
00000298                         L83:	; return
                                 ;     661                 break;
                                 ;     662         }
                                 ;     663     }
                                 ;     664 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;     665     else if ( ptr->ip  == USB_USBIP_1 )
                                 ;     666     {
                                 ;     667         switch( pipemode )
                                 ;     668         {
                                 ;     669 #if USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP
                                 ;     670             case    USB_CUSE:
                                 ;     671                 ptr->ipp1->CFIFO.WORD.H = data;
                                 ;     672                 break;
                                 ;     673             case    USB_D0USE:
                                 ;     674 #ifdef USB_DTC_ENABLE
                                 ;     675             case    USB_D0DMA:
                                 ;     676 #endif    /* USB_DTC_ENABLE */
                                 ;     677                 ptr->ipp1->D0FIFO.WORD.H = data;
                                 ;     678                 break;
                                 ;     679             case    USB_D1USE:
                                 ;     680 #ifdef USB_DTC_ENABLE
                                 ;     681             case    USB_D1DMA:
                                 ;     682 #endif    /* USB_DTC_ENABLE */
                                 ;     683                 ptr->ipp1->D1FIFO.WORD.H = data;
                                 ;     684                 break;
                                 ;     685 #else /* USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP */
                                 ;     686             case    USB_CUSE:
                                 ;     687                 ptr->ipp1->CFIFO.WORD.L = data;
                                 ;     688                 break;
                                 ;     689             case    USB_D0USE:
                                 ;     690 #ifdef USB_DTC_ENABLE
                                 ;     691             case    USB_D0DMA:
                                 ;     692 #endif    /* USB_DTC_ENABLE */
                                 ;     693                 ptr->ipp1->D0FIFO.WORD.L = data;
                                 ;     694                 break;
                                 ;     695             case    USB_D1USE:
                                 ;     696 #ifdef USB_DTC_ENABLE
                                 ;     697             case    USB_D1DMA:
                                 ;     698 #endif    /* USB_DTC_ENABLE */
                                 ;     699                 ptr->ipp1->D1FIFO.WORD.L = data;
                                 ;     700                 break;
                                 ;     701 #endif /* USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP */
                                 ;     702             default:
                                 ;     703                 USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE7 );
                                 ;     704                 break;
                                 ;     705         }
                                 ;     706     }
                                 ;     707 #endif /* #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M) */
                                 ;     708 } /* eof usb_creg_write_fifo16() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",708
00000298 6702                    		RTSD #08H
0000029A                         _usb_creg_read_fifo8:
                                 		.STACK	_usb_creg_read_fifo8=12
                                 ;     709 
                                 ;     710 /******************************************************************************
                                 ;     711 Function Name   : usb_creg_read_fifo8
                                 ;     712 Description     : Data is read from the specified pipemode's FIFO register, 8-bits 
                                 ;     713                 : wide, corresponding to the specified PIPEMODE.
                                 ;     714 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     715                 : uint16_t  pipemode : CUSE/D0DMA/D1DMA.
                                 ;     716 Return value    : CFIFO/D0FIFO/D1FIFO(8-bit)
                                 ;     717 ******************************************************************************/
                                 ;     718 uint8_t     usb_creg_read_fifo8( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",718
0000029A 6080                    		SUB #08H, R0
0000029C A009                    		MOV.L R1, 04H[R0]
0000029E 900A                    		MOV.W R2, 02H[R0]
                                 ;     719 {
                                 ;     720     uint8_t buf;
                                 ;     721     if ( ptr->ip == USB_USBIP_0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",721
000002A0 A809                    		MOV.L 04H[R0], R1
000002A2 B991                    		MOVU.W 0CH[R1], R1
000002A4 6101                    		CMP #00H, R1
000002A6 21rr                    		BNE L92
000002A8                         L85:	; bb4
                                 ;     722     {
                                 ;     723         switch( pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",723
000002A8 B809                    		MOVU.W 02H[R0], R1
000002AA 6131                    		CMP #03H, R1
000002AC 20rr                    		BEQ L90
000002AE                         L86:	; bb4
000002AE 6111                    		CMP #01H, R1
000002B0 20rr                    		BEQ L89
000002B2                         L87:	; bb4
000002B2 6101                    		CMP #00H, R1
000002B4 21rr                    		BNE L91
000002B6                         L88:	; bb7
                                 ;     724         {
                                 ;     725             case    USB_CUSE:
                                 ;     726                 buf = ptr->ipp->CFIFO.BYTE.L;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",726
000002B6 A809                    		MOV.L 04H[R0], R1
000002B8 A891                    		MOV.L 08H[R1], R1
000002BA C11014                  		MOV.B 14H[R1], [R0]
000002BD 2Err                 B  		BRA L92
000002BF                         L89:	; bb17
                                 ;     727                 break;
                                 ;     728             case    USB_D0USE:
                                 ;     729 #ifdef USB_DTC_ENABLE
                                 ;     730             case    USB_D0DMA:
                                 ;     731 #endif    /* USB_DTC_ENABLE */
                                 ;     732                 buf = ptr->ipp->D0FIFO.BYTE.L;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",732
000002BF A809                    		MOV.L 04H[R0], R1
000002C1 A891                    		MOV.L 08H[R1], R1
000002C3 C11018                  		MOV.B 18H[R1], [R0]
000002C6 2Err                 B  		BRA L92
000002C8                         L90:	; bb27
                                 ;     733                 break;
                                 ;     734             case    USB_D1USE:
                                 ;     735 #ifdef USB_DTC_ENABLE
                                 ;     736             case    USB_D1DMA:
                                 ;     737 #endif    /* USB_DTC_ENABLE */
                                 ;     738                 buf = ptr->ipp->D1FIFO.BYTE.L;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",738
000002C8 A809                    		MOV.L 04H[R0], R1
000002CA A891                    		MOV.L 08H[R1], R1
000002CC C1101C                  		MOV.B 1CH[R1], [R0]
000002CF 08                   S  		BRA L92
000002D0                         L91:	; bb37
000002D0 FB1A0808                		MOV.L #00000808H, R1
                                 ;     739                 break;
                                 ;     740             default:
                                 ;     741                 USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE8 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",741
000002D4 05rrrrrr             A  		BSR _R_usb_cstd_debug_hook
000002D8                         L92:	; bb45
                                 ;     742                 break;
                                 ;     743         }
                                 ;     744     }
                                 ;     745 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;     746     else if ( ptr->ip == USB_USBIP_1 )
                                 ;     747     {
                                 ;     748         switch( pipemode )
                                 ;     749         {
                                 ;     750 #if USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP
                                 ;     751             case    USB_CUSE:
                                 ;     752                 buf = ptr->ipp1->CFIFO.BYTE.HH;
                                 ;     753                 break;
                                 ;     754             case    USB_D0USE:
                                 ;     755 #ifdef USB_DTC_ENABLE
                                 ;     756             case    USB_D0DMA:
                                 ;     757 #endif    /* USB_DTC_ENABLE */
                                 ;     758                 buf = ptr->ipp1->D0FIFO.BYTE.HH;
                                 ;     759                 break;
                                 ;     760             case    USB_D1USE:
                                 ;     761 #ifdef USB_DTC_ENABLE
                                 ;     762             case    USB_D1DMA:
                                 ;     763 #endif    /* USB_DTC_ENABLE */
                                 ;     764                 buf = ptr->ipp1->D1FIFO.BYTE.HH;
                                 ;     765                 break;
                                 ;     766 #else /* USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP */
                                 ;     767             case    USB_CUSE:
                                 ;     768                 buf = ptr->ipp1->CFIFO.BYTE.LL;
                                 ;     769                 break;
                                 ;     770             case    USB_D0USE:
                                 ;     771 #ifdef USB_DTC_ENABLE
                                 ;     772             case    USB_D0DMA:
                                 ;     773 #endif    /* USB_DTC_ENABLE */
                                 ;     774                 buf = ptr->ipp1->D0FIFO.BYTE.LL;
                                 ;     775                 break;
                                 ;     776             case    USB_D1USE:
                                 ;     777 #ifdef USB_DTC_ENABLE
                                 ;     778             case    USB_D1DMA:
                                 ;     779 #endif    /* USB_DTC_ENABLE */
                                 ;     780                 buf = ptr->ipp1->D1FIFO.BYTE.LL;
                                 ;     781                 break;
                                 ;     782 #endif /* USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP */
                                 ;     783             default:
                                 ;     784                 USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE9 );
                                 ;     785                 break;
                                 ;     786         }
                                 ;     787     }
                                 ;     788 #endif /* #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M) */
                                 ;     789     return  buf;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",789
000002D8 C40001                  		MOV.B [R0], 01H[R0]
000002DB B009                    		MOVU.B 01H[R0], R1
000002DD                         L93:	; bb45.split
                                 ;     790 } /* eof usb_creg_read_fifo8() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",790
000002DD 5B11                    		MOVU.B R1, R1
000002DF 6702                    		RTSD #08H
000002E1                         _usb_creg_write_fifo8:
                                 		.STACK	_usb_creg_write_fifo8=12
                                 ;     791 
                                 ;     792 /******************************************************************************
                                 ;     793 Function Name   : usb_creg_write_fifo8
                                 ;     794 Description     : Data is written to the specified pipemode's FIFO register, 8-bits 
                                 ;     795                 : wide, corresponding to the specified PIPEMODE.
                                 ;     796 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     797                 : uint16_t  pipdemode   : CUSE/D0DMA/D1DMA
                                 ;     798                 : uint8_t   data        : The value to write.
                                 ;     799 Return value    : none
                                 ;     800 ******************************************************************************/
                                 ;     801 void        usb_creg_write_fifo8( USB_UTR_t *ptr, uint16_t pipemode, uint8_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",801
000002E1 6080                    		SUB #08H, R0
000002E3 A009                    		MOV.L R1, 04H[R0]
000002E5 900A                    		MOV.W R2, 02H[R0]
000002E7 800B                    		MOV.B R3, 01H[R0]
                                 ;     802 {
                                 ;     803     if ( ptr->ip == USB_USBIP_0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",803
000002E9 A809                    		MOV.L 04H[R0], R1
000002EB B991                    		MOVU.W 0CH[R1], R1
000002ED 6101                    		CMP #00H, R1
000002EF 21rr                    		BNE L102
000002F1                         L95:	; bb4
                                 ;     804     {
                                 ;     805         switch( pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",805
000002F1 B809                    		MOVU.W 02H[R0], R1
000002F3 6131                    		CMP #03H, R1
000002F5 20rr                    		BEQ L100
000002F7                         L96:	; bb4
000002F7 6111                    		CMP #01H, R1
000002F9 20rr                    		BEQ L99
000002FB                         L97:	; bb4
000002FB 6101                    		CMP #00H, R1
000002FD 21rr                    		BNE L101
000002FF                         L98:	; bb6
                                 ;     806         {
                                 ;     807             case    USB_CUSE:
                                 ;     808                 ptr->ipp->CFIFO.BYTE.L = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",808
000002FF A809                    		MOV.L 04H[R0], R1
00000301 A891                    		MOV.L 08H[R1], R1
00000303 C5010114                		MOV.B 01H[R0], 14H[R1]
00000307 6702                    		RTSD #08H
00000309                         L99:	; bb16
                                 ;     809                 break;
                                 ;     810             case    USB_D0USE:
                                 ;     811 #ifdef USB_DTC_ENABLE
                                 ;     812             case    USB_D0DMA:
                                 ;     813 #endif    /* USB_DTC_ENABLE */
                                 ;     814                 ptr->ipp->D0FIFO.BYTE.L = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",814
00000309 A809                    		MOV.L 04H[R0], R1
0000030B A891                    		MOV.L 08H[R1], R1
0000030D C5010118                		MOV.B 01H[R0], 18H[R1]
00000311 6702                    		RTSD #08H
00000313                         L100:	; bb26
                                 ;     815                 break;
                                 ;     816             case    USB_D1USE:
                                 ;     817 #ifdef USB_DTC_ENABLE
                                 ;     818             case    USB_D1DMA:
                                 ;     819 #endif    /* USB_DTC_ENABLE */
                                 ;     820                 ptr->ipp->D1FIFO.BYTE.L = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",820
00000313 A809                    		MOV.L 04H[R0], R1
00000315 A891                    		MOV.L 08H[R1], R1
00000317 C501011C                		MOV.B 01H[R0], 1CH[R1]
0000031B 6702                    		RTSD #08H
0000031D                         L101:	; bb36
0000031D FB1A0A08                		MOV.L #0000080AH, R1
                                 ;     821                 break;
                                 ;     822             default:
                                 ;     823                 USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE10 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",823
00000321 05rrrrrr             A  		BSR _R_usb_cstd_debug_hook
00000325 6702                    		RTSD #08H
00000327                         L102:	; return
                                 ;     824                 break;
                                 ;     825         }
                                 ;     826     }
                                 ;     827 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;     828     else if ( ptr->ip == USB_USBIP_1 )
                                 ;     829     {
                                 ;     830         switch( pipemode )
                                 ;     831         {
                                 ;     832 #if USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP
                                 ;     833             case    USB_CUSE:
                                 ;     834                 ptr->ipp1->CFIFO.BYTE.HH = data;
                                 ;     835                 break;
                                 ;     836             case    USB_D0USE:
                                 ;     837 #ifdef USB_DTC_ENABLE
                                 ;     838             case    USB_D0DMA:
                                 ;     839 #endif    /* USB_DTC_ENABLE */
                                 ;     840                 ptr->ipp1->D0FIFO.BYTE.HH = data;
                                 ;     841                 break;
                                 ;     842             case    USB_D1USE:
                                 ;     843 #ifdef USB_DTC_ENABLE
                                 ;     844             case    USB_D1DMA:
                                 ;     845 #endif    /* USB_DTC_ENABLE */
                                 ;     846                 ptr->ipp1->D1FIFO.BYTE.HH = data;
                                 ;     847                 break;
                                 ;     848 #else /* USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP */
                                 ;     849             case    USB_CUSE:
                                 ;     850                 ptr->ipp1->CFIFO.BYTE.LL = data;
                                 ;     851                 break;
                                 ;     852             case    USB_D0USE:
                                 ;     853 #ifdef USB_DTC_ENABLE
                                 ;     854             case    USB_D0DMA:
                                 ;     855 #endif    /* USB_DTC_ENABLE */
                                 ;     856                 ptr->ipp1->D0FIFO.BYTE.LL = data;
                                 ;     857                 break;
                                 ;     858             case    USB_D1USE:
                                 ;     859 #ifdef USB_DTC_ENABLE
                                 ;     860             case    USB_D1DMA:
                                 ;     861 #endif    /* USB_DTC_ENABLE */
                                 ;     862                 ptr->ipp1->D1FIFO.BYTE.LL = data;
                                 ;     863                 break;
                                 ;     864 #endif /* USB_CPUBYTE_PP == USB_BYTE_LITTLE_PP */
                                 ;     865             default:
                                 ;     866                 USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE11 );
                                 ;     867                 break;
                                 ;     868         }
                                 ;     869     }
                                 ;     870 #endif /* #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M) */
                                 ;     871 } /* eof usb_creg_write_fifo8() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",871
00000327 6702                    		RTSD #08H
00000329                         __$usb_creg_get_fifosel_adr:
                                 		.STACK	__$usb_creg_get_fifosel_adr=20
                                 ;     872 
                                 ;     873 /**********************************/
                                 ;     874 /* CFIFOSEL, D0FIFOSEL, D1FIFOSEL */
                                 ;     875 /**********************************/
                                 ;     876 /* FIFO Port Select Register */
                                 ;     877 
                                 ;     878 /******************************************************************************
                                 ;     879 Function Name   : usb_creg_get_fifosel_adr
                                 ;     880 Description     : Returns the *address* of the FIFOSEL register corresponding to 
                                 ;     881                 : specified PIPEMODE.
                                 ;     882 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;     883                 : uint16_t  pipemode  : CUSE/D0DMA/D1DMA
                                 ;     884 Return value    : none
                                 ;     885 ******************************************************************************/
                                 ;     886 static  void    *usb_creg_get_fifosel_adr( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",886
00000329 7100F0                  		ADD #0FFFFFFF0H, R0
0000032C A089                    		MOV.L R1, 0CH[R0]
0000032E 910A                    		MOV.W R2, 0AH[R0]
                                 ;     887 {
                                 ;     888     void    *reg_p;
                                 ;     889 
                                 ;     890     switch( pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",890
00000330 B909                    		MOVU.W 0AH[R0], R1
00000332 6131                    		CMP #03H, R1
00000334 20rr                    		BEQ L108
00000336                         L104:	; entry
00000336 6111                    		CMP #01H, R1
00000338 20rr                    		BEQ L107
0000033A                         L105:	; entry
0000033A 6101                    		CMP #00H, R1
0000033C 21rr                    		BNE L109
0000033E                         L106:	; bb
                                 ;     891     {
                                 ;     892         case    USB_CUSE:
                                 ;     893             reg_p = (void *)&(ptr->ipp->CFIFOSEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",893
0000033E A889                    		MOV.L 0CH[R0], R1
00000340 A891                    		MOV.L 08H[R1], R1
00000342 711120                  		ADD #20H, R1
00000345 E301                    		MOV.L R1, [R0]
00000347 2Err                 B  		BRA L110
00000349                         L107:	; bb12
                                 ;     894             break;
                                 ;     895         case    USB_D0USE:
                                 ;     896 #ifdef USB_DTC_ENABLE
                                 ;     897         case    USB_D0DMA:
                                 ;     898 #endif    /* USB_DTC_ENABLE */
                                 ;     899             reg_p = (void *)&(ptr->ipp->D0FIFOSEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",899
00000349 A889                    		MOV.L 0CH[R0], R1
0000034B A891                    		MOV.L 08H[R1], R1
0000034D 711128                  		ADD #28H, R1
00000350 E301                    		MOV.L R1, [R0]
00000352 2Err                 B  		BRA L110
00000354                         L108:	; bb19
                                 ;     900             break;
                                 ;     901         case    USB_D1USE:
                                 ;     902 #ifdef USB_DTC_ENABLE
                                 ;     903         case    USB_D1DMA:
                                 ;     904 #endif    /* USB_DTC_ENABLE */
                                 ;     905             reg_p = (void *)&(ptr->ipp->D1FIFOSEL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",905
00000354 A889                    		MOV.L 0CH[R0], R1
00000356 A891                    		MOV.L 08H[R1], R1
00000358 71112C                  		ADD #2CH, R1
0000035B E301                    		MOV.L R1, [R0]
0000035D 08                   S  		BRA L110
0000035E                         L109:	; bb26
0000035E FB1A0C08                		MOV.L #0000080CH, R1
                                 ;     906             break;
                                 ;     907         default:
                                 ;     908             USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE12 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",908
00000362 05rrrrrr             A  		BSR _R_usb_cstd_debug_hook
00000366                         L110:	; bb27
                                 ;     909             break;
                                 ;     910     }
                                 ;     911     return reg_p;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",911
00000366 EC01                    		MOV.L [R0], R1
00000368 A009                    		MOV.L R1, 04H[R0]
0000036A                         L111:	; bb27.split
                                 ;     912 } /* eof usb_creg_get_fifosel_adr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",912
0000036A 6704                    		RTSD #10H
0000036C                         _usb_creg_read_fifosel:
                                 		.STACK	_usb_creg_read_fifosel=16
                                 ;     913 
                                 ;     914 /******************************************************************************
                                 ;     915 Function Name   : usb_creg_read_fifosel
                                 ;     916 Description     : Returns the value of the specified pipemode's FIFOSEL register.
                                 ;     917 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;     918                 : uint16_t  pipemode  : CUSE/D0DMA/D1DMA
                                 ;     919 Return value    : FIFOSEL content
                                 ;     920 ******************************************************************************/
                                 ;     921 uint16_t    usb_creg_read_fifosel( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",921
0000036C 60C0                    		SUB #0CH, R0
0000036E A081                    		MOV.L R1, 08H[R0]
00000370 908A                    		MOV.W R2, 06H[R0]
                                 ;     922 {
                                 ;     923     volatile uint16_t    *reg_p;
                                 ;     924 
                                 ;     925     reg_p = (uint16_t *)usb_creg_get_fifosel_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",925
00000372 B88A                    		MOVU.W 06H[R0], R2
00000374 A881                    		MOV.L 08H[R0], R1
00000376 39rrrr               W  		BSR __$usb_creg_get_fifosel_adr
00000379 E301                    		MOV.L R1, [R0]
0000037B                         L113:	; entry.split
                                 ;     926 
                                 ;     927     return *reg_p;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",927
0000037B EC01                    		MOV.L [R0], R1
0000037D D41002                  		MOV.W [R1], 04H[R0]
00000380 9881                    		MOV.W 04H[R0], R1
00000382                         L114:	; entry.split1
                                 ;     928 } /* eof usb_creg_read_fifosel() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",928
00000382 5F11                    		MOVU.W R1, R1
00000384 6703                    		RTSD #0CH
00000386                         _usb_creg_write_fifosel:
                                 		.STACK	_usb_creg_write_fifosel=16
                                 ;     929 
                                 ;     930 /******************************************************************************
                                 ;     931 Function Name   : usb_creg_write_fifosel
                                 ;     932 Description     : Data is written to the specified pipemode's FIFOSEL register, 8-bits 
                                 ;     933                 : wide, corresponding to the specified PIPEMODE.
                                 ;     934 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;     935                 : uint16_t pipemode  : CUSE/D0DMA/D1DMA
                                 ;     936                 : uint16_t data     : The value to write.
                                 ;     937 Return value    : none
                                 ;     938 ******************************************************************************/
                                 ;     939 void    usb_creg_write_fifosel( USB_UTR_t *ptr, uint16_t pipemode, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",939
00000386 60C0                    		SUB #0CH, R0
00000388 A081                    		MOV.L R1, 08H[R0]
0000038A 908A                    		MOV.W R2, 06H[R0]
0000038C 9083                    		MOV.W R3, 04H[R0]
                                 ;     940 {
                                 ;     941     volatile uint16_t    *reg_p;
                                 ;     942 
                                 ;     943     reg_p = (uint16_t *)usb_creg_get_fifosel_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",943
0000038E B88A                    		MOVU.W 06H[R0], R2
00000390 A881                    		MOV.L 08H[R0], R1
00000392 39rrrr               W  		BSR __$usb_creg_get_fifosel_adr
00000395 E301                    		MOV.L R1, [R0]
00000397                         L116:	; entry.split
                                 ;     944 
                                 ;     945     *reg_p = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",945
00000397 9881                    		MOV.W 04H[R0], R1
00000399 EC02                    		MOV.L [R0], R2
0000039B D321                    		MOV.W R1, [R2]
0000039D 6703                    		RTSD #0CH
0000039F                         _usb_creg_rmw_fifosel:
                                 		.STACK	_usb_creg_rmw_fifosel=24
                                 ;     946 } /* eof usb_creg_write_fifosel() */
                                 ;     947 
                                 ;     948 /******************************************************************************
                                 ;     949 Function Name   : usb_creg_rmw_fifosel
                                 ;     950 Description     : Data is written to the specified pipemode's FIFOSEL register 
                                 ;     951                 : (the FIFOSEL corresponding to the specified PIPEMODE), using 
                                 ;     952                 : read-modify-write.
                                 ;     953 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;     954                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;     955                 : uint16_t data     : The value to write.
                                 ;     956                 : uint16_t bitptn   : bitptn: Bit pattern to read-modify-write.
                                 ;     957 Return value    : none
                                 ;     958 ******************************************************************************/
                                 ;     959 void    usb_creg_rmw_fifosel( USB_UTR_t *ptr, uint16_t pipemode, uint16_t data, uint16_t bitptn )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",959
0000039F 7100EC                  		ADD #0FFFFFFECH, R0
000003A2 A101                    		MOV.L R1, 10H[R0]
000003A4 918A                    		MOV.W R2, 0EH[R0]
000003A6 9183                    		MOV.W R3, 0CH[R0]
000003A8 910C                    		MOV.W R4, 0AH[R0]
                                 ;     960 {
                                 ;     961     uint16_t    buf;
                                 ;     962     volatile uint16_t    *reg_p;
                                 ;     963 
                                 ;     964     reg_p = (uint16_t *)usb_creg_get_fifosel_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",964
000003AA B98A                    		MOVU.W 0EH[R0], R2
000003AC A901                    		MOV.L 10H[R0], R1
000003AE 39rrrr               W  		BSR __$usb_creg_get_fifosel_adr
000003B1 A009                    		MOV.L R1, 04H[R0]
000003B3                         L118:	; entry.split
                                 ;     965 
                                 ;     966     buf = *reg_p;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",966
000003B3 A809                    		MOV.L 04H[R0], R1
000003B5 D41001                  		MOV.W [R1], 02H[R0]
000003B8                         L119:	; entry.split1
                                 ;     967     buf &= ~bitptn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",967
000003B8 9909                    		MOV.W 0AH[R0], R1
000003BA 7E01                    		NOT R1
000003BC 06D10101                		AND 02H[R0].UW, R1
000003C0 9009                    		MOV.W R1, 02H[R0]
000003C2                         L120:	; entry.split2
                                 ;     968     buf |= (data & bitptn);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",968
000003C2 B981                    		MOVU.W 0CH[R0], R1
000003C4 06510105                		AND 0AH[R0].W, R1
000003C8 06D50101                		OR 02H[R0].UW, R1
000003CC 9009                    		MOV.W R1, 02H[R0]
000003CE                         L121:	; entry.split3
                                 ;     969     *reg_p = buf;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",969
000003CE 9809                    		MOV.W 02H[R0], R1
000003D0 A80A                    		MOV.L 04H[R0], R2
000003D2 D321                    		MOV.W R1, [R2]
000003D4 6705                    		RTSD #14H
000003D6                         _usb_creg_set_dclrm:
                                 		.STACK	_usb_creg_set_dclrm=16
                                 ;     970 } /* eof usb_creg_rmw_fifosel() */
                                 ;     971 
                                 ;     972 /******************************************************************************
                                 ;     973 Function Name   : usb_creg_set_dclrm
                                 ;     974 Description     : Set DCLRM-bits (FIFO buffer auto clear) of the FIFOSEL cor-
                                 ;     975                 : responding to specified PIPEMODE.
                                 ;     976 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;     977                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;     978 Return value    : none
                                 ;     979 ******************************************************************************/
                                 ;     980 void    usb_creg_set_dclrm( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",980
000003D6 60C0                    		SUB #0CH, R0
000003D8 A081                    		MOV.L R1, 08H[R0]
000003DA 908A                    		MOV.W R2, 06H[R0]
                                 ;     981 {
                                 ;     982     volatile uint16_t    *reg_p;
                                 ;     983 
                                 ;     984     reg_p = (uint16_t *)usb_creg_get_fifosel_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",984
000003DC B88A                    		MOVU.W 06H[R0], R2
000003DE A881                    		MOV.L 08H[R0], R1
000003E0 39rrrr               W  		BSR __$usb_creg_get_fifosel_adr
000003E3 E301                    		MOV.L R1, [R0]
000003E5                         L123:	; entry.split
                                 ;     985 
                                 ;     986     *reg_p |= USB_DCLRM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",986
000003E5 EC01                    		MOV.L [R0], R1
000003E7 DC1E                    		MOV.W [R1], R14
000003E9 78DE                    		BSET #0DH, R14
000003EB D31E                    		MOV.W R14, [R1]
000003ED 6703                    		RTSD #0CH
000003EF                         _usb_creg_clr_dclrm:
                                 		.STACK	_usb_creg_clr_dclrm=16
                                 ;     987 } /* eof usb_creg_set_dclrm() */
                                 ;     988 
                                 ;     989 /******************************************************************************
                                 ;     990 Function Name   : usb_creg_clr_dclrm
                                 ;     991 Description     : Reset DCLRM-bits (FIFO buffer not auto-cleared) of the FIFOSEL 
                                 ;     992                 : corresponding to the specified PIPEMODE.
                                 ;     993 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;     994                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;     995 Return value    : none
                                 ;     996 ******************************************************************************/
                                 ;     997 void    usb_creg_clr_dclrm( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",997
000003EF 60C0                    		SUB #0CH, R0
000003F1 A081                    		MOV.L R1, 08H[R0]
000003F3 908A                    		MOV.W R2, 06H[R0]
                                 ;     998 {
                                 ;     999     volatile uint16_t    *reg_p;
                                 ;    1000 
                                 ;    1001     reg_p = usb_creg_get_fifosel_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1001
000003F5 B88A                    		MOVU.W 06H[R0], R2
000003F7 A881                    		MOV.L 08H[R0], R1
000003F9 39rrrr               W  		BSR __$usb_creg_get_fifosel_adr
000003FC E301                    		MOV.L R1, [R0]
000003FE                         L125:	; entry.split
                                 ;    1002 
                                 ;    1003     *reg_p &= ~USB_DCLRM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1003
000003FE EC01                    		MOV.L [R0], R1
00000400 5C1E                    		MOVU.W [R1], R14
00000402 772EFFDF00              		AND #0DFFFH, R14
00000407 D31E                    		MOV.W R14, [R1]
00000409 6703                    		RTSD #0CH
0000040B                         _usb_creg_set_dreqe:
                                 		.STACK	_usb_creg_set_dreqe=16
                                 ;    1004 } /* eof usb_creg_clr_dclrm() */
                                 ;    1005 
                                 ;    1006 /******************************************************************************
                                 ;    1007 Function Name   : usb_creg_set_dreqe
                                 ;    1008 Description     : Set DREQE-bits (to output signal DxREQ_Na) of the FIFOSEL cor-
                                 ;    1009                 : responding to specified PIPEMODE.
                                 ;    1010 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;    1011                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;    1012 Return value    : none
                                 ;    1013 ******************************************************************************/
                                 ;    1014 void    usb_creg_set_dreqe( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1014
0000040B 60C0                    		SUB #0CH, R0
0000040D A081                    		MOV.L R1, 08H[R0]
0000040F 908A                    		MOV.W R2, 06H[R0]
                                 ;    1015 {
                                 ;    1016     volatile uint16_t    *reg_p;
                                 ;    1017 
                                 ;    1018     reg_p = usb_creg_get_fifosel_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1018
00000411 B88A                    		MOVU.W 06H[R0], R2
00000413 A881                    		MOV.L 08H[R0], R1
00000415 39rrrr               W  		BSR __$usb_creg_get_fifosel_adr
00000418 E301                    		MOV.L R1, [R0]
0000041A                         L127:	; entry.split
                                 ;    1019 
                                 ;    1020     *reg_p |= USB_DREQE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1020
0000041A EC01                    		MOV.L [R0], R1
0000041C DC1E                    		MOV.W [R1], R14
0000041E 78CE                    		BSET #0CH, R14
00000420 D31E                    		MOV.W R14, [R1]
00000422 6703                    		RTSD #0CH
00000424                         _usb_creg_clr_dreqe:
                                 		.STACK	_usb_creg_clr_dreqe=16
                                 ;    1021 } /* eof usb_creg_set_dreqe() */
                                 ;    1022 
                                 ;    1023 /******************************************************************************
                                 ;    1024 Function Name   : usb_creg_clr_dreqe
                                 ;    1025 Description     : Clear DREQE-bits (To prohibit the output of the signal DxREQ_N)
                                 ;    1026                 : of the FIFOSEL corresponding to the specified PIPEMODE.
                                 ;    1027 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;    1028                 : uint16_t pipemode : CUSE/D0DMA/D1DMA
                                 ;    1029 Return value    : none
                                 ;    1030 ******************************************************************************/
                                 ;    1031 void    usb_creg_clr_dreqe( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1031
00000424 60C0                    		SUB #0CH, R0
00000426 A081                    		MOV.L R1, 08H[R0]
00000428 908A                    		MOV.W R2, 06H[R0]
                                 ;    1032 {
                                 ;    1033     volatile uint16_t    *reg_p;
                                 ;    1034 
                                 ;    1035     reg_p = usb_creg_get_fifosel_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1035
0000042A B88A                    		MOVU.W 06H[R0], R2
0000042C A881                    		MOV.L 08H[R0], R1
0000042E 39rrrr               W  		BSR __$usb_creg_get_fifosel_adr
00000431 E301                    		MOV.L R1, [R0]
00000433                         L129:	; entry.split
                                 ;    1036 
                                 ;    1037     *reg_p &= ~USB_DREQE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1037
00000433 EC01                    		MOV.L [R0], R1
00000435 5C1E                    		MOVU.W [R1], R14
00000437 772EFFEF00              		AND #0EFFFH, R14
0000043C D31E                    		MOV.W R14, [R1]
0000043E 6703                    		RTSD #0CH
00000440                         _usb_creg_set_mbw:
                                 		.STACK	_usb_creg_set_mbw=16
                                 ;    1038 } /* eof usb_creg_clr_dreqe() */
                                 ;    1039 
                                 ;    1040 /******************************************************************************
                                 ;    1041 Function Name   : usb_creg_set_mbw
                                 ;    1042 Description     : Set MBW-bits (CFIFO Port Access Bit Width) of the FIFOSEL cor-
                                 ;    1043                 : responding to the specified PIPEMODE, to select 8 or 16-bit 
                                 ;    1044                 : wide FIFO port access.
                                 ;    1045 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;    1046                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;    1047                 : uint16_t data     : Defined value of 8 (data = 0x0000) or 16 bit 
                                 ;    1048                 : (data = 0x0400), 32 bit (data = 0x0800) access mode.
                                 ;    1049 Return value    : none
                                 ;    1050 ******************************************************************************/
                                 ;    1051 void    usb_creg_set_mbw( USB_UTR_t *ptr, uint16_t pipemode, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1051
00000440 60C0                    		SUB #0CH, R0
00000442 A081                    		MOV.L R1, 08H[R0]
00000444 908A                    		MOV.W R2, 06H[R0]
00000446 9083                    		MOV.W R3, 04H[R0]
                                 ;    1052 {
                                 ;    1053     volatile uint16_t    *reg_p;
                                 ;    1054 
                                 ;    1055     reg_p = usb_creg_get_fifosel_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1055
00000448 B88A                    		MOVU.W 06H[R0], R2
0000044A A881                    		MOV.L 08H[R0], R1
0000044C 39rrrr               W  		BSR __$usb_creg_get_fifosel_adr
0000044F E301                    		MOV.L R1, [R0]
00000451                         L131:	; entry.split
                                 ;    1056     if( ptr->ip == USB_USBIP_0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1056
00000451 A881                    		MOV.L 08H[R0], R1
00000453 B991                    		MOVU.W 0CH[R1], R1
00000455 6101                    		CMP #00H, R1
00000457 21rr                    		BNE L135
00000459                         L132:	; bb9
                                 ;    1057     {
                                 ;    1058         if( data != 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1058
00000459 B881                    		MOVU.W 04H[R0], R1
0000045B 6101                    		CMP #00H, R1
0000045D EC01                    		MOV.L [R0], R1
0000045F 10                   S  		BEQ L134
00000460                         L133:	; bb10
                                 ;    1059         {
                                 ;    1060             *reg_p |= USB_MBW_16;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1060
00000460 DC1E                    		MOV.W [R1], R14
00000462 78AE                    		BSET #0AH, R14
00000464 D31E                    		MOV.W R14, [R1]
00000466 6703                    		RTSD #0CH
00000468                         L134:	; bb16
                                 ;    1061         }
                                 ;    1062         else
                                 ;    1063         {
                                 ;    1064             *reg_p &= ~USB_MBW_16;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1064
00000468 5C1E                    		MOVU.W [R1], R14
0000046A 772EFFFB00              		AND #0FBFFH, R14
0000046F D31E                    		MOV.W R14, [R1]
00000471 6703                    		RTSD #0CH
00000473                         L135:	; bb28
                                 ;    1065         }
                                 ;    1066     }
                                 ;    1067     else if ( ptr->ip == USB_USBIP_1 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1067
00000473 A881                    		MOV.L 08H[R0], R1
00000475 B991                    		MOVU.W 0CH[R1], R1
00000477 6111                    		CMP #01H, R1
00000479 21rr                    		BNE L139
0000047B                         L136:	; bb29
                                 ;    1068     {
                                 ;    1069         *reg_p &= ~USB_MBW;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1069
0000047B EC01                    		MOV.L [R0], R1
0000047D 5C1E                    		MOVU.W [R1], R14
0000047F 772EFFF300              		AND #0F3FFH, R14
00000484 D31E                    		MOV.W R14, [R1]
00000486                         L137:	; bb29.split
                                 ;    1070 
                                 ;    1071         if( data != 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1071
00000486 B881                    		MOVU.W 04H[R0], R1
00000488 6101                    		CMP #00H, R1
0000048A 20rr                    		BEQ L139
0000048C                         L138:	; bb36
                                 ;    1072         {
                                 ;    1073             *reg_p |= data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1073
0000048C EC01                    		MOV.L [R0], R1
0000048E 9882                    		MOV.W 04H[R0], R2
00000490 065412                  		OR [R1].W, R2
00000493 D312                    		MOV.W R2, [R1]
00000495 6703                    		RTSD #0CH
00000497                         L139:	; return
                                 ;    1074         }
                                 ;    1075     }
                                 ;    1076 } /* eof usb_creg_set_mbw() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1076
00000497 6703                    		RTSD #0CH
00000499                         _usb_creg_set_bigend:
                                 		.STACK	_usb_creg_set_bigend=16
                                 ;    1077 
                                 ;    1078 /******************************************************************************
                                 ;    1079 Function Name   : usb_creg_set_bigend
                                 ;    1080 Description     : Set BIGEND-bit of the FIFOSEL corresponding to the specified 
                                 ;    1081                 : PIPEMODE to select big or little endian of CFIFO.
                                 ;    1082                 : mode of the CFIFO.
                                 ;    1083 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;    1084                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;    1085                 : uint16_t data     : Defined value of big/little endian.
                                 ;    1086 Return value    : none
                                 ;    1087 ******************************************************************************/
                                 ;    1088 void    usb_creg_set_bigend( USB_UTR_t *ptr, uint16_t pipemode, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1088
00000499 60C0                    		SUB #0CH, R0
0000049B A081                    		MOV.L R1, 08H[R0]
0000049D 908A                    		MOV.W R2, 06H[R0]
0000049F 9083                    		MOV.W R3, 04H[R0]
                                 ;    1089 {
                                 ;    1090     volatile uint16_t    *reg_p;
                                 ;    1091 
                                 ;    1092     reg_p = usb_creg_get_fifosel_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1092
000004A1 B88A                    		MOVU.W 06H[R0], R2
000004A3 A881                    		MOV.L 08H[R0], R1
000004A5 39rrrr               W  		BSR __$usb_creg_get_fifosel_adr
000004A8 E301                    		MOV.L R1, [R0]
000004AA                         L141:	; entry.split
                                 ;    1093 
                                 ;    1094     if( data != 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1094
000004AA B881                    		MOVU.W 04H[R0], R1
000004AC 6101                    		CMP #00H, R1
000004AE EC01                    		MOV.L [R0], R1
000004B0 10                   S  		BEQ L143
000004B1                         L142:	; bb8
                                 ;    1095     {
                                 ;    1096         *reg_p |= USB_BIGEND;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1096
000004B1 DC1E                    		MOV.W [R1], R14
000004B3 788E                    		BSET #08H, R14
000004B5 D31E                    		MOV.W R14, [R1]
000004B7 6703                    		RTSD #0CH
000004B9                         L143:	; bb14
                                 ;    1097     }
                                 ;    1098     else
                                 ;    1099     {
                                 ;    1100         *reg_p &= ~USB_BIGEND;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1100
000004B9 5C1E                    		MOVU.W [R1], R14
000004BB 772EFFFE00              		AND #0FEFFH, R14
000004C0 D31E                    		MOV.W R14, [R1]
000004C2 6703                    		RTSD #0CH
000004C4                         _usb_creg_set_curpipe:
                                 		.STACK	_usb_creg_set_curpipe=20
                                 ;    1101     }
                                 ;    1102 } /* eof usb_creg_set_bigend() */
                                 ;    1103 
                                 ;    1104 /******************************************************************************
                                 ;    1105 Function Name   : usb_creg_set_curpipe
                                 ;    1106 Description     : Set pipe to the number given; in the FIFOSEL corresponding 
                                 ;    1107                 : to specified PIPEMODE.
                                 ;    1108 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;    1109                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;    1110                 : uint16_t pipeno   : Pipe number.
                                 ;    1111 Return value    : none
                                 ;    1112 ******************************************************************************/
                                 ;    1113 void    usb_creg_set_curpipe( USB_UTR_t *ptr, uint16_t  pipemode, uint16_t  pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1113
000004C4 7100F0                  		ADD #0FFFFFFF0H, R0
000004C7 A089                    		MOV.L R1, 0CH[R0]
000004C9 910A                    		MOV.W R2, 0AH[R0]
000004CB 9103                    		MOV.W R3, 08H[R0]
                                 ;    1114 {
                                 ;    1115     volatile uint16_t    *reg_p;
                                 ;    1116     uint16_t    reg;
                                 ;    1117 
                                 ;    1118     reg_p = usb_creg_get_fifosel_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1118
000004CD B90A                    		MOVU.W 0AH[R0], R2
000004CF A889                    		MOV.L 0CH[R0], R1
000004D1 39rrrr               W  		BSR __$usb_creg_get_fifosel_adr
000004D4 E301                    		MOV.L R1, [R0]
000004D6                         L145:	; entry.split
                                 ;    1119     reg = *reg_p;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1119
000004D6 EC01                    		MOV.L [R0], R1
000004D8 D41003                  		MOV.W [R1], 06H[R0]
000004DB                         L146:	; entry.split1
                                 ;    1120 
                                 ;    1121     reg &= ~USB_CURPIPE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1121
000004DB B889                    		MOVU.W 06H[R0], R1
000004DD 7721F0FF00              		AND #0FFF0H, R1
000004E2 9089                    		MOV.W R1, 06H[R0]
000004E4                         L147:	; entry.split2
                                 ;    1122     reg |= pipeno;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1122
000004E4 9889                    		MOV.W 06H[R0], R1
000004E6 06550104                		OR 08H[R0].W, R1
000004EA 9089                    		MOV.W R1, 06H[R0]
000004EC                         L148:	; entry.split3
                                 ;    1123     
                                 ;    1124     *reg_p = reg;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1124
000004EC 9889                    		MOV.W 06H[R0], R1
000004EE EC02                    		MOV.L [R0], R2
000004F0 D321                    		MOV.W R1, [R2]
000004F2 6704                    		RTSD #10H
000004F4                         __$usb_creg_get_fifoctr_adr:
                                 		.STACK	__$usb_creg_get_fifoctr_adr=20
                                 ;    1125 } /* eof usb_creg_set_curpipe() */
                                 ;    1126 
                                 ;    1127 /**********************************/
                                 ;    1128 /* CFIFOCTR, D0FIFOCTR, D1FIFOCTR */
                                 ;    1129 /**********************************/
                                 ;    1130 /* FIFO control Registers */
                                 ;    1131 
                                 ;    1132 /******************************************************************************
                                 ;    1133 Function Name   : usb_creg_get_fifoctr_adr
                                 ;    1134 Description     : Returns the *address* of the FIFOCTR register corresponding to 
                                 ;    1135                 : specified PIPEMODE.
                                 ;    1136                 : (FIFO Port Control Register.)
                                 ;    1137 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1138                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;    1139 Return value    : none
                                 ;    1140 ******************************************************************************/
                                 ;    1141 static  void    *usb_creg_get_fifoctr_adr( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1141
000004F4 7100F0                  		ADD #0FFFFFFF0H, R0
000004F7 A089                    		MOV.L R1, 0CH[R0]
000004F9 910A                    		MOV.W R2, 0AH[R0]
                                 ;    1142 {
                                 ;    1143     void    *reg_p;
                                 ;    1144 
                                 ;    1145     switch( pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1145
000004FB B909                    		MOVU.W 0AH[R0], R1
000004FD 6131                    		CMP #03H, R1
000004FF 20rr                    		BEQ L154
00000501                         L150:	; entry
00000501 6111                    		CMP #01H, R1
00000503 20rr                    		BEQ L153
00000505                         L151:	; entry
00000505 6101                    		CMP #00H, R1
00000507 21rr                    		BNE L155
00000509                         L152:	; bb
                                 ;    1146     {
                                 ;    1147         case    USB_CUSE:
                                 ;    1148             reg_p = (void *)&(ptr->ipp->CFIFOCTR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1148
00000509 A889                    		MOV.L 0CH[R0], R1
0000050B A891                    		MOV.L 08H[R1], R1
0000050D 711122                  		ADD #22H, R1
00000510 E301                    		MOV.L R1, [R0]
00000512 2Err                 B  		BRA L156
00000514                         L153:	; bb12
                                 ;    1149             break;
                                 ;    1150         case    USB_D0USE:
                                 ;    1151 #ifdef USB_DTC_ENABLE
                                 ;    1152         case    USB_D0DMA:
                                 ;    1153 #endif    /* USB_DTC_ENABLE */
                                 ;    1154             reg_p = (void *)&(ptr->ipp->D0FIFOCTR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1154
00000514 A889                    		MOV.L 0CH[R0], R1
00000516 A891                    		MOV.L 08H[R1], R1
00000518 71112A                  		ADD #2AH, R1
0000051B E301                    		MOV.L R1, [R0]
0000051D 2Err                 B  		BRA L156
0000051F                         L154:	; bb19
                                 ;    1155             break;
                                 ;    1156         case    USB_D1USE:
                                 ;    1157 #ifdef USB_DTC_ENABLE
                                 ;    1158         case    USB_D1DMA:
                                 ;    1159 #endif    /* USB_DTC_ENABLE */
                                 ;    1160             reg_p = (void *)&(ptr->ipp->D1FIFOCTR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1160
0000051F A889                    		MOV.L 0CH[R0], R1
00000521 A891                    		MOV.L 08H[R1], R1
00000523 71112E                  		ADD #2EH, R1
00000526 E301                    		MOV.L R1, [R0]
00000528 08                   S  		BRA L156
00000529                         L155:	; bb26
00000529 FB1A0D08                		MOV.L #0000080DH, R1
                                 ;    1161             break;
                                 ;    1162         default:
                                 ;    1163             USB_DEBUG_HOOK( USB_DEBUG_HOOK_STD | USB_DEBUG_HOOK_CODE13 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1163
0000052D 05rrrrrr             A  		BSR _R_usb_cstd_debug_hook
00000531                         L156:	; bb27
                                 ;    1164             break;
                                 ;    1165     }
                                 ;    1166     return reg_p;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1166
00000531 EC01                    		MOV.L [R0], R1
00000533 A009                    		MOV.L R1, 04H[R0]
00000535                         L157:	; bb27.split
                                 ;    1167 } /* eof usb_creg_get_fifoctr_adr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1167
00000535 6704                    		RTSD #10H
00000537                         _usb_creg_read_fifoctr:
                                 		.STACK	_usb_creg_read_fifoctr=16
                                 ;    1168 
                                 ;    1169 /******************************************************************************
                                 ;    1170 Function Name   : usb_creg_read_fifoctr
                                 ;    1171 Description     : Returns the value of the FIFOCTR register corresponding to 
                                 ;    1172                 : specified PIPEMODE.
                                 ;    1173 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;    1174                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;    1175 Return value    : FIFOCTR content
                                 ;    1176 ******************************************************************************/
                                 ;    1177 uint16_t    usb_creg_read_fifoctr( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1177
00000537 60C0                    		SUB #0CH, R0
00000539 A081                    		MOV.L R1, 08H[R0]
0000053B 908A                    		MOV.W R2, 06H[R0]
                                 ;    1178 {
                                 ;    1179     volatile uint16_t    *reg_p;
                                 ;    1180 
                                 ;    1181     reg_p = (uint16_t *)usb_creg_get_fifoctr_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1181
0000053D B88A                    		MOVU.W 06H[R0], R2
0000053F A881                    		MOV.L 08H[R0], R1
00000541 39rrrr               W  		BSR __$usb_creg_get_fifoctr_adr
00000544 E301                    		MOV.L R1, [R0]
00000546                         L159:	; entry.split
                                 ;    1182 
                                 ;    1183     return *reg_p;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1183
00000546 EC01                    		MOV.L [R0], R1
00000548 D41002                  		MOV.W [R1], 04H[R0]
0000054B 9881                    		MOV.W 04H[R0], R1
0000054D                         L160:	; entry.split1
                                 ;    1184 } /* eof usb_creg_read_fifoctr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1184
0000054D 5F11                    		MOVU.W R1, R1
0000054F 6703                    		RTSD #0CH
00000551                         _usb_creg_set_bval:
                                 		.STACK	_usb_creg_set_bval=16
                                 ;    1185 
                                 ;    1186 /******************************************************************************
                                 ;    1187 Function Name   : usb_creg_set_bval
                                 ;    1188 Description     : Set BVAL (Buffer Memory Valid Flag) to the number given; in 
                                 ;    1189                 : the FIFOCTR corresponding to the specified PIPEMODE.
                                 ;    1190 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;    1191                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;    1192 Return value    : none
                                 ;    1193 ******************************************************************************/
                                 ;    1194 void    usb_creg_set_bval( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1194
00000551 60C0                    		SUB #0CH, R0
00000553 A081                    		MOV.L R1, 08H[R0]
00000555 908A                    		MOV.W R2, 06H[R0]
                                 ;    1195 {
                                 ;    1196     volatile uint16_t *reg_p;
                                 ;    1197 
                                 ;    1198     reg_p = (uint16_t *)usb_creg_get_fifoctr_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1198
00000557 B88A                    		MOVU.W 06H[R0], R2
00000559 A881                    		MOV.L 08H[R0], R1
0000055B 39rrrr               W  		BSR __$usb_creg_get_fifoctr_adr
0000055E E301                    		MOV.L R1, [R0]
00000560                         L162:	; entry.split
                                 ;    1199 
                                 ;    1200     *reg_p |= USB_BVAL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1200
00000560 EC01                    		MOV.L [R0], R1
00000562 DC1E                    		MOV.W [R1], R14
00000564 78FE                    		BSET #0FH, R14
00000566 D31E                    		MOV.W R14, [R1]
00000568 6703                    		RTSD #0CH
0000056A                         _usb_creg_set_bclr:
                                 		.STACK	_usb_creg_set_bclr=16
                                 ;    1201 } /* eof usb_creg_set_bval() */
                                 ;    1202 
                                 ;    1203 /******************************************************************************
                                 ;    1204 Function Name   : usb_creg_set_bclr
                                 ;    1205 Description     : Set BCLR (CPU Buffer Clear) to the number given; in the 
                                 ;    1206                 : FIFOCTR corresponding to the specified PIPEMODE.
                                 ;    1207 Arguments       : USB_UTR_t *ptr       : USB internal structure. Selects USB channel.
                                 ;    1208                 : uint16_t pipemode : CUSE/D0DMA/D1DMA.
                                 ;    1209 Return value    : none
                                 ;    1210 ******************************************************************************/
                                 ;    1211 void    usb_creg_set_bclr( USB_UTR_t *ptr, uint16_t pipemode )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1211
0000056A 60C0                    		SUB #0CH, R0
0000056C A081                    		MOV.L R1, 08H[R0]
0000056E 908A                    		MOV.W R2, 06H[R0]
                                 ;    1212 {
                                 ;    1213     volatile uint16_t *reg_p;
                                 ;    1214 
                                 ;    1215     reg_p = (uint16_t *)usb_creg_get_fifoctr_adr( ptr, pipemode );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1215
00000570 B88A                    		MOVU.W 06H[R0], R2
00000572 A881                    		MOV.L 08H[R0], R1
00000574 39rrrr               W  		BSR __$usb_creg_get_fifoctr_adr
00000577 E301                    		MOV.L R1, [R0]
00000579                         L164:	; entry.split
                                 ;    1216 
                                 ;    1217     *reg_p = USB_BCLR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1217
00000579 EC01                    		MOV.L [R0], R1
0000057B F8190040                		MOV.W #4000H, [R1]
0000057F 6703                    		RTSD #0CH
00000581                         _usb_creg_read_intenb:
                                 		.STACK	_usb_creg_read_intenb=12
                                 ;    1218 } /* eof usb_creg_set_bclr() */
                                 ;    1219 
                                 ;    1220 
                                 ;    1221 /*************/
                                 ;    1222 /*  INTENB0  */
                                 ;    1223 /*************/
                                 ;    1224 /* Interrupt Enable Register 0 */
                                 ;    1225 
                                 ;    1226 /******************************************************************************
                                 ;    1227 Function Name   : usb_creg_read_intenb
                                 ;    1228 Description     : Returns INTENB0 register content.
                                 ;    1229 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1230 Return value    : INTENB0 content
                                 ;    1231 ******************************************************************************/
                                 ;    1232 uint16_t    usb_creg_read_intenb( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1232
00000581 6080                    		SUB #08H, R0
00000583 A009                    		MOV.L R1, 04H[R0]
                                 ;    1233 {
                                 ;    1234     return ptr->ipp->INTENB0.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1234
00000585 A891                    		MOV.L 08H[R1], R1
00000587 D5101801                		MOV.W 30H[R1], 02H[R0]
0000058B 9809                    		MOV.W 02H[R0], R1
0000058D                         L166:	; entry.split
                                 ;    1235 } /* eof usb_creg_read_intenb() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1235
0000058D 5F11                    		MOVU.W R1, R1
0000058F 6702                    		RTSD #08H
00000591                         _usb_creg_write_intenb:
                                 		.STACK	_usb_creg_write_intenb=12
                                 ;    1236 
                                 ;    1237 /******************************************************************************
                                 ;    1238 Function Name   : usb_creg_write_intenb
                                 ;    1239 Description     : Data is written to INTENB register, 
                                 ;    1240                 : enabling/disabling the various USB interrupts.
                                 ;    1241 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1242                 : uint16_t  data  : The value to write.
                                 ;    1243 Return value    : none
                                 ;    1244 ******************************************************************************/
                                 ;    1245 void    usb_creg_write_intenb( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1245
00000591 6080                    		SUB #08H, R0
00000593 A009                    		MOV.L R1, 04H[R0]
00000595 900A                    		MOV.W R2, 02H[R0]
                                 ;    1246 {
                                 ;    1247     ptr->ipp->INTENB0.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1247
00000597 A809                    		MOV.L 04H[R0], R1
00000599 A891                    		MOV.L 08H[R1], R1
0000059B 9612                    		MOV.W R2, 30H[R1]
0000059D 6702                    		RTSD #08H
0000059F                         _usb_creg_set_intenb:
                                 		.STACK	_usb_creg_set_intenb=12
                                 ;    1248 } /* eof usb_creg_write_intenb() */
                                 ;    1249 
                                 ;    1250 /******************************************************************************
                                 ;    1251 Function Name   : usb_creg_set_intenb
                                 ;    1252 Description     : Bit(s) to be set in INTENB register, 
                                 ;    1253                 : enabling the respective USB interrupt(s).
                                 ;    1254 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1255                 : uint16_t  data  : Bit pattern: Respective interrupts with '1' 
                                 ;    1256                                   : will be enabled.
                                 ;    1257 Return value    : none
                                 ;    1258 ******************************************************************************/
                                 ;    1259 void    usb_creg_set_intenb( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1259
0000059F 6080                    		SUB #08H, R0
000005A1 A009                    		MOV.L R1, 04H[R0]
000005A3 900A                    		MOV.W R2, 02H[R0]
                                 ;    1260 {
                                 ;    1261     ptr->ipp->INTENB0.WORD |= data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1261
000005A5 A809                    		MOV.L 04H[R0], R1
000005A7 A891                    		MOV.L 08H[R1], R1
000005A9 06551218                		OR 30H[R1].W, R2
000005AD 9612                    		MOV.W R2, 30H[R1]
000005AF 6702                    		RTSD #08H
000005B1                         _usb_creg_clr_enb_vbse:
                                 		.STACK	_usb_creg_clr_enb_vbse=8
                                 ;    1262 } /* eof usb_creg_set_intenb() */
                                 ;    1263 
                                 ;    1264 /******************************************************************************
                                 ;    1265 Function Name   : usb_creg_clr_enb_vbse
                                 ;    1266 Description     : Clear the VBE-bit of INTENB register,
                                 ;    1267                 : to prohibit VBUS interrupts.
                                 ;    1268 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1269 Return value    : none
                                 ;    1270 ******************************************************************************/
                                 ;    1271 void    usb_creg_clr_enb_vbse( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1271
000005B1 6040                    		SUB #04H, R0
000005B3 E301                    		MOV.L R1, [R0]
                                 ;    1272 {
                                 ;    1273     ptr->ipp->INTENB0.WORD &= ~USB_VBSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1273
000005B5 A891                    		MOV.L 08H[R1], R1
000005B7 BE12                    		MOVU.W 30H[R1], R2
000005B9 7622FF7F                		AND #7FFFH, R2
000005BD 9612                    		MOV.W R2, 30H[R1]
000005BF 6701                    		RTSD #04H
000005C1                         _usb_creg_clr_enb_sofe:
                                 		.STACK	_usb_creg_clr_enb_sofe=8
                                 ;    1274 } /* eof usb_creg_clr_enb_vbse() */
                                 ;    1275 
                                 ;    1276 /******************************************************************************
                                 ;    1277 Description     : Clear the SOFE-bit of INTENB register,
                                 ;    1278                 : to prohibit Frame Number Update interrupts.
                                 ;    1279 Function Name   : usb_creg_clr_enb_sofe
                                 ;    1280 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1281 Return value    : none
                                 ;    1282 ******************************************************************************/
                                 ;    1283 void    usb_creg_clr_enb_sofe( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1283
000005C1 6040                    		SUB #04H, R0
000005C3 E301                    		MOV.L R1, [R0]
                                 ;    1284 {
                                 ;    1285     ptr->ipp->INTENB0.WORD &= ~USB_SOFE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1285
000005C5 A891                    		MOV.L 08H[R1], R1
000005C7 BE12                    		MOVU.W 30H[R1], R2
000005C9 7722FFDF00              		AND #0DFFFH, R2
000005CE 9612                    		MOV.W R2, 30H[R1]
000005D0 6701                    		RTSD #04H
000005D2                         _usb_creg_read_brdyenb:
                                 		.STACK	_usb_creg_read_brdyenb=12
                                 ;    1286 } /* eof usb_creg_clr_enb_sofe() */
                                 ;    1287 
                                 ;    1288 
                                 ;    1289 /*************/
                                 ;    1290 /*  INTENB1  */
                                 ;    1291 /*************/
                                 ;    1292 
                                 ;    1293 /*************/
                                 ;    1294 /*  BRDYENB  */
                                 ;    1295 /*************/
                                 ;    1296 /* BRDY Interrupt Enable Register */
                                 ;    1297 
                                 ;    1298 /******************************************************************************
                                 ;    1299 Function Name   : usb_creg_read_brdyenb
                                 ;    1300 Description     : Returns BRDYENB register content.
                                 ;    1301 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1302 Return value    : BRDYENB content
                                 ;    1303 ******************************************************************************/
                                 ;    1304 uint16_t    usb_creg_read_brdyenb( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1304
000005D2 6080                    		SUB #08H, R0
000005D4 A009                    		MOV.L R1, 04H[R0]
                                 ;    1305 {
                                 ;    1306     return ptr->ipp->BRDYENB.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1306
000005D6 A891                    		MOV.L 08H[R1], R1
000005D8 D5101B01                		MOV.W 36H[R1], 02H[R0]
000005DC 9809                    		MOV.W 02H[R0], R1
000005DE                         L172:	; entry.split
                                 ;    1307 } /* eof usb_creg_read_brdyenb() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1307
000005DE 5F11                    		MOVU.W R1, R1
000005E0 6702                    		RTSD #08H
000005E2                         _usb_creg_write_brdyenb:
                                 		.STACK	_usb_creg_write_brdyenb=12
                                 ;    1308 
                                 ;    1309 /******************************************************************************
                                 ;    1310 Function Name   : usb_creg_write_brdyenb
                                 ;    1311 Description     : Data is written to BRDYENB register, 
                                 ;    1312                 : enabling/disabling each respective pipe's BRDY interrupt. 
                                 ;    1313                 : (The BRDY interrupt indicates that a FIFO port is accessible.)
                                 ;    1314 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1315                 : uint16_t  data        : The value to write.
                                 ;    1316 Return value    : none
                                 ;    1317 ******************************************************************************/
                                 ;    1318 void    usb_creg_write_brdyenb( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1318
000005E2 6080                    		SUB #08H, R0
000005E4 A009                    		MOV.L R1, 04H[R0]
000005E6 900A                    		MOV.W R2, 02H[R0]
                                 ;    1319 {
                                 ;    1320     ptr->ipp->BRDYENB.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1320
000005E8 A809                    		MOV.L 04H[R0], R1
000005EA A891                    		MOV.L 08H[R1], R1
000005EC 969A                    		MOV.W R2, 36H[R1]
000005EE 6702                    		RTSD #08H
000005F0                         _usb_creg_set_brdyenb:
                                 		.STACK	_usb_creg_set_brdyenb=12
                                 ;    1321 } /* eof usb_creg_write_brdyenb() */
                                 ;    1322 
                                 ;    1323 /******************************************************************************
                                 ;    1324 Function Name   : usb_creg_set_brdyenb
                                 ;    1325 Description     : A bit is set in the specified pipe's BRDYENB, enabling the 
                                 ;    1326                 : respective pipe BRDY interrupt(s).
                                 ;    1327 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1328                 : uint16_t  pipeno: Pipe number.
                                 ;    1329 Return value    : none
                                 ;    1330 ******************************************************************************/
                                 ;    1331 void    usb_creg_set_brdyenb( USB_UTR_t *ptr, uint16_t  pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1331
000005F0 6080                    		SUB #08H, R0
000005F2 A009                    		MOV.L R1, 04H[R0]
000005F4 900A                    		MOV.W R2, 02H[R0]
000005F6 6611                    		MOV.L #00000001H, R1
                                 ;    1332 {
                                 ;    1333     ptr->ipp->BRDYENB.WORD |= (1 << pipeno);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1333
000005F8 B80A                    		MOVU.W 02H[R0], R2
000005FA FD6221                  		SHLL R2, R1
000005FD A80A                    		MOV.L 04H[R0], R2
000005FF A8A2                    		MOV.L 08H[R2], R2
00000601 0655211B                		OR 36H[R2].W, R1
00000605 96A9                    		MOV.W R1, 36H[R2]
00000607 6702                    		RTSD #08H
00000609                         _usb_creg_clr_brdyenb:
                                 		.STACK	_usb_creg_clr_brdyenb=12
                                 ;    1334 } /* eof usb_creg_set_brdyenb() */
                                 ;    1335 
                                 ;    1336 /******************************************************************************
                                 ;    1337 Function Name   : usb_creg_clr_brdyenb
                                 ;    1338 Description     : Clear the PIPExBRDYE-bit of the specified pipe to prohibit 
                                 ;    1339                 : BRDY interrupts of that pipe.
                                 ;    1340 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1341                 : uint16_t  pipeno: Pipe number.
                                 ;    1342 Return value    : none
                                 ;    1343 ******************************************************************************/
                                 ;    1344 void    usb_creg_clr_brdyenb( USB_UTR_t *ptr, uint16_t  pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1344
00000609 6080                    		SUB #08H, R0
0000060B A009                    		MOV.L R1, 04H[R0]
0000060D 900A                    		MOV.W R2, 02H[R0]
0000060F FB16FF                  		MOV.L #0FFFFFFFFH, R1
                                 ;    1345 {
                                 ;    1346     ptr->ipp->BRDYENB.WORD &= ~(1 << pipeno);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1346
00000612 B80A                    		MOVU.W 02H[R0], R2
00000614 FC6F12                  		BNOT R2, R1
00000617 A80A                    		MOV.L 04H[R0], R2
00000619 A8A2                    		MOV.L 08H[R2], R2
0000061B 0651211B                		AND 36H[R2].W, R1
0000061F 96A9                    		MOV.W R1, 36H[R2]
00000621 6702                    		RTSD #08H
00000623                         _usb_creg_read_nrdyenb:
                                 		.STACK	_usb_creg_read_nrdyenb=12
                                 ;    1347 } /* eof usb_creg_clr_brdyenb() */
                                 ;    1348 
                                 ;    1349 
                                 ;    1350 /*************/
                                 ;    1351 /*  NRDYENB  */
                                 ;    1352 /*************/
                                 ;    1353 /* NRDY (not ready) Interrupt Enable Register */
                                 ;    1354 
                                 ;    1355 /******************************************************************************
                                 ;    1356 Function Name   : usb_creg_read_nrdyenb
                                 ;    1357 Description     : Returns NRDYENB register content. 
                                 ;    1358                 : (The NRDY interrupt indicates that more time is needed before 
                                 ;    1359                 : continuing data communication.)
                                 ;    1360 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1361 Return value    : NRDYENB content
                                 ;    1362 ******************************************************************************/
                                 ;    1363 uint16_t    usb_creg_read_nrdyenb( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1363
00000623 6080                    		SUB #08H, R0
00000625 A009                    		MOV.L R1, 04H[R0]
                                 ;    1364 {
                                 ;    1365     return ptr->ipp->NRDYENB.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1365
00000627 A891                    		MOV.L 08H[R1], R1
00000629 D5101C01                		MOV.W 38H[R1], 02H[R0]
0000062D 9809                    		MOV.W 02H[R0], R1
0000062F                         L177:	; entry.split
                                 ;    1366 } /* eof usb_creg_read_nrdyenb() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1366
0000062F 5F11                    		MOVU.W R1, R1
00000631 6702                    		RTSD #08H
00000633                         _usb_creg_write_nrdyenb:
                                 		.STACK	_usb_creg_write_nrdyenb=12
                                 ;    1367 
                                 ;    1368 /******************************************************************************
                                 ;    1369 Function Name   : usb_creg_write_nrdyenb
                                 ;    1370 Description     : Data is written to NRDYENB register, 
                                 ;    1371                 : enabling/disabling each respective pipe's NRDY interrupt
                                 ;    1372 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1373                 : uint16_t  data  : The value to write.
                                 ;    1374 Return value    : none
                                 ;    1375 ******************************************************************************/
                                 ;    1376 void    usb_creg_write_nrdyenb( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1376
00000633 6080                    		SUB #08H, R0
00000635 A009                    		MOV.L R1, 04H[R0]
00000637 900A                    		MOV.W R2, 02H[R0]
                                 ;    1377 {
                                 ;    1378     ptr->ipp->NRDYENB.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1378
00000639 A809                    		MOV.L 04H[R0], R1
0000063B A891                    		MOV.L 08H[R1], R1
0000063D 9712                    		MOV.W R2, 38H[R1]
0000063F 6702                    		RTSD #08H
00000641                         _usb_creg_set_nrdyenb:
                                 		.STACK	_usb_creg_set_nrdyenb=12
                                 ;    1379 } /* eof usb_creg_write_nrdyenb() */
                                 ;    1380 
                                 ;    1381 /******************************************************************************
                                 ;    1382 Function Name   : usb_creg_set_nrdyenb
                                 ;    1383 Description     : A bit is set in the specified pipe's NRDYENB, enabling the 
                                 ;    1384                 : respective pipe NRDY interrupt(s).
                                 ;    1385 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1386                 : uint16_t  pipeno: Pipe number.
                                 ;    1387 Return value    : none
                                 ;    1388 ******************************************************************************/
                                 ;    1389 void    usb_creg_set_nrdyenb( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1389
00000641 6080                    		SUB #08H, R0
00000643 A009                    		MOV.L R1, 04H[R0]
00000645 900A                    		MOV.W R2, 02H[R0]
00000647 6611                    		MOV.L #00000001H, R1
                                 ;    1390 {
                                 ;    1391     ptr->ipp->NRDYENB.WORD |= (1 << pipeno);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1391
00000649 B80A                    		MOVU.W 02H[R0], R2
0000064B FD6221                  		SHLL R2, R1
0000064E A80A                    		MOV.L 04H[R0], R2
00000650 A8A2                    		MOV.L 08H[R2], R2
00000652 0655211C                		OR 38H[R2].W, R1
00000656 9721                    		MOV.W R1, 38H[R2]
00000658 6702                    		RTSD #08H
0000065A                         _usb_creg_clr_nrdyenb:
                                 		.STACK	_usb_creg_clr_nrdyenb=12
                                 ;    1392 } /* eof usb_creg_set_nrdyenb() */
                                 ;    1393 
                                 ;    1394 /******************************************************************************
                                 ;    1395 Function Name   : usb_creg_clr_nrdyenb
                                 ;    1396 Description     : Clear the PIPExNRDYE-bit of the specified pipe to prohibit 
                                 ;    1397                 : NRDY interrupts of that pipe.
                                 ;    1398 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1399                 : uint16_t  pipeno: Pipe number.
                                 ;    1400 Return value    : none
                                 ;    1401 ******************************************************************************/
                                 ;    1402 void    usb_creg_clr_nrdyenb(USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1402
0000065A 6080                    		SUB #08H, R0
0000065C A009                    		MOV.L R1, 04H[R0]
0000065E 900A                    		MOV.W R2, 02H[R0]
00000660 FB16FF                  		MOV.L #0FFFFFFFFH, R1
                                 ;    1403 {
                                 ;    1404     ptr->ipp->NRDYENB.WORD &= ~(1 << pipeno);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1404
00000663 B80A                    		MOVU.W 02H[R0], R2
00000665 FC6F12                  		BNOT R2, R1
00000668 A80A                    		MOV.L 04H[R0], R2
0000066A A8A2                    		MOV.L 08H[R2], R2
0000066C 0651211C                		AND 38H[R2].W, R1
00000670 9721                    		MOV.W R1, 38H[R2]
00000672 6702                    		RTSD #08H
00000674                         _usb_creg_read_bempenb:
                                 		.STACK	_usb_creg_read_bempenb=12
                                 ;    1405 } /* eof usb_creg_clr_nrdyenb() */
                                 ;    1406 
                                 ;    1407 
                                 ;    1408 /*************/
                                 ;    1409 /*  BEMPENB  */
                                 ;    1410 /*************/
                                 ;    1411 /* BEMP (buffer empty) Interrupt Enable Register */
                                 ;    1412 
                                 ;    1413 /******************************************************************************
                                 ;    1414 Function Name   : usb_creg_read_bempenb
                                 ;    1415 Description     : Returns BEMPENB register content.
                                 ;    1416 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1417 Return value    : BEMPENB content
                                 ;    1418 ******************************************************************************/
                                 ;    1419 uint16_t    usb_creg_read_bempenb( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1419
00000674 6080                    		SUB #08H, R0
00000676 A009                    		MOV.L R1, 04H[R0]
                                 ;    1420 {
                                 ;    1421     return ptr->ipp->BEMPENB.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1421
00000678 A891                    		MOV.L 08H[R1], R1
0000067A D5101D01                		MOV.W 3AH[R1], 02H[R0]
0000067E 9809                    		MOV.W 02H[R0], R1
00000680                         L182:	; entry.split
                                 ;    1422 } /* eof usb_creg_read_bempenb() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1422
00000680 5F11                    		MOVU.W R1, R1
00000682 6702                    		RTSD #08H
00000684                         _usb_creg_write_bempenb:
                                 		.STACK	_usb_creg_write_bempenb=12
                                 ;    1423 
                                 ;    1424 /******************************************************************************
                                 ;    1425 Function Name   : usb_creg_write_bempenb
                                 ;    1426 Description     : Data is written to BEMPENB register, 
                                 ;    1427                 : enabling/disabling each respective pipe's BEMP interrupt. 
                                 ;    1428                 : (The BEMP interrupt indicates that the USB buffer is empty, 
                                 ;    1429                 : and so the FIFO can now be written to.)
                                 ;    1430 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1431                 : uint16_t  data  : The value to write.
                                 ;    1432 Return value    : none
                                 ;    1433 ******************************************************************************/
                                 ;    1434 void    usb_creg_write_bempenb( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1434
00000684 6080                    		SUB #08H, R0
00000686 A009                    		MOV.L R1, 04H[R0]
00000688 900A                    		MOV.W R2, 02H[R0]
                                 ;    1435 {
                                 ;    1436     ptr->ipp->BEMPENB.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1436
0000068A A809                    		MOV.L 04H[R0], R1
0000068C A891                    		MOV.L 08H[R1], R1
0000068E 971A                    		MOV.W R2, 3AH[R1]
00000690 6702                    		RTSD #08H
00000692                         _usb_creg_set_bempenb:
                                 		.STACK	_usb_creg_set_bempenb=12
                                 ;    1437 } /* eof usb_creg_write_bempenb() */
                                 ;    1438 
                                 ;    1439 /******************************************************************************
                                 ;    1440 Function Name   : usb_creg_set_bempenb
                                 ;    1441 Description     : A bit is set in the specified pipe's BEMPENB enabling the 
                                 ;    1442                 : respective pipe's BEMP interrupt(s).
                                 ;    1443 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1444                 : uint16_t  pipeno: Pipe number.
                                 ;    1445 Return value    : none
                                 ;    1446 ******************************************************************************/
                                 ;    1447 void    usb_creg_set_bempenb( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1447
00000692 6080                    		SUB #08H, R0
00000694 A009                    		MOV.L R1, 04H[R0]
00000696 900A                    		MOV.W R2, 02H[R0]
00000698 6611                    		MOV.L #00000001H, R1
                                 ;    1448 {
                                 ;    1449     ptr->ipp->BEMPENB.WORD |= (1 << pipeno);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1449
0000069A B80A                    		MOVU.W 02H[R0], R2
0000069C FD6221                  		SHLL R2, R1
0000069F A80A                    		MOV.L 04H[R0], R2
000006A1 A8A2                    		MOV.L 08H[R2], R2
000006A3 0655211D                		OR 3AH[R2].W, R1
000006A7 9729                    		MOV.W R1, 3AH[R2]
000006A9 6702                    		RTSD #08H
000006AB                         _usb_creg_clr_bempenb:
                                 		.STACK	_usb_creg_clr_bempenb=12
                                 ;    1450 } /* eof usb_creg_set_bempenb() */
                                 ;    1451 
                                 ;    1452 /******************************************************************************
                                 ;    1453 Function Name   : usb_creg_clr_bempenb
                                 ;    1454 Description     : Clear the PIPExBEMPE-bit of the specified pipe to prohibit 
                                 ;    1455                 : BEMP interrupts of that pipe.
                                 ;    1456 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1457                 : uint16_t  pipeno: Pipe number.
                                 ;    1458 Return value    : none
                                 ;    1459 ******************************************************************************/
                                 ;    1460 void    usb_creg_clr_bempenb( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1460
000006AB 6080                    		SUB #08H, R0
000006AD A009                    		MOV.L R1, 04H[R0]
000006AF 900A                    		MOV.W R2, 02H[R0]
000006B1 FB16FF                  		MOV.L #0FFFFFFFFH, R1
                                 ;    1461 {
                                 ;    1462     ptr->ipp->BEMPENB.WORD &= ~(1 << pipeno);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1462
000006B4 B80A                    		MOVU.W 02H[R0], R2
000006B6 FC6F12                  		BNOT R2, R1
000006B9 A80A                    		MOV.L 04H[R0], R2
000006BB A8A2                    		MOV.L 08H[R2], R2
000006BD 0651211D                		AND 3AH[R2].W, R1
000006C1 9729                    		MOV.W R1, 3AH[R2]
000006C3 6702                    		RTSD #08H
000006C5                         _usb_creg_read_sofcfg:
                                 		.STACK	_usb_creg_read_sofcfg=12
                                 ;    1463 } /* eof usb_creg_clr_bempenb() */
                                 ;    1464 
                                 ;    1465 
                                 ;    1466 /*************/
                                 ;    1467 /*  SOFCFG   */
                                 ;    1468 /*************/
                                 ;    1469 /* SOF (start of frame) Output Configuration Register */
                                 ;    1470 
                                 ;    1471 /******************************************************************************
                                 ;    1472 Function Name   : usb_creg_read_sofcfg
                                 ;    1473 Description     : Returns SOFCFG register content.
                                 ;    1474 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1475 Return value    : SOFCFG content
                                 ;    1476 ******************************************************************************/
                                 ;    1477 uint16_t    usb_creg_read_sofcfg( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1477
000006C5 6080                    		SUB #08H, R0
000006C7 A009                    		MOV.L R1, 04H[R0]
                                 ;    1478 {
                                 ;    1479     return ptr->ipp->SOFCFG.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1479
000006C9 A891                    		MOV.L 08H[R1], R1
000006CB D5101E01                		MOV.W 3CH[R1], 02H[R0]
000006CF 9809                    		MOV.W 02H[R0], R1
000006D1                         L187:	; entry.split
                                 ;    1480 } /* eof usb_creg_read_sofcfg() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1480
000006D1 5F11                    		MOVU.W R1, R1
000006D3 6702                    		RTSD #08H
000006D5                         _usb_creg_read_intsts:
                                 		.STACK	_usb_creg_read_intsts=12
                                 ;    1481 
                                 ;    1482 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;    1483 /******************************************************************************
                                 ;    1484 Function Name   : usb_creg_set_sofcfg
                                 ;    1485 Description     : Set Bit pattern for SOFCFG
                                 ;    1486                 : 
                                 ;    1487 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1488                 : uint16_t  data  : The value to OR.
                                 ;    1489 Return value    : none
                                 ;    1490 ******************************************************************************/
                                 ;    1491 void    usb_creg_set_sofcfg( USB_UTR_t *ptr, uint16_t data )
                                 ;    1492 {
                                 ;    1493     if(ptr->ip == USB_USBIP_1)
                                 ;    1494     {
                                 ;    1495         ptr->ipp1->SOFCFG.WORD |= data;
                                 ;    1496     }
                                 ;    1497 } /* eof usb_creg_set_sofcfg() */
                                 ;    1498 
                                 ;    1499 
                                 ;    1500 
                                 ;    1501 /*************/
                                 ;    1502 /*  PHYSET   */
                                 ;    1503 /*************/
                                 ;    1504 /* PHY Setting Register */
                                 ;    1505 
                                 ;    1506 /******************************************************************************
                                 ;    1507 Function Name   : usb_creg_write_clksel
                                 ;    1508 Description     : Set CLKSEL bits.
                                 ;    1509 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1510 Return value    : none
                                 ;    1511 ******************************************************************************/
                                 ;    1512 void    usb_creg_write_clksel( USB_UTR_t *ptr )
                                 ;    1513 {
                                 ;    1514     ptr->ipp1->PHYSET.WORD |= USB_CLKSEL_24;
                                 ;    1515 } /* eof usb_creg_write_clksel() */
                                 ;    1516 
                                 ;    1517 /******************************************************************************
                                 ;    1518 Function Name   : usb_creg_clr_pllreset
                                 ;    1519 Description     : Clear PLLRESET bits.
                                 ;    1520 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1521 Return value    : none
                                 ;    1522 ******************************************************************************/
                                 ;    1523 void    usb_creg_clr_pllreset( USB_UTR_t *ptr )
                                 ;    1524 {
                                 ;    1525     ptr->ipp1->PHYSET.WORD &= ~USB_PLLRESET;
                                 ;    1526 } /* eof usb_creg_clr_pllreset() */
                                 ;    1527 
                                 ;    1528 /******************************************************************************
                                 ;    1529 Function Name   : usb_creg_clr_dirpd
                                 ;    1530 Description     : Clear DIRPD bits.
                                 ;    1531 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1532 Return value    : none
                                 ;    1533 ******************************************************************************/
                                 ;    1534 void    usb_creg_clr_dirpd( USB_UTR_t *ptr )
                                 ;    1535 {
                                 ;    1536     ptr->ipp1->PHYSET.WORD &= ~USB_DIRPD;
                                 ;    1537 } /* eof usb_creg_clr_dirpd() */
                                 ;    1538 
                                 ;    1539 
                                 ;    1540 /******************************************************************************
                                 ;    1541 Function Name   : usb_creg_clr_hseb
                                 ;    1542 Description     : Clear HSEB bits.
                                 ;    1543 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1544 Return value    : none
                                 ;    1545 ******************************************************************************/
                                 ;    1546 void    usb_creg_clr_hseb( USB_UTR_t *ptr )
                                 ;    1547 {
                                 ;    1548     ptr->ipp1->PHYSET.WORD &= ~USB_HSEB;
                                 ;    1549 } /* eof usb_creg_clr_hseb() */
                                 ;    1550 /******************************************************************************
                                 ;    1551 Function Name   : usb_creg_write_repsel
                                 ;    1552 Description     : Set REPSEL bits.
                                 ;    1553 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1554 Return value    : none
                                 ;    1555 ******************************************************************************/
                                 ;    1556 void    usb_creg_write_repsel( USB_UTR_t *ptr )
                                 ;    1557 {
                                 ;    1558     ptr->ipp1->PHYSET.WORD &= ~USB_REPSEL;
                                 ;    1559     ptr->ipp1->PHYSET.WORD |= USB_REPSEL_16;
                                 ;    1560 } /* eof usb_creg_write_repsel() */
                                 ;    1561 #endif /* #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M) */
                                 ;    1562 /*************/
                                 ;    1563 /*  INTSTS0  */
                                 ;    1564 /*************/
                                 ;    1565 /* Interrupt Status Register 0 */
                                 ;    1566 
                                 ;    1567 /******************************************************************************
                                 ;    1568 Function Name   : usb_creg_read_intsts
                                 ;    1569 Description     : Returns INTSTS0 register content.
                                 ;    1570 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1571 Return value    : INTSTS0 content
                                 ;    1572 ******************************************************************************/
                                 ;    1573 uint16_t    usb_creg_read_intsts( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1573
000006D5 6080                    		SUB #08H, R0
000006D7 A009                    		MOV.L R1, 04H[R0]
                                 ;    1574 {
                                 ;    1575     return ptr->ipp->INTSTS0.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1575
000006D9 A891                    		MOV.L 08H[R1], R1
000006DB D5102001                		MOV.W 40H[R1], 02H[R0]
000006DF 9809                    		MOV.W 02H[R0], R1
000006E1                         L189:	; entry.split
                                 ;    1576 } /* eof usb_creg_read_intsts() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1576
000006E1 5F11                    		MOVU.W R1, R1
000006E3 6702                    		RTSD #08H
000006E5                         _usb_creg_write_intsts:
                                 		.STACK	_usb_creg_write_intsts=12
                                 ;    1577 
                                 ;    1578 /******************************************************************************
                                 ;    1579 Function Name   : usb_creg_write_intsts
                                 ;    1580 Description     : Data is written to INTSTS0 register.
                                 ;    1581 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1582                 : uint16_t  data  : The value to write.
                                 ;    1583 Return value    : none
                                 ;    1584 ******************************************************************************/
                                 ;    1585 void    usb_creg_write_intsts( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1585
000006E5 6080                    		SUB #08H, R0
000006E7 A009                    		MOV.L R1, 04H[R0]
000006E9 900A                    		MOV.W R2, 02H[R0]
                                 ;    1586 {
                                 ;    1587     ptr->ipp->INTSTS0.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1587
000006EB A809                    		MOV.L 04H[R0], R1
000006ED A891                    		MOV.L 08H[R1], R1
000006EF D71220                  		MOV.W R2, 40H[R1]
000006F2 6702                    		RTSD #08H
000006F4                         _usb_creg_clr_sts_vbint:
                                 		.STACK	_usb_creg_clr_sts_vbint=8
                                 ;    1588 } /* eof usb_creg_write_intsts() */
                                 ;    1589 
                                 ;    1590 /******************************************************************************
                                 ;    1591 Function Name   : usb_creg_clr_sts_vbint
                                 ;    1592 Description     : Clear the the VBINT status bit to clear its the VBUS inter-
                                 ;    1593                 : rupt status.
                                 ;    1594 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1595 Return value    : none
                                 ;    1596 ******************************************************************************/
                                 ;    1597 void    usb_creg_clr_sts_vbint( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1597
000006F4 6040                    		SUB #04H, R0
000006F6 E301                    		MOV.L R1, [R0]
                                 ;    1598 {
                                 ;    1599     ptr->ipp->INTSTS0.WORD = (uint16_t)~USB_VBINT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1599
000006F8 A891                    		MOV.L 08H[R1], R1
000006FA F91920FF7F              		MOV.W #7FFFH, 40H[R1]
000006FF 6701                    		RTSD #04H
00000701                         _usb_creg_clr_sts_sofr:
                                 		.STACK	_usb_creg_clr_sts_sofr=8
                                 ;    1600 } /* eof usb_creg_clr_sts_vbint() */
                                 ;    1601 
                                 ;    1602 /******************************************************************************
                                 ;    1603 Function Name   : usb_creg_clr_sts_sofr
                                 ;    1604 Description     : Clear the SOFR-bit (Frame Number Refresh Interrupt Status) of 
                                 ;    1605                 : the clear SOF interrupt status.
                                 ;    1606 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1607 Return value    : none
                                 ;    1608 ******************************************************************************/
                                 ;    1609 void    usb_creg_clr_sts_sofr( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1609
00000701 6040                    		SUB #04H, R0
00000703 E301                    		MOV.L R1, [R0]
                                 ;    1610 {
                                 ;    1611     ptr->ipp->INTSTS0.WORD = (uint16_t)~USB_SOFR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1611
00000705 A891                    		MOV.L 08H[R1], R1
00000707 F91920FFDF              		MOV.W #0DFFFH, 40H[R1]
0000070C 6701                    		RTSD #04H
0000070E                         _usb_creg_read_brdysts:
                                 		.STACK	_usb_creg_read_brdysts=12
                                 ;    1612 } /* eof usb_creg_clr_sts_sofr() */
                                 ;    1613 
                                 ;    1614 
                                 ;    1615 /*************/
                                 ;    1616 /*  INTSTS1  */
                                 ;    1617 /*************/
                                 ;    1618 /* Interrupt Status Register 1 */
                                 ;    1619 
                                 ;    1620 
                                 ;    1621 /************/
                                 ;    1622 /* BRDYSTS  */
                                 ;    1623 /************/
                                 ;    1624 /* BRDY (buffer ready) Interrupt Status Register */
                                 ;    1625 
                                 ;    1626 /******************************************************************************
                                 ;    1627 Function Name   : usb_creg_read_brdysts
                                 ;    1628 Description     : Returns BRDYSTS register content.
                                 ;    1629 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1630 Return value    : BRDYSTS content
                                 ;    1631 ******************************************************************************/
                                 ;    1632 uint16_t    usb_creg_read_brdysts( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1632
0000070E 6080                    		SUB #08H, R0
00000710 A009                    		MOV.L R1, 04H[R0]
                                 ;    1633 {
                                 ;    1634     return ptr->ipp->BRDYSTS.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1634
00000712 A891                    		MOV.L 08H[R1], R1
00000714 D5102301                		MOV.W 46H[R1], 02H[R0]
00000718 9809                    		MOV.W 02H[R0], R1
0000071A                         L194:	; entry.split
                                 ;    1635 } /* eof usb_creg_read_brdysts() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1635
0000071A 5F11                    		MOVU.W R1, R1
0000071C 6702                    		RTSD #08H
0000071E                         _usb_creg_write_brdysts:
                                 		.STACK	_usb_creg_write_brdysts=12
                                 ;    1636 
                                 ;    1637 /******************************************************************************
                                 ;    1638 Function Name   : usb_creg_write_brdysts
                                 ;    1639 Description     : Data is written to BRDYSTS register, to set the BRDY interrupt status.
                                 ;    1640 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1641                 : uint16_t  data  : The value to write.
                                 ;    1642 Return value    : none
                                 ;    1643 ******************************************************************************/
                                 ;    1644 void        usb_creg_write_brdysts( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1644
0000071E 6080                    		SUB #08H, R0
00000720 A009                    		MOV.L R1, 04H[R0]
00000722 900A                    		MOV.W R2, 02H[R0]
                                 ;    1645 {
                                 ;    1646     ptr->ipp->BRDYSTS.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1646
00000724 A809                    		MOV.L 04H[R0], R1
00000726 A891                    		MOV.L 08H[R1], R1
00000728 D71223                  		MOV.W R2, 46H[R1]
0000072B 6702                    		RTSD #08H
0000072D                         _usb_creg_clr_sts_brdy:
                                 		.STACK	_usb_creg_clr_sts_brdy=12
                                 ;    1647 } /* eof usb_creg_write_brdysts() */
                                 ;    1648 
                                 ;    1649 /******************************************************************************
                                 ;    1650 Function Name   : usb_creg_clr_sts_brdy
                                 ;    1651 Description     : Clear the PIPExBRDY status bit of the specified pipe to clear 
                                 ;    1652                 : its BRDY interrupt status.
                                 ;    1653 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1654                 : uint16_t  pipeno: Pipe number.
                                 ;    1655 Return value    : none
                                 ;    1656 ******************************************************************************/
                                 ;    1657 void    usb_creg_clr_sts_brdy( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1657
0000072D 6080                    		SUB #08H, R0
0000072F A009                    		MOV.L R1, 04H[R0]
00000731 900A                    		MOV.W R2, 02H[R0]
00000733 FBE6FF                  		MOV.L #0FFFFFFFFH, R14
                                 ;    1658 {
                                 ;    1659     ptr->ipp->BRDYSTS.WORD = (uint16_t)~(1 << pipeno);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1659
00000736 B809                    		MOVU.W 02H[R0], R1
00000738 FC6FE1                  		BNOT R1, R14
0000073B A809                    		MOV.L 04H[R0], R1
0000073D A891                    		MOV.L 08H[R1], R1
0000073F D71E23                  		MOV.W R14, 46H[R1]
00000742 6702                    		RTSD #08H
00000744                         _usb_creg_read_nrdysts:
                                 		.STACK	_usb_creg_read_nrdysts=12
                                 ;    1660 } /* eof usb_creg_clr_sts_brdy() */
                                 ;    1661 
                                 ;    1662 
                                 ;    1663 /************/
                                 ;    1664 /* NRDYSTS  */
                                 ;    1665 /************/
                                 ;    1666 /* NRDY (not ready) Interrupt Status Register */
                                 ;    1667 /******************************************************************************
                                 ;    1668 Function Name   : usb_creg_read_brdysts
                                 ;    1669 Description     : Returns NRDYSTS register content.
                                 ;    1670 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1671 Return value    : NRDYSTS content
                                 ;    1672 ******************************************************************************/
                                 ;    1673 uint16_t    usb_creg_read_nrdysts( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1673
00000744 6080                    		SUB #08H, R0
00000746 A009                    		MOV.L R1, 04H[R0]
                                 ;    1674 {
                                 ;    1675     return (uint16_t)ptr->ipp->NRDYSTS.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1675
00000748 A891                    		MOV.L 08H[R1], R1
0000074A D5102401                		MOV.W 48H[R1], 02H[R0]
0000074E 9809                    		MOV.W 02H[R0], R1
00000750                         L198:	; entry.split
                                 ;    1676 } /* eof usb_creg_read_brdysts() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1676
00000750 5F11                    		MOVU.W R1, R1
00000752 6702                    		RTSD #08H
00000754                         _usb_creg_write_nrdysts:
                                 		.STACK	_usb_creg_write_nrdysts=12
                                 ;    1677 
                                 ;    1678 /******************************************************************************
                                 ;    1679 Function Name   : usb_creg_write_nrdysts
                                 ;    1680 Description     : Data is written to NRDYSTS register, to
                                 ;    1681                 : set the NRDY interrupt status.
                                 ;    1682 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1683                 : uint16_t  data  : The value to write.
                                 ;    1684 Return value    : none
                                 ;    1685 ******************************************************************************/
                                 ;    1686 void        usb_creg_write_nrdysts( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1686
00000754 6080                    		SUB #08H, R0
00000756 A009                    		MOV.L R1, 04H[R0]
00000758 900A                    		MOV.W R2, 02H[R0]
                                 ;    1687 {
                                 ;    1688     ptr->ipp->NRDYSTS.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1688
0000075A A809                    		MOV.L 04H[R0], R1
0000075C A891                    		MOV.L 08H[R1], R1
0000075E D71224                  		MOV.W R2, 48H[R1]
00000761 6702                    		RTSD #08H
00000763                         _usb_creg_clr_sts_nrdy:
                                 		.STACK	_usb_creg_clr_sts_nrdy=12
                                 ;    1689 } /* eof usb_creg_write_nrdysts() */
                                 ;    1690 
                                 ;    1691 /******************************************************************************
                                 ;    1692 Function Name   : usb_creg_clr_sts_nrdy
                                 ;    1693 Description     : Clear the PIPExNRDY status bit of the specified pipe to clear 
                                 ;    1694                 : its NRDY interrupt status.
                                 ;    1695 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1696                 : uint16_t  pipeno: Pipe number.
                                 ;    1697 Return value    : none
                                 ;    1698 ******************************************************************************/
                                 ;    1699 void    usb_creg_clr_sts_nrdy( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1699
00000763 6080                    		SUB #08H, R0
00000765 A009                    		MOV.L R1, 04H[R0]
00000767 900A                    		MOV.W R2, 02H[R0]
00000769 FBE6FF                  		MOV.L #0FFFFFFFFH, R14
                                 ;    1700 {
                                 ;    1701     ptr->ipp->NRDYSTS.WORD = (uint16_t)~(1 << pipeno);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1701
0000076C B809                    		MOVU.W 02H[R0], R1
0000076E FC6FE1                  		BNOT R1, R14
00000771 A809                    		MOV.L 04H[R0], R1
00000773 A891                    		MOV.L 08H[R1], R1
00000775 D71E24                  		MOV.W R14, 48H[R1]
00000778 6702                    		RTSD #08H
0000077A                         _usb_creg_read_bempsts:
                                 		.STACK	_usb_creg_read_bempsts=12
                                 ;    1702 } /* eof usb_creg_clr_sts_nrdy() */
                                 ;    1703 
                                 ;    1704 
                                 ;    1705 /************/
                                 ;    1706 /* BEMPSTS  */
                                 ;    1707 /************/
                                 ;    1708 /* BEMP Interrupt Status Register */
                                 ;    1709 
                                 ;    1710 /******************************************************************************
                                 ;    1711 Function Name   : usb_creg_read_bempsts
                                 ;    1712 Description     : Returns BEMPSTS register content.
                                 ;    1713 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1714 Return value    : BEMPSTS content
                                 ;    1715 ******************************************************************************/
                                 ;    1716 uint16_t    usb_creg_read_bempsts( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1716
0000077A 6080                    		SUB #08H, R0
0000077C A009                    		MOV.L R1, 04H[R0]
                                 ;    1717 {
                                 ;    1718     return (uint16_t)ptr->ipp->BEMPSTS.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1718
0000077E A891                    		MOV.L 08H[R1], R1
00000780 D5102501                		MOV.W 4AH[R1], 02H[R0]
00000784 9809                    		MOV.W 02H[R0], R1
00000786                         L202:	; entry.split
                                 ;    1719 } /* eof usb_creg_read_bempsts() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1719
00000786 5F11                    		MOVU.W R1, R1
00000788 6702                    		RTSD #08H
0000078A                         _usb_creg_write_bempsts:
                                 		.STACK	_usb_creg_write_bempsts=12
                                 ;    1720 
                                 ;    1721 /******************************************************************************
                                 ;    1722 Function Name   : usb_creg_write_bempsts
                                 ;    1723 Description     : Data is written to BEMPSTS register, to set the BEMP interrupt status.
                                 ;    1724 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1725                 : uint16_t  data        : The value to write.
                                 ;    1726 Return value    : none
                                 ;    1727 ******************************************************************************/
                                 ;    1728 void    usb_creg_write_bempsts( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1728
0000078A 6080                    		SUB #08H, R0
0000078C A009                    		MOV.L R1, 04H[R0]
0000078E 900A                    		MOV.W R2, 02H[R0]
                                 ;    1729 {
                                 ;    1730     ptr->ipp->BEMPSTS.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1730
00000790 A809                    		MOV.L 04H[R0], R1
00000792 A891                    		MOV.L 08H[R1], R1
00000794 D71225                  		MOV.W R2, 4AH[R1]
00000797 6702                    		RTSD #08H
00000799                         _usb_creg_clr_sts_bemp:
                                 		.STACK	_usb_creg_clr_sts_bemp=12
                                 ;    1731 } /* eof usb_creg_write_bempsts() */
                                 ;    1732 
                                 ;    1733 /******************************************************************************
                                 ;    1734 Function Name   : usb_creg_clr_sts_bemp
                                 ;    1735 Description     : Clear the PIPExBEMP status bit of the specified pipe to clear 
                                 ;    1736                 : its BEMP interrupt status.
                                 ;    1737 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1738                 : uint16_t  pipeno: Pipe number.
                                 ;    1739 Return value    : none
                                 ;    1740 ******************************************************************************/
                                 ;    1741 void    usb_creg_clr_sts_bemp( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1741
00000799 6080                    		SUB #08H, R0
0000079B A009                    		MOV.L R1, 04H[R0]
0000079D 900A                    		MOV.W R2, 02H[R0]
0000079F FBE6FF                  		MOV.L #0FFFFFFFFH, R14
                                 ;    1742 {
                                 ;    1743     ptr->ipp->BEMPSTS.WORD = (uint16_t)~(1 << pipeno);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1743
000007A2 B809                    		MOVU.W 02H[R0], R1
000007A4 FC6FE1                  		BNOT R1, R14
000007A7 A809                    		MOV.L 04H[R0], R1
000007A9 A891                    		MOV.L 08H[R1], R1
000007AB D71E25                  		MOV.W R14, 4AH[R1]
000007AE 6702                    		RTSD #08H
000007B0                         _usb_creg_read_frmnum:
                                 		.STACK	_usb_creg_read_frmnum=12
                                 ;    1744 } /* eof usb_creg_clr_sts_bemp() */
                                 ;    1745 
                                 ;    1746 
                                 ;    1747 /************/
                                 ;    1748 /* FRMNUM   */
                                 ;    1749 /************/
                                 ;    1750 /* Frame Number Register */
                                 ;    1751 
                                 ;    1752 /******************************************************************************
                                 ;    1753 Function Name   : usb_creg_read_frmnum
                                 ;    1754 Description     : Returns FRMNUM register content.
                                 ;    1755 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1756 Return value    : FRMNUM content
                                 ;    1757 ******************************************************************************/
                                 ;    1758 uint16_t    usb_creg_read_frmnum( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1758
000007B0 6080                    		SUB #08H, R0
000007B2 A009                    		MOV.L R1, 04H[R0]
                                 ;    1759 {
                                 ;    1760     return (uint16_t)ptr->ipp->FRMNUM.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1760
000007B4 A891                    		MOV.L 08H[R1], R1
000007B6 D5102601                		MOV.W 4CH[R1], 02H[R0]
000007BA 9809                    		MOV.W 02H[R0], R1
000007BC                         L206:	; entry.split
                                 ;    1761 } /* eof usb_creg_read_frmnum() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1761
000007BC 5F11                    		MOVU.W R1, R1
000007BE 6702                    		RTSD #08H
000007C0                         _usb_creg_read_usbaddr:
                                 		.STACK	_usb_creg_read_usbaddr=12
                                 ;    1762 
                                 ;    1763 
                                 ;    1764 /************/
                                 ;    1765 /* USBADDR  */
                                 ;    1766 /************/
                                 ;    1767 /* USB Address Register */
                                 ;    1768 
                                 ;    1769 /******************************************************************************
                                 ;    1770 Function Name   : usb_creg_read_usbaddr
                                 ;    1771 Description     : Returns USBADDR register content.
                                 ;    1772 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1773 Return value    : USBADDR content
                                 ;    1774 ******************************************************************************/
                                 ;    1775 uint16_t    usb_creg_read_usbaddr( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1775
000007C0 6080                    		SUB #08H, R0
000007C2 A009                    		MOV.L R1, 04H[R0]
                                 ;    1776 {
                                 ;    1777     return (uint16_t)ptr->ipp->USBADDR.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1777
000007C4 A891                    		MOV.L 08H[R1], R1
000007C6 D5102801                		MOV.W 50H[R1], 02H[R0]
000007CA 9809                    		MOV.W 02H[R0], R1
000007CC                         L208:	; entry.split
                                 ;    1778 } /* eof usb_creg_read_usbaddr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1778
000007CC 5F11                    		MOVU.W R1, R1
000007CE 6702                    		RTSD #08H
000007D0                         _usb_creg_set_stsrecov:
                                 		.STACK	_usb_creg_set_stsrecov=12
                                 ;    1779 
                                 ;    1780 /******************************************************************************
                                 ;    1781 Function Name   : usb_creg_set_stsrecov
                                 ;    1782 Description     : STSRECOV-bits are set in USBADDR register
                                 ;    1783 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1784                 : uint16_t  data  : Value to be set.
                                 ;    1785 Return value    : none
                                 ;    1786 ******************************************************************************/
                                 ;    1787 void    usb_creg_set_stsrecov( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1787
000007D0 6080                    		SUB #08H, R0
000007D2 A009                    		MOV.L R1, 04H[R0]
000007D4 900A                    		MOV.W R2, 02H[R0]
                                 ;    1788 {
                                 ;    1789     ptr->ipp->USBADDR.BIT.STSRECOV = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1789
000007D6 6C82                    		SHLL #08H, R2
000007D8 7622000F                		AND #0F00H, R2
000007DC A809                    		MOV.L 04H[R0], R1
000007DE A891                    		MOV.L 08H[R1], R1
000007E0 5D1E28                  		MOVU.W 50H[R1], R14
000007E3 772EFFF000              		AND #0F0FFH, R14
000007E8 572E                    		OR R2, R14
000007EA D71E28                  		MOV.W R14, 50H[R1]
000007ED 6702                    		RTSD #08H
000007EF                         _usb_creg_read_usbreq:
                                 		.STACK	_usb_creg_read_usbreq=12
                                 ;    1790 } /* eof usb_creg_set_stsrecov() */
                                 ;    1791 
                                 ;    1792 
                                 ;    1793 /************/
                                 ;    1794 /* USBREQ   */
                                 ;    1795 /************/
                                 ;    1796 /* USB Request Type Register (bRequest and bmRequestType) */
                                 ;    1797 
                                 ;    1798 /******************************************************************************
                                 ;    1799 Function Name   : usb_creg_read_usbreq
                                 ;    1800 Description     : Returns USBREQ register content.
                                 ;    1801 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1802 Return value    : USBREQ content
                                 ;    1803 ******************************************************************************/
                                 ;    1804 uint16_t    usb_creg_read_usbreq( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1804
000007EF 6080                    		SUB #08H, R0
000007F1 A009                    		MOV.L R1, 04H[R0]
                                 ;    1805 {
                                 ;    1806     return (uint16_t)ptr->ipp->USBREQ.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1806
000007F3 A891                    		MOV.L 08H[R1], R1
000007F5 D5102A01                		MOV.W 54H[R1], 02H[R0]
000007F9 9809                    		MOV.W 02H[R0], R1
000007FB                         L211:	; entry.split
                                 ;    1807 } /* eof usb_creg_read_usbreq() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1807
000007FB 5F11                    		MOVU.W R1, R1
000007FD 6702                    		RTSD #08H
000007FF                         _usb_creg_read_usbval:
                                 		.STACK	_usb_creg_read_usbval=12
                                 ;    1808 
                                 ;    1809 
                                 ;    1810 /************/
                                 ;    1811 /* USBVAL   */
                                 ;    1812 /************/
                                 ;    1813 /* USB Request Value Register (wValue) */
                                 ;    1814 
                                 ;    1815 /******************************************************************************
                                 ;    1816 Function Name   : usb_creg_read_usbval
                                 ;    1817 Description     : Returns USBVAL register content.
                                 ;    1818 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1819 Return value    : USBVAL content
                                 ;    1820 ******************************************************************************/
                                 ;    1821 uint16_t    usb_creg_read_usbval( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1821
000007FF 6080                    		SUB #08H, R0
00000801 A009                    		MOV.L R1, 04H[R0]
                                 ;    1822 {
                                 ;    1823     return (uint16_t)ptr->ipp->USBVAL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1823
00000803 A891                    		MOV.L 08H[R1], R1
00000805 D5102B01                		MOV.W 56H[R1], 02H[R0]
00000809 9809                    		MOV.W 02H[R0], R1
0000080B                         L213:	; entry.split
                                 ;    1824 } /* eof usb_creg_read_usbval() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1824
0000080B 5F11                    		MOVU.W R1, R1
0000080D 6702                    		RTSD #08H
0000080F                         _usb_creg_read_usbindx:
                                 		.STACK	_usb_creg_read_usbindx=12
                                 ;    1825 
                                 ;    1826 
                                 ;    1827 /************/
                                 ;    1828 /* USBINDX  */
                                 ;    1829 /************/
                                 ;    1830 /* USB Request Index Register (wIndex) */
                                 ;    1831 
                                 ;    1832 /******************************************************************************
                                 ;    1833 Function Name   : usb_creg_read_usbindx
                                 ;    1834 Description     : Returns USBINDX register content.
                                 ;    1835 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1836 Return value    : USBINDX content
                                 ;    1837 ******************************************************************************/
                                 ;    1838 uint16_t    usb_creg_read_usbindx( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1838
0000080F 6080                    		SUB #08H, R0
00000811 A009                    		MOV.L R1, 04H[R0]
                                 ;    1839 {
                                 ;    1840     return (uint16_t)ptr->ipp->USBINDX;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1840
00000813 A891                    		MOV.L 08H[R1], R1
00000815 D5102C01                		MOV.W 58H[R1], 02H[R0]
00000819 9809                    		MOV.W 02H[R0], R1
0000081B                         L215:	; entry.split
                                 ;    1841 } /* eof usb_creg_read_usbindx() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1841
0000081B 5F11                    		MOVU.W R1, R1
0000081D 6702                    		RTSD #08H
0000081F                         _usb_creg_read_usbleng:
                                 		.STACK	_usb_creg_read_usbleng=12
                                 ;    1842 
                                 ;    1843 
                                 ;    1844 /************/
                                 ;    1845 /* USBLENG  */
                                 ;    1846 /************/
                                 ;    1847 /* USB Request Length Register (wLength) */
                                 ;    1848 
                                 ;    1849 /******************************************************************************
                                 ;    1850 Function Name   : usb_creg_read_usbleng
                                 ;    1851 Description     : Returns USBLENG register content.
                                 ;    1852 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1853 Return value    : USBLENG content
                                 ;    1854 ******************************************************************************/
                                 ;    1855 uint16_t    usb_creg_read_usbleng( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1855
0000081F 6080                    		SUB #08H, R0
00000821 A009                    		MOV.L R1, 04H[R0]
                                 ;    1856 {
                                 ;    1857     return (uint16_t)ptr->ipp->USBLENG;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1857
00000823 A891                    		MOV.L 08H[R1], R1
00000825 D5102D01                		MOV.W 5AH[R1], 02H[R0]
00000829 9809                    		MOV.W 02H[R0], R1
0000082B                         L217:	; entry.split
                                 ;    1858 } /* eof usb_creg_read_usbleng() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1858
0000082B 5F11                    		MOVU.W R1, R1
0000082D 6702                    		RTSD #08H
0000082F                         _usb_creg_read_dcpcfg:
                                 		.STACK	_usb_creg_read_dcpcfg=12
                                 ;    1859 
                                 ;    1860 
                                 ;    1861 /************/
                                 ;    1862 /* DCPCFG   */
                                 ;    1863 /************/
                                 ;    1864 /* DCP Configuration Register */
                                 ;    1865 
                                 ;    1866 /******************************************************************************
                                 ;    1867 Function Name   : usb_creg_read_dcpcfg
                                 ;    1868 Description     : Returns DCPCFG register content.
                                 ;    1869 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1870 Return value    : DCPCFG content
                                 ;    1871 ******************************************************************************/
                                 ;    1872 uint16_t    usb_creg_read_dcpcfg( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1872
0000082F 6080                    		SUB #08H, R0
00000831 A009                    		MOV.L R1, 04H[R0]
                                 ;    1873 {
                                 ;    1874     return (uint16_t)ptr->ipp->DCPCFG.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1874
00000833 A891                    		MOV.L 08H[R1], R1
00000835 D5102E01                		MOV.W 5CH[R1], 02H[R0]
00000839 9809                    		MOV.W 02H[R0], R1
0000083B                         L219:	; entry.split
                                 ;    1875 } /* eof usb_creg_read_dcpcfg() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1875
0000083B 5F11                    		MOVU.W R1, R1
0000083D 6702                    		RTSD #08H
0000083F                         _usb_creg_write_dcpcfg:
                                 		.STACK	_usb_creg_write_dcpcfg=12
                                 ;    1876 
                                 ;    1877 /******************************************************************************
                                 ;    1878 Function Name   : usb_creg_write_dcpcfg
                                 ;    1879 Description     : Specified data is written to DCPCFG register.
                                 ;    1880 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1881                 : uint16_t  data
                                 ;    1882 Return value    : none
                                 ;    1883 ******************************************************************************/
                                 ;    1884 void    usb_creg_write_dcpcfg( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1884
0000083F 6080                    		SUB #08H, R0
00000841 A009                    		MOV.L R1, 04H[R0]
00000843 900A                    		MOV.W R2, 02H[R0]
                                 ;    1885 {
                                 ;    1886     ptr->ipp->DCPCFG.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1886
00000845 A809                    		MOV.L 04H[R0], R1
00000847 A891                    		MOV.L 08H[R1], R1
00000849 D7122E                  		MOV.W R2, 5CH[R1]
0000084C 6702                    		RTSD #08H
0000084E                         _usb_creg_set_dcpshtnak:
                                 		.STACK	_usb_creg_set_dcpshtnak=8
                                 ;    1887 } /* eof usb_creg_write_dcpcfg()*/
                                 ;    1888 
                                 ;    1889 /******************************************************************************
                                 ;    1890 Function Name   : usb_creg_set_dcpshtnak
                                 ;    1891 Description     : SHTNAK-bit in the DCPCFG register is set.
                                 ;    1892                 : = Pipe disabled at end of transfer.
                                 ;    1893 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1894 Return value    : none
                                 ;    1895 ******************************************************************************/
                                 ;    1896 void    usb_creg_set_dcpshtnak( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1896
0000084E 6040                    		SUB #04H, R0
00000850 E301                    		MOV.L R1, [R0]
                                 ;    1897 {
                                 ;    1898     ptr->ipp->DCPCFG.WORD |= USB_SHTNAKON;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1898
00000852 A891                    		MOV.L 08H[R1], R1
00000854 DD1E2E                  		MOV.W 5CH[R1], R14
00000857 787E                    		BSET #07H, R14
00000859 D71E2E                  		MOV.W R14, 5CH[R1]
0000085C 6701                    		RTSD #04H
0000085E                         _usb_creg_read_dcpmaxp:
                                 		.STACK	_usb_creg_read_dcpmaxp=12
                                 ;    1899 } /* eof usb_creg_set_dcpshtnak() */
                                 ;    1900 
                                 ;    1901 
                                 ;    1902 /************/
                                 ;    1903 /* DCPMAXP  */
                                 ;    1904 /************/
                                 ;    1905 /* DCP Maximum Packet Size Register */
                                 ;    1906 
                                 ;    1907 /******************************************************************************
                                 ;    1908 Function Name   : usb_creg_read_dcpmaxp
                                 ;    1909 Description     : Returns DCPMAXP register content.
                                 ;    1910 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1911 Return value    : DCPMAXP content
                                 ;    1912 ******************************************************************************/
                                 ;    1913 uint16_t    usb_creg_read_dcpmaxp( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1913
0000085E 6080                    		SUB #08H, R0
00000860 A009                    		MOV.L R1, 04H[R0]
                                 ;    1914 {
                                 ;    1915     return (uint16_t)ptr->ipp->DCPMAXP.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1915
00000862 A891                    		MOV.L 08H[R1], R1
00000864 D5102F01                		MOV.W 5EH[R1], 02H[R0]
00000868 9809                    		MOV.W 02H[R0], R1
0000086A                         L223:	; entry.split
                                 ;    1916 } /* eof usb_creg_read_dcpmaxp() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1916
0000086A 5F11                    		MOVU.W R1, R1
0000086C 6702                    		RTSD #08H
0000086E                         _usb_creg_write_dcpmxps:
                                 		.STACK	_usb_creg_write_dcpmxps=12
                                 ;    1917 
                                 ;    1918 /******************************************************************************
                                 ;    1919 Function Name   : usb_creg_write_dcpmxps
                                 ;    1920 Description     : Specified data is written to DCPMAXP register.
                                 ;    1921 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1922                 : uint16_t  data  : The value to write.
                                 ;    1923 Return value    : none
                                 ;    1924 ******************************************************************************/
                                 ;    1925 void    usb_creg_write_dcpmxps( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1925
0000086E 6080                    		SUB #08H, R0
00000870 A009                    		MOV.L R1, 04H[R0]
00000872 900A                    		MOV.W R2, 02H[R0]
                                 ;    1926 {
                                 ;    1927     ptr->ipp->DCPMAXP.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1927
00000874 A809                    		MOV.L 04H[R0], R1
00000876 A891                    		MOV.L 08H[R1], R1
00000878 D7122F                  		MOV.W R2, 5EH[R1]
0000087B 6702                    		RTSD #08H
0000087D                         _usb_creg_read_dcpctr:
                                 		.STACK	_usb_creg_read_dcpctr=12
                                 ;    1928 } /* eof usb_creg_write_dcpmxps() */
                                 ;    1929 
                                 ;    1930 
                                 ;    1931 /************/
                                 ;    1932 /* DCPCTR   */
                                 ;    1933 /************/
                                 ;    1934 /* DCP Control Register */
                                 ;    1935 
                                 ;    1936 /******************************************************************************
                                 ;    1937 Function Name   : usb_creg_read_dcpctr
                                 ;    1938 Description     : Returns DCPCTR register content.
                                 ;    1939 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1940 Return value    : DCPCTR content
                                 ;    1941 ******************************************************************************/
                                 ;    1942 uint16_t    usb_creg_read_dcpctr( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1942
0000087D 6080                    		SUB #08H, R0
0000087F A009                    		MOV.L R1, 04H[R0]
                                 ;    1943 {
                                 ;    1944     return (uint16_t)ptr->ipp->DCPCTR.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1944
00000881 A891                    		MOV.L 08H[R1], R1
00000883 D5103001                		MOV.W 60H[R1], 02H[R0]
00000887 9809                    		MOV.W 02H[R0], R1
00000889                         L226:	; entry.split
                                 ;    1945 } /* eof usb_creg_read_dcpctr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1945
00000889 5F11                    		MOVU.W R1, R1
0000088B 6702                    		RTSD #08H
0000088D                         _usb_creg_read_pipesel:
                                 		.STACK	_usb_creg_read_pipesel=12
                                 ;    1946 
                                 ;    1947 
                                 ;    1948 /************/
                                 ;    1949 /* PIPESEL  */
                                 ;    1950 /************/
                                 ;    1951 /* Pipe Window Select Register */
                                 ;    1952 /******************************************************************************
                                 ;    1953 Function Name   : usb_creg_read_pipesel
                                 ;    1954 Description     : Returns PIPESEL register content.
                                 ;    1955 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1956 Return value    : PIPESEL content
                                 ;    1957 ******************************************************************************/
                                 ;    1958 uint16_t    usb_creg_read_pipesel( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1958
0000088D 6080                    		SUB #08H, R0
0000088F A009                    		MOV.L R1, 04H[R0]
                                 ;    1959 {
                                 ;    1960     return (uint16_t)ptr->ipp->PIPESEL.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1960
00000891 A891                    		MOV.L 08H[R1], R1
00000893 D5103201                		MOV.W 64H[R1], 02H[R0]
00000897 9809                    		MOV.W 02H[R0], R1
00000899                         L228:	; entry.split
                                 ;    1961 } /* eof usb_creg_read_pipesel() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1961
00000899 5F11                    		MOVU.W R1, R1
0000089B 6702                    		RTSD #08H
0000089D                         _usb_creg_write_pipesel:
                                 		.STACK	_usb_creg_write_pipesel=12
                                 ;    1962 
                                 ;    1963 /******************************************************************************
                                 ;    1964 Function Name   : usb_creg_write_pipesel
                                 ;    1965 Description     : Specified data is written to PIPESEL register.
                                 ;    1966 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1967                 : uint16_t  data  : The value to write.
                                 ;    1968 Return value    : none
                                 ;    1969 ******************************************************************************/
                                 ;    1970 void    usb_creg_write_pipesel( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1970
0000089D 6080                    		SUB #08H, R0
0000089F A009                    		MOV.L R1, 04H[R0]
000008A1 900A                    		MOV.W R2, 02H[R0]
                                 ;    1971 {
                                 ;    1972     ptr->ipp->PIPESEL.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1972
000008A3 A809                    		MOV.L 04H[R0], R1
000008A5 A891                    		MOV.L 08H[R1], R1
000008A7 D71232                  		MOV.W R2, 64H[R1]
000008AA 6702                    		RTSD #08H
000008AC                         _usb_creg_read_pipecfg:
                                 		.STACK	_usb_creg_read_pipecfg=12
                                 ;    1973 } /* eof usb_creg_write_pipesel() */
                                 ;    1974 
                                 ;    1975 
                                 ;    1976 /************/
                                 ;    1977 /* PIPECFG  */
                                 ;    1978 /************/
                                 ;    1979 /* Pipe Configuration Register */
                                 ;    1980 
                                 ;    1981 /******************************************************************************
                                 ;    1982 Function Name   : usb_creg_read_pipecfg
                                 ;    1983 Description     : Returns PIPECFG register content.
                                 ;    1984 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1985 Return value    : PIPECFG content
                                 ;    1986 ******************************************************************************/
                                 ;    1987 uint16_t    usb_creg_read_pipecfg( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1987
000008AC 6080                    		SUB #08H, R0
000008AE A009                    		MOV.L R1, 04H[R0]
                                 ;    1988 {
                                 ;    1989     return (uint16_t)ptr->ipp->PIPECFG.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1989
000008B0 A891                    		MOV.L 08H[R1], R1
000008B2 D5103401                		MOV.W 68H[R1], 02H[R0]
000008B6 9809                    		MOV.W 02H[R0], R1
000008B8                         L231:	; entry.split
                                 ;    1990 } /* eof usb_creg_read_pipecfg() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1990
000008B8 5F11                    		MOVU.W R1, R1
000008BA 6702                    		RTSD #08H
000008BC                         _usb_creg_write_pipecfg:
                                 		.STACK	_usb_creg_write_pipecfg=12
                                 ;    1991 
                                 ;    1992 /******************************************************************************
                                 ;    1993 Function Name   : usb_creg_write_pipecfg
                                 ;    1994 Description     : Specified data is written to PIPECFG register.
                                 ;    1995 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    1996                 : uint16_t  data  : The value to write.
                                 ;    1997 Return value    : none
                                 ;    1998 ******************************************************************************/
                                 ;    1999 void    usb_creg_write_pipecfg( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",1999
000008BC 6080                    		SUB #08H, R0
000008BE A009                    		MOV.L R1, 04H[R0]
000008C0 900A                    		MOV.W R2, 02H[R0]
                                 ;    2000 {
                                 ;    2001     ptr->ipp->PIPECFG.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2001
000008C2 A809                    		MOV.L 04H[R0], R1
000008C4 A891                    		MOV.L 08H[R1], R1
000008C6 D71234                  		MOV.W R2, 68H[R1]
000008C9 6702                    		RTSD #08H
000008CB                         _usb_creg_set_type:
                                 		.STACK	_usb_creg_set_type=12
                                 ;    2002 } /* eof usb_creg_write_pipecfg() */
                                 ;    2003 
                                 ;    2004 /******************************************************************************
                                 ;    2005 Function Name   : usb_creg_set_type
                                 ;    2006 Description     : Specified Transfer Type is set in PIPECFG register.
                                 ;    2007 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2008                 : uint16_t  data  : BULK/INT/ISO
                                 ;    2009 Return value    : none
                                 ;    2010 ******************************************************************************/
                                 ;    2011 void    usb_creg_set_type( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2011
000008CB 6080                    		SUB #08H, R0
000008CD A009                    		MOV.L R1, 04H[R0]
000008CF 900A                    		MOV.W R2, 02H[R0]
                                 ;    2012 {
                                 ;    2013     ptr->ipp->PIPECFG.WORD &= (uint16_t)~USB_TYPE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2013
000008D1 A809                    		MOV.L 04H[R0], R1
000008D3 A891                    		MOV.L 08H[R1], R1
000008D5 5D1E34                  		MOVU.W 68H[R1], R14
000008D8 762EFF3F                		AND #3FFFH, R14
000008DC D71E34                  		MOV.W R14, 68H[R1]
000008DF                         L234:	; entry.split
                                 ;    2014     ptr->ipp->PIPECFG.WORD |= (data << USB_TYPE_NUM_SHIFT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2014
000008DF 9809                    		MOV.W 02H[R0], R1
000008E1 6CE1                    		SHLL #0EH, R1
000008E3 A80A                    		MOV.L 04H[R0], R2
000008E5 A8A2                    		MOV.L 08H[R2], R2
000008E7 06D52134                		OR 68H[R2].UW, R1
000008EB D72134                  		MOV.W R1, 68H[R2]
000008EE 6702                    		RTSD #08H
000008F0                         _usb_creg_write_pipebuf:
                                 		.STACK	_usb_creg_write_pipebuf=12
                                 ;    2015 } /* eof usb_creg_set_type() */
                                 ;    2016 
                                 ;    2017 /************/
                                 ;    2018 /* PIPEBUF  */
                                 ;    2019 /************/
                                 ;    2020 /* - */
                                 ;    2021 
                                 ;    2022 /******************************************************************************
                                 ;    2023 Function Name   : usb_creg_write_pipebuf
                                 ;    2024 Description     : Specified the value by 2nd argument is set to PIPEBUF register.
                                 ;    2025 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2026                 : uint16_t  data  : The value to write.
                                 ;    2027 Return value    : none
                                 ;    2028 ******************************************************************************/
                                 ;    2029 void    usb_creg_write_pipebuf( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2029
000008F0 6080                    		SUB #08H, R0
000008F2 A009                    		MOV.L R1, 04H[R0]
000008F4 900A                    		MOV.W R2, 02H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2037
000008F6 6702                    		RTSD #08H
000008F8                         _usb_creg_read_pipemaxp:
                                 		.STACK	_usb_creg_read_pipemaxp=12
                                 ;    2030 {
                                 ;    2031 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;    2032     if(ptr->ip == USB_USBIP_1)
                                 ;    2033     {
                                 ;    2034         ptr->ipp1->PIPEBUF.WORD = data;
                                 ;    2035     }
                                 ;    2036 #endif /* #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M) */
                                 ;    2037 } /* eof usb_creg_write_pipebuf() */
                                 ;    2038 
                                 ;    2039 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;    2040 /******************************************************************************
                                 ;    2041 Function Name   : usb_creg_read_pipebuf
                                 ;    2042 Description     : Returns PIPECFG register content.
                                 ;    2043 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2044 Return value    : PIPEBUF content
                                 ;    2045 ******************************************************************************/
                                 ;    2046 uint16_t    usb_creg_read_pipebuf( USB_UTR_t *ptr )
                                 ;    2047 {
                                 ;    2048     if(ptr->ip == USB_USBIP_1)
                                 ;    2049     {
                                 ;    2050         return  (uint16_t)ptr->ipp1->PIPEBUF.WORD;
                                 ;    2051     }
                                 ;    2052     else
                                 ;    2053     {
                                 ;    2054         return  0;
                                 ;    2055     }
                                 ;    2056 } /* eof usb_creg_read_pipebuf() */
                                 ;    2057 #endif /* #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M) */
                                 ;    2058 /************/
                                 ;    2059 /* PIPEMAXP */
                                 ;    2060 /************/
                                 ;    2061 /* Pipe Maximum Packet Size Register */
                                 ;    2062 
                                 ;    2063 /******************************************************************************
                                 ;    2064 Function Name   : usb_creg_read_pipemaxp
                                 ;    2065 Description     : Returns PIPEMAXP register content.
                                 ;    2066 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2067 Return value    : PIPEMAXP content
                                 ;    2068 ******************************************************************************/
                                 ;    2069 uint16_t    usb_creg_read_pipemaxp( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2069
000008F8 6080                    		SUB #08H, R0
000008FA A009                    		MOV.L R1, 04H[R0]
                                 ;    2070 {
                                 ;    2071     return (uint16_t)ptr->ipp->PIPEMAXP.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2071
000008FC A891                    		MOV.L 08H[R1], R1
000008FE D5103601                		MOV.W 6CH[R1], 02H[R0]
00000902 9809                    		MOV.W 02H[R0], R1
00000904                         L237:	; entry.split
                                 ;    2072 } /* eof usb_creg_read_pipemaxp() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2072
00000904 5F11                    		MOVU.W R1, R1
00000906 6702                    		RTSD #08H
00000908                         _usb_creg_write_pipemaxp:
                                 		.STACK	_usb_creg_write_pipemaxp=12
                                 ;    2073 
                                 ;    2074 /******************************************************************************
                                 ;    2075 Function Name   : usb_creg_write_pipemaxp
                                 ;    2076 Description     : Specified data is written to PIPEMAXP register.
                                 ;    2077 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2078                 : uint16_t  data  : The value to write.
                                 ;    2079 Return value    : none
                                 ;    2080 ******************************************************************************/
                                 ;    2081 void    usb_creg_write_pipemaxp( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2081
00000908 6080                    		SUB #08H, R0
0000090A A009                    		MOV.L R1, 04H[R0]
0000090C 900A                    		MOV.W R2, 02H[R0]
                                 ;    2082 {
                                 ;    2083     ptr->ipp->PIPEMAXP.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2083
0000090E A809                    		MOV.L 04H[R0], R1
00000910 A891                    		MOV.L 08H[R1], R1
00000912 D71236                  		MOV.W R2, 6CH[R1]
00000915 6702                    		RTSD #08H
00000917                         _usb_creg_set_mxps:
                                 		.STACK	_usb_creg_set_mxps=12
                                 ;    2084 } /* eof usb_creg_write_pipemaxp() */
                                 ;    2085 
                                 ;    2086 /******************************************************************************
                                 ;    2087 Function Name   : usb_creg_set_mxps
                                 ;    2088 Description     : The specified MXPS-bits, Maximum Packet Size, in PIPEMAXP register is set.
                                 ;    2089 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2090                 : uint16_t  data  : Max packet size value.
                                 ;    2091 Return value    : none
                                 ;    2092 ******************************************************************************/
                                 ;    2093 void    usb_creg_set_mxps( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2093
00000917 6080                    		SUB #08H, R0
00000919 A009                    		MOV.L R1, 04H[R0]
0000091B 900A                    		MOV.W R2, 02H[R0]
                                 ;    2094 {
                                 ;    2095     ptr->ipp->PIPEMAXP.WORD &= (uint16_t)~USB_MXPS;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2095
0000091D A809                    		MOV.L 04H[R0], R1
0000091F A891                    		MOV.L 08H[R1], R1
00000921 5D1E36                  		MOVU.W 6CH[R1], R14
00000924 772E00F800              		AND #0F800H, R14
00000929 D71E36                  		MOV.W R14, 6CH[R1]
0000092C                         L240:	; entry.split
                                 ;    2096     ptr->ipp->PIPEMAXP.WORD |= (data << USB_MXPS_NUM_SHIFT);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2096
0000092C A809                    		MOV.L 04H[R0], R1
0000092E A891                    		MOV.L 08H[R1], R1
00000930 980A                    		MOV.W 02H[R0], R2
00000932 06551236                		OR 6CH[R1].W, R2
00000936 D71236                  		MOV.W R2, 6CH[R1]
00000939 6702                    		RTSD #08H
0000093B                         _usb_creg_read_pipeperi:
                                 		.STACK	_usb_creg_read_pipeperi=12
                                 ;    2097 } /* eof usb_creg_set_mxps() */
                                 ;    2098 
                                 ;    2099 
                                 ;    2100 /************/
                                 ;    2101 /* PIPEPERI */
                                 ;    2102 /************/
                                 ;    2103 /* Pipe Cycle Control Register */
                                 ;    2104 
                                 ;    2105 /******************************************************************************
                                 ;    2106 Function Name   : usb_creg_read_pipeperi
                                 ;    2107 Description     : Returns PIPEPERI register content.
                                 ;    2108 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2109 Return value    : PIPEPERI content
                                 ;    2110 ******************************************************************************/
                                 ;    2111 uint16_t usb_creg_read_pipeperi( USB_UTR_t *ptr )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2111
0000093B 6080                    		SUB #08H, R0
0000093D A009                    		MOV.L R1, 04H[R0]
                                 ;    2112 {
                                 ;    2113     return (uint16_t)ptr->ipp->PIPEPERI.WORD;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2113
0000093F A891                    		MOV.L 08H[R1], R1
00000941 D5103701                		MOV.W 6EH[R1], 02H[R0]
00000945 9809                    		MOV.W 02H[R0], R1
00000947                         L242:	; entry.split
                                 ;    2114 } /* eof usb_creg_read_pipeperi() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2114
00000947 5F11                    		MOVU.W R1, R1
00000949 6702                    		RTSD #08H
0000094B                         _usb_creg_write_pipeperi:
                                 		.STACK	_usb_creg_write_pipeperi=12
                                 ;    2115 
                                 ;    2116 /******************************************************************************
                                 ;    2117 Function Name   : usb_creg_write_pipeperi
                                 ;    2118 Description     : Specified data is written to PIPEPERI register.
                                 ;    2119 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2120                 : uint16_t  data  : The value to write.
                                 ;    2121 Return value    : none
                                 ;    2122 ******************************************************************************/
                                 ;    2123 void    usb_creg_write_pipeperi( USB_UTR_t *ptr, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2123
0000094B 6080                    		SUB #08H, R0
0000094D A009                    		MOV.L R1, 04H[R0]
0000094F 900A                    		MOV.W R2, 02H[R0]
                                 ;    2124 {
                                 ;    2125     ptr->ipp->PIPEPERI.WORD = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2125
00000951 A809                    		MOV.L 04H[R0], R1
00000953 A891                    		MOV.L 08H[R1], R1
00000955 D71237                  		MOV.W R2, 6EH[R1]
00000958 6702                    		RTSD #08H
0000095A                         _usb_creg_read_pipectr:
                                 		.STACK	_usb_creg_read_pipectr=16
                                 ;    2126 } /* eof usb_creg_write_pipeperi() */
                                 ;    2127 
                                 ;    2128 
                                 ;    2129 /********************/
                                 ;    2130 /* DCPCTR, PIPEnCTR */
                                 ;    2131 /********************/
                                 ;    2132 /* PIPEn Control Registers */
                                 ;    2133 
                                 ;    2134 /******************************************************************************
                                 ;    2135 Function Name   : usb_creg_read_pipectr
                                 ;    2136 Description     : Returns DCPCTR or the specified pipe's PIPECTR register content.
                                 ;    2137                 : The Pipe Control Register returned is determined by the speci-
                                 ;    2138                 : fied pipe number.
                                 ;    2139 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2140                 : uint16_t  pipeno: Pipe number.
                                 ;    2141 Return value    : PIPExCTR content
                                 ;    2142 ******************************************************************************/
                                 ;    2143 uint16_t    usb_creg_read_pipectr( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2143
0000095A 60C0                    		SUB #0CH, R0
0000095C A081                    		MOV.L R1, 08H[R0]
0000095E 908A                    		MOV.W R2, 06H[R0]
                                 ;    2144 {
                                 ;    2145     volatile uint16_t    *reg_p;
                                 ;    2146 
                                 ;    2147     if( USB_PIPE0 == pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2147
00000960 B889                    		MOVU.W 06H[R0], R1
00000962 6101                    		CMP #00H, R1
00000964 A881                    		MOV.L 08H[R0], R1
00000966 A891                    		MOV.L 08H[R1], R1
00000968 18                   S  		BNE L246
00000969                         L245:	; bb4
                                 ;    2148     {
                                 ;    2149         reg_p = (uint16_t *)&(ptr->ipp->DCPCTR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2149
00000969 711160                  		ADD #60H, R1
0000096C E301                    		MOV.L R1, [R0]
0000096E 2Err                 B  		BRA L247
00000970                         L246:	; bb11
                                 ;    2150     }
                                 ;    2151     else
                                 ;    2152     {
                                 ;    2153         reg_p = (uint16_t *)&(ptr->ipp->PIPE1CTR) + (pipeno - 1);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2153
00000970 B88A                    		MOVU.W 06H[R0], R2
00000972 6C12                    		SHLL #01H, R2
00000974 4B12                    		ADD R1, R2
00000976 71226E                  		ADD #6EH, R2
00000979 E302                    		MOV.L R2, [R0]
0000097B                         L247:	; bb26
                                 ;    2154     }
                                 ;    2155 
                                 ;    2156     return *reg_p;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2156
0000097B EC01                    		MOV.L [R0], R1
0000097D D41002                  		MOV.W [R1], 04H[R0]
00000980 9881                    		MOV.W 04H[R0], R1
00000982                         L248:	; bb26.split
                                 ;    2157 } /* eof usb_creg_read_pipectr() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2157
00000982 5F11                    		MOVU.W R1, R1
00000984 6703                    		RTSD #0CH
00000986                         _usb_creg_write_pipectr:
                                 		.STACK	_usb_creg_write_pipectr=16
                                 ;    2158 
                                 ;    2159 /******************************************************************************
                                 ;    2160 Function Name   : usb_creg_write_pipectr
                                 ;    2161 Description     : Specified data is written to the specified pipe's PIPEPERI register.
                                 ;    2162 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2163                 : uint16_t  pipeno: Pipe number
                                 ;    2164                 : uint16_t  data  : The value to write.
                                 ;    2165 Return value    : none
                                 ;    2166 ******************************************************************************/
                                 ;    2167 void    usb_creg_write_pipectr( USB_UTR_t *ptr, uint16_t pipeno, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2167
00000986 60C0                    		SUB #0CH, R0
00000988 A081                    		MOV.L R1, 08H[R0]
0000098A 908A                    		MOV.W R2, 06H[R0]
0000098C 9083                    		MOV.W R3, 04H[R0]
                                 ;    2168 {
                                 ;    2169     volatile uint16_t    *reg_p;
                                 ;    2170 
                                 ;    2171     if( USB_PIPE0 == pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2171
0000098E B889                    		MOVU.W 06H[R0], R1
00000990 6101                    		CMP #00H, R1
00000992 A881                    		MOV.L 08H[R0], R1
00000994 A891                    		MOV.L 08H[R1], R1
00000996 18                   S  		BNE L251
00000997                         L250:	; bb5
                                 ;    2172     {
                                 ;    2173         reg_p = (uint16_t *)&(ptr->ipp->DCPCTR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2173
00000997 711160                  		ADD #60H, R1
0000099A E301                    		MOV.L R1, [R0]
0000099C 2Err                 B  		BRA L252
0000099E                         L251:	; bb11
                                 ;    2174     }
                                 ;    2175     else
                                 ;    2176     {
                                 ;    2177         reg_p = (uint16_t *)&(ptr->ipp->PIPE1CTR) + (pipeno - 1);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2177
0000099E B88A                    		MOVU.W 06H[R0], R2
000009A0 6C12                    		SHLL #01H, R2
000009A2 4B12                    		ADD R1, R2
000009A4 71226E                  		ADD #6EH, R2
000009A7 E302                    		MOV.L R2, [R0]
000009A9                         L252:	; bb26
                                 ;    2178     }
                                 ;    2179     *reg_p = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2179
000009A9 9881                    		MOV.W 04H[R0], R1
000009AB EC02                    		MOV.L [R0], R2
000009AD D321                    		MOV.W R1, [R2]
000009AF 6703                    		RTSD #0CH
000009B1                         _usb_creg_set_csclr:
                                 		.STACK	_usb_creg_set_csclr=16
                                 ;    2180 } /* eof usb_creg_write_pipectr() */
                                 ;    2181 
                                 ;    2182 /******************************************************************************
                                 ;    2183 Function Name   : usb_creg_set_csclr
                                 ;    2184 Description     : Set CSCLR bit in the specified pipe's PIPECTR register
                                 ;    2185 Arguments       : USB_UTR_t *ptr   : USB internal structure. Selects USB channel.
                                 ;    2186                 : uint16_t  pipeno : Pipe number
                                 ;    2187 Return value    : none
                                 ;    2188 ******************************************************************************/
                                 ;    2189 void    usb_creg_set_csclr( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2189
000009B1 60C0                    		SUB #0CH, R0
000009B3 A081                    		MOV.L R1, 08H[R0]
000009B5 908A                    		MOV.W R2, 06H[R0]
                                 ;    2190 {
                                 ;    2191     volatile uint16_t    *reg_p;
                                 ;    2192 
                                 ;    2193     reg_p = (uint16_t *)&(ptr->ipp->PIPE1CTR) + (pipeno - 1);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2193
000009B7 B889                    		MOVU.W 06H[R0], R1
000009B9 6C11                    		SHLL #01H, R1
000009BB A882                    		MOV.L 08H[R0], R2
000009BD 06892102                		ADD 08H[R2].L, R1
000009C1 71116E                  		ADD #6EH, R1
000009C4 E301                    		MOV.L R1, [R0]
000009C6                         L254:	; entry.split
                                 ;    2194 
                                 ;    2195     *reg_p |= USB_CSCLR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2195
000009C6 EC01                    		MOV.L [R0], R1
000009C8 DC1E                    		MOV.W [R1], R14
000009CA 78DE                    		BSET #0DH, R14
000009CC D31E                    		MOV.W R14, [R1]
000009CE 6703                    		RTSD #0CH
000009D0                         _usb_creg_set_aclrm:
                                 		.STACK	_usb_creg_set_aclrm=16
                                 ;    2196 } /* eof usb_creg_set_csclr() */
                                 ;    2197 
                                 ;    2198 /******************************************************************************
                                 ;    2199 Function Name   : usb_creg_set_aclrm
                                 ;    2200 Description     : The ACLRM-bit (Auto Buffer Clear Mode) is set in the specified 
                                 ;    2201                 : pipe's control register.
                                 ;    2202 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2203                 : uint16_t  pipeno: Pipe number.
                                 ;    2204 Return value    : none
                                 ;    2205 ******************************************************************************/
                                 ;    2206 void    usb_creg_set_aclrm( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2206
000009D0 60C0                    		SUB #0CH, R0
000009D2 A081                    		MOV.L R1, 08H[R0]
000009D4 908A                    		MOV.W R2, 06H[R0]
                                 ;    2207 {
                                 ;    2208     volatile uint16_t    *reg_p;
                                 ;    2209 
                                 ;    2210     reg_p = (uint16_t *)&(ptr->ipp->PIPE1CTR) + (pipeno - 1);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2210
000009D6 B889                    		MOVU.W 06H[R0], R1
000009D8 6C11                    		SHLL #01H, R1
000009DA A882                    		MOV.L 08H[R0], R2
000009DC 06892102                		ADD 08H[R2].L, R1
000009E0 71116E                  		ADD #6EH, R1
000009E3 E301                    		MOV.L R1, [R0]
000009E5                         L256:	; entry.split
                                 ;    2211 
                                 ;    2212     *reg_p |= USB_ACLRM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2212
000009E5 EC01                    		MOV.L [R0], R1
000009E7 DC1E                    		MOV.W [R1], R14
000009E9 789E                    		BSET #09H, R14
000009EB D31E                    		MOV.W R14, [R1]
000009ED 6703                    		RTSD #0CH
000009EF                         _usb_creg_clr_aclrm:
                                 		.STACK	_usb_creg_clr_aclrm=16
                                 ;    2213 } /* eof usb_creg_set_aclrm() */
                                 ;    2214 
                                 ;    2215 /******************************************************************************
                                 ;    2216 Function Name   : usb_creg_clr_aclrm
                                 ;    2217 Description     : Clear the ACLRM bit in the specified pipe's control register
                                 ;    2218                 : to disable Auto Buffer Clear Mode.
                                 ;    2219                 : its BEMP interrupt status.
                                 ;    2220 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2221                 : uint16_t  pipeno: Pipe number.
                                 ;    2222 Return value    : none
                                 ;    2223 ******************************************************************************/
                                 ;    2224 void    usb_creg_clr_aclrm( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2224
000009EF 60C0                    		SUB #0CH, R0
000009F1 A081                    		MOV.L R1, 08H[R0]
000009F3 908A                    		MOV.W R2, 06H[R0]
                                 ;    2225 {
                                 ;    2226     volatile uint16_t    *reg_p;
                                 ;    2227 
                                 ;    2228     reg_p = (uint16_t *)&(ptr->ipp->PIPE1CTR) + (pipeno - 1);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2228
000009F5 B889                    		MOVU.W 06H[R0], R1
000009F7 6C11                    		SHLL #01H, R1
000009F9 A882                    		MOV.L 08H[R0], R2
000009FB 06892102                		ADD 08H[R2].L, R1
000009FF 71116E                  		ADD #6EH, R1
00000A02 E301                    		MOV.L R1, [R0]
00000A04                         L258:	; entry.split
                                 ;    2229 
                                 ;    2230     *reg_p &= ~USB_ACLRM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2230
00000A04 EC01                    		MOV.L [R0], R1
00000A06 5C1E                    		MOVU.W [R1], R14
00000A08 772EFFFD00              		AND #0FDFFH, R14
00000A0D D31E                    		MOV.W R14, [R1]
00000A0F 6703                    		RTSD #0CH
00000A11                         _usb_creg_set_sqclr:
                                 		.STACK	_usb_creg_set_sqclr=16
                                 ;    2231 } /* eof usb_creg_clr_aclrm() */
                                 ;    2232 
                                 ;    2233 /******************************************************************************
                                 ;    2234 Function Name   : usb_creg_set_sqclr
                                 ;    2235 Description     : The SQCLR-bit (Toggle Bit Clear) is set in the specified pipe's 
                                 ;    2236                 : control register. Setting SQSET to 1 makes DATA0 the expected 
                                 ;    2237                 : data in the pipe's next transfer.
                                 ;    2238 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2239                 : uint16_t  pipeno: Pipe number.
                                 ;    2240 Return value    : none
                                 ;    2241 ******************************************************************************/
                                 ;    2242 void    usb_creg_set_sqclr( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2242
00000A11 60C0                    		SUB #0CH, R0
00000A13 A081                    		MOV.L R1, 08H[R0]
00000A15 908A                    		MOV.W R2, 06H[R0]
                                 ;    2243 {
                                 ;    2244     if( pipeno == USB_PIPE0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2244
00000A17 6102                    		CMP #00H, R2
00000A19 A881                    		MOV.L 08H[R0], R1
00000A1B A891                    		MOV.L 08H[R1], R1
00000A1D 21rr                    		BNE L261
00000A1F                         L260:	; bb4
                                 ;    2245     {
                                 ;    2246         ptr->ipp->DCPCTR.WORD |= USB_SQCLR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2246
00000A1F DD1E30                  		MOV.W 60H[R1], R14
00000A22 788E                    		BSET #08H, R14
00000A24 D71E30                  		MOV.W R14, 60H[R1]
00000A27 6703                    		RTSD #0CH
00000A29                         L261:	; bb14
                                 ;    2247     }
                                 ;    2248     else
                                 ;    2249     {
                                 ;    2250         volatile uint16_t    *reg_p;
                                 ;    2251 
                                 ;    2252         reg_p = ((uint16_t *)&(ptr->ipp->PIPE1CTR) + (pipeno - 1));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2252
00000A29 B88A                    		MOVU.W 06H[R0], R2
00000A2B 6C12                    		SHLL #01H, R2
00000A2D 4B12                    		ADD R1, R2
00000A2F 71226E                  		ADD #6EH, R2
00000A32 E302                    		MOV.L R2, [R0]
00000A34                         L262:	; bb14.split
                                 ;    2253         *reg_p |= USB_SQCLR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2253
00000A34 EC01                    		MOV.L [R0], R1
00000A36 DC1E                    		MOV.W [R1], R14
00000A38 788E                    		BSET #08H, R14
00000A3A D31E                    		MOV.W R14, [R1]
00000A3C 6703                    		RTSD #0CH
00000A3E                         _usb_creg_set_sqset:
                                 		.STACK	_usb_creg_set_sqset=16
                                 ;    2254     }
                                 ;    2255 } /* eof usb_creg_set_sqclr() */
                                 ;    2256 
                                 ;    2257 /******************************************************************************
                                 ;    2258 Function Name   : usb_creg_set_sqset
                                 ;    2259 Description     : The SQSET-bit (Toggle Bit Set) is set in the specified pipe's 
                                 ;    2260                 : control register. Setting SQSET to 1 makes DATA1 the expected 
                                 ;    2261                 : data in the next transfer.
                                 ;    2262 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2263                 : uint16_t  pipeno: Pipe number.
                                 ;    2264 Return value    : none
                                 ;    2265 ******************************************************************************/
                                 ;    2266 void    usb_creg_set_sqset( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2266
00000A3E 60C0                    		SUB #0CH, R0
00000A40 A081                    		MOV.L R1, 08H[R0]
00000A42 908A                    		MOV.W R2, 06H[R0]
                                 ;    2267 {
                                 ;    2268     if( pipeno == USB_PIPE0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2268
00000A44 6102                    		CMP #00H, R2
00000A46 A881                    		MOV.L 08H[R0], R1
00000A48 A891                    		MOV.L 08H[R1], R1
00000A4A 21rr                    		BNE L265
00000A4C                         L264:	; bb4
                                 ;    2269     {
                                 ;    2270         ptr->ipp->DCPCTR.WORD |= USB_SQSET;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2270
00000A4C DD1E30                  		MOV.W 60H[R1], R14
00000A4F 787E                    		BSET #07H, R14
00000A51 D71E30                  		MOV.W R14, 60H[R1]
00000A54 6703                    		RTSD #0CH
00000A56                         L265:	; bb14
                                 ;    2271     }
                                 ;    2272     else
                                 ;    2273     {
                                 ;    2274         volatile uint16_t    *reg_p;
                                 ;    2275 
                                 ;    2276         reg_p = ((uint16_t *)&(ptr->ipp->PIPE1CTR) + (pipeno - 1));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2276
00000A56 B88A                    		MOVU.W 06H[R0], R2
00000A58 6C12                    		SHLL #01H, R2
00000A5A 4B12                    		ADD R1, R2
00000A5C 71226E                  		ADD #6EH, R2
00000A5F E302                    		MOV.L R2, [R0]
00000A61                         L266:	; bb14.split
                                 ;    2277         *reg_p |= USB_SQSET;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2277
00000A61 EC01                    		MOV.L [R0], R1
00000A63 DC1E                    		MOV.W [R1], R14
00000A65 787E                    		BSET #07H, R14
00000A67 D31E                    		MOV.W R14, [R1]
00000A69 6703                    		RTSD #0CH
00000A6B                         _usb_creg_clr_sqset:
                                 		.STACK	_usb_creg_clr_sqset=16
                                 ;    2278     }
                                 ;    2279 } /* eof usb_creg_set_sqset() */
                                 ;    2280 
                                 ;    2281 /******************************************************************************
                                 ;    2282 Function Name   : usb_creg_clr_sqset
                                 ;    2283 Description     : The SQSET-bit (Toggle Bit Set) is cleared in the specified 
                                 ;    2284                 : pipe's control register.
                                 ;    2285 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2286                 : uint16_t  pipeno: Pipe number.
                                 ;    2287 Return value    : none
                                 ;    2288 ******************************************************************************/
                                 ;    2289 void    usb_creg_clr_sqset( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2289
00000A6B 60C0                    		SUB #0CH, R0
00000A6D A081                    		MOV.L R1, 08H[R0]
00000A6F 908A                    		MOV.W R2, 06H[R0]
                                 ;    2290 {
                                 ;    2291     if( pipeno == USB_PIPE0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2291
00000A71 6102                    		CMP #00H, R2
00000A73 A881                    		MOV.L 08H[R0], R1
00000A75 A891                    		MOV.L 08H[R1], R1
00000A77 21rr                    		BNE L269
00000A79                         L268:	; bb4
                                 ;    2292     {
                                 ;    2293         ptr->ipp->DCPCTR.WORD &= ~USB_SQSET;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2293
00000A79 5D1E30                  		MOVU.W 60H[R1], R14
00000A7C 772E7FFF00              		AND #0FF7FH, R14
00000A81 D71E30                  		MOV.W R14, 60H[R1]
00000A84 6703                    		RTSD #0CH
00000A86                         L269:	; bb14
                                 ;    2294     }
                                 ;    2295     else
                                 ;    2296     {
                                 ;    2297         volatile uint16_t *reg_p;
                                 ;    2298 
                                 ;    2299         reg_p = ((uint16_t *)&(ptr->ipp->PIPE1CTR) + (pipeno - 1));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2299
00000A86 B88A                    		MOVU.W 06H[R0], R2
00000A88 6C12                    		SHLL #01H, R2
00000A8A 4B12                    		ADD R1, R2
00000A8C 71226E                  		ADD #6EH, R2
00000A8F E302                    		MOV.L R2, [R0]
00000A91                         L270:	; bb14.split
                                 ;    2300         *reg_p &= ~USB_SQSET;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2300
00000A91 EC01                    		MOV.L [R0], R1
00000A93 5C1E                    		MOVU.W [R1], R14
00000A95 772E7FFF00              		AND #0FF7FH, R14
00000A9A D31E                    		MOV.W R14, [R1]
00000A9C 6703                    		RTSD #0CH
00000A9E                         _usb_creg_set_pid:
                                 		.STACK	_usb_creg_set_pid=16
                                 ;    2301     }
                                 ;    2302 } /* eof usb_creg_clr_sqset() */
                                 ;    2303 
                                 ;    2304 /******************************************************************************
                                 ;    2305 Function Name   : usb_creg_set_pid
                                 ;    2306 Description     : Set the specified PID of the specified pipe's DCPCTR/PIPECTR 
                                 ;    2307                 : register.
                                 ;    2308 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2309                 : uint16_t  pipeno: Pipe number.
                                 ;    2310                 : uint16_t  data  : NAK/BUF/STALL.
                                 ;    2311 Return value    : none
                                 ;    2312 ******************************************************************************/
                                 ;    2313 void    usb_creg_set_pid( USB_UTR_t *ptr, uint16_t pipeno, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2313
00000A9E 60C0                    		SUB #0CH, R0
00000AA0 A081                    		MOV.L R1, 08H[R0]
00000AA2 908A                    		MOV.W R2, 06H[R0]
00000AA4 9083                    		MOV.W R3, 04H[R0]
                                 ;    2314 {
                                 ;    2315     volatile uint16_t *reg_p;
                                 ;    2316 
                                 ;    2317     if( pipeno == USB_PIPE0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2317
00000AA6 B889                    		MOVU.W 06H[R0], R1
00000AA8 6101                    		CMP #00H, R1
00000AAA A881                    		MOV.L 08H[R0], R1
00000AAC A891                    		MOV.L 08H[R1], R1
00000AAE 18                   S  		BNE L273
00000AAF                         L272:	; bb5
                                 ;    2318     {
                                 ;    2319         reg_p = ((uint16_t *)&(ptr->ipp->DCPCTR));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2319
00000AAF 711160                  		ADD #60H, R1
00000AB2 E301                    		MOV.L R1, [R0]
00000AB4 2Err                 B  		BRA L274
00000AB6                         L273:	; bb11
                                 ;    2320     }
                                 ;    2321     else
                                 ;    2322     {
                                 ;    2323         reg_p = ((uint16_t *)&(ptr->ipp->PIPE1CTR) + (pipeno - 1));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2323
00000AB6 B88A                    		MOVU.W 06H[R0], R2
00000AB8 6C12                    		SHLL #01H, R2
00000ABA 4B12                    		ADD R1, R2
00000ABC 71226E                  		ADD #6EH, R2
00000ABF E302                    		MOV.L R2, [R0]
00000AC1                         L274:	; bb26
                                 ;    2324     }
                                 ;    2325     *reg_p &= ~USB_PID;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2325
00000AC1 EC01                    		MOV.L [R0], R1
00000AC3 5C1E                    		MOVU.W [R1], R14
00000AC5 772EFCFF00              		AND #0FFFCH, R14
00000ACA D31E                    		MOV.W R14, [R1]
00000ACC                         L275:	; bb26.split
                                 ;    2326     *reg_p |= data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2326
00000ACC EC01                    		MOV.L [R0], R1
00000ACE 9882                    		MOV.W 04H[R0], R2
00000AD0 065412                  		OR [R1].W, R2
00000AD3 D312                    		MOV.W R2, [R1]
00000AD5 6703                    		RTSD #0CH
00000AD7                         _usb_creg_clr_pid:
                                 		.STACK	_usb_creg_clr_pid=16
                                 ;    2327 } /* eof usb_creg_set_pid() */
                                 ;    2328 
                                 ;    2329 /******************************************************************************
                                 ;    2330 Function Name   : usb_creg_clr_pid
                                 ;    2331 Description     : Clear the specified PID-bits of the specified pipe's DCPCTR/
                                 ;    2332                 : PIPECTR register.
                                 ;    2333 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2334                 : uint16_t  pipeno: Pipe number.
                                 ;    2335                 : uint16_t  data  : NAK/BUF/STALL - to be cleared.
                                 ;    2336 Return value    : none
                                 ;    2337 ******************************************************************************/
                                 ;    2338 void    usb_creg_clr_pid( USB_UTR_t *ptr, uint16_t pipeno, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2338
00000AD7 60C0                    		SUB #0CH, R0
00000AD9 A081                    		MOV.L R1, 08H[R0]
00000ADB 908A                    		MOV.W R2, 06H[R0]
00000ADD 9083                    		MOV.W R3, 04H[R0]
                                 ;    2339 {
                                 ;    2340     volatile uint16_t *reg_p;
                                 ;    2341 
                                 ;    2342     if( pipeno == USB_PIPE0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2342
00000ADF B889                    		MOVU.W 06H[R0], R1
00000AE1 6101                    		CMP #00H, R1
00000AE3 A881                    		MOV.L 08H[R0], R1
00000AE5 A891                    		MOV.L 08H[R1], R1
00000AE7 18                   S  		BNE L278
00000AE8                         L277:	; bb5
                                 ;    2343     {
                                 ;    2344         reg_p = ((uint16_t *)&(ptr->ipp->DCPCTR));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2344
00000AE8 711160                  		ADD #60H, R1
00000AEB E301                    		MOV.L R1, [R0]
00000AED 2Err                 B  		BRA L279
00000AEF                         L278:	; bb11
                                 ;    2345     }
                                 ;    2346     else
                                 ;    2347     {
                                 ;    2348         reg_p = ((uint16_t *)&(ptr->ipp->PIPE1CTR) + (pipeno - 1));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2348
00000AEF B88A                    		MOVU.W 06H[R0], R2
00000AF1 6C12                    		SHLL #01H, R2
00000AF3 4B12                    		ADD R1, R2
00000AF5 71226E                  		ADD #6EH, R2
00000AF8 E302                    		MOV.L R2, [R0]
00000AFA                         L279:	; bb26
                                 ;    2349     }
                                 ;    2350     *reg_p &= ~data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2350
00000AFA 9881                    		MOV.W 04H[R0], R1
00000AFC 7E01                    		NOT R1
00000AFE EC02                    		MOV.L [R0], R2
00000B00 06D021                  		AND [R2].UW, R1
00000B03 D321                    		MOV.W R1, [R2]
00000B05 6703                    		RTSD #0CH
00000B07                         _usb_creg_read_pipetre:
                                 		.STACK	_usb_creg_read_pipetre=16
                                 ;    2351 } /* eof usb_creg_clr_pid() */
                                 ;    2352 
                                 ;    2353 
                                 ;    2354 /************/
                                 ;    2355 /* PIPEnTRE */
                                 ;    2356 /************/
                                 ;    2357 /* PIPEn Transaction Counter Enable Registers */
                                 ;    2358 
                                 ;    2359 /******************************************************************************
                                 ;    2360 Function Name   : usb_creg_read_pipetre
                                 ;    2361 Description     : Returns the specified pipe's PIPETRE register content.
                                 ;    2362 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2363                 : uint16_t  pipeno: Pipe number.
                                 ;    2364 Return value    : PIPETRE content
                                 ;    2365 ******************************************************************************/
                                 ;    2366 uint16_t    usb_creg_read_pipetre( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2366
00000B07 60C0                    		SUB #0CH, R0
00000B09 A081                    		MOV.L R1, 08H[R0]
00000B0B 908A                    		MOV.W R2, 06H[R0]
                                 ;    2367 {
                                 ;    2368     volatile uint16_t    *reg_p;
                                 ;    2369 
                                 ;    2370     reg_p = (uint16_t *)&(ptr->ipp->PIPE1TRE) + (pipeno - 1) * 2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2370
00000B0D B889                    		MOVU.W 06H[R0], R1
00000B0F 6C21                    		SHLL #02H, R1
00000B11 A882                    		MOV.L 08H[R0], R2
00000B13 06892102                		ADD 08H[R2].L, R1
00000B17 72118C00                		ADD #8CH, R1
00000B1B E301                    		MOV.L R1, [R0]
00000B1D                         L281:	; entry.split
                                 ;    2371     
                                 ;    2372     return *reg_p;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2372
00000B1D EC01                    		MOV.L [R0], R1
00000B1F D41002                  		MOV.W [R1], 04H[R0]
00000B22 9881                    		MOV.W 04H[R0], R1
00000B24                         L282:	; entry.split1
                                 ;    2373 } /* eof usb_creg_read_pipetre() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2373
00000B24 5F11                    		MOVU.W R1, R1
00000B26 6703                    		RTSD #0CH
00000B28                         _usb_creg_set_trenb:
                                 		.STACK	_usb_creg_set_trenb=16
                                 ;    2374 
                                 ;    2375 /******************************************************************************
                                 ;    2376 Function Name   : usb_creg_set_trenb
                                 ;    2377 Description     : The TRENB-bit (Transaction Counter Enable) is set in the speci-
                                 ;    2378                 : fied pipe's control register, to enable the counter.
                                 ;    2379 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2380                 : uint16_t  pipeno: Pipe number.
                                 ;    2381 Return value    : none
                                 ;    2382 ******************************************************************************/
                                 ;    2383 void    usb_creg_set_trenb( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2383
00000B28 60C0                    		SUB #0CH, R0
00000B2A A081                    		MOV.L R1, 08H[R0]
00000B2C 908A                    		MOV.W R2, 06H[R0]
                                 ;    2384 {
                                 ;    2385     volatile uint16_t    *reg_p;
                                 ;    2386 
                                 ;    2387     reg_p = (uint16_t *)&(ptr->ipp->PIPE1TRE) + (pipeno - 1) * 2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2387
00000B2E B889                    		MOVU.W 06H[R0], R1
00000B30 6C21                    		SHLL #02H, R1
00000B32 A882                    		MOV.L 08H[R0], R2
00000B34 06892102                		ADD 08H[R2].L, R1
00000B38 72118C00                		ADD #8CH, R1
00000B3C E301                    		MOV.L R1, [R0]
00000B3E                         L284:	; entry.split
                                 ;    2388 
                                 ;    2389     *reg_p |= USB_TRENB;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2389
00000B3E EC01                    		MOV.L [R0], R1
00000B40 DC1E                    		MOV.W [R1], R14
00000B42 789E                    		BSET #09H, R14
00000B44 D31E                    		MOV.W R14, [R1]
00000B46 6703                    		RTSD #0CH
00000B48                         _usb_creg_clr_trenb:
                                 		.STACK	_usb_creg_clr_trenb=16
                                 ;    2390 } /* eof usb_creg_set_trenb() */
                                 ;    2391 
                                 ;    2392 /******************************************************************************
                                 ;    2393 Function Name   : usb_creg_clr_trenb
                                 ;    2394 Description     : The TRENB-bit (Transaction Counter Enable) is cleared in the 
                                 ;    2395                 : specified pipe's control register, to disable the counter.
                                 ;    2396 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2397                 : uint16_t  pipeno: Pipe number.
                                 ;    2398 Return value    : none
                                 ;    2399 ******************************************************************************/
                                 ;    2400 void    usb_creg_clr_trenb( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2400
00000B48 60C0                    		SUB #0CH, R0
00000B4A A081                    		MOV.L R1, 08H[R0]
00000B4C 908A                    		MOV.W R2, 06H[R0]
                                 ;    2401 {
                                 ;    2402     volatile uint16_t    *reg_p;
                                 ;    2403 
                                 ;    2404     reg_p = (uint16_t *)&(ptr->ipp->PIPE1TRE) + (pipeno - 1) * 2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2404
00000B4E B889                    		MOVU.W 06H[R0], R1
00000B50 6C21                    		SHLL #02H, R1
00000B52 A882                    		MOV.L 08H[R0], R2
00000B54 06892102                		ADD 08H[R2].L, R1
00000B58 72118C00                		ADD #8CH, R1
00000B5C E301                    		MOV.L R1, [R0]
00000B5E                         L286:	; entry.split
                                 ;    2405 
                                 ;    2406     *reg_p &= ~USB_TRENB;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2406
00000B5E EC01                    		MOV.L [R0], R1
00000B60 5C1E                    		MOVU.W [R1], R14
00000B62 772EFFFD00              		AND #0FDFFH, R14
00000B67 D31E                    		MOV.W R14, [R1]
00000B69 6703                    		RTSD #0CH
00000B6B                         _usb_creg_set_trclr:
                                 		.STACK	_usb_creg_set_trclr=16
                                 ;    2407 } /* eof usb_creg_clr_trenb() */
                                 ;    2408 
                                 ;    2409 /******************************************************************************
                                 ;    2410 Function Name   : usb_creg_set_trclr
                                 ;    2411 Description     : The TRENB-bit (Transaction Counter Clear) is set in the speci-
                                 ;    2412                 : fied pipe's control register to clear the current counter 
                                 ;    2413                 : value.
                                 ;    2414 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2415                 : uint16_t  pipeno: Pipe number.
                                 ;    2416 Return value    : none
                                 ;    2417 ******************************************************************************/
                                 ;    2418 void    usb_creg_set_trclr( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2418
00000B6B 60C0                    		SUB #0CH, R0
00000B6D A081                    		MOV.L R1, 08H[R0]
00000B6F 908A                    		MOV.W R2, 06H[R0]
                                 ;    2419 {
                                 ;    2420     volatile uint16_t    *reg_p;
                                 ;    2421 
                                 ;    2422     reg_p = (uint16_t *)&(ptr->ipp->PIPE1TRE) + (pipeno - 1) * 2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2422
00000B71 B889                    		MOVU.W 06H[R0], R1
00000B73 6C21                    		SHLL #02H, R1
00000B75 A882                    		MOV.L 08H[R0], R2
00000B77 06892102                		ADD 08H[R2].L, R1
00000B7B 72118C00                		ADD #8CH, R1
00000B7F E301                    		MOV.L R1, [R0]
00000B81                         L288:	; entry.split
                                 ;    2423 
                                 ;    2424     *reg_p |= USB_TRCLR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2424
00000B81 EC01                    		MOV.L [R0], R1
00000B83 DC1E                    		MOV.W [R1], R14
00000B85 788E                    		BSET #08H, R14
00000B87 D31E                    		MOV.W R14, [R1]
00000B89 6703                    		RTSD #0CH
00000B8B                         _usb_creg_read_pipetrn:
                                 		.STACK	_usb_creg_read_pipetrn=16
                                 ;    2425 } /* eof usb_creg_set_trclr() */
                                 ;    2426 
                                 ;    2427 
                                 ;    2428 /************/
                                 ;    2429 /* PIPEnTRN */
                                 ;    2430 /************/
                                 ;    2431 /* PIPEn Transaction Counter Registers */
                                 ;    2432 
                                 ;    2433 /******************************************************************************
                                 ;    2434 Function Name   : usb_creg_read_pipetrn
                                 ;    2435 Description     : Returns the specified pipe's PIPETRN register content.
                                 ;    2436 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel. 
                                 ;    2437                 : uint16_t  pipeno: Pipe number.
                                 ;    2438 Return value    : PIPETRN content
                                 ;    2439 ******************************************************************************/
                                 ;    2440 uint16_t    usb_creg_read_pipetrn( USB_UTR_t *ptr, uint16_t pipeno )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2440
00000B8B 60C0                    		SUB #0CH, R0
00000B8D A081                    		MOV.L R1, 08H[R0]
00000B8F 908A                    		MOV.W R2, 06H[R0]
                                 ;    2441 {
                                 ;    2442     volatile uint16_t    *reg_p;
                                 ;    2443 
                                 ;    2444     reg_p = (uint16_t *)&(ptr->ipp->PIPE1TRN) + ((pipeno - 1) * 2);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2444
00000B91 B889                    		MOVU.W 06H[R0], R1
00000B93 6C21                    		SHLL #02H, R1
00000B95 A882                    		MOV.L 08H[R0], R2
00000B97 06892102                		ADD 08H[R2].L, R1
00000B9B 72118E00                		ADD #8EH, R1
00000B9F E301                    		MOV.L R1, [R0]
00000BA1                         L290:	; entry.split
                                 ;    2445 
                                 ;    2446     return *reg_p;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2446
00000BA1 EC01                    		MOV.L [R0], R1
00000BA3 D41002                  		MOV.W [R1], 04H[R0]
00000BA6 9881                    		MOV.W 04H[R0], R1
00000BA8                         L291:	; entry.split1
                                 ;    2447 } /* eof usb_creg_read_pipetrn() */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2447
00000BA8 5F11                    		MOVU.W R1, R1
00000BAA 6703                    		RTSD #0CH
00000BAC                         _usb_creg_write_pipetrn:
                                 		.STACK	_usb_creg_write_pipetrn=16
                                 ;    2448 
                                 ;    2449 /******************************************************************************
                                 ;    2450 Function Name   : usb_creg_write_pipetrn
                                 ;    2451 Description     : Specified data is written to the specified pipe's PIPETRN reg-
                                 ;    2452                 : ister.
                                 ;    2453 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2454                 : uint16_t  pipeno: Pipe number.
                                 ;    2455                 : uint16_t  data  : The value to write.
                                 ;    2456 Return value    : none
                                 ;    2457 ******************************************************************************/
                                 ;    2458 void    usb_creg_write_pipetrn( USB_UTR_t *ptr, uint16_t pipeno, uint16_t data )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2458
00000BAC 60C0                    		SUB #0CH, R0
00000BAE A081                    		MOV.L R1, 08H[R0]
00000BB0 908A                    		MOV.W R2, 06H[R0]
00000BB2 9083                    		MOV.W R3, 04H[R0]
                                 ;    2459 {
                                 ;    2460     volatile uint16_t    *reg_p;
                                 ;    2461 
                                 ;    2462     reg_p = (uint16_t *)&(ptr->ipp->PIPE1TRN) + ((pipeno - 1) * 2);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2462
00000BB4 B889                    		MOVU.W 06H[R0], R1
00000BB6 6C21                    		SHLL #02H, R1
00000BB8 A882                    		MOV.L 08H[R0], R2
00000BBA 06892102                		ADD 08H[R2].L, R1
00000BBE 72118E00                		ADD #8EH, R1
00000BC2 E301                    		MOV.L R1, [R0]
00000BC4                         L293:	; entry.split
                                 ;    2463 
                                 ;    2464     *reg_p = data;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\r_usb_basic\src\HW\comm\r_usb_creg_access.c",2464
00000BC4 9881                    		MOV.W 04H[R0], R1
00000BC6 EC02                    		MOV.L [R0], R2
00000BC8 D321                    		MOV.W R1, [R2]
00000BCA 6703                    		RTSD #0CH
                                 ;    2465 } /* eof usb_creg_write_pipetrn */
                                 ;    2466 
                                 ;    2467 /************/
                                 ;    2468 /* DEVADDn  */
                                 ;    2469 /************/
                                 ;    2470 
                                 ;    2471 #if defined(BSP_MCU_RX64M) || defined(BSP_MCU_RX71M)
                                 ;    2472 /************/
                                 ;    2473 /* LPSTS    */
                                 ;    2474 /************/
                                 ;    2475 /******************************************************************************
                                 ;    2476 Function Name   : usb_creg_set_suspendm
                                 ;    2477 Description     : Set SuspendM bit.
                                 ;    2478 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2479 Return value    : none
                                 ;    2480 ******************************************************************************/
                                 ;    2481 void    usb_creg_set_suspendm( USB_UTR_t *ptr )
                                 ;    2482 {
                                 ;    2483     ptr->ipp1->LPSTS.WORD |= USB_SUSPENDM;
                                 ;    2484 } /* eof usb_creg_set_suspendm */
                                 ;    2485 
                                 ;    2486 /************/
                                 ;    2487 /* BCCTRL   */
                                 ;    2488 /************/
                                 ;    2489 /******************************************************************************
                                 ;    2490 Function Name   : usb_creg_read_bcctrl
                                 ;    2491 Description     : Returns BCCTRL register content.
                                 ;    2492 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2493 Return value    : BCCTRL content
                                 ;    2494 ******************************************************************************/
                                 ;    2495 uint16_t    usb_creg_read_bcctrl( USB_UTR_t *ptr )
                                 ;    2496 {
                                 ;    2497     if(ptr->ip == USB_USBIP_1)
                                 ;    2498     {
                                 ;    2499         return  (uint16_t)ptr->ipp1->BCCTRL.WORD;
                                 ;    2500     }
                                 ;    2501     else
                                 ;    2502     {
                                 ;    2503         return  0;
                                 ;    2504     }
                                 ;    2505 } /* eof usb_creg_read_bcctrl() */
                                 ;    2506 
                                 ;    2507 /******************************************************************************
                                 ;    2508 Function Name   : usb_creg_set_vdmsrce
                                 ;    2509 Description     : Set VDMSRCE bit.
                                 ;    2510 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2511 Return value    : none
                                 ;    2512 ******************************************************************************/
                                 ;    2513 void    usb_creg_set_vdmsrce( USB_UTR_t *ptr )
                                 ;    2514 {
                                 ;    2515     if(ptr->ip == USB_USBIP_1)
                                 ;    2516     {
                                 ;    2517         ptr->ipp1->BCCTRL.WORD |= USB_VDMSRCE;
                                 ;    2518     }
                                 ;    2519 } /* eof usb_creg_set_vdmsrce() */
                                 ;    2520 
                                 ;    2521 /******************************************************************************
                                 ;    2522 Function Name   : usb_creg_clr_vdmsrce
                                 ;    2523 Description     : Clear VDMSRCE bits.
                                 ;    2524 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2525 Return value    : none
                                 ;    2526 ******************************************************************************/
                                 ;    2527 void    usb_creg_clr_vdmsrce( USB_UTR_t *ptr )
                                 ;    2528 {
                                 ;    2529     if(ptr->ip == USB_USBIP_1)
                                 ;    2530     {
                                 ;    2531         ptr->ipp1->BCCTRL.WORD &= ~USB_VDMSRCE;
                                 ;    2532     }
                                 ;    2533 } /* eof usb_creg_clr_vdmsrce() */
                                 ;    2534 
                                 ;    2535 /******************************************************************************
                                 ;    2536 Function Name   : usb_creg_set_idpsinke
                                 ;    2537 Description     : Set IDPSINKE bit.
                                 ;    2538 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2539 Return value    : none
                                 ;    2540 ******************************************************************************/
                                 ;    2541 void    usb_creg_set_idpsinke( USB_UTR_t *ptr )
                                 ;    2542 {
                                 ;    2543     if(ptr->ip == USB_USBIP_1)
                                 ;    2544     {
                                 ;    2545         ptr->ipp1->BCCTRL.WORD |= USB_IDPSINKE;
                                 ;    2546     }
                                 ;    2547 } /* eof usb_creg_set_idpsinke() */
                                 ;    2548 
                                 ;    2549 /******************************************************************************
                                 ;    2550 Function Name   : usb_creg_clr_idpsinke
                                 ;    2551 Description     : Clear IDPSINKE bits.
                                 ;    2552 Arguments       : USB_UTR_t *ptr  : USB internal structure. Selects USB channel.
                                 ;    2553 Return value    : none
                                 ;    2554 ******************************************************************************/
                                 ;    2555 void    usb_creg_clr_idpsinke( USB_UTR_t *ptr )
                                 ;    2556 {
                                 ;    2557     if(ptr->ip == USB_USBIP_1)
                                 ;    2558     {
                                 ;    2559         ptr->ipp1->BCCTRL.WORD &= ~USB_IDPSINKE;
                                 ;    2560     }
                                 ;    2561 } /* eof usb_creg_clr_idpsinke() */
                                 ;    2562 #endif /* #if defined(BSP_MCU_RX64M) || (BSP_MCU_RX71M) */
                                 ;    2563 /******************************************************************************
                                 ;    2564 End of file
                                 ;    2565 ******************************************************************************/
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     04856   LINES

Section List

Attr         Size               Name
CODE     0000003020(00000BCCH)  P

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx4DB7\$ccrx\r_usb_creg_access.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\r_usb_creg_access.lst
-output=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\r_usb_basic\src\HW\comm\r_usb_creg_access.obj
