* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Thu Mar 09 14:18:36 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  09-Mar-2017 14:18:36
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=encoder.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx,C:\Workspace\e2studio\git\MT01_master\r_lvd_rx\src,C:/Workspace/e2studio/
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=encoder.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=1,EASYMAK=0,MOBILE=0,FREE_RTOS_PP
                                 ;encoder.c
                                 
                                 		.glb	_en
                                 		.glb	_encoder_init
                                 		.glb	_encoder_init_assertions
                                 		.glb	_encoder_test_assertions
                                 		.glb	_en_set_encoder_steps
                                 		.glb	_round
                                 		.glb	_en_read_encoder
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _encoder_init:
                                 		.STACK	_encoder_init=4
                                 ;       1 /*
                                 ;       2  * encoder.c - encoder interface
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2013 - 2015 Alden S. Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * As a special exception, you may use this file as part of a software library without
                                 ;      13  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      14  * inline functions from this file, or you compile this file and link it with  other
                                 ;      15  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      16  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      17  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      18  * GNU General Public License.
                                 ;      19  *
                                 ;      20  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      21  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      22  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      23  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      24  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      25  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      26  */
                                 ;      27 
                                 ;      28 #include "tinyg.h"
                                 ;      29 #include "config.h"
                                 ;      30 #include "encoder.h"
                                 ;      31 
                                 ;      32 #ifdef __cplusplus
                                 ;      33 extern "C"{
                                 ;      34 #endif
                                 ;      35 
                                 ;      36 /**** Allocate Structures ****/
                                 ;      37 
                                 ;      38 enEncoders_t en;
                                 ;      39 
                                 ;      40 /************************************************************************************
                                 ;      41  **** CODE **************************************************************************
                                 ;      42  ************************************************************************************/
                                 ;      43 
                                 ;      44 /*
                                 ;      45  * encoder_init() - initialize encoders
                                 ;      46  */
                                 ;      47 
                                 ;      48 void encoder_init()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",48
00000000 754328                  		MOV.L #00000028H, R3
00000003 6602                    		MOV.L #00000000H, R2
                                 ;      49 {
                                 ;      50 	memset(&en, 0, sizeof(en));		// clear all values, pointers and status
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",50
00000005 FB12rrrrrrrr            		MOV.L #_en, R1
0000000B 7F88                    		SSTR.B
0000000D                         L11:	; entry.split
                                 ;      51 	encoder_init_assertions();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",51
0000000D 39rrrr               W  		BSR _encoder_init_assertions
00000010 02                      		RTS
00000011                         _encoder_init_assertions:
                                 		.STACK	_encoder_init_assertions=4
                                 ;      52 }
                                 ;      53 
                                 ;      54 /*
                                 ;      55  * encoder_init_assertions() - initialize encoder assertions
                                 ;      56  * encoder_test_assertions() - test assertions, return error code if violation exists
                                 ;      57  */
                                 ;      58 
                                 ;      59 void encoder_init_assertions()
                                 ;      60 {
                                 ;      61 	en.magic_end = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",61
00000011 FBE2rrrrrrrr            		MOV.L #_en, R14
00000017 F9E912EF12              		MOV.W #12EFH, 24H[R14]
0000001C                         L13:	; entry.split
                                 ;      62 	en.magic_start = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",62
0000001C FBE2rrrrrrrr            		MOV.L #_en, R14
00000022 F8E9EF12                		MOV.W #12EFH, [R14]
00000026 02                      		RTS
00000027                         _encoder_test_assertions:
                                 		.STACK	_encoder_test_assertions=8
                                 ;      63 }
                                 ;      64 
                                 ;      65 stat_t encoder_test_assertions()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",65
00000027 6040                    		SUB #04H, R0
                                 ;      66 {
                                 ;      67 	if (en.magic_end   != MAGICNUM) return (STAT_ENCODER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",67
00000029 FB12rrrrrrrr            		MOV.L #_en, R1
0000002F BC91                    		MOVU.W 24H[R1], R1
00000031 7601EF12                		CMP #12EFH, R1
00000035 10                   S  		BEQ L16
00000036                         L15:	; bb1
00000036 3C025C                  		MOV.B #5CH, 02H[R0]
00000039 2Err                 B  		BRA L19
0000003B                         L16:	; bb8
                                 ;      68 	if (en.magic_start != MAGICNUM) return (STAT_ENCODER_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",68
0000003B FBE2rrrrrrrr            		MOV.L #_en, R14
00000041 5CEE                    		MOVU.W [R14], R14
00000043 760EEF12                		CMP #12EFH, R14
00000047 10                   S  		BEQ L18
00000048                         L17:	; bb9
00000048 3C025C                  		MOV.B #5CH, 02H[R0]
0000004B 08                   S  		BRA L19
0000004C                         L18:	; bb16
                                 ;      69 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",69
0000004C 3C0200                  		MOV.B #00H, 02H[R0]
0000004F                         L19:	; bb18
0000004F C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;      70 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",70
00000053 B089                    		MOVU.B 03H[R0], R1
00000055 6701                    		RTSD #04H
00000057                         _en_set_encoder_steps:
                                 		.STACK	_en_set_encoder_steps=16
                                 ;      71 
                                 ;      72 /*
                                 ;      73  * en_set_encoder_steps() - set encoder values to a current step count
                                 ;      74  *
                                 ;      75  *	Sets the encoder_position steps. Takes floating point steps as input,
                                 ;      76  *	writes integer steps. So it's not an exact representation of machine
                                 ;      77  *	position except if the machine is at zero.
                                 ;      78  */
                                 ;      79 
                                 ;      80 void en_set_encoder_steps(uint8_t motor, float steps)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",80
00000057 7EA6                    		PUSH.L R6
00000059 6080                    		SUB #08H, R0
0000005B 8189                    		MOV.B R1, 07H[R0]
0000005D E302                    		MOV.L R2, [R0]
                                 ;      81 {
                                 ;      82 	en.en[motor].encoder_steps = (int32_t)round(steps);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",82
0000005F B18E                    		MOVU.B 07H[R0], R6
00000061 EF21                    		MOV.L R2, R1
00000063 05rrrrrr             A  		BSR _round
00000067 6C36                    		SHLL #03H, R6
00000069 FB22rrrrrrrr            		MOV.L #_en, R2
0000006F 4B62                    		ADD R6, R2
00000071 FC9711                  		FTOI R1, R1
00000074 A0A1                    		MOV.L R1, 08H[R2]
00000076 3F6603                  		RTSD #0CH, R6-R6
00000079                         _en_read_encoder:
                                 		.STACK	_en_read_encoder=12
                                 ;      83 }
                                 ;      84 
                                 ;      85 /*
                                 ;      86  * en_read_encoder()
                                 ;      87  *
                                 ;      88  *	The stepper ISR count steps into steps_run(). These values are accumulated to
                                 ;      89  *	encoder_position during LOAD (HI interrupt level). The encoder position is
                                 ;      90  *	therefore always stable. But be advised: the position lags target and position
                                 ;      91  *	valaues elsewherein the system becuase the sample is taken when the steps for
                                 ;      92  *	that segment are complete.
                                 ;      93  */
                                 ;      94 
                                 ;      95 float en_read_encoder(uint8_t motor)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",95
00000079 6080                    		SUB #08H, R0
0000007B 8189                    		MOV.B R1, 07H[R0]
                                 ;      96 {
                                 ;      97 	return((float)en.en[motor].encoder_steps);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",97
0000007D B189                    		MOVU.B 07H[R0], R1
0000007F 6C31                    		SHLL #03H, R1
00000081 FBE2rrrrrrrr            		MOV.L #_en, R14
00000087 4B1E                    		ADD R1, R14
00000089 06A111E102              		ITOF 08H[R14].L, R1
0000008E E301                    		MOV.L R1, [R0]
00000090                         L22:	; entry.split
                                 ;      98 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01_master\src\cnc\encoder.c",98
00000090 6702                    		RTSD #08H
                                 ;      99 
                                 ;     100 /***********************************************************************************
                                 ;     101  * CONFIGURATION AND INTERFACE FUNCTIONS
                                 ;     102  * Functions to get and set variables from the cfgArray table
                                 ;     103  ***********************************************************************************/
                                 ;     104 
                                 ;     105 /***********************************************************************************
                                 ;     106  * TEXT MODE SUPPORT
                                 ;     107  * Functions to print variables from the cfgArray table
                                 ;     108  ***********************************************************************************/
                                 ;     109 
                                 ;     110 #ifdef __TEXT_MODE
                                 ;     111 
                                 ;     112 #endif // __TEXT_MODE
                                 ;     113 
                                 ;     114 #ifdef __cplusplus
                                 ;     115 }
                                 ;     116 #endif
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _en:
00000000(00000028H)              		.blkl	10
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00236   LINES

Section List

Attr         Size               Name
CODE     0000000146(00000092H)  P
DATA     0000000040(00000028H)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\encoder.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\encoder.lst
-output=C:\Workspace\e2studio\git\MT01_master\CompactaXP_build\src\cnc\encoder.obj
