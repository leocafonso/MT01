* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Tue Feb 28 14:07:12 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  28-Feb-2017 14:07:12
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=text_parser.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=text_parser.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=1,EASYMAK=0,MOBILE=0,FREE_RTOS_PP
                                 ;text_parser.c
                                 
                                 		.glb	__Tolotab
                                 		.glb	__Stderr
                                 		.glb	_status_code
                                 		.glb	_global_string_buf
                                 		.glb	_nvl
                                 		.glb	_cfgArray
                                 		.glb	_cm
                                 		.glb	_txt
                                 		.glb	_text_parser
                                 		.glb	_nv_reset_nv_list
                                 		.glb	_sr_run_text_status_report
                                 		.glb	_help_general
                                 		.glb	_nv_get
                                 		.glb	_nv_set
                                 		.glb	_nv_persist
                                 		.glb	_nv_print_list
                                 		.glb	_nv_copy_string
                                 		.glb	__Stof
                                 		.glb	_strpbrk
                                 		.glb	_nv_get_index
                                 		.glb	_text_response
                                 		.glb	_cm_get_units_mode
                                 		.glb	_fprintf
                                 		.glb	_get_status_message
                                 		.glb	_nv_get_type
                                 		.glb	_text_print_list
                                 		.glb	_text_print_inline_pairs
                                 		.glb	_text_print_inline_values
                                 		.glb	_text_print_multiline_formatted
                                 		.glb	_preprocess_float
                                 		.glb	_fntoa
                                 		.glb	_nv_print
                                 		.glb	_tx_print_nul
                                 		.glb	_tx_print_str
                                 		.glb	_tx_print_ui8
                                 		.glb	_tx_print_int
                                 		.glb	_tx_print_flt
                                 		.glb	_text_print_nul
                                 		.glb	_text_print_str
                                 		.glb	_text_print_ui8
                                 		.glb	_text_print_int
                                 		.glb	_text_print_flt
                                 		.glb	_text_print_flt_units
                                 		.glb	_tx_print_tv
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _text_parser:
                                 		.STACK	_text_parser=24
                                 ;       1 /*
                                 ;       2  * text_parser.c - text parser for TinyG
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * As a special exception, you may use this file as part of a software library without
                                 ;      13  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      14  * inline functions from this file, or you compile this file and link it with  other
                                 ;      15  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      16  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      17  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      18  * GNU General Public License.
                                 ;      19  *
                                 ;      20  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      21  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      22  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      23  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      24  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      25  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      26  */
                                 ;      27 
                                 ;      28 #include "tinyg.h"
                                 ;      29 #include "config.h"
                                 ;      30 #include "canonical_machine.h"
                                 ;      31 #include "text_parser.h"
                                 ;      32 #include "json_parser.h"
                                 ;      33 #include "report.h"
                                 ;      34 #include "help.h"
                                 ;      35 #include "util.h"
                                 ;      36 #include "xio.h"					// for ASCII char definitions
                                 ;      37 
                                 ;      38 #ifdef __cplusplus
                                 ;      39 extern "C"{
                                 ;      40 #endif
                                 ;      41 
                                 ;      42 txtSingleton_t txt;					// declare the singleton for either __TEXT_MODE setting
                                 ;      43 
                                 ;      44 #ifndef __TEXT_MODE
                                 ;      45 
                                 ;      46 stat_t text_parser_stub(char_t *str) {return (STAT_OK);}
                                 ;      47 void text_response_stub(const stat_t status, char_t *buf) {}
                                 ;      48 void text_print_list_stub (stat_t status, uint8_t flags) {}
                                 ;      49 void tx_print_stub(nvObj_t *nv) {}
                                 ;      50 
                                 ;      51 #else // __TEXT_MODE
                                 ;      52 
                                 ;      53 static stat_t _text_parser_kernal(char_t *str, nvObj_t *nv);
                                 ;      54 
                                 ;      55 /******************************************************************************
                                 ;      56  * text_parser() 		 - update a config setting from a text block (text mode)
                                 ;      57  * _text_parser_kernal() - helper for above
                                 ;      58  *
                                 ;      59  * Use cases handled:
                                 ;      60  *	- $xfr=1200		set a parameter (strict separators))
                                 ;      61  *	- $xfr 1200		set a parameter (relaxed separators)
                                 ;      62  *	- $xfr			display a parameter
                                 ;      63  *	- $x			display a group
                                 ;      64  *	- ?				generate a status report (multiline format)
                                 ;      65  */
                                 ;      66 stat_t text_parser(char_t *str)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",66
00000000 7100EC                  		ADD #0FFFFFFECH, R0
00000003 A101                    		MOV.L R1, 10H[R0]
                                 ;      67 {
                                 ;      68 	nvObj_t *nv = nv_reset_nv_list();				// returns first object in the body
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",68
00000005 05rrrrrr             A  		BSR _nv_reset_nv_list
00000009 A081                    		MOV.L R1, 08H[R0]
0000000B                         L24:	; entry.split
                                 ;      69 	stat_t status = STAT_OK;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",69
0000000B 3C0E00                  		MOV.B #00H, 0EH[R0]
0000000E                         L25:	; entry.split1
                                 ;      70 
                                 ;      71 	// trap special displays
                                 ;      72 	if (str[0] == '?') {							// handle status report case
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",72
0000000E A901                    		MOV.L 10H[R0], R1
00000010 581E                    		MOVU.B [R1], R14
00000012 755E3F                  		CMP #3FH, R14
00000015 21rr                    		BNE L28
00000017                         L26:	; bb5
                                 ;      73 		sr_run_text_status_report();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",73
00000017 05rrrrrr             A  		BSR _sr_run_text_status_report
0000001B                         L27:	; bb5.split
                                 ;      74 		return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",74
0000001B 3C0700                  		MOV.B #00H, 07H[R0]
0000001E 38rrrr               W  		BRA L53
00000021                         L28:	; bb15
                                 ;      75 	}
                                 ;      76 	if (str[0] == 'H') {							// print help screens
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",76
00000021 A901                    		MOV.L 10H[R0], R1
00000023 581E                    		MOVU.B [R1], R14
00000025 755E48                  		CMP #48H, R14
00000028 21rr                    		BNE L31
0000002A                         L29:	; bb16
0000002A 6601                    		MOV.L #00000000H, R1
                                 ;      77 		help_general((nvObj_t *)NULL);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",77
0000002C 05rrrrrr             A  		BSR _help_general
00000030                         L30:	; bb16.split
                                 ;      78 		return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",78
00000030 3C0700                  		MOV.B #00H, 07H[R0]
00000033 38rrrr               W  		BRA L53
00000036                         L31:	; bb27
                                 ;      79 	}
                                 ;      80 
                                 ;      81 	// pre-process the command
                                 ;      82 	if ((str[0] == '$') && (str[1] == NUL)) {		// treat a lone $ as a sys request
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",82
00000036 A901                    		MOV.L 10H[R0], R1
00000038 581E                    		MOVU.B [R1], R14
0000003A 755E24                  		CMP #24H, R14
0000003D 20rr                    		BEQ L33
0000003F 2Err                 B  		BRA L35
00000041                         L32:	; bb28
00000041 FB36FF                  		MOV.L #0FFFFFFFFH, R3
00000044 6602                    		MOV.L #00000000H, R2
                                 ;      83 		strcat(str,"sys");
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",83
00000046 A901                    		MOV.L 10H[R0], R1
00000048 7F80                    		SUNTIL.B
0000004A 6011                    		SUB #01H, R1
0000004C FB22rrrrrrrr            		MOV.L #_L10, R2
00000052 7F87                    		SMOVU
00000054 2Err                 B  		BRA L37
00000056                         L33:	; bb36
00000056 A901                    		MOV.L 10H[R0], R1
00000058 B019                    		MOVU.B 01H[R1], R1
0000005A 6101                    		CMP #00H, R1
0000005C 18                   S  		BNE L35
0000005D                         L34:	; bb43
0000005D F80601                  		MOV.L #00000001H, [R0]
00000060 08                   S  		BRA L36
00000061                         L35:	; bb44
00000061 F80600                  		MOV.L #00000000H, [R0]
00000064                         L36:	; bb45
00000064 EC01                    		MOV.L [R0], R1
00000066 6101                    		CMP #00H, R1
00000068 21rr                    		BNE L32
0000006A                         L37:	; bb51
                                 ;      84 	}
                                 ;      85 
                                 ;      86 	// parse and execute the command (only processes 1 command per line)
                                 ;      87 	ritorno(_text_parser_kernal(str, nv));			// run the parser to decode the command
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",87
0000006A A882                    		MOV.L 08H[R0], R2
0000006C A901                    		MOV.L 10H[R0], R1
0000006E 39rrrr               W  		BSR __$_text_parser_kernal
00000071 FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000077 C3E1                    		MOV.B R1, [R14]
00000079 6101                    		CMP #00H, R1
0000007B 20rr                    		BEQ L39
0000007D                         L38:	; bb52
0000007D FBE2rrrrrrrr            		MOV.L #_status_code, R14
00000083 C4E007                  		MOV.B [R14], 07H[R0]
00000086 2Err                 B  		BRA L53
00000088                         L39:	; bb64
                                 ;      88 	if ((nv->valuetype == TYPE_NULL) || (nv->valuetype == TYPE_PARENT)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",88
00000088 A881                    		MOV.L 08H[R0], R1
0000008A 8A99                    		MOV.B 0BH[R1], R1
0000008C 6101                    		CMP #00H, R1
0000008E 20rr                    		BEQ L48
00000090 2Err                 B  		BRA L47
00000092                         L40:	; bb66
                                 ;      89 		if (nv_get(nv) == STAT_COMPLETE){			// populate value, group values, or run uber-group displays
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",89
00000092 A881                    		MOV.L 08H[R0], R1
00000094 05rrrrrr             A  		BSR _nv_get
00000098 6141                    		CMP #04H, R1
0000009A 21rr                    		BNE L51
0000009C                         L41:	; bb67
                                 ;      90 			return (STAT_OK);						// return for uber-group displays so they don't print twice
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",90
0000009C 3C0700                  		MOV.B #00H, 07H[R0]
0000009F 2Err                 B  		BRA L53
000000A1                         L42:	; bb77
                                 ;      91 		}
                                 ;      92 	} else { 										// process SET and RUN commands
                                 ;      93 		if (cm.machine_state == MACHINE_ALARM)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",93
000000A1 FBE2rrrrrrrr            		MOV.L #_cm, R14
000000A7 5AEE1D02                		MOVU.B 021DH[R14], R14
000000AB 612E                    		CMP #02H, R14
000000AD 18                   S  		BNE L44
000000AE                         L43:	; bb78
                                 ;      94             return (STAT_MACHINE_ALARMED);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",94
000000AE 3C07CB                  		MOV.B #0CBH, 07H[R0]
000000B1 2Err                 B  		BRA L53
000000B3                         L44:	; bb85
                                 ;      95 		status = nv_set(nv);						// set (or run) single value
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",95
000000B3 A881                    		MOV.L 08H[R0], R1
000000B5 05rrrrrr             A  		BSR _nv_set
000000B9 8381                    		MOV.B R1, 0EH[R0]
000000BB                         L45:	; bb85.split
                                 ;      96 		if (status == STAT_OK) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",96
000000BB B381                    		MOVU.B 0EH[R0], R1
000000BD 6101                    		CMP #00H, R1
000000BF 21rr                    		BNE L51
000000C1                         L46:	; bb89
                                 ;      97 			nv_persist(nv);							// conditionally persist depending on flags in array
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",97
000000C1 A881                    		MOV.L 08H[R0], R1
000000C3 05rrrrrr             A  		BSR _nv_persist
000000C7 2Err                 B  		BRA L51
000000C9                         L47:	; bb104
000000C9 A881                    		MOV.L 08H[R0], R1
000000CB 8A99                    		MOV.B 0BH[R1], R1
000000CD 6171                    		CMP #07H, R1
000000CF 18                   S  		BNE L49
000000D0                         L48:	; bb111
000000D0 F80601                  		MOV.L #00000001H, [R0]
000000D3 08                   S  		BRA L50
000000D4                         L49:	; bb112
000000D4 F80600                  		MOV.L #00000000H, [R0]
000000D7                         L50:	; bb113
000000D7 EC01                    		MOV.L [R0], R1
000000D9 6101                    		CMP #00H, R1
000000DB 21rr                    		BNE L40
000000DD 2Err                 B  		BRA L42
000000DF                         L51:	; bb118
                                 ;      98 		}
                                 ;      99 	}
                                 ;     100 	nv_print_list(status, TEXT_MULTILINE_FORMATTED, JSON_RESPONSE_FORMAT); // print the results
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",100
000000DF B381                    		MOVU.B 0EH[R0], R1
000000E1 6623                    		MOV.L #00000002H, R3
000000E3 6632                    		MOV.L #00000003H, R2
000000E5 05rrrrrr             A  		BSR _nv_print_list
000000E9                         L52:	; bb118.split
                                 ;     101 	return (status);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",101
000000E9 C5000E07                		MOV.B 0EH[R0], 07H[R0]
000000ED                         L53:	; bb122
000000ED C500070F                		MOV.B 07H[R0], 0FH[R0]
                                 ;     102 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",102
000000F1 B389                    		MOVU.B 0FH[R0], R1
000000F3 6705                    		RTSD #14H
000000F5                         __$_text_parser_kernal:
                                 		.STACK	__$_text_parser_kernal=36
                                 ;     103 
                                 ;     104 static stat_t _text_parser_kernal(char_t *str, nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",104
000000F5 7EA6                    		PUSH.L R6
000000F7 7100E4                  		ADD #0FFFFFFE4H, R0
000000FA A181                    		MOV.L R1, 18H[R0]
000000FC A10A                    		MOV.L R2, 14H[R0]
                                 ;     105 {
                                 ;     106 	char_t *rd, *wr;								// read and write pointers
                                 ;     107 //	char_t separators[] = {"="};					// STRICT: only separator allowed is = sign
                                 ;     108 	char_t separators[] = {" =:|\t"};				// RELAXED: any separator someone might use
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",108
000000FE FBE2rrrrrrrr            		MOV.L #_L11, R14
00000104 C4E00D                  		MOV.B [R14], 0DH[R0]
00000107 C5E0010E                		MOV.B 01H[R14], 0EH[R0]
0000010B C5E0020F                		MOV.B 02H[R14], 0FH[R0]
0000010F C5E00310                		MOV.B 03H[R14], 10H[R0]
00000113 C5E00411                		MOV.B 04H[R14], 11H[R0]
00000117 C5E00512                		MOV.B 05H[R14], 12H[R0]
0000011B                         L55:	; entry.split
                                 ;     109 
                                 ;     110 	// pre-process and normalize the string
                                 ;     111 //	nv_reset_nv(nv);								// initialize config object
                                 ;     112 	nv_copy_string(nv, str);						// make a copy for eventual reporting
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",112
0000011B A982                    		MOV.L 18H[R0], R2
0000011D A909                    		MOV.L 14H[R0], R1
0000011F 05rrrrrr             A  		BSR _nv_copy_string
00000123                         L56:	; entry.split1
                                 ;     113 	if (*str == '$') str++;							// ignore leading $
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",113
00000123 A981                    		MOV.L 18H[R0], R1
00000125 581E                    		MOVU.B [R1], R14
00000127 755E24                  		CMP #24H, R14
0000012A 18                   S  		BNE L58
0000012B                         L57:	; bb21
0000012B A981                    		MOV.L 18H[R0], R1
0000012D 6211                    		ADD #01H, R1
0000012F A181                    		MOV.L R1, 18H[R0]
00000131                         L58:	; bb29
                                 ;     114 	for (rd = wr = str; *rd != NUL; rd++, wr++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",114
00000131 A981                    		MOV.L 18H[R0], R1
00000133 A081                    		MOV.L R1, 08H[R0]
00000135 A009                    		MOV.L R1, 04H[R0]
00000137 2Err                 B  		BRA L63
00000139                         L59:	; bb32
                                 ;     115 		*wr = tolower(*rd);							// convert string to lower case
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",115
00000139 FBE2rrrrrrrr            		MOV.L #__Tolotab, R14
0000013F ECEE                    		MOV.L [R14], R14
00000141 A80A                    		MOV.L 04H[R0], R2
00000143 582F                    		MOVU.B [R2], R15
00000145 6C1F                    		SHLL #01H, R15
00000147 FECEFE                  		MOVU.B [R14,R15], R14
0000014A C31E                    		MOV.B R14, [R1]
0000014C                         L60:	; bb32.split
                                 ;     116 		if (*rd == ',') { *wr = *(++rd);}			// skip over commas
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",116
0000014C A809                    		MOV.L 04H[R0], R1
0000014E 581E                    		MOVU.B [R1], R14
00000150 755E2C                  		CMP #2CH, R14
00000153 21rr                    		BNE L62
00000155                         L61:	; bb42
00000155 A809                    		MOV.L 04H[R0], R1
00000157 711201                  		ADD #01H, R1, R2
0000015A A883                    		MOV.L 08H[R0], R3
0000015C A00A                    		MOV.L R2, 04H[R0]
0000015E C11301                  		MOV.B 01H[R1], [R3]
00000161                         L62:	; bb54
00000161 A809                    		MOV.L 04H[R0], R1
00000163 6211                    		ADD #01H, R1
00000165 A009                    		MOV.L R1, 04H[R0]
00000167 A881                    		MOV.L 08H[R0], R1
00000169 6211                    		ADD #01H, R1
0000016B A081                    		MOV.L R1, 08H[R0]
0000016D                         L63:	; bb61
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",114
0000016D A809                    		MOV.L 04H[R0], R1
0000016F 581E                    		MOVU.B [R1], R14
00000171 610E                    		CMP #00H, R14
00000173 A881                    		MOV.L 08H[R0], R1
00000175 21rr                    		BNE L59
00000177                         L64:	; bb68
                                 ;     117 	}
                                 ;     118 	*wr = NUL;										// terminate the string
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",118
00000177 F81400                  		MOV.B #00H, [R1]
0000017A                         L65:	; bb68.split
                                 ;     119 
                                 ;     120 	// parse fields into the nv struct
                                 ;     121 	nv->valuetype = TYPE_NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",121
0000017A A909                    		MOV.L 14H[R0], R1
0000017C 3C1B00                  		MOV.B #00H, 0BH[R1]
0000017F                         L66:	; bb68.split2
                                 ;     122 	if ((rd = strpbrk(str, separators)) == NULL) {	// no value part
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",122
0000017F A981                    		MOV.L 18H[R0], R1
00000181 71020D                  		ADD #0DH, R0, R2
00000184 05rrrrrr             A  		BSR _strpbrk
00000188 A009                    		MOV.L R1, 04H[R0]
0000018A 6101                    		CMP #00H, R1
0000018C 21rr                    		BNE L68
0000018E                         L67:	; bb73
                                 ;     123 		strncpy(nv->token, str, TOKEN_LEN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",123
0000018E A90C                    		MOV.L 14H[R0], R4
00000190 714118                  		ADD #18H, R4, R1
00000193 6653                    		MOV.L #00000005H, R3
00000195 A982                    		MOV.L 18H[R0], R2
00000197 7F87                    		SMOVU
00000199 71441D                  		ADD #1DH, R4
0000019C EF41                    		MOV.L R4, R1
0000019E 4331                    		SUB R3, R1
000001A0 6602                    		MOV.L #00000000H, R2
000001A2 7F88                    		SSTR.B
000001A4 2Err                 B  		BRA L74
000001A6                         L68:	; bb78
                                 ;     124 	} else {
                                 ;     125 		*rd = NUL;									// terminate at end of name
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",125
000001A6 A809                    		MOV.L 04H[R0], R1
000001A8 F81400                  		MOV.B #00H, [R1]
000001AB                         L69:	; bb78.split
                                 ;     126 		strncpy(nv->token, str, TOKEN_LEN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",126
000001AB A90C                    		MOV.L 14H[R0], R4
000001AD 714118                  		ADD #18H, R4, R1
000001B0 6653                    		MOV.L #00000005H, R3
000001B2 A982                    		MOV.L 18H[R0], R2
000001B4 7F87                    		SMOVU
000001B6 71441D                  		ADD #1DH, R4
000001B9 EF41                    		MOV.L R4, R1
000001BB 4331                    		SUB R3, R1
000001BD 6602                    		MOV.L #00000000H, R2
000001BF 7F88                    		SSTR.B
000001C1                         L70:	; bb78.split3
                                 ;     127 		str = ++rd;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",127
000001C1 A809                    		MOV.L 04H[R0], R1
000001C3 6211                    		ADD #01H, R1
000001C5 A009                    		MOV.L R1, 04H[R0]
000001C7 A181                    		MOV.L R1, 18H[R0]
000001C9                         L71:	; bb78.split4
                                 ;     128 		nv->value = strtof(str, &rd);				// rd used as end pointer
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",128
000001C9 A981                    		MOV.L 18H[R0], R1
000001CB A90E                    		MOV.L 14H[R0], R6
000001CD 6603                    		MOV.L #00000000H, R3
000001CF 710204                  		ADD #04H, R0, R2
000001D2 05rrrrrr             A  		BSR __Stof
000001D6 A161                    		MOV.L R1, 10H[R6]
000001D8                         L72:	; bb78.split5
                                 ;     129 		if (rd != str) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",129
000001D8 A809                    		MOV.L 04H[R0], R1
000001DA 06850106                		CMP 18H[R0].L, R1
000001DE 10                   S  		BEQ L74
000001DF                         L73:	; bb92
                                 ;     130 			nv->valuetype = TYPE_FLOAT;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",130
000001DF A909                    		MOV.L 14H[R0], R1
000001E1 3C1B04                  		MOV.B #04H, 0BH[R1]
000001E4                         L74:	; bb109
                                 ;     131 		}
                                 ;     132 	}
                                 ;     133 
                                 ;     134 	// validate and post-process the token
                                 ;     135 	if ((nv->index = nv_get_index((const char_t *)"", nv->token)) == NO_MATCH) { // get index or fail it
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",135
000001E4 A90E                    		MOV.L 14H[R0], R6
000001E6 716218                  		ADD #18H, R6, R2
000001E9 FB12rrrrrrrr            		MOV.L #_L12, R1
000001EF 05rrrrrr             A  		BSR _nv_get_index
000001F3 9161                    		MOV.W R1, 08H[R6]
000001F5 7701FFFF00              		CMP #0FFFFH, R1
000001FA 18                   S  		BNE L76
000001FB                         L75:	; bb110
                                 ;     136 		return (STAT_UNRECOGNIZED_NAME);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",136
000001FB 3C0364                  		MOV.B #64H, 03H[R0]
000001FE 2Err                 B  		BRA L84
00000200                         L76:	; bb123
                                 ;     137 	}
                                 ;     138 	strcpy_P(nv->group, cfgArray[nv->index].group);	// capture the group string if there is one
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",138
00000200 A909                    		MOV.L 14H[R0], R1
00000202 B913                    		MOVU.W 08H[R1], R3
00000204 6C53                    		SHLL #05H, R3
00000206 FB22rrrrrrrr            		MOV.L #_cfgArray, R2
0000020C 4B32                    		ADD R3, R2
0000020E 711114                  		ADD #14H, R1
00000211 FB36FF                  		MOV.L #0FFFFFFFFH, R3
00000214 7F87                    		SMOVU
00000216                         L77:	; bb123.split
                                 ;     139 
                                 ;     140 	// see if you need to strip the token
                                 ;     141 	if (nv->group[0] != NUL) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",141
00000216 A909                    		MOV.L 14H[R0], R1
00000218 B511                    		MOVU.B 14H[R1], R1
0000021A 6101                    		CMP #00H, R1
0000021C 20rr                    		BEQ L83
0000021E                         L78:	; bb135
                                 ;     142 		wr = nv->token;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",142
0000021E A909                    		MOV.L 14H[R0], R1
00000220 711118                  		ADD #18H, R1
00000223 A081                    		MOV.L R1, 08H[R0]
00000225                         L79:	; bb135.split
                                 ;     143 		rd = nv->token + strlen(nv->group);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",143
00000225 A90C                    		MOV.L 14H[R0], R4
00000227 714114                  		ADD #14H, R4, R1
0000022A FB36FF                  		MOV.L #0FFFFFFFFH, R3
0000022D 6602                    		MOV.L #00000000H, R2
0000022F 7F80                    		SUNTIL.B
00000231 FBE6FE                  		MOV.L #0FFFFFFFEH, R14
00000234 433E                    		SUB R3, R14
00000236 4BE4                    		ADD R14, R4
00000238 714418                  		ADD #18H, R4
0000023B A00C                    		MOV.L R4, 04H[R0]
0000023D 2Err                 B  		BRA L81
0000023F                         L80:	; bb147
0000023F A80A                    		MOV.L 04H[R0], R2
00000241 C021                    		MOV.B [R2], [R1]
00000243 A881                    		MOV.L 08H[R0], R1
00000245 6211                    		ADD #01H, R1
00000247 A081                    		MOV.L R1, 08H[R0]
00000249 A809                    		MOV.L 04H[R0], R1
0000024B 6211                    		ADD #01H, R1
0000024D A009                    		MOV.L R1, 04H[R0]
0000024F                         L81:	; bb155
                                 ;     144 		while (*rd != NUL) { *(wr)++ = *(rd)++;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",144
0000024F A809                    		MOV.L 04H[R0], R1
00000251 581E                    		MOVU.B [R1], R14
00000253 610E                    		CMP #00H, R14
00000255 A881                    		MOV.L 08H[R0], R1
00000257 21rr                    		BNE L80
00000259                         L82:	; bb162
                                 ;     145 		*wr = NUL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",145
00000259 F81400                  		MOV.B #00H, [R1]
0000025C                         L83:	; bb173
                                 ;     146 	}
                                 ;     147 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",147
0000025C 3C0300                  		MOV.B #00H, 03H[R0]
0000025F                         L84:	; bb175
0000025F C5000313                		MOV.B 03H[R0], 13H[R0]
                                 ;     148 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",148
00000263 B489                    		MOVU.B 13H[R0], R1
00000265 3F6608                  		RTSD #20H, R6-R6
00000268                         _text_response:
                                 		.STACK	_text_response=44
                                 ;     149 
                                 ;     150 /************************************************************************************
                                 ;     151  * text_response() - text mode responses
                                 ;     152  */
                                 ;     153 static const char prompt_ok[] PROGMEM = "tinyg [%s] ok> ";
                                 ;     154 static const char prompt_err[] PROGMEM = "tinyg [%s] err: %s: %s ";
                                 ;     155 
                                 ;     156 void text_response(const stat_t status, char_t *buf)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",156
00000268 7100E8                  		ADD #0FFFFFFE8H, R0
0000026B 8589                    		MOV.B R1, 17H[R0]
0000026D A102                    		MOV.L R2, 10H[R0]
                                 ;     157 {
                                 ;     158 	if (txt.text_verbosity == TV_SILENT) return;	// skip all this
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",158
0000026F FBE2rrrrrrrr            		MOV.L #_txt, R14
00000275 59EE81                  		MOVU.B 81H[R14], R14
00000278 610E                    		CMP #00H, R14
0000027A 3Arrrr               W  		BEQ L104
0000027D                         L86:	; bb10
                                 ;     159 
                                 ;     160 	char units[] = "inch";
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",160
0000027D FBE2rrrrrrrr            		MOV.L #_L13, R14
00000283 C4E007                  		MOV.B [R14], 07H[R0]
00000286 C5E00108                		MOV.B 01H[R14], 08H[R0]
0000028A C5E00209                		MOV.B 02H[R14], 09H[R0]
0000028E C5E0030A                		MOV.B 03H[R14], 0AH[R0]
00000292 C5E0040B                		MOV.B 04H[R14], 0BH[R0]
00000296                         L87:	; bb10.split
                                 ;     161 	if (cm_get_units_mode(MODEL) != INCHES) { strcpy(units, "mm"); }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",161
00000296 FB12rrrrrrrr            		MOV.L #_cm, R1
0000029C 72115402                		ADD #0254H, R1
000002A0 05rrrrrr             A  		BSR _cm_get_units_mode
000002A4 6101                    		CMP #00H, R1
000002A6 20rr                    		BEQ L89
000002A8                         L88:	; bb22
000002A8 6633                    		MOV.L #00000003H, R3
000002AA FB22rrrrrrrr            		MOV.L #_L14, R2
000002B0 710107                  		ADD #07H, R0, R1
000002B3 7F87                    		SMOVU
000002B5                         L89:	; bb30
                                 ;     162 
                                 ;     163 	if ((status == STAT_OK) || (status == STAT_EAGAIN) || (status == STAT_NOOP)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",163
000002B5 B589                    		MOVU.B 17H[R0], R1
000002B7 6101                    		CMP #00H, R1
000002B9 20rr                    		BEQ L93
000002BB 2Err                 B  		BRA L92
000002BD                         L90:	; bb31
000002BD 6080                    		SUB #08H, R0
000002BF 71010F                  		ADD #0FH, R0, R1
                                 ;     164 		fprintf_P(stderr, prompt_ok, units);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",164
000002C2 A009                    		MOV.L R1, 04H[R0]
000002C4 FBE2rrrrrrrr            		MOV.L #__$prompt_ok, R14
000002CA E30E                    		MOV.L R14, [R0]
000002CC FB12rrrrrrrr            		MOV.L #__Stderr, R1
000002D2 05rrrrrr             A  		BSR _fprintf
000002D6 6280                    		ADD #08H, R0
000002D8 2Err                 B  		BRA L100
000002DA                         L91:	; bb34
                                 ;     165 	} else {
                                 ;     166 		fprintf_P(stderr, prompt_err, units, get_status_message(status), buf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",166
000002DA B589                    		MOVU.B 17H[R0], R1
000002DC 05rrrrrr             A  		BSR _get_status_message
000002E0 A902                    		MOV.L 10H[R0], R2
000002E2 7100F0                  		ADD #0FFFFFFF0H, R0
000002E5 A08A                    		MOV.L R2, 0CH[R0]
000002E7 710217                  		ADD #17H, R0, R2
000002EA A00A                    		MOV.L R2, 04H[R0]
000002EC FBE2rrrrrrrr            		MOV.L #__$prompt_err, R14
000002F2 E30E                    		MOV.L R14, [R0]
000002F4 A081                    		MOV.L R1, 08H[R0]
000002F6 FB12rrrrrrrr            		MOV.L #__Stderr, R1
000002FC 05rrrrrr             A  		BSR _fprintf
00000300 710010                  		ADD #10H, R0
00000303 2Err                 B  		BRA L100
00000305                         L92:	; bb44
00000305 B589                    		MOVU.B 17H[R0], R1
00000307 6121                    		CMP #02H, R1
00000309 18                   S  		BNE L94
0000030A                         L93:	; bb49
0000030A F80601                  		MOV.L #00000001H, [R0]
0000030D 08                   S  		BRA L95
0000030E                         L94:	; bb50
0000030E F80600                  		MOV.L #00000000H, [R0]
00000311                         L95:	; bb51
00000311 EC01                    		MOV.L [R0], R1
00000313 6101                    		CMP #00H, R1
00000315 18                   S  		BNE L97
00000316                         L96:	; bb55
00000316 B589                    		MOVU.B 17H[R0], R1
00000318 6131                    		CMP #03H, R1
0000031A 18                   S  		BNE L98
0000031B                         L97:	; bb60
0000031B F80601                  		MOV.L #00000001H, [R0]
0000031E 08                   S  		BRA L99
0000031F                         L98:	; bb61
0000031F F80600                  		MOV.L #00000000H, [R0]
00000322                         L99:	; bb62
00000322 EC01                    		MOV.L [R0], R1
00000324 6101                    		CMP #00H, R1
00000326 21rr                    		BNE L90
00000328 2Err                 B  		BRA L91
0000032A                         L100:	; bb67
                                 ;     167 	}
                                 ;     168 	nvObj_t *nv = nv_body+1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",168
0000032A FB12rrrrrrrr            		MOV.L #_nvl, R1
00000330 71114C                  		ADD #4CH, R1
00000333 A089                    		MOV.L R1, 0CH[R0]
00000335                         L101:	; bb67.split
                                 ;     169 
                                 ;     170 	if (nv_get_type(nv) == NV_TYPE_MESSAGE) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",170
00000335 A889                    		MOV.L 0CH[R0], R1
00000337 05rrrrrr             A  		BSR _nv_get_type
0000033B 6141                    		CMP #04H, R1
0000033D 21rr                    		BNE L103
0000033F                         L102:	; bb69
                                 ;     171 		fprintf(stderr, (char *)*nv->stringp);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",171
0000033F A889                    		MOV.L 0CH[R0], R1
00000341 6040                    		SUB #04H, R0
00000343 E11008                  		MOV.L 20H[R1], [R0]
00000346 FB12rrrrrrrr            		MOV.L #__Stderr, R1
0000034C 05rrrrrr             A  		BSR _fprintf
00000350 6240                    		ADD #04H, R0
00000352                         L103:	; bb81
00000352 6040                    		SUB #04H, R0
                                 ;     172 	}
                                 ;     173 	fprintf(stderr, "\n");
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",173
00000354 FBE2rrrrrrrr            		MOV.L #_L15, R14
0000035A E30E                    		MOV.L R14, [R0]
0000035C FB12rrrrrrrr            		MOV.L #__Stderr, R1
00000362 05rrrrrr             A  		BSR _fprintf
00000366 6240                    		ADD #04H, R0
00000368 6706                    		RTSD #18H
0000036A                         L104:	; return
                                 ;     174 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",174
0000036A 6706                    		RTSD #18H
0000036C                         _text_print_list:
                                 		.STACK	_text_print_list=8
                                 ;     175 
                                 ;     176 /***** PRINT FUNCTIONS ********************************************************
                                 ;     177  * json_print_list() - command to select and produce a JSON formatted output
                                 ;     178  * text_print_inline_pairs()
                                 ;     179  * text_print_inline_values()
                                 ;     180  * text_print_multiline_formatted()
                                 ;     181  */
                                 ;     182 
                                 ;     183 void text_print_list(stat_t status, uint8_t flags)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",183
0000036C 6040                    		SUB #04H, R0
0000036E 8089                    		MOV.B R1, 03H[R0]
00000370 8082                    		MOV.B R2, 02H[R0]
                                 ;     184 {
                                 ;     185 	switch (flags) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",185
00000372 B081                    		MOVU.B 02H[R0], R1
00000374 6131                    		CMP #03H, R1
00000376 20rr                    		BEQ L110
00000378                         L106:	; entry
00000378 6121                    		CMP #02H, R1
0000037A 20rr                    		BEQ L109
0000037C                         L107:	; entry
0000037C 6111                    		CMP #01H, R1
0000037E 21rr                    		BNE L111
00000380                         L108:	; bb5
                                 ;     186 		case TEXT_NO_PRINT: { break; }
                                 ;     187 		case TEXT_INLINE_PAIRS: { text_print_inline_pairs(nv_body); break; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",187
00000380 FB12rrrrrrrr            		MOV.L #_nvl, R1
00000386 711128                  		ADD #28H, R1
00000389 39rrrr               W  		BSR _text_print_inline_pairs
0000038C 6701                    		RTSD #04H
0000038E                         L109:	; bb7
                                 ;     188 		case TEXT_INLINE_VALUES: { text_print_inline_values(nv_body); break; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",188
0000038E FB12rrrrrrrr            		MOV.L #_nvl, R1
00000394 711128                  		ADD #28H, R1
00000397 39rrrr               W  		BSR _text_print_inline_values
0000039A 6701                    		RTSD #04H
0000039C                         L110:	; bb9
                                 ;     189 		case TEXT_MULTILINE_FORMATTED: { text_print_multiline_formatted(nv_body);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",189
0000039C FB12rrrrrrrr            		MOV.L #_nvl, R1
000003A2 711128                  		ADD #28H, R1
000003A5 39rrrr               W  		BSR _text_print_multiline_formatted
000003A8 6701                    		RTSD #04H
000003AA                         L111:	; return
                                 ;     190 	}
                                 ;     191 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",191
000003AA 6701                    		RTSD #04H
000003AC                         _text_print_inline_pairs:
                                 		.STACK	_text_print_inline_pairs=28
                                 ;     192 
                                 ;     193 void text_print_inline_pairs(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",193
000003AC 60C0                    		SUB #0CH, R0
000003AE A081                    		MOV.L R1, 08H[R0]
                                 ;     194 {
                                 ;     195 	uint32_t *v = (uint32_t*)&nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",195
000003B0 711110                  		ADD #10H, R1
000003B3 E301                    		MOV.L R1, [R0]
000003B5                         L113:	; entry.split
                                 ;     196 	for (uint8_t i=0; i<NV_BODY_LEN-1; i++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",196
000003B5 3C0700                  		MOV.B #00H, 07H[R0]
000003B8 38rrrr               W  		BRA L133
000003BB                         L114:	; bb
                                 ;     197 		switch (nv->valuetype) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",197
000003BB A881                    		MOV.L 08H[R0], R1
000003BD 8A99                    		MOV.B 0BH[R1], R1
000003BF 7501FF                  		CMP #0FFFFFFFFH, R1
000003C2 3Arrrr               W  		BEQ L127
000003C5                         L115:	; bb
000003C5 6121                    		CMP #02H, R1
000003C7 20rr                    		BEQ L124
000003C9                         L116:	; bb
000003C9 6131                    		CMP #03H, R1
000003CB 20rr                    		BEQ L125
000003CD                         L117:	; bb
000003CD 6141                    		CMP #04H, R1
000003CF 20rr                    		BEQ L121
000003D1                         L118:	; bb
000003D1 6151                    		CMP #05H, R1
000003D3 3Arrrr               W  		BEQ L126
000003D6                         L119:	; bb
000003D6 6171                    		CMP #07H, R1
000003D8 3Brrrr               W  		BNE L129
000003DB                         L120:	; bb11
                                 ;     198 			case TYPE_PARENT: 	{ if ((nv = nv->nx) == NULL) return; continue;} // NULL means parent with no child
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",198
000003DB A881                    		MOV.L 08H[R0], R1
000003DD A819                    		MOV.L 04H[R1], R1
000003DF A081                    		MOV.L R1, 08H[R0]
000003E1 6101                    		CMP #00H, R1
000003E3 3Arrrr               W  		BEQ L134
000003E6 38rrrr               W  		BRA L132
000003E9                         L121:	; bb22
                                 ;     199 			case TYPE_FLOAT:	{ preprocess_float(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",199
000003E9 A881                    		MOV.L 08H[R0], R1
000003EB 05rrrrrr             A  		BSR _preprocess_float
000003EF                         L122:	; bb22.split
                                 ;     200 								  fntoa(global_string_buf, nv->value, nv->precision);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",200
000003EF A881                    		MOV.L 08H[R0], R1
000003F1 B313                    		MOVU.B 0CH[R1], R3
000003F3 A912                    		MOV.L 10H[R1], R2
000003F5 FB12rrrrrrrr            		MOV.L #_global_string_buf, R1
000003FB 05rrrrrr             A  		BSR _fntoa
000003FF                         L123:	; bb22.split1
                                 ;     201 								  fprintf_P(stderr,PSTR("%s:%s"), nv->token, global_string_buf) ; break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",201
000003FF A881                    		MOV.L 08H[R0], R1
00000401 60C0                    		SUB #0CH, R0
00000403 FB22rrrrrrrr            		MOV.L #_global_string_buf, R2
00000409 A082                    		MOV.L R2, 08H[R0]
0000040B 711118                  		ADD #18H, R1
0000040E A009                    		MOV.L R1, 04H[R0]
00000410 FBE2rrrrrrrr            		MOV.L #_L16, R14
00000416 E30E                    		MOV.L R14, [R0]
00000418 FB12rrrrrrrr            		MOV.L #__Stderr, R1
0000041E 05rrrrrr             A  		BSR _fprintf
00000422 62C0                    		ADD #0CH, R0
00000424 38rrrr               W  		BRA L129
00000427                         L124:	; bb36
                                 ;     202 								}
                                 ;     203 			case TYPE_INTEGER:	{ fprintf_P(stderr,PSTR("%s:%1.0f"), nv->token, nv->value); break;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",203
00000427 A881                    		MOV.L 08H[R0], R1
00000429 60C0                    		SUB #0CH, R0
0000042B E5100402                		MOV.L 10H[R1], 08H[R0]
0000042F 711118                  		ADD #18H, R1
00000432 A009                    		MOV.L R1, 04H[R0]
00000434 FBE2rrrrrrrr            		MOV.L #_L17, R14
0000043A E30E                    		MOV.L R14, [R0]
0000043C FB12rrrrrrrr            		MOV.L #__Stderr, R1
00000442 05rrrrrr             A  		BSR _fprintf
00000446 62C0                    		ADD #0CH, R0
00000448 2Err                 B  		BRA L129
0000044A                         L125:	; bb45
                                 ;     204 			case TYPE_DATA:	    { fprintf_P(stderr,PSTR("%s:%lu"), nv->token, *v); break;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",204
0000044A EC01                    		MOV.L [R0], R1
0000044C A882                    		MOV.L 08H[R0], R2
0000044E 60C0                    		SUB #0CH, R0
00000450 E41002                  		MOV.L [R1], 08H[R0]
00000453 712218                  		ADD #18H, R2
00000456 A00A                    		MOV.L R2, 04H[R0]
00000458 FBE2rrrrrrrr            		MOV.L #_L18, R14
0000045E E30E                    		MOV.L R14, [R0]
00000460 FB12rrrrrrrr            		MOV.L #__Stderr, R1
00000466 05rrrrrr             A  		BSR _fprintf
0000046A 62C0                    		ADD #0CH, R0
0000046C 2Err                 B  		BRA L129
0000046E                         L126:	; bb53
                                 ;     205 			case TYPE_STRING:	{ fprintf_P(stderr,PSTR("%s:%s"), nv->token, *nv->stringp); break;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",205
0000046E A881                    		MOV.L 08H[R0], R1
00000470 60C0                    		SUB #0CH, R0
00000472 E5100802                		MOV.L 20H[R1], 08H[R0]
00000476 711118                  		ADD #18H, R1
00000479 A009                    		MOV.L R1, 04H[R0]
0000047B FBE2rrrrrrrr            		MOV.L #_L16, R14
00000481 E30E                    		MOV.L R14, [R0]
00000483 FB12rrrrrrrr            		MOV.L #__Stderr, R1
00000489 05rrrrrr             A  		BSR _fprintf
0000048D 62C0                    		ADD #0CH, R0
0000048F 2Err                 B  		BRA L129
00000491                         L127:	; bb63
00000491 6040                    		SUB #04H, R0
                                 ;     206 			case TYPE_EMPTY:	{ fprintf_P(stderr,PSTR("\n")); return; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",206
00000493 FBE2rrrrrrrr            		MOV.L #_L15, R14
00000499 E30E                    		MOV.L R14, [R0]
0000049B FB12rrrrrrrr            		MOV.L #__Stderr, R1
000004A1 05rrrrrr             A  		BSR _fprintf
000004A5 6240                    		ADD #04H, R0
000004A7                         L128:	; bb63.split
000004A7 6703                    		RTSD #0CH
000004A9                         L129:	; bb68
                                 ;     207 		}
                                 ;     208 		if ((nv = nv->nx) == NULL) return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",208
000004A9 A881                    		MOV.L 08H[R0], R1
000004AB A819                    		MOV.L 04H[R1], R1
000004AD A081                    		MOV.L R1, 08H[R0]
000004AF 6101                    		CMP #00H, R1
000004B1 20rr                    		BEQ L134
000004B3                         L130:	; bb79
                                 ;     209 		if (nv->valuetype != TYPE_EMPTY) { fprintf_P(stderr,PSTR(","));}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",209
000004B3 A881                    		MOV.L 08H[R0], R1
000004B5 8A99                    		MOV.B 0BH[R1], R1
000004B7 7501FF                  		CMP #0FFFFFFFFH, R1
000004BA 20rr                    		BEQ L132
000004BC                         L131:	; bb80
000004BC 6040                    		SUB #04H, R0
000004BE FBE2rrrrrrrr            		MOV.L #_L19, R14
000004C4 E30E                    		MOV.L R14, [R0]
000004C6 FB12rrrrrrrr            		MOV.L #__Stderr, R1
000004CC 05rrrrrr             A  		BSR _fprintf
000004D0 6240                    		ADD #04H, R0
000004D2                         L132:	; bb90
000004D2 B189                    		MOVU.B 07H[R0], R1
000004D4 6211                    		ADD #01H, R1
000004D6 8189                    		MOV.B R1, 07H[R0]
000004D8                         L133:	; bb93
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",196
000004D8 B189                    		MOVU.B 07H[R0], R1
000004DA 75511D                  		CMP #1DH, R1
000004DD 28rr                  * 		BLT L114
         38rrrr                  
000004E2                         L134:	; return
                                 ;     210 	}
                                 ;     211 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",211
000004E2 6703                    		RTSD #0CH
000004E4                         _text_print_inline_values:
                                 		.STACK	_text_print_inline_values=24
                                 ;     212 
                                 ;     213 void text_print_inline_values(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",213
000004E4 60C0                    		SUB #0CH, R0
000004E6 A081                    		MOV.L R1, 08H[R0]
                                 ;     214 {
                                 ;     215 	uint32_t *v = (uint32_t*)&nv->value;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",215
000004E8 711110                  		ADD #10H, R1
000004EB E301                    		MOV.L R1, [R0]
000004ED                         L136:	; entry.split
                                 ;     216 	for (uint8_t i=0; i<NV_BODY_LEN-1; i++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",216
000004ED 3C0700                  		MOV.B #00H, 07H[R0]
000004F0 38rrrr               W  		BRA L156
000004F3                         L137:	; bb
                                 ;     217 		switch (nv->valuetype) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",217
000004F3 A881                    		MOV.L 08H[R0], R1
000004F5 8A99                    		MOV.B 0BH[R1], R1
000004F7 7501FF                  		CMP #0FFFFFFFFH, R1
000004FA 3Arrrr               W  		BEQ L150
000004FD                         L138:	; bb
000004FD 6121                    		CMP #02H, R1
000004FF 20rr                    		BEQ L147
00000501                         L139:	; bb
00000501 6131                    		CMP #03H, R1
00000503 20rr                    		BEQ L148
00000505                         L140:	; bb
00000505 6141                    		CMP #04H, R1
00000507 20rr                    		BEQ L144
00000509                         L141:	; bb
00000509 6151                    		CMP #05H, R1
0000050B 3Arrrr               W  		BEQ L149
0000050E                         L142:	; bb
0000050E 6171                    		CMP #07H, R1
00000510 3Brrrr               W  		BNE L152
00000513                         L143:	; bb11
                                 ;     218 			case TYPE_PARENT: 	{ if ((nv = nv->nx) == NULL) return; continue;} // NULL means parent with no child
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",218
00000513 A881                    		MOV.L 08H[R0], R1
00000515 A819                    		MOV.L 04H[R1], R1
00000517 A081                    		MOV.L R1, 08H[R0]
00000519 6101                    		CMP #00H, R1
0000051B 3Arrrr               W  		BEQ L157
0000051E 38rrrr               W  		BRA L155
00000521                         L144:	; bb22
                                 ;     219 			case TYPE_FLOAT:	{ preprocess_float(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",219
00000521 A881                    		MOV.L 08H[R0], R1
00000523 05rrrrrr             A  		BSR _preprocess_float
00000527                         L145:	; bb22.split
                                 ;     220 								  fntoa(global_string_buf, nv->value, nv->precision);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",220
00000527 A881                    		MOV.L 08H[R0], R1
00000529 B313                    		MOVU.B 0CH[R1], R3
0000052B A912                    		MOV.L 10H[R1], R2
0000052D FB12rrrrrrrr            		MOV.L #_global_string_buf, R1
00000533 05rrrrrr             A  		BSR _fntoa
00000537                         L146:	; bb22.split1
00000537 6080                    		SUB #08H, R0
                                 ;     221 								  fprintf_P(stderr,PSTR("%s"), global_string_buf) ; break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",221
00000539 FB12rrrrrrrr            		MOV.L #_global_string_buf, R1
0000053F A009                    		MOV.L R1, 04H[R0]
00000541 FBE2rrrrrrrr            		MOV.L #_L20, R14
00000547 E30E                    		MOV.L R14, [R0]
00000549 FB12rrrrrrrr            		MOV.L #__Stderr, R1
0000054F 05rrrrrr             A  		BSR _fprintf
00000553 6280                    		ADD #08H, R0
00000555 2Err                 B  		BRA L152
00000557                         L147:	; bb33
                                 ;     222 								}
                                 ;     223 			case TYPE_INTEGER:	{ fprintf_P(stderr,PSTR("%1.0f"), nv->value); break;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",223
00000557 A881                    		MOV.L 08H[R0], R1
00000559 6080                    		SUB #08H, R0
0000055B E5100401                		MOV.L 10H[R1], 04H[R0]
0000055F FBE2rrrrrrrr            		MOV.L #_L21, R14
00000565 E30E                    		MOV.L R14, [R0]
00000567 FB12rrrrrrrr            		MOV.L #__Stderr, R1
0000056D 05rrrrrr             A  		BSR _fprintf
00000571 6280                    		ADD #08H, R0
00000573 2Err                 B  		BRA L152
00000575                         L148:	; bb39
                                 ;     224 			case TYPE_DATA:	    { fprintf_P(stderr,PSTR("%lu"), *v); break;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",224
00000575 EC01                    		MOV.L [R0], R1
00000577 6080                    		SUB #08H, R0
00000579 E41001                  		MOV.L [R1], 04H[R0]
0000057C FBE2rrrrrrrr            		MOV.L #_L22, R14
00000582 E30E                    		MOV.L R14, [R0]
00000584 FB12rrrrrrrr            		MOV.L #__Stderr, R1
0000058A 05rrrrrr             A  		BSR _fprintf
0000058E 6280                    		ADD #08H, R0
00000590 2Err                 B  		BRA L152
00000592                         L149:	; bb44
                                 ;     225 			case TYPE_STRING:	{ fprintf_P(stderr,PSTR("%s"), *nv->stringp); break;}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",225
00000592 A881                    		MOV.L 08H[R0], R1
00000594 6080                    		SUB #08H, R0
00000596 E5100801                		MOV.L 20H[R1], 04H[R0]
0000059A FBE2rrrrrrrr            		MOV.L #_L20, R14
000005A0 E30E                    		MOV.L R14, [R0]
000005A2 FB12rrrrrrrr            		MOV.L #__Stderr, R1
000005A8 05rrrrrr             A  		BSR _fprintf
000005AC 6280                    		ADD #08H, R0
000005AE 2Err                 B  		BRA L152
000005B0                         L150:	; bb52
000005B0 6040                    		SUB #04H, R0
                                 ;     226 			case TYPE_EMPTY:	{ fprintf_P(stderr,PSTR("\n")); return; }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",226
000005B2 FBE2rrrrrrrr            		MOV.L #_L15, R14
000005B8 E30E                    		MOV.L R14, [R0]
000005BA FB12rrrrrrrr            		MOV.L #__Stderr, R1
000005C0 05rrrrrr             A  		BSR _fprintf
000005C4 6240                    		ADD #04H, R0
000005C6                         L151:	; bb52.split
000005C6 6703                    		RTSD #0CH
000005C8                         L152:	; bb57
                                 ;     227 		}
                                 ;     228 		if ((nv = nv->nx) == NULL) return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",228
000005C8 A881                    		MOV.L 08H[R0], R1
000005CA A819                    		MOV.L 04H[R1], R1
000005CC A081                    		MOV.L R1, 08H[R0]
000005CE 6101                    		CMP #00H, R1
000005D0 20rr                    		BEQ L157
000005D2                         L153:	; bb68
                                 ;     229 		if (nv->valuetype != TYPE_EMPTY) { fprintf_P(stderr,PSTR(","));}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",229
000005D2 A881                    		MOV.L 08H[R0], R1
000005D4 8A99                    		MOV.B 0BH[R1], R1
000005D6 7501FF                  		CMP #0FFFFFFFFH, R1
000005D9 20rr                    		BEQ L155
000005DB                         L154:	; bb69
000005DB 6040                    		SUB #04H, R0
000005DD FBE2rrrrrrrr            		MOV.L #_L19, R14
000005E3 E30E                    		MOV.L R14, [R0]
000005E5 FB12rrrrrrrr            		MOV.L #__Stderr, R1
000005EB 05rrrrrr             A  		BSR _fprintf
000005EF 6240                    		ADD #04H, R0
000005F1                         L155:	; bb79
000005F1 B189                    		MOVU.B 07H[R0], R1
000005F3 6211                    		ADD #01H, R1
000005F5 8189                    		MOV.B R1, 07H[R0]
000005F7                         L156:	; bb82
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",216
000005F7 B189                    		MOVU.B 07H[R0], R1
000005F9 75511D                  		CMP #1DH, R1
000005FC 28rr                  * 		BLT L137
         38rrrr                  
00000601                         L157:	; return
                                 ;     230 	}
                                 ;     231 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",231
00000601 6703                    		RTSD #0CH
00000603                         _text_print_multiline_formatted:
                                 		.STACK	_text_print_multiline_formatted=12
                                 ;     232 
                                 ;     233 void text_print_multiline_formatted(nvObj_t *nv)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",233
00000603 6080                    		SUB #08H, R0
00000605 A009                    		MOV.L R1, 04H[R0]
                                 ;     234 {
                                 ;     235 	for (uint8_t i=0; i<NV_BODY_LEN-1; i++) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",235
00000607 3C0300                  		MOV.B #00H, 03H[R0]
0000060A 2Err                 B  		BRA L165
0000060C                         L159:	; bb3
                                 ;     236 		if (nv->valuetype != TYPE_PARENT) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",236
0000060C A809                    		MOV.L 04H[R0], R1
0000060E 8A99                    		MOV.B 0BH[R1], R1
00000610 6171                    		CMP #07H, R1
00000612 20rr                    		BEQ L162
00000614                         L160:	; bb4
                                 ;     237 			preprocess_float(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",237
00000614 A809                    		MOV.L 04H[R0], R1
00000616 05rrrrrr             A  		BSR _preprocess_float
0000061A                         L161:	; bb4.split
                                 ;     238 			nv_print(nv);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",238
0000061A A809                    		MOV.L 04H[R0], R1
0000061C 05rrrrrr             A  		BSR _nv_print
00000620                         L162:	; bb13
                                 ;     239 		}
                                 ;     240 		if ((nv = nv->nx) == NULL) return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",240
00000620 A809                    		MOV.L 04H[R0], R1
00000622 A819                    		MOV.L 04H[R1], R1
00000624 A009                    		MOV.L R1, 04H[R0]
00000626 6101                    		CMP #00H, R1
00000628 20rr                    		BEQ L166
0000062A                         L163:	; bb24
                                 ;     241 		if (nv->valuetype == TYPE_EMPTY) break;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",241
0000062A A809                    		MOV.L 04H[R0], R1
0000062C 8A99                    		MOV.B 0BH[R1], R1
0000062E 7501FF                  		CMP #0FFFFFFFFH, R1
00000631 20rr                    		BEQ L166
00000633                         L164:	; bb34
00000633 B089                    		MOVU.B 03H[R0], R1
00000635 6211                    		ADD #01H, R1
00000637 8089                    		MOV.B R1, 03H[R0]
00000639                         L165:	; bb37
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",235
00000639 B089                    		MOVU.B 03H[R0], R1
0000063B 75511D                  		CMP #1DH, R1
0000063E 29rr                    		BLT L159
00000640                         L166:	; return
                                 ;     242 	}
                                 ;     243 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",243
00000640 6702                    		RTSD #08H
00000642                         _tx_print_nul:
                                 		.STACK	_tx_print_nul=8
                                 ;     244 
                                 ;     245 /*
                                 ;     246  * Text print primitives using generic formats
                                 ;     247  */
                                 ;     248 static const char fmt_str[] PROGMEM = "%s\n";	// generic format for string message (with no formatting)
                                 ;     249 static const char fmt_ui8[] PROGMEM = "%d\n";	// generic format for ui8s
                                 ;     250 static const char fmt_int[] PROGMEM = "%lu\n";	// generic format for ui16's and ui32s
                                 ;     251 static const char fmt_flt[] PROGMEM = "%f\n";	// generic format for floats
                                 ;     252 
                                 ;     253 void tx_print_nul(nvObj_t *nv) {}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",253
00000642 6040                    		SUB #04H, R0
00000644 E301                    		MOV.L R1, [R0]
00000646 6701                    		RTSD #04H
00000648                         _tx_print_str:
                                 		.STACK	_tx_print_str=8
                                 ;     254 void tx_print_str(nvObj_t *nv) { text_print_str(nv, fmt_str);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",254
00000648 6040                    		SUB #04H, R0
0000064A E301                    		MOV.L R1, [R0]
0000064C FB22rrrrrrrr            		MOV.L #__$fmt_str, R2
00000652 39rrrr               W  		BSR _text_print_str
00000655 6701                    		RTSD #04H
00000657                         _tx_print_ui8:
                                 		.STACK	_tx_print_ui8=8
                                 ;     255 void tx_print_ui8(nvObj_t *nv) { text_print_ui8(nv, fmt_ui8);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",255
00000657 6040                    		SUB #04H, R0
00000659 E301                    		MOV.L R1, [R0]
0000065B FB22rrrrrrrr            		MOV.L #__$fmt_ui8, R2
00000661 39rrrr               W  		BSR _text_print_ui8
00000664 6701                    		RTSD #04H
00000666                         _tx_print_int:
                                 		.STACK	_tx_print_int=8
                                 ;     256 void tx_print_int(nvObj_t *nv) { text_print_int(nv, fmt_int);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",256
00000666 6040                    		SUB #04H, R0
00000668 E301                    		MOV.L R1, [R0]
0000066A FB22rrrrrrrr            		MOV.L #__$fmt_int, R2
00000670 39rrrr               W  		BSR _text_print_int
00000673 6701                    		RTSD #04H
00000675                         _tx_print_flt:
                                 		.STACK	_tx_print_flt=8
                                 ;     257 void tx_print_flt(nvObj_t *nv) { text_print_flt(nv, fmt_flt);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",257
00000675 6040                    		SUB #04H, R0
00000677 E301                    		MOV.L R1, [R0]
00000679 FB22rrrrrrrr            		MOV.L #__$fmt_flt, R2
0000067F 39rrrr               W  		BSR _text_print_flt
00000682 6701                    		RTSD #04H
00000684                         _text_print_nul:
                                 		.STACK	_text_print_nul=16
                                 ;     258 
                                 ;     259 /*
                                 ;     260  * Text print primitives using external formats
                                 ;     261  *
                                 ;     262  *	NOTE: format's are passed in as flash strings (PROGMEM)
                                 ;     263  */
                                 ;     264 
                                 ;     265 void text_print_nul(nvObj_t *nv, const char *format) { fprintf_P(stderr, format);}	// just print the format string
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",265
00000684 6080                    		SUB #08H, R0
00000686 A009                    		MOV.L R1, 04H[R0]
00000688 E302                    		MOV.L R2, [R0]
0000068A 6040                    		SUB #04H, R0
0000068C E302                    		MOV.L R2, [R0]
0000068E FB12rrrrrrrr            		MOV.L #__Stderr, R1
00000694 05rrrrrr             A  		BSR _fprintf
00000698 6240                    		ADD #04H, R0
0000069A 6702                    		RTSD #08H
0000069C                         _text_print_str:
                                 		.STACK	_text_print_str=20
                                 ;     266 void text_print_str(nvObj_t *nv, const char *format) { fprintf_P(stderr, format, *nv->stringp);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",266
0000069C 6080                    		SUB #08H, R0
0000069E A009                    		MOV.L R1, 04H[R0]
000006A0 E302                    		MOV.L R2, [R0]
000006A2 A809                    		MOV.L 04H[R0], R1
000006A4 6080                    		SUB #08H, R0
000006A6 E5100801                		MOV.L 20H[R1], 04H[R0]
000006AA E302                    		MOV.L R2, [R0]
000006AC FB12rrrrrrrr            		MOV.L #__Stderr, R1
000006B2 05rrrrrr             A  		BSR _fprintf
000006B6 6280                    		ADD #08H, R0
000006B8 6702                    		RTSD #08H
000006BA                         _text_print_ui8:
                                 		.STACK	_text_print_ui8=20
                                 ;     267 void text_print_ui8(nvObj_t *nv, const char *format) { fprintf_P(stderr, format, (uint8_t)nv->value);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",267
000006BA 6080                    		SUB #08H, R0
000006BC A009                    		MOV.L R1, 04H[R0]
000006BE E302                    		MOV.L R2, [R0]
000006C0 A809                    		MOV.L 04H[R0], R1
000006C2 A911                    		MOV.L 10H[R1], R1
000006C4 6080                    		SUB #08H, R0
000006C6 FD72110000004F          		FCMP #4F000000H, R1
000006CD 29rr                    		BLT L176
000006CF                         L175:	; entry
000006CF FD7221000080CF          		FADD #0CF800000H, R1
000006D6                         L176:	; entry
000006D6 FC971E                  		FTOI R1, R14
000006D9 5BE1                    		MOVU.B R14, R1
000006DB A009                    		MOV.L R1, 04H[R0]
000006DD E302                    		MOV.L R2, [R0]
000006DF FB12rrrrrrrr            		MOV.L #__Stderr, R1
000006E5 05rrrrrr             A  		BSR _fprintf
000006E9 6280                    		ADD #08H, R0
000006EB 6702                    		RTSD #08H
000006ED                         _text_print_int:
                                 		.STACK	_text_print_int=20
                                 ;     268 void text_print_int(nvObj_t *nv, const char *format) { fprintf_P(stderr, format, (uint32_t)nv->value);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",268
000006ED 6080                    		SUB #08H, R0
000006EF A009                    		MOV.L R1, 04H[R0]
000006F1 E302                    		MOV.L R2, [R0]
000006F3 A809                    		MOV.L 04H[R0], R1
000006F5 A911                    		MOV.L 10H[R1], R1
000006F7 6080                    		SUB #08H, R0
000006F9 FD72110000004F          		FCMP #4F000000H, R1
00000700 29rr                    		BLT L179
00000702                         L178:	; entry
00000702 FD7221000080CF          		FADD #0CF800000H, R1
00000709                         L179:	; entry
00000709 FC9711                  		FTOI R1, R1
0000070C A009                    		MOV.L R1, 04H[R0]
0000070E E302                    		MOV.L R2, [R0]
00000710 FB12rrrrrrrr            		MOV.L #__Stderr, R1
00000716 05rrrrrr             A  		BSR _fprintf
0000071A 6280                    		ADD #08H, R0
0000071C 6702                    		RTSD #08H
0000071E                         _text_print_flt:
                                 		.STACK	_text_print_flt=20
                                 ;     269 void text_print_flt(nvObj_t *nv, const char *format) { fprintf_P(stderr, format, nv->value);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",269
0000071E 6080                    		SUB #08H, R0
00000720 A009                    		MOV.L R1, 04H[R0]
00000722 E302                    		MOV.L R2, [R0]
00000724 A809                    		MOV.L 04H[R0], R1
00000726 6080                    		SUB #08H, R0
00000728 E5100401                		MOV.L 10H[R1], 04H[R0]
0000072C E302                    		MOV.L R2, [R0]
0000072E FB12rrrrrrrr            		MOV.L #__Stderr, R1
00000734 05rrrrrr             A  		BSR _fprintf
00000738 6280                    		ADD #08H, R0
0000073A 6702                    		RTSD #08H
0000073C                         _text_print_flt_units:
                                 		.STACK	_text_print_flt_units=28
                                 ;     270 
                                 ;     271 void text_print_flt_units(nvObj_t *nv, const char *format, const char *units)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",271
0000073C 60C0                    		SUB #0CH, R0
0000073E A081                    		MOV.L R1, 08H[R0]
00000740 A00A                    		MOV.L R2, 04H[R0]
00000742 E303                    		MOV.L R3, [R0]
                                 ;     272 {
                                 ;     273 	fprintf_P(stderr, format, nv->value, units);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",273
00000744 A881                    		MOV.L 08H[R0], R1
00000746 A80A                    		MOV.L 04H[R0], R2
00000748 60C0                    		SUB #0CH, R0
0000074A E5100401                		MOV.L 10H[R1], 04H[R0]
0000074E E302                    		MOV.L R2, [R0]
00000750 A083                    		MOV.L R3, 08H[R0]
00000752 FB12rrrrrrrr            		MOV.L #__Stderr, R1
00000758 05rrrrrr             A  		BSR _fprintf
0000075C 62C0                    		ADD #0CH, R0
0000075E 6703                    		RTSD #0CH
00000760                         _tx_print_tv:
                                 		.STACK	_tx_print_tv=8
                                 ;     274 }
                                 ;     275 
                                 ;     276 /*
                                 ;     277  * Formatted print supporting the text parser
                                 ;     278  */
                                 ;     279 static const char fmt_tv[] PROGMEM = "[tv]  text verbosity%15d [0=silent,1=verbose]\n";
                                 ;     280 
                                 ;     281 void tx_print_tv(nvObj_t *nv) { text_print_ui8(nv, fmt_tv);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\text_parser.c",281
00000760 6040                    		SUB #04H, R0
00000762 E301                    		MOV.L R1, [R0]
00000764 FB22rrrrrrrr            		MOV.L #__$fmt_tv, R2
0000076A 39rrrr               W  		BSR _text_print_ui8
0000076D 6701                    		RTSD #04H
                                 ;     282 
                                 ;     283 
                                 ;     284 #endif // __TEXT_MODE
                                 ;     285 
                                 ;     286 #ifdef __cplusplus
                                 ;     287 }
                                 ;     288 #endif // __cplusplus
                                 		.SECTION	C_1,ROMDATA
00000000                         __$prompt_ok:
00000000 74696E79                		.byte	"tinyg [%s] ok> "
         67205B25                
         735D206F                
         6B3E20                  
0000000F 00                      		.byte	00H
00000010                         __$prompt_err:
00000010 74696E79                		.byte	"tinyg [%s] err: %s: %s "
         67205B25                
         735D2065                
         72723A20                
         25733A20                
         257320                  
00000027 00                      		.byte	00H
00000028                         __$fmt_str:
00000028 2573                    		.byte	"%s"
0000002A 0A00                    		.byte	0AH,00H
0000002C                         __$fmt_ui8:
0000002C 2564                    		.byte	"%d"
0000002E 0A00                    		.byte	0AH,00H
00000030                         __$fmt_int:
00000030 256C75                  		.byte	"%lu"
00000033 0A00                    		.byte	0AH,00H
00000035                         __$fmt_flt:
00000035 2566                    		.byte	"%f"
00000037 0A00                    		.byte	0AH,00H
00000039                         __$fmt_tv:
00000039 5B74765D                		.byte	"[tv]  text verbosity%15d [0=silent,1=verbose]"
         20207465                
         78742076                
         6572626F                
         73697479                
         25313564                
         205B303D                
         73696C65                
         6E742C31                
         3D766572                
         626F7365                
         5D                      
00000066 0A00                    		.byte	0AH,00H
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 737973                  		.byte	"sys"
00000003 00                      		.byte	00H
00000004                         _L11:
00000004 203D3A7C                		.byte	" =:|"
00000008 0900                    		.byte	09H,00H
0000000A                         _L12:
0000000A 00                      		.byte	0
0000000B                         _L13:
0000000B 696E6368                		.byte	"inch"
0000000F 00                      		.byte	00H
00000010                         _L14:
00000010 6D6D                    		.byte	"mm"
00000012 00                      		.byte	00H
00000013                         _L15:
00000013 0A00                    		.byte	0AH,00H
00000015                         _L16:
00000015 25733A25                		.byte	"%s:%s"
         73                      
0000001A 00                      		.byte	00H
0000001B                         _L17:
0000001B 25733A25                		.byte	"%s:%1.0f"
         312E3066                
00000023 00                      		.byte	00H
00000024                         _L18:
00000024 25733A25                		.byte	"%s:%lu"
         6C75                    
0000002A 00                      		.byte	00H
0000002B                         _L19:
0000002B 2C                      		.byte	","
0000002C 00                      		.byte	00H
0000002D                         _L20:
0000002D 2573                    		.byte	"%s"
0000002F 00                      		.byte	00H
00000030                         _L21:
00000030 25312E30                		.byte	"%1.0f"
         66                      
00000035 00                      		.byte	00H
00000036                         _L22:
00000036 256C75                  		.byte	"%lu"
00000039 00                      		.byte	00H
                                 		.SECTION	B_1,DATA
00000000                         _txt:
00000000(00000082H)              		.blkb	130
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     01426   LINES

Section List

Attr         Size               Name
CODE     0000001903(0000076FH)  P
ROMDATA  0000000104(00000068H)  C_1
ROMDATA  0000000058(0000003AH)  L
DATA     0000000130(00000082H)  B_1

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx7E87\$ccrx\text_parser.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\CompactaXP_build\text_parser.lst
-output=C:\Workspace\e2studio\git\MT01\CompactaXP_build\src\cnc\text_parser.obj
