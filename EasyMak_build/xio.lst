* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Sun Feb 19 10:48:48 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  19-Feb-2017 10:48:48
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=xio.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=xio.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;xio.c
                                 
                                 		.glb	__Stderr
                                 		.glb	_ds
                                 		.glb	_xio
                                 		.glb	_xio_init
                                 		.glb	_xio_init_assertions
                                 		.glb	_xio_init_fsfat
                                 		.glb	_xio_init_command
                                 		.glb	_xio_init_spiffs
                                 		.glb	_xio_test_assertions
                                 		.glb	_xio_isbusy
                                 		.glb	_xio_reset_working_flags
                                 		.glb	_xio_open_generic
                                 		.glb	_xio_open
                                 		.glb	_xio_close
                                 		.glb	_xio_gets
                                 		.glb	_xio_getc
                                 		.glb	_xio_putc
                                 		.glb	_xio_ctrl
                                 		.glb	_xio_ctrl_generic
                                 		.glb	_xio_set_baud
                                 		.glb	_xio_fc_null
                                 		.glb	_xio_set_stdin
                                 		.glb	_xio_set_stdout
                                 		.glb	_xio_set_stderr
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _xio_init:
                                 		.STACK	_xio_init=4
                                 ;       1 /*
                                 ;       2  * xio.c - Xmega IO devices - common code file
                                 ;       3  * Part of TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S. Hart Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      13  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      14  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      15  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      16  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      17  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      18  */
                                 ;      19 /* ----- XIO - Xmega Device System ----
                                 ;      20  *
                                 ;      21  * XIO provides common access to native and derived xmega devices (see table below)
                                 ;      22  * XIO devices are compatible with avr-gcc stdio and also provide some special functions
                                 ;      23  * that are not found in stdio.
                                 ;      24  *
                                 ;      25  * Stdio support:
                                 ;      26  *	- http://www.nongnu.org/avr-libc/user-manual/group__avr__stdio.html
                                 ;      27  * 	- Stdio compatible putc() and getc() functions provided for each device
                                 ;      28  *	- This enables fgets, printf, scanf, and other stdio functions
                                 ;      29  * 	- Full support for formatted printing is provided (including floats)
                                 ;      30  * 	- Assignment of a default device to stdin, stdout & stderr is provided
                                 ;      31  *	- printf() and printf_P() send to stdout, so use fprintf() to stderr
                                 ;      32  *		for things that should't go over RS485 in SLAVE mode
                                 ;      33  *
                                 ;      34  * Facilities provided beyond stdio:
                                 ;      35  *	- Supported devices include:
                                 ;      36  *		- USB (derived from USART)
                                 ;      37  *		- RS485 (derived from USART)
                                 ;      38  *		- SPI devices and slave channels
                                 ;      39  *		- Program memory "files" (read only)
                                 ;      40  *	- Stdio FILE streams are managed as bindings to the above devices
                                 ;      41  *	- Additional functions provided include:
                                 ;      42  *		- open() - initialize parameters, addresses and flags
                                 ;      43  *		- gets() - non-blocking input line reader - extends fgets
                                 ;      44  *		- ctrl() - ioctl-like knockoff for setting device parameters (flags)
                                 ;      45  *		- signal handling: interrupt on: feedhold, cycle_start, ctrl-x software reset
                                 ;      46  *		- interrupt buffered RX and TX functions
                                 ;      47  *		- XON/XOFF software flow control
                                 ;      48  */
                                 ;      49 /* ----- XIO - Some Internals ----
                                 ;      50  *
                                 ;      51  * XIO layers are: (1) xio virtual device (root), (2) xio device type, (3) xio devices
                                 ;      52  *
                                 ;      53  * The virtual device has the following methods:
                                 ;      54  *	xio_init() - initialize the entire xio system
                                 ;      55  *	xio_open() - open a device indicated by the XIO_DEV number
                                 ;      56  *	xio_ctrl() - set control flags for XIO_DEV device
                                 ;      57  *	xio_gets() - get a string from the XIO_DEV device (non blocking line reader)
                                 ;      58  *	xio_getc() - read a character from the XIO_DEV device (not stdio compatible)
                                 ;      59  *	xio_putc() - write a character to the XIO_DEV device (not stdio compatible)
                                 ;      60  *  xio_set_baud() - set baud rates for devices for which this is meaningful
                                 ;      61  *
                                 ;      62  * The device type layer currently knows about USARTS, SPI, and File devices. Methods are:
                                 ;      63  *	xio_init_<type>() - initializes the devices of that type
                                 ;      64  *
                                 ;      65  * The device layer currently supports: USB, RS485, SPI channels, PGM file reading. methods:
                                 ;      66  *	xio_open<device>() - set up the device for use or reset the device
                                 ;      67  *	xio_ctrl<device>() - change device flag controls
                                 ;      68  *	xio_gets<device>() - get a string from the device (non-blocking)
                                 ;      69  *	xio_getc<device>() - read a character from the device (stdio compatible)
                                 ;      70  *	xio_putc<device>() - write a character to the device (stdio compatible)
                                 ;      71  *
                                 ;      72  * The virtual level uses XIO_DEV_xxx numeric device IDs for reference.
                                 ;      73  * Lower layers are called using the device structure pointer xioDev_t *d
                                 ;      74  * The stdio compatible functions use pointers to the stdio FILE structs.
                                 ;      75  */
                                 ;      76 #include <string.h>					// for memset()
                                 ;      77 #include <stdio.h>					// precursor for xio.h
                                 ;      78 #include "platform.h"
                                 ;      79 
                                 ;      80 #include "xio.h"					// all device includes are nested here
                                 ;      81 #include "tinyg.h"					// needed by init() for default source
                                 ;      82 #include "config.h"					// needed by init() for default source
                                 ;      83 #include "controller.h"				// needed by init() for default source
                                 ;      84 
                                 ;      85 xioDev_t 		ds[XIO_DEV_COUNT];			// allocate top-level dev structs
                                 ;      86 
                                 ;      87 //
                                 ;      88 typedef struct xioSingleton {
                                 ;      89 	FILE * stderr_shadow;			// used for stack overflow / memory integrity checking
                                 ;      90 } xioSingleton_t;
                                 ;      91 xioSingleton_t xio;
                                 ;      92 
                                 ;      93 /********************************************************************************
                                 ;      94  * XIO Initializations, Resets and Assertions
                                 ;      95  */
                                 ;      96 /*
                                 ;      97  * xio_init() - initialize entire xio sub-system
                                 ;      98  */
                                 ;      99 void xio_init()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",99
00000000 6601                    		MOV.L #00000000H, R1
                                 ;     100 {
                                 ;     101 	// set memory integrity check
                                 ;     102 	xio_set_stderr(0);				// set a bogus value; may be overwritten with a real value
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",102
00000002 39rrrr               W  		BSR _xio_set_stderr
00000005                         L11:	; entry.split
                                 ;     103 
                                 ;     104 	// setup device types
                                 ;     105 	xio_init_fsfat();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",105
00000005 05rrrrrr             A  		BSR _xio_init_fsfat
00000009                         L12:	; entry.split1
                                 ;     106 	xio_init_command();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",106
00000009 05rrrrrr             A  		BSR _xio_init_command
0000000D                         L13:	; entry.split2
                                 ;     107 	xio_init_spiffs();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",107
0000000D 05rrrrrr             A  		BSR _xio_init_spiffs
00000011                         L14:	; entry.split3
                                 ;     108 //	xio_init_usart();
                                 ;     109 //	xio_init_spi();
                                 ;     110 //	xio_init_file();
                                 ;     111 
                                 ;     112 	// open individual devices (file device opens occur at time-of-use)
                                 ;     113 //	xio_open(XIO_DEV_USBFAT,0,0);
                                 ;     114 //	xio_open(XIO_DEV_USB,  0, USB_FLAGS);
                                 ;     115 //	xio_open(XIO_DEV_RS485,0, RS485_FLAGS);
                                 ;     116 //	xio_open(XIO_DEV_SPI1, 0, SPI_FLAGS);
                                 ;     117 //	xio_open(XIO_DEV_SPI2, 0, SPI_FLAGS);
                                 ;     118 
                                 ;     119 	xio_init_assertions();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",119
00000011 39rrrr               W  		BSR _xio_init_assertions
00000014 02                      		RTS
00000015                         _xio_init_assertions:
                                 		.STACK	_xio_init_assertions=4
                                 ;     120 }
                                 ;     121 
                                 ;     122 /*
                                 ;     123  * xio_init_assertions()
                                 ;     124  * xio_test_assertions() - validate operating state
                                 ;     125  *
                                 ;     126  * NOTE: xio device assertions are set up as part of xio_open_generic()
                                 ;     127  *		 This system is kind of brittle right now because if a device is
                                 ;     128  *		 not set up then it will fail in the assertions test. Need to fix this.
                                 ;     129  */
                                 ;     130 
                                 ;     131 void xio_init_assertions() {}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",131
00000015 02                      		RTS
00000016                         _xio_test_assertions:
                                 		.STACK	_xio_test_assertions=8
                                 ;     132 
                                 ;     133 uint8_t xio_test_assertions()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",133
00000016 6040                    		SUB #04H, R0
                                 ;     134 {
                                 ;     135 //RXMOD	if (ds[XIO_DEV_USB].magic_start		!= MAGICNUM) return (STAT_XIO_ASSERTION_FAILURE);
                                 ;     136 //	if (ds[XIO_DEV_USB].magic_end		!= MAGICNUM) return (STAT_XIO_ASSERTION_FAILURE);
                                 ;     137 //	if (ds[XIO_DEV_RS485].magic_start	!= MAGICNUM) return (STAT_XIO_ASSERTION_FAILURE);
                                 ;     138 //	if (ds[XIO_DEV_RS485].magic_end		!= MAGICNUM) return (STAT_XIO_ASSERTION_FAILURE);
                                 ;     139 //	if (ds[XIO_DEV_SPI1].magic_start	!= MAGICNUM) return (STAT_XIO_ASSERTION_FAILURE);
                                 ;     140 //	if (ds[XIO_DEV_SPI1].magic_end		!= MAGICNUM) return (STAT_XIO_ASSERTION_FAILURE);
                                 ;     141 //	if (ds[XIO_DEV_SPI2].magic_start	!= MAGICNUM) return (STAT_XIO_ASSERTION_FAILURE);
                                 ;     142 //	if (ds[XIO_DEV_SPI2].magic_end		!= MAGICNUM) return (STAT_XIO_ASSERTION_FAILURE);
                                 ;     143 //	if (ds[XIO_DEV_PGM].magic_start		!= MAGICNUM) return (STAT_XIO_ASSERTION_FAILURE);
                                 ;     144 //	if (ds[XIO_DEV_PGM].magic_end		!= MAGICNUM) return (STAT_XIO_ASSERTION_FAILURE);
                                 ;     145 	if (stderr != xio.stderr_shadow) 				 return (STAT_XIO_ASSERTION_FAILURE);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",145
00000018 FBE2rrrrrrrr            		MOV.L #_xio, R14
0000001E FBF2rrrrrrrr            		MOV.L #__Stderr, R15
00000024 0684EF                  		CMP [R14].L, R15
00000027 10                   S  		BEQ L18
00000028                         L17:	; bb1
00000028 3C025B                  		MOV.B #5BH, 02H[R0]
0000002B 08                   S  		BRA L19
0000002C                         L18:	; bb6
                                 ;     146 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",146
0000002C 3C0200                  		MOV.B #00H, 02H[R0]
0000002F                         L19:	; bb8
0000002F C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     147 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",147
00000033 B089                    		MOVU.B 03H[R0], R1
00000035 6701                    		RTSD #04H
00000037                         _xio_isbusy:
                                 		.STACK	_xio_isbusy=8
                                 ;     148 
                                 ;     149 /*
                                 ;     150  * xio_isbusy() - return TRUE if XIO sub-system is busy
                                 ;     151  *
                                 ;     152  *	This function is here so that the caller can detect that the serial system is active
                                 ;     153  *	and therefore generating interrupts. This is a hack for the earlier AVRs that require
                                 ;     154  *	interrupts to be disabled for EEPROM write so the caller can see if the XIO system is
                                 ;     155  *	quiescent. This is used by the G10 deferred writeback persistence functions.
                                 ;     156  *
                                 ;     157  *	Idle conditions:
                                 ;     158  *	- The serial RX buffer is empty, indicating with some probability that data is not being sent
                                 ;     159  *	- The serial TX buffers are empty
                                 ;     160  */
                                 ;     161 
                                 ;     162 uint8_t xio_isbusy()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",162
00000037 6040                    		SUB #04H, R0
                                 ;     163 {
                                 ;     164 //	if (xio_get_rx_bufcount_usart(&USBu) != 0) return (false);
                                 ;     165 //	if (xio_get_tx_bufcount_usart(&USBu) != 0) return (false);
                                 ;     166 //	return (true);
                                 ;     167 	return (false);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",167
00000039 3C0300                  		MOV.B #00H, 03H[R0]
0000003C B089                    		MOVU.B 03H[R0], R1
0000003E                         L21:	; entry.split
                                 ;     168 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",168
0000003E 5B11                    		MOVU.B R1, R1
00000040 6701                    		RTSD #04H
00000042                         _xio_reset_working_flags:
                                 		.STACK	_xio_reset_working_flags=8
                                 ;     169 
                                 ;     170 /*
                                 ;     171  * xio_reset_working_flags()
                                 ;     172  */
                                 ;     173 
                                 ;     174 void xio_reset_working_flags(xioDev_t *d)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",174
00000042 6040                    		SUB #04H, R0
00000044 E301                    		MOV.L R1, [R0]
                                 ;     175 {
                                 ;     176 	d->signal = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",176
00000046 F9147900                		MOV.B #00H, 79H[R1]
0000004A                         L23:	; entry.split
                                 ;     177 	d->flag_in_line = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",177
0000004A EC01                    		MOV.L [R0], R1
0000004C F9147A00                		MOV.B #00H, 7AH[R1]
00000050                         L24:	; entry.split1
                                 ;     178 	d->flag_eol = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",178
00000050 EC01                    		MOV.L [R0], R1
00000052 F9147B00                		MOV.B #00H, 7BH[R1]
00000056                         L25:	; entry.split2
                                 ;     179 	d->flag_eof = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",179
00000056 EC01                    		MOV.L [R0], R1
00000058 F9147C00                		MOV.B #00H, 7CH[R1]
0000005C 6701                    		RTSD #04H
0000005E                         _xio_open_generic:
                                 		.STACK	_xio_open_generic=40
                                 ;     180 }
                                 ;     181 
                                 ;     182 /*
                                 ;     183  * xio_init_device() - generic initialization function for any device
                                 ;     184  *
                                 ;     185  *	This binds the main fucntions and sets up the stdio FILE structure
                                 ;     186  *	udata is used to point back to the device struct so it can be gotten
                                 ;     187  *	from getc() and putc() functions.
                                 ;     188  *
                                 ;     189  *	Requires device open() to be run prior to using the device
                                 ;     190  */
                                 ;     191 void xio_open_generic(uint8_t dev, x_open_t x_open,
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",191
0000005E 7100DC                  		ADD #0FFFFFFDCH, R0
00000061 C70123                  		MOV.B R1, 23H[R0]
00000064 A18A                    		MOV.L R2, 1CH[R0]
00000066 A183                    		MOV.L R3, 18H[R0]
00000068 A10C                    		MOV.L R4, 14H[R0]
0000006A E5000A04                		MOV.L 28H[R0], 10H[R0]
0000006E E5000B03                		MOV.L 2CH[R0], 0CH[R0]
00000072 E5000C02                		MOV.L 30H[R0], 08H[R0]
00000076 E5000D01                		MOV.L 34H[R0], 04H[R0]
0000007A 754E88                  		MOV.L #00000088H, R14
                                 ;     192 								   x_ctrl_t x_ctrl,
                                 ;     193 								   x_close_t x_close,
                                 ;     194 								   x_gets_t x_gets,
                                 ;     195 								   x_getc_t x_getc,
                                 ;     196 								   x_putc_t x_putc,
                                 ;     197 								   x_flow_t x_flow)
                                 ;     198 {
                                 ;     199 	xioDev_t *d = &ds[dev];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",199
0000007D 4D0E23                  		MUL 23H[R0].UB, R14
00000080 FB12rrrrrrrr            		MOV.L #_ds, R1
00000086 4BE1                    		ADD R14, R1
00000088 E301                    		MOV.L R1, [R0]
0000008A                         L27:	; entry.split
0000008A 754388                  		MOV.L #00000088H, R3
0000008D 6602                    		MOV.L #00000000H, R2
                                 ;     200 	memset (d, 0, sizeof(xioDev_t));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",200
0000008F EC01                    		MOV.L [R0], R1
00000091 7F88                    		SSTR.B
00000093                         L28:	; entry.split1
                                 ;     201 	d->magic_start = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",201
00000093 EC01                    		MOV.L [R0], R1
00000095 F819EF12                		MOV.W #12EFH, [R1]
00000099                         L29:	; entry.split2
                                 ;     202 	d->magic_end = MAGICNUM;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",202
00000099 EC01                    		MOV.L [R0], R1
0000009B F91942EF12              		MOV.W #12EFH, 84H[R1]
000000A0                         L30:	; entry.split3
                                 ;     203 	d->dev = dev;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",203
000000A0 590123                  		MOVU.B 23H[R0], R1
000000A3 EC02                    		MOV.L [R0], R2
000000A5 80A1                    		MOV.B R1, 02H[R2]
000000A7                         L31:	; entry.split4
                                 ;     204 
                                 ;     205 	// bind functions to device structure
                                 ;     206 	d->x_open = x_open;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",206
000000A7 A989                    		MOV.L 1CH[R0], R1
000000A9 EC02                    		MOV.L [R0], R2
000000AB A521                    		MOV.L R1, 50H[R2]
000000AD                         L32:	; entry.split5
                                 ;     207 	d->x_ctrl = x_ctrl;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",207
000000AD A981                    		MOV.L 18H[R0], R1
000000AF EC02                    		MOV.L [R0], R2
000000B1 A529                    		MOV.L R1, 54H[R2]
000000B3                         L33:	; entry.split6
                                 ;     208 	d->x_close = x_close;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",208
000000B3 A909                    		MOV.L 14H[R0], R1
000000B5 EC02                    		MOV.L [R0], R2
000000B7 A5A1                    		MOV.L R1, 58H[R2]
000000B9                         L34:	; entry.split7
                                 ;     209 	d->x_gets = x_gets;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",209
000000B9 A901                    		MOV.L 10H[R0], R1
000000BB EC02                    		MOV.L [R0], R2
000000BD A5A9                    		MOV.L R1, 5CH[R2]
000000BF                         L35:	; entry.split8
                                 ;     210 	d->x_getc = x_getc;	// you don't need to bind getc & putc unless you are going to use them directly
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",210
000000BF A889                    		MOV.L 0CH[R0], R1
000000C1 EC02                    		MOV.L [R0], R2
000000C3 A621                    		MOV.L R1, 60H[R2]
000000C5                         L36:	; entry.split9
                                 ;     211 	d->x_putc = x_putc;	// they are bound into the fdev stream struct
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",211
000000C5 A881                    		MOV.L 08H[R0], R1
000000C7 EC02                    		MOV.L [R0], R2
000000C9 A629                    		MOV.L R1, 64H[R2]
000000CB                         L37:	; entry.split10
                                 ;     212 	d->x_flow = x_flow;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",212
000000CB A809                    		MOV.L 04H[R0], R1
000000CD EC02                    		MOV.L [R0], R2
000000CF A6A1                    		MOV.L R1, 68H[R2]
000000D1 6709                    		RTSD #24H
000000D3                         _xio_open:
                                 		.STACK	_xio_open=20
                                 ;     213 
                                 ;     214 	// setup the stdio FILE struct and link udata back to the device struct
                                 ;     215 //RXMOD	fdev_setup_stream(&d->file, x_putc, x_getc, _FDEV_SETUP_RW);
                                 ;     216 //RXMOD	fdev_set_udata(&d->file, d);		// reference yourself for udata
                                 ;     217 }
                                 ;     218 
                                 ;     219 /********************************************************************************
                                 ;     220  * PUBLIC ENTRY POINTS - access the functions via the XIO_DEV number
                                 ;     221  * xio_open() - open function
                                 ;     222  * xio_gets() - entry point for non-blocking get line function
                                 ;     223  * xio_getc() - entry point for getc (not stdio compatible)
                                 ;     224  * xio_putc() - entry point for putc (not stdio compatible)
                                 ;     225  *
                                 ;     226  * It might be prudent to run an assertion such as below, but we trust the callers:
                                 ;     227  * 	if (dev < XIO_DEV_COUNT) blah blah blah
                                 ;     228  *	else  return (_FDEV_ERR);	// XIO_NO_SUCH_DEVICE
                                 ;     229  */
                                 ;     230 FILE *xio_open(uint8_t dev, const char *addr, flags_t flags)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",230
000000D3 7100F0                  		ADD #0FFFFFFF0H, R0
000000D6 8389                    		MOV.B R1, 0FH[R0]
000000D8 A082                    		MOV.L R2, 08H[R0]
000000DA 908B                    		MOV.W R3, 06H[R0]
                                 ;     231 {
                                 ;     232 	return (ds[dev].x_open(dev, addr, flags));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",232
000000DC B389                    		MOVU.B 0FH[R0], R1
000000DE EF1E                    		MOV.L R1, R14
000000E0 761E8800                		MUL #88H, R14
000000E4 FB22rrrrrrrr            		MOV.L #_ds, R2
000000EA 4BE2                    		ADD R14, R2
000000EC AD24                    		MOV.L 50H[R2], R4
000000EE B88B                    		MOVU.W 06H[R0], R3
000000F0 A882                    		MOV.L 08H[R0], R2
000000F2 7F14                    		JSR R4
000000F4 E301                    		MOV.L R1, [R0]
000000F6                         L39:	; entry.split
                                 ;     233 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",233
000000F6 6704                    		RTSD #10H
000000F8                         _xio_close:
                                 		.STACK	_xio_close=8
                                 ;     234 
                                 ;     235 void xio_close(const uint8_t dev)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",235
000000F8 6040                    		SUB #04H, R0
000000FA 8089                    		MOV.B R1, 03H[R0]
000000FC 754E88                  		MOV.L #00000088H, R14
                                 ;     236 {
                                 ;     237 	ds[dev].x_close(&ds[dev]);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",237
000000FF 4D0E03                  		MUL 03H[R0].UB, R14
00000102 FB12rrrrrrrr            		MOV.L #_ds, R1
00000108 4BE1                    		ADD R14, R1
0000010A AD92                    		MOV.L 58H[R1], R2
0000010C 7F12                    		JSR R2
0000010E 6701                    		RTSD #04H
00000110                         _xio_gets:
                                 		.STACK	_xio_gets=20
                                 ;     238 }
                                 ;     239 
                                 ;     240 int xio_gets(const uint8_t dev, char *buf, const int size)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",240
00000110 7100F0                  		ADD #0FFFFFFF0H, R0
00000113 8389                    		MOV.B R1, 0FH[R0]
00000115 A082                    		MOV.L R2, 08H[R0]
00000117 A00B                    		MOV.L R3, 04H[R0]
00000119 754E88                  		MOV.L #00000088H, R14
                                 ;     241 {
                                 ;     242 	return (ds[dev].x_gets(&ds[dev], buf, size));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",242
0000011C 4D0E0F                  		MUL 0FH[R0].UB, R14
0000011F FB12rrrrrrrr            		MOV.L #_ds, R1
00000125 4BE1                    		ADD R14, R1
00000127 AD9C                    		MOV.L 5CH[R1], R4
00000129 A882                    		MOV.L 08H[R0], R2
0000012B 7F14                    		JSR R4
0000012D E301                    		MOV.L R1, [R0]
0000012F                         L42:	; entry.split
                                 ;     243 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",243
0000012F 6704                    		RTSD #10H
00000131                         _xio_getc:
                                 		.STACK	_xio_getc=12
                                 ;     244 
                                 ;     245 int xio_getc(const uint8_t dev)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",245
00000131 6080                    		SUB #08H, R0
00000133 8189                    		MOV.B R1, 07H[R0]
00000135 754E88                  		MOV.L #00000088H, R14
                                 ;     246 {
                                 ;     247 	return (ds[dev].x_getc(&ds[dev].file));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",247
00000138 4D0E07                  		MUL 07H[R0].UB, R14
0000013B FB12rrrrrrrr            		MOV.L #_ds, R1
00000141 4BE1                    		ADD R14, R1
00000143 AE12                    		MOV.L 60H[R1], R2
00000145 6241                    		ADD #04H, R1
00000147 7F12                    		JSR R2
00000149 E301                    		MOV.L R1, [R0]
0000014B                         L44:	; entry.split
                                 ;     248 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",248
0000014B 6702                    		RTSD #08H
0000014D                         _xio_putc:
                                 		.STACK	_xio_putc=12
                                 ;     249 
                                 ;     250 int xio_putc(const uint8_t dev, const char c)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",250
0000014D 6080                    		SUB #08H, R0
0000014F 8189                    		MOV.B R1, 07H[R0]
00000151 8182                    		MOV.B R2, 06H[R0]
00000153 754E88                  		MOV.L #00000088H, R14
                                 ;     251 {
                                 ;     252 	return (ds[dev].x_putc(c, &ds[dev].file));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",252
00000156 4D0E07                  		MUL 07H[R0].UB, R14
00000159 FB22rrrrrrrr            		MOV.L #_ds, R2
0000015F 4BE2                    		ADD R14, R2
00000161 AE2B                    		MOV.L 64H[R2], R3
00000163 B181                    		MOVU.B 06H[R0], R1
00000165 6242                    		ADD #04H, R2
00000167 7F13                    		JSR R3
00000169 E301                    		MOV.L R1, [R0]
0000016B                         L46:	; entry.split
                                 ;     253 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",253
0000016B 6702                    		RTSD #08H
0000016D                         _xio_ctrl:
                                 		.STACK	_xio_ctrl=12
                                 ;     254 
                                 ;     255 /*
                                 ;     256  * xio_ctrl() - PUBLIC set control flags (top-level XIO_DEV access)
                                 ;     257  * xio_ctrl_generic() - PRIVATE but generic set-control-flags
                                 ;     258  */
                                 ;     259 int xio_ctrl(const uint8_t dev, const flags_t flags)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",259
0000016D 6080                    		SUB #08H, R0
0000016F 8189                    		MOV.B R1, 07H[R0]
00000171 9082                    		MOV.W R2, 04H[R0]
00000173 754E88                  		MOV.L #00000088H, R14
                                 ;     260 {
                                 ;     261 	return (xio_ctrl_generic(&ds[dev], flags));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",261
00000176 4D0E07                  		MUL 07H[R0].UB, R14
00000179 B882                    		MOVU.W 04H[R0], R2
0000017B FB12rrrrrrrr            		MOV.L #_ds, R1
00000181 4BE1                    		ADD R14, R1
00000183 39rrrr               W  		BSR _xio_ctrl_generic
00000186 E301                    		MOV.L R1, [R0]
00000188                         L48:	; entry.split
                                 ;     262 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",262
00000188 6702                    		RTSD #08H
0000018A                         _xio_ctrl_generic:
                                 		.STACK	_xio_ctrl_generic=16
                                 ;     263 
                                 ;     264 #define SETFLAG(t,f) if ((flags & t) != 0) { d->f = true; }
                                 ;     265 #define CLRFLAG(t,f) if ((flags & t) != 0) { d->f = false; }
                                 ;     266 
                                 ;     267 int xio_ctrl_generic(xioDev_t *d, const flags_t flags)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",267
0000018A 60C0                    		SUB #0CH, R0
0000018C A081                    		MOV.L R1, 08H[R0]
0000018E 908A                    		MOV.W R2, 06H[R0]
                                 ;     268 {
                                 ;     269 	SETFLAG(XIO_BLOCK,		flag_block);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",269
00000190 B889                    		MOVU.W 06H[R0], R1
00000192 7C01                    		BTST #00H, R1
00000194 10                   S  		BEQ L51
00000195                         L50:	; bb3
00000195 A881                    		MOV.L 08H[R0], R1
00000197 F9146C01                		MOV.B #01H, 6CH[R1]
0000019B                         L51:	; bb12
                                 ;     270 	CLRFLAG(XIO_NOBLOCK,	flag_block);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",270
0000019B B889                    		MOVU.W 06H[R0], R1
0000019D 7C11                    		BTST #01H, R1
0000019F 10                   S  		BEQ L53
000001A0                         L52:	; bb13
000001A0 A881                    		MOV.L 08H[R0], R1
000001A2 F9146C00                		MOV.B #00H, 6CH[R1]
000001A6                         L53:	; bb23
                                 ;     271 	SETFLAG(XIO_XOFF,		flag_xoff);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",271
000001A6 B889                    		MOVU.W 06H[R0], R1
000001A8 7C21                    		BTST #02H, R1
000001AA 10                   S  		BEQ L55
000001AB                         L54:	; bb24
000001AB A881                    		MOV.L 08H[R0], R1
000001AD F9147201                		MOV.B #01H, 72H[R1]
000001B1                         L55:	; bb34
                                 ;     272 	CLRFLAG(XIO_NOXOFF,		flag_xoff);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",272
000001B1 B889                    		MOVU.W 06H[R0], R1
000001B3 7C31                    		BTST #03H, R1
000001B5 10                   S  		BEQ L57
000001B6                         L56:	; bb35
000001B6 A881                    		MOV.L 08H[R0], R1
000001B8 F9147200                		MOV.B #00H, 72H[R1]
000001BC                         L57:	; bb45
                                 ;     273 	SETFLAG(XIO_ECHO,		flag_echo);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",273
000001BC B889                    		MOVU.W 06H[R0], R1
000001BE 7C41                    		BTST #04H, R1
000001C0 10                   S  		BEQ L59
000001C1                         L58:	; bb46
000001C1 A881                    		MOV.L 08H[R0], R1
000001C3 F9146D01                		MOV.B #01H, 6DH[R1]
000001C7                         L59:	; bb56
                                 ;     274 	CLRFLAG(XIO_NOECHO,		flag_echo);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",274
000001C7 B889                    		MOVU.W 06H[R0], R1
000001C9 7C51                    		BTST #05H, R1
000001CB 10                   S  		BEQ L61
000001CC                         L60:	; bb57
000001CC A881                    		MOV.L 08H[R0], R1
000001CE F9146D00                		MOV.B #00H, 6DH[R1]
000001D2                         L61:	; bb67
                                 ;     275 	SETFLAG(XIO_CRLF,		flag_crlf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",275
000001D2 B889                    		MOVU.W 06H[R0], R1
000001D4 7C61                    		BTST #06H, R1
000001D6 10                   S  		BEQ L63
000001D7                         L62:	; bb68
000001D7 A881                    		MOV.L 08H[R0], R1
000001D9 F9146E01                		MOV.B #01H, 6EH[R1]
000001DD                         L63:	; bb78
                                 ;     276 	CLRFLAG(XIO_NOCRLF,		flag_crlf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",276
000001DD B889                    		MOVU.W 06H[R0], R1
000001DF 7C71                    		BTST #07H, R1
000001E1 10                   S  		BEQ L65
000001E2                         L64:	; bb79
000001E2 A881                    		MOV.L 08H[R0], R1
000001E4 F9146E00                		MOV.B #00H, 6EH[R1]
000001E8                         L65:	; bb89
                                 ;     277 	SETFLAG(XIO_IGNORECR,	flag_ignorecr);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",277
000001E8 B889                    		MOVU.W 06H[R0], R1
000001EA 7C81                    		BTST #08H, R1
000001EC 10                   S  		BEQ L67
000001ED                         L66:	; bb90
000001ED A881                    		MOV.L 08H[R0], R1
000001EF F9146F01                		MOV.B #01H, 6FH[R1]
000001F3                         L67:	; bb100
                                 ;     278 	CLRFLAG(XIO_NOIGNORECR,	flag_ignorecr);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",278
000001F3 B889                    		MOVU.W 06H[R0], R1
000001F5 7C91                    		BTST #09H, R1
000001F7 10                   S  		BEQ L69
000001F8                         L68:	; bb101
000001F8 A881                    		MOV.L 08H[R0], R1
000001FA F9146F00                		MOV.B #00H, 6FH[R1]
000001FE                         L69:	; bb111
                                 ;     279 	SETFLAG(XIO_IGNORELF,	flag_ignorelf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",279
000001FE B889                    		MOVU.W 06H[R0], R1
00000200 7CA1                    		BTST #0AH, R1
00000202 10                   S  		BEQ L71
00000203                         L70:	; bb112
00000203 A881                    		MOV.L 08H[R0], R1
00000205 F9147001                		MOV.B #01H, 70H[R1]
00000209                         L71:	; bb122
                                 ;     280 	CLRFLAG(XIO_NOIGNORELF,	flag_ignorelf);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",280
00000209 B889                    		MOVU.W 06H[R0], R1
0000020B 7CB1                    		BTST #0BH, R1
0000020D 10                   S  		BEQ L73
0000020E                         L72:	; bb123
0000020E A881                    		MOV.L 08H[R0], R1
00000210 F9147000                		MOV.B #00H, 70H[R1]
00000214                         L73:	; bb133
                                 ;     281 	SETFLAG(XIO_LINEMODE,	flag_linemode);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",281
00000214 B889                    		MOVU.W 06H[R0], R1
00000216 7CC1                    		BTST #0CH, R1
00000218 10                   S  		BEQ L75
00000219                         L74:	; bb134
00000219 A881                    		MOV.L 08H[R0], R1
0000021B F9147101                		MOV.B #01H, 71H[R1]
0000021F                         L75:	; bb144
                                 ;     282 	CLRFLAG(XIO_NOLINEMODE,	flag_linemode);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",282
0000021F B889                    		MOVU.W 06H[R0], R1
00000221 7CD1                    		BTST #0DH, R1
00000223 10                   S  		BEQ L77
00000224                         L76:	; bb145
00000224 A881                    		MOV.L 08H[R0], R1
00000226 F9147100                		MOV.B #00H, 71H[R1]
0000022A                         L77:	; bb154
                                 ;     283 	return (XIO_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",283
0000022A F80600                  		MOV.L #00000000H, [R0]
0000022D 6601                    		MOV.L #00000000H, R1
0000022F                         L78:	; bb154.split
                                 ;     284 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",284
0000022F 6703                    		RTSD #0CH
00000231                         _xio_set_baud:
                                 		.STACK	_xio_set_baud=12
                                 ;     285 
                                 ;     286 /*
                                 ;     287  * xio_set_baud() - PUBLIC entry to set baud rate
                                 ;     288  *	Currently this only works on USART devices
                                 ;     289  */
                                 ;     290 int xio_set_baud(const uint8_t dev, const uint8_t baud)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",290
00000231 6080                    		SUB #08H, R0
00000233 8189                    		MOV.B R1, 07H[R0]
00000235 8182                    		MOV.B R2, 06H[R0]
                                 ;     291 {
                                 ;     292 //RXMOD	xioUsart_t *dx = (xioUsart_t *)&us[dev - XIO_DEV_USART_OFFSET];
                                 ;     293 //	xio_set_baud_usart(dx, baud);
                                 ;     294 	return (XIO_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",294
00000237 F80600                  		MOV.L #00000000H, [R0]
0000023A 6601                    		MOV.L #00000000H, R1
0000023C                         L80:	; entry.split
                                 ;     295 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",295
0000023C 6702                    		RTSD #08H
0000023E                         _xio_fc_null:
                                 		.STACK	_xio_fc_null=8
                                 ;     296 
                                 ;     297 /*
                                 ;     298  * xio_fc_null() - flow control null function
                                 ;     299  */
                                 ;     300 void xio_fc_null(xioDev_t *d)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",300
0000023E 6040                    		SUB #04H, R0
00000240 E301                    		MOV.L R1, [R0]
                                 ;     301 {
                                 ;     302 	return;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",302
00000242 6701                    		RTSD #04H
00000244                         _xio_set_stdin:
                                 		.STACK	_xio_set_stdin=8
                                 ;     303 }
                                 ;     304 
                                 ;     305 /*
                                 ;     306  * xio_set_stdin()  - set stdin from device number
                                 ;     307  * xio_set_stdout() - set stdout from device number
                                 ;     308  * xio_set_stderr() - set stderr from device number
                                 ;     309  *
                                 ;     310  *	stderr is defined in stdio as __iob[2]. Turns out stderr is the last RAM
                                 ;     311  *	allocated by the linker for this project. We usae that to keep a shadow
                                 ;     312  *	of __iob[2] for stack overflow detection and other memory corruption.
                                 ;     313  */
                                 ;     314 void xio_set_stdin(const uint8_t dev)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",314
00000244 6040                    		SUB #04H, R0
00000246 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",317
00000248 6701                    		RTSD #04H
0000024A                         _xio_set_stdout:
                                 		.STACK	_xio_set_stdout=8
                                 ;     315 {
                                 ;     316 //RXMOD	stdin  = &ds[dev].file;
                                 ;     317 }
                                 ;     318 void xio_set_stdout(const uint8_t dev)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",318
0000024A 6040                    		SUB #04H, R0
0000024C 8089                    		MOV.B R1, 03H[R0]
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",321
0000024E 6701                    		RTSD #04H
00000250                         _xio_set_stderr:
                                 		.STACK	_xio_set_stderr=8
                                 ;     319 {
                                 ;     320 //RXMOD	stdout = &ds[dev].file;
                                 ;     321 }
                                 ;     322 void xio_set_stderr(const uint8_t dev)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",322
00000250 6040                    		SUB #04H, R0
00000252 8089                    		MOV.B R1, 03H[R0]
                                 ;     323 {
                                 ;     324 //RXMOD	stderr = &ds[dev].file;
                                 ;     325 	xio.stderr_shadow = stderr;		// this is the last thing in RAM, so we use it as a memory corruption canary
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\xio.c",325
00000254 FBE2rrrrrrrr            		MOV.L #_xio, R14
0000025A FBF2rrrrrrrr            		MOV.L #__Stderr, R15
00000260 E3EF                    		MOV.L R15, [R14]
00000262 6701                    		RTSD #04H
                                 ;     326 }
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _ds:
00000000(00000198H)              		.blkl	102
00000198                         _xio:
00000198(00000004H)              		.blkl	1
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00802   LINES

Section List

Attr         Size               Name
CODE     0000000612(00000264H)  P
DATA     0000000412(0000019CH)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx12DB\$ccrx\xio.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\EasyMak_build\xio.lst
-output=C:\Workspace\e2studio\git\MT01\EasyMak_build\src\cnc\xio.obj
