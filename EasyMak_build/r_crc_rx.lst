* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Sun Feb 19 10:49:21 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  19-Feb-2017 10:49:21
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=r_crc_rx.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=r_crc_rx.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;r_crc_rx.c
                                 
                                 		.glb	_R_CRC_Init
                                 		.glb	_R_CRC_Compute
                                 		.glb	_R_BSP_HardwareLock
                                 		.glb	_R_BSP_HardwareUnlock
                                 		.glb	_R_CRC_GetVersion
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _R_CRC_Init:
                                 		.STACK	_R_CRC_Init=4
                                 ;       1 /***********************************************************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No 
                                 ;       4 * other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all 
                                 ;       5 * applicable laws, including copyright laws. 
                                 ;       6 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
                                 ;       7 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, 
                                 ;       8 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM 
                                 ;       9 * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES 
                                 ;      10 * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS 
                                 ;      11 * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      12 * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of 
                                 ;      13 * this software. By using this software, you agree to the additional terms and conditions found by accessing the 
                                 ;      14 * following link:
                                 ;      15 * http://www.renesas.com/disclaimer 
                                 ;      16 *
                                 ;      17 * Copyright (C) 2013 Renesas Electronics Corporation. All rights reserved.    
                                 ;      18 ***********************************************************************************************************************/
                                 ;      19 /***********************************************************************************************************************
                                 ;      20 * File Name	   : r_crc_rx.c
                                 ;      21 * Description  : Uses the RX CRC peripheral
                                 ;      22 ***********************************************************************************************************************/
                                 ;      23 /**********************************************************************************************************************
                                 ;      24 * History : DD.MM.YYYY Version Description           
                                 ;      25 *         : 28.02.2012 1.00    First Release            
                                 ;      26 *         : 10.05.2012 1.10    Updated to be compliant with FIT Module Spec v0.7
                                 ;      27 *         : 13.02.2013 1.20    Updated to be compliant with FIT Module Spec v1.02. Changed API for R_CMT_Compute() 
                                 ;      28 *                              because existing API had no way of informing user if lock was not able to be obtained.
                                 ;      29 ***********************************************************************************************************************/
                                 ;      30 
                                 ;      31 /***********************************************************************************************************************
                                 ;      32 Includes   <System Includes> , "Project Includes"
                                 ;      33 ***********************************************************************************************************************/
                                 ;      34 /* Fixed-size integer typedefs. */
                                 ;      35 #include <stdint.h>
                                 ;      36 /* bool support. */
                                 ;      37 #include <stdbool.h>
                                 ;      38 /* Has intrinsic support. Includes xchg() which is used in this code. */
                                 ;      39 #include <machine.h>
                                 ;      40 /* Includes board and MCU related header files. */
                                 ;      41 #include "platform.h"
                                 ;      42 /* Configuration for this package. */
                                 ;      43 #include "r_crc_rx_config.h"
                                 ;      44 /* Header file for this package. */
                                 ;      45 #include "r_crc_rx_if.h"
                                 ;      46 
                                 ;      47 /***********************************************************************************************************************
                                 ;      48 Macro definitions
                                 ;      49 ***********************************************************************************************************************/
                                 ;      50 /* Error checking on configuration options. */
                                 ;      51 #if (CRC_CFG_POLY_X8_X2_X_1 + CRC_CFG_POLY_X16_X15_X2_1 + CRC_CFG_POLY_X16_X12_X5_1) > 1
                                 ;      52     #error "Error! Only choose one CRC polynomial in r_crc_rx_config.h"
                                 ;      53 #endif
                                 ;      54 
                                 ;      55 #if defined(CRC_CFG_MSB_FIRST) && defined(CRC_CFG_LSB_FIRST)
                                 ;      56     #error "Error! Only choose MSB-first or LSB-first in r_crc_rx_config.h"
                                 ;      57 #endif
                                 ;      58 
                                 ;      59 /***********************************************************************************************************************
                                 ;      60 Typedef definitions
                                 ;      61 ***********************************************************************************************************************/
                                 ;      62  
                                 ;      63 /***********************************************************************************************************************
                                 ;      64 Private global variables and functions
                                 ;      65 ***********************************************************************************************************************/
                                 ;      66 /* Determine whether CRC peripheral has been enabled. */
                                 ;      67 static bool    g_crc_enabled = false;
                                 ;      68 
                                 ;      69 /* Internal functions. */
                                 ;      70 static bool crc_acquire_state(void);
                                 ;      71 static void crc_release_state(void);
                                 ;      72 
                                 ;      73 /***********************************************************************************************************************
                                 ;      74 * Function Name: R_CRC_Init
                                 ;      75 * Description  : Initializes the CRC for given input.
                                 ;      76 * Arguments    : none
                                 ;      77 * Return Value : none
                                 ;      78 ***********************************************************************************************************************/
                                 ;      79 void R_CRC_Init (void)
                                 ;      80 {
                                 ;      81     /* Enable the CRC peripheral if needed. */
                                 ;      82 #if defined(BSP_MCU_RX21_ALL) || defined(BSP_MCU_RX63_ALL) || defined(BSP_MCU_RX11_ALL)
                                 ;      83     /* Enable writing to MSTP registers. */
                                 ;      84     SYSTEM.PRCR.WORD = 0xA502;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",84
00000000 FBEE140008              		MOV.L #00080014H, R14
00000005 FAE9F50102A5            		MOV.W #0A502H, 03EAH[R14]
0000000B                         L11:	; entry.split
                                 ;      85 #endif
                                 ;      86 
                                 ;      87     /* Enable the CRC peripheral */
                                 ;      88     MSTP(CRC) = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",88
0000000B FBEE140008              		MOV.L #00080014H, R14
00000010 ECEF                    		MOV.L [R14], R15
00000012 7B7F                    		BCLR #17H, R15
00000014 E3EF                    		MOV.L R15, [R14]
00000016                         L12:	; entry.split1
                                 ;      89     
                                 ;      90 #if defined(BSP_MCU_RX21_ALL) || defined(BSP_MCU_RX63_ALL) || defined(BSP_MCU_RX11_ALL)
                                 ;      91     /* Disable writing to MSTP registers. */
                                 ;      92     SYSTEM.PRCR.WORD = 0xA500;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",92
00000016 FBEE140008              		MOV.L #00080014H, R14
0000001B FAE9F50100A5            		MOV.W #0A500H, 03EAH[R14]
00000021                         L13:	; entry.split2
                                 ;      93 #endif
                                 ;      94 
                                 ;      95     /* Set peripheral as initialized. */
                                 ;      96     g_crc_enabled = true;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",96
00000021 FBE2rrrrrrrr            		MOV.L #__$g_crc_enabled, R14
00000027 F8E401                  		MOV.B #01H, [R14]
0000002A                         L14:	; entry.split3
0000002A FBEE808208              		MOV.L #00088280H, R14
                                 ;      97     
                                 ;      98     /* Set polynomial. */
                                 ;      99 #if   defined(CRC_CFG_POLY_X8_X2_X_1)
                                 ;     100     CRC.CRCCR.BIT.GPS = 1;
                                 ;     101 #elif defined(CRC_CFG_POLY_X16_X15_X2_1)
                                 ;     102     CRC.CRCCR.BIT.GPS = 2;
                                 ;     103 #elif defined(CRC_CFG_POLY_X16_X12_X5_1)
                                 ;     104     CRC.CRCCR.BIT.GPS = 3;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",104
0000002F 58EF                    		MOVU.B [R14], R15
00000031 653F                    		OR #03H, R15
00000033 C3EF                    		MOV.B R15, [R14]
00000035                         L15:	; entry.split4
00000035 FBEE808208              		MOV.L #00088280H, R14
                                 ;     105 #else
                                 ;     106     #error "Error! Choose CRC Polynomial in r_crc_rx_config.h";
                                 ;     107 #endif
                                 ;     108 
                                 ;     109     /* Set MSB-first or LSB-first. */
                                 ;     110 #if   defined(CRC_CFG_MSB_FIRST)
                                 ;     111     CRC.CRCCR.BIT.LMS = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",111
0000003A F0E2                    		BSET #02H, [R14].B
0000003C                         L16:	; entry.split5
0000003C FBEE808208              		MOV.L #00088280H, R14
                                 ;     112 #elif defined(CRC_CFG_LSB_FIRST)
                                 ;     113     CRC.CRCCR.BIT.LMS = 0;
                                 ;     114 #else
                                 ;     115     #error "Error! Choose MSB or LSB first for CRC code in r_crc_rx_config.h";
                                 ;     116 #endif
                                 ;     117 
                                 ;     118     /* Perform register clear on CRCDOOR. */
                                 ;     119     CRC.CRCCR.BIT.DORCLR = 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",119
00000041 F0E7                    		BSET #07H, [R14].B
00000043 02                      		RTS
00000044                         _R_CRC_Compute:
                                 		.STACK	_R_CRC_Compute=32
                                 ;     120 }
                                 ;     121 
                                 ;     122 /***********************************************************************************************************************
                                 ;     123 * Function Name: R_CRC_Compute
                                 ;     124 * Description  : Compute the CRC for the input data given.
                                 ;     125 * Arguments    : seed - 
                                 ;     126 *                    Data to initialize the CRC calculation with
                                 ;     127 *                data - 
                                 ;     128 *                    Address of data to use
                                 ;     129 *                data_bytes - 
                                 ;     130 *                    Number of bytes of data
                                 ;     131 *                crc_out - 
                                 ;     132 *                    Address of where to store computed CRC value.
                                 ;     133 * Return Value : true -
                                 ;     134 *                    CRC value computed.
                                 ;     135 *                false -
                                 ;     136 *                    CRC peripheral is busy with another request or it was not initialized.
                                 ;     137 ***********************************************************************************************************************/
                                 ;     138 bool R_CRC_Compute (uint16_t seed, uint8_t * data, uint32_t data_bytes, uint16_t * const crc_out)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",138
00000044 7100E4                  		ADD #0FFFFFFE4H, R0
00000047 9309                    		MOV.W R1, 1AH[R0]
00000049 A10A                    		MOV.L R2, 14H[R0]
0000004B A103                    		MOV.L R3, 10H[R0]
0000004D A08C                    		MOV.L R4, 0CH[R0]
                                 ;     139 {
                                 ;     140     /* Loop variable. */
                                 ;     141     uint32_t i;
                                 ;     142     /* Used for CRC calculation. */
                                 ;     143     uint16_t crc_read;
                                 ;     144 
                                 ;     145     /* Check to make sure peripheral has been initialized. */
                                 ;     146     if (g_crc_enabled == false)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",146
0000004F FBE2rrrrrrrr            		MOV.L #__$g_crc_enabled, R14
00000055 58EE                    		MOVU.B [R14], R14
00000057 610E                    		CMP #00H, R14
00000059 18                   S  		BNE L19
0000005A                         L18:	; bb7
                                 ;     147     {
                                 ;     148         /* Must initialize peripheral first. */
                                 ;     149         return false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",149
0000005A 3C0300                  		MOV.B #00H, 03H[R0]
0000005D 2Err                 B  		BRA L29
0000005F                         L19:	; bb14
                                 ;     150     }
                                 ;     151 
                                 ;     152     /* Grab state to make sure we do not interfere with another operation. */
                                 ;     153     if (crc_acquire_state() != true)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",153
0000005F 39rrrr               W  		BSR __$crc_acquire_state
00000062 6111                    		CMP #01H, R1
00000064 10                   S  		BEQ L21
00000065                         L20:	; bb15
                                 ;     154     {
                                 ;     155         /* Another operation is already in progress */
                                 ;     156         return false;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",156
00000065 3C0300                  		MOV.B #00H, 03H[R0]
00000068 2Err                 B  		BRA L29
0000006A                         L21:	; bb22
                                 ;     157     }
                                 ;     158        
                                 ;     159     /* Seed CRC */
                                 ;     160     CRC.CRCDOR = seed;  
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",160
0000006A FBEE7E8208              		MOV.L #0008827EH, R14
0000006F D50E0D02                		MOV.W 1AH[R0], 04H[R14]
00000073                         L22:	; bb22.split
                                 ;     161       
                                 ;     162     /* Compute CRC-16 on data */
                                 ;     163     for(i = 0; i < data_bytes; i++)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",163
00000073 3E0100                  		MOV.L #00000000H, 04H[R0]
00000076 2Err                 B  		BRA L24
00000078                         L23:	; bb24
                                 ;     164     {
                                 ;     165         /* Update CRC value */
                                 ;     166         CRC.CRCDIR = data[i];
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",166
00000078 A809                    		MOV.L 04H[R0], R1
0000007A A90A                    		MOV.L 14H[R0], R2
0000007C FEC211                  		MOVU.B [R2,R1], R1
0000007F FB2E7E8208              		MOV.L #0008827EH, R2
00000084 80A9                    		MOV.B R1, 03H[R2]
00000086 A809                    		MOV.L 04H[R0], R1
00000088 6211                    		ADD #01H, R1
0000008A A009                    		MOV.L R1, 04H[R0]
0000008C                         L24:	; bb31
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",163
0000008C A809                    		MOV.L 04H[R0], R1
0000008E 06850104                		CMP 10H[R0].L, R1
00000092 23rr                    		BLTU L23
00000094                         L25:	; bb37
                                 ;     167     }
                                 ;     168 
                                 ;     169     /* Check generated CRC versus stored */
                                 ;     170     crc_read = CRC.CRCDOR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",170
00000094 FBEE7E8208              		MOV.L #0008827EH, R14
00000099 D5E00204                		MOV.W 04H[R14], 08H[R0]
0000009D                         L26:	; bb37.split
                                 ;     171         
                                 ;     172     /* Release state so other operations can be performed. */
                                 ;     173     crc_release_state();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",173
0000009D 39rrrr               W  		BSR __$crc_release_state
000000A0                         L27:	; bb37.split1
                                 ;     174 
                                 ;     175 #if   defined(CRC_CFG_POLY_X8_X2_X_1)
                                 ;     176     /* If 8-bit CRC is used then only the low order byte of CRCDOR is updated. Mask off top byte to make sure nothing
                                 ;     177        is there. */
                                 ;     178     crc_read = (crc_read & 0x00FF);
                                 ;     179 #endif
                                 ;     180 
                                 ;     181     /* Store CRC reading into output pointer. */
                                 ;     182     *crc_out = crc_read;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",182
000000A0 9901                    		MOV.W 08H[R0], R1
000000A2 A88A                    		MOV.L 0CH[R0], R2
000000A4 D321                    		MOV.W R1, [R2]
000000A6                         L28:	; bb37.split2
                                 ;     183 
                                 ;     184     return true;    
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",184
000000A6 3C0301                  		MOV.B #01H, 03H[R0]
000000A9                         L29:	; bb42
000000A9 C500030B                		MOV.B 03H[R0], 0BH[R0]
                                 ;     185 } 
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",185
000000AD B289                    		MOVU.B 0BH[R0], R1
000000AF 6707                    		RTSD #1CH
000000B1                         __$crc_acquire_state:
                                 		.STACK	__$crc_acquire_state=8
                                 ;     186 
                                 ;     187 /***********************************************************************************************************************
                                 ;     188 * Function Name: crc_acquire_state
                                 ;     189 * Description  : Attempt to acquire the state so that we right to perform an operation.
                                 ;     190 * Arguments    : none
                                 ;     191 * Return Value : true - 
                                 ;     192 *                    Lock was obtained
                                 ;     193 *                false - 
                                 ;     194 *                    Lock was not obtained because code is busy with another on-going operation.
                                 ;     195 ***********************************************************************************************************************/
                                 ;     196 static bool crc_acquire_state (void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",196
000000B1 6040                    		SUB #04H, R0
000000B3 66A1                    		MOV.L #0000000AH, R1
                                 ;     197 {
                                 ;     198     /* Attempt to acquire lock. */
                                 ;     199     return R_BSP_HardwareLock(BSP_LOCK_CRC);   
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",199
000000B5 05rrrrrr             A  		BSR _R_BSP_HardwareLock
000000B9 8089                    		MOV.B R1, 03H[R0]
000000BB B089                    		MOVU.B 03H[R0], R1
000000BD                         L31:	; entry.split
                                 ;     200 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",200
000000BD 5B11                    		MOVU.B R1, R1
000000BF 6701                    		RTSD #04H
000000C1                         __$crc_release_state:
                                 		.STACK	__$crc_release_state=4
                                 ;     201 
                                 ;     202 /***********************************************************************************************************************
                                 ;     203 * Function Name: crc_release_state
                                 ;     204 * Description  : Release lock so that other operations can be performed.
                                 ;     205 * Arguments    : none
                                 ;     206 * Return Value : none
                                 ;     207 ***********************************************************************************************************************/
                                 ;     208 static void crc_release_state (void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",208
000000C1 66A1                    		MOV.L #0000000AH, R1
                                 ;     209 {
                                 ;     210     /* Release lock. */
                                 ;     211     R_BSP_HardwareUnlock(BSP_LOCK_CRC);    
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",211
000000C3 05rrrrrr             A  		BSR _R_BSP_HardwareUnlock
000000C7 02                      		RTS
000000C8                         _R_CRC_GetVersion:
                                 		.STACK	_R_CRC_GetVersion=8
                                 ;     212 }
                                 ;     213 
                                 ;     214 /***********************************************************************************************************************
                                 ;     215 * Function Name: R_CRC_GetVersion
                                 ;     216 * Description  : Returns the current version of this module. The version number is encoded where the top 2 bytes are the
                                 ;     217 *                major version number and the bottom 2 bytes are the minor version number. For example, Version 4.25 
                                 ;     218 *                would be returned as 0x00040019.
                                 ;     219 * Arguments    : none
                                 ;     220 * Return Value : Version of this module.
                                 ;     221 ***********************************************************************************************************************/
                                 ;     222 #pragma inline(R_CRC_GetVersion)
                                 ;     223 uint32_t R_CRC_GetVersion (void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",223
000000C8 6040                    		SUB #04H, R0
                                 ;     224 {
                                 ;     225     /* These version macros are defined in r_cmt_rx_if.h. */
                                 ;     226     return ((((uint32_t)CRC_RX_VERSION_MAJOR) << 16) | (uint32_t)CRC_RX_VERSION_MINOR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",226
000000CA F80E140001              		MOV.L #00010014H, [R0]
000000CF FB1E140001              		MOV.L #00010014H, R1
000000D4                         L34:	; entry.split
                                 ;     227 } 
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_crc_rx\src\r_crc_rx.c",227
000000D4 6701                    		RTSD #04H
                                 ;     228 
                                 		.SECTION	D_1,ROMDATA
00000000                         __$g_crc_enabled:
00000000 00                      		.byte	00H
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00396   LINES

Section List

Attr         Size               Name
CODE     0000000214(000000D6H)  P
ROMDATA  0000000001(00000001H)  D_1

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx99\$ccrx\r_crc_rx.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\EasyMak_build\r_crc_rx.lst
-output=C:\Workspace\e2studio\git\MT01\EasyMak_build\r_crc_rx\src\r_crc_rx.obj
