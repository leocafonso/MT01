* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Sun Feb 19 10:48:41 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  19-Feb-2017 10:48:41
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=cycle_waiting_switch.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=cycle_waiting_switch.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;cycle_waiting_switch.c
                                 
                                 		.glb	_cm
                                 		.glb	_macro_func_ptr
                                 		.glb	_xArcoOkSync
                                 		.glb	_qKeyboard
                                 		.glb	_lstop
                                 		.glb	__set_ws_func
                                 		.glb	_cm_straight_wait
                                 		.glb	_cm_wait_callback
                                 		.glb	_cm_get_runtime_busy
                                 		.glb	_pl_arcook_start
                                 		.glb	_xQueueGenericReset
                                 		.glb	_xQueueGenericReceive
                                 		.glb	_stopDuringCut_Set
                                 		.glb	_xQueueGenericSend
                                 		.glb	_command_idle
                                 		.glb	__wait_restore_settings
                                 		.glb	_mp_flush_planner
                                 		.glb	_cm_cycle_end
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         __set_ws_func:
                                 		.STACK	__set_ws_func=12
                                 ;       1 /*
                                 ;       2  * cycle_probing.c - probing cycle extension to canonical_machine.c
                                 ;       3  * Part of TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2010 - 2015 Alden S Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * As a special exception, you may use this file as part of a software library without
                                 ;      13  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      14  * inline functions from this file, or you compile this file and link it with  other
                                 ;      15  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      16  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      17  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      18  * GNU General Public License.
                                 ;      19  *
                                 ;      20  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      21  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      22  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      23  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      24  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      25  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      26  */
                                 ;      27 #include "tinyg.h"
                                 ;      28 #include "config.h"
                                 ;      29 #include "json_parser.h"
                                 ;      30 #include "text_parser.h"
                                 ;      31 #include "canonical_machine.h"
                                 ;      32 #include "spindle.h"
                                 ;      33 #include "report.h"
                                 ;      34 #include "switch.h"
                                 ;      35 #include "util.h"
                                 ;      36 #include "planner.h"
                                 ;      37 #include "hardware.h"
                                 ;      38 #include "switch.h"
                                 ;      39 #include "macros.h"
                                 ;      40 #include "plasma.h"
                                 ;      41 #include "controller.h"
                                 ;      42 #include "keyboard.h"
                                 ;      43 #include "config_SwTimers.h"
                                 ;      44 #include "lcd.h"
                                 ;      45 
                                 ;      46 
                                 ;      47 extern bool lstop;
                                 ;      48 extern void warm_stop(uint8_t flag);
                                 ;      49 /**** Probe singleton structure ****/
                                 ;      50 
                                 ;      51 #define MINIMUM_PROBE_TRAVEL 0.254
                                 ;      52 
                                 ;      53 struct pbWaitingSwitchSingleton {						// persistent probing runtime variables
                                 ;      54 	stat_t (*func)();							// binding for callback function state machine
                                 ;      55 
                                 ;      56 	// switch configuration
                                 ;      57 	uint8_t waiting_switch;						// which switch should we check?
                                 ;      58 	uint8_t saved_switch_type;					// saved switch type NO/NC
                                 ;      59 	uint8_t saved_switch_mode;	                // save the probe switch's original settings
                                 ;      60 };
                                 ;      61 static struct pbWaitingSwitchSingleton ws;
                                 ;      62 
                                 ;      63 /**** NOTE: global prototypes and other .h info is located in canonical_machine.h ****/
                                 ;      64 
                                 ;      65 static stat_t _waiting_init();
                                 ;      66 static stat_t _waiting_start();
                                 ;      67 static stat_t _waiting_finish();
                                 ;      68 static stat_t _waiting_finalize_exit();
                                 ;      69 static stat_t _waiting_error_exit(int8_t axis);
                                 ;      70 
                                 ;      71 
                                 ;      72 /**** HELPERS ***************************************************************************
                                 ;      73  * _set_pb_func() - a convenience for setting the next dispatch vector and exiting
                                 ;      74  */
                                 ;      75 
                                 ;      76 uint8_t _set_ws_func(uint8_t (*func)())
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",76
00000000 6080                    		SUB #08H, R0
00000002 A009                    		MOV.L R1, 04H[R0]
                                 ;      77 {
                                 ;      78 	ws.func = func;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",78
00000004 FBE2rrrrrrrr            		MOV.L #__$ws, R14
0000000A E3E1                    		MOV.L R1, [R14]
0000000C                         L11:	; entry.split
                                 ;      79 	return (STAT_EAGAIN);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",79
0000000C 3C0302                  		MOV.B #02H, 03H[R0]
0000000F B089                    		MOVU.B 03H[R0], R1
00000011                         L12:	; entry.split1
                                 ;      80 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",80
00000011 5B11                    		MOVU.B R1, R1
00000013 6702                    		RTSD #08H
00000015                         _cm_straight_wait:
                                 		.STACK	_cm_straight_wait=12
                                 ;      81 
                                 ;      82 /****************************************************************************************
                                 ;      83  * cm_probing_cycle_start()	- G38.2 homing cycle using limit switches
                                 ;      84  * cm_probing_callback() 	- main loop callback for running the homing cycle
                                 ;      85  *
                                 ;      86  *	--- Some further details ---
                                 ;      87  *
                                 ;      88  *	All cm_probe_cycle_start does is prevent any new commands from queueing to the
                                 ;      89  *	planner so that the planner can move to a sop and report MACHINE_PROGRAM_STOP.
                                 ;      90  *	OK, it also queues the function that's called once motion has stopped.
                                 ;      91  *
                                 ;      92  *	Note: When coding a cycle (like this one) you get to perform one queued move per
                                 ;      93  *	entry into the continuation, then you must exit.
                                 ;      94  *
                                 ;      95  *	Another Note: When coding a cycle (like this one) you must wait until
                                 ;      96  *	the last move has actually been queued (or has finished) before declaring
                                 ;      97  *	the cycle to be done. Otherwise there is a nasty race condition in the
                                 ;      98  *	tg_controller() that will accept the next command before the position of
                                 ;      99  *	the final move has been recorded in the Gcode model. That's what the call
                                 ;     100  *	to cm_get_runtime_busy() is about.
                                 ;     101  */
                                 ;     102 
                                 ;     103 uint8_t cm_straight_wait(float time)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",103
00000015 6080                    		SUB #08H, R0
00000017 A009                    		MOV.L R1, 04H[R0]
                                 ;     104 {
                                 ;     105 	cm.wait_state = WS_WAITING;		// wait until planner queue empties before completing initialization
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",105
00000019 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000001F FAE4290202              		MOV.B #02H, 0229H[R14]
00000024                         L14:	; entry.split
                                 ;     106 	ws.func = _waiting_init; 			// bind probing initialization function
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",106
00000024 FBE2rrrrrrrr            		MOV.L #__$ws, R14
0000002A FBF2rrrrrrrr            		MOV.L #__$_waiting_init, R15
00000030 E3EF                    		MOV.L R15, [R14]
00000032                         L15:	; entry.split1
                                 ;     107 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",107
00000032 3C0300                  		MOV.B #00H, 03H[R0]
00000035 B089                    		MOVU.B 03H[R0], R1
00000037                         L16:	; entry.split2
                                 ;     108 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",108
00000037 5B11                    		MOVU.B R1, R1
00000039 6702                    		RTSD #08H
0000003B                         _cm_wait_callback:
                                 		.STACK	_cm_wait_callback=12
                                 ;     109 
                                 ;     110 uint8_t cm_wait_callback(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",110
0000003B 6080                    		SUB #08H, R0
                                 ;     111 {
                                 ;     112 	if ((cm.cycle_state != CYCLE_WAITINGSWITCH) && (cm.wait_state != WS_WAITING)) {
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",112
0000003D FBE2rrrrrrrr            		MOV.L #_cm, R14
00000043 5AEE1E02                		MOVU.B 021EH[R14], R14
00000047 615E                    		CMP #05H, R14
00000049 18                   S  		BNE L19
0000004A 2Err                 B  		BRA L21
0000004C                         L18:	; bb1
                                 ;     113 		return (STAT_NOOP);				// exit if not in a probe cycle or waiting for one
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",113
0000004C 3C0603                  		MOV.B #03H, 06H[R0]
0000004F 2Err                 B  		BRA L28
00000051                         L19:	; bb7
00000051 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000057 5AEE2902                		MOVU.B 0229H[R14], R14
0000005B 612E                    		CMP #02H, R14
0000005D 10                   S  		BEQ L21
0000005E                         L20:	; bb12
0000005E F80601                  		MOV.L #00000001H, [R0]
00000061 08                   S  		BRA L22
00000062                         L21:	; bb13
00000062 F80600                  		MOV.L #00000000H, [R0]
00000065                         L22:	; bb14
00000065 EC01                    		MOV.L [R0], R1
00000067 6101                    		CMP #00H, R1
00000069 21rr                    		BNE L18
0000006B                         L23:	; bb19
                                 ;     114 	}
                                 ;     115 	if (cm_get_runtime_busy() == true) { return (STAT_EAGAIN);}	// sync to planner move ends
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",115
0000006B 05rrrrrr             A  		BSR _cm_get_runtime_busy
0000006F 6111                    		CMP #01H, R1
00000071 18                   S  		BNE L25
00000072                         L24:	; bb20
00000072 3C0602                  		MOV.B #02H, 06H[R0]
00000075 2Err                 B  		BRA L28
00000077                         L25:	; bb28
                                 ;     116 	if (lstop) { return (STAT_EAGAIN);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",116
00000077 FBE2rrrrrrrr            		MOV.L #_lstop, R14
0000007D 58EE                    		MOVU.B [R14], R14
0000007F 610E                    		CMP #00H, R14
00000081 10                   S  		BEQ L27
00000082                         L26:	; bb29
00000082 3C0602                  		MOV.B #02H, 06H[R0]
00000085 2Err                 B  		BRA L28
00000087                         L27:	; bb37
                                 ;     117     return (ws.func());                                         // execute the current homing move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",117
00000087 FBE2rrrrrrrr            		MOV.L #__$ws, R14
0000008D ECEE                    		MOV.L [R14], R14
0000008F 7F1E                    		JSR R14
00000091 8181                    		MOV.B R1, 06H[R0]
00000093                         L28:	; bb41
00000093 C5000607                		MOV.B 06H[R0], 07H[R0]
                                 ;     118 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",118
00000097 B189                    		MOVU.B 07H[R0], R1
00000099 6702                    		RTSD #08H
0000009B                         __$_waiting_init:
                                 		.STACK	__$_waiting_init=8
                                 ;     119 
                                 ;     120 /*
                                 ;     121  * _probing_init()	- G38.2 homing cycle using limit switches
                                 ;     122  *
                                 ;     123  *	These initializations are required before starting the probing cycle.
                                 ;     124  *	They must be done after the planner has exhasted all current CYCLE moves as
                                 ;     125  *	they affect the runtime (specifically the switch modes). Side effects would
                                 ;     126  *	include limit switches initiating probe actions instead of just killing movement
                                 ;     127  */
                                 ;     128 
                                 ;     129 static uint8_t _waiting_init()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",129
0000009B 6040                    		SUB #04H, R0
                                 ;     130 {
                                 ;     131 	// so optimistic... ;)
                                 ;     132 	// NOTE: it is *not* an error condition for the probe not to trigger.
                                 ;     133 	// it is an error for the limit or homing switches to fire, or for some other configuration error.
                                 ;     134 	cm.probe_state = WS_FAILED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",134
0000009D FBE2rrrrrrrr            		MOV.L #_cm, R14
000000A3 FAE4280200              		MOV.B #00H, 0228H[R14]
000000A8                         L30:	; entry.split
                                 ;     135 	cm.cycle_state = CYCLE_WAITINGSWITCH;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",135
000000A8 FBE2rrrrrrrr            		MOV.L #_cm, R14
000000AE FAE41E0205              		MOV.B #05H, 021EH[R14]
000000B3                         L31:	; entry.split1
                                 ;     136 
                                 ;     137 
                                 ;     138 	return (_set_ws_func(_waiting_start));							// start the move
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",138
000000B3 FB12rrrrrrrr            		MOV.L #__$_waiting_start, R1
000000B9 39rrrr               W  		BSR __set_ws_func
000000BC 8089                    		MOV.B R1, 03H[R0]
000000BE B089                    		MOVU.B 03H[R0], R1
000000C0                         L32:	; entry.split2
                                 ;     139 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",139
000000C0 5B11                    		MOVU.B R1, R1
000000C2 6701                    		RTSD #04H
000000C4                         __$_waiting_start:
                                 		.STACK	__$_waiting_start=16
                                 ;     140 
                                 ;     141 /*
                                 ;     142  * _probing_start()
                                 ;     143  */
                                 ;     144 
                                 ;     145 static stat_t _waiting_start()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",145
000000C4 60C0                    		SUB #0CH, R0
                                 ;     146 {
                                 ;     147 	uint32_t lRet = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",147
000000C6 F80600                  		MOV.L #00000000H, [R0]
000000C9                         L34:	; entry.split
                                 ;     148 	pl_arcook_start();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",148
000000C9 05rrrrrr             A  		BSR _pl_arcook_start
000000CD                         L35:	; entry.split1
                                 ;     149 	xQueueReset((xQueueHandle)xArcoOkSync);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",149
000000CD FBE2rrrrrrrr            		MOV.L #_xArcoOkSync, R14
000000D3 ECE1                    		MOV.L [R14], R1
000000D5 6602                    		MOV.L #00000000H, R2
000000D7 05rrrrrr             A  		BSR _xQueueGenericReset
000000DB                         L36:	; entry.split2
                                 ;     150 	lRet = xSemaphoreTake( xArcoOkSync, pdMS_TO_TICKS(3000) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",150
000000DB FBE2rrrrrrrr            		MOV.L #_xArcoOkSync, R14
000000E1 ECE1                    		MOV.L [R14], R1
000000E3 FB3AB80B                		MOV.L #00000BB8H, R3
000000E7 6602                    		MOV.L #00000000H, R2
000000E9 EF24                    		MOV.L R2, R4
000000EB 05rrrrrr             A  		BSR _xQueueGenericReceive
000000EF E301                    		MOV.L R1, [R0]
000000F1                         L37:	; entry.split3
                                 ;     151 	if (lRet == pdFALSE)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",151
000000F1 EC01                    		MOV.L [R0], R1
000000F3 6101                    		CMP #00H, R1
000000F5 21rr                    		BNE L43
000000F7                         L38:	; bb7
                                 ;     152 	{
                                 ;     153 		uint32_t qSend = ARCO_OK_INIT_FAILED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",153
000000F7 F90E010000FC            		MOV.L #0FFFC0000H, 04H[R0]
000000FD                         L39:	; bb7.split
000000FD 6611                    		MOV.L #00000001H, R1
                                 ;     154 		stopDuringCut_Set(true);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",154
000000FF 05rrrrrr             A  		BSR _stopDuringCut_Set
00000103                         L40:	; bb7.split4
                                 ;     155 		xQueueSend( qKeyboard, &qSend, 0 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",155
00000103 FBE2rrrrrrrr            		MOV.L #_qKeyboard, R14
00000109 ECE1                    		MOV.L [R14], R1
0000010B 6603                    		MOV.L #00000000H, R3
0000010D 710204                  		ADD #04H, R0, R2
00000110 EF34                    		MOV.L R3, R4
00000112 05rrrrrr             A  		BSR _xQueueGenericSend
00000116                         L41:	; bb7.split5
                                 ;     156 		macro_func_ptr = command_idle;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",156
00000116 FBE2rrrrrrrr            		MOV.L #_macro_func_ptr, R14
0000011C FBF2rrrrrrrr            		MOV.L #_command_idle, R15
00000122 E3EF                    		MOV.L R15, [R14]
00000124                         L42:	; bb7.split6
                                 ;     157 		cm.wait_state = WS_FAILED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",157
00000124 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000012A FAE4290200              		MOV.B #00H, 0229H[R14]
0000012F 2Err                 B  		BRA L44
00000131                         L43:	; bb11
                                 ;     158 	//	return (STAT_OK);
                                 ;     159 	}
                                 ;     160 	else
                                 ;     161 	{
                                 ;     162 		cm.wait_state = WS_SUCCEEDED;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",162
00000131 FBE2rrrrrrrr            		MOV.L #_cm, R14
00000137 FAE4290201              		MOV.B #01H, 0229H[R14]
0000013C                         L44:	; bb15
                                 ;     163 	}
                                 ;     164 	return (_set_ws_func(_waiting_finish));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",164
0000013C FB12rrrrrrrr            		MOV.L #__$_waiting_finish, R1
00000142 39rrrr               W  		BSR __set_ws_func
00000145 8289                    		MOV.B R1, 0BH[R0]
00000147 B289                    		MOVU.B 0BH[R0], R1
00000149                         L45:	; bb15.split
                                 ;     165 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",165
00000149 5B11                    		MOVU.B R1, R1
0000014B 6703                    		RTSD #0CH
0000014D                         __$_waiting_finish:
                                 		.STACK	__$_waiting_finish=8
                                 ;     166 
                                 ;     167 /*
                                 ;     168  * _probing_finish()
                                 ;     169  */
                                 ;     170 
                                 ;     171 static stat_t _waiting_finish()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",171
0000014D 6040                    		SUB #04H, R0
                                 ;     172 {
                                 ;     173 	return (_set_ws_func(_waiting_finalize_exit));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",173
0000014F FB12rrrrrrrr            		MOV.L #__$_waiting_finalize_exit, R1
00000155 39rrrr               W  		BSR __set_ws_func
00000158 8089                    		MOV.B R1, 03H[R0]
0000015A B089                    		MOVU.B 03H[R0], R1
0000015C                         L47:	; entry.split
                                 ;     174 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",174
0000015C 5B11                    		MOVU.B R1, R1
0000015E 6701                    		RTSD #04H
00000160                         __wait_restore_settings:
                                 		.STACK	__wait_restore_settings=4
                                 ;     175 
                                 ;     176 /*
                                 ;     177  * _probe_restore_settings()
                                 ;     178  * _probing_finalize_exit()
                                 ;     179  * _probing_error_exit()
                                 ;     180  */
                                 ;     181 
                                 ;     182 void _wait_restore_settings()
                                 ;     183 {
                                 ;     184 	mp_flush_planner(); 						// we should be stopped now, but in case of switch closure
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",184
00000160 05rrrrrr             A  		BSR _mp_flush_planner
00000164                         L49:	; entry.split
                                 ;     185 
                                 ;     186 	cm_cycle_end();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",186
00000164 05rrrrrr             A  		BSR _cm_cycle_end
00000168                         L50:	; entry.split1
                                 ;     187 	cm.cycle_state = CYCLE_OFF;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",187
00000168 FBE2rrrrrrrr            		MOV.L #_cm, R14
0000016E FAE41E0200              		MOV.B #00H, 021EH[R14]
00000173 02                      		RTS
00000174                         __$_waiting_finalize_exit:
                                 		.STACK	__$_waiting_finalize_exit=8
                                 ;     188 }
                                 ;     189 
                                 ;     190 static stat_t _waiting_finalize_exit()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",190
00000174 6040                    		SUB #04H, R0
                                 ;     191 {
                                 ;     192 	_wait_restore_settings();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",192
00000176 39rrrr               W  		BSR __wait_restore_settings
00000179                         L52:	; entry.split
                                 ;     193 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",193
00000179 3C0300                  		MOV.B #00H, 03H[R0]
0000017C B089                    		MOVU.B 03H[R0], R1
0000017E                         L53:	; entry.split1
                                 ;     194 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\cycle_waiting_switch.c",194
0000017E 5B11                    		MOVU.B R1, R1
00000180 6701                    		RTSD #04H
                                 ;     195 
                                 ;     196 static stat_t _waiting_error_exit(int8_t axis)
                                 ;     197 {
                                 ;     198 	// clean up and exit
                                 ;     199 	_probe_restore_settings();
                                 ;     200 	return (STAT_PROBE_CYCLE_FAILED);
                                 ;     201 }
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         __$ws:
00000000(00000008H)              		.blkl	2
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00470   LINES

Section List

Attr         Size               Name
CODE     0000000386(00000182H)  P
DATA     0000000008(00000008H)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\cycle_waiting_switch.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\EasyMak_build\cycle_waiting_switch.lst
-output=C:\Workspace\e2studio\git\MT01\EasyMak_build\src\cnc\cycle_waiting_switch.obj
