* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Sun Feb 19 10:48:46 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  19-Feb-2017 10:48:46
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=pwm.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=pwm.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;pwm.c
                                 
                                 		.glb	_pwm
                                 		.glb	_pwm_init
                                 		.glb	_pwm_set_freq
                                 		.glb	_pwm_set_duty
                                 		.glb	_pwm_print_p1frq
                                 		.glb	_text_print_flt
                                 		.glb	_pwm_print_p1csl
                                 		.glb	_pwm_print_p1csh
                                 		.glb	_pwm_print_p1cpl
                                 		.glb	_pwm_print_p1cph
                                 		.glb	_pwm_print_p1wsl
                                 		.glb	_pwm_print_p1wsh
                                 		.glb	_pwm_print_p1wpl
                                 		.glb	_pwm_print_p1wph
                                 		.glb	_pwm_print_p1pof
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _pwm_init:
                                 		.STACK	_pwm_init=4
                                 ;       1 /*
                                 ;       2  * pwm.c - pulse width modulation drivers
                                 ;       3  * This file is part of the TinyG project
                                 ;       4  *
                                 ;       5  * Copyright (c) 2012 - 2015 Alden S. Hart, Jr.
                                 ;       6  *
                                 ;       7  * This file ("the software") is free software: you can redistribute it and/or modify
                                 ;       8  * it under the terms of the GNU General Public License, version 2 as published by the
                                 ;       9  * Free Software Foundation. You should have received a copy of the GNU General Public
                                 ;      10  * License, version 2 along with the software.  If not, see <http://www.gnu.org/licenses/>.
                                 ;      11  *
                                 ;      12  * As a special exception, you may use this file as part of a software library without
                                 ;      13  * restriction. Specifically, if other files instantiate templates or use macros or
                                 ;      14  * inline functions from this file, or you compile this file and link it with  other
                                 ;      15  * files to produce an executable, this file does not by itself cause the resulting
                                 ;      16  * executable to be covered by the GNU General Public License. This exception does not
                                 ;      17  * however invalidate any other reasons why the executable file might be covered by the
                                 ;      18  * GNU General Public License.
                                 ;      19  *
                                 ;      20  * THE SOFTWARE IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY
                                 ;      21  * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
                                 ;      22  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
                                 ;      23  * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                 ;      24  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
                                 ;      25  * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                                 ;      26  */
                                 ;      27 
                                 ;      28 #include "tinyg.h"		// #1
                                 ;      29 #include "config.h"		// #2
                                 ;      30 #include "hardware.h"
                                 ;      31 #include "text_parser.h"
                                 ;      32 #include "gpio.h"
                                 ;      33 #include "pwm.h"
                                 ;      34 
                                 ;      35 #ifdef __AVR
                                 ;      36 #include <avr/interrupt.h>
                                 ;      37 #endif
                                 ;      38 
                                 ;      39 #ifdef __cplusplus
                                 ;      40 extern "C"{
                                 ;      41 #endif
                                 ;      42 
                                 ;      43 /***** PWM defines, structures and memory allocation *****/
                                 ;      44 
                                 ;      45 pwmSingleton_t pwm;
                                 ;      46 
                                 ;      47 // defines common to all PWM channels
                                 ;      48 //#define PWM_TIMER_TYPE	TC1_struct	// PWM uses TC1's
                                 ;      49 #define PWM_TIMER_t	TC1_t				// PWM uses TC1's
                                 ;      50 #define PWM_TIMER_DISABLE 0				// turn timer off (clock = 0 Hz)
                                 ;      51 #define PWM_MAX_FREQ (F_CPU/256)		// max frequency with 8-bits duty cycle precision
                                 ;      52 #define PWM_MIN_FREQ (F_CPU/64/65536)	// min frequency with supported prescaling
                                 ;      53 
                                 ;      54 // channel specific defines
                                 ;      55 /* CLKSEL is used to configure default PWM clock operating ranges
                                 ;      56  * These can be changed by pwm_freq() depending on the PWM frequency selected
                                 ;      57  *
                                 ;      58  * The useful ranges (assuming a 32 Mhz system clock) are:
                                 ;      59  *	 TC_CLKSEL_DIV1_gc  - good for about 500 Hz to 125 Khz practical upper limit
                                 ;      60  *   TC_CLKSEL_DIV2_gc  - good for about 250 Hz to  62 KHz
                                 ;      61  *	 TC_CLKSEL_DIV4_gc  - good for about 125 Hz to  31 KHz
                                 ;      62  *	 TC_CLKSEL_DIV8_gc  - good for about  62 Hz to  16 KHz
                                 ;      63  *	 TC_CLKSEL_DIV64_gc - good for about   8 Hz to   2 Khz
                                 ;      64  */
                                 ;      65 #define PWM1_CTRLA_CLKSEL	TC_CLKSEL_DIV1_gc	// starting clock select value
                                 ;      66 #define PWM1_CTRLB 			(3 | TC0_CCBEN_bm)	// single slope PWM enabled on channel B
                                 ;      67 #define PWM1_ISR_vect 		TCD1_CCB_vect		// must match timer assignments in system.h
                                 ;      68 #define PWM1_INTCTRLB		0					// timer interrupt level (0=off, 1=lo, 2=med, 3=hi)
                                 ;      69 
                                 ;      70 #define PWM2_CTRLA_CLKSEL 	TC_CLKSEL_DIV1_gc
                                 ;      71 #define PWM2_CTRLB 			3					// single slope PWM enabled, no output channel
                                 ;      72 //#define PWM2_CTRLB 		(3 | TC0_CCBEN_bm)	// single slope PWM enabled on channel B
                                 ;      73 #define PWM2_ISR_vect		TCE1_CCB_vect		// must match timer assignments in system.h
                                 ;      74 #define PWM2_INTCTRLB		0					// timer interrupt level (0=off, 1=lo, 2=med, 3=hi)
                                 ;      75 
                                 ;      76 /***** PWM code *****/
                                 ;      77 /*
                                 ;      78  * pwm_init() - initialize pwm channels
                                 ;      79  *
                                 ;      80  *	Notes:
                                 ;      81  *	  - Whatever level interrupts you use must be enabled in main()
                                 ;      82  *	  - init assumes PWM1 output bit (D5) has been set to output previously (stepper.c)
                                 ;      83  *	  - See system.h for timer and port assignments
                                 ;      84  *    - Don't do this: memset(&TIMER_PWM1, 0, sizeof(PWM_TIMER_t)); // zero out the timer registers
                                 ;      85  */
                                 ;      86 void pwm_init()
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",86
00000000 02                      		RTS
00000001                         _pwm_set_freq:
                                 		.STACK	_pwm_set_freq=16
                                 ;      87 {
                                 ;      88 #ifdef __AVR
                                 ;      89 	gpio_set_bit_off(SPINDLE_PWM);
                                 ;      90 
                                 ;      91 	// setup PWM channel 1
                                 ;      92 	memset(&pwm.p[PWM_1], 0, sizeof(pwmChannel_t));		// clear parent structure
                                 ;      93 	pwm.p[PWM_1].timer = &TIMER_PWM1;					// bind timer struct to PWM struct array
                                 ;      94 	pwm.p[PWM_1].ctrla = PWM1_CTRLA_CLKSEL;				// initialize starting clock operating range
                                 ;      95 	pwm.p[PWM_1].timer->CTRLB = PWM1_CTRLB;
                                 ;      96 	pwm.p[PWM_1].timer->INTCTRLB = PWM1_INTCTRLB;		// set interrupt level
                                 ;      97 
                                 ;      98 	// setup PWM channel 2
                                 ;      99 	memset(&pwm.p[PWM_2], 0, sizeof(pwmChannel_t));		// clear all values, pointers and status
                                 ;     100 	pwm.p[PWM_2].timer = &TIMER_PWM2;
                                 ;     101 	pwm.p[PWM_2].ctrla = PWM2_CTRLA_CLKSEL;
                                 ;     102 	pwm.p[PWM_2].timer->CTRLB = PWM2_CTRLB;
                                 ;     103 	pwm.p[PWM_2].timer->INTCTRLB = PWM2_INTCTRLB;
                                 ;     104 #endif // __AVR
                                 ;     105 }
                                 ;     106 
                                 ;     107 /*
                                 ;     108  * ISRs for PWM timers
                                 ;     109  */
                                 ;     110 #ifdef __AVR
                                 ;     111 ISR(PWM1_ISR_vect)
                                 ;     112 {
                                 ;     113 	return;
                                 ;     114 }
                                 ;     115 
                                 ;     116 ISR(PWM2_ISR_vect)
                                 ;     117 {
                                 ;     118 	return;
                                 ;     119 }
                                 ;     120 #endif // __AVR
                                 ;     121 /*
                                 ;     122 #ifdef __ARM
                                 ;     123 MOTATE_TIMER_INTERRUPT
                                 ;     124 ISR(PWM1_ISR_vect)
                                 ;     125 {
                                 ;     126 	return;
                                 ;     127 }
                                 ;     128 
                                 ;     129 ISR(PWM2_ISR_vect)
                                 ;     130 {
                                 ;     131 	return;
                                 ;     132 }
                                 ;     133 #endif // __ARM
                                 ;     134 */
                                 ;     135 /*
                                 ;     136  * pwm_set_freq() - set PWM channel frequency
                                 ;     137  *
                                 ;     138  *	channel	- PWM channel
                                 ;     139  *	freq	- PWM frequency in Khz as a float
                                 ;     140  *
                                 ;     141  *	Assumes 32MHz clock.
                                 ;     142  *	Doesn't turn time on until duty cycle is set
                                 ;     143  */
                                 ;     144 
                                 ;     145 stat_t pwm_set_freq(uint8_t chan, float freq)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",145
00000001 60C0                    		SUB #0CH, R0
00000003 8289                    		MOV.B R1, 0BH[R0]
00000005 A00A                    		MOV.L R2, 04H[R0]
                                 ;     146 {
                                 ;     147 	if (chan > PWMS) { return (STAT_NO_SUCH_DEVICE);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",147
00000007 B289                    		MOVU.B 0BH[R0], R1
00000009 6131                    		CMP #03H, R1
0000000B 29rr                    		BLT L13
0000000D                         L12:	; bb3
0000000D 3C020B                  		MOV.B #0BH, 02H[R0]
00000010 2Err                 B  		BRA L18
00000012                         L13:	; bb10
00000012 FBE2001BB748            		MOV.L #48B71B00H, R14
                                 ;     148 	if (freq > PWM_MAX_FREQ) { return (STAT_INPUT_EXCEEDS_MAX_VALUE);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",148
00000018 FC850E01                		FCMP 04H[R0].L, R14
0000001C 26rr                    		BPZ L15
0000001E                         L14:	; bb11
0000001E 3C026D                  		MOV.B #6DH, 02H[R0]
00000021 2Err                 B  		BRA L18
00000023                         L15:	; bb18
                                 ;     149 	if (freq < PWM_MIN_FREQ) { return (STAT_INPUT_LESS_THAN_MIN_VALUE);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",149
00000023 A809                    		MOV.L 04H[R0], R1
00000025 FD72110000B041          		FCMP #41B00000H, R1
0000002C 26rr                    		BPZ L17
0000002E                         L16:	; bb19
0000002E 3C026C                  		MOV.B #6CH, 02H[R0]
00000031 08                   S  		BRA L18
00000032                         L17:	; bb25
                                 ;     150 
                                 ;     151 #ifdef __AVR
                                 ;     152 	// set the period and the prescaler
                                 ;     153 	float prescale = F_CPU/65536/freq;	// optimal non-integer prescaler value
                                 ;     154 	if (prescale <= 1) {
                                 ;     155 		pwm.p[chan].timer->PER = F_CPU/freq;
                                 ;     156 		pwm.p[chan].timer->CTRLA = TC_CLKSEL_DIV1_gc;
                                 ;     157 	} else if (prescale <= 2) {
                                 ;     158 		pwm.p[chan].timer->PER = F_CPU/2/freq;
                                 ;     159 		pwm.p[chan].timer->CTRLA = TC_CLKSEL_DIV2_gc;
                                 ;     160 	} else if (prescale <= 4) {
                                 ;     161 		pwm.p[chan].timer->PER = F_CPU/4/freq;
                                 ;     162 		pwm.p[chan].timer->CTRLA = TC_CLKSEL_DIV4_gc;
                                 ;     163 	} else if (prescale <= 8) {
                                 ;     164 		pwm.p[chan].timer->PER = F_CPU/8/freq;
                                 ;     165 		pwm.p[chan].timer->CTRLA = TC_CLKSEL_DIV8_gc;
                                 ;     166 	} else {
                                 ;     167 		pwm.p[chan].timer->PER = F_CPU/64/freq;
                                 ;     168 		pwm.p[chan].timer->CTRLA = TC_CLKSEL_DIV64_gc;
                                 ;     169 	}
                                 ;     170 #endif // __AVR
                                 ;     171 
                                 ;     172 #ifdef __ARM
                                 ;     173 	if (chan == PWM_1) {
                                 ;     174 		spindle_pwm_pin.setFrequency(freq);
                                 ;     175 	} else if (chan == PWM_2) {
                                 ;     176 		secondary_pwm_pin.setFrequency(freq);
                                 ;     177 	}
                                 ;     178 #endif // __ARM
                                 ;     179 
                                 ;     180 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",180
00000032 3C0200                  		MOV.B #00H, 02H[R0]
00000035                         L18:	; bb27
00000035 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     181 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",181
00000039 B089                    		MOVU.B 03H[R0], R1
0000003B 6703                    		RTSD #0CH
0000003D                         _pwm_set_duty:
                                 		.STACK	_pwm_set_duty=16
                                 ;     182 
                                 ;     183 /*
                                 ;     184  * pwm_set_duty() - set PWM channel duty cycle
                                 ;     185  *
                                 ;     186  *	channel	- PWM channel
                                 ;     187  *	duty	- PWM duty cycle from 0% to 100%
                                 ;     188  *
                                 ;     189  *	Setting duty cycle to 0 disables the PWM channel with output low
                                 ;     190  *	Setting duty cycle to 100 disables the PWM channel with output high
                                 ;     191  *	Setting duty cycle between 0 and 100 enables PWM channel
                                 ;     192  *
                                 ;     193  *	The frequency must have been set previously
                                 ;     194  */
                                 ;     195 
                                 ;     196 stat_t pwm_set_duty(uint8_t chan, float duty)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",196
0000003D 60C0                    		SUB #0CH, R0
0000003F 8289                    		MOV.B R1, 0BH[R0]
00000041 A00A                    		MOV.L R2, 04H[R0]
                                 ;     197 {
                                 ;     198 	if (duty < 0.0) { return (STAT_INPUT_LESS_THAN_MIN_VALUE);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",198
00000043 FD721200000000          		FCMP #00000000H, R2
0000004A 26rr                    		BPZ L21
0000004C                         L20:	; bb3
0000004C 3C026C                  		MOV.B #6CH, 02H[R0]
0000004F 2Err                 B  		BRA L24
00000051                         L21:	; bb9
00000051 FBE20000803F            		MOV.L #3F800000H, R14
                                 ;     199 	if (duty > 1.0) { return (STAT_INPUT_EXCEEDS_MAX_VALUE);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",199
00000057 FC850E01                		FCMP 04H[R0].L, R14
0000005B 26rr                    		BPZ L23
0000005D                         L22:	; bb10
0000005D 3C026D                  		MOV.B #6DH, 02H[R0]
00000060 08                   S  		BRA L24
00000061                         L23:	; bb16
                                 ;     200 
                                 ;     201 	#ifdef __AVR
                                 ;     202 //  Ffrq = Fper/(2N(CCA+1))
                                 ;     203 //  Fpwm = Fper/((N(PER+1))
                                 ;     204 	float period_scalar = pwm.p[chan].timer->PER;
                                 ;     205 	pwm.p[chan].timer->CCB = (uint16_t)(period_scalar * duty) + 1;
                                 ;     206 	#endif // __AVR
                                 ;     207 
                                 ;     208 	#ifdef __ARM
                                 ;     209 	if (chan == PWM_1) {
                                 ;     210 		spindle_pwm_pin = duty;
                                 ;     211 	} else if (chan == PWM_2) {
                                 ;     212 		secondary_pwm_pin = duty;
                                 ;     213 	}
                                 ;     214 	#endif // __ARM
                                 ;     215 
                                 ;     216 	return (STAT_OK);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",216
00000061 3C0200                  		MOV.B #00H, 02H[R0]
00000064                         L24:	; bb18
00000064 C5000203                		MOV.B 02H[R0], 03H[R0]
                                 ;     217 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",217
00000068 B089                    		MOVU.B 03H[R0], R1
0000006A 6703                    		RTSD #0CH
0000006C                         _pwm_print_p1frq:
                                 		.STACK	_pwm_print_p1frq=8
                                 ;     218 
                                 ;     219 
                                 ;     220 /***********************************************************************************
                                 ;     221  * CONFIGURATION AND INTERFACE FUNCTIONS
                                 ;     222  * Functions to get and set variables from the cfgArray table
                                 ;     223  ***********************************************************************************/
                                 ;     224 
                                 ;     225 // none
                                 ;     226 
                                 ;     227 
                                 ;     228 /***********************************************************************************
                                 ;     229  * TEXT MODE SUPPORT
                                 ;     230  * Functions to print variables from the cfgArray table
                                 ;     231  ***********************************************************************************/
                                 ;     232 
                                 ;     233 #ifdef __TEXT_MODE
                                 ;     234 
                                 ;     235 static const char fmt_p1frq[] PROGMEM = "[p1frq] pwm frequency   %15.0f Hz\n";
                                 ;     236 static const char fmt_p1csl[] PROGMEM = "[p1csl] pwm cw speed lo %15.0f RPM\n";
                                 ;     237 static const char fmt_p1csh[] PROGMEM = "[p1csh] pwm cw speed hi %15.0f RPM\n";
                                 ;     238 static const char fmt_p1cpl[] PROGMEM = "[p1cpl] pwm cw phase lo %15.3f [0..1]\n";
                                 ;     239 static const char fmt_p1cph[] PROGMEM = "[p1cph] pwm cw phase hi %15.3f [0..1]\n";
                                 ;     240 static const char fmt_p1wsl[] PROGMEM = "[p1wsl] pwm ccw speed lo%15.0f RPM\n";
                                 ;     241 static const char fmt_p1wsh[] PROGMEM = "[p1wsh] pwm ccw speed hi%15.0f RPM\n";
                                 ;     242 static const char fmt_p1wpl[] PROGMEM = "[p1wpl] pwm ccw phase lo%15.3f [0..1]\n";
                                 ;     243 static const char fmt_p1wph[] PROGMEM = "[p1wph] pwm ccw phase hi%15.3f [0..1]\n";
                                 ;     244 static const char fmt_p1pof[] PROGMEM = "[p1pof] pwm phase off   %15.3f [0..1]\n";
                                 ;     245 
                                 ;     246 void pwm_print_p1frq(nvObj_t *nv) { text_print_flt(nv, fmt_p1frq);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",246
0000006C 6040                    		SUB #04H, R0
0000006E E301                    		MOV.L R1, [R0]
00000070 FB22rrrrrrrr            		MOV.L #__$fmt_p1frq, R2
00000076 05rrrrrr             A  		BSR _text_print_flt
0000007A 6701                    		RTSD #04H
0000007C                         _pwm_print_p1csl:
                                 		.STACK	_pwm_print_p1csl=8
                                 ;     247 void pwm_print_p1csl(nvObj_t *nv) { text_print_flt(nv, fmt_p1csl);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",247
0000007C 6040                    		SUB #04H, R0
0000007E E301                    		MOV.L R1, [R0]
00000080 FB22rrrrrrrr            		MOV.L #__$fmt_p1csl, R2
00000086 05rrrrrr             A  		BSR _text_print_flt
0000008A 6701                    		RTSD #04H
0000008C                         _pwm_print_p1csh:
                                 		.STACK	_pwm_print_p1csh=8
                                 ;     248 void pwm_print_p1csh(nvObj_t *nv) { text_print_flt(nv, fmt_p1csh);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",248
0000008C 6040                    		SUB #04H, R0
0000008E E301                    		MOV.L R1, [R0]
00000090 FB22rrrrrrrr            		MOV.L #__$fmt_p1csh, R2
00000096 05rrrrrr             A  		BSR _text_print_flt
0000009A 6701                    		RTSD #04H
0000009C                         _pwm_print_p1cpl:
                                 		.STACK	_pwm_print_p1cpl=8
                                 ;     249 void pwm_print_p1cpl(nvObj_t *nv) { text_print_flt(nv, fmt_p1cpl);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",249
0000009C 6040                    		SUB #04H, R0
0000009E E301                    		MOV.L R1, [R0]
000000A0 FB22rrrrrrrr            		MOV.L #__$fmt_p1cpl, R2
000000A6 05rrrrrr             A  		BSR _text_print_flt
000000AA 6701                    		RTSD #04H
000000AC                         _pwm_print_p1cph:
                                 		.STACK	_pwm_print_p1cph=8
                                 ;     250 void pwm_print_p1cph(nvObj_t *nv) { text_print_flt(nv, fmt_p1cph);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",250
000000AC 6040                    		SUB #04H, R0
000000AE E301                    		MOV.L R1, [R0]
000000B0 FB22rrrrrrrr            		MOV.L #__$fmt_p1cph, R2
000000B6 05rrrrrr             A  		BSR _text_print_flt
000000BA 6701                    		RTSD #04H
000000BC                         _pwm_print_p1wsl:
                                 		.STACK	_pwm_print_p1wsl=8
                                 ;     251 void pwm_print_p1wsl(nvObj_t *nv) { text_print_flt(nv, fmt_p1wsl);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",251
000000BC 6040                    		SUB #04H, R0
000000BE E301                    		MOV.L R1, [R0]
000000C0 FB22rrrrrrrr            		MOV.L #__$fmt_p1wsl, R2
000000C6 05rrrrrr             A  		BSR _text_print_flt
000000CA 6701                    		RTSD #04H
000000CC                         _pwm_print_p1wsh:
                                 		.STACK	_pwm_print_p1wsh=8
                                 ;     252 void pwm_print_p1wsh(nvObj_t *nv) { text_print_flt(nv, fmt_p1wsh);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",252
000000CC 6040                    		SUB #04H, R0
000000CE E301                    		MOV.L R1, [R0]
000000D0 FB22rrrrrrrr            		MOV.L #__$fmt_p1wsh, R2
000000D6 05rrrrrr             A  		BSR _text_print_flt
000000DA 6701                    		RTSD #04H
000000DC                         _pwm_print_p1wpl:
                                 		.STACK	_pwm_print_p1wpl=8
                                 ;     253 void pwm_print_p1wpl(nvObj_t *nv) { text_print_flt(nv, fmt_p1wpl);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",253
000000DC 6040                    		SUB #04H, R0
000000DE E301                    		MOV.L R1, [R0]
000000E0 FB22rrrrrrrr            		MOV.L #__$fmt_p1wpl, R2
000000E6 05rrrrrr             A  		BSR _text_print_flt
000000EA 6701                    		RTSD #04H
000000EC                         _pwm_print_p1wph:
                                 		.STACK	_pwm_print_p1wph=8
                                 ;     254 void pwm_print_p1wph(nvObj_t *nv) { text_print_flt(nv, fmt_p1wph);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",254
000000EC 6040                    		SUB #04H, R0
000000EE E301                    		MOV.L R1, [R0]
000000F0 FB22rrrrrrrr            		MOV.L #__$fmt_p1wph, R2
000000F6 05rrrrrr             A  		BSR _text_print_flt
000000FA 6701                    		RTSD #04H
000000FC                         _pwm_print_p1pof:
                                 		.STACK	_pwm_print_p1pof=8
                                 ;     255 void pwm_print_p1pof(nvObj_t *nv) { text_print_flt(nv, fmt_p1pof);}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\src\cnc\pwm.c",255
000000FC 6040                    		SUB #04H, R0
000000FE E301                    		MOV.L R1, [R0]
00000100 FB22rrrrrrrr            		MOV.L #__$fmt_p1pof, R2
00000106 05rrrrrr             A  		BSR _text_print_flt
0000010A 6701                    		RTSD #04H
                                 ;     256 
                                 ;     257 #endif //__TEXT_MODE
                                 ;     258 
                                 ;     259 #ifdef __cplusplus
                                 ;     260 }
                                 ;     261 #endif
                                 		.SECTION	C_1,ROMDATA
00000000                         __$fmt_p1frq:
00000000 5B703166                		.byte	"[p1frq] pwm frequency   %15.0f Hz"
         72715D20                
         70776D20                
         66726571                
         75656E63                
         79202020                
         2531352E                
         30662048                
         7A                      
00000021 0A00                    		.byte	0AH,00H
00000023                         __$fmt_p1csl:
00000023 5B703163                		.byte	"[p1csl] pwm cw speed lo %15.0f RPM"
         736C5D20                
         70776D20                
         63772073                
         70656564                
         206C6F20                
         2531352E                
         30662052                
         504D                    
00000045 0A00                    		.byte	0AH,00H
00000047                         __$fmt_p1csh:
00000047 5B703163                		.byte	"[p1csh] pwm cw speed hi %15.0f RPM"
         73685D20                
         70776D20                
         63772073                
         70656564                
         20686920                
         2531352E                
         30662052                
         504D                    
00000069 0A00                    		.byte	0AH,00H
0000006B                         __$fmt_p1cpl:
0000006B 5B703163                		.byte	"[p1cpl] pwm cw phase lo %15.3f [0..1]"
         706C5D20                
         70776D20                
         63772070                
         68617365                
         206C6F20                
         2531352E                
         3366205B                
         302E2E31                
         5D                      
00000090 0A00                    		.byte	0AH,00H
00000092                         __$fmt_p1cph:
00000092 5B703163                		.byte	"[p1cph] pwm cw phase hi %15.3f [0..1]"
         70685D20                
         70776D20                
         63772070                
         68617365                
         20686920                
         2531352E                
         3366205B                
         302E2E31                
         5D                      
000000B7 0A00                    		.byte	0AH,00H
000000B9                         __$fmt_p1wsl:
000000B9 5B703177                		.byte	"[p1wsl] pwm ccw speed lo%15.0f RPM"
         736C5D20                
         70776D20                
         63637720                
         73706565                
         64206C6F                
         2531352E                
         30662052                
         504D                    
000000DB 0A00                    		.byte	0AH,00H
000000DD                         __$fmt_p1wsh:
000000DD 5B703177                		.byte	"[p1wsh] pwm ccw speed hi%15.0f RPM"
         73685D20                
         70776D20                
         63637720                
         73706565                
         64206869                
         2531352E                
         30662052                
         504D                    
000000FF 0A00                    		.byte	0AH,00H
00000101                         __$fmt_p1wpl:
00000101 5B703177                		.byte	"[p1wpl] pwm ccw phase lo%15.3f [0..1]"
         706C5D20                
         70776D20                
         63637720                
         70686173                
         65206C6F                
         2531352E                
         3366205B                
         302E2E31                
         5D                      
00000126 0A00                    		.byte	0AH,00H
00000128                         __$fmt_p1wph:
00000128 5B703177                		.byte	"[p1wph] pwm ccw phase hi%15.3f [0..1]"
         70685D20                
         70776D20                
         63637720                
         70686173                
         65206869                
         2531352E                
         3366205B                
         302E2E31                
         5D                      
0000014D 0A00                    		.byte	0AH,00H
0000014F                         __$fmt_p1pof:
0000014F 5B703170                		.byte	"[p1pof] pwm phase off   %15.3f [0..1]"
         6F665D20                
         70776D20                
         70686173                
         65206F66                
         66202020                
         2531352E                
         3366205B                
         302E2E31                
         5D                      
00000174 0A00                    		.byte	0AH,00H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         _pwm:
00000000(00000054H)              		.blkl	21
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00486   LINES

Section List

Attr         Size               Name
CODE     0000000268(0000010CH)  P
ROMDATA  0000000374(00000176H)  C_1
DATA     0000000084(00000054H)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx7E87\$ccrx\pwm.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\EasyMak_build\pwm.lst
-output=C:\Workspace\e2studio\git\MT01\EasyMak_build\src\cnc\pwm.obj
