* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Sun Feb 19 10:49:23 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  19-Feb-2017 10:49:23
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=resetprg.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=resetprg.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;resetprg.c
                                 
                                 		.glb	_PowerON_Reset_PC
                                 		.glb	__INITSCT
                                 		.glb	__INIT_IOLIB
                                 		.glb	_bsp_interrupt_open
                                 		.glb	_bsp_register_protect_open
                                 		.glb	_hardware_setup
                                 		.glb	_R_BSP_InterruptControl
                                 		.glb	_main
                                 		.glb	__CLOSEALL
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _PowerON_Reset_PC:
                                 		.STACK	_PowerON_Reset_PC=4
                                 ;       1 /***********************************************************************************************************************
                                 ;       2 * DISCLAIMER
                                 ;       3 * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No 
                                 ;       4 * other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all 
                                 ;       5 * applicable laws, including copyright laws. 
                                 ;       6 * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
                                 ;       7 * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, 
                                 ;       8 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM 
                                 ;       9 * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES 
                                 ;      10 * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS 
                                 ;      11 * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
                                 ;      12 * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of 
                                 ;      13 * this software. By using this software, you agree to the additional terms and conditions found by accessing the 
                                 ;      14 * following link:
                                 ;      15 * http://www.renesas.com/disclaimer 
                                 ;      16 *
                                 ;      17 * Copyright (C) 2014 Renesas Electronics Corporation. All rights reserved.
                                 ;      18 ***********************************************************************************************************************/
                                 ;      19 /***********************************************************************************************************************
                                 ;      20 * File Name    : resetprg.c
                                 ;      21 * Device(s)    : RX631/N
                                 ;      22 * Description  : Defines post-reset routines that are used to configure the MCU prior to the main program starting. 
                                 ;      23 *                This is were the program counter starts on power-up or reset.
                                 ;      24 ***********************************************************************************************************************/
                                 ;      25 /***********************************************************************************************************************
                                 ;      26 * History : DD.MM.YYYY Version  Description
                                 ;      27 *         : 26.10.2011 1.00     First Release
                                 ;      28 *         : 13.03.2012 1.10     Stack sizes are now defined in r_bsp_config.h. Because of this the #include for 
                                 ;      29 *                               stacksct.h was removed. Settings for SCKCR are now set in r_bsp_config.h and used here
                                 ;      30 *                               to setup clocks based on user settings.
                                 ;      31 *         : 16.07.2012 1.20     Added ability to enable FPU Exceptions based on the BSP_CFG_EXCEP_FPU_ISR_CALLBACK macro
                                 ;      32 *                               and the ability to enable NMI interrupts based on the BSP_CFG_NMI_ISR_CALLBACK. Also 
                                 ;      33 *                               added code to enable BCLK and SDCLK output based on settings in r_bsp_config.h.
                                 ;      34 *         : 09.08.2012 1.30     Added checking of BSP_CFG_IO_LIB_ENABLE macro for calling I/O Lib functions.
                                 ;      35 *         : 09.10.2012 1.40     Added support for all clock options specified by BSP_CFG_CLOCK_SOURCE in r_bsp_config.h.
                                 ;      36 *                               The code now handles starting the clocks and the required software delays for the clocks
                                 ;      37 *                               to stabilize. Created clock_source_select() function.
                                 ;      38 *         : 19.11.2012 1.50     Updated code to use 'BSP_' and 'BSP_CFG_' prefix for macros.
                                 ;      39 *         : 26.06.2013 1.60     Removed auto-enabling of NMI pin interrupt handling. Fixed a couple of typos. Fixed
                                 ;      40 *                               a warning that was being produced by '#pragma inline_asm' directive. Added a call
                                 ;      41 *                               to bsp_interrupt_open() to init callbacks. Added ability to use 1 or both stacks.
                                 ;      42 *         : 25.11.2013 1.61     LOCO is now turned off when it is not chosen as system clock.
                                 ;      43 *         : 31.03.2014 1.70     Added the ability for user defined 'warm start' callback functions to be made from
                                 ;      44 *                               PowerON_Reset_PC() when defined in r_bsp_config.h.
                                 ;      45 *         : 15.12.2014 1.80     Replaced R_BSP_SoftwareDelay() calls with loops because clock not set yet.
                                 ;      46 ***********************************************************************************************************************/
                                 ;      47 
                                 ;      48 
                                 ;      49 /***********************************************************************************************************************
                                 ;      50 Includes   <System Includes> , "Project Includes"
                                 ;      51 ***********************************************************************************************************************/
                                 ;      52 /* Defines MCU configuration functions used in this file */
                                 ;      53 #include    <_h_c_lib.h>
                                 ;      54 /* This macro is here so that the stack will be declared here. This is used to prevent multiplication of stack size. */
                                 ;      55 #define     BSP_DECLARE_STACK
                                 ;      56 /* Define the target platform */
                                 ;      57 #include    "platform.h"
                                 ;      58 
                                 ;      59 /* BCH - 01/16/2013 */
                                 ;      60 /* 0602: Defect for macro names with '_[A-Z]' is also being suppressed since these are defaut names from toolchain.  
                                 ;      61    3447: External linkage is not needed for these toolchain supplied library functions. */
                                 ;      62 /* PRQA S 0602, 3447 ++ */
                                 ;      63 
                                 ;      64 /***********************************************************************************************************************
                                 ;      65 Macro definitions
                                 ;      66 ***********************************************************************************************************************/
                                 ;      67 /* If the user chooses only 1 stack then the 'U' bit will not be set and the CPU will always use the interrupt stack. */
                                 ;      68 #if (BSP_CFG_USER_STACK_ENABLE == 1)
                                 ;      69     #define PSW_init  (0x00030000)
                                 ;      70 #else
                                 ;      71     #define PSW_init  (0x00010000)
                                 ;      72 #endif
                                 ;      73 #define FPSW_init (0x00000000)  /* Currently nothing set by default. */
                                 ;      74 
                                 ;      75 /***********************************************************************************************************************
                                 ;      76 Pre-processor Directives
                                 ;      77 ***********************************************************************************************************************/
                                 ;      78 /* Set this as the entry point from a power-on reset */
                                 ;      79 #pragma entry PowerON_Reset_PC
                                 ;      80 
                                 ;      81 /***********************************************************************************************************************
                                 ;      82 External function Prototypes
                                 ;      83 ***********************************************************************************************************************/
                                 ;      84 /* Functions to setup I/O library */
                                 ;      85 extern void _INIT_IOLIB(void);
                                 ;      86 extern void _CLOSEALL(void);
                                 ;      87 
                                 ;      88 #if BSP_CFG_USER_WARM_START_CALLBACK_PRE_INITC_ENABLED != 0
                                 ;      89 /* If user is requesting warm start callback functions then these are the prototypes. */
                                 ;      90 void BSP_CFG_USER_WARM_START_PRE_C_FUNCTION(void);
                                 ;      91 #endif
                                 ;      92 
                                 ;      93 #if BSP_CFG_USER_WARM_START_CALLBACK_POST_INITC_ENABLED != 0
                                 ;      94 /* If user is requesting warm start callback functions then these are the prototypes. */
                                 ;      95 void BSP_CFG_USER_WARM_START_POST_C_FUNCTION(void);
                                 ;      96 #endif
                                 ;      97 /***********************************************************************************************************************
                                 ;      98 Private global variables and functions
                                 ;      99 ***********************************************************************************************************************/
                                 ;     100 /* Power-on reset function declaration */
                                 ;     101 void PowerON_Reset_PC(void);
                                 ;     102 
                                 ;     103 #if BSP_CFG_RUN_IN_USER_MODE==1
                                 ;     104     #if __RENESAS_VERSION__ < 0x01010000
                                 ;     105     /* Declare the contents of the function 'Change_PSW_PM_to_UserMode' as assembler to the compiler */
                                 ;     106     #pragma inline_asm Change_PSW_PM_to_UserMode
                                 ;     107 
                                 ;     108     /* MCU user mode switcher function declaration */
                                 ;     109     static void Change_PSW_PM_to_UserMode(void);
                                 ;     110     #endif
                                 ;     111 #endif
                                 ;     112 
                                 ;     113 /* Main program function declaration */
                                 ;     114 void main(void);
                                 ;     115 static void operating_frequency_set(void);
                                 ;     116 static void clock_source_select(void);
                                 ;     117 
                                 ;     118 
                                 ;     119 
                                 ;     120 /***********************************************************************************************************************
                                 ;     121 * Function name: PowerON_Reset_PC
                                 ;     122 * Description  : This function is the MCU's entry point from a power-on reset.
                                 ;     123 *                The following steps are taken in the startup code:
                                 ;     124 *                1. The User Stack Pointer (USP) and Interrupt Stack Pointer (ISP) are both set immediately after entry 
                                 ;     125 *                   to this function. The USP and ISP stack sizes are set in the file bsp_config.h.
                                 ;     126 *                   Default sizes are USP=4K and ISP=1K.
                                 ;     127 *                2. The interrupt vector base register is set to point to the beginning of the relocatable interrupt 
                                 ;     128 *                   vector table.
                                 ;     129 *                3. The MCU is setup for floating point operations by setting the initial value of the Floating Point 
                                 ;     130 *                   Status Word (FPSW).
                                 ;     131 *                4. The MCU operating frequency is set by configuring the Clock Generation Circuit (CGC) in
                                 ;     132 *                   operating_frequency_set.
                                 ;     133 *                5. Calls are made to functions to setup the C runtime environment which involves initializing all 
                                 ;     134 *                   initialed data, zeroing all uninitialized variables, and configuring STDIO if used
                                 ;     135 *                   (calls to _INITSCT and _INIT_IOLIB).
                                 ;     136 *                6. Board-specific hardware setup, including configuring I/O pins on the MCU, in hardware_setup.
                                 ;     137 *                7. Global interrupts are enabled by setting the I bit in the Program Status Word (PSW), and the stack 
                                 ;     138 *                   is switched from the ISP to the USP.  The initial Interrupt Priority Level is set to zero, enabling 
                                 ;     139 *                   any interrupts with a priority greater than zero to be serviced.
                                 ;     140 *                8. The processor is optionally switched to user mode.  To run in user mode, set the macro 
                                 ;     141 *                   BSP_CFG_RUN_IN_USER_MODE above to a 1.
                                 ;     142 *                9. The bus error interrupt is enabled to catch any accesses to invalid or reserved areas of memory.
                                 ;     143 *
                                 ;     144 *                Once this initialization is complete, the user's main() function is called.  It should not return.
                                 ;     145 * Arguments    : none
                                 ;     146 * Return value : none
                                 ;     147 ***********************************************************************************************************************/
                                 ;     148 #ifndef RELEASE   //Set in to 1 to debug UserApp by itself.
                                 ;     149     #pragma entry PowerON_Reset_PC
                                 ;     150 
                                 ;     151 void PowerON_Reset_PC(void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",151
00000000 FD7302rrrrrrrr          		MVTC #(TOPOF SU + SIZEOF SU), USP
00000007 FD730Arrrrrrrr          		MVTC #(TOPOF SI + SIZEOF SI), ISP
                                 ;     152 #else
                                 ;     153     /* Reset vector is taken care of by CDC Flashloader. Just set the address for the starting point for UserApp with UserAppStartSect. */
                                 ;     154     //#pragma section P UserAppStartSect        // Output PowerON_Reset to PResetPRG section
                                 ;     155     void UserAppStart(void)
                                 ;     156 #endif
                                 ;     157 {
                                 ;     158     /* Stack pointers are setup prior to calling this function - see comments above */    
                                 ;     159 	PORT2.PODR.BYTE = 0x08 ;    /* All outputs low to start except TORCH*/
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",159
0000000E FBEE02C008              		MOV.L #0008C002H, R14
00000013 F9E42008                		MOV.B #08H, 20H[R14]
00000017                         L11:	; entry.split
                                 ;     160 	PORT2.PDR.BYTE  = 0xFE ;    /* All outputs - Emergencia (Input)  */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",160
00000017 FBEE02C008              		MOV.L #0008C002H, R14
0000001C F8E4FE                  		MOV.B #0FEH, [R14]
0000001F                         L12:	; entry.split1
                                 ;     161     /* Initialize the MCU processor word */
                                 ;     162 #if __RENESAS_VERSION__ >= 0x01010000    
                                 ;     163     set_intb((void *)__sectop("C$VECT"));
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",163
0000001F FBE2rrrrrrrr            		MOV.L #TOPOF C$VECT, R14
00000025 FD68EC                  		MVTC R14, INTB
00000028                         L13:	; entry.split2
00000028 FBEA0001                		MOV.L #00000100H, R14
                                 ;     164 #else
                                 ;     165     set_intb((unsigned long)__sectop("C$VECT"));
                                 ;     166 #endif    
                                 ;     167 
                                 ;     168     /* Initialize FPSW for floating-point operations */
                                 ;     169 #ifdef __ROZ
                                 ;     170 #define FPU_ROUND 0x00000001  /* Let FPSW RMbits=01 (round to zero) */
                                 ;     171 #else 
                                 ;     172 #define FPU_ROUND 0x00000000  /* Let FPSW RMbits=00 (round to nearest) */
                                 ;     173 #endif 
                                 ;     174 #ifdef __DOFF 
                                 ;     175 #define FPU_DENOM 0x00000100  /* Let FPSW DNbit=1 (denormal as zero) */
                                 ;     176 #else 
                                 ;     177 #define FPU_DENOM 0x00000000  /* Let FPSW DNbit=0 (denormal as is) */
                                 ;     178 #endif 
                                 ;     179 
                                 ;     180     set_fpsw(FPSW_init | FPU_ROUND | FPU_DENOM);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",180
0000002C FD68E3                  		MVTC R14, FPSW
0000002F                         L14:	; entry.split3
                                 ;     181 
                                 ;     182     /* Switch to high-speed operation */
                                 ;     183     operating_frequency_set();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",183
0000002F 39rrrr               W  		BSR __$operating_frequency_set
00000032                         L15:	; entry.split4
                                 ;     184 
                                 ;     185     /* If the warm start Pre C runtime callback is enabled, then call it. */
                                 ;     186 #if BSP_CFG_USER_WARM_START_CALLBACK_PRE_INITC_ENABLED == 1
                                 ;     187      BSP_CFG_USER_WARM_START_PRE_C_FUNCTION();
                                 ;     188 #endif
                                 ;     189 
                                 ;     190     /* Initialize C runtime environment */
                                 ;     191     _INITSCT();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",191
00000032 05rrrrrr             A  		BSR __INITSCT
00000036                         L16:	; entry.split5
                                 ;     192 
                                 ;     193     /* If the warm start Post C runtime callback is enabled, then call it. */
                                 ;     194 #if BSP_CFG_USER_WARM_START_CALLBACK_POST_INITC_ENABLED == 1
                                 ;     195      BSP_CFG_USER_WARM_START_POST_C_FUNCTION();
                                 ;     196 #endif
                                 ;     197 
                                 ;     198 #if BSP_CFG_IO_LIB_ENABLE == 1
                                 ;     199     /* Comment this out if not using I/O lib */
                                 ;     200     _INIT_IOLIB();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",200
00000036 05rrrrrr             A  		BSR __INIT_IOLIB
0000003A                         L17:	; entry.split6
                                 ;     201 #endif
                                 ;     202 
                                 ;     203     /* Initialize MCU interrupt callbacks. */
                                 ;     204     bsp_interrupt_open();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",204
0000003A 05rrrrrr             A  		BSR _bsp_interrupt_open
0000003E                         L18:	; entry.split7
                                 ;     205 
                                 ;     206     /* Initialize register protection functionality. */
                                 ;     207     bsp_register_protect_open();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",207
0000003E 05rrrrrr             A  		BSR _bsp_register_protect_open
00000042                         L19:	; entry.split8
                                 ;     208 
                                 ;     209     /* Configure the MCU and board hardware */
                                 ;     210     hardware_setup();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",210
00000042 05rrrrrr             A  		BSR _hardware_setup
00000046                         L20:	; entry.split9
                                 ;     211 
                                 ;     212     /* Change the MCU's user mode from supervisor to user */
                                 ;     213     nop();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",213
00000046 03                      		NOP
00000047                         L21:	; entry.split10
00000047 FBEE000003              		MOV.L #00030000H, R14
                                 ;     214     set_psw(PSW_init);      
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",214
0000004C FD68E0                  		MVTC R14, PSW
0000004F                         L22:	; entry.split11
0000004F FB3200000010            		MOV.L #10000000H, R3
00000055 6612                    		MOV.L #00000001H, R2
00000057 66A1                    		MOV.L #0000000AH, R1
                                 ;     215 #if BSP_CFG_RUN_IN_USER_MODE==1
                                 ;     216     /* Use chg_pmusr() intrinsic if possible. */
                                 ;     217     #if __RENESAS_VERSION__ >= 0x01010000
                                 ;     218     chg_pmusr() ;
                                 ;     219     #else
                                 ;     220     Change_PSW_PM_to_UserMode();
                                 ;     221     #endif
                                 ;     222 #endif
                                 ;     223 
                                 ;     224     /* Enable the bus error interrupt to catch accesses to illegal/reserved areas of memory */
                                 ;     225     R_BSP_InterruptControl(BSP_INT_SRC_BUS_ERROR, BSP_INT_CMD_INTERRUPT_ENABLE, FIT_NO_PTR);
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",225
00000059 05rrrrrr             A  		BSR _R_BSP_InterruptControl
0000005D                         L23:	; entry.split12
                                 ;     226 
                                 ;     227     /* Call the main program function (should not return) */
                                 ;     228     main();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",228
0000005D 05rrrrrr             A  		BSR _main
00000061                         L24:	; entry.split13
                                 ;     229     
                                 ;     230 #if BSP_CFG_IO_LIB_ENABLE == 1
                                 ;     231     /* Comment this out if not using I/O lib - cleans up open files */
                                 ;     232     _CLOSEALL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",232
00000061 05rrrrrr             A  		BSR __CLOSEALL
00000065                         L25:	; bb1
                                 ;     233 #endif
                                 ;     234 
                                 ;     235     /* BCH - 01/16/2013 */
                                 ;     236     /* Infinite loop is intended here. */    
                                 ;     237     while(1) /* PRQA S 2740 */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",237
00000065 2Err                 B  		BRA L25
00000067                         __$operating_frequency_set:
                                 		.STACK	__$operating_frequency_set=12
                                 ;     238     {
                                 ;     239         /* Infinite loop. Put a breakpoint here if you want to catch an exit of main(). */
                                 ;     240     }
                                 ;     241 }
                                 ;     242 
                                 ;     243 /***********************************************************************************************************************
                                 ;     244 * Function name: operating_frequency_set
                                 ;     245 * Description  : Configures the clock settings for each of the device clocks
                                 ;     246 * Arguments    : none
                                 ;     247 * Return value : none
                                 ;     248 ***********************************************************************************************************************/
                                 ;     249 static void operating_frequency_set (void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",249
00000067 6080                    		SUB #08H, R0
                                 ;     250 {
                                 ;     251     /* Used for constructing value to write to SCKCR register. */
                                 ;     252     uint32_t temp_clock = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",252
00000069 F80600                  		MOV.L #00000000H, [R0]
0000006C                         L27:	; entry.split
                                 ;     253     
                                 ;     254     /* 
                                 ;     255     Default settings:
                                 ;     256     Clock Description              Frequency
                                 ;     257     ----------------------------------------
                                 ;     258     Input Clock Frequency............  12 MHz
                                 ;     259     PLL frequency (x16).............. 192 MHz
                                 ;     260     Internal Clock Frequency.........  96 MHz    
                                 ;     261     Peripheral Clock Frequency.......  48 MHz
                                 ;     262     USB Clock Frequency..............  48 MHz
                                 ;     263     External Bus Clock Frequency.....  24 MHz */
                                 ;     264 
                                 ;     265     /* Protect off. */
                                 ;     266     SYSTEM.PRCR.WORD = 0xA50B;           
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",266
0000006C FBEE200008              		MOV.L #00080020H, R14
00000071 FAE9EF010BA5            		MOV.W #0A50BH, 03DEH[R14]
00000077                         L28:	; entry.split1
                                 ;     267 
                                 ;     268     /* Select the clock based upon user's choice. */
                                 ;     269     clock_source_select();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",269
00000077 39rrrr               W  		BSR __$clock_source_select
0000007A                         L29:	; entry.split2
                                 ;     270 
                                 ;     271     /* Figure out setting for FCK bits. */
                                 ;     272 #if   BSP_CFG_FCK_DIV == 1
                                 ;     273     /* Do nothing since FCK bits should be 0. */
                                 ;     274 #elif BSP_CFG_FCK_DIV == 2
                                 ;     275     temp_clock |= 0x10000000;
                                 ;     276 #elif BSP_CFG_FCK_DIV == 4
                                 ;     277     temp_clock |= 0x20000000;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",277
0000007A EC01                    		MOV.L [R0], R1
0000007C 79D1                    		BSET #1DH, R1
0000007E E301                    		MOV.L R1, [R0]
00000080                         L30:	; entry.split3
                                 ;     278 #elif BSP_CFG_FCK_DIV == 8
                                 ;     279     temp_clock |= 0x30000000;
                                 ;     280 #elif BSP_CFG_FCK_DIV == 16
                                 ;     281     temp_clock |= 0x40000000;
                                 ;     282 #elif BSP_CFG_FCK_DIV == 32
                                 ;     283     temp_clock |= 0x50000000;
                                 ;     284 #elif BSP_CFG_FCK_DIV == 64
                                 ;     285     temp_clock |= 0x60000000;
                                 ;     286 #else
                                 ;     287     #error "Error! Invalid setting for BSP_CFG_FCK_DIV in r_bsp_config.h"
                                 ;     288 #endif
                                 ;     289 
                                 ;     290     /* Figure out setting for ICK bits. */
                                 ;     291 #if   BSP_CFG_ICK_DIV == 1
                                 ;     292     /* Do nothing since ICK bits should be 0. */
                                 ;     293 #elif BSP_CFG_ICK_DIV == 2
                                 ;     294     temp_clock |= 0x01000000;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",294
00000080 EC01                    		MOV.L [R0], R1
00000082 7981                    		BSET #18H, R1
00000084 E301                    		MOV.L R1, [R0]
00000086                         L31:	; entry.split4
                                 ;     295 #elif BSP_CFG_ICK_DIV == 4
                                 ;     296     temp_clock |= 0x02000000;
                                 ;     297 #elif BSP_CFG_ICK_DIV == 8
                                 ;     298     temp_clock |= 0x03000000;
                                 ;     299 #elif BSP_CFG_ICK_DIV == 16
                                 ;     300     temp_clock |= 0x04000000;
                                 ;     301 #elif BSP_CFG_ICK_DIV == 32
                                 ;     302     temp_clock |= 0x05000000;
                                 ;     303 #elif BSP_CFG_ICK_DIV == 64
                                 ;     304     temp_clock |= 0x06000000;
                                 ;     305 #else
                                 ;     306     #error "Error! Invalid setting for BSP_CFG_ICK_DIV in r_bsp_config.h"
                                 ;     307 #endif
                                 ;     308 
                                 ;     309     /* Figure out setting for BCK bits. */
                                 ;     310 #if   BSP_CFG_BCK_DIV == 1
                                 ;     311     /* Do nothing since BCK bits should be 0. */
                                 ;     312 #elif BSP_CFG_BCK_DIV == 2
                                 ;     313     temp_clock |= 0x00010000;
                                 ;     314 #elif BSP_CFG_BCK_DIV == 4
                                 ;     315     temp_clock |= 0x00020000;
                                 ;     316 #elif BSP_CFG_BCK_DIV == 8
                                 ;     317     temp_clock |= 0x00030000;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",317
00000086 EC01                    		MOV.L [R0], R1
00000088 7731000003              		OR #00030000H, R1
0000008D E301                    		MOV.L R1, [R0]
0000008F                         L32:	; entry.split5
                                 ;     318 #elif BSP_CFG_BCK_DIV == 16
                                 ;     319     temp_clock |= 0x00040000;
                                 ;     320 #elif BSP_CFG_BCK_DIV == 32
                                 ;     321     temp_clock |= 0x00050000;
                                 ;     322 #elif BSP_CFG_BCK_DIV == 64
                                 ;     323     temp_clock |= 0x00060000;
                                 ;     324 #else
                                 ;     325     #error "Error! Invalid setting for BSP_CFG_BCK_DIV in r_bsp_config.h"
                                 ;     326 #endif
                                 ;     327 
                                 ;     328     /* Configure PSTOP1 bit for BCLK output. */
                                 ;     329 #if BSP_CFG_BCLK_OUTPUT == 0    
                                 ;     330     /* Set PSTOP1 bit */
                                 ;     331     temp_clock |= 0x00800000;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",331
0000008F EC01                    		MOV.L [R0], R1
00000091 7971                    		BSET #17H, R1
00000093 E301                    		MOV.L R1, [R0]
00000095                         L33:	; entry.split6
                                 ;     332 #elif BSP_CFG_BCLK_OUTPUT == 1
                                 ;     333     /* Clear PSTOP1 bit */
                                 ;     334     temp_clock &= ~0x00800000;
                                 ;     335 #elif BSP_CFG_BCLK_OUTPUT == 2
                                 ;     336     /* Clear PSTOP1 bit */
                                 ;     337     temp_clock &= ~0x00800000;
                                 ;     338     /* Set BCLK divider bit */
                                 ;     339     SYSTEM.BCKCR.BIT.BCLKDIV = 1;
                                 ;     340 #else
                                 ;     341     #error "Error! Invalid setting for BSP_CFG_BCLK_OUTPUT in r_bsp_config.h"
                                 ;     342 #endif
                                 ;     343 
                                 ;     344     /* Configure PSTOP0 bit for SDCLK output. */
                                 ;     345 #if BSP_CFG_SDCLK_OUTPUT == 0    
                                 ;     346     /* Set PSTOP0 bit */
                                 ;     347     temp_clock |= 0x00400000;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",347
00000095 EC01                    		MOV.L [R0], R1
00000097 7961                    		BSET #16H, R1
00000099 E301                    		MOV.L R1, [R0]
0000009B                         L34:	; entry.split7
                                 ;     348 #elif BSP_CFG_SDCLK_OUTPUT == 1
                                 ;     349     /* Clear PSTOP0 bit */
                                 ;     350     temp_clock &= ~0x00400000;
                                 ;     351 #else
                                 ;     352     #error "Error! Invalid setting for BSP_CFG_SDCLK_OUTPUT in r_bsp_config.h"
                                 ;     353 #endif
                                 ;     354 
                                 ;     355     /* Figure out setting for PCKA bits. */
                                 ;     356 #if   BSP_CFG_PCKA_DIV == 1
                                 ;     357     /* Do nothing since PCKA bits should be 0. */
                                 ;     358 #elif BSP_CFG_PCKA_DIV == 2
                                 ;     359     temp_clock |= 0x00001000;
                                 ;     360 #elif BSP_CFG_PCKA_DIV == 4
                                 ;     361     temp_clock |= 0x00002000;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",361
0000009B EC01                    		MOV.L [R0], R1
0000009D 78D1                    		BSET #0DH, R1
0000009F E301                    		MOV.L R1, [R0]
000000A1                         L35:	; entry.split8
                                 ;     362 #elif BSP_CFG_PCKA_DIV == 8
                                 ;     363     temp_clock |= 0x00003000;
                                 ;     364 #elif BSP_CFG_PCKA_DIV == 16
                                 ;     365     temp_clock |= 0x00004000;
                                 ;     366 #elif BSP_CFG_PCKA_DIV == 32
                                 ;     367     temp_clock |= 0x00005000;
                                 ;     368 #elif BSP_CFG_PCKA_DIV == 64
                                 ;     369     temp_clock |= 0x00006000;
                                 ;     370 #else
                                 ;     371     #error "Error! Invalid setting for BSP_CFG_PCKA_DIV in r_bsp_config.h"
                                 ;     372 #endif
                                 ;     373 
                                 ;     374     /* Figure out setting for PCKB bits. */
                                 ;     375 #if   BSP_CFG_PCKB_DIV == 1
                                 ;     376     /* Do nothing since PCKB bits should be 0. */
                                 ;     377 #elif BSP_CFG_PCKB_DIV == 2
                                 ;     378     temp_clock |= 0x00000100;
                                 ;     379 #elif BSP_CFG_PCKB_DIV == 4
                                 ;     380     temp_clock |= 0x00000200;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",380
000000A1 EC01                    		MOV.L [R0], R1
000000A3 7891                    		BSET #09H, R1
000000A5 E301                    		MOV.L R1, [R0]
000000A7                         L36:	; entry.split9
                                 ;     381 #elif BSP_CFG_PCKB_DIV == 8
                                 ;     382     temp_clock |= 0x00000300;
                                 ;     383 #elif BSP_CFG_PCKB_DIV == 16
                                 ;     384     temp_clock |= 0x00000400;
                                 ;     385 #elif BSP_CFG_PCKB_DIV == 32
                                 ;     386     temp_clock |= 0x00000500;
                                 ;     387 #elif BSP_CFG_PCKB_DIV == 64
                                 ;     388     temp_clock |= 0x00000600;
                                 ;     389 #else
                                 ;     390     #error "Error! Invalid setting for BSP_CFG_PCKB_DIV in r_bsp_config.h"
                                 ;     391 #endif
                                 ;     392 
                                 ;     393     /* Bottom byte of SCKCR register must be set to 0x11 */
                                 ;     394     temp_clock |= 0x00000011;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",394
000000A7 EC01                    		MOV.L [R0], R1
000000A9 753111                  		OR #11H, R1
000000AC E301                    		MOV.L R1, [R0]
000000AE                         L37:	; entry.split10
                                 ;     395 
                                 ;     396     /* Set SCKCR register. */
                                 ;     397     SYSTEM.SCKCR.LONG = temp_clock;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",397
000000AE FBEE200008              		MOV.L #00080020H, R14
000000B3 E00E                    		MOV.L [R0], [R14]
000000B5                         L38:	; entry.split11
                                 ;     398     
                                 ;     399     /* Re-init temp_clock to use to set SCKCR2. */
                                 ;     400     temp_clock = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",400
000000B5 F80600                  		MOV.L #00000000H, [R0]
000000B8                         L39:	; entry.split12
                                 ;     401 
                                 ;     402     /* Figure out setting for IEBCK bits. */
                                 ;     403 #if   BSP_CFG_IEBCK_DIV == 2
                                 ;     404     temp_clock |= 0x00000001;
                                 ;     405 #elif BSP_CFG_IEBCK_DIV == 4
                                 ;     406     temp_clock |= 0x00000002;
                                 ;     407 #elif BSP_CFG_IEBCK_DIV == 6
                                 ;     408     temp_clock |= 0x0000000C;
                                 ;     409 #elif BSP_CFG_IEBCK_DIV == 8
                                 ;     410     temp_clock |= 0x00000003;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",410
000000B8 EC01                    		MOV.L [R0], R1
000000BA 6531                    		OR #03H, R1
000000BC E301                    		MOV.L R1, [R0]
000000BE                         L40:	; entry.split13
                                 ;     411 #elif BSP_CFG_IEBCK_DIV == 16
                                 ;     412     temp_clock |= 0x00000004;
                                 ;     413 #elif BSP_CFG_IEBCK_DIV == 32
                                 ;     414     temp_clock |= 0x00000005;
                                 ;     415 #elif BSP_CFG_IEBCK_DIV == 64
                                 ;     416     temp_clock |= 0x00000006;
                                 ;     417 #else
                                 ;     418     #error "Error! Invalid setting for BSP_CFG_IEBCK_DIV in r_bsp_config.h"
                                 ;     419 #endif
                                 ;     420 
                                 ;     421     /* Figure out setting for UCK bits. */
                                 ;     422 #if   BSP_CFG_UCK_DIV == 3
                                 ;     423     temp_clock |= 0x00000020;
                                 ;     424 #elif BSP_CFG_UCK_DIV == 4
                                 ;     425     temp_clock |= 0x00000030;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",425
000000BE EC01                    		MOV.L [R0], R1
000000C0 753130                  		OR #30H, R1
000000C3 E301                    		MOV.L R1, [R0]
000000C5                         L41:	; entry.split14
                                 ;     426 #else
                                 ;     427     #error "Error! Invalid setting for BSP_CFG_UCK_DIV in r_bsp_config.h"
                                 ;     428 #endif
                                 ;     429 
                                 ;     430     /* Set SCKCR2 register. */
                                 ;     431     SYSTEM.SCKCR2.WORD = (uint16_t)temp_clock;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",431
000000C5 EC01                    		MOV.L [R0], R1
000000C7 FB2E200008              		MOV.L #00080020H, R2
000000CC 90A1                    		MOV.W R1, 04H[R2]
000000CE                         L42:	; entry.split15
                                 ;     432 
                                 ;     433     /* Choose clock source. Default for r_bsp_config.h is PLL. */
                                 ;     434     SYSTEM.SCKCR3.WORD = ((uint16_t)BSP_CFG_CLOCK_SOURCE) << 8;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",434
000000CE FBEE200008              		MOV.L #00080020H, R14
000000D3 F9E9030004              		MOV.W #0400H, 06H[R14]
000000D8                         L43:	; entry.split16
                                 ;     435 
                                 ;     436 #if (BSP_CFG_CLOCK_SOURCE != 0)
                                 ;     437     /* We can now turn LOCO off since it is not going to be used. */
                                 ;     438     SYSTEM.LOCOCR.BYTE = 0x01;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",438
000000D8 FB1E200008              		MOV.L #00080020H, R1
000000DD 3C9401                  		MOV.B #01H, 14H[R1]
000000E0                         L44:	; entry.split17
                                 ;     439 #endif
                                 ;     440 
                                 ;     441     SYSTEM.ILOCOCR.BIT.ILCSTP = 0;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",441
000000E0 FBEE200008              		MOV.L #00080020H, R14
000000E5 F1E815                  		BCLR #00H, 15H[R14].B
000000E8                         L45:	; entry.split18
                                 ;     442     for(uint16_t i = 0; i < 2000; i++)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",442
000000E8 3D0300                  		MOV.W #0000H, 06H[R0]
000000EB 08                   S  		BRA L47
000000EC                         L46:	; bb
                                 ;     443     {
                                 ;     444         /* Wait 12ms. See comment above for why. */
                                 ;     445         nop() ;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",445
000000EC 03                      		NOP
000000ED 9889                    		MOV.W 06H[R0], R1
000000EF 6211                    		ADD #01H, R1
000000F1 9089                    		MOV.W R1, 06H[R0]
000000F3                         L47:	; bb30
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",442
000000F3 B889                    		MOVU.W 06H[R0], R1
000000F5 7601D007                		CMP #07D0H, R1
000000F9 29rr                    		BLT L46
000000FB                         L48:	; bb35
                                 ;     446     }
                                 ;     447     /* Protect on. */
                                 ;     448     SYSTEM.PRCR.WORD = 0xA500;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",448
000000FB FBEE200008              		MOV.L #00080020H, R14
00000100 FAE9EF0100A5            		MOV.W #0A500H, 03DEH[R14]
00000106 6702                    		RTSD #08H
00000108                         __$clock_source_select:
                                 		.STACK	__$clock_source_select=8
                                 ;     449 
                                 ;     450 }
                                 ;     451 
                                 ;     452 /***********************************************************************************************************************
                                 ;     453 * Function name: clock_source_select
                                 ;     454 * Description  : Enables and disables clocks as chosen by the user. This function also implements the software delays
                                 ;     455 *                needed for the clocks to stabilize.
                                 ;     456 * Arguments    : none
                                 ;     457 * Return value : none
                                 ;     458 ***********************************************************************************************************************/
                                 ;     459 static void clock_source_select (void)
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",459
00000108 6040                    		SUB #04H, R0
                                 ;     460 {
                                 ;     461     /* Declared volatile for software delay purposes. */
                                 ;     462     volatile uint32_t i;
                                 ;     463 
                                 ;     464     /* The delay loops used below have been measured to take 86us per iteration. This has been verified using the 
                                 ;     465        Renesas RX Toolchain with optimizations set to 2, size priority. The same result was obtained using 2, speed 
                                 ;     466        priority. At this time the MCU is still running on the 125kHz LOCO. */
                                 ;     467 
                                 ;     468 #if (BSP_CFG_CLOCK_SOURCE == 1)
                                 ;     469     /* HOCO is chosen. Start it operating. */
                                 ;     470     SYSTEM.HOCOCR.BYTE = 0x00;          
                                 ;     471 
                                 ;     472     /* The delay period needed is to make sure that the HOCO has stabilized. According to Rev.1.00 of the RX63N's HW 
                                 ;     473        manual the delay period is tHOCOWT2 which is 2ms. A delay of 2.4ms has been used below to account for variations 
                                 ;     474        in the LOCO. 
                                 ;     475        2.4ms / 86us (per iteration) = 28 iterations */
                                 ;     476     for(i = 0; i < 28; i++)             
                                 ;     477     {
                                 ;     478         /* Wait 2.4ms. See comment above for why. */
                                 ;     479         nop() ;
                                 ;     480     }
                                 ;     481 #else
                                 ;     482     /* HOCO is not chosen. */
                                 ;     483     /* Stop the HOCO. */
                                 ;     484     SYSTEM.HOCOCR.BYTE = 0x01;          
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",484
0000010A FB1E280008              		MOV.L #00080028H, R1
0000010F 3C1E01                  		MOV.B #01H, 0EH[R1]
00000112                         L50:	; entry.split
                                 ;     485 
                                 ;     486     /* Turn off power to HOCO. */
                                 ;     487     SYSTEM.HOCOPCR.BYTE = 0x01;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",487
00000112 FBEE280008              		MOV.L #00080028H, R14
00000117 FAE46CC201              		MOV.B #01H, 0C26CH[R14]
0000011C                         L51:	; entry.split1
                                 ;     488 #endif
                                 ;     489 
                                 ;     490 #if (BSP_CFG_CLOCK_SOURCE == 2)
                                 ;     491     /* Main clock oscillator is chosen. Start it operating. */
                                 ;     492     /* Wait 65,536 cycles * 12 MHz = 5.46 ms */
                                 ;     493     SYSTEM.MOSCWTCR.BYTE = 0x0C;        
                                 ;     494 
                                 ;     495     /* Set the main clock to operating. */
                                 ;     496     SYSTEM.MOSCCR.BYTE = 0x00;          
                                 ;     497 
                                 ;     498     /* The delay period needed is to make sure that the main clock has stabilized. This delay period is tMAINOSCWT in 
                                 ;     499        the HW manual and according to the Renesas Technical Update document TN-RX*-A021A/E this is defined as:
                                 ;     500        n = Wait time selected by MOSCWTCR.MSTS[] bits
                                 ;     501        tMAINOSC = Main clock oscillator start-up time. From referring to various vendors, a start-up time of 4ms appears
                                 ;     502                   to be a common maximum. To be safe we will use 5ms.
                                 ;     503        tMAINOSCWT = tMAINOSC + ((n+16384)/fMAIN)
                                 ;     504        tMAINOSCWT = 5ms + ((65536 + 16384)/12MHz)
                                 ;     505        tMAINOSCWT = 11.82ms
                                 ;     506        A delay of 12ms has been used below to account for variations in the LOCO. 
                                 ;     507        12ms / 86us (per iteration) = 140 iterations */
                                 ;     508     for(i = 0; i < 140; i++)             
                                 ;     509     {
                                 ;     510         /* Wait 12ms. See comment above for why. */
                                 ;     511         nop() ;
                                 ;     512     }
                                 ;     513 #else
                                 ;     514     /* Set the main clock to stopped. */
                                 ;     515     SYSTEM.MOSCCR.BYTE = 0x01;          
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",515
0000011C FB1E280008              		MOV.L #00080028H, R1
00000121 3C1A01                  		MOV.B #01H, 0AH[R1]
00000124                         L52:	; entry.split2
                                 ;     516 #endif
                                 ;     517 
                                 ;     518 #if (BSP_CFG_CLOCK_SOURCE == 3)
                                 ;     519     /* Sub-clock oscillator is chosen. Start it operating. */
                                 ;     520     /* Wait 65,536 cycles * 32768Hz = 2s. This meets the timing requirement tSUBOSC which is 2 seconds. */
                                 ;     521     SYSTEM.SOSCWTCR.BYTE = 0x0C;        
                                 ;     522 
                                 ;     523     /* Set the sub-clock to operating. */
                                 ;     524     SYSTEM.SOSCCR.BYTE = 0x00;          
                                 ;     525 
                                 ;     526     /* The delay period needed is to make sure that the sub-clock has stabilized. According to Rev.1.00 of the RX63N's 
                                 ;     527        HW manual the delay period is tSUBOSCWT0 which is at minimum 1.8s and at maximum 2.6 seconds. We will use the
                                 ;     528        maximum value to be safe.       
                                 ;     529        2.6s / 86us (per iteration) = 30233 iterations */
                                 ;     530     for(i = 0; i < 30233; i++)             
                                 ;     531     {
                                 ;     532         /* Wait 2.6s. See comment above for why. */
                                 ;     533         nop() ;
                                 ;     534     }
                                 ;     535 #else
                                 ;     536     /* Set the sub-clock to stopped. */
                                 ;     537     SYSTEM.SOSCCR.BYTE = 0x01;          
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",537
00000124 FB1E280008              		MOV.L #00080028H, R1
00000129 3C1B01                  		MOV.B #01H, 0BH[R1]
0000012C                         L53:	; entry.split3
                                 ;     538 #endif
                                 ;     539 
                                 ;     540 #if (BSP_CFG_CLOCK_SOURCE == 4)
                                 ;     541     /* PLL is chosen. Start it operating. Must start main clock as well since PLL uses it. */
                                 ;     542     /* Wait 65,536 cycles * 12 MHz = 5.46 ms */
                                 ;     543     SYSTEM.MOSCWTCR.BYTE = 0x0C;        
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",543
0000012C FBEE280008              		MOV.L #00080028H, R14
00000131 F9E47A0C                		MOV.B #0CH, 7AH[R14]
00000135                         L54:	; entry.split4
                                 ;     544 
                                 ;     545     /* Set the main clock to operating. */
                                 ;     546     SYSTEM.MOSCCR.BYTE = 0x00;          
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",546
00000135 FB1E280008              		MOV.L #00080028H, R1
0000013A 3C1A00                  		MOV.B #00H, 0AH[R1]
0000013D                         L55:	; entry.split5
                                 ;     547 
                                 ;     548     /* PLL wait is 1,048,576 cycles * 192 MHz (12 MHz * 16) = 5.46 ms*/
                                 ;     549     SYSTEM.PLLWTCR.BYTE = 0x0D;         
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",549
0000013D FBEE280008              		MOV.L #00080028H, R14
00000142 F9E47E0D                		MOV.B #0DH, 7EH[R14]
00000146                         L56:	; entry.split6
                                 ;     550 
                                 ;     551     /* Set PLL Input Divisor. */
                                 ;     552     SYSTEM.PLLCR.BIT.PLIDIV = BSP_CFG_PLL_DIV >> 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",552
00000146 FBEE280008              		MOV.L #00080028H, R14
0000014B 5CEF                    		MOVU.W [R14], R15
0000014D 772FFCFF00              		AND #0FFFCH, R15
00000152 D3EF                    		MOV.W R15, [R14]
00000154                         L57:	; entry.split7
                                 ;     553 
                                 ;     554     /* Set PLL Multiplier. */
                                 ;     555     SYSTEM.PLLCR.BIT.STC = BSP_CFG_PLL_MUL - 1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",555
00000154 FBEE280008              		MOV.L #00080028H, R14
00000159 DCEF                    		MOV.W [R14], R15
0000015B 763F000F                		OR #0F00H, R15
0000015F 772FFFCF00              		AND #0CFFFH, R15
00000164 D3EF                    		MOV.W R15, [R14]
00000166                         L58:	; entry.split8
                                 ;     556 
                                 ;     557     /* Set the PLL to operating. */
                                 ;     558     SYSTEM.PLLCR2.BYTE = 0x00;          
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",558
00000166 FB1E280008              		MOV.L #00080028H, R1
0000016B 3C1200                  		MOV.B #00H, 02H[R1]
0000016E                         L59:	; entry.split9
                                 ;     559 
                                 ;     560     /* The delay period needed is to make sure that the main clock and PLL have stabilized. This delay period is 
                                 ;     561        tPLLWT2 when the main clock has not been previously stabilized. According to the Renesas Technical Update 
                                 ;     562        document TN-RX*-A021A/E this delay is defined as:
                                 ;     563        n = Wait time selected by PLLWTCR.PSTS[] bits
                                 ;     564        tMAINOSC = Main clock oscillator start-up time. From referring to various vendors, a start-up time of 4ms appears
                                 ;     565                   to be a common maximum. To be safe we will use 5ms.
                                 ;     566        tPLLWT2 = tMAINOSC + tPLL1 + ((n + 131072)/fPLL)
                                 ;     567        tPLLWT2 = 5ms + 500us + ((1048576 + 131072)/192MHz)
                                 ;     568        tPLLWT2 = 11.64ms
                                 ;     569        A delay of 12ms has been used below to account for variations in the LOCO. 
                                 ;     570        12ms / 86us (per iteration) = 140 iterations */
                                 ;     571     for(i = 0; i < 140; i++)             
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",571
0000016E F80600                  		MOV.L #00000000H, [R0]
00000171 08                   S  		BRA L61
00000172                         L60:	; bb
                                 ;     572     {
                                 ;     573         /* Wait 12ms. See comment above for why. */
                                 ;     574         nop() ;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",574
00000172 03                      		NOP
00000173 EC01                    		MOV.L [R0], R1
00000175 6211                    		ADD #01H, R1
00000177 E301                    		MOV.L R1, [R0]
00000179                         L61:	; bb9
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",571
00000179 EC01                    		MOV.L [R0], R1
0000017B 75518C                  		CMP #8CH, R1
0000017E 23rr                    		BLTU L60
00000180                         L62:	; return
                                 ;     575     }
                                 ;     576 #else
                                 ;     577     /* Set the PLL to stopped. */
                                 ;     578     SYSTEM.PLLCR2.BYTE = 0x01;          
                                 ;     579 #endif
                                 ;     580 
                                 ;     581     /* LOCO is saved for last since it is what is running by default out of reset. This means you do not want to turn
                                 ;     582        it off until another clock has been enabled and is ready to use. */
                                 ;     583 #if (BSP_CFG_CLOCK_SOURCE == 0)
                                 ;     584     /* LOCO is chosen. This is the default out of reset. */
                                 ;     585     SYSTEM.LOCOCR.BYTE = 0x00;
                                 ;     586 #else
                                 ;     587     /* LOCO is not chosen but it cannot be turned off yet since it is still being used. */
                                 ;     588 #endif
                                 ;     589 
                                 ;     590     /* Make sure a valid clock was chosen. */
                                 ;     591 #if (BSP_CFG_CLOCK_SOURCE > 4) || (BSP_CFG_CLOCK_SOURCE < 0)
                                 ;     592     #error "ERROR - Valid clock source must be chosen in r_bsp_config.h using BSP_CFG_CLOCK_SOURCE macro."
                                 ;     593 #endif 
                                 ;     594 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\r_bsp\board\MT01\resetprg.c",594
00000180 6701                    		RTSD #04H
                                 ;     595 
                                 ;     596 /***********************************************************************************************************************
                                 ;     597 * Function name: Change_PSW_PM_to_UserMode
                                 ;     598 * Description  : Assembler function, used to change the MCU's user mode from supervisor to user.
                                 ;     599 * Arguments    : none
                                 ;     600 * Return value : none
                                 ;     601 ***********************************************************************************************************************/
                                 ;     602 #if BSP_CFG_RUN_IN_USER_MODE==1
                                 ;     603     #if __RENESAS_VERSION__ < 0x01010000
                                 ;     604 static void Change_PSW_PM_to_UserMode(void)
                                 ;     605 {
                                 ;     606     MVFC   PSW,R1
                                 ;     607     OR     #00100000h,R1
                                 ;     608     PUSH.L R1
                                 ;     609     MVFC   PC,R1
                                 ;     610     ADD    #10,R1
                                 ;     611     PUSH.L R1
                                 ;     612     RTE
                                 ;     613     NOP
                                 ;     614     NOP
                                 ;     615 }
                                 ;     616     #endif
                                 ;     617 #endif
                                 		.SECTION	SI,DATA,ALIGN=4
00000000(00000400H)              		.blkb	1024
                                 		.SECTION	SU,DATA,ALIGN=4
00000000(00002000H)              		.blkb	8192
                                 		.SECTION	C$VECT,DATA
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00891   LINES

Section List

Attr         Size               Name
CODE     0000000386(00000182H)  P
DATA     0000008192(00002000H)  SU
DATA     0000001024(00000400H)  SI
DATA     0000000000(00000000H)  C$VECT

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx12DB\$ccrx\resetprg.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\EasyMak_build\resetprg.lst
-output=C:\Workspace\e2studio\git\MT01\EasyMak_build\r_bsp\board\MT01\resetprg.obj
