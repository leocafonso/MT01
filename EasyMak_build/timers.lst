* RX FAMILY ASSEMBLER V2.03.00.01 [24 Oct 2014] *  SOURCE LIST  Sun Feb 19 10:49:26 2017

LOC.     OBJ.              0XMDA SOURCE STATEMENT

                                 ;RX Family C/C++ Compiler (V2.03.00.03 [04 Dec 2014])  19-Feb-2017 10:49:26
                                 
                                 ;*** CPU TYPE ***
                                 
                                 ;-ISA=RXV1
                                 
                                 ;*** COMMAND PARAMETER ***
                                 
                                 ;-output=src=timers.src
                                 ;-lang=c99
                                 ;-include=C:\PROGRA~2\Renesas\RX\2_3_0/include,C:\Workspace\e2studio\git\MT01\r_lvd_rx,C:\Workspace\e2studio\git\MT01\r_lvd_rx\src,C:/Workspace/e2studio/git/MT01/r_tfa
                                 ;-debug
                                 ;-show=source,conditionals,definitions,expansions
                                 ;-listfile=timers.lst
                                 ;-isa=rxv1
                                 ;-optimize=0
                                 ;-fpu
                                 ;-alias=noansi
                                 ;-nologo
                                 ;-nomessage
                                 ;-define=__RX,COMPACTAXP=0,EASYMAK=1,MOBILE=0,FREE_RTOS_PP
                                 ;timers.c
                                 
                                 		.glb	_xTimerCreateTimerTask
                                 		.glb	_xTaskGenericCreate
                                 		.glb	_vAssertCalled
                                 		.glb	_xTimerCreate
                                 		.glb	_pvPortMalloc
                                 		.glb	_vListInitialiseItem
                                 		.glb	_xTimerGenericCommand
                                 		.glb	_xQueueGenericSend
                                 		.glb	_xTaskGetSchedulerState
                                 		.glb	_xQueueGenericSendFromISR
                                 		.glb	_pcTimerGetTimerName
                                 		.glb	_uxListRemove
                                 		.glb	_vTaskSuspendAll
                                 		.glb	_xTaskResumeAll
                                 		.glb	_vQueueWaitForMessageRestricted
                                 		.glb	_xTaskGetTickCount
                                 		.glb	_vListInsert
                                 		.glb	_vPortFree
                                 		.glb	_xQueueGenericReceive
                                 		.glb	_vTaskEnterCritical
                                 		.glb	_vListInitialise
                                 		.glb	_xQueueGenericCreate
                                 		.glb	_vTaskExitCritical
                                 		.glb	_xTimerIsTimerActive
                                 		.glb	_pvTimerGetTimerID
                                 		.glb	_vTimerSetTimerID
                                 		.glb	_xTimerPendFunctionCallFromISR
                                 		.glb	_xTimerPendFunctionCall
                                 ;LineNo. C-SOURCE STATEMENT
                                 
                                 		.SECTION	P,CODE
00000000                         _xTimerCreateTimerTask:
                                 		.STACK	_xTimerCreateTimerTask=28
                                 ;       1 /*
                                 ;       2     FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
                                 ;       3     All rights reserved
                                 ;       4 
                                 ;       5     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
                                 ;       6 
                                 ;       7     This file is part of the FreeRTOS distribution.
                                 ;       8 
                                 ;       9     FreeRTOS is free software; you can redistribute it and/or modify it under
                                 ;      10     the terms of the GNU General Public License (version 2) as published by the
                                 ;      11     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
                                 ;      12 
                                 ;      13     ***************************************************************************
                                 ;      14     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
                                 ;      15     >>!   distribute a combined work that includes FreeRTOS without being   !<<
                                 ;      16     >>!   obliged to provide the source code for proprietary components     !<<
                                 ;      17     >>!   outside of the FreeRTOS kernel.                                   !<<
                                 ;      18     ***************************************************************************
                                 ;      19 
                                 ;      20     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
                                 ;      21     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                                 ;      22     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
                                 ;      23     link: http://www.freertos.org/a00114.html
                                 ;      24 
                                 ;      25     ***************************************************************************
                                 ;      26      *                                                                       *
                                 ;      27      *    FreeRTOS provides completely free yet professionally developed,    *
                                 ;      28      *    robust, strictly quality controlled, supported, and cross          *
                                 ;      29      *    platform software that is more than just the market leader, it     *
                                 ;      30      *    is the industry's de facto standard.                               *
                                 ;      31      *                                                                       *
                                 ;      32      *    Help yourself get started quickly while simultaneously helping     *
                                 ;      33      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
                                 ;      34      *    tutorial book, reference manual, or both:                          *
                                 ;      35      *    http://www.FreeRTOS.org/Documentation                              *
                                 ;      36      *                                                                       *
                                 ;      37     ***************************************************************************
                                 ;      38 
                                 ;      39     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
                                 ;      40     the FAQ page "My application does not run, what could be wrong?".  Have you
                                 ;      41     defined configASSERT()?
                                 ;      42 
                                 ;      43     http://www.FreeRTOS.org/support - In return for receiving this top quality
                                 ;      44     embedded software for free we request you assist our global community by
                                 ;      45     participating in the support forum.
                                 ;      46 
                                 ;      47     http://www.FreeRTOS.org/training - Investing in training allows your team to
                                 ;      48     be as productive as possible as early as possible.  Now you can receive
                                 ;      49     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
                                 ;      50     Ltd, and the world's leading authority on the world's leading RTOS.
                                 ;      51 
                                 ;      52     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
                                 ;      53     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
                                 ;      54     compatible FAT file system, and our tiny thread aware UDP/IP stack.
                                 ;      55 
                                 ;      56     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
                                 ;      57     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
                                 ;      58 
                                 ;      59     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
                                 ;      60     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
                                 ;      61     licenses offer ticketed support, indemnification and commercial middleware.
                                 ;      62 
                                 ;      63     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
                                 ;      64     engineered and independently SIL3 certified version for use in safety and
                                 ;      65     mission critical applications that require provable dependability.
                                 ;      66 
                                 ;      67     1 tab == 4 spaces!
                                 ;      68 */
                                 ;      69 
                                 ;      70 /* Standard includes. */
                                 ;      71 #include <stdlib.h>
                                 ;      72 
                                 ;      73 /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
                                 ;      74 all the API functions to use the MPU wrappers.  That should only be done when
                                 ;      75 task.h is included from an application file. */
                                 ;      76 #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
                                 ;      77 
                                 ;      78 #include "FreeRTOS.h"
                                 ;      79 #include "task.h"
                                 ;      80 #include "queue.h"
                                 ;      81 #include "timers.h"
                                 ;      82 
                                 ;      83 #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
                                 ;      84 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
                                 ;      85 #endif
                                 ;      86 
                                 ;      87 /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
                                 ;      88 MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
                                 ;      89 header files above, but not in this file, in order to generate the correct
                                 ;      90 privileged Vs unprivileged linkage and placement. */
                                 ;      91 #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
                                 ;      92 
                                 ;      93 
                                 ;      94 /* This entire source file will be skipped if the application is not configured
                                 ;      95 to include software timer functionality.  This #if is closed at the very bottom
                                 ;      96 of this file.  If you want to include software timer functionality then ensure
                                 ;      97 configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
                                 ;      98 #if ( configUSE_TIMERS == 1 )
                                 ;      99 
                                 ;     100 /* Misc definitions. */
                                 ;     101 #define tmrNO_DELAY		( TickType_t ) 0U
                                 ;     102 
                                 ;     103 /* The definition of the timers themselves. */
                                 ;     104 typedef struct tmrTimerControl
                                 ;     105 {
                                 ;     106 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simply to make debugging
                                 ;     107 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for event management. */
                                 ;     108 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
                                 ;     109 	UBaseType_t				uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted once expired.  Set to 
                                 ;     110 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified when t
                                 ;     111 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer expires. */
                                 ;     112 	#if( configUSE_TRACE_FACILITY == 1 )
                                 ;     113 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
                                 ;     114 	#endif
                                 ;     115 } xTIMER;
                                 ;     116 
                                 ;     117 /* The old xTIMER name is maintained above then typedefed to the new Timer_t
                                 ;     118 name below to enable the use of older kernel aware debuggers. */
                                 ;     119 typedef xTIMER Timer_t;
                                 ;     120 
                                 ;     121 /* The definition of messages that can be sent and received on the timer queue.
                                 ;     122 Two types of message can be queued - messages that manipulate a software timer,
                                 ;     123 and messages that request the execution of a non-timer related callback.  The
                                 ;     124 two message types are defined in two separate structures, xTimerParametersType
                                 ;     125 and xCallbackParametersType respectively. */
                                 ;     126 typedef struct tmrTimerParameters
                                 ;     127 {
                                 ;     128 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, when changing the period of a 
                                 ;     129 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
                                 ;     130 } TimerParameter_t;
                                 ;     131 
                                 ;     132 
                                 ;     133 typedef struct tmrCallbackParameters
                                 ;     134 {
                                 ;     135 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
                                 ;     136 	void *pvParameter1;						/* << The value that will be used as the callback functions first parameter. */
                                 ;     137 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second parameter. */
                                 ;     138 } CallbackParameters_t;
                                 ;     139 
                                 ;     140 /* The structure that contains the two message types, along with an identifier
                                 ;     141 that is used to determine which message type is valid. */
                                 ;     142 typedef struct tmrTimerQueueMessage
                                 ;     143 {
                                 ;     144 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
                                 ;     145 	union
                                 ;     146 	{
                                 ;     147 		TimerParameter_t xTimerParameters;
                                 ;     148 
                                 ;     149 		/* Don't include xCallbackParameters if it is not going to be used as
                                 ;     150 		it makes the structure (and therefore the timer queue) larger. */
                                 ;     151 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
                                 ;     152 			CallbackParameters_t xCallbackParameters;
                                 ;     153 		#endif /* INCLUDE_xTimerPendFunctionCall */
                                 ;     154 	} u;
                                 ;     155 } DaemonTaskMessage_t;
                                 ;     156 
                                 ;     157 /*lint -e956 A manual analysis and inspection has been used to determine which
                                 ;     158 static variables must be declared volatile. */
                                 ;     159 
                                 ;     160 /* The list in which active timers are stored.  Timers are referenced in expire
                                 ;     161 time order, with the nearest expiry time at the front of the list.  Only the
                                 ;     162 timer service task is allowed to access these lists. */
                                 ;     163 PRIVILEGED_DATA static List_t xActiveTimerList1;
                                 ;     164 PRIVILEGED_DATA static List_t xActiveTimerList2;
                                 ;     165 PRIVILEGED_DATA static List_t *pxCurrentTimerList;
                                 ;     166 PRIVILEGED_DATA static List_t *pxOverflowTimerList;
                                 ;     167 
                                 ;     168 /* A queue that is used to send commands to the timer service task. */
                                 ;     169 PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
                                 ;     170 
                                 ;     171 #if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
                                 ;     172 
                                 ;     173 	PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
                                 ;     174 
                                 ;     175 #endif
                                 ;     176 
                                 ;     177 /*lint +e956 */
                                 ;     178 
                                 ;     179 /*-----------------------------------------------------------*/
                                 ;     180 
                                 ;     181 /*
                                 ;     182  * Initialise the infrastructure used by the timer service task if it has not
                                 ;     183  * been initialised already.
                                 ;     184  */
                                 ;     185 static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
                                 ;     186 
                                 ;     187 /*
                                 ;     188  * The timer service task (daemon).  Timer functionality is controlled by this
                                 ;     189  * task.  Other tasks communicate with the timer service task using the
                                 ;     190  * xTimerQueue queue.
                                 ;     191  */
                                 ;     192 static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
                                 ;     193 
                                 ;     194 /*
                                 ;     195  * Called by the timer service task to interpret and process a command it
                                 ;     196  * received on the timer queue.
                                 ;     197  */
                                 ;     198 static void	prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
                                 ;     199 
                                 ;     200 /*
                                 ;     201  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
                                 ;     202  * depending on if the expire time causes a timer counter overflow.
                                 ;     203  */
                                 ;     204 static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommand
                                 ;     205 
                                 ;     206 /*
                                 ;     207  * An active timer has reached its expire time.  Reload the timer if it is an
                                 ;     208  * auto reload timer, then call its callback.
                                 ;     209  */
                                 ;     210 static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
                                 ;     211 
                                 ;     212 /*
                                 ;     213  * The tick count has overflowed.  Switch the timer lists after ensuring the
                                 ;     214  * current timer list does not still reference some timers.
                                 ;     215  */
                                 ;     216 static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
                                 ;     217 
                                 ;     218 /*
                                 ;     219  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
                                 ;     220  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
                                 ;     221  */
                                 ;     222 static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTION;
                                 ;     223 
                                 ;     224 /*
                                 ;     225  * If the timer list contains any active timers then return the expire time of
                                 ;     226  * the timer that will expire first and set *pxListWasEmpty to false.  If the
                                 ;     227  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
                                 ;     228  * to pdTRUE.
                                 ;     229  */
                                 ;     230 static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
                                 ;     231 
                                 ;     232 /*
                                 ;     233  * If a timer has expired, process it.  Otherwise, block the timer service task
                                 ;     234  * until either a timer does expire or a command is received.
                                 ;     235  */
                                 ;     236 static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;
                                 ;     237 
                                 ;     238 /*-----------------------------------------------------------*/
                                 ;     239 
                                 ;     240 BaseType_t xTimerCreateTimerTask( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",240
00000000 6080                    		SUB #08H, R0
                                 ;     241 {
                                 ;     242 BaseType_t xReturn = pdFAIL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",242
00000002 F80600                  		MOV.L #00000000H, [R0]
00000005                         L12:	; entry.split
                                 ;     243 
                                 ;     244 	/* This function is called when the scheduler is started if
                                 ;     245 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
                                 ;     246 	timer service task has been created/initialised.  If timers have already
                                 ;     247 	been created then the initialisation will already have been performed. */
                                 ;     248 	prvCheckForValidListAndQueue();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",248
00000005 39rrrr               W  		BSR __$prvCheckForValidListAndQueue
00000008                         L13:	; entry.split1
                                 ;     249 
                                 ;     250 	if( xTimerQueue != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",250
00000008 FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
0000000E ECEE                    		MOV.L [R14], R14
00000010 610E                    		CMP #00H, R14
00000012 20rr                    		BEQ L15
00000014                         L14:	; bb2
00000014 7100F0                  		ADD #0FFFFFFF0H, R0
00000017 6604                    		MOV.L #00000000H, R4
                                 ;     251 	{
                                 ;     252 		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
                                 ;     253 		{
                                 ;     254 			/* Create the timer task, storing its handle in xTimerTaskHandle so
                                 ;     255 			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
                                 ;     256 			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIO
                                 ;     257 		}
                                 ;     258 		#else
                                 ;     259 		{
                                 ;     260 			/* Create the timer task without storing its handle. */
                                 ;     261 			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIO
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",261
00000019 A08C                    		MOV.L R4, 0CH[R0]
0000001B A084                    		MOV.L R4, 08H[R0]
0000001D A00C                    		MOV.L R4, 04H[R0]
0000001F F80607                  		MOV.L #00000007H, [R0]
00000022 75438C                  		MOV.L #0000008CH, R3
00000025 FB22rrrrrrrr            		MOV.L #_L10, R2
0000002B FB12rrrrrrrr            		MOV.L #__$prvTimerTask, R1
00000031 05rrrrrr             A  		BSR _xTaskGenericCreate
00000035 710010                  		ADD #10H, R0
00000038 E301                    		MOV.L R1, [R0]
0000003A                         L15:	; bb9
                                 ;     262 		}
                                 ;     263 		#endif
                                 ;     264 	}
                                 ;     265 	else
                                 ;     266 	{
                                 ;     267 		mtCOVERAGE_TEST_MARKER();
                                 ;     268 	}
                                 ;     269 
                                 ;     270 	configASSERT( xReturn );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",270
0000003A EC01                    		MOV.L [R0], R1
0000003C 6101                    		CMP #00H, R1
0000003E 18                   S  		BNE L17
0000003F                         L16:	; bb10
0000003F 05rrrrrr             A  		BSR _vAssertCalled
00000043                         L17:	; bb15
                                 ;     271 	return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",271
00000043 EC01                    		MOV.L [R0], R1
00000045 A009                    		MOV.L R1, 04H[R0]
00000047                         L18:	; bb15.split
                                 ;     272 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",272
00000047 6702                    		RTSD #08H
00000049                         _xTimerCreate:
                                 		.STACK	_xTimerCreate=32
                                 ;     273 /*-----------------------------------------------------------*/
                                 ;     274 
                                 ;     275 TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, Tim
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",275
00000049 7100E4                  		ADD #0FFFFFFE4H, R0
0000004C A181                    		MOV.L R1, 18H[R0]
0000004E A10A                    		MOV.L R2, 14H[R0]
00000050 A103                    		MOV.L R3, 10H[R0]
00000052 A08C                    		MOV.L R4, 0CH[R0]
00000054 E5000802                		MOV.L 20H[R0], 08H[R0]
                                 ;     276 {
                                 ;     277 Timer_t *pxNewTimer;
                                 ;     278 
                                 ;     279 	/* Allocate the timer structure. */
                                 ;     280 	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",280
00000058 A909                    		MOV.L 14H[R0], R1
0000005A 6101                    		CMP #00H, R1
0000005C 18                   S  		BNE L21
0000005D                         L20:	; bb7
                                 ;     281 	{
                                 ;     282 		pxNewTimer = NULL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",282
0000005D F80600                  		MOV.L #00000000H, [R0]
00000060 2Err                 B  		BRA L30
00000062                         L21:	; bb8
00000062 75412C                  		MOV.L #0000002CH, R1
                                 ;     283 	}
                                 ;     284 	else
                                 ;     285 	{
                                 ;     286 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",286
00000065 05rrrrrr             A  		BSR _pvPortMalloc
00000069 E301                    		MOV.L R1, [R0]
0000006B                         L22:	; bb8.split
                                 ;     287 		if( pxNewTimer != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",287
0000006B EC01                    		MOV.L [R0], R1
0000006D 6101                    		CMP #00H, R1
0000006F 20rr                    		BEQ L30
00000071                         L23:	; bb12
                                 ;     288 		{
                                 ;     289 			/* Ensure the infrastructure used by the timer service task has been
                                 ;     290 			created/initialised. */
                                 ;     291 			prvCheckForValidListAndQueue();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",291
00000071 39rrrr               W  		BSR __$prvCheckForValidListAndQueue
00000074                         L24:	; bb12.split
                                 ;     292 
                                 ;     293 			/* Initialise the timer structure members using the function parameters. */
                                 ;     294 			pxNewTimer->pcTimerName = pcTimerName;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",294
00000074 A981                    		MOV.L 18H[R0], R1
00000076 EC02                    		MOV.L [R0], R2
00000078 E321                    		MOV.L R1, [R2]
0000007A                         L25:	; bb12.split1
                                 ;     295 			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",295
0000007A A909                    		MOV.L 14H[R0], R1
0000007C EC02                    		MOV.L [R0], R2
0000007E A1A1                    		MOV.L R1, 18H[R2]
00000080                         L26:	; bb12.split2
                                 ;     296 			pxNewTimer->uxAutoReload = uxAutoReload;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",296
00000080 A901                    		MOV.L 10H[R0], R1
00000082 EC02                    		MOV.L [R0], R2
00000084 A1A9                    		MOV.L R1, 1CH[R2]
00000086                         L27:	; bb12.split3
                                 ;     297 			pxNewTimer->pvTimerID = pvTimerID;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",297
00000086 A889                    		MOV.L 0CH[R0], R1
00000088 EC02                    		MOV.L [R0], R2
0000008A A221                    		MOV.L R1, 20H[R2]
0000008C                         L28:	; bb12.split4
                                 ;     298 			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",298
0000008C A881                    		MOV.L 08H[R0], R1
0000008E EC02                    		MOV.L [R0], R2
00000090 A229                    		MOV.L R1, 24H[R2]
00000092                         L29:	; bb12.split5
                                 ;     299 			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",299
00000092 EC01                    		MOV.L [R0], R1
00000094 6241                    		ADD #04H, R1
00000096 05rrrrrr             A  		BSR _vListInitialiseItem
0000009A                         L30:	; bb40
                                 ;     300 
                                 ;     301 			traceTIMER_CREATE( pxNewTimer );
                                 ;     302 		}
                                 ;     303 		else
                                 ;     304 		{
                                 ;     305 			traceTIMER_CREATE_FAILED();
                                 ;     306 		}
                                 ;     307 	}
                                 ;     308 
                                 ;     309 	/* 0 is not a valid value for xTimerPeriodInTicks. */
                                 ;     310 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",310
0000009A A909                    		MOV.L 14H[R0], R1
0000009C 6101                    		CMP #00H, R1
0000009E 18                   S  		BNE L32
0000009F                         L31:	; bb41
0000009F 05rrrrrr             A  		BSR _vAssertCalled
000000A3                         L32:	; bb48
                                 ;     311 
                                 ;     312 	return ( TimerHandle_t ) pxNewTimer;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",312
000000A3 EC01                    		MOV.L [R0], R1
000000A5 A009                    		MOV.L R1, 04H[R0]
000000A7                         L33:	; bb48.split
                                 ;     313 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",313
000000A7 6707                    		RTSD #1CH
000000A9                         _xTimerGenericCommand:
                                 		.STACK	_xTimerGenericCommand=48
                                 ;     314 /*-----------------------------------------------------------*/
                                 ;     315 
                                 ;     316 BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskW
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",316
000000A9 7100D4                  		ADD #0FFFFFFD4H, R0
000000AC A281                    		MOV.L R1, 28H[R0]
000000AE A20A                    		MOV.L R2, 24H[R0]
000000B0 A203                    		MOV.L R3, 20H[R0]
000000B2 A18C                    		MOV.L R4, 1CH[R0]
000000B4 E5000C06                		MOV.L 30H[R0], 18H[R0]
                                 ;     317 {
                                 ;     318 BaseType_t xReturn = pdFAIL;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",318
000000B8 F80600                  		MOV.L #00000000H, [R0]
000000BB                         L35:	; entry.split
                                 ;     319 DaemonTaskMessage_t xMessage;
                                 ;     320 
                                 ;     321 	/* Send a message to the timer service task to perform a particular action
                                 ;     322 	on a particular timer definition. */
                                 ;     323 	if( xTimerQueue != NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",323
000000BB FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
000000C1 ECEE                    		MOV.L [R14], R14
000000C3 610E                    		CMP #00H, R14
000000C5 20rr                    		BEQ L44
000000C7                         L36:	; bb8
                                 ;     324 	{
                                 ;     325 		/* Send a command to the timer service task to start the xTimer timer. */
                                 ;     326 		xMessage.xMessageID = xCommandID;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",326
000000C7 E5000901                		MOV.L 24H[R0], 04H[R0]
000000CB                         L37:	; bb8.split
                                 ;     327 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",327
000000CB E5000802                		MOV.L 20H[R0], 08H[R0]
000000CF                         L38:	; bb8.split1
                                 ;     328 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",328
000000CF E5000A03                		MOV.L 28H[R0], 0CH[R0]
000000D3                         L39:	; bb8.split2
                                 ;     329 
                                 ;     330 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",330
000000D3 AA09                    		MOV.L 24H[R0], R1
000000D5 6151                    		CMP #05H, R1
000000D7 2Arr                    		BGT L43
000000D9                         L40:	; bb24
                                 ;     331 		{
                                 ;     332 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",332
000000D9 05rrrrrr             A  		BSR _xTaskGetSchedulerState
000000DD 6121                    		CMP #02H, R1
000000DF FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
000000E5 ECE1                    		MOV.L [R14], R1
000000E7 21rr                    		BNE L42
000000E9                         L41:	; bb25
                                 ;     333 			{
                                 ;     334 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",334
000000E9 A983                    		MOV.L 18H[R0], R3
000000EB 6604                    		MOV.L #00000000H, R4
000000ED 710204                  		ADD #04H, R0, R2
000000F0 05rrrrrr             A  		BSR _xQueueGenericSend
000000F4 E301                    		MOV.L R1, [R0]
000000F6 2Err                 B  		BRA L44
000000F8                         L42:	; bb30
000000F8 6603                    		MOV.L #00000000H, R3
000000FA 710204                  		ADD #04H, R0, R2
                                 ;     335 			}
                                 ;     336 			else
                                 ;     337 			{
                                 ;     338 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",338
000000FD EF34                    		MOV.L R3, R4
000000FF 05rrrrrr             A  		BSR _xQueueGenericSend
00000103 E301                    		MOV.L R1, [R0]
00000105 2Err                 B  		BRA L44
00000107                         L43:	; bb38
                                 ;     339 			}
                                 ;     340 		}
                                 ;     341 		else
                                 ;     342 		{
                                 ;     343 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",343
00000107 FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
0000010D ECE1                    		MOV.L [R14], R1
0000010F A98B                    		MOV.L 1CH[R0], R3
00000111 6604                    		MOV.L #00000000H, R4
00000113 710204                  		ADD #04H, R0, R2
00000116 05rrrrrr             A  		BSR _xQueueGenericSendFromISR
0000011A E301                    		MOV.L R1, [R0]
0000011C                         L44:	; bb53
                                 ;     344 		}
                                 ;     345 
                                 ;     346 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
                                 ;     347 	}
                                 ;     348 	else
                                 ;     349 	{
                                 ;     350 		mtCOVERAGE_TEST_MARKER();
                                 ;     351 	}
                                 ;     352 
                                 ;     353 	return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",353
0000011C EC01                    		MOV.L [R0], R1
0000011E A109                    		MOV.L R1, 14H[R0]
00000120                         L45:	; bb53.split
                                 ;     354 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",354
00000120 670B                    		RTSD #2CH
00000122                         _pcTimerGetTimerName:
                                 		.STACK	_pcTimerGetTimerName=16
                                 ;     355 /*-----------------------------------------------------------*/
                                 ;     356 
                                 ;     357 #if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
                                 ;     358 
                                 ;     359 	TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
                                 ;     360 	{
                                 ;     361 		/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
                                 ;     362 		started, then xTimerTaskHandle will be NULL. */
                                 ;     363 		configASSERT( ( xTimerTaskHandle != NULL ) );
                                 ;     364 		return xTimerTaskHandle;
                                 ;     365 	}
                                 ;     366 
                                 ;     367 #endif
                                 ;     368 /*-----------------------------------------------------------*/
                                 ;     369 
                                 ;     370 const char * pcTimerGetTimerName( TimerHandle_t xTimer )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",370
00000122 60C0                    		SUB #0CH, R0
00000124 A081                    		MOV.L R1, 08H[R0]
                                 ;     371 {
                                 ;     372 Timer_t *pxTimer = ( Timer_t * ) xTimer;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",372
00000126 E301                    		MOV.L R1, [R0]
00000128                         L47:	; entry.split
                                 ;     373 
                                 ;     374 	return pxTimer->pcTimerName;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",374
00000128 EC01                    		MOV.L [R0], R1
0000012A EC11                    		MOV.L [R1], R1
0000012C A009                    		MOV.L R1, 04H[R0]
0000012E                         L48:	; entry.split1
                                 ;     375 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",375
0000012E 6703                    		RTSD #0CH
00000130                         __$prvProcessExpiredTimer:
                                 		.STACK	__$prvProcessExpiredTimer=24
                                 ;     376 /*-----------------------------------------------------------*/
                                 ;     377 
                                 ;     378 static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",378
00000130 7100F0                  		ADD #0FFFFFFF0H, R0
00000133 A089                    		MOV.L R1, 0CH[R0]
00000135 A082                    		MOV.L R2, 08H[R0]
                                 ;     379 {
                                 ;     380 BaseType_t xResult;
                                 ;     381 Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",381
00000137 FBE2rrrrrrrr            		MOV.L #__$pxCurrentTimerList, R14
0000013D ECE1                    		MOV.L [R14], R1
0000013F A899                    		MOV.L 0CH[R1], R1
00000141 E5100301                		MOV.L 0CH[R1], 04H[R0]
00000145                         L50:	; entry.split
                                 ;     382 
                                 ;     383 	/* Remove the timer from the list of active timers.  A check has already
                                 ;     384 	been performed to ensure the list is not empty. */
                                 ;     385 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",385
00000145 A809                    		MOV.L 04H[R0], R1
00000147 6241                    		ADD #04H, R1
00000149 05rrrrrr             A  		BSR _uxListRemove
0000014D                         L51:	; entry.split1
                                 ;     386 	traceTIMER_EXPIRED( pxTimer );
                                 ;     387 
                                 ;     388 	/* If the timer is an auto reload timer then calculate the next
                                 ;     389 	expiry time and re-insert the timer in the list of active timers. */
                                 ;     390 	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",390
0000014D A809                    		MOV.L 04H[R0], R1
0000014F A999                    		MOV.L 1CH[R1], R1
00000151 6111                    		CMP #01H, R1
00000153 21rr                    		BNE L56
00000155                         L52:	; bb15
                                 ;     391 	{
                                 ;     392 		/* The timer is inserted into a list using a time relative to anything
                                 ;     393 		other than the current time.  It will therefore be inserted into the
                                 ;     394 		correct list relative to the time this task thinks it is now. */
                                 ;     395 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",395
00000155 A88C                    		MOV.L 0CH[R0], R4
00000157 A809                    		MOV.L 04H[R0], R1
00000159 EF42                    		MOV.L R4, R2
0000015B 06891206                		ADD 18H[R1].L, R2
0000015F A883                    		MOV.L 08H[R0], R3
00000161 39rrrr               W  		BSR __$prvInsertTimerInActiveList
00000164 6111                    		CMP #01H, R1
00000166 21rr                    		BNE L56
00000168                         L53:	; bb16
                                 ;     396 		{
                                 ;     397 			/* The timer expired before it was added to the active timer
                                 ;     398 			list.  Reload it now.  */
                                 ;     399 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",399
00000168 A88B                    		MOV.L 0CH[R0], R3
0000016A A809                    		MOV.L 04H[R0], R1
0000016C 6040                    		SUB #04H, R0
0000016E F80600                  		MOV.L #00000000H, [R0]
00000171 6602                    		MOV.L #00000000H, R2
00000173 EF24                    		MOV.L R2, R4
00000175 39rrrr               W  		BSR _xTimerGenericCommand
00000178 6240                    		ADD #04H, R0
0000017A E301                    		MOV.L R1, [R0]
0000017C                         L54:	; bb16.split
                                 ;     400 			configASSERT( xResult );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",400
0000017C EC01                    		MOV.L [R0], R1
0000017E 6101                    		CMP #00H, R1
00000180 18                   S  		BNE L56
00000181                         L55:	; bb22
00000181 05rrrrrr             A  		BSR _vAssertCalled
00000185                         L56:	; bb49
                                 ;     401 			( void ) xResult;
                                 ;     402 		}
                                 ;     403 		else
                                 ;     404 		{
                                 ;     405 			mtCOVERAGE_TEST_MARKER();
                                 ;     406 		}
                                 ;     407 	}
                                 ;     408 	else
                                 ;     409 	{
                                 ;     410 		mtCOVERAGE_TEST_MARKER();
                                 ;     411 	}
                                 ;     412 
                                 ;     413 	/* Call the timer callback. */
                                 ;     414 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",414
00000185 A809                    		MOV.L 04H[R0], R1
00000187 AA1A                    		MOV.L 24H[R1], R2
00000189 7F12                    		JSR R2
0000018B 6704                    		RTSD #10H
0000018D                         __$prvTimerTask:
                                 		.STACK	__$prvTimerTask=16
                                 ;     415 }
                                 ;     416 /*-----------------------------------------------------------*/
                                 ;     417 
                                 ;     418 static void prvTimerTask( void *pvParameters )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",418
0000018D 60C0                    		SUB #0CH, R0
0000018F A081                    		MOV.L R1, 08H[R0]
00000191                         L58:	; bb7.split
00000191 710104                  		ADD #04H, R0, R1
                                 ;     419 {
                                 ;     420 TickType_t xNextExpireTime;
                                 ;     421 BaseType_t xListWasEmpty;
                                 ;     422 
                                 ;     423 	/* Just to avoid compiler warnings. */
                                 ;     424 	( void ) pvParameters;
                                 ;     425 
                                 ;     426 	for( ;; )
                                 ;     427 	{
                                 ;     428 		/* Query the timers list to see if it contains any timers, and if so,
                                 ;     429 		obtain the time at which the next timer will expire. */
                                 ;     430 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",430
00000194 39rrrr               W  		BSR __$prvGetNextExpireTime
00000197 E301                    		MOV.L R1, [R0]
00000199                         L59:	; bb7.split1
                                 ;     431 
                                 ;     432 		/* If a timer has expired, process it.  Otherwise, block this task
                                 ;     433 		until either a timer does expire, or a command is received. */
                                 ;     434 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",434
00000199 A80A                    		MOV.L 04H[R0], R2
0000019B EC01                    		MOV.L [R0], R1
0000019D 39rrrr               W  		BSR __$prvProcessTimerOrBlockTask
000001A0                         L60:	; bb7.split2
                                 ;     435 
                                 ;     436 		/* Empty the command queue. */
                                 ;     437 		prvProcessReceivedCommands();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",437
000001A0 39rrrr               W  		BSR __$prvProcessReceivedCommands
000001A3 2Err                 B  		BRA L58
000001A5                         __$prvProcessTimerOrBlockTask:
                                 		.STACK	__$prvProcessTimerOrBlockTask=24
                                 ;     438 	}
                                 ;     439 }
                                 ;     440 /*-----------------------------------------------------------*/
                                 ;     441 
                                 ;     442 static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",442
000001A5 7100EC                  		ADD #0FFFFFFECH, R0
000001A8 A101                    		MOV.L R1, 10H[R0]
000001AA A08A                    		MOV.L R2, 0CH[R0]
                                 ;     443 {
                                 ;     444 TickType_t xTimeNow;
                                 ;     445 BaseType_t xTimerListsWereSwitched;
                                 ;     446 
                                 ;     447 	vTaskSuspendAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",447
000001AC 05rrrrrr             A  		BSR _vTaskSuspendAll
000001B0                         L62:	; entry.split
000001B0 710108                  		ADD #08H, R0, R1
                                 ;     448 	{
                                 ;     449 		/* Obtain the time now to make an assessment as to whether the timer
                                 ;     450 		has expired or not.  If obtaining the time causes the lists to switch
                                 ;     451 		then don't process this timer as any timers that remained in the list
                                 ;     452 		when the lists were switched will have been processed within the
                                 ;     453 		prvSampleTimeNow() function. */
                                 ;     454 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",454
000001B3 39rrrr               W  		BSR __$prvSampleTimeNow
000001B6 A009                    		MOV.L R1, 04H[R0]
000001B8                         L63:	; entry.split1
                                 ;     455 		if( xTimerListsWereSwitched == pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",455
000001B8 A881                    		MOV.L 08H[R0], R1
000001BA 6101                    		CMP #00H, R1
000001BC 21rr                    		BNE L74
000001BE                         L64:	; bb6
                                 ;     456 		{
                                 ;     457 			/* The tick count has not overflowed, has the timer expired? */
                                 ;     458 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",458
000001BE A889                    		MOV.L 0CH[R0], R1
000001C0 6101                    		CMP #00H, R1
000001C2 20rr                    		BEQ L70
000001C4 2Err                 B  		BRA L72
000001C6                         L65:	; bb7
                                 ;     459 			{
                                 ;     460 				( void ) xTaskResumeAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",460
000001C6 05rrrrrr             A  		BSR _xTaskResumeAll
000001CA                         L66:	; bb7.split
                                 ;     461 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",461
000001CA A80A                    		MOV.L 04H[R0], R2
000001CC A901                    		MOV.L 10H[R0], R1
000001CE 39rrrr               W  		BSR __$prvProcessExpiredTimer
000001D1 6705                    		RTSD #14H
000001D3                         L67:	; bb11
                                 ;     462 			}
                                 ;     463 			else
                                 ;     464 			{
                                 ;     465 				/* The tick count has not overflowed, and the next expire
                                 ;     466 				time has not been reached yet.  This task should therefore
                                 ;     467 				block to wait for the next expire time or a command to be
                                 ;     468 				received - whichever comes first.  The following line cannot
                                 ;     469 				be reached unless xNextExpireTime > xTimeNow, except in the
                                 ;     470 				case when the current timer list is empty. */
                                 ;     471 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",471
000001D3 A902                    		MOV.L 10H[R0], R2
000001D5 06810201                		SUB 04H[R0].L, R2
000001D9 FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
000001DF ECE1                    		MOV.L [R14], R1
000001E1 05rrrrrr             A  		BSR _vQueueWaitForMessageRestricted
000001E5                         L68:	; bb11.split
                                 ;     472 
                                 ;     473 				if( xTaskResumeAll() == pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",473
000001E5 05rrrrrr             A  		BSR _xTaskResumeAll
000001E9 6101                    		CMP #00H, R1
000001EB 21rr                    		BNE L75
000001ED                         L69:	; bb17
                                 ;     474 				{
                                 ;     475 					/* Yield to wait for either a command to arrive, or the
                                 ;     476 					block time to expire.  If a command arrived between the
                                 ;     477 					critical section being exited and this yield then the yield
                                 ;     478 					will not cause the task to block. */
                                 ;     479 					portYIELD_WITHIN_API();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",479
                                 		._LINE_TOP  inline_asm
                                  
000001ED 7EA5                    	PUSH.L R5
                                 	 
000001EF FB5EE07208              	MOV.L #553696, R5
000001F4 F85401                  	MOV.B #1, [R5]
                                 	 
000001F7 EC55                    	MOV.L [R5], R5
                                 	 
000001F9 7EB5                    	POP R5
                                 		._LINE_END  inline_asm
000001FB 6705                    		RTSD #14H
000001FD                         L70:	; bb26
000001FD A901                    		MOV.L 10H[R0], R1
000001FF 06850101                		CMP 04H[R0].L, R1
00000203 24rr                    		BGTU L72
00000205                         L71:	; bb31
00000205 F80601                  		MOV.L #00000001H, [R0]
00000208 08                   S  		BRA L73
00000209                         L72:	; bb32
00000209 F80600                  		MOV.L #00000000H, [R0]
0000020C                         L73:	; bb33
0000020C EC01                    		MOV.L [R0], R1
0000020E 6101                    		CMP #00H, R1
00000210 21rr                    		BNE L65
00000212 2Err                 B  		BRA L67
00000214                         L74:	; bb39
                                 ;     480 				}
                                 ;     481 				else
                                 ;     482 				{
                                 ;     483 					mtCOVERAGE_TEST_MARKER();
                                 ;     484 				}
                                 ;     485 			}
                                 ;     486 		}
                                 ;     487 		else
                                 ;     488 		{
                                 ;     489 			( void ) xTaskResumeAll();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",489
00000214 05rrrrrr             A  		BSR _xTaskResumeAll
00000218 6705                    		RTSD #14H
0000021A                         L75:	; return
                                 ;     490 		}
                                 ;     491 	}
                                 ;     492 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",492
0000021A 6705                    		RTSD #14H
0000021C                         __$prvGetNextExpireTime:
                                 		.STACK	__$prvGetNextExpireTime=16
                                 ;     493 /*-----------------------------------------------------------*/
                                 ;     494 
                                 ;     495 static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",495
0000021C 60C0                    		SUB #0CH, R0
0000021E A081                    		MOV.L R1, 08H[R0]
                                 ;     496 {
                                 ;     497 TickType_t xNextExpireTime;
                                 ;     498 
                                 ;     499 	/* Timers are listed in expiry time order, with the head of the list
                                 ;     500 	referencing the task that will expire first.  Obtain the time at which
                                 ;     501 	the timer with the nearest expiry time will expire.  If there are no
                                 ;     502 	active timers then just set the next expire time to 0.  That will cause
                                 ;     503 	this task to unblock when the tick count overflows, at which point the
                                 ;     504 	timer lists will be switched and the next expiry time can be
                                 ;     505 	re-assessed.  */
                                 ;     506 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",506
00000220 FBE2rrrrrrrr            		MOV.L #__$pxCurrentTimerList, R14
00000226 ECEE                    		MOV.L [R14], R14
00000228 ECEE                    		MOV.L [R14], R14
0000022A 610E                    		CMP #00H, R14
0000022C FCD810                  		SCEQ.L [R1]
0000022F                         L77:	; entry.split
                                 ;     507 	if( *pxListWasEmpty == pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",507
0000022F A881                    		MOV.L 08H[R0], R1
00000231 EC1E                    		MOV.L [R1], R14
00000233 610E                    		CMP #00H, R14
00000235 21rr                    		BNE L79
00000237                         L78:	; bb9
                                 ;     508 	{
                                 ;     509 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",509
00000237 FBE2rrrrrrrr            		MOV.L #__$pxCurrentTimerList, R14
0000023D ECE1                    		MOV.L [R14], R1
0000023F A899                    		MOV.L 0CH[R1], R1
00000241 E010                    		MOV.L [R1], [R0]
00000243 08                   S  		BRA L80
00000244                         L79:	; bb16
                                 ;     510 	}
                                 ;     511 	else
                                 ;     512 	{
                                 ;     513 		/* Ensure the task unblocks when the tick count rolls over. */
                                 ;     514 		xNextExpireTime = ( TickType_t ) 0U;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",514
00000244 F80600                  		MOV.L #00000000H, [R0]
00000247                         L80:	; bb21
                                 ;     515 	}
                                 ;     516 
                                 ;     517 	return xNextExpireTime;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",517
00000247 EC01                    		MOV.L [R0], R1
00000249 A009                    		MOV.L R1, 04H[R0]
0000024B                         L81:	; bb21.split
                                 ;     518 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",518
0000024B 6703                    		RTSD #0CH
0000024D                         __$prvSampleTimeNow:
                                 		.STACK	__$prvSampleTimeNow=16
                                 ;     519 /*-----------------------------------------------------------*/
                                 ;     520 
                                 ;     521 static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",521
0000024D 60C0                    		SUB #0CH, R0
0000024F A081                    		MOV.L R1, 08H[R0]
                                 ;     522 {
                                 ;     523 TickType_t xTimeNow;
                                 ;     524 PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */
                                 ;     525 
                                 ;     526 	xTimeNow = xTaskGetTickCount();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",526
00000251 05rrrrrr             A  		BSR _xTaskGetTickCount
00000255 E301                    		MOV.L R1, [R0]
00000257                         L83:	; entry.split
                                 ;     527 
                                 ;     528 	if( xTimeNow < xLastTime )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",528
00000257 FBE2rrrrrrrr            		MOV.L #__$xLastTime$1, R14
0000025D EC01                    		MOV.L [R0], R1
0000025F 0684E1                  		CMP [R14].L, R1
00000262 22rr                    		BGEU L86
00000264                         L84:	; bb4
                                 ;     529 	{
                                 ;     530 		prvSwitchTimerLists();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",530
00000264 39rrrr               W  		BSR __$prvSwitchTimerLists
00000267                         L85:	; bb4.split
                                 ;     531 		*pxTimerListsWereSwitched = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",531
00000267 A881                    		MOV.L 08H[R0], R1
00000269 F81601                  		MOV.L #00000001H, [R1]
0000026C 08                   S  		BRA L87
0000026D                         L86:	; bb6
                                 ;     532 	}
                                 ;     533 	else
                                 ;     534 	{
                                 ;     535 		*pxTimerListsWereSwitched = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",535
0000026D A881                    		MOV.L 08H[R0], R1
0000026F F81600                  		MOV.L #00000000H, [R1]
00000272                         L87:	; bb12
                                 ;     536 	}
                                 ;     537 
                                 ;     538 	xLastTime = xTimeNow;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",538
00000272 FBE2rrrrrrrr            		MOV.L #__$xLastTime$1, R14
00000278 E00E                    		MOV.L [R0], [R14]
0000027A                         L88:	; bb12.split
                                 ;     539 
                                 ;     540 	return xTimeNow;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",540
0000027A EC01                    		MOV.L [R0], R1
0000027C A009                    		MOV.L R1, 04H[R0]
0000027E                         L89:	; bb12.split1
                                 ;     541 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",541
0000027E 6703                    		RTSD #0CH
00000280                         __$prvInsertTimerInActiveList:
                                 		.STACK	__$prvInsertTimerInActiveList=32
                                 ;     542 /*-----------------------------------------------------------*/
                                 ;     543 
                                 ;     544 static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommand
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",544
00000280 7100E4                  		ADD #0FFFFFFE4H, R0
00000283 A181                    		MOV.L R1, 18H[R0]
00000285 A10A                    		MOV.L R2, 14H[R0]
00000287 A103                    		MOV.L R3, 10H[R0]
00000289 A08C                    		MOV.L R4, 0CH[R0]
                                 ;     545 {
                                 ;     546 BaseType_t xProcessTimerNow = pdFALSE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",546
0000028B 3E0100                  		MOV.L #00000000H, 04H[R0]
0000028E                         L91:	; entry.split
                                 ;     547 
                                 ;     548 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",548
0000028E A909                    		MOV.L 14H[R0], R1
00000290 A982                    		MOV.L 18H[R0], R2
00000292 A029                    		MOV.L R1, 04H[R2]
00000294                         L92:	; entry.split1
                                 ;     549 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",549
00000294 A981                    		MOV.L 18H[R0], R1
00000296 A111                    		MOV.L R1, 10H[R1]
00000298                         L93:	; entry.split2
                                 ;     550 
                                 ;     551 	if( xNextExpiryTime <= xTimeNow )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",551
00000298 A901                    		MOV.L 10H[R0], R1
0000029A 06850105                		CMP 14H[R0].L, R1
0000029E A88A                    		MOV.L 0CH[R0], R2
000002A0 23rr                    		BLTU L97
000002A2                         L94:	; bb16
                                 ;     552 	{
                                 ;     553 		/* Has the expiry time elapsed between the command to start/reset a
                                 ;     554 		timer was issued, and the time the command was processed? */
                                 ;     555 		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",555
000002A2 4321                    		SUB R2, R1
000002A4 A982                    		MOV.L 18H[R0], R2
000002A6 06852106                		CMP 18H[R2].L, R1
000002AA 23rr                    		BLTU L96
000002AC                         L95:	; bb17
                                 ;     556 		{
                                 ;     557 			/* The time between a command being issued and the command being
                                 ;     558 			processed actually exceeds the timers period.  */
                                 ;     559 			xProcessTimerNow = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",559
000002AC 3E0101                  		MOV.L #00000001H, 04H[R0]
000002AF 2Err                 B  		BRA L104
000002B1                         L96:	; bb18
                                 ;     560 		}
                                 ;     561 		else
                                 ;     562 		{
                                 ;     563 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",563
000002B1 FBE2rrrrrrrr            		MOV.L #__$pxOverflowTimerList, R14
000002B7 ECE1                    		MOV.L [R14], R1
000002B9 A982                    		MOV.L 18H[R0], R2
000002BB 6242                    		ADD #04H, R2
000002BD 05rrrrrr             A  		BSR _vListInsert
000002C1 2Err                 B  		BRA L104
000002C3                         L97:	; bb32
                                 ;     564 		}
                                 ;     565 	}
                                 ;     566 	else
                                 ;     567 	{
                                 ;     568 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",568
000002C3 4721                    		CMP R2, R1
000002C5 23rr                    		BLTU L100
000002C7 2Err                 B  		BRA L102
000002C9                         L98:	; bb33
                                 ;     569 		{
                                 ;     570 			/* If, since the command was issued, the tick count has overflowed
                                 ;     571 			but the expiry time has not, then the timer must have already passed
                                 ;     572 			its expiry time and should be processed immediately. */
                                 ;     573 			xProcessTimerNow = pdTRUE;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",573
000002C9 3E0101                  		MOV.L #00000001H, 04H[R0]
000002CC 2Err                 B  		BRA L104
000002CE                         L99:	; bb34
                                 ;     574 		}
                                 ;     575 		else
                                 ;     576 		{
                                 ;     577 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",577
000002CE FBE2rrrrrrrr            		MOV.L #__$pxCurrentTimerList, R14
000002D4 ECE1                    		MOV.L [R14], R1
000002D6 A982                    		MOV.L 18H[R0], R2
000002D8 6242                    		ADD #04H, R2
000002DA 05rrrrrr             A  		BSR _vListInsert
000002DE 2Err                 B  		BRA L104
000002E0                         L100:	; bb42
000002E0 A909                    		MOV.L 14H[R0], R1
000002E2 06850103                		CMP 0CH[R0].L, R1
000002E6 23rr                    		BLTU L102
000002E8                         L101:	; bb47
000002E8 F80601                  		MOV.L #00000001H, [R0]
000002EB 08                   S  		BRA L103
000002EC                         L102:	; bb48
000002EC F80600                  		MOV.L #00000000H, [R0]
000002EF                         L103:	; bb49
000002EF EC01                    		MOV.L [R0], R1
000002F1 6101                    		CMP #00H, R1
000002F3 21rr                    		BNE L98
000002F5 2Err                 B  		BRA L99
000002F7                         L104:	; bb60
                                 ;     578 		}
                                 ;     579 	}
                                 ;     580 
                                 ;     581 	return xProcessTimerNow;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",581
000002F7 A809                    		MOV.L 04H[R0], R1
000002F9 A081                    		MOV.L R1, 08H[R0]
000002FB                         L105:	; bb60.split
                                 ;     582 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",582
000002FB 6707                    		RTSD #1CH
000002FD                         __$prvProcessReceivedCommands:
                                 		.STACK	__$prvProcessReceivedCommands=44
                                 ;     583 /*-----------------------------------------------------------*/
                                 ;     584 
                                 ;     585 static void	prvProcessReceivedCommands( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",585
000002FD 7100DC                  		ADD #0FFFFFFDCH, R0
00000300 38rrrr               W  		BRA L133
00000303                         L107:	; bb7
                                 ;     586 {
                                 ;     587 DaemonTaskMessage_t xMessage;
                                 ;     588 Timer_t *pxTimer;
                                 ;     589 BaseType_t xTimerListsWereSwitched, xResult;
                                 ;     590 TickType_t xTimeNow;
                                 ;     591 
                                 ;     592 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not i
                                 ;     593 	{
                                 ;     594 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
                                 ;     595 		{
                                 ;     596 			/* Negative commands are pended function calls rather than timer
                                 ;     597 			commands. */
                                 ;     598 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",598
00000303 EC01                    		MOV.L [R0], R1
00000305 69F1                    		SHLR #1FH, R1
00000307 6101                    		CMP #00H, R1
00000309 20rr                    		BEQ L112
0000030B                         L108:	; bb8
                                 ;     599 			{
                                 ;     600 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",600
0000030B 710104                  		ADD #04H, R0, R1
0000030E A201                    		MOV.L R1, 20H[R0]
00000310                         L109:	; bb8.split
                                 ;     601 
                                 ;     602 				/* The timer uses the xCallbackParameters member to request a
                                 ;     603 				callback be executed.  Check the callback is not NULL. */
                                 ;     604 				configASSERT( pxCallback );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",604
00000310 AA01                    		MOV.L 20H[R0], R1
00000312 6101                    		CMP #00H, R1
00000314 18                   S  		BNE L111
00000315                         L110:	; bb11
00000315 05rrrrrr             A  		BSR _vAssertCalled
00000319                         L111:	; bb15
                                 ;     605 
                                 ;     606 				/* Call the function. */
                                 ;     607 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",607
00000319 AA03                    		MOV.L 20H[R0], R3
0000031B A8B2                    		MOV.L 08H[R3], R2
0000031D A839                    		MOV.L 04H[R3], R1
0000031F EC3E                    		MOV.L [R3], R14
00000321 7F1E                    		JSR R14
00000323                         L112:	; bb32
                                 ;     608 			}
                                 ;     609 			else
                                 ;     610 			{
                                 ;     611 				mtCOVERAGE_TEST_MARKER();
                                 ;     612 			}
                                 ;     613 		}
                                 ;     614 		#endif /* INCLUDE_xTimerPendFunctionCall */
                                 ;     615 
                                 ;     616 		/* Commands that are positive are timer commands rather than pended
                                 ;     617 		function calls. */
                                 ;     618 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",618
00000323 EC01                    		MOV.L [R0], R1
00000325 6101                    		CMP #00H, R1
00000327 28rr                  * 		BLT L133
         38rrrr                  
0000032C                         L113:	; bb33
                                 ;     619 		{
                                 ;     620 			/* The messages uses the xTimerParameters member to work on a
                                 ;     621 			software timer. */
                                 ;     622 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",622
0000032C E5000204                		MOV.L 08H[R0], 10H[R0]
00000330                         L114:	; bb33.split
                                 ;     623 
                                 ;     624 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",624
00000330 A901                    		MOV.L 10H[R0], R1
00000332 A919                    		MOV.L 14H[R1], R1
00000334 6101                    		CMP #00H, R1
00000336 10                   S  		BEQ L116
00000337                         L115:	; bb40
                                 ;     625 			{
                                 ;     626 				/* The timer is in a list, remove it. */
                                 ;     627 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",627
00000337 A901                    		MOV.L 10H[R0], R1
00000339 6241                    		ADD #04H, R1
0000033B 05rrrrrr             A  		BSR _uxListRemove
0000033F                         L116:	; bb54
0000033F 710114                  		ADD #14H, R0, R1
                                 ;     628 			}
                                 ;     629 			else
                                 ;     630 			{
                                 ;     631 				mtCOVERAGE_TEST_MARKER();
                                 ;     632 			}
                                 ;     633 
                                 ;     634 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageValue );
                                 ;     635 
                                 ;     636 			/* In this case the xTimerListsWereSwitched parameter is not used, but
                                 ;     637 			it must be present in the function call.  prvSampleTimeNow() must be
                                 ;     638 			called after the message is received from xTimerQueue so there is no
                                 ;     639 			possibility of a higher priority task adding a message to the message
                                 ;     640 			queue with a time that is ahead of the timer daemon task (because it
                                 ;     641 			pre-empted the timer daemon task after the xTimeNow value was set). */
                                 ;     642 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",642
00000342 39rrrr               W  		BSR __$prvSampleTimeNow
00000345 A189                    		MOV.L R1, 1CH[R0]
00000347                         L117:	; bb54.split
                                 ;     643 
                                 ;     644 			switch( xMessage.xMessageID )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",644
00000347 EC01                    		MOV.L [R0], R1
00000349 6191                    		CMP #09H, R1
0000034B 20rr                    		BEQ L128
0000034D                         L118:	; bb54.split
0000034D 6141                    		CMP #04H, R1
0000034F 20rr                    		BEQ L128
00000351                         L119:	; bb54.split
00000351 6151                    		CMP #05H, R1
00000353 20rr                    		BEQ L132
00000355                         L120:	; bb54.split
00000355 711EFA                  		ADD #0FFFFFFFAH, R1, R14
00000358 612E                    		CMP #02H, R14
0000035A 23rr                    		BLTU L122
0000035C                         L121:	; bb54.split
0000035C 6121                    		CMP #02H, R1
0000035E 24rr                    		BGTU L133
00000360                         L122:	; bb59
                                 ;     645 			{
                                 ;     646 				case tmrCOMMAND_START :
                                 ;     647 			    case tmrCOMMAND_START_FROM_ISR :
                                 ;     648 			    case tmrCOMMAND_RESET :
                                 ;     649 			    case tmrCOMMAND_RESET_FROM_ISR :
                                 ;     650 				case tmrCOMMAND_START_DONT_TRACE :
                                 ;     651 					/* Start or restart a timer. */
                                 ;     652 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTim
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",652
00000360 A80C                    		MOV.L 04H[R0], R4
00000362 A901                    		MOV.L 10H[R0], R1
00000364 EF42                    		MOV.L R4, R2
00000366 06891206                		ADD 18H[R1].L, R2
0000036A A98B                    		MOV.L 1CH[R0], R3
0000036C 39rrrr               W  		BSR __$prvInsertTimerInActiveList
0000036F 6111                    		CMP #01H, R1
00000371 21rr                    		BNE L133
00000373                         L123:	; bb60
                                 ;     653 					{
                                 ;     654 						/* The timer expired before it was added to the active
                                 ;     655 						timer list.  Process it now. */
                                 ;     656 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",656
00000373 A901                    		MOV.L 10H[R0], R1
00000375 AA1A                    		MOV.L 24H[R1], R2
00000377 7F12                    		JSR R2
00000379                         L124:	; bb60.split
                                 ;     657 						traceTIMER_EXPIRED( pxTimer );
                                 ;     658 
                                 ;     659 						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",659
00000379 A901                    		MOV.L 10H[R0], R1
0000037B A999                    		MOV.L 1CH[R1], R1
0000037D 6111                    		CMP #01H, R1
0000037F 21rr                    		BNE L133
00000381                         L125:	; bb67
                                 ;     660 						{
                                 ;     661 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessa
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",661
00000381 A901                    		MOV.L 10H[R0], R1
00000383 A993                    		MOV.L 18H[R1], R3
00000385 06890301                		ADD 04H[R0].L, R3
00000389 6040                    		SUB #04H, R0
0000038B F80600                  		MOV.L #00000000H, [R0]
0000038E 6602                    		MOV.L #00000000H, R2
00000390 EF24                    		MOV.L R2, R4
00000392 39rrrr               W  		BSR _xTimerGenericCommand
00000395 6240                    		ADD #04H, R0
00000397 A181                    		MOV.L R1, 18H[R0]
00000399                         L126:	; bb67.split
                                 ;     662 							configASSERT( xResult );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",662
00000399 A981                    		MOV.L 18H[R0], R1
0000039B 6101                    		CMP #00H, R1
0000039D 21rr                    		BNE L133
0000039F                         L127:	; bb81
0000039F 05rrrrrr             A  		BSR _vAssertCalled
000003A3 2Err                 B  		BRA L133
000003A5                         L128:	; bb119
                                 ;     663 							( void ) xResult;
                                 ;     664 						}
                                 ;     665 						else
                                 ;     666 						{
                                 ;     667 							mtCOVERAGE_TEST_MARKER();
                                 ;     668 						}
                                 ;     669 					}
                                 ;     670 					else
                                 ;     671 					{
                                 ;     672 						mtCOVERAGE_TEST_MARKER();
                                 ;     673 					}
                                 ;     674 					break;
                                 ;     675 
                                 ;     676 				case tmrCOMMAND_STOP :
                                 ;     677 				case tmrCOMMAND_STOP_FROM_ISR :
                                 ;     678 					/* The timer has already been removed from the active list.
                                 ;     679 					There is nothing to do here. */
                                 ;     680 					break;
                                 ;     681 
                                 ;     682 				case tmrCOMMAND_CHANGE_PERIOD :
                                 ;     683 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                                 ;     684 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",684
000003A5 A809                    		MOV.L 04H[R0], R1
000003A7 A902                    		MOV.L 10H[R0], R2
000003A9 A1A1                    		MOV.L R1, 18H[R2]
000003AB                         L129:	; bb119.split
                                 ;     685 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",685
000003AB A901                    		MOV.L 10H[R0], R1
000003AD A991                    		MOV.L 18H[R1], R1
000003AF 6101                    		CMP #00H, R1
000003B1 18                   S  		BNE L131
000003B2                         L130:	; bb128
000003B2 05rrrrrr             A  		BSR _vAssertCalled
000003B6                         L131:	; bb137
                                 ;     686 
                                 ;     687 					/* The new period does not really have a reference, and can be
                                 ;     688 					longer or shorter than the old one.  The command time is
                                 ;     689 					therefore set to the current time, and as the period cannot be
                                 ;     690 					zero the next expiry time can only be in the future, meaning
                                 ;     691 					(unlike for the xTimerStart() case above) there is no fail case
                                 ;     692 					that needs to be handled here. */
                                 ;     693 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",693
000003B6 A98B                    		MOV.L 1CH[R0], R3
000003B8 A901                    		MOV.L 10H[R0], R1
000003BA EF32                    		MOV.L R3, R2
000003BC 06891206                		ADD 18H[R1].L, R2
000003C0 EF34                    		MOV.L R3, R4
000003C2 39rrrr               W  		BSR __$prvInsertTimerInActiveList
000003C5 08                   S  		BRA L133
000003C6                         L132:	; bb147
                                 ;     694 					break;
                                 ;     695 
                                 ;     696 				case tmrCOMMAND_DELETE :
                                 ;     697 					/* The timer has already been removed from the active list,
                                 ;     698 					just free up the memory. */
                                 ;     699 					vPortFree( pxTimer );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",699
000003C6 A901                    		MOV.L 10H[R0], R1
000003C8 05rrrrrr             A  		BSR _vPortFree
000003CC                         L133:	; bb158
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",592
000003CC FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
000003D2 ECE1                    		MOV.L [R14], R1
000003D4 6603                    		MOV.L #00000000H, R3
000003D6 EF02                    		MOV.L R0, R2
000003D8 EF34                    		MOV.L R3, R4
000003DA 05rrrrrr             A  		BSR _xQueueGenericReceive
000003DE 6101                    		CMP #00H, R1
000003E0 3Brrrr               W  		BNE L107
000003E3                         L134:	; return
                                 ;     700 					break;
                                 ;     701 
                                 ;     702 				default	:
                                 ;     703 					/* Don't expect to get here. */
                                 ;     704 					break;
                                 ;     705 			}
                                 ;     706 		}
                                 ;     707 	}
                                 ;     708 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",708
000003E3 6709                    		RTSD #24H
000003E5                         __$prvSwitchTimerLists:
                                 		.STACK	__$prvSwitchTimerLists=28
                                 ;     709 /*-----------------------------------------------------------*/
                                 ;     710 
                                 ;     711 static void prvSwitchTimerLists( void )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",711
000003E5 7100EC                  		ADD #0FFFFFFECH, R0
000003E8 2Err                 B  		BRA L149
000003EA                         L136:	; bb
                                 ;     712 {
                                 ;     713 TickType_t xNextExpireTime, xReloadTime;
                                 ;     714 List_t *pxTemp;
                                 ;     715 Timer_t *pxTimer;
                                 ;     716 BaseType_t xResult;
                                 ;     717 
                                 ;     718 	/* The tick count has overflowed.  The timer lists must be switched.
                                 ;     719 	If there are any timers still referenced from the current timer list
                                 ;     720 	then they must have expired and should be processed before the lists
                                 ;     721 	are switched. */
                                 ;     722 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
                                 ;     723 	{
                                 ;     724 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",724
000003EA A899                    		MOV.L 0CH[R1], R1
000003EC E010                    		MOV.L [R1], [R0]
000003EE                         L137:	; bb.split
                                 ;     725 
                                 ;     726 		/* Remove the timer from the list. */
                                 ;     727 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",727
000003EE FBE2rrrrrrrr            		MOV.L #__$pxCurrentTimerList, R14
000003F4 ECE1                    		MOV.L [R14], R1
000003F6 A899                    		MOV.L 0CH[R1], R1
000003F8 E5100303                		MOV.L 0CH[R1], 0CH[R0]
000003FC                         L138:	; bb.split1
                                 ;     728 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",728
000003FC A889                    		MOV.L 0CH[R0], R1
000003FE 6241                    		ADD #04H, R1
00000400 05rrrrrr             A  		BSR _uxListRemove
00000404                         L139:	; bb.split2
                                 ;     729 		traceTIMER_EXPIRED( pxTimer );
                                 ;     730 
                                 ;     731 		/* Execute its callback, then send a command to restart the timer if
                                 ;     732 		it is an auto-reload timer.  It cannot be restarted here as the lists
                                 ;     733 		have not yet been switched. */
                                 ;     734 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",734
00000404 A889                    		MOV.L 0CH[R0], R1
00000406 AA1A                    		MOV.L 24H[R1], R2
00000408 7F12                    		JSR R2
0000040A                         L140:	; bb.split3
                                 ;     735 
                                 ;     736 		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",736
0000040A A889                    		MOV.L 0CH[R0], R1
0000040C A999                    		MOV.L 1CH[R1], R1
0000040E 6111                    		CMP #01H, R1
00000410 21rr                    		BNE L149
00000412                         L141:	; bb27
                                 ;     737 		{
                                 ;     738 			/* Calculate the reload value, and if the reload value results in
                                 ;     739 			the timer going into the same timer list then it has already expired
                                 ;     740 			and the timer should be re-inserted into the current list so it is
                                 ;     741 			processed again within this loop.  Otherwise a command should be sent
                                 ;     742 			to restart the timer to ensure it is only inserted into a list after
                                 ;     743 			the lists have been swapped. */
                                 ;     744 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",744
00000412 A889                    		MOV.L 0CH[R0], R1
00000414 A991                    		MOV.L 18H[R1], R1
00000416 068801                  		ADD [R0].L, R1
00000419 A009                    		MOV.L R1, 04H[R0]
0000041B                         L142:	; bb27.split
                                 ;     745 			if( xReloadTime > xNextExpireTime )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",745
0000041B A809                    		MOV.L 04H[R0], R1
0000041D 068401                  		CMP [R0].L, R1
00000420 A889                    		MOV.L 0CH[R0], R1
00000422 25rr                    		BLEU L146
00000424                         L143:	; bb34
                                 ;     746 			{
                                 ;     747 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",747
00000424 E5010101                		MOV.L 04H[R0], 04H[R1]
00000428                         L144:	; bb34.split
                                 ;     748 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",748
00000428 A889                    		MOV.L 0CH[R0], R1
0000042A A111                    		MOV.L R1, 10H[R1]
0000042C                         L145:	; bb34.split4
                                 ;     749 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",749
0000042C FBE2rrrrrrrr            		MOV.L #__$pxCurrentTimerList, R14
00000432 ECE1                    		MOV.L [R14], R1
00000434 A88A                    		MOV.L 0CH[R0], R2
00000436 6242                    		ADD #04H, R2
00000438 05rrrrrr             A  		BSR _vListInsert
0000043C 2Err                 B  		BRA L149
0000043E                         L146:	; bb47
                                 ;     750 			}
                                 ;     751 			else
                                 ;     752 			{
                                 ;     753 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",753
0000043E EC03                    		MOV.L [R0], R3
00000440 6040                    		SUB #04H, R0
00000442 F80600                  		MOV.L #00000000H, [R0]
00000445 6602                    		MOV.L #00000000H, R2
00000447 EF24                    		MOV.L R2, R4
00000449 39rrrr               W  		BSR _xTimerGenericCommand
0000044C 6240                    		ADD #04H, R0
0000044E A101                    		MOV.L R1, 10H[R0]
00000450                         L147:	; bb47.split
                                 ;     754 				configASSERT( xResult );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",754
00000450 A901                    		MOV.L 10H[R0], R1
00000452 6101                    		CMP #00H, R1
00000454 18                   S  		BNE L149
00000455                         L148:	; bb53
00000455 05rrrrrr             A  		BSR _vAssertCalled
00000459                         L149:	; bb73
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",722
00000459 FBE2rrrrrrrr            		MOV.L #__$pxCurrentTimerList, R14
0000045F ECE1                    		MOV.L [R14], R1
00000461 EC1E                    		MOV.L [R1], R14
00000463 610E                    		CMP #00H, R14
00000465 21rr                    		BNE L136
00000467                         L150:	; bb82
                                 ;     755 				( void ) xResult;
                                 ;     756 			}
                                 ;     757 		}
                                 ;     758 		else
                                 ;     759 		{
                                 ;     760 			mtCOVERAGE_TEST_MARKER();
                                 ;     761 		}
                                 ;     762 	}
                                 ;     763 
                                 ;     764 	pxTemp = pxCurrentTimerList;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",764
00000467 A081                    		MOV.L R1, 08H[R0]
00000469                         L151:	; bb82.split
                                 ;     765 	pxCurrentTimerList = pxOverflowTimerList;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",765
00000469 FBE2rrrrrrrr            		MOV.L #__$pxCurrentTimerList, R14
0000046F FBF2rrrrrrrr            		MOV.L #__$pxOverflowTimerList, R15
00000475 E0FE                    		MOV.L [R15], [R14]
00000477                         L152:	; bb82.split5
                                 ;     766 	pxOverflowTimerList = pxTemp;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",766
00000477 FBE2rrrrrrrr            		MOV.L #__$pxOverflowTimerList, R14
0000047D E10E02                  		MOV.L 08H[R0], [R14]
00000480 6705                    		RTSD #14H
00000482                         __$prvCheckForValidListAndQueue:
                                 		.STACK	__$prvCheckForValidListAndQueue=4
                                 ;     767 }
                                 ;     768 /*-----------------------------------------------------------*/
                                 ;     769 
                                 ;     770 static void prvCheckForValidListAndQueue( void )
                                 ;     771 {
                                 ;     772 	/* Check that the list from which active timers are referenced, and the
                                 ;     773 	queue used to communicate with the timer service, have been
                                 ;     774 	initialised. */
                                 ;     775 	taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",775
00000482 05rrrrrr             A  		BSR _vTaskEnterCritical
00000486                         L154:	; entry.split
                                 ;     776 	{
                                 ;     777 		if( xTimerQueue == NULL )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",777
00000486 FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
0000048C ECEE                    		MOV.L [R14], R14
0000048E 610E                    		CMP #00H, R14
00000490 21rr                    		BNE L162
00000492                         L155:	; bb1
                                 ;     778 		{
                                 ;     779 			vListInitialise( &xActiveTimerList1 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",779
00000492 FB12rrrrrrrr            		MOV.L #__$xActiveTimerList1, R1
00000498 05rrrrrr             A  		BSR _vListInitialise
0000049C                         L156:	; bb1.split
                                 ;     780 			vListInitialise( &xActiveTimerList2 );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",780
0000049C FB12rrrrrrrr            		MOV.L #__$xActiveTimerList2, R1
000004A2 05rrrrrr             A  		BSR _vListInitialise
000004A6                         L157:	; bb1.split1
                                 ;     781 			pxCurrentTimerList = &xActiveTimerList1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",781
000004A6 FBE2rrrrrrrr            		MOV.L #__$pxCurrentTimerList, R14
000004AC FBF2rrrrrrrr            		MOV.L #__$xActiveTimerList1, R15
000004B2 E3EF                    		MOV.L R15, [R14]
000004B4                         L158:	; bb1.split2
                                 ;     782 			pxOverflowTimerList = &xActiveTimerList2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",782
000004B4 FBE2rrrrrrrr            		MOV.L #__$pxOverflowTimerList, R14
000004BA FBF2rrrrrrrr            		MOV.L #__$xActiveTimerList2, R15
000004C0 E3EF                    		MOV.L R15, [R14]
000004C2                         L159:	; bb1.split3
000004C2 6603                    		MOV.L #00000000H, R3
000004C4 754210                  		MOV.L #00000010H, R2
000004C7 6651                    		MOV.L #00000005H, R1
                                 ;     783 			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",783
000004C9 05rrrrrr             A  		BSR _xQueueGenericCreate
000004CD FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
000004D3 E3E1                    		MOV.L R1, [R14]
000004D5                         L160:	; bb1.split4
                                 ;     784 			configASSERT( xTimerQueue );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",784
000004D5 FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
000004DB ECEE                    		MOV.L [R14], R14
000004DD 610E                    		CMP #00H, R14
000004DF 18                   S  		BNE L162
000004E0                         L161:	; bb3
000004E0 05rrrrrr             A  		BSR _vAssertCalled
000004E4                         L162:	; bb13
                                 ;     785 
                                 ;     786 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
                                 ;     787 			{
                                 ;     788 				if( xTimerQueue != NULL )
                                 ;     789 				{
                                 ;     790 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
                                 ;     791 				}
                                 ;     792 				else
                                 ;     793 				{
                                 ;     794 					mtCOVERAGE_TEST_MARKER();
                                 ;     795 				}
                                 ;     796 			}
                                 ;     797 			#endif /* configQUEUE_REGISTRY_SIZE */
                                 ;     798 		}
                                 ;     799 		else
                                 ;     800 		{
                                 ;     801 			mtCOVERAGE_TEST_MARKER();
                                 ;     802 		}
                                 ;     803 	}
                                 ;     804 	taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",804
000004E4 05rrrrrr             A  		BSR _vTaskExitCritical
000004E8 02                      		RTS
000004E9                         _xTimerIsTimerActive:
                                 		.STACK	_xTimerIsTimerActive=24
                                 ;     805 }
                                 ;     806 /*-----------------------------------------------------------*/
                                 ;     807 
                                 ;     808 BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",808
000004E9 7100EC                  		ADD #0FFFFFFECH, R0
000004EC A101                    		MOV.L R1, 10H[R0]
                                 ;     809 {
                                 ;     810 BaseType_t xTimerIsInActiveList;
                                 ;     811 Timer_t *pxTimer = ( Timer_t * ) xTimer;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",811
000004EE A081                    		MOV.L R1, 08H[R0]
000004F0                         L164:	; entry.split
                                 ;     812 
                                 ;     813 	/* Is the timer in the list of active timers? */
                                 ;     814 	taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",814
000004F0 05rrrrrr             A  		BSR _vTaskEnterCritical
000004F4                         L165:	; entry.split1
                                 ;     815 	{
                                 ;     816 		/* Checking to see if it is in the NULL list in effect checks to see if
                                 ;     817 		it is referenced from either the current or the overflow timer lists in
                                 ;     818 		one go, but the logic has to be reversed, hence the '!'. */
                                 ;     819 		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",819
000004F4 A881                    		MOV.L 08H[R0], R1
000004F6 A919                    		MOV.L 14H[R1], R1
000004F8 6101                    		CMP #00H, R1
000004FA 18                   S  		BNE L167
000004FB                         L166:	; bb
000004FB F80600                  		MOV.L #00000000H, [R0]
000004FE 08                   S  		BRA L168
000004FF                         L167:	; bb14
000004FF F80601                  		MOV.L #00000001H, [R0]
00000502                         L168:	; bb15
00000502 E40001                  		MOV.L [R0], 04H[R0]
                                 ;     820 	}
                                 ;     821 	taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",821
00000505 05rrrrrr             A  		BSR _vTaskExitCritical
00000509                         L169:	; bb15.split
                                 ;     822 
                                 ;     823 	return xTimerIsInActiveList;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",823
00000509 A809                    		MOV.L 04H[R0], R1
0000050B A089                    		MOV.L R1, 0CH[R0]
0000050D                         L170:	; bb15.split2
                                 ;     824 } /*lint !e818 Can't be pointer to const due to the typedef. */
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",824
0000050D 6705                    		RTSD #14H
0000050F                         _pvTimerGetTimerID:
                                 		.STACK	_pvTimerGetTimerID=20
                                 ;     825 /*-----------------------------------------------------------*/
                                 ;     826 
                                 ;     827 void *pvTimerGetTimerID( const TimerHandle_t xTimer )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",827
0000050F 7100F0                  		ADD #0FFFFFFF0H, R0
00000512 A089                    		MOV.L R1, 0CH[R0]
                                 ;     828 {
                                 ;     829 Timer_t * const pxTimer = ( Timer_t * ) xTimer;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",829
00000514 E301                    		MOV.L R1, [R0]
00000516                         L172:	; entry.split
                                 ;     830 void *pvReturn;
                                 ;     831 
                                 ;     832 	configASSERT( xTimer );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",832
00000516 A889                    		MOV.L 0CH[R0], R1
00000518 6101                    		CMP #00H, R1
0000051A 18                   S  		BNE L174
0000051B                         L173:	; bb6
0000051B 05rrrrrr             A  		BSR _vAssertCalled
0000051F                         L174:	; bb10
                                 ;     833 
                                 ;     834 	taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",834
0000051F 05rrrrrr             A  		BSR _vTaskEnterCritical
00000523                         L175:	; bb10.split
                                 ;     835 	{
                                 ;     836 		pvReturn = pxTimer->pvTimerID;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",836
00000523 EC01                    		MOV.L [R0], R1
00000525 E5100801                		MOV.L 20H[R1], 04H[R0]
00000529                         L176:	; bb10.split1
                                 ;     837 	}
                                 ;     838 	taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",838
00000529 05rrrrrr             A  		BSR _vTaskExitCritical
0000052D                         L177:	; bb10.split2
                                 ;     839 
                                 ;     840 	return pvReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",840
0000052D A809                    		MOV.L 04H[R0], R1
0000052F A081                    		MOV.L R1, 08H[R0]
00000531                         L178:	; bb10.split3
                                 ;     841 }
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",841
00000531 6704                    		RTSD #10H
00000533                         _vTimerSetTimerID:
                                 		.STACK	_vTimerSetTimerID=16
                                 ;     842 /*-----------------------------------------------------------*/
                                 ;     843 
                                 ;     844 void vTimerSetTimerID( const TimerHandle_t xTimer, void *pvNewID )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",844
00000533 60C0                    		SUB #0CH, R0
00000535 A081                    		MOV.L R1, 08H[R0]
00000537 A00A                    		MOV.L R2, 04H[R0]
                                 ;     845 {
                                 ;     846 Timer_t * const pxTimer = ( Timer_t * ) xTimer;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",846
00000539 E10002                  		MOV.L 08H[R0], [R0]
0000053C                         L180:	; entry.split
                                 ;     847 
                                 ;     848 	configASSERT( xTimer );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",848
0000053C A881                    		MOV.L 08H[R0], R1
0000053E 6101                    		CMP #00H, R1
00000540 18                   S  		BNE L182
00000541                         L181:	; bb5
00000541 05rrrrrr             A  		BSR _vAssertCalled
00000545                         L182:	; bb9
                                 ;     849 
                                 ;     850 	taskENTER_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",850
00000545 05rrrrrr             A  		BSR _vTaskEnterCritical
00000549                         L183:	; bb9.split
                                 ;     851 	{
                                 ;     852 		pxTimer->pvTimerID = pvNewID;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",852
00000549 A809                    		MOV.L 04H[R0], R1
0000054B EC02                    		MOV.L [R0], R2
0000054D A221                    		MOV.L R1, 20H[R2]
0000054F                         L184:	; bb9.split1
                                 ;     853 	}
                                 ;     854 	taskEXIT_CRITICAL();
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",854
0000054F 05rrrrrr             A  		BSR _vTaskExitCritical
00000553 6703                    		RTSD #0CH
00000555                         _xTimerPendFunctionCallFromISR:
                                 		.STACK	_xTimerPendFunctionCallFromISR=44
                                 ;     855 }
                                 ;     856 /*-----------------------------------------------------------*/
                                 ;     857 
                                 ;     858 #if( INCLUDE_xTimerPendFunctionCall == 1 )
                                 ;     859 
                                 ;     860 	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskW
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",860
00000555 7100D8                  		ADD #0FFFFFFD8H, R0
00000558 A209                    		MOV.L R1, 24H[R0]
0000055A A202                    		MOV.L R2, 20H[R0]
0000055C A18B                    		MOV.L R3, 1CH[R0]
0000055E A184                    		MOV.L R4, 18H[R0]
                                 ;     861 	{
                                 ;     862 	DaemonTaskMessage_t xMessage;
                                 ;     863 	BaseType_t xReturn;
                                 ;     864 
                                 ;     865 		/* Complete the message with the function parameters and post it to the
                                 ;     866 		daemon task. */
                                 ;     867 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",867
00000560 F806FE                  		MOV.L #0FFFFFFFEH, [R0]
00000563                         L186:	; entry.split
                                 ;     868 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",868
00000563 E5000901                		MOV.L 24H[R0], 04H[R0]
00000567                         L187:	; entry.split1
                                 ;     869 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",869
00000567 E5000802                		MOV.L 20H[R0], 08H[R0]
0000056B                         L188:	; entry.split2
                                 ;     870 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",870
0000056B E5000703                		MOV.L 1CH[R0], 0CH[R0]
0000056F                         L189:	; entry.split3
                                 ;     871 
                                 ;     872 		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",872
0000056F FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
00000575 ECE1                    		MOV.L [R14], R1
00000577 A983                    		MOV.L 18H[R0], R3
00000579 6604                    		MOV.L #00000000H, R4
0000057B EF02                    		MOV.L R0, R2
0000057D 05rrrrrr             A  		BSR _xQueueGenericSendFromISR
00000581 A101                    		MOV.L R1, 10H[R0]
00000583                         L190:	; entry.split4
                                 ;     873 
                                 ;     874 		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
                                 ;     875 
                                 ;     876 		return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",876
00000583 A901                    		MOV.L 10H[R0], R1
00000585 A109                    		MOV.L R1, 14H[R0]
00000587                         L191:	; entry.split5
                                 ;     877 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",877
00000587 670A                    		RTSD #28H
00000589                         _xTimerPendFunctionCall:
                                 		.STACK	_xTimerPendFunctionCall=44
                                 ;     878 
                                 ;     879 #endif /* INCLUDE_xTimerPendFunctionCall */
                                 ;     880 /*-----------------------------------------------------------*/
                                 ;     881 
                                 ;     882 #if( INCLUDE_xTimerPendFunctionCall == 1 )
                                 ;     883 
                                 ;     884 	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait )
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",884
00000589 7100D8                  		ADD #0FFFFFFD8H, R0
0000058C A209                    		MOV.L R1, 24H[R0]
0000058E A202                    		MOV.L R2, 20H[R0]
00000590 A18B                    		MOV.L R3, 1CH[R0]
00000592 A184                    		MOV.L R4, 18H[R0]
                                 ;     885 	{
                                 ;     886 	DaemonTaskMessage_t xMessage;
                                 ;     887 	BaseType_t xReturn;
                                 ;     888 
                                 ;     889 		/* This function can only be called after a timer has been created or
                                 ;     890 		after the scheduler has been started because, until then, the timer
                                 ;     891 		queue does not exist. */
                                 ;     892 		configASSERT( xTimerQueue );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",892
00000594 FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
0000059A ECEE                    		MOV.L [R14], R14
0000059C 610E                    		CMP #00H, R14
0000059E 18                   S  		BNE L194
0000059F                         L193:	; bb7
0000059F 05rrrrrr             A  		BSR _vAssertCalled
000005A3                         L194:	; bb11
                                 ;     893 
                                 ;     894 		/* Complete the message with the function parameters and post it to the
                                 ;     895 		daemon task. */
                                 ;     896 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",896
000005A3 F806FF                  		MOV.L #0FFFFFFFFH, [R0]
000005A6                         L195:	; bb11.split
                                 ;     897 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",897
000005A6 E5000901                		MOV.L 24H[R0], 04H[R0]
000005AA                         L196:	; bb11.split1
                                 ;     898 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",898
000005AA E5000802                		MOV.L 20H[R0], 08H[R0]
000005AE                         L197:	; bb11.split2
                                 ;     899 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",899
000005AE E5000703                		MOV.L 1CH[R0], 0CH[R0]
000005B2                         L198:	; bb11.split3
                                 ;     900 
                                 ;     901 		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",901
000005B2 FBE2rrrrrrrr            		MOV.L #__$xTimerQueue, R14
000005B8 ECE1                    		MOV.L [R14], R1
000005BA A983                    		MOV.L 18H[R0], R3
000005BC 6604                    		MOV.L #00000000H, R4
000005BE EF02                    		MOV.L R0, R2
000005C0 05rrrrrr             A  		BSR _xQueueGenericSend
000005C4 A101                    		MOV.L R1, 10H[R0]
000005C6                         L199:	; bb11.split4
                                 ;     902 
                                 ;     903 		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
                                 ;     904 
                                 ;     905 		return xReturn;
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",905
000005C6 A901                    		MOV.L 10H[R0], R1
000005C8 A109                    		MOV.L R1, 14H[R0]
000005CA                         L200:	; bb11.split5
                                 ;     906 	}
                                 		.LINE  "C:\Workspace\e2studio\git\MT01\FreeRTOS\Source\timers.c",906
000005CA 670A                    		RTSD #28H
                                 ;     907 
                                 ;     908 #endif /* INCLUDE_xTimerPendFunctionCall */
                                 ;     909 /*-----------------------------------------------------------*/
                                 ;     910 
                                 ;     911 /* This entire source file will be skipped if the application is not configured
                                 ;     912 to include software timer functionality.  If you want to include software timer
                                 ;     913 functionality then ensure configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
                                 ;     914 #endif /* configUSE_TIMERS == 1 */
                                 ;     915 
                                 ;     916 
                                 ;     917 
                                 		.SECTION	L,ROMDATA,ALIGN=4
00000000                         _L10:
00000000 546D7220                		.byte	"Tmr Svc"
         537663                  
00000007 00                      		.byte	00H
                                 		.SECTION	D,ROMDATA,ALIGN=4
00000000                         __$xTimerQueue:
00000000 00000000                		.lword	00000000H
00000004                         __$xLastTime$1:
00000004 00000000                		.lword	00000000H
                                 		.SECTION	B,DATA,ALIGN=4
00000000                         __$xActiveTimerList1:
00000000(00000014H)              		.blkl	5
00000014                         __$xActiveTimerList2:
00000014(00000014H)              		.blkl	5
00000028                         __$pxCurrentTimerList:
00000028(00000004H)              		.blkl	1
0000002C                         __$pxOverflowTimerList:
0000002C(00000004H)              		.blkl	1
                                 		.END

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     01961   LINES

Section List

Attr         Size               Name
CODE     0000001484(000005CCH)  P
ROMDATA  0000000008(00000008H)  L
ROMDATA  0000000008(00000008H)  D
DATA     0000000048(00000030H)  B

Cpu Type

-ISA=RXV1 -FPU

Command Parameter

-subcommand=C:\Users\LAFONS~1\AppData\Local\Temp\$ccrx124\$ccrx\timers.src.cmd
    -nologo
    -isa=rxv1
    -fpu
    -show=conditionals,definitions,expansions
    -define=__RXV1=1
    -fint_register=0
    -debug
    -endian=little
-listfile=C:\Workspace\e2studio\git\MT01\EasyMak_build\timers.lst
-output=C:\Workspace\e2studio\git\MT01\EasyMak_build\FreeRTOS\Source\timers.obj
